
mazecrase-car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800d868  0800d868  0000e868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcd4  0800dcd4  0000f2cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dcd4  0800dcd4  0000ecd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dcdc  0800dcdc  0000f2cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcdc  0800dcdc  0000ecdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dce0  0800dce0  0000ece0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  0800dce4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f20  200002cc  0800dfb0  0000f2cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021ec  0800dfb0  000101ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178e4  00000000  00000000  0000f2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cbf  00000000  00000000  00026be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  0002a8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001066  00000000  00000000  0002be00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005e22  00000000  00000000  0002ce66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2a1  00000000  00000000  00032c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095612  00000000  00000000  0004cf29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e253b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ad8  00000000  00000000  000e2580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e9058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d850 	.word	0x0800d850

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800d850 	.word	0x0800d850

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <my_printf>:
#define BUFFER_LEN 128
//uint8_t tx_buffer[BUFFER_LEN];
//uint16_t usbTxLength;

static inline void my_printf(const char *format, ...)
{
 8000ee4:	b40f      	push	{r0, r1, r2, r3}
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b0a2      	sub	sp, #136	@ 0x88
 8000eea:	af00      	add	r7, sp, #0
    char tx_buffer[BUFFER_LEN];
    va_list args;
    va_start(args, format);
 8000eec:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ef0:	603b      	str	r3, [r7, #0]
    int usbTxLength = vsnprintf(tx_buffer, BUFFER_LEN, format, args);
 8000ef2:	1d38      	adds	r0, r7, #4
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000efa:	2180      	movs	r1, #128	@ 0x80
 8000efc:	f00a fbcc 	bl	800b698 <vsniprintf>
 8000f00:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    va_end(args);

    if (usbTxLength > 0 && usbTxLength < BUFFER_LEN)
 8000f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	dd0b      	ble.n	8000f24 <my_printf+0x40>
 8000f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f10:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f12:	dc07      	bgt.n	8000f24 <my_printf+0x40>
    {
        CDC_Transmit_FS((uint8_t *)tx_buffer, usbTxLength);
 8000f14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f009 f9de 	bl	800a2e0 <CDC_Transmit_FS>
    }
}
 8000f24:	bf00      	nop
 8000f26:	3788      	adds	r7, #136	@ 0x88
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f2e:	b004      	add	sp, #16
 8000f30:	4770      	bx	lr
	...

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08e      	sub	sp, #56	@ 0x38
 8000f38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f001 fa11 	bl	8002360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f8ef 	bl	8001120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 fb9d 	bl	8001680 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f46:	f000 f953 	bl	80011f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f4a:	f000 f97f 	bl	800124c <MX_I2C2_Init>
  MX_TIM1_Init();
 8000f4e:	f000 f9ab 	bl	80012a8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000f52:	f000 faed 	bl	8001530 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000f56:	f000 fb3f 	bl	80015d8 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8000f5a:	f009 f8b3 	bl	800a0c4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000f5e:	f000 fa4f 	bl	8001400 <MX_TIM2_Init>
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // PB13 HIGH
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // PB12 LOW
//  HAL_GPIO_WritePin(GPIOA, motor_stdby_Pin, GPIO_PIN_SET); // make standby pin high, activate the motor driver


  selectTCAChannel(0);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 ffee 	bl	8001f44 <selectTCAChannel>
  TCS34725_t tcs34725_sensor;
  tcs32725_begin(&tcs34725_sensor, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8000f68:	f107 0320 	add.w	r3, r7, #32
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	21f6      	movs	r1, #246	@ 0xf6
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 f8ad 	bl	80020d0 <tcs32725_begin>
  selectTCAChannel(1);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f000 ffe4 	bl	8001f44 <selectTCAChannel>
  TCS34725_t tcs34725_sensor1;
  tcs32725_begin(&tcs34725_sensor1, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	2200      	movs	r2, #0
 8000f82:	21f6      	movs	r1, #246	@ 0xf6
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 f8a3 	bl	80020d0 <tcs32725_begin>
  selectTCAChannel(2);
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	f000 ffda 	bl	8001f44 <selectTCAChannel>
  TCS34725_t tcs34725_sensor2;
  tcs32725_begin(&tcs34725_sensor2, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8000f90:	f107 0318 	add.w	r3, r7, #24
 8000f94:	2200      	movs	r2, #0
 8000f96:	21f6      	movs	r1, #246	@ 0xf6
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 f899 	bl	80020d0 <tcs32725_begin>
  float r, g, b;
  uint32_t count = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c


  uint8_t dev_id = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	72fb      	strb	r3, [r7, #11]
  uint8_t whoami = 0x0F;
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	72bb      	strb	r3, [r7, #10]
  HAL_I2C_Master_Transmit(&hi2c2, 0x6B << 1, &whoami, 1, 100);
 8000faa:	f107 020a 	add.w	r2, r7, #10
 8000fae:	2364      	movs	r3, #100	@ 0x64
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	21d6      	movs	r1, #214	@ 0xd6
 8000fb6:	4855      	ldr	r0, [pc, #340]	@ (800110c <main+0x1d8>)
 8000fb8:	f001 fe5c 	bl	8002c74 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c2, 0x6B << 1, &dev_id, 1, 100);
 8000fbc:	f107 020b 	add.w	r2, r7, #11
 8000fc0:	2364      	movs	r3, #100	@ 0x64
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	21d6      	movs	r1, #214	@ 0xd6
 8000fc8:	4850      	ldr	r0, [pc, #320]	@ (800110c <main+0x1d8>)
 8000fca:	f001 ff51 	bl	8002e70 <HAL_I2C_Master_Receive>
  my_printf("my id: %d", dev_id);
 8000fce:	7afb      	ldrb	r3, [r7, #11]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	484f      	ldr	r0, [pc, #316]	@ (8001110 <main+0x1dc>)
 8000fd4:	f7ff ff86 	bl	8000ee4 <my_printf>

  motor_init();
 8000fd8:	f000 fbc2 	bl	8001760 <motor_init>
  uint8_t speed = 25;
 8000fdc:	2319      	movs	r3, #25
 8000fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  motor_direction_t dir_A = REVERSE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  motor_direction_t dir_B = FORWARD;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  int32_t tick_m_a = 0, tick_m_b = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	603b      	str	r3, [r7, #0]
  int16_t tick_m_a_short = 0, tick_m_b_short = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  selectTCAChannel(count % 3);
 8000ffe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001000:	4b44      	ldr	r3, [pc, #272]	@ (8001114 <main+0x1e0>)
 8001002:	fba3 2301 	umull	r2, r3, r3, r1
 8001006:	085a      	lsrs	r2, r3, #1
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	1aca      	subs	r2, r1, r3
 8001010:	b2d3      	uxtb	r3, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f000 ff96 	bl	8001f44 <selectTCAChannel>
	  getRGB(&r, &g, &b);
 8001018:	f107 020c 	add.w	r2, r7, #12
 800101c:	f107 0110 	add.w	r1, r7, #16
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4618      	mov	r0, r3
 8001026:	f001 f911 	bl	800224c <getRGB>
	  my_printf("RGB Values from %d: R = %d, G = %d, B = %d\r\n", count%3, (int)(r), (int)(g), (int)(b));
 800102a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800102c:	4b39      	ldr	r3, [pc, #228]	@ (8001114 <main+0x1e0>)
 800102e:	fba3 1302 	umull	r1, r3, r3, r2
 8001032:	0859      	lsrs	r1, r3, #1
 8001034:	460b      	mov	r3, r1
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	440b      	add	r3, r1
 800103a:	1ad1      	subs	r1, r2, r3
 800103c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001040:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001044:	edd7 7a04 	vldr	s15, [r7, #16]
 8001048:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800104c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001054:	ee17 3a90 	vmov	r3, s15
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	ee16 3a90 	vmov	r3, s13
 800105e:	ee17 2a10 	vmov	r2, s14
 8001062:	482d      	ldr	r0, [pc, #180]	@ (8001118 <main+0x1e4>)
 8001064:	f7ff ff3e 	bl	8000ee4 <my_printf>
	  count++;
 8001068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800106a:	3301      	adds	r3, #1
 800106c:	62fb      	str	r3, [r7, #44]	@ 0x2c

      motor_set_speed(MOTOR_A, speed);
 800106e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001072:	4619      	mov	r1, r3
 8001074:	2000      	movs	r0, #0
 8001076:	f000 fc39 	bl	80018ec <motor_set_speed>
      motor_set_speed(MOTOR_B, speed);
 800107a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800107e:	4619      	mov	r1, r3
 8001080:	2001      	movs	r0, #1
 8001082:	f000 fc33 	bl	80018ec <motor_set_speed>

      motor_control(MOTOR_A, dir_A);
 8001086:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800108a:	4619      	mov	r1, r3
 800108c:	2000      	movs	r0, #0
 800108e:	f000 fb91 	bl	80017b4 <motor_control>
      motor_control(MOTOR_B, dir_B);
 8001092:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001096:	4619      	mov	r1, r3
 8001098:	2001      	movs	r0, #1
 800109a:	f000 fb8b 	bl	80017b4 <motor_control>

      encoder_get_tick(MOTOR_A, &tick_m_a);
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	4619      	mov	r1, r3
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 fc46 	bl	8001934 <encoder_get_tick>
      encoder_get_tick(MOTOR_B, &tick_m_b);
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	2001      	movs	r0, #1
 80010ae:	f000 fc41 	bl	8001934 <encoder_get_tick>

      tick_m_a_short = (int16_t)(tick_m_a);  // Direct cast
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
      tick_m_b_short = (int16_t)(tick_m_b);  // Direct cast
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	84bb      	strh	r3, [r7, #36]	@ 0x24

      my_printf("motor a tick: %d, motor b tick: %d\r\n", tick_m_a_short, tick_m_b_short);
 80010ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80010be:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4815      	ldr	r0, [pc, #84]	@ (800111c <main+0x1e8>)
 80010c6:	f7ff ff0d 	bl	8000ee4 <my_printf>

      HAL_Delay(1000);
 80010ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010ce:	f001 f9b9 	bl	8002444 <HAL_Delay>

      // Toggle direction
      dir_A = (dir_A == FORWARD) ? REVERSE : FORWARD;
 80010d2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	bf0c      	ite	eq
 80010da:	2301      	moveq	r3, #1
 80010dc:	2300      	movne	r3, #0
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      dir_B = (dir_B == FORWARD) ? REVERSE : FORWARD;
 80010e4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	bf0c      	ite	eq
 80010ec:	2301      	moveq	r3, #1
 80010ee:	2300      	movne	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

      // Toggle speed between 25 and 50
      speed = (speed == 25) ? 40 : 25;
 80010f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80010fa:	2b19      	cmp	r3, #25
 80010fc:	d101      	bne.n	8001102 <main+0x1ce>
 80010fe:	2328      	movs	r3, #40	@ 0x28
 8001100:	e000      	b.n	8001104 <main+0x1d0>
 8001102:	2319      	movs	r3, #25
 8001104:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	  selectTCAChannel(count % 3);
 8001108:	e779      	b.n	8000ffe <main+0xca>
 800110a:	bf00      	nop
 800110c:	2000033c 	.word	0x2000033c
 8001110:	0800d868 	.word	0x0800d868
 8001114:	aaaaaaab 	.word	0xaaaaaaab
 8001118:	0800d874 	.word	0x0800d874
 800111c:	0800d8a4 	.word	0x0800d8a4

08001120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b094      	sub	sp, #80	@ 0x50
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	f107 0320 	add.w	r3, r7, #32
 800112a:	2230      	movs	r2, #48	@ 0x30
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f00a fac0 	bl	800b6b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	4b27      	ldr	r3, [pc, #156]	@ (80011e8 <SystemClock_Config+0xc8>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	4a26      	ldr	r2, [pc, #152]	@ (80011e8 <SystemClock_Config+0xc8>)
 800114e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001152:	6413      	str	r3, [r2, #64]	@ 0x40
 8001154:	4b24      	ldr	r3, [pc, #144]	@ (80011e8 <SystemClock_Config+0xc8>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001160:	2300      	movs	r3, #0
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	4b21      	ldr	r3, [pc, #132]	@ (80011ec <SystemClock_Config+0xcc>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a20      	ldr	r2, [pc, #128]	@ (80011ec <SystemClock_Config+0xcc>)
 800116a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b1e      	ldr	r3, [pc, #120]	@ (80011ec <SystemClock_Config+0xcc>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800117c:	2301      	movs	r3, #1
 800117e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001180:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001186:	2302      	movs	r3, #2
 8001188:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800118e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001190:	2319      	movs	r3, #25
 8001192:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001194:	23c0      	movs	r3, #192	@ 0xc0
 8001196:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001198:	2302      	movs	r3, #2
 800119a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800119c:	2304      	movs	r3, #4
 800119e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 fe6d 	bl	8004e84 <HAL_RCC_OscConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011b0:	f000 fad0 	bl	8001754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b4:	230f      	movs	r3, #15
 80011b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b8:	2302      	movs	r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2103      	movs	r1, #3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 f8cf 	bl	8005374 <HAL_RCC_ClockConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011dc:	f000 faba 	bl	8001754 <Error_Handler>
  }
}
 80011e0:	bf00      	nop
 80011e2:	3750      	adds	r7, #80	@ 0x50
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40007000 	.word	0x40007000

080011f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <MX_I2C1_Init+0x50>)
 80011f6:	4a13      	ldr	r2, [pc, #76]	@ (8001244 <MX_I2C1_Init+0x54>)
 80011f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011fa:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <MX_I2C1_Init+0x50>)
 80011fc:	4a12      	ldr	r2, [pc, #72]	@ (8001248 <MX_I2C1_Init+0x58>)
 80011fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001200:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <MX_I2C1_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001206:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <MX_I2C1_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800120c:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <MX_I2C1_Init+0x50>)
 800120e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001212:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001214:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <MX_I2C1_Init+0x50>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800121a:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <MX_I2C1_Init+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001220:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800122c:	4804      	ldr	r0, [pc, #16]	@ (8001240 <MX_I2C1_Init+0x50>)
 800122e:	f001 fbdd 	bl	80029ec <HAL_I2C_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001238:	f000 fa8c 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200002e8 	.word	0x200002e8
 8001244:	40005400 	.word	0x40005400
 8001248:	000186a0 	.word	0x000186a0

0800124c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <MX_I2C2_Init+0x50>)
 8001252:	4a13      	ldr	r2, [pc, #76]	@ (80012a0 <MX_I2C2_Init+0x54>)
 8001254:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001256:	4b11      	ldr	r3, [pc, #68]	@ (800129c <MX_I2C2_Init+0x50>)
 8001258:	4a12      	ldr	r2, [pc, #72]	@ (80012a4 <MX_I2C2_Init+0x58>)
 800125a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800125c:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <MX_I2C2_Init+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <MX_I2C2_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <MX_I2C2_Init+0x50>)
 800126a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800126e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001270:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <MX_I2C2_Init+0x50>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MX_I2C2_Init+0x50>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800127c:	4b07      	ldr	r3, [pc, #28]	@ (800129c <MX_I2C2_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <MX_I2C2_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	@ (800129c <MX_I2C2_Init+0x50>)
 800128a:	f001 fbaf 	bl	80029ec <HAL_I2C_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001294:	f000 fa5e 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000033c 	.word	0x2000033c
 80012a0:	40005800 	.word	0x40005800
 80012a4:	000186a0 	.word	0x000186a0

080012a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b096      	sub	sp, #88	@ 0x58
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]
 80012d6:	615a      	str	r2, [r3, #20]
 80012d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2220      	movs	r2, #32
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f00a f9e7 	bl	800b6b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e6:	4b44      	ldr	r3, [pc, #272]	@ (80013f8 <MX_TIM1_Init+0x150>)
 80012e8:	4a44      	ldr	r2, [pc, #272]	@ (80013fc <MX_TIM1_Init+0x154>)
 80012ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 80012ec:	4b42      	ldr	r3, [pc, #264]	@ (80013f8 <MX_TIM1_Init+0x150>)
 80012ee:	225f      	movs	r2, #95	@ 0x5f
 80012f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b41      	ldr	r3, [pc, #260]	@ (80013f8 <MX_TIM1_Init+0x150>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 80012f8:	4b3f      	ldr	r3, [pc, #252]	@ (80013f8 <MX_TIM1_Init+0x150>)
 80012fa:	2231      	movs	r2, #49	@ 0x31
 80012fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fe:	4b3e      	ldr	r3, [pc, #248]	@ (80013f8 <MX_TIM1_Init+0x150>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001304:	4b3c      	ldr	r3, [pc, #240]	@ (80013f8 <MX_TIM1_Init+0x150>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b3b      	ldr	r3, [pc, #236]	@ (80013f8 <MX_TIM1_Init+0x150>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001310:	4839      	ldr	r0, [pc, #228]	@ (80013f8 <MX_TIM1_Init+0x150>)
 8001312:	f004 f9fb 	bl	800570c <HAL_TIM_Base_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800131c:	f000 fa1a 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001320:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001324:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001326:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800132a:	4619      	mov	r1, r3
 800132c:	4832      	ldr	r0, [pc, #200]	@ (80013f8 <MX_TIM1_Init+0x150>)
 800132e:	f004 fe31 	bl	8005f94 <HAL_TIM_ConfigClockSource>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001338:	f000 fa0c 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800133c:	482e      	ldr	r0, [pc, #184]	@ (80013f8 <MX_TIM1_Init+0x150>)
 800133e:	f004 fa34 	bl	80057aa <HAL_TIM_PWM_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001348:	f000 fa04 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001354:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001358:	4619      	mov	r1, r3
 800135a:	4827      	ldr	r0, [pc, #156]	@ (80013f8 <MX_TIM1_Init+0x150>)
 800135c:	f005 fad8 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001366:	f000 f9f5 	bl	8001754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136a:	2360      	movs	r3, #96	@ 0x60
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001376:	2300      	movs	r3, #0
 8001378:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800138a:	2200      	movs	r2, #0
 800138c:	4619      	mov	r1, r3
 800138e:	481a      	ldr	r0, [pc, #104]	@ (80013f8 <MX_TIM1_Init+0x150>)
 8001390:	f004 fd3e 	bl	8005e10 <HAL_TIM_PWM_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800139a:	f000 f9db 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800139e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a2:	2204      	movs	r2, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4814      	ldr	r0, [pc, #80]	@ (80013f8 <MX_TIM1_Init+0x150>)
 80013a8:	f004 fd32 	bl	8005e10 <HAL_TIM_PWM_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80013b2:	f000 f9cf 	bl	8001754 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4807      	ldr	r0, [pc, #28]	@ (80013f8 <MX_TIM1_Init+0x150>)
 80013da:	f005 fb07 	bl	80069ec <HAL_TIMEx_ConfigBreakDeadTime>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80013e4:	f000 f9b6 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013e8:	4803      	ldr	r0, [pc, #12]	@ (80013f8 <MX_TIM1_Init+0x150>)
 80013ea:	f000 fc5f 	bl	8001cac <HAL_TIM_MspPostInit>

}
 80013ee:	bf00      	nop
 80013f0:	3758      	adds	r7, #88	@ 0x58
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000390 	.word	0x20000390
 80013fc:	40010000 	.word	0x40010000

08001400 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001406:	f107 0318 	add.w	r3, r7, #24
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800141e:	463b      	mov	r3, r7
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800142a:	4b40      	ldr	r3, [pc, #256]	@ (800152c <MX_TIM2_Init+0x12c>)
 800142c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001430:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8001432:	4b3e      	ldr	r3, [pc, #248]	@ (800152c <MX_TIM2_Init+0x12c>)
 8001434:	225f      	movs	r2, #95	@ 0x5f
 8001436:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b3c      	ldr	r3, [pc, #240]	@ (800152c <MX_TIM2_Init+0x12c>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800143e:	4b3b      	ldr	r3, [pc, #236]	@ (800152c <MX_TIM2_Init+0x12c>)
 8001440:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001444:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b39      	ldr	r3, [pc, #228]	@ (800152c <MX_TIM2_Init+0x12c>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b37      	ldr	r3, [pc, #220]	@ (800152c <MX_TIM2_Init+0x12c>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001452:	4836      	ldr	r0, [pc, #216]	@ (800152c <MX_TIM2_Init+0x12c>)
 8001454:	f004 f95a 	bl	800570c <HAL_TIM_Base_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800145e:	f000 f979 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001462:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001466:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001468:	f107 0318 	add.w	r3, r7, #24
 800146c:	4619      	mov	r1, r3
 800146e:	482f      	ldr	r0, [pc, #188]	@ (800152c <MX_TIM2_Init+0x12c>)
 8001470:	f004 fd90 	bl	8005f94 <HAL_TIM_ConfigClockSource>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800147a:	f000 f96b 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800147e:	482b      	ldr	r0, [pc, #172]	@ (800152c <MX_TIM2_Init+0x12c>)
 8001480:	f004 fa9c 	bl	80059bc <HAL_TIM_IC_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800148a:	f000 f963 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	4619      	mov	r1, r3
 800149c:	4823      	ldr	r0, [pc, #140]	@ (800152c <MX_TIM2_Init+0x12c>)
 800149e:	f005 fa37 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80014a8:	f000 f954 	bl	8001754 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014ac:	2300      	movs	r3, #0
 80014ae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014b0:	2301      	movs	r3, #1
 80014b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	481a      	ldr	r0, [pc, #104]	@ (800152c <MX_TIM2_Init+0x12c>)
 80014c4:	f004 fc07 	bl	8005cd6 <HAL_TIM_IC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80014ce:	f000 f941 	bl	8001754 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80014d2:	2302      	movs	r3, #2
 80014d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014d6:	463b      	mov	r3, r7
 80014d8:	2204      	movs	r2, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	4813      	ldr	r0, [pc, #76]	@ (800152c <MX_TIM2_Init+0x12c>)
 80014de:	f004 fbfa 	bl	8005cd6 <HAL_TIM_IC_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80014e8:	f000 f934 	bl	8001754 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014ec:	2301      	movs	r3, #1
 80014ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80014f0:	463b      	mov	r3, r7
 80014f2:	2208      	movs	r2, #8
 80014f4:	4619      	mov	r1, r3
 80014f6:	480d      	ldr	r0, [pc, #52]	@ (800152c <MX_TIM2_Init+0x12c>)
 80014f8:	f004 fbed 	bl	8005cd6 <HAL_TIM_IC_ConfigChannel>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8001502:	f000 f927 	bl	8001754 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001506:	2302      	movs	r3, #2
 8001508:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800150a:	2302      	movs	r3, #2
 800150c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800150e:	463b      	mov	r3, r7
 8001510:	220c      	movs	r2, #12
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_TIM2_Init+0x12c>)
 8001516:	f004 fbde 	bl	8005cd6 <HAL_TIM_IC_ConfigChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM2_Init+0x124>
  {
    Error_Handler();
 8001520:	f000 f918 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	@ 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200003d8 	.word	0x200003d8

08001530 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	@ 0x30
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	2224      	movs	r2, #36	@ 0x24
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f00a f8b8 	bl	800b6b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800154c:	4b20      	ldr	r3, [pc, #128]	@ (80015d0 <MX_TIM4_Init+0xa0>)
 800154e:	4a21      	ldr	r2, [pc, #132]	@ (80015d4 <MX_TIM4_Init+0xa4>)
 8001550:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001552:	4b1f      	ldr	r3, [pc, #124]	@ (80015d0 <MX_TIM4_Init+0xa0>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b1d      	ldr	r3, [pc, #116]	@ (80015d0 <MX_TIM4_Init+0xa0>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800155e:	4b1c      	ldr	r3, [pc, #112]	@ (80015d0 <MX_TIM4_Init+0xa0>)
 8001560:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001564:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b1a      	ldr	r3, [pc, #104]	@ (80015d0 <MX_TIM4_Init+0xa0>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156c:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <MX_TIM4_Init+0xa0>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001572:	2301      	movs	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800157a:	2301      	movs	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800158a:	2301      	movs	r3, #1
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	4619      	mov	r1, r3
 800159c:	480c      	ldr	r0, [pc, #48]	@ (80015d0 <MX_TIM4_Init+0xa0>)
 800159e:	f004 fa66 	bl	8005a6e <HAL_TIM_Encoder_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80015a8:	f000 f8d4 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <MX_TIM4_Init+0xa0>)
 80015ba:	f005 f9a9 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80015c4:	f000 f8c6 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	3730      	adds	r7, #48	@ 0x30
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000420 	.word	0x20000420
 80015d4:	40000800 	.word	0x40000800

080015d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08c      	sub	sp, #48	@ 0x30
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	2224      	movs	r2, #36	@ 0x24
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f00a f864 	bl	800b6b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015f4:	4b20      	ldr	r3, [pc, #128]	@ (8001678 <MX_TIM5_Init+0xa0>)
 80015f6:	4a21      	ldr	r2, [pc, #132]	@ (800167c <MX_TIM5_Init+0xa4>)
 80015f8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80015fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <MX_TIM5_Init+0xa0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b1d      	ldr	r3, [pc, #116]	@ (8001678 <MX_TIM5_Init+0xa0>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001606:	4b1c      	ldr	r3, [pc, #112]	@ (8001678 <MX_TIM5_Init+0xa0>)
 8001608:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800160c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160e:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <MX_TIM5_Init+0xa0>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001614:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <MX_TIM5_Init+0xa0>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800161a:	2301      	movs	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001622:	2301      	movs	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001632:	2301      	movs	r3, #1
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4619      	mov	r1, r3
 8001644:	480c      	ldr	r0, [pc, #48]	@ (8001678 <MX_TIM5_Init+0xa0>)
 8001646:	f004 fa12 	bl	8005a6e <HAL_TIM_Encoder_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001650:	f000 f880 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	@ (8001678 <MX_TIM5_Init+0xa0>)
 8001662:	f005 f955 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800166c:	f000 f872 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	3730      	adds	r7, #48	@ 0x30
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000468 	.word	0x20000468
 800167c:	40000c00 	.word	0x40000c00

08001680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	4b2b      	ldr	r3, [pc, #172]	@ (8001748 <MX_GPIO_Init+0xc8>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	4a2a      	ldr	r2, [pc, #168]	@ (8001748 <MX_GPIO_Init+0xc8>)
 80016a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a6:	4b28      	ldr	r3, [pc, #160]	@ (8001748 <MX_GPIO_Init+0xc8>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	4b24      	ldr	r3, [pc, #144]	@ (8001748 <MX_GPIO_Init+0xc8>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	4a23      	ldr	r2, [pc, #140]	@ (8001748 <MX_GPIO_Init+0xc8>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c2:	4b21      	ldr	r3, [pc, #132]	@ (8001748 <MX_GPIO_Init+0xc8>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001748 <MX_GPIO_Init+0xc8>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001748 <MX_GPIO_Init+0xc8>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b1a      	ldr	r3, [pc, #104]	@ (8001748 <MX_GPIO_Init+0xc8>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, trig_1_Pin|trig_2_Pin|motor_stdby_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	f44f 6183 	mov.w	r1, #1048	@ 0x418
 80016f0:	4816      	ldr	r0, [pc, #88]	@ (800174c <MX_GPIO_Init+0xcc>)
 80016f2:	f001 f961 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, xshut1_Pin|xshut2_Pin|a_h2_Pin|a_h1_Pin
 80016f6:	2200      	movs	r2, #0
 80016f8:	f24f 0106 	movw	r1, #61446	@ 0xf006
 80016fc:	4814      	ldr	r0, [pc, #80]	@ (8001750 <MX_GPIO_Init+0xd0>)
 80016fe:	f001 f95b 	bl	80029b8 <HAL_GPIO_WritePin>
                          |b_h2_Pin|b_h1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : trig_1_Pin trig_2_Pin motor_stdby_Pin */
  GPIO_InitStruct.Pin = trig_1_Pin|trig_2_Pin|motor_stdby_Pin;
 8001702:	f44f 6383 	mov.w	r3, #1048	@ 0x418
 8001706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	4619      	mov	r1, r3
 800171a:	480c      	ldr	r0, [pc, #48]	@ (800174c <MX_GPIO_Init+0xcc>)
 800171c:	f000 ffc8 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : xshut1_Pin xshut2_Pin a_h2_Pin a_h1_Pin
                           b_h2_Pin b_h1_Pin */
  GPIO_InitStruct.Pin = xshut1_Pin|xshut2_Pin|a_h2_Pin|a_h1_Pin
 8001720:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8001724:	60fb      	str	r3, [r7, #12]
                          |b_h2_Pin|b_h1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	@ (8001750 <MX_GPIO_Init+0xd0>)
 800173a:	f000 ffb9 	bl	80026b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800173e:	bf00      	nop
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40020000 	.word	0x40020000
 8001750:	40020400 	.word	0x40020400

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <Error_Handler+0x8>

08001760 <motor_init>:
#include "main.h"
#include "stm32f4xx_hal.h"
#include "motor_ll.h"

void motor_init()
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001764:	2100      	movs	r1, #0
 8001766:	480f      	ldr	r0, [pc, #60]	@ (80017a4 <motor_init+0x44>)
 8001768:	f004 f878 	bl	800585c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800176c:	2104      	movs	r1, #4
 800176e:	480d      	ldr	r0, [pc, #52]	@ (80017a4 <motor_init+0x44>)
 8001770:	f004 f874 	bl	800585c <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001774:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <motor_init+0x44>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2200      	movs	r2, #0
 800177a:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0); // make it stop
 800177c:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <motor_init+0x44>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2200      	movs	r2, #0
 8001782:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_GPIO_WritePin(GPIOA, motor_stdby_Pin, GPIO_PIN_SET); // make standby pin high, activate the motor driver
 8001784:	2201      	movs	r2, #1
 8001786:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800178a:	4807      	ldr	r0, [pc, #28]	@ (80017a8 <motor_init+0x48>)
 800178c:	f001 f914 	bl	80029b8 <HAL_GPIO_WritePin>
	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001790:	213c      	movs	r1, #60	@ 0x3c
 8001792:	4806      	ldr	r0, [pc, #24]	@ (80017ac <motor_init+0x4c>)
 8001794:	f004 fa11 	bl	8005bba <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001798:	213c      	movs	r1, #60	@ 0x3c
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <motor_init+0x50>)
 800179c:	f004 fa0d 	bl	8005bba <HAL_TIM_Encoder_Start>
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000390 	.word	0x20000390
 80017a8:	40020000 	.word	0x40020000
 80017ac:	20000420 	.word	0x20000420
 80017b0:	20000468 	.word	0x20000468

080017b4 <motor_control>:

void motor_control(motor_id_t motor_id, motor_direction_t motor_direction)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	460a      	mov	r2, r1
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	4613      	mov	r3, r2
 80017c2:	71bb      	strb	r3, [r7, #6]
    switch (motor_id)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d002      	beq.n	80017d0 <motor_control+0x1c>
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d044      	beq.n	8001858 <motor_control+0xa4>
			default:
				break;
        }
        break;
    default:
        break;
 80017ce:	e087      	b.n	80018e0 <motor_control+0x12c>
        switch (motor_direction)
 80017d0:	79bb      	ldrb	r3, [r7, #6]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d83e      	bhi.n	8001854 <motor_control+0xa0>
 80017d6:	a201      	add	r2, pc, #4	@ (adr r2, 80017dc <motor_control+0x28>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	08001807 	.word	0x08001807
 80017e4:	0800183b 	.word	0x0800183b
 80017e8:	08001821 	.word	0x08001821
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);  // PB13 HIGH
 80017ec:	2201      	movs	r2, #1
 80017ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017f2:	483d      	ldr	r0, [pc, #244]	@ (80018e8 <motor_control+0x134>)
 80017f4:	f001 f8e0 	bl	80029b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // PB12 LOW
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017fe:	483a      	ldr	r0, [pc, #232]	@ (80018e8 <motor_control+0x134>)
 8001800:	f001 f8da 	bl	80029b8 <HAL_GPIO_WritePin>
				break;
 8001804:	e027      	b.n	8001856 <motor_control+0xa2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);  // PB13 LOW
 8001806:	2200      	movs	r2, #0
 8001808:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800180c:	4836      	ldr	r0, [pc, #216]	@ (80018e8 <motor_control+0x134>)
 800180e:	f001 f8d3 	bl	80029b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // PB12 HIGH
 8001812:	2201      	movs	r2, #1
 8001814:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001818:	4833      	ldr	r0, [pc, #204]	@ (80018e8 <motor_control+0x134>)
 800181a:	f001 f8cd 	bl	80029b8 <HAL_GPIO_WritePin>
				break;
 800181e:	e01a      	b.n	8001856 <motor_control+0xa2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);  // PB13 HIGH
 8001820:	2201      	movs	r2, #1
 8001822:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001826:	4830      	ldr	r0, [pc, #192]	@ (80018e8 <motor_control+0x134>)
 8001828:	f001 f8c6 	bl	80029b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // PB12 HIGH
 800182c:	2201      	movs	r2, #1
 800182e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001832:	482d      	ldr	r0, [pc, #180]	@ (80018e8 <motor_control+0x134>)
 8001834:	f001 f8c0 	bl	80029b8 <HAL_GPIO_WritePin>
				break;
 8001838:	e00d      	b.n	8001856 <motor_control+0xa2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);  // PB13 LOW
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001840:	4829      	ldr	r0, [pc, #164]	@ (80018e8 <motor_control+0x134>)
 8001842:	f001 f8b9 	bl	80029b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // PB12 LOW
 8001846:	2200      	movs	r2, #0
 8001848:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800184c:	4826      	ldr	r0, [pc, #152]	@ (80018e8 <motor_control+0x134>)
 800184e:	f001 f8b3 	bl	80029b8 <HAL_GPIO_WritePin>
				break;
 8001852:	e000      	b.n	8001856 <motor_control+0xa2>
				break;
 8001854:	bf00      	nop
        break;
 8001856:	e043      	b.n	80018e0 <motor_control+0x12c>
        switch (motor_direction)
 8001858:	79bb      	ldrb	r3, [r7, #6]
 800185a:	2b03      	cmp	r3, #3
 800185c:	d83e      	bhi.n	80018dc <motor_control+0x128>
 800185e:	a201      	add	r2, pc, #4	@ (adr r2, 8001864 <motor_control+0xb0>)
 8001860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001864:	08001875 	.word	0x08001875
 8001868:	0800188f 	.word	0x0800188f
 800186c:	080018c3 	.word	0x080018c3
 8001870:	080018a9 	.word	0x080018a9
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);  // PB13 HIGH
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800187a:	481b      	ldr	r0, [pc, #108]	@ (80018e8 <motor_control+0x134>)
 800187c:	f001 f89c 	bl	80029b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // PB12 LOW
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001886:	4818      	ldr	r0, [pc, #96]	@ (80018e8 <motor_control+0x134>)
 8001888:	f001 f896 	bl	80029b8 <HAL_GPIO_WritePin>
				break;
 800188c:	e027      	b.n	80018de <motor_control+0x12a>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);  // PB13 LOW
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001894:	4814      	ldr	r0, [pc, #80]	@ (80018e8 <motor_control+0x134>)
 8001896:	f001 f88f 	bl	80029b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // PB12 HIGH
 800189a:	2201      	movs	r2, #1
 800189c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018a0:	4811      	ldr	r0, [pc, #68]	@ (80018e8 <motor_control+0x134>)
 80018a2:	f001 f889 	bl	80029b8 <HAL_GPIO_WritePin>
				break;
 80018a6:	e01a      	b.n	80018de <motor_control+0x12a>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);  // PB13 HIGH
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018ae:	480e      	ldr	r0, [pc, #56]	@ (80018e8 <motor_control+0x134>)
 80018b0:	f001 f882 	bl	80029b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // PB12 HIGH
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018ba:	480b      	ldr	r0, [pc, #44]	@ (80018e8 <motor_control+0x134>)
 80018bc:	f001 f87c 	bl	80029b8 <HAL_GPIO_WritePin>
				break;
 80018c0:	e00d      	b.n	80018de <motor_control+0x12a>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);  // PB13 LOW
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018c8:	4807      	ldr	r0, [pc, #28]	@ (80018e8 <motor_control+0x134>)
 80018ca:	f001 f875 	bl	80029b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // PB12 LOW
 80018ce:	2200      	movs	r2, #0
 80018d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018d4:	4804      	ldr	r0, [pc, #16]	@ (80018e8 <motor_control+0x134>)
 80018d6:	f001 f86f 	bl	80029b8 <HAL_GPIO_WritePin>
				break;
 80018da:	e000      	b.n	80018de <motor_control+0x12a>
				break;
 80018dc:	bf00      	nop
        break;
 80018de:	bf00      	nop
    }
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40020400 	.word	0x40020400

080018ec <motor_set_speed>:
/*
 *  pls set speed from 0 to 49 only
 */

void motor_set_speed(motor_id_t motor_id, uint8_t speed)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	460a      	mov	r2, r1
 80018f6:	71fb      	strb	r3, [r7, #7]
 80018f8:	4613      	mov	r3, r2
 80018fa:	71bb      	strb	r3, [r7, #6]
	if (speed > 49) return;
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	2b31      	cmp	r3, #49	@ 0x31
 8001900:	d80f      	bhi.n	8001922 <motor_set_speed+0x36>

	switch(motor_id) {
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <motor_set_speed+0x22>
 8001908:	2b01      	cmp	r3, #1
 800190a:	d005      	beq.n	8001918 <motor_set_speed+0x2c>
		break;
	case MOTOR_B:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
		break;
	default:
		break;
 800190c:	e00a      	b.n	8001924 <motor_set_speed+0x38>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 800190e:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <motor_set_speed+0x44>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	79ba      	ldrb	r2, [r7, #6]
 8001914:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8001916:	e005      	b.n	8001924 <motor_set_speed+0x38>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <motor_set_speed+0x44>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	79ba      	ldrb	r2, [r7, #6]
 800191e:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8001920:	e000      	b.n	8001924 <motor_set_speed+0x38>
	if (speed > 49) return;
 8001922:	bf00      	nop
	}
}
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000390 	.word	0x20000390

08001934 <encoder_get_tick>:

void encoder_get_tick(motor_id_t motor_id, int32_t *tick)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	71fb      	strb	r3, [r7, #7]
	if (tick == NULL) return;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d017      	beq.n	8001976 <encoder_get_tick+0x42>

	switch(motor_id)
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <encoder_get_tick+0x1e>
 800194c:	2b01      	cmp	r3, #1
 800194e:	d007      	beq.n	8001960 <encoder_get_tick+0x2c>
 8001950:	e00d      	b.n	800196e <encoder_get_tick+0x3a>
	{
		case MOTOR_A:
			*tick = __HAL_TIM_GET_COUNTER(&htim4);
 8001952:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <encoder_get_tick+0x50>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	461a      	mov	r2, r3
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	601a      	str	r2, [r3, #0]
			break;
 800195e:	e00b      	b.n	8001978 <encoder_get_tick+0x44>
		case MOTOR_B:
			*tick = __HAL_TIM_GET_COUNTER(&htim5);
 8001960:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <encoder_get_tick+0x54>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001966:	461a      	mov	r2, r3
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	601a      	str	r2, [r3, #0]
			break;
 800196c:	e004      	b.n	8001978 <encoder_get_tick+0x44>
		default:
			*tick = 0;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
			break;
 8001974:	e000      	b.n	8001978 <encoder_get_tick+0x44>
	if (tick == NULL) return;
 8001976:	bf00      	nop
	}
}
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000420 	.word	0x20000420
 8001988:	20000468 	.word	0x20000468

0800198c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <HAL_MspInit+0x4c>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	4a0f      	ldr	r2, [pc, #60]	@ (80019d8 <HAL_MspInit+0x4c>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a2:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	4a08      	ldr	r2, [pc, #32]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800

080019dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08c      	sub	sp, #48	@ 0x30
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a3b      	ldr	r2, [pc, #236]	@ (8001ae8 <HAL_I2C_MspInit+0x10c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d12d      	bne.n	8001a5a <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	4b3a      	ldr	r3, [pc, #232]	@ (8001aec <HAL_I2C_MspInit+0x110>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a39      	ldr	r2, [pc, #228]	@ (8001aec <HAL_I2C_MspInit+0x110>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b37      	ldr	r3, [pc, #220]	@ (8001aec <HAL_I2C_MspInit+0x110>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	61bb      	str	r3, [r7, #24]
 8001a18:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a20:	2312      	movs	r3, #18
 8001a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	f107 031c 	add.w	r3, r7, #28
 8001a34:	4619      	mov	r1, r3
 8001a36:	482e      	ldr	r0, [pc, #184]	@ (8001af0 <HAL_I2C_MspInit+0x114>)
 8001a38:	f000 fe3a 	bl	80026b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	4b2a      	ldr	r3, [pc, #168]	@ (8001aec <HAL_I2C_MspInit+0x110>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	4a29      	ldr	r2, [pc, #164]	@ (8001aec <HAL_I2C_MspInit+0x110>)
 8001a46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4c:	4b27      	ldr	r3, [pc, #156]	@ (8001aec <HAL_I2C_MspInit+0x110>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a58:	e041      	b.n	8001ade <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a25      	ldr	r2, [pc, #148]	@ (8001af4 <HAL_I2C_MspInit+0x118>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d13c      	bne.n	8001ade <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <HAL_I2C_MspInit+0x110>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001aec <HAL_I2C_MspInit+0x110>)
 8001a6e:	f043 0302 	orr.w	r3, r3, #2
 8001a72:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a74:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <HAL_I2C_MspInit+0x110>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a86:	2312      	movs	r3, #18
 8001a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a92:	2304      	movs	r3, #4
 8001a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4814      	ldr	r0, [pc, #80]	@ (8001af0 <HAL_I2C_MspInit+0x114>)
 8001a9e:	f000 fe07 	bl	80026b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa6:	2312      	movs	r3, #18
 8001aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001ab2:	2309      	movs	r3, #9
 8001ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	480c      	ldr	r0, [pc, #48]	@ (8001af0 <HAL_I2C_MspInit+0x114>)
 8001abe:	f000 fdf7 	bl	80026b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_I2C_MspInit+0x110>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	4a08      	ldr	r2, [pc, #32]	@ (8001aec <HAL_I2C_MspInit+0x110>)
 8001acc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad2:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <HAL_I2C_MspInit+0x110>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
}
 8001ade:	bf00      	nop
 8001ae0:	3730      	adds	r7, #48	@ 0x30
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40005800 	.word	0x40005800

08001af8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	@ 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a23      	ldr	r2, [pc, #140]	@ (8001ba4 <HAL_TIM_Base_MspInit+0xac>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d10e      	bne.n	8001b38 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ba8 <HAL_TIM_Base_MspInit+0xb0>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	4a21      	ldr	r2, [pc, #132]	@ (8001ba8 <HAL_TIM_Base_MspInit+0xb0>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba8 <HAL_TIM_Base_MspInit+0xb0>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b36:	e030      	b.n	8001b9a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b40:	d12b      	bne.n	8001b9a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b18      	ldr	r3, [pc, #96]	@ (8001ba8 <HAL_TIM_Base_MspInit+0xb0>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	4a17      	ldr	r2, [pc, #92]	@ (8001ba8 <HAL_TIM_Base_MspInit+0xb0>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b52:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <HAL_TIM_Base_MspInit+0xb0>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <HAL_TIM_Base_MspInit+0xb0>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	4a10      	ldr	r2, [pc, #64]	@ (8001ba8 <HAL_TIM_Base_MspInit+0xb0>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <HAL_TIM_Base_MspInit+0xb0>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8001b7a:	2324      	movs	r3, #36	@ 0x24
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	@ (8001bac <HAL_TIM_Base_MspInit+0xb4>)
 8001b96:	f000 fd8b 	bl	80026b0 <HAL_GPIO_Init>
}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	@ 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020000 	.word	0x40020000

08001bb0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	@ 0x30
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a32      	ldr	r2, [pc, #200]	@ (8001c98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d12c      	bne.n	8001c2c <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	4b31      	ldr	r3, [pc, #196]	@ (8001c9c <HAL_TIM_Encoder_MspInit+0xec>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	4a30      	ldr	r2, [pc, #192]	@ (8001c9c <HAL_TIM_Encoder_MspInit+0xec>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be2:	4b2e      	ldr	r3, [pc, #184]	@ (8001c9c <HAL_TIM_Encoder_MspInit+0xec>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c9c <HAL_TIM_Encoder_MspInit+0xec>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	4a29      	ldr	r2, [pc, #164]	@ (8001c9c <HAL_TIM_Encoder_MspInit+0xec>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfe:	4b27      	ldr	r3, [pc, #156]	@ (8001c9c <HAL_TIM_Encoder_MspInit+0xec>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c0a:	23c0      	movs	r3, #192	@ 0xc0
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	481e      	ldr	r0, [pc, #120]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001c26:	f000 fd43 	bl	80026b0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001c2a:	e030      	b.n	8001c8e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d12b      	bne.n	8001c8e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <HAL_TIM_Encoder_MspInit+0xec>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	4a17      	ldr	r2, [pc, #92]	@ (8001c9c <HAL_TIM_Encoder_MspInit+0xec>)
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c46:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <HAL_TIM_Encoder_MspInit+0xec>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <HAL_TIM_Encoder_MspInit+0xec>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	4a10      	ldr	r2, [pc, #64]	@ (8001c9c <HAL_TIM_Encoder_MspInit+0xec>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c62:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <HAL_TIM_Encoder_MspInit+0xec>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c82:	f107 031c 	add.w	r3, r7, #28
 8001c86:	4619      	mov	r1, r3
 8001c88:	4807      	ldr	r0, [pc, #28]	@ (8001ca8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001c8a:	f000 fd11 	bl	80026b0 <HAL_GPIO_Init>
}
 8001c8e:	bf00      	nop
 8001c90:	3730      	adds	r7, #48	@ 0x30
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40000800 	.word	0x40000800
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020400 	.word	0x40020400
 8001ca4:	40000c00 	.word	0x40000c00
 8001ca8:	40020000 	.word	0x40020000

08001cac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a12      	ldr	r2, [pc, #72]	@ (8001d14 <HAL_TIM_MspPostInit+0x68>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d11e      	bne.n	8001d0c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <HAL_TIM_MspPostInit+0x6c>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	4a10      	ldr	r2, [pc, #64]	@ (8001d18 <HAL_TIM_MspPostInit+0x6c>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <HAL_TIM_MspPostInit+0x6c>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	4619      	mov	r1, r3
 8001d06:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <HAL_TIM_MspPostInit+0x70>)
 8001d08:	f000 fcd2 	bl	80026b0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d0c:	bf00      	nop
 8001d0e:	3720      	adds	r7, #32
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40010000 	.word	0x40010000
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40020000 	.word	0x40020000

08001d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <NMI_Handler+0x4>

08001d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <HardFault_Handler+0x4>

08001d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <MemManage_Handler+0x4>

08001d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <BusFault_Handler+0x4>

08001d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <UsageFault_Handler+0x4>

08001d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d76:	f000 fb45 	bl	8002404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d84:	4802      	ldr	r0, [pc, #8]	@ (8001d90 <OTG_FS_IRQHandler+0x10>)
 8001d86:	f001 ff6f 	bl	8003c68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000199c 	.word	0x2000199c

08001d94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return 1;
 8001d98:	2301      	movs	r3, #1
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <_kill>:

int _kill(int pid, int sig)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dae:	f009 fcd3 	bl	800b758 <__errno>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2216      	movs	r2, #22
 8001db6:	601a      	str	r2, [r3, #0]
  return -1;
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <_exit>:

void _exit (int status)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dcc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ffe7 	bl	8001da4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dd6:	bf00      	nop
 8001dd8:	e7fd      	b.n	8001dd6 <_exit+0x12>

08001dda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	e00a      	b.n	8001e02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dec:	f3af 8000 	nop.w
 8001df0:	4601      	mov	r1, r0
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	60ba      	str	r2, [r7, #8]
 8001df8:	b2ca      	uxtb	r2, r1
 8001dfa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	dbf0      	blt.n	8001dec <_read+0x12>
  }

  return len;
 8001e0a:	687b      	ldr	r3, [r7, #4]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	e009      	b.n	8001e3a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	60ba      	str	r2, [r7, #8]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	3301      	adds	r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	dbf1      	blt.n	8001e26 <_write+0x12>
  }
  return len;
 8001e42:	687b      	ldr	r3, [r7, #4]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_close>:

int _close(int file)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e74:	605a      	str	r2, [r3, #4]
  return 0;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <_isatty>:

int _isatty(int file)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e8c:	2301      	movs	r3, #1
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b085      	sub	sp, #20
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ebc:	4a14      	ldr	r2, [pc, #80]	@ (8001f10 <_sbrk+0x5c>)
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <_sbrk+0x60>)
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec8:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <_sbrk+0x64>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	@ (8001f1c <_sbrk+0x68>)
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed6:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <_sbrk+0x64>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d207      	bcs.n	8001ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee4:	f009 fc38 	bl	800b758 <__errno>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	220c      	movs	r2, #12
 8001eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ef2:	e009      	b.n	8001f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef4:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <_sbrk+0x64>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001efa:	4b07      	ldr	r3, [pc, #28]	@ (8001f18 <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	4a05      	ldr	r2, [pc, #20]	@ (8001f18 <_sbrk+0x64>)
 8001f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f06:	68fb      	ldr	r3, [r7, #12]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20020000 	.word	0x20020000
 8001f14:	00000400 	.word	0x00000400
 8001f18:	200004b0 	.word	0x200004b0
 8001f1c:	200021f0 	.word	0x200021f0

08001f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f24:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <SystemInit+0x20>)
 8001f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f2a:	4a05      	ldr	r2, [pc, #20]	@ (8001f40 <SystemInit+0x20>)
 8001f2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <selectTCAChannel>:
 */
#include "stm32f4xx_hal.h"
#include "main.h"
#include "tca9548.h"

void selectTCAChannel(uint8_t channel) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = (1 << channel);  // Enable only the selected channel
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	2201      	movs	r2, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, 0x77 << 1, &cmd, 1, HAL_MAX_DELAY);
 8001f5a:	f107 020f 	add.w	r2, r7, #15
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2301      	movs	r3, #1
 8001f66:	21ee      	movs	r1, #238	@ 0xee
 8001f68:	4803      	ldr	r0, [pc, #12]	@ (8001f78 <selectTCAChannel+0x34>)
 8001f6a:	f000 fe83 	bl	8002c74 <HAL_I2C_Master_Transmit>
}
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200002e8 	.word	0x200002e8

08001f7c <my_printf>:
{
 8001f7c:	b40f      	push	{r0, r1, r2, r3}
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b0a2      	sub	sp, #136	@ 0x88
 8001f82:	af00      	add	r7, sp, #0
    va_start(args, format);
 8001f84:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001f88:	603b      	str	r3, [r7, #0]
    int usbTxLength = vsnprintf(tx_buffer, BUFFER_LEN, format, args);
 8001f8a:	1d38      	adds	r0, r7, #4
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001f92:	2180      	movs	r1, #128	@ 0x80
 8001f94:	f009 fb80 	bl	800b698 <vsniprintf>
 8001f98:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (usbTxLength > 0 && usbTxLength < BUFFER_LEN)
 8001f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	dd0b      	ble.n	8001fbc <my_printf+0x40>
 8001fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fa8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001faa:	dc07      	bgt.n	8001fbc <my_printf+0x40>
        CDC_Transmit_FS((uint8_t *)tx_buffer, usbTxLength);
 8001fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f008 f992 	bl	800a2e0 <CDC_Transmit_FS>
}
 8001fbc:	bf00      	nop
 8001fbe:	3788      	adds	r7, #136	@ 0x88
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fc6:	b004      	add	sp, #16
 8001fc8:	4770      	bx	lr
	...

08001fcc <tcs34725_write8>:
/**************************************************************************/
/*!
    @brief  Writes a register and an 8 bit value over I2C
*/
/**************************************************************************/
void tcs34725_write8(uint8_t reg, uint8_t value) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	460a      	mov	r2, r1
 8001fd6:	71fb      	strb	r3, [r7, #7]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	71bb      	strb	r3, [r7, #6]
    Wire.send(TCS34725_COMMAND_BIT | reg);
    Wire.send(value & 0xFF);
    #endif
    Wire.endTransmission();
    */
    uint8_t buffer[2] = {TCS34725_COMMAND_BIT | reg, value};
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	733b      	strb	r3, [r7, #12]
 8001fe6:	79bb      	ldrb	r3, [r7, #6]
 8001fe8:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8001fea:	f107 020c 	add.w	r2, r7, #12
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	2152      	movs	r1, #82	@ 0x52
 8001ff8:	4803      	ldr	r0, [pc, #12]	@ (8002008 <tcs34725_write8+0x3c>)
 8001ffa:	f000 fe3b 	bl	8002c74 <HAL_I2C_Master_Transmit>
}
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200002e8 	.word	0x200002e8

0800200c <read8>:
/**************************************************************************/
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
uint8_t read8(uint8_t reg) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af02      	add	r7, sp, #8
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
    return Wire.read();
    #else
    return Wire.receive();
    #endif
    */
    uint8_t cmd = TCS34725_COMMAND_BIT | reg;
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800201c:	b2db      	uxtb	r3, r3
 800201e:	73fb      	strb	r3, [r7, #15]
    uint8_t value = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 8002024:	f107 020f 	add.w	r2, r7, #15
 8002028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2301      	movs	r3, #1
 8002030:	2152      	movs	r1, #82	@ 0x52
 8002032:	4809      	ldr	r0, [pc, #36]	@ (8002058 <read8+0x4c>)
 8002034:	f000 fe1e 	bl	8002c74 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, &value, 1, HAL_MAX_DELAY);
 8002038:	f107 020e 	add.w	r2, r7, #14
 800203c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	2301      	movs	r3, #1
 8002044:	2152      	movs	r1, #82	@ 0x52
 8002046:	4804      	ldr	r0, [pc, #16]	@ (8002058 <read8+0x4c>)
 8002048:	f000 ff12 	bl	8002e70 <HAL_I2C_Master_Receive>
    return value;
 800204c:	7bbb      	ldrb	r3, [r7, #14]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200002e8 	.word	0x200002e8

0800205c <read16>:
/**************************************************************************/
/*!
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
uint16_t read16(uint8_t reg) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af02      	add	r7, sp, #8
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
    #endif
    x <<= 8;
    x |= t;
    return x;
    */
	uint8_t cmd = TCS34725_COMMAND_BIT | reg;
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800206c:	b2db      	uxtb	r3, r3
 800206e:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[2];
	HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 8002070:	f107 020f 	add.w	r2, r7, #15
 8002074:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2301      	movs	r3, #1
 800207c:	2152      	movs	r1, #82	@ 0x52
 800207e:	480b      	ldr	r0, [pc, #44]	@ (80020ac <read16+0x50>)
 8002080:	f000 fdf8 	bl	8002c74 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8002084:	f107 020c 	add.w	r2, r7, #12
 8002088:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2302      	movs	r3, #2
 8002090:	2152      	movs	r1, #82	@ 0x52
 8002092:	4806      	ldr	r0, [pc, #24]	@ (80020ac <read16+0x50>)
 8002094:	f000 feec 	bl	8002e70 <HAL_I2C_Master_Receive>
	return (uint16_t)(buffer[1] << 8) | buffer[0];
 8002098:	7b7b      	ldrb	r3, [r7, #13]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	b29b      	uxth	r3, r3
 800209e:	7b3a      	ldrb	r2, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	b29b      	uxth	r3, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200002e8 	.word	0x200002e8

080020b0 <enable>:
/**************************************************************************/
/*!
    Enables the device
*/
/**************************************************************************/
void enable(void) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
    tcs34725_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 80020b4:	2101      	movs	r1, #1
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7ff ff88 	bl	8001fcc <tcs34725_write8>
    HAL_Delay(3);
 80020bc:	2003      	movs	r0, #3
 80020be:	f000 f9c1 	bl	8002444 <HAL_Delay>
    tcs34725_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 80020c2:	2103      	movs	r1, #3
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff ff81 	bl	8001fcc <tcs34725_write8>
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <tcs32725_begin>:
    doing anything else)
*/
/**************************************************************************/


bool tcs32725_begin(TCS34725_t *sensor, tcs34725IntegrationTime_t it, tcs34725Gain_t gain) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	70fb      	strb	r3, [r7, #3]
 80020dc:	4613      	mov	r3, r2
 80020de:	70bb      	strb	r3, [r7, #2]
    //Wire.begin();

    /* Make sure we're actually connected */
    uint8_t x = read8(TCS34725_ID);
 80020e0:	2012      	movs	r0, #18
 80020e2:	f7ff ff93 	bl	800200c <read8>
 80020e6:	4603      	mov	r3, r0
 80020e8:	73fb      	strb	r3, [r7, #15]
    my_printf("device id: %d", x);
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	4619      	mov	r1, r3
 80020ee:	480d      	ldr	r0, [pc, #52]	@ (8002124 <tcs32725_begin+0x54>)
 80020f0:	f7ff ff44 	bl	8001f7c <my_printf>
    if (x != 0x4D) {
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	2b4d      	cmp	r3, #77	@ 0x4d
 80020f8:	d001      	beq.n	80020fe <tcs32725_begin+0x2e>
        return false;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e00d      	b.n	800211a <tcs32725_begin+0x4a>
    }
    _tcs34725Initialised = true;
 80020fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002128 <tcs32725_begin+0x58>)
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]

    /* Set default integration time and gain */
    setIntegrationTime(it);
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f810 	bl	800212c <setIntegrationTime>
    setGain(gain);
 800210c:	78bb      	ldrb	r3, [r7, #2]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f82e 	bl	8002170 <setGain>

    /* Note: by default, the device is in power down mode on bootup */
    enable();
 8002114:	f7ff ffcc 	bl	80020b0 <enable>

    return true;
 8002118:	2301      	movs	r3, #1
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	0800d8cc 	.word	0x0800d8cc
 8002128:	200004b4 	.word	0x200004b4

0800212c <setIntegrationTime>:
/**************************************************************************/
/*!
    Sets the integration time for the TC34725
*/
/**************************************************************************/
void setIntegrationTime(tcs34725IntegrationTime_t it) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
    if (!_tcs34725Initialised) {
 8002136:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <setIntegrationTime+0x38>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	f083 0301 	eor.w	r3, r3, #1
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <setIntegrationTime+0x1e>
        //begin();
    	my_printf("set integration time go wrong\r\n");
 8002144:	4808      	ldr	r0, [pc, #32]	@ (8002168 <setIntegrationTime+0x3c>)
 8002146:	f7ff ff19 	bl	8001f7c <my_printf>
    }

    /* Update the timing register */
    tcs34725_write8(TCS34725_ATIME, it);
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	4619      	mov	r1, r3
 800214e:	2001      	movs	r0, #1
 8002150:	f7ff ff3c 	bl	8001fcc <tcs34725_write8>

    /* Update value placeholder */
    _tcs34725IntegrationTime = it;
 8002154:	4a05      	ldr	r2, [pc, #20]	@ (800216c <setIntegrationTime+0x40>)
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	7013      	strb	r3, [r2, #0]
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200004b4 	.word	0x200004b4
 8002168:	0800d8dc 	.word	0x0800d8dc
 800216c:	200004b6 	.word	0x200004b6

08002170 <setGain>:
/**************************************************************************/
/*!
    Adjusts the gain on the TCS34725 (adjusts the sensitivity to light)
*/
/**************************************************************************/
void setGain(tcs34725Gain_t gain) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
        begin();
    }
    */

    /* Update the timing register */
    tcs34725_write8(TCS34725_CONTROL, gain);
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	4619      	mov	r1, r3
 800217e:	200f      	movs	r0, #15
 8002180:	f7ff ff24 	bl	8001fcc <tcs34725_write8>

    /* Update value placeholders */
    _tcs34725Gain = gain;
 8002184:	4a03      	ldr	r2, [pc, #12]	@ (8002194 <setGain+0x24>)
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	7013      	strb	r3, [r2, #0]
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200004b5 	.word	0x200004b5

08002198 <getRawData>:
/**************************************************************************/
/*!
    @brief  Reads the raw red, green, blue and clear channel values
*/
/**************************************************************************/
void getRawData(uint16_t* r, uint16_t* g, uint16_t* b, uint16_t* c) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
	/*
    if (!_tcs34725Initialised) {
        begin();
    }
	*/
    *c = read16(TCS34725_CDATAL);
 80021a6:	2014      	movs	r0, #20
 80021a8:	f7ff ff58 	bl	800205c <read16>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461a      	mov	r2, r3
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	801a      	strh	r2, [r3, #0]
    *r = read16(TCS34725_RDATAL);
 80021b4:	2016      	movs	r0, #22
 80021b6:	f7ff ff51 	bl	800205c <read16>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	801a      	strh	r2, [r3, #0]
    *g = read16(TCS34725_GDATAL);
 80021c2:	2018      	movs	r0, #24
 80021c4:	f7ff ff4a 	bl	800205c <read16>
 80021c8:	4603      	mov	r3, r0
 80021ca:	461a      	mov	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	801a      	strh	r2, [r3, #0]
    *b = read16(TCS34725_BDATAL);
 80021d0:	201a      	movs	r0, #26
 80021d2:	f7ff ff43 	bl	800205c <read16>
 80021d6:	4603      	mov	r3, r0
 80021d8:	461a      	mov	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	801a      	strh	r2, [r3, #0]

    /* Set a delay for the integration time */
    switch (_tcs34725IntegrationTime) {
 80021de:	4b1a      	ldr	r3, [pc, #104]	@ (8002248 <getRawData+0xb0>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2bff      	cmp	r3, #255	@ 0xff
 80021e4:	d012      	beq.n	800220c <getRawData+0x74>
 80021e6:	2bff      	cmp	r3, #255	@ 0xff
 80021e8:	dc29      	bgt.n	800223e <getRawData+0xa6>
 80021ea:	2bf6      	cmp	r3, #246	@ 0xf6
 80021ec:	d012      	beq.n	8002214 <getRawData+0x7c>
 80021ee:	2bf6      	cmp	r3, #246	@ 0xf6
 80021f0:	dc25      	bgt.n	800223e <getRawData+0xa6>
 80021f2:	2beb      	cmp	r3, #235	@ 0xeb
 80021f4:	d012      	beq.n	800221c <getRawData+0x84>
 80021f6:	2beb      	cmp	r3, #235	@ 0xeb
 80021f8:	dc21      	bgt.n	800223e <getRawData+0xa6>
 80021fa:	2bd5      	cmp	r3, #213	@ 0xd5
 80021fc:	d012      	beq.n	8002224 <getRawData+0x8c>
 80021fe:	2bd5      	cmp	r3, #213	@ 0xd5
 8002200:	dc1d      	bgt.n	800223e <getRawData+0xa6>
 8002202:	2b00      	cmp	r3, #0
 8002204:	d016      	beq.n	8002234 <getRawData+0x9c>
 8002206:	2bc0      	cmp	r3, #192	@ 0xc0
 8002208:	d010      	beq.n	800222c <getRawData+0x94>
            break;
        case TCS34725_INTEGRATIONTIME_700MS:
        	HAL_Delay(700);
            break;
    }
}
 800220a:	e018      	b.n	800223e <getRawData+0xa6>
            HAL_Delay(3);
 800220c:	2003      	movs	r0, #3
 800220e:	f000 f919 	bl	8002444 <HAL_Delay>
            break;
 8002212:	e014      	b.n	800223e <getRawData+0xa6>
        	HAL_Delay(24);
 8002214:	2018      	movs	r0, #24
 8002216:	f000 f915 	bl	8002444 <HAL_Delay>
            break;
 800221a:	e010      	b.n	800223e <getRawData+0xa6>
        	HAL_Delay(50);
 800221c:	2032      	movs	r0, #50	@ 0x32
 800221e:	f000 f911 	bl	8002444 <HAL_Delay>
            break;
 8002222:	e00c      	b.n	800223e <getRawData+0xa6>
        	HAL_Delay(101);
 8002224:	2065      	movs	r0, #101	@ 0x65
 8002226:	f000 f90d 	bl	8002444 <HAL_Delay>
            break;
 800222a:	e008      	b.n	800223e <getRawData+0xa6>
        	HAL_Delay(154);
 800222c:	209a      	movs	r0, #154	@ 0x9a
 800222e:	f000 f909 	bl	8002444 <HAL_Delay>
            break;
 8002232:	e004      	b.n	800223e <getRawData+0xa6>
        	HAL_Delay(700);
 8002234:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002238:	f000 f904 	bl	8002444 <HAL_Delay>
            break;
 800223c:	bf00      	nop
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200004b6 	.word	0x200004b6

0800224c <getRGB>:

void getRGB(float *r, float *g, float *b) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  uint16_t red, green, blue, clear;
  getRawData(&red, &green, &blue, &clear);
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	f107 0216 	add.w	r2, r7, #22
 8002260:	f107 0118 	add.w	r1, r7, #24
 8002264:	f107 001a 	add.w	r0, r7, #26
 8002268:	f7ff ff96 	bl	8002198 <getRawData>
  uint32_t sum = clear;
 800226c:	8abb      	ldrh	r3, [r7, #20]
 800226e:	61fb      	str	r3, [r7, #28]

  // Avoid divide by zero errors ... if clear = 0 return black
  if (clear == 0) {
 8002270:	8abb      	ldrh	r3, [r7, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10c      	bne.n	8002290 <getRGB+0x44>
    *r = *g = *b = 0;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	e038      	b.n	8002302 <getRGB+0xb6>
    return;
  }

  *r = (float)red / sum * 255.0;
 8002290:	8b7b      	ldrh	r3, [r7, #26]
 8002292:	ee07 3a90 	vmov	s15, r3
 8002296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	ee07 3a90 	vmov	s15, r3
 80022a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022a8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002308 <getRGB+0xbc>
 80022ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	edc3 7a00 	vstr	s15, [r3]
  *g = (float)green / sum * 255.0;
 80022b6:	8b3b      	ldrh	r3, [r7, #24]
 80022b8:	ee07 3a90 	vmov	s15, r3
 80022bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	ee07 3a90 	vmov	s15, r3
 80022c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022ce:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002308 <getRGB+0xbc>
 80022d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	edc3 7a00 	vstr	s15, [r3]
  *b = (float)blue / sum * 255.0;
 80022dc:	8afb      	ldrh	r3, [r7, #22]
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	ee07 3a90 	vmov	s15, r3
 80022ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f4:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8002308 <getRGB+0xbc>
 80022f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	edc3 7a00 	vstr	s15, [r3]
}
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	437f0000 	.word	0x437f0000

0800230c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800230c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002344 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002310:	f7ff fe06 	bl	8001f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002314:	480c      	ldr	r0, [pc, #48]	@ (8002348 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002316:	490d      	ldr	r1, [pc, #52]	@ (800234c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002318:	4a0d      	ldr	r2, [pc, #52]	@ (8002350 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800231a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800231c:	e002      	b.n	8002324 <LoopCopyDataInit>

0800231e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002322:	3304      	adds	r3, #4

08002324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002328:	d3f9      	bcc.n	800231e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800232c:	4c0a      	ldr	r4, [pc, #40]	@ (8002358 <LoopFillZerobss+0x22>)
  movs r3, #0
 800232e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002330:	e001      	b.n	8002336 <LoopFillZerobss>

08002332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002334:	3204      	adds	r2, #4

08002336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002338:	d3fb      	bcc.n	8002332 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800233a:	f009 fa13 	bl	800b764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233e:	f7fe fdf9 	bl	8000f34 <main>
  bx  lr    
 8002342:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002344:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800234c:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8002350:	0800dce4 	.word	0x0800dce4
  ldr r2, =_sbss
 8002354:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8002358:	200021ec 	.word	0x200021ec

0800235c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800235c:	e7fe      	b.n	800235c <ADC_IRQHandler>
	...

08002360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002364:	4b0e      	ldr	r3, [pc, #56]	@ (80023a0 <HAL_Init+0x40>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0d      	ldr	r2, [pc, #52]	@ (80023a0 <HAL_Init+0x40>)
 800236a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800236e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002370:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <HAL_Init+0x40>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <HAL_Init+0x40>)
 8002376:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800237a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800237c:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <HAL_Init+0x40>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a07      	ldr	r2, [pc, #28]	@ (80023a0 <HAL_Init+0x40>)
 8002382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002386:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002388:	2003      	movs	r0, #3
 800238a:	f000 f94f 	bl	800262c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800238e:	200f      	movs	r0, #15
 8002390:	f000 f808 	bl	80023a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002394:	f7ff fafa 	bl	800198c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023c00 	.word	0x40023c00

080023a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023ac:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <HAL_InitTick+0x54>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <HAL_InitTick+0x58>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	4619      	mov	r1, r3
 80023b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80023be:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f967 	bl	8002696 <HAL_SYSTICK_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00e      	b.n	80023f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b0f      	cmp	r3, #15
 80023d6:	d80a      	bhi.n	80023ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d8:	2200      	movs	r2, #0
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023e0:	f000 f92f 	bl	8002642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e4:	4a06      	ldr	r2, [pc, #24]	@ (8002400 <HAL_InitTick+0x5c>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e000      	b.n	80023f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000000 	.word	0x20000000
 80023fc:	20000008 	.word	0x20000008
 8002400:	20000004 	.word	0x20000004

08002404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002408:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_IncTick+0x20>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_IncTick+0x24>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4413      	add	r3, r2
 8002414:	4a04      	ldr	r2, [pc, #16]	@ (8002428 <HAL_IncTick+0x24>)
 8002416:	6013      	str	r3, [r2, #0]
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000008 	.word	0x20000008
 8002428:	200004b8 	.word	0x200004b8

0800242c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return uwTick;
 8002430:	4b03      	ldr	r3, [pc, #12]	@ (8002440 <HAL_GetTick+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	200004b8 	.word	0x200004b8

08002444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800244c:	f7ff ffee 	bl	800242c <HAL_GetTick>
 8002450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800245c:	d005      	beq.n	800246a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800245e:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <HAL_Delay+0x44>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4413      	add	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800246a:	bf00      	nop
 800246c:	f7ff ffde 	bl	800242c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	429a      	cmp	r2, r3
 800247a:	d8f7      	bhi.n	800246c <HAL_Delay+0x28>
  {
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000008 	.word	0x20000008

0800248c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024a8:	4013      	ands	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024be:	4a04      	ldr	r2, [pc, #16]	@ (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	60d3      	str	r3, [r2, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d8:	4b04      	ldr	r3, [pc, #16]	@ (80024ec <__NVIC_GetPriorityGrouping+0x18>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	f003 0307 	and.w	r3, r3, #7
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	db0b      	blt.n	800251a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	f003 021f 	and.w	r2, r3, #31
 8002508:	4907      	ldr	r1, [pc, #28]	@ (8002528 <__NVIC_EnableIRQ+0x38>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	2001      	movs	r0, #1
 8002512:	fa00 f202 	lsl.w	r2, r0, r2
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000e100 	.word	0xe000e100

0800252c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	6039      	str	r1, [r7, #0]
 8002536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	db0a      	blt.n	8002556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	490c      	ldr	r1, [pc, #48]	@ (8002578 <__NVIC_SetPriority+0x4c>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	0112      	lsls	r2, r2, #4
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	440b      	add	r3, r1
 8002550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002554:	e00a      	b.n	800256c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4908      	ldr	r1, [pc, #32]	@ (800257c <__NVIC_SetPriority+0x50>)
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	3b04      	subs	r3, #4
 8002564:	0112      	lsls	r2, r2, #4
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	440b      	add	r3, r1
 800256a:	761a      	strb	r2, [r3, #24]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000e100 	.word	0xe000e100
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	@ 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f1c3 0307 	rsb	r3, r3, #7
 800259a:	2b04      	cmp	r3, #4
 800259c:	bf28      	it	cs
 800259e:	2304      	movcs	r3, #4
 80025a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d902      	bls.n	80025b0 <NVIC_EncodePriority+0x30>
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3b03      	subs	r3, #3
 80025ae:	e000      	b.n	80025b2 <NVIC_EncodePriority+0x32>
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	401a      	ands	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	43d9      	mvns	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	4313      	orrs	r3, r2
         );
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3724      	adds	r7, #36	@ 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025f8:	d301      	bcc.n	80025fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00f      	b.n	800261e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002628 <SysTick_Config+0x40>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002606:	210f      	movs	r1, #15
 8002608:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800260c:	f7ff ff8e 	bl	800252c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002610:	4b05      	ldr	r3, [pc, #20]	@ (8002628 <SysTick_Config+0x40>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002616:	4b04      	ldr	r3, [pc, #16]	@ (8002628 <SysTick_Config+0x40>)
 8002618:	2207      	movs	r2, #7
 800261a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	e000e010 	.word	0xe000e010

0800262c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ff29 	bl	800248c <__NVIC_SetPriorityGrouping>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002642:	b580      	push	{r7, lr}
 8002644:	b086      	sub	sp, #24
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002654:	f7ff ff3e 	bl	80024d4 <__NVIC_GetPriorityGrouping>
 8002658:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	6978      	ldr	r0, [r7, #20]
 8002660:	f7ff ff8e 	bl	8002580 <NVIC_EncodePriority>
 8002664:	4602      	mov	r2, r0
 8002666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff5d 	bl	800252c <__NVIC_SetPriority>
}
 8002672:	bf00      	nop
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	4603      	mov	r3, r0
 8002682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff31 	bl	80024f0 <__NVIC_EnableIRQ>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ffa2 	bl	80025e8 <SysTick_Config>
 80026a4:	4603      	mov	r3, r0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	@ 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	e159      	b.n	8002980 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026cc:	2201      	movs	r2, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	f040 8148 	bne.w	800297a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d005      	beq.n	8002702 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d130      	bne.n	8002764 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2203      	movs	r2, #3
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002738:	2201      	movs	r2, #1
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 0201 	and.w	r2, r3, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b03      	cmp	r3, #3
 800276e:	d017      	beq.n	80027a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	2203      	movs	r2, #3
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d123      	bne.n	80027f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	08da      	lsrs	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3208      	adds	r2, #8
 80027b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	220f      	movs	r2, #15
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	08da      	lsrs	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3208      	adds	r2, #8
 80027ee:	69b9      	ldr	r1, [r7, #24]
 80027f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0203 	and.w	r2, r3, #3
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80a2 	beq.w	800297a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	4b57      	ldr	r3, [pc, #348]	@ (8002998 <HAL_GPIO_Init+0x2e8>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	4a56      	ldr	r2, [pc, #344]	@ (8002998 <HAL_GPIO_Init+0x2e8>)
 8002840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002844:	6453      	str	r3, [r2, #68]	@ 0x44
 8002846:	4b54      	ldr	r3, [pc, #336]	@ (8002998 <HAL_GPIO_Init+0x2e8>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002852:	4a52      	ldr	r2, [pc, #328]	@ (800299c <HAL_GPIO_Init+0x2ec>)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3302      	adds	r3, #2
 800285a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	220f      	movs	r2, #15
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a49      	ldr	r2, [pc, #292]	@ (80029a0 <HAL_GPIO_Init+0x2f0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d019      	beq.n	80028b2 <HAL_GPIO_Init+0x202>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a48      	ldr	r2, [pc, #288]	@ (80029a4 <HAL_GPIO_Init+0x2f4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d013      	beq.n	80028ae <HAL_GPIO_Init+0x1fe>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a47      	ldr	r2, [pc, #284]	@ (80029a8 <HAL_GPIO_Init+0x2f8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00d      	beq.n	80028aa <HAL_GPIO_Init+0x1fa>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a46      	ldr	r2, [pc, #280]	@ (80029ac <HAL_GPIO_Init+0x2fc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d007      	beq.n	80028a6 <HAL_GPIO_Init+0x1f6>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a45      	ldr	r2, [pc, #276]	@ (80029b0 <HAL_GPIO_Init+0x300>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d101      	bne.n	80028a2 <HAL_GPIO_Init+0x1f2>
 800289e:	2304      	movs	r3, #4
 80028a0:	e008      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028a2:	2307      	movs	r3, #7
 80028a4:	e006      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028a6:	2303      	movs	r3, #3
 80028a8:	e004      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e002      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028b2:	2300      	movs	r3, #0
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	f002 0203 	and.w	r2, r2, #3
 80028ba:	0092      	lsls	r2, r2, #2
 80028bc:	4093      	lsls	r3, r2
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c4:	4935      	ldr	r1, [pc, #212]	@ (800299c <HAL_GPIO_Init+0x2ec>)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	3302      	adds	r3, #2
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d2:	4b38      	ldr	r3, [pc, #224]	@ (80029b4 <HAL_GPIO_Init+0x304>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028f6:	4a2f      	ldr	r2, [pc, #188]	@ (80029b4 <HAL_GPIO_Init+0x304>)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028fc:	4b2d      	ldr	r3, [pc, #180]	@ (80029b4 <HAL_GPIO_Init+0x304>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002920:	4a24      	ldr	r2, [pc, #144]	@ (80029b4 <HAL_GPIO_Init+0x304>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002926:	4b23      	ldr	r3, [pc, #140]	@ (80029b4 <HAL_GPIO_Init+0x304>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294a:	4a1a      	ldr	r2, [pc, #104]	@ (80029b4 <HAL_GPIO_Init+0x304>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002950:	4b18      	ldr	r3, [pc, #96]	@ (80029b4 <HAL_GPIO_Init+0x304>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002974:	4a0f      	ldr	r2, [pc, #60]	@ (80029b4 <HAL_GPIO_Init+0x304>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3301      	adds	r3, #1
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b0f      	cmp	r3, #15
 8002984:	f67f aea2 	bls.w	80026cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3724      	adds	r7, #36	@ 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	40013800 	.word	0x40013800
 80029a0:	40020000 	.word	0x40020000
 80029a4:	40020400 	.word	0x40020400
 80029a8:	40020800 	.word	0x40020800
 80029ac:	40020c00 	.word	0x40020c00
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40013c00 	.word	0x40013c00

080029b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
 80029c4:	4613      	mov	r3, r2
 80029c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c8:	787b      	ldrb	r3, [r7, #1]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029d4:	e003      	b.n	80029de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029d6:	887b      	ldrh	r3, [r7, #2]
 80029d8:	041a      	lsls	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	619a      	str	r2, [r3, #24]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e12b      	b.n	8002c56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7fe ffe2 	bl	80019dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2224      	movs	r2, #36	@ 0x24
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a50:	f002 fe48 	bl	80056e4 <HAL_RCC_GetPCLK1Freq>
 8002a54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4a81      	ldr	r2, [pc, #516]	@ (8002c60 <HAL_I2C_Init+0x274>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d807      	bhi.n	8002a70 <HAL_I2C_Init+0x84>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a80      	ldr	r2, [pc, #512]	@ (8002c64 <HAL_I2C_Init+0x278>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	bf94      	ite	ls
 8002a68:	2301      	movls	r3, #1
 8002a6a:	2300      	movhi	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e006      	b.n	8002a7e <HAL_I2C_Init+0x92>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a7d      	ldr	r2, [pc, #500]	@ (8002c68 <HAL_I2C_Init+0x27c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	bf94      	ite	ls
 8002a78:	2301      	movls	r3, #1
 8002a7a:	2300      	movhi	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0e7      	b.n	8002c56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4a78      	ldr	r2, [pc, #480]	@ (8002c6c <HAL_I2C_Init+0x280>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	0c9b      	lsrs	r3, r3, #18
 8002a90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4a6a      	ldr	r2, [pc, #424]	@ (8002c60 <HAL_I2C_Init+0x274>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d802      	bhi.n	8002ac0 <HAL_I2C_Init+0xd4>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	3301      	adds	r3, #1
 8002abe:	e009      	b.n	8002ad4 <HAL_I2C_Init+0xe8>
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ac6:	fb02 f303 	mul.w	r3, r2, r3
 8002aca:	4a69      	ldr	r2, [pc, #420]	@ (8002c70 <HAL_I2C_Init+0x284>)
 8002acc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad0:	099b      	lsrs	r3, r3, #6
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ae6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	495c      	ldr	r1, [pc, #368]	@ (8002c60 <HAL_I2C_Init+0x274>)
 8002af0:	428b      	cmp	r3, r1
 8002af2:	d819      	bhi.n	8002b28 <HAL_I2C_Init+0x13c>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e59      	subs	r1, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b02:	1c59      	adds	r1, r3, #1
 8002b04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b08:	400b      	ands	r3, r1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_I2C_Init+0x138>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1e59      	subs	r1, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b22:	e051      	b.n	8002bc8 <HAL_I2C_Init+0x1dc>
 8002b24:	2304      	movs	r3, #4
 8002b26:	e04f      	b.n	8002bc8 <HAL_I2C_Init+0x1dc>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d111      	bne.n	8002b54 <HAL_I2C_Init+0x168>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1e58      	subs	r0, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	440b      	add	r3, r1
 8002b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b42:	3301      	adds	r3, #1
 8002b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	e012      	b.n	8002b7a <HAL_I2C_Init+0x18e>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1e58      	subs	r0, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	0099      	lsls	r1, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_Init+0x196>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e022      	b.n	8002bc8 <HAL_I2C_Init+0x1dc>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10e      	bne.n	8002ba8 <HAL_I2C_Init+0x1bc>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1e58      	subs	r0, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6859      	ldr	r1, [r3, #4]
 8002b92:	460b      	mov	r3, r1
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	440b      	add	r3, r1
 8002b98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ba6:	e00f      	b.n	8002bc8 <HAL_I2C_Init+0x1dc>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	1e58      	subs	r0, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	0099      	lsls	r1, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	6809      	ldr	r1, [r1, #0]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bf6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6911      	ldr	r1, [r2, #16]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68d2      	ldr	r2, [r2, #12]
 8002c02:	4311      	orrs	r1, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	000186a0 	.word	0x000186a0
 8002c64:	001e847f 	.word	0x001e847f
 8002c68:	003d08ff 	.word	0x003d08ff
 8002c6c:	431bde83 	.word	0x431bde83
 8002c70:	10624dd3 	.word	0x10624dd3

08002c74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	460b      	mov	r3, r1
 8002c82:	817b      	strh	r3, [r7, #10]
 8002c84:	4613      	mov	r3, r2
 8002c86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c88:	f7ff fbd0 	bl	800242c <HAL_GetTick>
 8002c8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	f040 80e0 	bne.w	8002e5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	2319      	movs	r3, #25
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4970      	ldr	r1, [pc, #448]	@ (8002e68 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fc64 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e0d3      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_I2C_Master_Transmit+0x50>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e0cc      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d007      	beq.n	8002cea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cf8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2221      	movs	r2, #33	@ 0x21
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2210      	movs	r2, #16
 8002d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	893a      	ldrh	r2, [r7, #8]
 8002d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4a50      	ldr	r2, [pc, #320]	@ (8002e6c <HAL_I2C_Master_Transmit+0x1f8>)
 8002d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d2c:	8979      	ldrh	r1, [r7, #10]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	6a3a      	ldr	r2, [r7, #32]
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 face 	bl	80032d4 <I2C_MasterRequestWrite>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e08d      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d58:	e066      	b.n	8002e28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	6a39      	ldr	r1, [r7, #32]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 fd22 	bl	80037a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00d      	beq.n	8002d86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d107      	bne.n	8002d82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e06b      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	781a      	ldrb	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d11b      	bne.n	8002dfc <HAL_I2C_Master_Transmit+0x188>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d017      	beq.n	8002dfc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	781a      	ldrb	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	6a39      	ldr	r1, [r7, #32]
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fd19 	bl	8003838 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00d      	beq.n	8002e28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d107      	bne.n	8002e24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e01a      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d194      	bne.n	8002d5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e000      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e5c:	2302      	movs	r3, #2
  }
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	00100002 	.word	0x00100002
 8002e6c:	ffff0000 	.word	0xffff0000

08002e70 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	@ 0x30
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	817b      	strh	r3, [r7, #10]
 8002e80:	4613      	mov	r3, r2
 8002e82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e84:	f7ff fad2 	bl	800242c <HAL_GetTick>
 8002e88:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	f040 8217 	bne.w	80032c6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	2319      	movs	r3, #25
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	497c      	ldr	r1, [pc, #496]	@ (8003094 <HAL_I2C_Master_Receive+0x224>)
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fb66 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e20a      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_I2C_Master_Receive+0x50>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e203      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d007      	beq.n	8002ee6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0201 	orr.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ef4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2222      	movs	r2, #34	@ 0x22
 8002efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2210      	movs	r2, #16
 8002f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	893a      	ldrh	r2, [r7, #8]
 8002f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4a5c      	ldr	r2, [pc, #368]	@ (8003098 <HAL_I2C_Master_Receive+0x228>)
 8002f26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f28:	8979      	ldrh	r1, [r7, #10]
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 fa52 	bl	80033d8 <I2C_MasterRequestRead>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e1c4      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d113      	bne.n	8002f6e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f46:	2300      	movs	r3, #0
 8002f48:	623b      	str	r3, [r7, #32]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	623b      	str	r3, [r7, #32]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	623b      	str	r3, [r7, #32]
 8002f5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	e198      	b.n	80032a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d11b      	bne.n	8002fae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	61fb      	str	r3, [r7, #28]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	e178      	b.n	80032a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d11b      	bne.n	8002fee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	e158      	b.n	80032a0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ffc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003014:	e144      	b.n	80032a0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301a:	2b03      	cmp	r3, #3
 800301c:	f200 80f1 	bhi.w	8003202 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003024:	2b01      	cmp	r3, #1
 8003026:	d123      	bne.n	8003070 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800302a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fc4b 	bl	80038c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e145      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800306e:	e117      	b.n	80032a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003074:	2b02      	cmp	r3, #2
 8003076:	d14e      	bne.n	8003116 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307e:	2200      	movs	r2, #0
 8003080:	4906      	ldr	r1, [pc, #24]	@ (800309c <HAL_I2C_Master_Receive+0x22c>)
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 fa76 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e11a      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
 8003092:	bf00      	nop
 8003094:	00100002 	.word	0x00100002
 8003098:	ffff0000 	.word	0xffff0000
 800309c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003114:	e0c4      	b.n	80032a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311c:	2200      	movs	r2, #0
 800311e:	496c      	ldr	r1, [pc, #432]	@ (80032d0 <HAL_I2C_Master_Receive+0x460>)
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fa27 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0cb      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800313e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003178:	2200      	movs	r2, #0
 800317a:	4955      	ldr	r1, [pc, #340]	@ (80032d0 <HAL_I2C_Master_Receive+0x460>)
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f9f9 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e09d      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800319a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003200:	e04e      	b.n	80032a0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003204:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fb5e 	bl	80038c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e058      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b04      	cmp	r3, #4
 8003254:	d124      	bne.n	80032a0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325a:	2b03      	cmp	r3, #3
 800325c:	d107      	bne.n	800326e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800326c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f47f aeb6 	bne.w	8003016 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e000      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80032c6:	2302      	movs	r3, #2
  }
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3728      	adds	r7, #40	@ 0x28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	00010004 	.word	0x00010004

080032d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af02      	add	r7, sp, #8
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	460b      	mov	r3, r1
 80032e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d006      	beq.n	80032fe <I2C_MasterRequestWrite+0x2a>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d003      	beq.n	80032fe <I2C_MasterRequestWrite+0x2a>
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032fc:	d108      	bne.n	8003310 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	e00b      	b.n	8003328 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003314:	2b12      	cmp	r3, #18
 8003316:	d107      	bne.n	8003328 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003326:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f91d 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800334e:	d103      	bne.n	8003358 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003356:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e035      	b.n	80033c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003364:	d108      	bne.n	8003378 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003366:	897b      	ldrh	r3, [r7, #10]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003374:	611a      	str	r2, [r3, #16]
 8003376:	e01b      	b.n	80033b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003378:	897b      	ldrh	r3, [r7, #10]
 800337a:	11db      	asrs	r3, r3, #7
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f003 0306 	and.w	r3, r3, #6
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f063 030f 	orn	r3, r3, #15
 8003388:	b2da      	uxtb	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	490e      	ldr	r1, [pc, #56]	@ (80033d0 <I2C_MasterRequestWrite+0xfc>)
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f966 	bl	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e010      	b.n	80033c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033a6:	897b      	ldrh	r3, [r7, #10]
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4907      	ldr	r1, [pc, #28]	@ (80033d4 <I2C_MasterRequestWrite+0x100>)
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f956 	bl	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	00010008 	.word	0x00010008
 80033d4:	00010002 	.word	0x00010002

080033d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af02      	add	r7, sp, #8
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	607a      	str	r2, [r7, #4]
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	460b      	mov	r3, r1
 80033e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b08      	cmp	r3, #8
 8003402:	d006      	beq.n	8003412 <I2C_MasterRequestRead+0x3a>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d003      	beq.n	8003412 <I2C_MasterRequestRead+0x3a>
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003410:	d108      	bne.n	8003424 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	e00b      	b.n	800343c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003428:	2b11      	cmp	r3, #17
 800342a:	d107      	bne.n	800343c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800343a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f893 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00d      	beq.n	8003470 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003462:	d103      	bne.n	800346c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e079      	b.n	8003564 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003478:	d108      	bne.n	800348c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800347a:	897b      	ldrh	r3, [r7, #10]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	b2da      	uxtb	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	611a      	str	r2, [r3, #16]
 800348a:	e05f      	b.n	800354c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800348c:	897b      	ldrh	r3, [r7, #10]
 800348e:	11db      	asrs	r3, r3, #7
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f003 0306 	and.w	r3, r3, #6
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f063 030f 	orn	r3, r3, #15
 800349c:	b2da      	uxtb	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	4930      	ldr	r1, [pc, #192]	@ (800356c <I2C_MasterRequestRead+0x194>)
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f8dc 	bl	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e054      	b.n	8003564 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034ba:	897b      	ldrh	r3, [r7, #10]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4929      	ldr	r1, [pc, #164]	@ (8003570 <I2C_MasterRequestRead+0x198>)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f8cc 	bl	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e044      	b.n	8003564 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f831 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00d      	beq.n	8003534 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003526:	d103      	bne.n	8003530 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800352e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e017      	b.n	8003564 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003534:	897b      	ldrh	r3, [r7, #10]
 8003536:	11db      	asrs	r3, r3, #7
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f003 0306 	and.w	r3, r3, #6
 800353e:	b2db      	uxtb	r3, r3
 8003540:	f063 030e 	orn	r3, r3, #14
 8003544:	b2da      	uxtb	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4907      	ldr	r1, [pc, #28]	@ (8003570 <I2C_MasterRequestRead+0x198>)
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f888 	bl	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	00010008 	.word	0x00010008
 8003570:	00010002 	.word	0x00010002

08003574 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003584:	e048      	b.n	8003618 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800358c:	d044      	beq.n	8003618 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358e:	f7fe ff4d 	bl	800242c <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d302      	bcc.n	80035a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d139      	bne.n	8003618 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	0c1b      	lsrs	r3, r3, #16
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d10d      	bne.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	43da      	mvns	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	4013      	ands	r3, r2
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf0c      	ite	eq
 80035c0:	2301      	moveq	r3, #1
 80035c2:	2300      	movne	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	461a      	mov	r2, r3
 80035c8:	e00c      	b.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	43da      	mvns	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4013      	ands	r3, r2
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	bf0c      	ite	eq
 80035dc:	2301      	moveq	r3, #1
 80035de:	2300      	movne	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d116      	bne.n	8003618 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e023      	b.n	8003660 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	0c1b      	lsrs	r3, r3, #16
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	d10d      	bne.n	800363e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	43da      	mvns	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4013      	ands	r3, r2
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf0c      	ite	eq
 8003634:	2301      	moveq	r3, #1
 8003636:	2300      	movne	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	e00c      	b.n	8003658 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	43da      	mvns	r2, r3
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	4013      	ands	r3, r2
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	429a      	cmp	r2, r3
 800365c:	d093      	beq.n	8003586 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003676:	e071      	b.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003686:	d123      	bne.n	80036d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003696:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036bc:	f043 0204 	orr.w	r2, r3, #4
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e067      	b.n	80037a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036d6:	d041      	beq.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d8:	f7fe fea8 	bl	800242c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d302      	bcc.n	80036ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d136      	bne.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d10c      	bne.n	8003712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	43da      	mvns	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4013      	ands	r3, r2
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	bf14      	ite	ne
 800370a:	2301      	movne	r3, #1
 800370c:	2300      	moveq	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	e00b      	b.n	800372a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	43da      	mvns	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4013      	ands	r3, r2
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf14      	ite	ne
 8003724:	2301      	movne	r3, #1
 8003726:	2300      	moveq	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d016      	beq.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	f043 0220 	orr.w	r2, r3, #32
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e021      	b.n	80037a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	0c1b      	lsrs	r3, r3, #16
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b01      	cmp	r3, #1
 8003764:	d10c      	bne.n	8003780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	43da      	mvns	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4013      	ands	r3, r2
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf14      	ite	ne
 8003778:	2301      	movne	r3, #1
 800377a:	2300      	moveq	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e00b      	b.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	43da      	mvns	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4013      	ands	r3, r2
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	bf14      	ite	ne
 8003792:	2301      	movne	r3, #1
 8003794:	2300      	moveq	r3, #0
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	f47f af6d 	bne.w	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037b4:	e034      	b.n	8003820 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 f8e3 	bl	8003982 <I2C_IsAcknowledgeFailed>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e034      	b.n	8003830 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037cc:	d028      	beq.n	8003820 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ce:	f7fe fe2d 	bl	800242c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d11d      	bne.n	8003820 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ee:	2b80      	cmp	r3, #128	@ 0x80
 80037f0:	d016      	beq.n	8003820 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380c:	f043 0220 	orr.w	r2, r3, #32
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e007      	b.n	8003830 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800382a:	2b80      	cmp	r3, #128	@ 0x80
 800382c:	d1c3      	bne.n	80037b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003844:	e034      	b.n	80038b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f89b 	bl	8003982 <I2C_IsAcknowledgeFailed>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e034      	b.n	80038c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800385c:	d028      	beq.n	80038b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385e:	f7fe fde5 	bl	800242c <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	429a      	cmp	r2, r3
 800386c:	d302      	bcc.n	8003874 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d11d      	bne.n	80038b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b04      	cmp	r3, #4
 8003880:	d016      	beq.n	80038b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389c:	f043 0220 	orr.w	r2, r3, #32
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e007      	b.n	80038c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d1c3      	bne.n	8003846 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038d4:	e049      	b.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b10      	cmp	r3, #16
 80038e2:	d119      	bne.n	8003918 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0210 	mvn.w	r2, #16
 80038ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e030      	b.n	800397a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003918:	f7fe fd88 	bl	800242c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	429a      	cmp	r2, r3
 8003926:	d302      	bcc.n	800392e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d11d      	bne.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003938:	2b40      	cmp	r3, #64	@ 0x40
 800393a:	d016      	beq.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	f043 0220 	orr.w	r2, r3, #32
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e007      	b.n	800397a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003974:	2b40      	cmp	r3, #64	@ 0x40
 8003976:	d1ae      	bne.n	80038d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003998:	d11b      	bne.n	80039d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	f043 0204 	orr.w	r2, r3, #4
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e101      	b.n	8003bf6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d106      	bne.n	8003a12 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f006 fdaf 	bl	800a570 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2203      	movs	r2, #3
 8003a16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a20:	d102      	bne.n	8003a28 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f003 f946 	bl	8006cbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	7c1a      	ldrb	r2, [r3, #16]
 8003a3a:	f88d 2000 	strb.w	r2, [sp]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a42:	f003 f825 	bl	8006a90 <USB_CoreInit>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0ce      	b.n	8003bf6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f003 f93e 	bl	8006ce0 <USB_SetCurrentMode>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e0bf      	b.n	8003bf6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a76:	2300      	movs	r3, #0
 8003a78:	73fb      	strb	r3, [r7, #15]
 8003a7a:	e04a      	b.n	8003b12 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	3315      	adds	r3, #21
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	3314      	adds	r3, #20
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003aa4:	7bfa      	ldrb	r2, [r7, #15]
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	b298      	uxth	r0, r3
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	332e      	adds	r3, #46	@ 0x2e
 8003ab8:	4602      	mov	r2, r0
 8003aba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003abc:	7bfa      	ldrb	r2, [r7, #15]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3318      	adds	r3, #24
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	331c      	adds	r3, #28
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ae4:	7bfa      	ldrb	r2, [r7, #15]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	3320      	adds	r3, #32
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003af8:	7bfa      	ldrb	r2, [r7, #15]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	3324      	adds	r3, #36	@ 0x24
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	791b      	ldrb	r3, [r3, #4]
 8003b16:	7bfa      	ldrb	r2, [r7, #15]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d3af      	bcc.n	8003a7c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73fb      	strb	r3, [r7, #15]
 8003b20:	e044      	b.n	8003bac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b22:	7bfa      	ldrb	r2, [r7, #15]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b38:	7bfa      	ldrb	r2, [r7, #15]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003b4a:	7bfa      	ldrb	r2, [r7, #15]
 8003b4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b4e:	7bfa      	ldrb	r2, [r7, #15]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4413      	add	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b64:	7bfa      	ldrb	r2, [r7, #15]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b7a:	7bfa      	ldrb	r2, [r7, #15]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b90:	7bfa      	ldrb	r2, [r7, #15]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	791b      	ldrb	r3, [r3, #4]
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d3b5      	bcc.n	8003b22 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	7c1a      	ldrb	r2, [r3, #16]
 8003bbe:	f88d 2000 	strb.w	r2, [sp]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bc6:	f003 f8d7 	bl	8006d78 <USB_DevInit>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e00c      	b.n	8003bf6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f004 f921 	bl	8007e36 <USB_DevDisconnect>

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_PCD_Start+0x1c>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e022      	b.n	8003c60 <HAL_PCD_Start+0x62>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d105      	bne.n	8003c42 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f003 f828 	bl	8006c9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f004 f8cf 	bl	8007df4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b08d      	sub	sp, #52	@ 0x34
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f004 f98d 	bl	8007f9e <USB_GetMode>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f040 848c 	bne.w	80045a4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f004 f8f1 	bl	8007e78 <USB_ReadInterrupts>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8482 	beq.w	80045a2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f004 f8de 	bl	8007e78 <USB_ReadInterrupts>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d107      	bne.n	8003cd6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695a      	ldr	r2, [r3, #20]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f002 0202 	and.w	r2, r2, #2
 8003cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f004 f8cc 	bl	8007e78 <USB_ReadInterrupts>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f003 0310 	and.w	r3, r3, #16
 8003ce6:	2b10      	cmp	r3, #16
 8003ce8:	d161      	bne.n	8003dae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0210 	bic.w	r2, r2, #16
 8003cf8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	f003 020f 	and.w	r2, r3, #15
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	4413      	add	r3, r2
 8003d16:	3304      	adds	r3, #4
 8003d18:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003d20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d24:	d124      	bne.n	8003d70 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d035      	beq.n	8003d9e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	6a38      	ldr	r0, [r7, #32]
 8003d46:	f003 ff03 	bl	8007b50 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d56:	441a      	add	r2, r3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	695a      	ldr	r2, [r3, #20]
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	091b      	lsrs	r3, r3, #4
 8003d64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d68:	441a      	add	r2, r3
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	615a      	str	r2, [r3, #20]
 8003d6e:	e016      	b.n	8003d9e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003d76:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d7a:	d110      	bne.n	8003d9e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d82:	2208      	movs	r2, #8
 8003d84:	4619      	mov	r1, r3
 8003d86:	6a38      	ldr	r0, [r7, #32]
 8003d88:	f003 fee2 	bl	8007b50 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	091b      	lsrs	r3, r3, #4
 8003d94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d98:	441a      	add	r2, r3
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699a      	ldr	r2, [r3, #24]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 0210 	orr.w	r2, r2, #16
 8003dac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f004 f860 	bl	8007e78 <USB_ReadInterrupts>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dbe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003dc2:	f040 80a7 	bne.w	8003f14 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f004 f865 	bl	8007e9e <USB_ReadDevAllOutEpInterrupt>
 8003dd4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003dd6:	e099      	b.n	8003f0c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 808e 	beq.w	8003f00 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	4611      	mov	r1, r2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f004 f889 	bl	8007f06 <USB_ReadDevOutEPInterrupt>
 8003df4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00c      	beq.n	8003e1a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	2301      	movs	r3, #1
 8003e10:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003e12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fea3 	bl	8004b60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00c      	beq.n	8003e3e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e30:	461a      	mov	r2, r3
 8003e32:	2308      	movs	r3, #8
 8003e34:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 ff79 	bl	8004d30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e54:	461a      	mov	r2, r3
 8003e56:	2310      	movs	r3, #16
 8003e58:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d030      	beq.n	8003ec6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e6c:	2b80      	cmp	r3, #128	@ 0x80
 8003e6e:	d109      	bne.n	8003e84 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	69fa      	ldr	r2, [r7, #28]
 8003e7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e82:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	4413      	add	r3, r2
 8003e96:	3304      	adds	r3, #4
 8003e98:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	78db      	ldrb	r3, [r3, #3]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d108      	bne.n	8003eb4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f006 fc5a 	bl	800a768 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d008      	beq.n	8003ee2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003edc:	461a      	mov	r2, r3
 8003ede:	2320      	movs	r3, #32
 8003ee0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d009      	beq.n	8003f00 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003efe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	3301      	adds	r3, #1
 8003f04:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f47f af62 	bne.w	8003dd8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f003 ffad 	bl	8007e78 <USB_ReadInterrupts>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f28:	f040 80db 	bne.w	80040e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f003 ffce 	bl	8007ed2 <USB_ReadDevAllInEpInterrupt>
 8003f36:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003f3c:	e0cd      	b.n	80040da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 80c2 	beq.w	80040ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	4611      	mov	r1, r2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f003 fff4 	bl	8007f42 <USB_ReadDevInEPInterrupt>
 8003f5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d057      	beq.n	8004016 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	69f9      	ldr	r1, [r7, #28]
 8003f82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f86:	4013      	ands	r3, r2
 8003f88:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f96:	461a      	mov	r2, r3
 8003f98:	2301      	movs	r3, #1
 8003f9a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	799b      	ldrb	r3, [r3, #6]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d132      	bne.n	800400a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	3320      	adds	r3, #32
 8003fb4:	6819      	ldr	r1, [r3, #0]
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fba:	4613      	mov	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4403      	add	r3, r0
 8003fc4:	331c      	adds	r3, #28
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4419      	add	r1, r3
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fce:	4613      	mov	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4403      	add	r3, r0
 8003fd8:	3320      	adds	r3, #32
 8003fda:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d113      	bne.n	800400a <HAL_PCD_IRQHandler+0x3a2>
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	3324      	adds	r3, #36	@ 0x24
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d108      	bne.n	800400a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004002:	461a      	mov	r2, r3
 8004004:	2101      	movs	r1, #1
 8004006:	f003 fffb 	bl	8008000 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	b2db      	uxtb	r3, r3
 800400e:	4619      	mov	r1, r3
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f006 fb2e 	bl	800a672 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800402c:	461a      	mov	r2, r3
 800402e:	2308      	movs	r3, #8
 8004030:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800403c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004048:	461a      	mov	r2, r3
 800404a:	2310      	movs	r3, #16
 800404c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004064:	461a      	mov	r2, r3
 8004066:	2340      	movs	r3, #64	@ 0x40
 8004068:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d023      	beq.n	80040bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004074:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004076:	6a38      	ldr	r0, [r7, #32]
 8004078:	f002 ffe2 	bl	8007040 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800407c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	3310      	adds	r3, #16
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	4413      	add	r3, r2
 800408c:	3304      	adds	r3, #4
 800408e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	78db      	ldrb	r3, [r3, #3]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d108      	bne.n	80040aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2200      	movs	r2, #0
 800409c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	4619      	mov	r1, r3
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f006 fb71 	bl	800a78c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040b6:	461a      	mov	r2, r3
 80040b8:	2302      	movs	r3, #2
 80040ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80040c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fcbd 	bl	8004a48 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	3301      	adds	r3, #1
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80040d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d6:	085b      	lsrs	r3, r3, #1
 80040d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80040da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f47f af2e 	bne.w	8003f3e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f003 fec6 	bl	8007e78 <USB_ReadInterrupts>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040f6:	d122      	bne.n	800413e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004106:	f023 0301 	bic.w	r3, r3, #1
 800410a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004112:	2b01      	cmp	r3, #1
 8004114:	d108      	bne.n	8004128 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800411e:	2100      	movs	r1, #0
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fea3 	bl	8004e6c <HAL_PCDEx_LPM_Callback>
 8004126:	e002      	b.n	800412e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f006 fb0f 	bl	800a74c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695a      	ldr	r2, [r3, #20]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800413c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f003 fe98 	bl	8007e78 <USB_ReadInterrupts>
 8004148:	4603      	mov	r3, r0
 800414a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800414e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004152:	d112      	bne.n	800417a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d102      	bne.n	800416a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f006 facb 	bl	800a700 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695a      	ldr	r2, [r3, #20]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004178:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f003 fe7a 	bl	8007e78 <USB_ReadInterrupts>
 8004184:	4603      	mov	r3, r0
 8004186:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800418a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800418e:	f040 80b7 	bne.w	8004300 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041a0:	f023 0301 	bic.w	r3, r3, #1
 80041a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2110      	movs	r1, #16
 80041ac:	4618      	mov	r0, r3
 80041ae:	f002 ff47 	bl	8007040 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041b2:	2300      	movs	r3, #0
 80041b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041b6:	e046      	b.n	8004246 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80041b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c4:	461a      	mov	r2, r3
 80041c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041dc:	0151      	lsls	r1, r2, #5
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	440a      	add	r2, r1
 80041e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f8:	461a      	mov	r2, r3
 80041fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004210:	0151      	lsls	r1, r2, #5
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	440a      	add	r2, r1
 8004216:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800421a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800421e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004230:	0151      	lsls	r1, r2, #5
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	440a      	add	r2, r1
 8004236:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800423a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800423e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004242:	3301      	adds	r3, #1
 8004244:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	791b      	ldrb	r3, [r3, #4]
 800424a:	461a      	mov	r2, r3
 800424c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800424e:	4293      	cmp	r3, r2
 8004250:	d3b2      	bcc.n	80041b8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004260:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004264:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	7bdb      	ldrb	r3, [r3, #15]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004274:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800427e:	f043 030b 	orr.w	r3, r3, #11
 8004282:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800428c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004294:	f043 030b 	orr.w	r3, r3, #11
 8004298:	6453      	str	r3, [r2, #68]	@ 0x44
 800429a:	e015      	b.n	80042c8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80042ae:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80042b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042c2:	f043 030b 	orr.w	r3, r3, #11
 80042c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80042da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042ea:	461a      	mov	r2, r3
 80042ec:	f003 fe88 	bl	8008000 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80042fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f003 fdb7 	bl	8007e78 <USB_ReadInterrupts>
 800430a:	4603      	mov	r3, r0
 800430c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004314:	d123      	bne.n	800435e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f003 fe4d 	bl	8007fba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f002 ff04 	bl	8007132 <USB_GetDevSpeed>
 800432a:	4603      	mov	r3, r0
 800432c:	461a      	mov	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681c      	ldr	r4, [r3, #0]
 8004336:	f001 f9c9 	bl	80056cc <HAL_RCC_GetHCLKFreq>
 800433a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004340:	461a      	mov	r2, r3
 8004342:	4620      	mov	r0, r4
 8004344:	f002 fc08 	bl	8006b58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f006 f9ba 	bl	800a6c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800435c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f003 fd88 	bl	8007e78 <USB_ReadInterrupts>
 8004368:	4603      	mov	r3, r0
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b08      	cmp	r3, #8
 8004370:	d10a      	bne.n	8004388 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f006 f997 	bl	800a6a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695a      	ldr	r2, [r3, #20]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f002 0208 	and.w	r2, r2, #8
 8004386:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f003 fd73 	bl	8007e78 <USB_ReadInterrupts>
 8004392:	4603      	mov	r3, r0
 8004394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004398:	2b80      	cmp	r3, #128	@ 0x80
 800439a:	d123      	bne.n	80043e4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043a8:	2301      	movs	r3, #1
 80043aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ac:	e014      	b.n	80043d8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b2:	4613      	mov	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d105      	bne.n	80043d2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	4619      	mov	r1, r3
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fb0a 	bl	80049e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	3301      	adds	r3, #1
 80043d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	791b      	ldrb	r3, [r3, #4]
 80043dc:	461a      	mov	r2, r3
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d3e4      	bcc.n	80043ae <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f003 fd45 	bl	8007e78 <USB_ReadInterrupts>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043f8:	d13c      	bne.n	8004474 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043fa:	2301      	movs	r3, #1
 80043fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043fe:	e02b      	b.n	8004458 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	3318      	adds	r3, #24
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d115      	bne.n	8004452 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004426:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004428:	2b00      	cmp	r3, #0
 800442a:	da12      	bge.n	8004452 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004430:	4613      	mov	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	3317      	adds	r3, #23
 800443c:	2201      	movs	r2, #1
 800443e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004448:	b2db      	uxtb	r3, r3
 800444a:	4619      	mov	r1, r3
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 faca 	bl	80049e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	3301      	adds	r3, #1
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	791b      	ldrb	r3, [r3, #4]
 800445c:	461a      	mov	r2, r3
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	4293      	cmp	r3, r2
 8004462:	d3cd      	bcc.n	8004400 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695a      	ldr	r2, [r3, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004472:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f003 fcfd 	bl	8007e78 <USB_ReadInterrupts>
 800447e:	4603      	mov	r3, r0
 8004480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004484:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004488:	d156      	bne.n	8004538 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800448a:	2301      	movs	r3, #1
 800448c:	627b      	str	r3, [r7, #36]	@ 0x24
 800448e:	e045      	b.n	800451c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a4:	4613      	mov	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d12e      	bne.n	8004516 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	da2b      	bge.n	8004516 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80044ca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d121      	bne.n	8004516 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d6:	4613      	mov	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80044e4:	2201      	movs	r2, #1
 80044e6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800450e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004512:	6053      	str	r3, [r2, #4]
            break;
 8004514:	e008      	b.n	8004528 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	3301      	adds	r3, #1
 800451a:	627b      	str	r3, [r7, #36]	@ 0x24
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	791b      	ldrb	r3, [r3, #4]
 8004520:	461a      	mov	r2, r3
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	4293      	cmp	r3, r2
 8004526:	d3b3      	bcc.n	8004490 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695a      	ldr	r2, [r3, #20]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004536:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f003 fc9b 	bl	8007e78 <USB_ReadInterrupts>
 8004542:	4603      	mov	r3, r0
 8004544:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800454c:	d10a      	bne.n	8004564 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f006 f92e 	bl	800a7b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695a      	ldr	r2, [r3, #20]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004562:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f003 fc85 	bl	8007e78 <USB_ReadInterrupts>
 800456e:	4603      	mov	r3, r0
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b04      	cmp	r3, #4
 8004576:	d115      	bne.n	80045a4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f006 f91e 	bl	800a7cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6859      	ldr	r1, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	430a      	orrs	r2, r1
 800459e:	605a      	str	r2, [r3, #4]
 80045a0:	e000      	b.n	80045a4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80045a2:	bf00      	nop
    }
  }
}
 80045a4:	3734      	adds	r7, #52	@ 0x34
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd90      	pop	{r4, r7, pc}

080045aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	460b      	mov	r3, r1
 80045b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_PCD_SetAddress+0x1a>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e012      	b.n	80045ea <HAL_PCD_SetAddress+0x40>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	78fa      	ldrb	r2, [r7, #3]
 80045d0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	78fa      	ldrb	r2, [r7, #3]
 80045d8:	4611      	mov	r1, r2
 80045da:	4618      	mov	r0, r3
 80045dc:	f003 fbe4 	bl	8007da8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	4608      	mov	r0, r1
 80045fc:	4611      	mov	r1, r2
 80045fe:	461a      	mov	r2, r3
 8004600:	4603      	mov	r3, r0
 8004602:	70fb      	strb	r3, [r7, #3]
 8004604:	460b      	mov	r3, r1
 8004606:	803b      	strh	r3, [r7, #0]
 8004608:	4613      	mov	r3, r2
 800460a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004614:	2b00      	cmp	r3, #0
 8004616:	da0f      	bge.n	8004638 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	f003 020f 	and.w	r2, r3, #15
 800461e:	4613      	mov	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	3310      	adds	r3, #16
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	4413      	add	r3, r2
 800462c:	3304      	adds	r3, #4
 800462e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	705a      	strb	r2, [r3, #1]
 8004636:	e00f      	b.n	8004658 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	f003 020f 	and.w	r2, r3, #15
 800463e:	4613      	mov	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	4413      	add	r3, r2
 800464e:	3304      	adds	r3, #4
 8004650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	b2da      	uxtb	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004664:	883b      	ldrh	r3, [r7, #0]
 8004666:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	78ba      	ldrb	r2, [r7, #2]
 8004672:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d004      	beq.n	8004686 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004686:	78bb      	ldrb	r3, [r7, #2]
 8004688:	2b02      	cmp	r3, #2
 800468a:	d102      	bne.n	8004692 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_PCD_EP_Open+0xae>
 800469c:	2302      	movs	r3, #2
 800469e:	e00e      	b.n	80046be <HAL_PCD_EP_Open+0xcc>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68f9      	ldr	r1, [r7, #12]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f002 fd64 	bl	800717c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80046bc:	7afb      	ldrb	r3, [r7, #11]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b084      	sub	sp, #16
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	460b      	mov	r3, r1
 80046d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	da0f      	bge.n	80046fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046da:	78fb      	ldrb	r3, [r7, #3]
 80046dc:	f003 020f 	and.w	r2, r3, #15
 80046e0:	4613      	mov	r3, r2
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	3310      	adds	r3, #16
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	4413      	add	r3, r2
 80046ee:	3304      	adds	r3, #4
 80046f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	705a      	strb	r2, [r3, #1]
 80046f8:	e00f      	b.n	800471a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046fa:	78fb      	ldrb	r3, [r7, #3]
 80046fc:	f003 020f 	and.w	r2, r3, #15
 8004700:	4613      	mov	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	4413      	add	r3, r2
 8004710:	3304      	adds	r3, #4
 8004712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800471a:	78fb      	ldrb	r3, [r7, #3]
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	b2da      	uxtb	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_PCD_EP_Close+0x6e>
 8004730:	2302      	movs	r3, #2
 8004732:	e00e      	b.n	8004752 <HAL_PCD_EP_Close+0x8c>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68f9      	ldr	r1, [r7, #12]
 8004742:	4618      	mov	r0, r3
 8004744:	f002 fda2 	bl	800728c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b086      	sub	sp, #24
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	460b      	mov	r3, r1
 8004768:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800476a:	7afb      	ldrb	r3, [r7, #11]
 800476c:	f003 020f 	and.w	r2, r3, #15
 8004770:	4613      	mov	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	3304      	adds	r3, #4
 8004782:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2200      	movs	r2, #0
 8004794:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2200      	movs	r2, #0
 800479a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800479c:	7afb      	ldrb	r3, [r7, #11]
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	799b      	ldrb	r3, [r3, #6]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d102      	bne.n	80047b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	799b      	ldrb	r3, [r3, #6]
 80047be:	461a      	mov	r2, r3
 80047c0:	6979      	ldr	r1, [r7, #20]
 80047c2:	f002 fe3f 	bl	8007444 <USB_EPStartXfer>

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	f003 020f 	and.w	r2, r3, #15
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80047f2:	681b      	ldr	r3, [r3, #0]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	607a      	str	r2, [r7, #4]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	460b      	mov	r3, r1
 800480e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004810:	7afb      	ldrb	r3, [r7, #11]
 8004812:	f003 020f 	and.w	r2, r3, #15
 8004816:	4613      	mov	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	3310      	adds	r3, #16
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4413      	add	r3, r2
 8004824:	3304      	adds	r3, #4
 8004826:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2200      	movs	r2, #0
 8004838:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2201      	movs	r2, #1
 800483e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004840:	7afb      	ldrb	r3, [r7, #11]
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	b2da      	uxtb	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	799b      	ldrb	r3, [r3, #6]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d102      	bne.n	800485a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	799b      	ldrb	r3, [r3, #6]
 8004862:	461a      	mov	r2, r3
 8004864:	6979      	ldr	r1, [r7, #20]
 8004866:	f002 fded 	bl	8007444 <USB_EPStartXfer>

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	7912      	ldrb	r2, [r2, #4]
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e04f      	b.n	8004932 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004892:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004896:	2b00      	cmp	r3, #0
 8004898:	da0f      	bge.n	80048ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	f003 020f 	and.w	r2, r3, #15
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	3310      	adds	r3, #16
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	3304      	adds	r3, #4
 80048b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	705a      	strb	r2, [r3, #1]
 80048b8:	e00d      	b.n	80048d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	4613      	mov	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	4413      	add	r3, r2
 80048cc:	3304      	adds	r3, #4
 80048ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_PCD_EP_SetStall+0x82>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e01d      	b.n	8004932 <HAL_PCD_EP_SetStall+0xbe>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68f9      	ldr	r1, [r7, #12]
 8004904:	4618      	mov	r0, r3
 8004906:	f003 f97b 	bl	8007c00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	2b00      	cmp	r3, #0
 8004912:	d109      	bne.n	8004928 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	7999      	ldrb	r1, [r3, #6]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004922:	461a      	mov	r2, r3
 8004924:	f003 fb6c 	bl	8008000 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	460b      	mov	r3, r1
 8004944:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	7912      	ldrb	r2, [r2, #4]
 8004950:	4293      	cmp	r3, r2
 8004952:	d901      	bls.n	8004958 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e042      	b.n	80049de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800495c:	2b00      	cmp	r3, #0
 800495e:	da0f      	bge.n	8004980 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	f003 020f 	and.w	r2, r3, #15
 8004966:	4613      	mov	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	3310      	adds	r3, #16
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	4413      	add	r3, r2
 8004974:	3304      	adds	r3, #4
 8004976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	705a      	strb	r2, [r3, #1]
 800497e:	e00f      	b.n	80049a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	f003 020f 	and.w	r2, r3, #15
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	4413      	add	r3, r2
 8004996:	3304      	adds	r3, #4
 8004998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049a6:	78fb      	ldrb	r3, [r7, #3]
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_PCD_EP_ClrStall+0x86>
 80049bc:	2302      	movs	r3, #2
 80049be:	e00e      	b.n	80049de <HAL_PCD_EP_ClrStall+0xa4>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68f9      	ldr	r1, [r7, #12]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f003 f984 	bl	8007cdc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	460b      	mov	r3, r1
 80049f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	da0c      	bge.n	8004a14 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	f003 020f 	and.w	r2, r3, #15
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	3310      	adds	r3, #16
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3304      	adds	r3, #4
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	e00c      	b.n	8004a2e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	f003 020f 	and.w	r2, r3, #15
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	4413      	add	r3, r2
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68f9      	ldr	r1, [r7, #12]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f002 ffa3 	bl	8007980 <USB_EPStopXfer>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a3e:	7afb      	ldrb	r3, [r7, #11]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	@ 0x28
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	3310      	adds	r3, #16
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	695a      	ldr	r2, [r3, #20]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d901      	bls.n	8004a80 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e06b      	b.n	8004b58 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d902      	bls.n	8004a9c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	3303      	adds	r3, #3
 8004aa0:	089b      	lsrs	r3, r3, #2
 8004aa2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004aa4:	e02a      	b.n	8004afc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d902      	bls.n	8004ac2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3303      	adds	r3, #3
 8004ac6:	089b      	lsrs	r3, r3, #2
 8004ac8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	68d9      	ldr	r1, [r3, #12]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	4603      	mov	r3, r0
 8004ade:	6978      	ldr	r0, [r7, #20]
 8004ae0:	f002 fff8 	bl	8007ad4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	441a      	add	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	695a      	ldr	r2, [r3, #20]
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	441a      	add	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d809      	bhi.n	8004b26 <PCD_WriteEmptyTxFifo+0xde>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d203      	bcs.n	8004b26 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1bf      	bne.n	8004aa6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d811      	bhi.n	8004b56 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	2201      	movs	r2, #1
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	43db      	mvns	r3, r3
 8004b4c:	6939      	ldr	r1, [r7, #16]
 8004b4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b52:	4013      	ands	r3, r2
 8004b54:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3720      	adds	r7, #32
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	333c      	adds	r3, #60	@ 0x3c
 8004b78:	3304      	adds	r3, #4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	799b      	ldrb	r3, [r3, #6]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d17b      	bne.n	8004c8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d015      	beq.n	8004bcc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	4a61      	ldr	r2, [pc, #388]	@ (8004d28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	f240 80b9 	bls.w	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80b3 	beq.w	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bc8:	6093      	str	r3, [r2, #8]
 8004bca:	e0a7      	b.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d009      	beq.n	8004bea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be2:	461a      	mov	r2, r3
 8004be4:	2320      	movs	r3, #32
 8004be6:	6093      	str	r3, [r2, #8]
 8004be8:	e098      	b.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f040 8093 	bne.w	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8004d28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d90f      	bls.n	8004c1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c14:	461a      	mov	r2, r3
 8004c16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c1a:	6093      	str	r3, [r2, #8]
 8004c1c:	e07e      	b.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	4613      	mov	r3, r2
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	4413      	add	r3, r2
 8004c30:	3304      	adds	r3, #4
 8004c32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1a      	ldr	r2, [r3, #32]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	0159      	lsls	r1, r3, #5
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	440b      	add	r3, r1
 8004c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4a:	1ad2      	subs	r2, r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d114      	bne.n	8004c80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c68:	461a      	mov	r2, r3
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	f003 f9c8 	bl	8008000 <USB_EP0_OutStart>
 8004c70:	e006      	b.n	8004c80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	441a      	add	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f005 fcd8 	bl	800a63c <HAL_PCD_DataOutStageCallback>
 8004c8c:	e046      	b.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	4a26      	ldr	r2, [pc, #152]	@ (8004d2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d124      	bne.n	8004ce0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cac:	461a      	mov	r2, r3
 8004cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cb2:	6093      	str	r3, [r2, #8]
 8004cb4:	e032      	b.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f003 0320 	and.w	r3, r3, #32
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ccc:	461a      	mov	r2, r3
 8004cce:	2320      	movs	r3, #32
 8004cd0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f005 fcaf 	bl	800a63c <HAL_PCD_DataOutStageCallback>
 8004cde:	e01d      	b.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d114      	bne.n	8004d10 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	4613      	mov	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d108      	bne.n	8004d10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d08:	461a      	mov	r2, r3
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	f003 f978 	bl	8008000 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	4619      	mov	r1, r3
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f005 fc90 	bl	800a63c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3720      	adds	r7, #32
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	4f54300a 	.word	0x4f54300a
 8004d2c:	4f54310a 	.word	0x4f54310a

08004d30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	333c      	adds	r3, #60	@ 0x3c
 8004d48:	3304      	adds	r3, #4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4a15      	ldr	r2, [pc, #84]	@ (8004db8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d90e      	bls.n	8004d84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d009      	beq.n	8004d84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f005 fc47 	bl	800a618 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004db8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d90c      	bls.n	8004dac <PCD_EP_OutSetupPacket_int+0x7c>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	799b      	ldrb	r3, [r3, #6]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d108      	bne.n	8004dac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004da4:	461a      	mov	r2, r3
 8004da6:	2101      	movs	r1, #1
 8004da8:	f003 f92a 	bl	8008000 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	4f54300a 	.word	0x4f54300a

08004dbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	70fb      	strb	r3, [r7, #3]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d107      	bne.n	8004dea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004dda:	883b      	ldrh	r3, [r7, #0]
 8004ddc:	0419      	lsls	r1, r3, #16
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004de8:	e028      	b.n	8004e3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	4413      	add	r3, r2
 8004df6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004df8:	2300      	movs	r3, #0
 8004dfa:	73fb      	strb	r3, [r7, #15]
 8004dfc:	e00d      	b.n	8004e1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	3340      	adds	r3, #64	@ 0x40
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	0c1b      	lsrs	r3, r3, #16
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	4413      	add	r3, r2
 8004e12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	3301      	adds	r3, #1
 8004e18:	73fb      	strb	r3, [r7, #15]
 8004e1a:	7bfa      	ldrb	r2, [r7, #15]
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d3ec      	bcc.n	8004dfe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e24:	883b      	ldrh	r3, [r7, #0]
 8004e26:	0418      	lsls	r0, r3, #16
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6819      	ldr	r1, [r3, #0]
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	4302      	orrs	r2, r0
 8004e34:	3340      	adds	r3, #64	@ 0x40
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	460b      	mov	r3, r1
 8004e54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	887a      	ldrh	r2, [r7, #2]
 8004e5c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e267      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d075      	beq.n	8004f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ea2:	4b88      	ldr	r3, [pc, #544]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d00c      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eae:	4b85      	ldr	r3, [pc, #532]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004eb6:	2b08      	cmp	r3, #8
 8004eb8:	d112      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eba:	4b82      	ldr	r3, [pc, #520]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ec2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ec6:	d10b      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec8:	4b7e      	ldr	r3, [pc, #504]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d05b      	beq.n	8004f8c <HAL_RCC_OscConfig+0x108>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d157      	bne.n	8004f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e242      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee8:	d106      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x74>
 8004eea:	4b76      	ldr	r3, [pc, #472]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a75      	ldr	r2, [pc, #468]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	e01d      	b.n	8004f34 <HAL_RCC_OscConfig+0xb0>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCC_OscConfig+0x98>
 8004f02:	4b70      	ldr	r3, [pc, #448]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a6f      	ldr	r2, [pc, #444]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a6c      	ldr	r2, [pc, #432]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e00b      	b.n	8004f34 <HAL_RCC_OscConfig+0xb0>
 8004f1c:	4b69      	ldr	r3, [pc, #420]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a68      	ldr	r2, [pc, #416]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	4b66      	ldr	r3, [pc, #408]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a65      	ldr	r2, [pc, #404]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d013      	beq.n	8004f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fd fa76 	bl	800242c <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f44:	f7fd fa72 	bl	800242c <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b64      	cmp	r3, #100	@ 0x64
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e207      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f56:	4b5b      	ldr	r3, [pc, #364]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f0      	beq.n	8004f44 <HAL_RCC_OscConfig+0xc0>
 8004f62:	e014      	b.n	8004f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f64:	f7fd fa62 	bl	800242c <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f6c:	f7fd fa5e 	bl	800242c <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b64      	cmp	r3, #100	@ 0x64
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e1f3      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7e:	4b51      	ldr	r3, [pc, #324]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0xe8>
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d063      	beq.n	8005062 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00b      	beq.n	8004fbe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fa6:	4b47      	ldr	r3, [pc, #284]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d11c      	bne.n	8004fec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fb2:	4b44      	ldr	r3, [pc, #272]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d116      	bne.n	8004fec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fbe:	4b41      	ldr	r3, [pc, #260]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x152>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d001      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e1c7      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	4937      	ldr	r1, [pc, #220]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fea:	e03a      	b.n	8005062 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d020      	beq.n	8005036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff4:	4b34      	ldr	r3, [pc, #208]	@ (80050c8 <HAL_RCC_OscConfig+0x244>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffa:	f7fd fa17 	bl	800242c <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005002:	f7fd fa13 	bl	800242c <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e1a8      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005014:	4b2b      	ldr	r3, [pc, #172]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f0      	beq.n	8005002 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005020:	4b28      	ldr	r3, [pc, #160]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	4925      	ldr	r1, [pc, #148]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8005030:	4313      	orrs	r3, r2
 8005032:	600b      	str	r3, [r1, #0]
 8005034:	e015      	b.n	8005062 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005036:	4b24      	ldr	r3, [pc, #144]	@ (80050c8 <HAL_RCC_OscConfig+0x244>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7fd f9f6 	bl	800242c <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005044:	f7fd f9f2 	bl	800242c <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e187      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005056:	4b1b      	ldr	r3, [pc, #108]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f0      	bne.n	8005044 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d036      	beq.n	80050dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d016      	beq.n	80050a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005076:	4b15      	ldr	r3, [pc, #84]	@ (80050cc <HAL_RCC_OscConfig+0x248>)
 8005078:	2201      	movs	r2, #1
 800507a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507c:	f7fd f9d6 	bl	800242c <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005084:	f7fd f9d2 	bl	800242c <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e167      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005096:	4b0b      	ldr	r3, [pc, #44]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8005098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f0      	beq.n	8005084 <HAL_RCC_OscConfig+0x200>
 80050a2:	e01b      	b.n	80050dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a4:	4b09      	ldr	r3, [pc, #36]	@ (80050cc <HAL_RCC_OscConfig+0x248>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050aa:	f7fd f9bf 	bl	800242c <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b0:	e00e      	b.n	80050d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b2:	f7fd f9bb 	bl	800242c <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d907      	bls.n	80050d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e150      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
 80050c4:	40023800 	.word	0x40023800
 80050c8:	42470000 	.word	0x42470000
 80050cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d0:	4b88      	ldr	r3, [pc, #544]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80050d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1ea      	bne.n	80050b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 8097 	beq.w	8005218 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ea:	2300      	movs	r3, #0
 80050ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ee:	4b81      	ldr	r3, [pc, #516]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80050f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10f      	bne.n	800511a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fa:	2300      	movs	r3, #0
 80050fc:	60bb      	str	r3, [r7, #8]
 80050fe:	4b7d      	ldr	r3, [pc, #500]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005102:	4a7c      	ldr	r2, [pc, #496]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005108:	6413      	str	r3, [r2, #64]	@ 0x40
 800510a:	4b7a      	ldr	r3, [pc, #488]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005116:	2301      	movs	r3, #1
 8005118:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511a:	4b77      	ldr	r3, [pc, #476]	@ (80052f8 <HAL_RCC_OscConfig+0x474>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005122:	2b00      	cmp	r3, #0
 8005124:	d118      	bne.n	8005158 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005126:	4b74      	ldr	r3, [pc, #464]	@ (80052f8 <HAL_RCC_OscConfig+0x474>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a73      	ldr	r2, [pc, #460]	@ (80052f8 <HAL_RCC_OscConfig+0x474>)
 800512c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005132:	f7fd f97b 	bl	800242c <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800513a:	f7fd f977 	bl	800242c <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e10c      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514c:	4b6a      	ldr	r3, [pc, #424]	@ (80052f8 <HAL_RCC_OscConfig+0x474>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d106      	bne.n	800516e <HAL_RCC_OscConfig+0x2ea>
 8005160:	4b64      	ldr	r3, [pc, #400]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005164:	4a63      	ldr	r2, [pc, #396]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	6713      	str	r3, [r2, #112]	@ 0x70
 800516c:	e01c      	b.n	80051a8 <HAL_RCC_OscConfig+0x324>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	2b05      	cmp	r3, #5
 8005174:	d10c      	bne.n	8005190 <HAL_RCC_OscConfig+0x30c>
 8005176:	4b5f      	ldr	r3, [pc, #380]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517a:	4a5e      	ldr	r2, [pc, #376]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 800517c:	f043 0304 	orr.w	r3, r3, #4
 8005180:	6713      	str	r3, [r2, #112]	@ 0x70
 8005182:	4b5c      	ldr	r3, [pc, #368]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005186:	4a5b      	ldr	r2, [pc, #364]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005188:	f043 0301 	orr.w	r3, r3, #1
 800518c:	6713      	str	r3, [r2, #112]	@ 0x70
 800518e:	e00b      	b.n	80051a8 <HAL_RCC_OscConfig+0x324>
 8005190:	4b58      	ldr	r3, [pc, #352]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005194:	4a57      	ldr	r2, [pc, #348]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005196:	f023 0301 	bic.w	r3, r3, #1
 800519a:	6713      	str	r3, [r2, #112]	@ 0x70
 800519c:	4b55      	ldr	r3, [pc, #340]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a0:	4a54      	ldr	r2, [pc, #336]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80051a2:	f023 0304 	bic.w	r3, r3, #4
 80051a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d015      	beq.n	80051dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b0:	f7fd f93c 	bl	800242c <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b6:	e00a      	b.n	80051ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b8:	f7fd f938 	bl	800242c <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e0cb      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ce:	4b49      	ldr	r3, [pc, #292]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0ee      	beq.n	80051b8 <HAL_RCC_OscConfig+0x334>
 80051da:	e014      	b.n	8005206 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051dc:	f7fd f926 	bl	800242c <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e2:	e00a      	b.n	80051fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e4:	f7fd f922 	bl	800242c <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e0b5      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051fa:	4b3e      	ldr	r3, [pc, #248]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80051fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1ee      	bne.n	80051e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005206:	7dfb      	ldrb	r3, [r7, #23]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d105      	bne.n	8005218 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800520c:	4b39      	ldr	r3, [pc, #228]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 800520e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005210:	4a38      	ldr	r2, [pc, #224]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005212:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005216:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80a1 	beq.w	8005364 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005222:	4b34      	ldr	r3, [pc, #208]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 030c 	and.w	r3, r3, #12
 800522a:	2b08      	cmp	r3, #8
 800522c:	d05c      	beq.n	80052e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d141      	bne.n	80052ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005236:	4b31      	ldr	r3, [pc, #196]	@ (80052fc <HAL_RCC_OscConfig+0x478>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523c:	f7fd f8f6 	bl	800242c <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005244:	f7fd f8f2 	bl	800242c <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e087      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005256:	4b27      	ldr	r3, [pc, #156]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1f0      	bne.n	8005244 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69da      	ldr	r2, [r3, #28]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005270:	019b      	lsls	r3, r3, #6
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005278:	085b      	lsrs	r3, r3, #1
 800527a:	3b01      	subs	r3, #1
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005284:	061b      	lsls	r3, r3, #24
 8005286:	491b      	ldr	r1, [pc, #108]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005288:	4313      	orrs	r3, r2
 800528a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800528c:	4b1b      	ldr	r3, [pc, #108]	@ (80052fc <HAL_RCC_OscConfig+0x478>)
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005292:	f7fd f8cb 	bl	800242c <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800529a:	f7fd f8c7 	bl	800242c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e05c      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ac:	4b11      	ldr	r3, [pc, #68]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0f0      	beq.n	800529a <HAL_RCC_OscConfig+0x416>
 80052b8:	e054      	b.n	8005364 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ba:	4b10      	ldr	r3, [pc, #64]	@ (80052fc <HAL_RCC_OscConfig+0x478>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c0:	f7fd f8b4 	bl	800242c <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c8:	f7fd f8b0 	bl	800242c <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e045      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052da:	4b06      	ldr	r3, [pc, #24]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f0      	bne.n	80052c8 <HAL_RCC_OscConfig+0x444>
 80052e6:	e03d      	b.n	8005364 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d107      	bne.n	8005300 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e038      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
 80052f4:	40023800 	.word	0x40023800
 80052f8:	40007000 	.word	0x40007000
 80052fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005300:	4b1b      	ldr	r3, [pc, #108]	@ (8005370 <HAL_RCC_OscConfig+0x4ec>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d028      	beq.n	8005360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005318:	429a      	cmp	r2, r3
 800531a:	d121      	bne.n	8005360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005326:	429a      	cmp	r2, r3
 8005328:	d11a      	bne.n	8005360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005330:	4013      	ands	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005336:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005338:	4293      	cmp	r3, r2
 800533a:	d111      	bne.n	8005360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005346:	085b      	lsrs	r3, r3, #1
 8005348:	3b01      	subs	r3, #1
 800534a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800534c:	429a      	cmp	r2, r3
 800534e:	d107      	bne.n	8005360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800535c:	429a      	cmp	r2, r3
 800535e:	d001      	beq.n	8005364 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e000      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40023800 	.word	0x40023800

08005374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0cc      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005388:	4b68      	ldr	r3, [pc, #416]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d90c      	bls.n	80053b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005396:	4b65      	ldr	r3, [pc, #404]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800539e:	4b63      	ldr	r3, [pc, #396]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d001      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e0b8      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d020      	beq.n	80053fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053c8:	4b59      	ldr	r3, [pc, #356]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	4a58      	ldr	r2, [pc, #352]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053e0:	4b53      	ldr	r3, [pc, #332]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	4a52      	ldr	r2, [pc, #328]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053ec:	4b50      	ldr	r3, [pc, #320]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	494d      	ldr	r1, [pc, #308]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d044      	beq.n	8005494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d107      	bne.n	8005422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005412:	4b47      	ldr	r3, [pc, #284]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d119      	bne.n	8005452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e07f      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d003      	beq.n	8005432 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542e:	2b03      	cmp	r3, #3
 8005430:	d107      	bne.n	8005442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005432:	4b3f      	ldr	r3, [pc, #252]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e06f      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005442:	4b3b      	ldr	r3, [pc, #236]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e067      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005452:	4b37      	ldr	r3, [pc, #220]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f023 0203 	bic.w	r2, r3, #3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4934      	ldr	r1, [pc, #208]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	4313      	orrs	r3, r2
 8005462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005464:	f7fc ffe2 	bl	800242c <HAL_GetTick>
 8005468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546a:	e00a      	b.n	8005482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800546c:	f7fc ffde 	bl	800242c <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800547a:	4293      	cmp	r3, r2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e04f      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005482:	4b2b      	ldr	r3, [pc, #172]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 020c 	and.w	r2, r3, #12
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	429a      	cmp	r2, r3
 8005492:	d1eb      	bne.n	800546c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005494:	4b25      	ldr	r3, [pc, #148]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d20c      	bcs.n	80054bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a2:	4b22      	ldr	r3, [pc, #136]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054aa:	4b20      	ldr	r3, [pc, #128]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d001      	beq.n	80054bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e032      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054c8:	4b19      	ldr	r3, [pc, #100]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4916      	ldr	r1, [pc, #88]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054e6:	4b12      	ldr	r3, [pc, #72]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	490e      	ldr	r1, [pc, #56]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054fa:	f000 f821 	bl	8005540 <HAL_RCC_GetSysClockFreq>
 80054fe:	4602      	mov	r2, r0
 8005500:	4b0b      	ldr	r3, [pc, #44]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	091b      	lsrs	r3, r3, #4
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	490a      	ldr	r1, [pc, #40]	@ (8005534 <HAL_RCC_ClockConfig+0x1c0>)
 800550c:	5ccb      	ldrb	r3, [r1, r3]
 800550e:	fa22 f303 	lsr.w	r3, r2, r3
 8005512:	4a09      	ldr	r2, [pc, #36]	@ (8005538 <HAL_RCC_ClockConfig+0x1c4>)
 8005514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005516:	4b09      	ldr	r3, [pc, #36]	@ (800553c <HAL_RCC_ClockConfig+0x1c8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f7fc ff42 	bl	80023a4 <HAL_InitTick>

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40023c00 	.word	0x40023c00
 8005530:	40023800 	.word	0x40023800
 8005534:	0800d944 	.word	0x0800d944
 8005538:	20000000 	.word	0x20000000
 800553c:	20000004 	.word	0x20000004

08005540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005544:	b090      	sub	sp, #64	@ 0x40
 8005546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005558:	4b59      	ldr	r3, [pc, #356]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 030c 	and.w	r3, r3, #12
 8005560:	2b08      	cmp	r3, #8
 8005562:	d00d      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0x40>
 8005564:	2b08      	cmp	r3, #8
 8005566:	f200 80a1 	bhi.w	80056ac <HAL_RCC_GetSysClockFreq+0x16c>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <HAL_RCC_GetSysClockFreq+0x34>
 800556e:	2b04      	cmp	r3, #4
 8005570:	d003      	beq.n	800557a <HAL_RCC_GetSysClockFreq+0x3a>
 8005572:	e09b      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005574:	4b53      	ldr	r3, [pc, #332]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005576:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005578:	e09b      	b.n	80056b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800557a:	4b53      	ldr	r3, [pc, #332]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800557c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800557e:	e098      	b.n	80056b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005580:	4b4f      	ldr	r3, [pc, #316]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005588:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800558a:	4b4d      	ldr	r3, [pc, #308]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d028      	beq.n	80055e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005596:	4b4a      	ldr	r3, [pc, #296]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	099b      	lsrs	r3, r3, #6
 800559c:	2200      	movs	r2, #0
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80055a8:	2100      	movs	r1, #0
 80055aa:	4b47      	ldr	r3, [pc, #284]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80055ac:	fb03 f201 	mul.w	r2, r3, r1
 80055b0:	2300      	movs	r3, #0
 80055b2:	fb00 f303 	mul.w	r3, r0, r3
 80055b6:	4413      	add	r3, r2
 80055b8:	4a43      	ldr	r2, [pc, #268]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80055ba:	fba0 1202 	umull	r1, r2, r0, r2
 80055be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055c0:	460a      	mov	r2, r1
 80055c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80055c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055c6:	4413      	add	r3, r2
 80055c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055cc:	2200      	movs	r2, #0
 80055ce:	61bb      	str	r3, [r7, #24]
 80055d0:	61fa      	str	r2, [r7, #28]
 80055d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80055da:	f7fb faed 	bl	8000bb8 <__aeabi_uldivmod>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4613      	mov	r3, r2
 80055e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055e6:	e053      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055e8:	4b35      	ldr	r3, [pc, #212]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	099b      	lsrs	r3, r3, #6
 80055ee:	2200      	movs	r2, #0
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	617a      	str	r2, [r7, #20]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80055fa:	f04f 0b00 	mov.w	fp, #0
 80055fe:	4652      	mov	r2, sl
 8005600:	465b      	mov	r3, fp
 8005602:	f04f 0000 	mov.w	r0, #0
 8005606:	f04f 0100 	mov.w	r1, #0
 800560a:	0159      	lsls	r1, r3, #5
 800560c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005610:	0150      	lsls	r0, r2, #5
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	ebb2 080a 	subs.w	r8, r2, sl
 800561a:	eb63 090b 	sbc.w	r9, r3, fp
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800562a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800562e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005632:	ebb2 0408 	subs.w	r4, r2, r8
 8005636:	eb63 0509 	sbc.w	r5, r3, r9
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	00eb      	lsls	r3, r5, #3
 8005644:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005648:	00e2      	lsls	r2, r4, #3
 800564a:	4614      	mov	r4, r2
 800564c:	461d      	mov	r5, r3
 800564e:	eb14 030a 	adds.w	r3, r4, sl
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	eb45 030b 	adc.w	r3, r5, fp
 8005658:	607b      	str	r3, [r7, #4]
 800565a:	f04f 0200 	mov.w	r2, #0
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005666:	4629      	mov	r1, r5
 8005668:	028b      	lsls	r3, r1, #10
 800566a:	4621      	mov	r1, r4
 800566c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005670:	4621      	mov	r1, r4
 8005672:	028a      	lsls	r2, r1, #10
 8005674:	4610      	mov	r0, r2
 8005676:	4619      	mov	r1, r3
 8005678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567a:	2200      	movs	r2, #0
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	60fa      	str	r2, [r7, #12]
 8005680:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005684:	f7fb fa98 	bl	8000bb8 <__aeabi_uldivmod>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	4613      	mov	r3, r2
 800568e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005690:	4b0b      	ldr	r3, [pc, #44]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	0c1b      	lsrs	r3, r3, #16
 8005696:	f003 0303 	and.w	r3, r3, #3
 800569a:	3301      	adds	r3, #1
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80056a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056aa:	e002      	b.n	80056b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056ac:	4b05      	ldr	r3, [pc, #20]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80056ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3740      	adds	r7, #64	@ 0x40
 80056b8:	46bd      	mov	sp, r7
 80056ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056be:	bf00      	nop
 80056c0:	40023800 	.word	0x40023800
 80056c4:	00f42400 	.word	0x00f42400
 80056c8:	017d7840 	.word	0x017d7840

080056cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d0:	4b03      	ldr	r3, [pc, #12]	@ (80056e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80056d2:	681b      	ldr	r3, [r3, #0]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	20000000 	.word	0x20000000

080056e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056e8:	f7ff fff0 	bl	80056cc <HAL_RCC_GetHCLKFreq>
 80056ec:	4602      	mov	r2, r0
 80056ee:	4b05      	ldr	r3, [pc, #20]	@ (8005704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	0a9b      	lsrs	r3, r3, #10
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	4903      	ldr	r1, [pc, #12]	@ (8005708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056fa:	5ccb      	ldrb	r3, [r1, r3]
 80056fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005700:	4618      	mov	r0, r3
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40023800 	.word	0x40023800
 8005708:	0800d954 	.word	0x0800d954

0800570c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e041      	b.n	80057a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fc f9e0 	bl	8001af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3304      	adds	r3, #4
 8005748:	4619      	mov	r1, r3
 800574a:	4610      	mov	r0, r2
 800574c:	f000 fcea 	bl	8006124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e041      	b.n	8005840 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d106      	bne.n	80057d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f839 	bl	8005848 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2202      	movs	r2, #2
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3304      	adds	r3, #4
 80057e6:	4619      	mov	r1, r3
 80057e8:	4610      	mov	r0, r2
 80057ea:	f000 fc9b 	bl	8006124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d109      	bne.n	8005880 <HAL_TIM_PWM_Start+0x24>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b01      	cmp	r3, #1
 8005876:	bf14      	ite	ne
 8005878:	2301      	movne	r3, #1
 800587a:	2300      	moveq	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	e022      	b.n	80058c6 <HAL_TIM_PWM_Start+0x6a>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b04      	cmp	r3, #4
 8005884:	d109      	bne.n	800589a <HAL_TIM_PWM_Start+0x3e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b01      	cmp	r3, #1
 8005890:	bf14      	ite	ne
 8005892:	2301      	movne	r3, #1
 8005894:	2300      	moveq	r3, #0
 8005896:	b2db      	uxtb	r3, r3
 8005898:	e015      	b.n	80058c6 <HAL_TIM_PWM_Start+0x6a>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b08      	cmp	r3, #8
 800589e:	d109      	bne.n	80058b4 <HAL_TIM_PWM_Start+0x58>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	bf14      	ite	ne
 80058ac:	2301      	movne	r3, #1
 80058ae:	2300      	moveq	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	e008      	b.n	80058c6 <HAL_TIM_PWM_Start+0x6a>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	bf14      	ite	ne
 80058c0:	2301      	movne	r3, #1
 80058c2:	2300      	moveq	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e068      	b.n	80059a0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <HAL_TIM_PWM_Start+0x82>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058dc:	e013      	b.n	8005906 <HAL_TIM_PWM_Start+0xaa>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d104      	bne.n	80058ee <HAL_TIM_PWM_Start+0x92>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058ec:	e00b      	b.n	8005906 <HAL_TIM_PWM_Start+0xaa>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d104      	bne.n	80058fe <HAL_TIM_PWM_Start+0xa2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058fc:	e003      	b.n	8005906 <HAL_TIM_PWM_Start+0xaa>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2202      	movs	r2, #2
 8005902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2201      	movs	r2, #1
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f000 ffd8 	bl	80068c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a23      	ldr	r2, [pc, #140]	@ (80059a8 <HAL_TIM_PWM_Start+0x14c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d107      	bne.n	800592e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800592c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a1d      	ldr	r2, [pc, #116]	@ (80059a8 <HAL_TIM_PWM_Start+0x14c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d018      	beq.n	800596a <HAL_TIM_PWM_Start+0x10e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005940:	d013      	beq.n	800596a <HAL_TIM_PWM_Start+0x10e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a19      	ldr	r2, [pc, #100]	@ (80059ac <HAL_TIM_PWM_Start+0x150>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00e      	beq.n	800596a <HAL_TIM_PWM_Start+0x10e>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a17      	ldr	r2, [pc, #92]	@ (80059b0 <HAL_TIM_PWM_Start+0x154>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d009      	beq.n	800596a <HAL_TIM_PWM_Start+0x10e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a16      	ldr	r2, [pc, #88]	@ (80059b4 <HAL_TIM_PWM_Start+0x158>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d004      	beq.n	800596a <HAL_TIM_PWM_Start+0x10e>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a14      	ldr	r2, [pc, #80]	@ (80059b8 <HAL_TIM_PWM_Start+0x15c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d111      	bne.n	800598e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b06      	cmp	r3, #6
 800597a:	d010      	beq.n	800599e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598c:	e007      	b.n	800599e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f042 0201 	orr.w	r2, r2, #1
 800599c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40010000 	.word	0x40010000
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40000800 	.word	0x40000800
 80059b4:	40000c00 	.word	0x40000c00
 80059b8:	40014000 	.word	0x40014000

080059bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e041      	b.n	8005a52 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d106      	bne.n	80059e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f839 	bl	8005a5a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3304      	adds	r3, #4
 80059f8:	4619      	mov	r1, r3
 80059fa:	4610      	mov	r0, r2
 80059fc:	f000 fb92 	bl	8006124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b086      	sub	sp, #24
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e097      	b.n	8005bb2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fc f88a 	bl	8001bb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ab2:	f023 0307 	bic.w	r3, r3, #7
 8005ab6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	f000 fb2e 	bl	8006124 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af0:	f023 0303 	bic.w	r3, r3, #3
 8005af4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	021b      	lsls	r3, r3, #8
 8005b00:	4313      	orrs	r3, r2
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005b0e:	f023 030c 	bic.w	r3, r3, #12
 8005b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	68da      	ldr	r2, [r3, #12]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	021b      	lsls	r3, r3, #8
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	011a      	lsls	r2, r3, #4
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	031b      	lsls	r3, r3, #12
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005b4c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005b54:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	4313      	orrs	r3, r2
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bca:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005bd2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bda:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005be2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d110      	bne.n	8005c0c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d102      	bne.n	8005bf6 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bf0:	7b7b      	ldrb	r3, [r7, #13]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d001      	beq.n	8005bfa <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e069      	b.n	8005cce <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2202      	movs	r2, #2
 8005c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c0a:	e031      	b.n	8005c70 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d110      	bne.n	8005c34 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c12:	7bbb      	ldrb	r3, [r7, #14]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d102      	bne.n	8005c1e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c18:	7b3b      	ldrb	r3, [r7, #12]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d001      	beq.n	8005c22 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e055      	b.n	8005cce <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2202      	movs	r2, #2
 8005c26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c32:	e01d      	b.n	8005c70 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d108      	bne.n	8005c4c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c3a:	7bbb      	ldrb	r3, [r7, #14]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d105      	bne.n	8005c4c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c40:	7b7b      	ldrb	r3, [r7, #13]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d102      	bne.n	8005c4c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c46:	7b3b      	ldrb	r3, [r7, #12]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d001      	beq.n	8005c50 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e03e      	b.n	8005cce <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <HAL_TIM_Encoder_Start+0xc4>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b04      	cmp	r3, #4
 8005c7a:	d008      	beq.n	8005c8e <HAL_TIM_Encoder_Start+0xd4>
 8005c7c:	e00f      	b.n	8005c9e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2201      	movs	r2, #1
 8005c84:	2100      	movs	r1, #0
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fe1c 	bl	80068c4 <TIM_CCxChannelCmd>
      break;
 8005c8c:	e016      	b.n	8005cbc <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2201      	movs	r2, #1
 8005c94:	2104      	movs	r1, #4
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fe14 	bl	80068c4 <TIM_CCxChannelCmd>
      break;
 8005c9c:	e00e      	b.n	8005cbc <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fe0c 	bl	80068c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	2104      	movs	r1, #4
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fe05 	bl	80068c4 <TIM_CCxChannelCmd>
      break;
 8005cba:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b086      	sub	sp, #24
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e088      	b.n	8005e06 <HAL_TIM_IC_ConfigChannel+0x130>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d11b      	bne.n	8005d3a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005d12:	f000 fc1f 	bl	8006554 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	699a      	ldr	r2, [r3, #24]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 020c 	bic.w	r2, r2, #12
 8005d24:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6999      	ldr	r1, [r3, #24]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	619a      	str	r2, [r3, #24]
 8005d38:	e060      	b.n	8005dfc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b04      	cmp	r3, #4
 8005d3e:	d11c      	bne.n	8005d7a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005d50:	f000 fc97 	bl	8006682 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699a      	ldr	r2, [r3, #24]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005d62:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6999      	ldr	r1, [r3, #24]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	021a      	lsls	r2, r3, #8
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	619a      	str	r2, [r3, #24]
 8005d78:	e040      	b.n	8005dfc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d11b      	bne.n	8005db8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005d90:	f000 fce4 	bl	800675c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	69da      	ldr	r2, [r3, #28]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 020c 	bic.w	r2, r2, #12
 8005da2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	69d9      	ldr	r1, [r3, #28]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	61da      	str	r2, [r3, #28]
 8005db6:	e021      	b.n	8005dfc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b0c      	cmp	r3, #12
 8005dbc:	d11c      	bne.n	8005df8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005dce:	f000 fd01 	bl	80067d4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69da      	ldr	r2, [r3, #28]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005de0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69d9      	ldr	r1, [r3, #28]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	021a      	lsls	r2, r3, #8
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	61da      	str	r2, [r3, #28]
 8005df6:	e001      	b.n	8005dfc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e0ae      	b.n	8005f8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b0c      	cmp	r3, #12
 8005e3a:	f200 809f 	bhi.w	8005f7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e44:	08005e79 	.word	0x08005e79
 8005e48:	08005f7d 	.word	0x08005f7d
 8005e4c:	08005f7d 	.word	0x08005f7d
 8005e50:	08005f7d 	.word	0x08005f7d
 8005e54:	08005eb9 	.word	0x08005eb9
 8005e58:	08005f7d 	.word	0x08005f7d
 8005e5c:	08005f7d 	.word	0x08005f7d
 8005e60:	08005f7d 	.word	0x08005f7d
 8005e64:	08005efb 	.word	0x08005efb
 8005e68:	08005f7d 	.word	0x08005f7d
 8005e6c:	08005f7d 	.word	0x08005f7d
 8005e70:	08005f7d 	.word	0x08005f7d
 8005e74:	08005f3b 	.word	0x08005f3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 f9dc 	bl	800623c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699a      	ldr	r2, [r3, #24]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0208 	orr.w	r2, r2, #8
 8005e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699a      	ldr	r2, [r3, #24]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0204 	bic.w	r2, r2, #4
 8005ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6999      	ldr	r1, [r3, #24]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	619a      	str	r2, [r3, #24]
      break;
 8005eb6:	e064      	b.n	8005f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68b9      	ldr	r1, [r7, #8]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fa22 	bl	8006308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6999      	ldr	r1, [r3, #24]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	021a      	lsls	r2, r3, #8
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	619a      	str	r2, [r3, #24]
      break;
 8005ef8:	e043      	b.n	8005f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68b9      	ldr	r1, [r7, #8]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 fa6d 	bl	80063e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69da      	ldr	r2, [r3, #28]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0208 	orr.w	r2, r2, #8
 8005f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69da      	ldr	r2, [r3, #28]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0204 	bic.w	r2, r2, #4
 8005f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69d9      	ldr	r1, [r3, #28]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	61da      	str	r2, [r3, #28]
      break;
 8005f38:	e023      	b.n	8005f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68b9      	ldr	r1, [r7, #8]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 fab7 	bl	80064b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69da      	ldr	r2, [r3, #28]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69da      	ldr	r2, [r3, #28]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69d9      	ldr	r1, [r3, #28]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	021a      	lsls	r2, r3, #8
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	61da      	str	r2, [r3, #28]
      break;
 8005f7a:	e002      	b.n	8005f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e0b4      	b.n	800611a <HAL_TIM_ConfigClockSource+0x186>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fe8:	d03e      	beq.n	8006068 <HAL_TIM_ConfigClockSource+0xd4>
 8005fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fee:	f200 8087 	bhi.w	8006100 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ff6:	f000 8086 	beq.w	8006106 <HAL_TIM_ConfigClockSource+0x172>
 8005ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ffe:	d87f      	bhi.n	8006100 <HAL_TIM_ConfigClockSource+0x16c>
 8006000:	2b70      	cmp	r3, #112	@ 0x70
 8006002:	d01a      	beq.n	800603a <HAL_TIM_ConfigClockSource+0xa6>
 8006004:	2b70      	cmp	r3, #112	@ 0x70
 8006006:	d87b      	bhi.n	8006100 <HAL_TIM_ConfigClockSource+0x16c>
 8006008:	2b60      	cmp	r3, #96	@ 0x60
 800600a:	d050      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x11a>
 800600c:	2b60      	cmp	r3, #96	@ 0x60
 800600e:	d877      	bhi.n	8006100 <HAL_TIM_ConfigClockSource+0x16c>
 8006010:	2b50      	cmp	r3, #80	@ 0x50
 8006012:	d03c      	beq.n	800608e <HAL_TIM_ConfigClockSource+0xfa>
 8006014:	2b50      	cmp	r3, #80	@ 0x50
 8006016:	d873      	bhi.n	8006100 <HAL_TIM_ConfigClockSource+0x16c>
 8006018:	2b40      	cmp	r3, #64	@ 0x40
 800601a:	d058      	beq.n	80060ce <HAL_TIM_ConfigClockSource+0x13a>
 800601c:	2b40      	cmp	r3, #64	@ 0x40
 800601e:	d86f      	bhi.n	8006100 <HAL_TIM_ConfigClockSource+0x16c>
 8006020:	2b30      	cmp	r3, #48	@ 0x30
 8006022:	d064      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0x15a>
 8006024:	2b30      	cmp	r3, #48	@ 0x30
 8006026:	d86b      	bhi.n	8006100 <HAL_TIM_ConfigClockSource+0x16c>
 8006028:	2b20      	cmp	r3, #32
 800602a:	d060      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0x15a>
 800602c:	2b20      	cmp	r3, #32
 800602e:	d867      	bhi.n	8006100 <HAL_TIM_ConfigClockSource+0x16c>
 8006030:	2b00      	cmp	r3, #0
 8006032:	d05c      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0x15a>
 8006034:	2b10      	cmp	r3, #16
 8006036:	d05a      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0x15a>
 8006038:	e062      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800604a:	f000 fc1b 	bl	8006884 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800605c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	609a      	str	r2, [r3, #8]
      break;
 8006066:	e04f      	b.n	8006108 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006078:	f000 fc04 	bl	8006884 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800608a:	609a      	str	r2, [r3, #8]
      break;
 800608c:	e03c      	b.n	8006108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800609a:	461a      	mov	r2, r3
 800609c:	f000 fac2 	bl	8006624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2150      	movs	r1, #80	@ 0x50
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 fbd1 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 80060ac:	e02c      	b.n	8006108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ba:	461a      	mov	r2, r3
 80060bc:	f000 fb1e 	bl	80066fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2160      	movs	r1, #96	@ 0x60
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fbc1 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 80060cc:	e01c      	b.n	8006108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060da:	461a      	mov	r2, r3
 80060dc:	f000 faa2 	bl	8006624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2140      	movs	r1, #64	@ 0x40
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 fbb1 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 80060ec:	e00c      	b.n	8006108 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4619      	mov	r1, r3
 80060f8:	4610      	mov	r0, r2
 80060fa:	f000 fba8 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 80060fe:	e003      	b.n	8006108 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	73fb      	strb	r3, [r7, #15]
      break;
 8006104:	e000      	b.n	8006108 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006118:	7bfb      	ldrb	r3, [r7, #15]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a3a      	ldr	r2, [pc, #232]	@ (8006220 <TIM_Base_SetConfig+0xfc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00f      	beq.n	800615c <TIM_Base_SetConfig+0x38>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006142:	d00b      	beq.n	800615c <TIM_Base_SetConfig+0x38>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a37      	ldr	r2, [pc, #220]	@ (8006224 <TIM_Base_SetConfig+0x100>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d007      	beq.n	800615c <TIM_Base_SetConfig+0x38>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a36      	ldr	r2, [pc, #216]	@ (8006228 <TIM_Base_SetConfig+0x104>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d003      	beq.n	800615c <TIM_Base_SetConfig+0x38>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a35      	ldr	r2, [pc, #212]	@ (800622c <TIM_Base_SetConfig+0x108>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d108      	bne.n	800616e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a2b      	ldr	r2, [pc, #172]	@ (8006220 <TIM_Base_SetConfig+0xfc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d01b      	beq.n	80061ae <TIM_Base_SetConfig+0x8a>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800617c:	d017      	beq.n	80061ae <TIM_Base_SetConfig+0x8a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a28      	ldr	r2, [pc, #160]	@ (8006224 <TIM_Base_SetConfig+0x100>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <TIM_Base_SetConfig+0x8a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a27      	ldr	r2, [pc, #156]	@ (8006228 <TIM_Base_SetConfig+0x104>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00f      	beq.n	80061ae <TIM_Base_SetConfig+0x8a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a26      	ldr	r2, [pc, #152]	@ (800622c <TIM_Base_SetConfig+0x108>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00b      	beq.n	80061ae <TIM_Base_SetConfig+0x8a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a25      	ldr	r2, [pc, #148]	@ (8006230 <TIM_Base_SetConfig+0x10c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d007      	beq.n	80061ae <TIM_Base_SetConfig+0x8a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a24      	ldr	r2, [pc, #144]	@ (8006234 <TIM_Base_SetConfig+0x110>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d003      	beq.n	80061ae <TIM_Base_SetConfig+0x8a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a23      	ldr	r2, [pc, #140]	@ (8006238 <TIM_Base_SetConfig+0x114>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d108      	bne.n	80061c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	4313      	orrs	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a0e      	ldr	r2, [pc, #56]	@ (8006220 <TIM_Base_SetConfig+0xfc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d103      	bne.n	80061f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b01      	cmp	r3, #1
 8006204:	d105      	bne.n	8006212 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f023 0201 	bic.w	r2, r3, #1
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	611a      	str	r2, [r3, #16]
  }
}
 8006212:	bf00      	nop
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	40010000 	.word	0x40010000
 8006224:	40000400 	.word	0x40000400
 8006228:	40000800 	.word	0x40000800
 800622c:	40000c00 	.word	0x40000c00
 8006230:	40014000 	.word	0x40014000
 8006234:	40014400 	.word	0x40014400
 8006238:	40014800 	.word	0x40014800

0800623c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	f023 0201 	bic.w	r2, r3, #1
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0303 	bic.w	r3, r3, #3
 8006272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f023 0302 	bic.w	r3, r3, #2
 8006284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	4313      	orrs	r3, r2
 800628e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a1c      	ldr	r2, [pc, #112]	@ (8006304 <TIM_OC1_SetConfig+0xc8>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d10c      	bne.n	80062b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f023 0308 	bic.w	r3, r3, #8
 800629e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f023 0304 	bic.w	r3, r3, #4
 80062b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a13      	ldr	r2, [pc, #76]	@ (8006304 <TIM_OC1_SetConfig+0xc8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d111      	bne.n	80062de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	621a      	str	r2, [r3, #32]
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	40010000 	.word	0x40010000

08006308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	f023 0210 	bic.w	r2, r3, #16
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800633e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	021b      	lsls	r3, r3, #8
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f023 0320 	bic.w	r3, r3, #32
 8006352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a1e      	ldr	r2, [pc, #120]	@ (80063dc <TIM_OC2_SetConfig+0xd4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d10d      	bne.n	8006384 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800636e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006382:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a15      	ldr	r2, [pc, #84]	@ (80063dc <TIM_OC2_SetConfig+0xd4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d113      	bne.n	80063b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006392:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800639a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	621a      	str	r2, [r3, #32]
}
 80063ce:	bf00      	nop
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	40010000 	.word	0x40010000

080063e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0303 	bic.w	r3, r3, #3
 8006416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	4313      	orrs	r3, r2
 8006434:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a1d      	ldr	r2, [pc, #116]	@ (80064b0 <TIM_OC3_SetConfig+0xd0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d10d      	bne.n	800645a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	021b      	lsls	r3, r3, #8
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	4313      	orrs	r3, r2
 8006450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a14      	ldr	r2, [pc, #80]	@ (80064b0 <TIM_OC3_SetConfig+0xd0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d113      	bne.n	800648a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	621a      	str	r2, [r3, #32]
}
 80064a4:	bf00      	nop
 80064a6:	371c      	adds	r7, #28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	40010000 	.word	0x40010000

080064b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	021b      	lsls	r3, r3, #8
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	031b      	lsls	r3, r3, #12
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	4313      	orrs	r3, r2
 800650a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a10      	ldr	r2, [pc, #64]	@ (8006550 <TIM_OC4_SetConfig+0x9c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d109      	bne.n	8006528 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800651a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	019b      	lsls	r3, r3, #6
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	621a      	str	r2, [r3, #32]
}
 8006542:	bf00      	nop
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	40010000 	.word	0x40010000

08006554 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	f023 0201 	bic.w	r2, r3, #1
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4a24      	ldr	r2, [pc, #144]	@ (8006610 <TIM_TI1_SetConfig+0xbc>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d013      	beq.n	80065aa <TIM_TI1_SetConfig+0x56>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006588:	d00f      	beq.n	80065aa <TIM_TI1_SetConfig+0x56>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	4a21      	ldr	r2, [pc, #132]	@ (8006614 <TIM_TI1_SetConfig+0xc0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00b      	beq.n	80065aa <TIM_TI1_SetConfig+0x56>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4a20      	ldr	r2, [pc, #128]	@ (8006618 <TIM_TI1_SetConfig+0xc4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d007      	beq.n	80065aa <TIM_TI1_SetConfig+0x56>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4a1f      	ldr	r2, [pc, #124]	@ (800661c <TIM_TI1_SetConfig+0xc8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d003      	beq.n	80065aa <TIM_TI1_SetConfig+0x56>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4a1e      	ldr	r2, [pc, #120]	@ (8006620 <TIM_TI1_SetConfig+0xcc>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d101      	bne.n	80065ae <TIM_TI1_SetConfig+0x5a>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <TIM_TI1_SetConfig+0x5c>
 80065ae:	2300      	movs	r3, #0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f023 0303 	bic.w	r3, r3, #3
 80065ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	e003      	b.n	80065ce <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f043 0301 	orr.w	r3, r3, #1
 80065cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f023 030a 	bic.w	r3, r3, #10
 80065e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f003 030a 	and.w	r3, r3, #10
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	621a      	str	r2, [r3, #32]
}
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	40010000 	.word	0x40010000
 8006614:	40000400 	.word	0x40000400
 8006618:	40000800 	.word	0x40000800
 800661c:	40000c00 	.word	0x40000c00
 8006620:	40014000 	.word	0x40014000

08006624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f023 0201 	bic.w	r2, r3, #1
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800664e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f023 030a 	bic.w	r3, r3, #10
 8006660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	621a      	str	r2, [r3, #32]
}
 8006676:	bf00      	nop
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006682:	b480      	push	{r7}
 8006684:	b087      	sub	sp, #28
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	607a      	str	r2, [r7, #4]
 800668e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	f023 0210 	bic.w	r2, r3, #16
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	021b      	lsls	r3, r3, #8
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	031b      	lsls	r3, r3, #12
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	011b      	lsls	r3, r3, #4
 80066da:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	621a      	str	r2, [r3, #32]
}
 80066f0:	bf00      	nop
 80066f2:	371c      	adds	r7, #28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	f023 0210 	bic.w	r2, r3, #16
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	031b      	lsls	r3, r3, #12
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006738:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	4313      	orrs	r3, r2
 8006742:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	621a      	str	r2, [r3, #32]
}
 8006750:	bf00      	nop
 8006752:	371c      	adds	r7, #28
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f023 0303 	bic.w	r3, r3, #3
 8006788:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4313      	orrs	r3, r2
 8006790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006798:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80067ac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	621a      	str	r2, [r3, #32]
}
 80067c8:	bf00      	nop
 80067ca:	371c      	adds	r7, #28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006800:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	021b      	lsls	r3, r3, #8
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006812:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	031b      	lsls	r3, r3, #12
 8006818:	b29b      	uxth	r3, r3
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	4313      	orrs	r3, r2
 800681e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006826:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	031b      	lsls	r3, r3, #12
 800682c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	621a      	str	r2, [r3, #32]
}
 8006842:	bf00      	nop
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800684e:	b480      	push	{r7}
 8006850:	b085      	sub	sp, #20
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4313      	orrs	r3, r2
 800686c:	f043 0307 	orr.w	r3, r3, #7
 8006870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	609a      	str	r2, [r3, #8]
}
 8006878:	bf00      	nop
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800689e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	021a      	lsls	r2, r3, #8
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	431a      	orrs	r2, r3
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	609a      	str	r2, [r3, #8]
}
 80068b8:	bf00      	nop
 80068ba:	371c      	adds	r7, #28
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f003 031f 	and.w	r3, r3, #31
 80068d6:	2201      	movs	r2, #1
 80068d8:	fa02 f303 	lsl.w	r3, r2, r3
 80068dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a1a      	ldr	r2, [r3, #32]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	43db      	mvns	r3, r3
 80068e6:	401a      	ands	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a1a      	ldr	r2, [r3, #32]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f003 031f 	and.w	r3, r3, #31
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	fa01 f303 	lsl.w	r3, r1, r3
 80068fc:	431a      	orrs	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	621a      	str	r2, [r3, #32]
}
 8006902:	bf00      	nop
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
	...

08006910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006924:	2302      	movs	r3, #2
 8006926:	e050      	b.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800694e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1c      	ldr	r2, [pc, #112]	@ (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d018      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006974:	d013      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a18      	ldr	r2, [pc, #96]	@ (80069dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d00e      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a16      	ldr	r2, [pc, #88]	@ (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d009      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a15      	ldr	r2, [pc, #84]	@ (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d004      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a13      	ldr	r2, [pc, #76]	@ (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d10c      	bne.n	80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	40010000 	.word	0x40010000
 80069dc:	40000400 	.word	0x40000400
 80069e0:	40000800 	.word	0x40000800
 80069e4:	40000c00 	.word	0x40000c00
 80069e8:	40014000 	.word	0x40014000

080069ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e03d      	b.n	8006a84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a90:	b084      	sub	sp, #16
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b084      	sub	sp, #16
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	f107 001c 	add.w	r0, r7, #28
 8006a9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006aa2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d123      	bne.n	8006af2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006abe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ad2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d105      	bne.n	8006ae6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 fae8 	bl	80080bc <USB_CoreReset>
 8006aec:	4603      	mov	r3, r0
 8006aee:	73fb      	strb	r3, [r7, #15]
 8006af0:	e01b      	b.n	8006b2a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f001 fadc 	bl	80080bc <USB_CoreReset>
 8006b04:	4603      	mov	r3, r0
 8006b06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b08:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d106      	bne.n	8006b1e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b14:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b1c:	e005      	b.n	8006b2a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b2a:	7fbb      	ldrb	r3, [r7, #30]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d10b      	bne.n	8006b48 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f043 0206 	orr.w	r2, r3, #6
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f043 0220 	orr.w	r2, r3, #32
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b54:	b004      	add	sp, #16
 8006b56:	4770      	bx	lr

08006b58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006b66:	79fb      	ldrb	r3, [r7, #7]
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d165      	bne.n	8006c38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	4a41      	ldr	r2, [pc, #260]	@ (8006c74 <USB_SetTurnaroundTime+0x11c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d906      	bls.n	8006b82 <USB_SetTurnaroundTime+0x2a>
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4a40      	ldr	r2, [pc, #256]	@ (8006c78 <USB_SetTurnaroundTime+0x120>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d202      	bcs.n	8006b82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b7c:	230f      	movs	r3, #15
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	e062      	b.n	8006c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	4a3c      	ldr	r2, [pc, #240]	@ (8006c78 <USB_SetTurnaroundTime+0x120>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d306      	bcc.n	8006b98 <USB_SetTurnaroundTime+0x40>
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	4a3b      	ldr	r2, [pc, #236]	@ (8006c7c <USB_SetTurnaroundTime+0x124>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d202      	bcs.n	8006b98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b92:	230e      	movs	r3, #14
 8006b94:	617b      	str	r3, [r7, #20]
 8006b96:	e057      	b.n	8006c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	4a38      	ldr	r2, [pc, #224]	@ (8006c7c <USB_SetTurnaroundTime+0x124>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d306      	bcc.n	8006bae <USB_SetTurnaroundTime+0x56>
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	4a37      	ldr	r2, [pc, #220]	@ (8006c80 <USB_SetTurnaroundTime+0x128>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d202      	bcs.n	8006bae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006ba8:	230d      	movs	r3, #13
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	e04c      	b.n	8006c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	4a33      	ldr	r2, [pc, #204]	@ (8006c80 <USB_SetTurnaroundTime+0x128>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d306      	bcc.n	8006bc4 <USB_SetTurnaroundTime+0x6c>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	4a32      	ldr	r2, [pc, #200]	@ (8006c84 <USB_SetTurnaroundTime+0x12c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d802      	bhi.n	8006bc4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006bbe:	230c      	movs	r3, #12
 8006bc0:	617b      	str	r3, [r7, #20]
 8006bc2:	e041      	b.n	8006c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	4a2f      	ldr	r2, [pc, #188]	@ (8006c84 <USB_SetTurnaroundTime+0x12c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d906      	bls.n	8006bda <USB_SetTurnaroundTime+0x82>
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4a2e      	ldr	r2, [pc, #184]	@ (8006c88 <USB_SetTurnaroundTime+0x130>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d802      	bhi.n	8006bda <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006bd4:	230b      	movs	r3, #11
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e036      	b.n	8006c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8006c88 <USB_SetTurnaroundTime+0x130>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d906      	bls.n	8006bf0 <USB_SetTurnaroundTime+0x98>
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	4a29      	ldr	r2, [pc, #164]	@ (8006c8c <USB_SetTurnaroundTime+0x134>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d802      	bhi.n	8006bf0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006bea:	230a      	movs	r3, #10
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	e02b      	b.n	8006c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	4a26      	ldr	r2, [pc, #152]	@ (8006c8c <USB_SetTurnaroundTime+0x134>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d906      	bls.n	8006c06 <USB_SetTurnaroundTime+0xae>
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	4a25      	ldr	r2, [pc, #148]	@ (8006c90 <USB_SetTurnaroundTime+0x138>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d202      	bcs.n	8006c06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006c00:	2309      	movs	r3, #9
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	e020      	b.n	8006c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	4a21      	ldr	r2, [pc, #132]	@ (8006c90 <USB_SetTurnaroundTime+0x138>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d306      	bcc.n	8006c1c <USB_SetTurnaroundTime+0xc4>
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	4a20      	ldr	r2, [pc, #128]	@ (8006c94 <USB_SetTurnaroundTime+0x13c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d802      	bhi.n	8006c1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006c16:	2308      	movs	r3, #8
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	e015      	b.n	8006c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8006c94 <USB_SetTurnaroundTime+0x13c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d906      	bls.n	8006c32 <USB_SetTurnaroundTime+0xda>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4a1c      	ldr	r2, [pc, #112]	@ (8006c98 <USB_SetTurnaroundTime+0x140>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d202      	bcs.n	8006c32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006c2c:	2307      	movs	r3, #7
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	e00a      	b.n	8006c48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006c32:	2306      	movs	r3, #6
 8006c34:	617b      	str	r3, [r7, #20]
 8006c36:	e007      	b.n	8006c48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006c38:	79fb      	ldrb	r3, [r7, #7]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d102      	bne.n	8006c44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006c3e:	2309      	movs	r3, #9
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	e001      	b.n	8006c48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c44:	2309      	movs	r3, #9
 8006c46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	029b      	lsls	r3, r3, #10
 8006c5c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006c60:	431a      	orrs	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	371c      	adds	r7, #28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	00d8acbf 	.word	0x00d8acbf
 8006c78:	00e4e1c0 	.word	0x00e4e1c0
 8006c7c:	00f42400 	.word	0x00f42400
 8006c80:	01067380 	.word	0x01067380
 8006c84:	011a499f 	.word	0x011a499f
 8006c88:	01312cff 	.word	0x01312cff
 8006c8c:	014ca43f 	.word	0x014ca43f
 8006c90:	016e3600 	.word	0x016e3600
 8006c94:	01a6ab1f 	.word	0x01a6ab1f
 8006c98:	01e84800 	.word	0x01e84800

08006c9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f043 0201 	orr.w	r2, r3, #1
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f023 0201 	bic.w	r2, r3, #1
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d115      	bne.n	8006d2e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d0e:	200a      	movs	r0, #10
 8006d10:	f7fb fb98 	bl	8002444 <HAL_Delay>
      ms += 10U;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	330a      	adds	r3, #10
 8006d18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 f93f 	bl	8007f9e <USB_GetMode>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d01e      	beq.n	8006d64 <USB_SetCurrentMode+0x84>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d2a:	d9f0      	bls.n	8006d0e <USB_SetCurrentMode+0x2e>
 8006d2c:	e01a      	b.n	8006d64 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d2e:	78fb      	ldrb	r3, [r7, #3]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d115      	bne.n	8006d60 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d40:	200a      	movs	r0, #10
 8006d42:	f7fb fb7f 	bl	8002444 <HAL_Delay>
      ms += 10U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	330a      	adds	r3, #10
 8006d4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 f926 	bl	8007f9e <USB_GetMode>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d005      	beq.n	8006d64 <USB_SetCurrentMode+0x84>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d5c:	d9f0      	bls.n	8006d40 <USB_SetCurrentMode+0x60>
 8006d5e:	e001      	b.n	8006d64 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e005      	b.n	8006d70 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d68:	d101      	bne.n	8006d6e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e000      	b.n	8006d70 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d78:	b084      	sub	sp, #16
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b086      	sub	sp, #24
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d92:	2300      	movs	r3, #0
 8006d94:	613b      	str	r3, [r7, #16]
 8006d96:	e009      	b.n	8006dac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	3340      	adds	r3, #64	@ 0x40
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	2200      	movs	r2, #0
 8006da4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	3301      	adds	r3, #1
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	2b0e      	cmp	r3, #14
 8006db0:	d9f2      	bls.n	8006d98 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006db2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d11c      	bne.n	8006df4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dc8:	f043 0302 	orr.w	r3, r3, #2
 8006dcc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dde:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	639a      	str	r2, [r3, #56]	@ 0x38
 8006df2:	e00b      	b.n	8006e0c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e04:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e12:	461a      	mov	r2, r3
 8006e14:	2300      	movs	r3, #0
 8006e16:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e18:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d10d      	bne.n	8006e3c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d104      	bne.n	8006e32 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e28:	2100      	movs	r1, #0
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f968 	bl	8007100 <USB_SetDevSpeed>
 8006e30:	e008      	b.n	8006e44 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e32:	2101      	movs	r1, #1
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f963 	bl	8007100 <USB_SetDevSpeed>
 8006e3a:	e003      	b.n	8006e44 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e3c:	2103      	movs	r1, #3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f95e 	bl	8007100 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e44:	2110      	movs	r1, #16
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f8fa 	bl	8007040 <USB_FlushTxFifo>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f924 	bl	80070a4 <USB_FlushRxFifo>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	2300      	movs	r3, #0
 8006e70:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e78:	461a      	mov	r2, r3
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e84:	461a      	mov	r2, r3
 8006e86:	2300      	movs	r3, #0
 8006e88:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
 8006e8e:	e043      	b.n	8006f18 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ea6:	d118      	bne.n	8006eda <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10a      	bne.n	8006ec4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006ec0:	6013      	str	r3, [r2, #0]
 8006ec2:	e013      	b.n	8006eec <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	e008      	b.n	8006eec <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	2300      	movs	r3, #0
 8006eea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef8:	461a      	mov	r2, r3
 8006efa:	2300      	movs	r3, #0
 8006efc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	3301      	adds	r3, #1
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d3b5      	bcc.n	8006e90 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f24:	2300      	movs	r3, #0
 8006f26:	613b      	str	r3, [r7, #16]
 8006f28:	e043      	b.n	8006fb2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f40:	d118      	bne.n	8006f74 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f54:	461a      	mov	r2, r3
 8006f56:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	e013      	b.n	8006f86 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	e008      	b.n	8006f86 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f80:	461a      	mov	r2, r3
 8006f82:	2300      	movs	r3, #0
 8006f84:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f92:	461a      	mov	r2, r3
 8006f94:	2300      	movs	r3, #0
 8006f96:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006faa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	613b      	str	r3, [r7, #16]
 8006fb2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d3b5      	bcc.n	8006f2a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fd0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006fde:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fe0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d105      	bne.n	8006ff4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	f043 0210 	orr.w	r2, r3, #16
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	699a      	ldr	r2, [r3, #24]
 8006ff8:	4b10      	ldr	r3, [pc, #64]	@ (800703c <USB_DevInit+0x2c4>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007000:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007004:	2b00      	cmp	r3, #0
 8007006:	d005      	beq.n	8007014 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	f043 0208 	orr.w	r2, r3, #8
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007014:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007018:	2b01      	cmp	r3, #1
 800701a:	d107      	bne.n	800702c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007024:	f043 0304 	orr.w	r3, r3, #4
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800702c:	7dfb      	ldrb	r3, [r7, #23]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007038:	b004      	add	sp, #16
 800703a:	4770      	bx	lr
 800703c:	803c3800 	.word	0x803c3800

08007040 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3301      	adds	r3, #1
 8007052:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800705a:	d901      	bls.n	8007060 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e01b      	b.n	8007098 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	daf2      	bge.n	800704e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	019b      	lsls	r3, r3, #6
 8007070:	f043 0220 	orr.w	r2, r3, #32
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	3301      	adds	r3, #1
 800707c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007084:	d901      	bls.n	800708a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e006      	b.n	8007098 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	f003 0320 	and.w	r3, r3, #32
 8007092:	2b20      	cmp	r3, #32
 8007094:	d0f0      	beq.n	8007078 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3301      	adds	r3, #1
 80070b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070bc:	d901      	bls.n	80070c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e018      	b.n	80070f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	daf2      	bge.n	80070b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2210      	movs	r2, #16
 80070d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3301      	adds	r3, #1
 80070d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070e0:	d901      	bls.n	80070e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e006      	b.n	80070f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	2b10      	cmp	r3, #16
 80070f0:	d0f0      	beq.n	80070d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	78fb      	ldrb	r3, [r7, #3]
 800711a:	68f9      	ldr	r1, [r7, #12]
 800711c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007120:	4313      	orrs	r3, r2
 8007122:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007132:	b480      	push	{r7}
 8007134:	b087      	sub	sp, #28
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f003 0306 	and.w	r3, r3, #6
 800714a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d102      	bne.n	8007158 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007152:	2300      	movs	r3, #0
 8007154:	75fb      	strb	r3, [r7, #23]
 8007156:	e00a      	b.n	800716e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b02      	cmp	r3, #2
 800715c:	d002      	beq.n	8007164 <USB_GetDevSpeed+0x32>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b06      	cmp	r3, #6
 8007162:	d102      	bne.n	800716a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007164:	2302      	movs	r3, #2
 8007166:	75fb      	strb	r3, [r7, #23]
 8007168:	e001      	b.n	800716e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800716a:	230f      	movs	r3, #15
 800716c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800716e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007170:	4618      	mov	r0, r3
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d13a      	bne.n	800720e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800719e:	69da      	ldr	r2, [r3, #28]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	f003 030f 	and.w	r3, r3, #15
 80071a8:	2101      	movs	r1, #1
 80071aa:	fa01 f303 	lsl.w	r3, r1, r3
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	68f9      	ldr	r1, [r7, #12]
 80071b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071b6:	4313      	orrs	r3, r2
 80071b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d155      	bne.n	800727c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	791b      	ldrb	r3, [r3, #4]
 80071ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	059b      	lsls	r3, r3, #22
 80071f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071f4:	4313      	orrs	r3, r2
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	0151      	lsls	r1, r2, #5
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	440a      	add	r2, r1
 80071fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007206:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	e036      	b.n	800727c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007214:	69da      	ldr	r2, [r3, #28]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	2101      	movs	r1, #1
 8007220:	fa01 f303 	lsl.w	r3, r1, r3
 8007224:	041b      	lsls	r3, r3, #16
 8007226:	68f9      	ldr	r1, [r7, #12]
 8007228:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800722c:	4313      	orrs	r3, r2
 800722e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d11a      	bne.n	800727c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	791b      	ldrb	r3, [r3, #4]
 8007260:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007262:	430b      	orrs	r3, r1
 8007264:	4313      	orrs	r3, r2
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	0151      	lsls	r1, r2, #5
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	440a      	add	r2, r1
 800726e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007272:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007276:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800727a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
	...

0800728c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	785b      	ldrb	r3, [r3, #1]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d161      	bne.n	800736c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072be:	d11f      	bne.n	8007300 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	0151      	lsls	r1, r2, #5
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	440a      	add	r2, r1
 80072d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	0151      	lsls	r1, r2, #5
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	440a      	add	r2, r1
 80072f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007306:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	f003 030f 	and.w	r3, r3, #15
 8007310:	2101      	movs	r1, #1
 8007312:	fa01 f303 	lsl.w	r3, r1, r3
 8007316:	b29b      	uxth	r3, r3
 8007318:	43db      	mvns	r3, r3
 800731a:	68f9      	ldr	r1, [r7, #12]
 800731c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007320:	4013      	ands	r3, r2
 8007322:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800732a:	69da      	ldr	r2, [r3, #28]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	f003 030f 	and.w	r3, r3, #15
 8007334:	2101      	movs	r1, #1
 8007336:	fa01 f303 	lsl.w	r3, r1, r3
 800733a:	b29b      	uxth	r3, r3
 800733c:	43db      	mvns	r3, r3
 800733e:	68f9      	ldr	r1, [r7, #12]
 8007340:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007344:	4013      	ands	r3, r2
 8007346:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4413      	add	r3, r2
 8007350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	0159      	lsls	r1, r3, #5
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	440b      	add	r3, r1
 800735e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007362:	4619      	mov	r1, r3
 8007364:	4b35      	ldr	r3, [pc, #212]	@ (800743c <USB_DeactivateEndpoint+0x1b0>)
 8007366:	4013      	ands	r3, r2
 8007368:	600b      	str	r3, [r1, #0]
 800736a:	e060      	b.n	800742e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800737e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007382:	d11f      	bne.n	80073c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4413      	add	r3, r2
 800738c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	0151      	lsls	r1, r2, #5
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	440a      	add	r2, r1
 800739a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800739e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80073a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	0151      	lsls	r1, r2, #5
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	440a      	add	r2, r1
 80073ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	f003 030f 	and.w	r3, r3, #15
 80073d4:	2101      	movs	r1, #1
 80073d6:	fa01 f303 	lsl.w	r3, r1, r3
 80073da:	041b      	lsls	r3, r3, #16
 80073dc:	43db      	mvns	r3, r3
 80073de:	68f9      	ldr	r1, [r7, #12]
 80073e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073e4:	4013      	ands	r3, r2
 80073e6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ee:	69da      	ldr	r2, [r3, #28]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	f003 030f 	and.w	r3, r3, #15
 80073f8:	2101      	movs	r1, #1
 80073fa:	fa01 f303 	lsl.w	r3, r1, r3
 80073fe:	041b      	lsls	r3, r3, #16
 8007400:	43db      	mvns	r3, r3
 8007402:	68f9      	ldr	r1, [r7, #12]
 8007404:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007408:	4013      	ands	r3, r2
 800740a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	0159      	lsls	r1, r3, #5
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	440b      	add	r3, r1
 8007422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007426:	4619      	mov	r1, r3
 8007428:	4b05      	ldr	r3, [pc, #20]	@ (8007440 <USB_DeactivateEndpoint+0x1b4>)
 800742a:	4013      	ands	r3, r2
 800742c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	ec337800 	.word	0xec337800
 8007440:	eff37800 	.word	0xeff37800

08007444 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08a      	sub	sp, #40	@ 0x28
 8007448:	af02      	add	r7, sp, #8
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	4613      	mov	r3, r2
 8007450:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	785b      	ldrb	r3, [r3, #1]
 8007460:	2b01      	cmp	r3, #1
 8007462:	f040 817f 	bne.w	8007764 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d132      	bne.n	80074d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	4413      	add	r3, r2
 8007476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	0151      	lsls	r1, r2, #5
 8007480:	69fa      	ldr	r2, [r7, #28]
 8007482:	440a      	add	r2, r1
 8007484:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007488:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800748c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007490:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	0151      	lsls	r1, r2, #5
 80074a4:	69fa      	ldr	r2, [r7, #28]
 80074a6:	440a      	add	r2, r1
 80074a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	69ba      	ldr	r2, [r7, #24]
 80074c2:	0151      	lsls	r1, r2, #5
 80074c4:	69fa      	ldr	r2, [r7, #28]
 80074c6:	440a      	add	r2, r1
 80074c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074cc:	0cdb      	lsrs	r3, r3, #19
 80074ce:	04db      	lsls	r3, r3, #19
 80074d0:	6113      	str	r3, [r2, #16]
 80074d2:	e097      	b.n	8007604 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	0151      	lsls	r1, r2, #5
 80074e6:	69fa      	ldr	r2, [r7, #28]
 80074e8:	440a      	add	r2, r1
 80074ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074ee:	0cdb      	lsrs	r3, r3, #19
 80074f0:	04db      	lsls	r3, r3, #19
 80074f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	0151      	lsls	r1, r2, #5
 8007506:	69fa      	ldr	r2, [r7, #28]
 8007508:	440a      	add	r2, r1
 800750a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800750e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007512:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007516:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d11a      	bne.n	8007554 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	691a      	ldr	r2, [r3, #16]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	429a      	cmp	r2, r3
 8007528:	d903      	bls.n	8007532 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	689a      	ldr	r2, [r3, #8]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	4413      	add	r3, r2
 800753a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	0151      	lsls	r1, r2, #5
 8007544:	69fa      	ldr	r2, [r7, #28]
 8007546:	440a      	add	r2, r1
 8007548:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800754c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007550:	6113      	str	r3, [r2, #16]
 8007552:	e044      	b.n	80075de <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	691a      	ldr	r2, [r3, #16]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	4413      	add	r3, r2
 800755e:	1e5a      	subs	r2, r3, #1
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	fbb2 f3f3 	udiv	r3, r2, r3
 8007568:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	8afb      	ldrh	r3, [r7, #22]
 800757a:	04d9      	lsls	r1, r3, #19
 800757c:	4ba4      	ldr	r3, [pc, #656]	@ (8007810 <USB_EPStartXfer+0x3cc>)
 800757e:	400b      	ands	r3, r1
 8007580:	69b9      	ldr	r1, [r7, #24]
 8007582:	0148      	lsls	r0, r1, #5
 8007584:	69f9      	ldr	r1, [r7, #28]
 8007586:	4401      	add	r1, r0
 8007588:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800758c:	4313      	orrs	r3, r2
 800758e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	791b      	ldrb	r3, [r3, #4]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d122      	bne.n	80075de <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	69ba      	ldr	r2, [r7, #24]
 80075a8:	0151      	lsls	r1, r2, #5
 80075aa:	69fa      	ldr	r2, [r7, #28]
 80075ac:	440a      	add	r2, r1
 80075ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075b2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80075b6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c4:	691a      	ldr	r2, [r3, #16]
 80075c6:	8afb      	ldrh	r3, [r7, #22]
 80075c8:	075b      	lsls	r3, r3, #29
 80075ca:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80075ce:	69b9      	ldr	r1, [r7, #24]
 80075d0:	0148      	lsls	r0, r1, #5
 80075d2:	69f9      	ldr	r1, [r7, #28]
 80075d4:	4401      	add	r1, r0
 80075d6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80075da:	4313      	orrs	r3, r2
 80075dc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	015a      	lsls	r2, r3, #5
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ea:	691a      	ldr	r2, [r3, #16]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075f4:	69b9      	ldr	r1, [r7, #24]
 80075f6:	0148      	lsls	r0, r1, #5
 80075f8:	69f9      	ldr	r1, [r7, #28]
 80075fa:	4401      	add	r1, r0
 80075fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007600:	4313      	orrs	r3, r2
 8007602:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007604:	79fb      	ldrb	r3, [r7, #7]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d14b      	bne.n	80076a2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d009      	beq.n	8007626 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800761e:	461a      	mov	r2, r3
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	791b      	ldrb	r3, [r3, #4]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d128      	bne.n	8007680 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800763a:	2b00      	cmp	r3, #0
 800763c:	d110      	bne.n	8007660 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	0151      	lsls	r1, r2, #5
 8007650:	69fa      	ldr	r2, [r7, #28]
 8007652:	440a      	add	r2, r1
 8007654:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007658:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800765c:	6013      	str	r3, [r2, #0]
 800765e:	e00f      	b.n	8007680 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	4413      	add	r3, r2
 8007668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	0151      	lsls	r1, r2, #5
 8007672:	69fa      	ldr	r2, [r7, #28]
 8007674:	440a      	add	r2, r1
 8007676:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800767a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800767e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	0151      	lsls	r1, r2, #5
 8007692:	69fa      	ldr	r2, [r7, #28]
 8007694:	440a      	add	r2, r1
 8007696:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800769a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800769e:	6013      	str	r3, [r2, #0]
 80076a0:	e166      	b.n	8007970 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	0151      	lsls	r1, r2, #5
 80076b4:	69fa      	ldr	r2, [r7, #28]
 80076b6:	440a      	add	r2, r1
 80076b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076bc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80076c0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	791b      	ldrb	r3, [r3, #4]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d015      	beq.n	80076f6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 814e 	beq.w	8007970 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	f003 030f 	and.w	r3, r3, #15
 80076e4:	2101      	movs	r1, #1
 80076e6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ea:	69f9      	ldr	r1, [r7, #28]
 80076ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076f0:	4313      	orrs	r3, r2
 80076f2:	634b      	str	r3, [r1, #52]	@ 0x34
 80076f4:	e13c      	b.n	8007970 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007702:	2b00      	cmp	r3, #0
 8007704:	d110      	bne.n	8007728 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	0151      	lsls	r1, r2, #5
 8007718:	69fa      	ldr	r2, [r7, #28]
 800771a:	440a      	add	r2, r1
 800771c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007720:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	e00f      	b.n	8007748 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	0151      	lsls	r1, r2, #5
 800773a:	69fa      	ldr	r2, [r7, #28]
 800773c:	440a      	add	r2, r1
 800773e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007746:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	68d9      	ldr	r1, [r3, #12]
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	781a      	ldrb	r2, [r3, #0]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	b298      	uxth	r0, r3
 8007756:	79fb      	ldrb	r3, [r7, #7]
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	4603      	mov	r3, r0
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 f9b9 	bl	8007ad4 <USB_WritePacket>
 8007762:	e105      	b.n	8007970 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	0151      	lsls	r1, r2, #5
 8007776:	69fa      	ldr	r2, [r7, #28]
 8007778:	440a      	add	r2, r1
 800777a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800777e:	0cdb      	lsrs	r3, r3, #19
 8007780:	04db      	lsls	r3, r3, #19
 8007782:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	0151      	lsls	r1, r2, #5
 8007796:	69fa      	ldr	r2, [r7, #28]
 8007798:	440a      	add	r2, r1
 800779a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800779e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80077a2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80077a6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d132      	bne.n	8007814 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	689a      	ldr	r2, [r3, #8]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	015a      	lsls	r2, r3, #5
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	4413      	add	r3, r2
 80077ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077d2:	691a      	ldr	r2, [r3, #16]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	6a1b      	ldr	r3, [r3, #32]
 80077d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077dc:	69b9      	ldr	r1, [r7, #24]
 80077de:	0148      	lsls	r0, r1, #5
 80077e0:	69f9      	ldr	r1, [r7, #28]
 80077e2:	4401      	add	r1, r0
 80077e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80077e8:	4313      	orrs	r3, r2
 80077ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	0151      	lsls	r1, r2, #5
 80077fe:	69fa      	ldr	r2, [r7, #28]
 8007800:	440a      	add	r2, r1
 8007802:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007806:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800780a:	6113      	str	r3, [r2, #16]
 800780c:	e062      	b.n	80078d4 <USB_EPStartXfer+0x490>
 800780e:	bf00      	nop
 8007810:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d123      	bne.n	8007864 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007828:	691a      	ldr	r2, [r3, #16]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007832:	69b9      	ldr	r1, [r7, #24]
 8007834:	0148      	lsls	r0, r1, #5
 8007836:	69f9      	ldr	r1, [r7, #28]
 8007838:	4401      	add	r1, r0
 800783a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800783e:	4313      	orrs	r3, r2
 8007840:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	4413      	add	r3, r2
 800784a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	69ba      	ldr	r2, [r7, #24]
 8007852:	0151      	lsls	r1, r2, #5
 8007854:	69fa      	ldr	r2, [r7, #28]
 8007856:	440a      	add	r2, r1
 8007858:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800785c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007860:	6113      	str	r3, [r2, #16]
 8007862:	e037      	b.n	80078d4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	691a      	ldr	r2, [r3, #16]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	4413      	add	r3, r2
 800786e:	1e5a      	subs	r2, r3, #1
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	fbb2 f3f3 	udiv	r3, r2, r3
 8007878:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	8afa      	ldrh	r2, [r7, #22]
 8007880:	fb03 f202 	mul.w	r2, r3, r2
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007894:	691a      	ldr	r2, [r3, #16]
 8007896:	8afb      	ldrh	r3, [r7, #22]
 8007898:	04d9      	lsls	r1, r3, #19
 800789a:	4b38      	ldr	r3, [pc, #224]	@ (800797c <USB_EPStartXfer+0x538>)
 800789c:	400b      	ands	r3, r1
 800789e:	69b9      	ldr	r1, [r7, #24]
 80078a0:	0148      	lsls	r0, r1, #5
 80078a2:	69f9      	ldr	r1, [r7, #28]
 80078a4:	4401      	add	r1, r0
 80078a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80078aa:	4313      	orrs	r3, r2
 80078ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ba:	691a      	ldr	r2, [r3, #16]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078c4:	69b9      	ldr	r1, [r7, #24]
 80078c6:	0148      	lsls	r0, r1, #5
 80078c8:	69f9      	ldr	r1, [r7, #28]
 80078ca:	4401      	add	r1, r0
 80078cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80078d0:	4313      	orrs	r3, r2
 80078d2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80078d4:	79fb      	ldrb	r3, [r7, #7]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d10d      	bne.n	80078f6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d009      	beq.n	80078f6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	68d9      	ldr	r1, [r3, #12]
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f2:	460a      	mov	r2, r1
 80078f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	791b      	ldrb	r3, [r3, #4]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d128      	bne.n	8007950 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800790a:	2b00      	cmp	r3, #0
 800790c:	d110      	bne.n	8007930 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	4413      	add	r3, r2
 8007916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	0151      	lsls	r1, r2, #5
 8007920:	69fa      	ldr	r2, [r7, #28]
 8007922:	440a      	add	r2, r1
 8007924:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007928:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800792c:	6013      	str	r3, [r2, #0]
 800792e:	e00f      	b.n	8007950 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	69ba      	ldr	r2, [r7, #24]
 8007940:	0151      	lsls	r1, r2, #5
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	440a      	add	r2, r1
 8007946:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800794a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800794e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	4413      	add	r3, r2
 8007958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69ba      	ldr	r2, [r7, #24]
 8007960:	0151      	lsls	r1, r2, #5
 8007962:	69fa      	ldr	r2, [r7, #28]
 8007964:	440a      	add	r2, r1
 8007966:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800796a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800796e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3720      	adds	r7, #32
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	1ff80000 	.word	0x1ff80000

08007980 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	785b      	ldrb	r3, [r3, #1]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d14a      	bne.n	8007a34 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079b6:	f040 8086 	bne.w	8007ac6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	7812      	ldrb	r2, [r2, #0]
 80079ce:	0151      	lsls	r1, r2, #5
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	440a      	add	r2, r1
 80079d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80079dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	7812      	ldrb	r2, [r2, #0]
 80079f2:	0151      	lsls	r1, r2, #5
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	440a      	add	r2, r1
 80079f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3301      	adds	r3, #1
 8007a06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d902      	bls.n	8007a18 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	75fb      	strb	r3, [r7, #23]
          break;
 8007a16:	e056      	b.n	8007ac6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a30:	d0e7      	beq.n	8007a02 <USB_EPStopXfer+0x82>
 8007a32:	e048      	b.n	8007ac6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	015a      	lsls	r2, r3, #5
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a4c:	d13b      	bne.n	8007ac6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	7812      	ldrb	r2, [r2, #0]
 8007a62:	0151      	lsls	r1, r2, #5
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	440a      	add	r2, r1
 8007a68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a70:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	7812      	ldrb	r2, [r2, #0]
 8007a86:	0151      	lsls	r1, r2, #5
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	440a      	add	r2, r1
 8007a8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d902      	bls.n	8007aac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	75fb      	strb	r3, [r7, #23]
          break;
 8007aaa:	e00c      	b.n	8007ac6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ac4:	d0e7      	beq.n	8007a96 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	371c      	adds	r7, #28
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b089      	sub	sp, #36	@ 0x24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	4611      	mov	r1, r2
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	71fb      	strb	r3, [r7, #7]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007af2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d123      	bne.n	8007b42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007afa:	88bb      	ldrh	r3, [r7, #4]
 8007afc:	3303      	adds	r3, #3
 8007afe:	089b      	lsrs	r3, r3, #2
 8007b00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b02:	2300      	movs	r3, #0
 8007b04:	61bb      	str	r3, [r7, #24]
 8007b06:	e018      	b.n	8007b3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b08:	79fb      	ldrb	r3, [r7, #7]
 8007b0a:	031a      	lsls	r2, r3, #12
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b14:	461a      	mov	r2, r3
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	3301      	adds	r3, #1
 8007b26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	3301      	adds	r3, #1
 8007b32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	3301      	adds	r3, #1
 8007b38:	61bb      	str	r3, [r7, #24]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d3e2      	bcc.n	8007b08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3724      	adds	r7, #36	@ 0x24
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b08b      	sub	sp, #44	@ 0x2c
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b66:	88fb      	ldrh	r3, [r7, #6]
 8007b68:	089b      	lsrs	r3, r3, #2
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b6e:	88fb      	ldrh	r3, [r7, #6]
 8007b70:	f003 0303 	and.w	r3, r3, #3
 8007b74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b76:	2300      	movs	r3, #0
 8007b78:	623b      	str	r3, [r7, #32]
 8007b7a:	e014      	b.n	8007ba6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b86:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b90:	3301      	adds	r3, #1
 8007b92:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b96:	3301      	adds	r3, #1
 8007b98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	623b      	str	r3, [r7, #32]
 8007ba6:	6a3a      	ldr	r2, [r7, #32]
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d3e6      	bcc.n	8007b7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007bae:	8bfb      	ldrh	r3, [r7, #30]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d01e      	beq.n	8007bf2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	f107 0310 	add.w	r3, r7, #16
 8007bc4:	6812      	ldr	r2, [r2, #0]
 8007bc6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd8:	701a      	strb	r2, [r3, #0]
      i++;
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	623b      	str	r3, [r7, #32]
      pDest++;
 8007be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be2:	3301      	adds	r3, #1
 8007be4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007be6:	8bfb      	ldrh	r3, [r7, #30]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007bec:	8bfb      	ldrh	r3, [r7, #30]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1ea      	bne.n	8007bc8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	372c      	adds	r7, #44	@ 0x2c
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	785b      	ldrb	r3, [r3, #1]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d12c      	bne.n	8007c76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	db12      	blt.n	8007c54 <USB_EPSetStall+0x54>
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00f      	beq.n	8007c54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	0151      	lsls	r1, r2, #5
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	440a      	add	r2, r1
 8007c4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c4e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	015a      	lsls	r2, r3, #5
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	0151      	lsls	r1, r2, #5
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	440a      	add	r2, r1
 8007c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c72:	6013      	str	r3, [r2, #0]
 8007c74:	e02b      	b.n	8007cce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	db12      	blt.n	8007cae <USB_EPSetStall+0xae>
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00f      	beq.n	8007cae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	0151      	lsls	r1, r2, #5
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	440a      	add	r2, r1
 8007ca4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ca8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007cac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	0151      	lsls	r1, r2, #5
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	440a      	add	r2, r1
 8007cc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ccc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	785b      	ldrb	r3, [r3, #1]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d128      	bne.n	8007d4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	0151      	lsls	r1, r2, #5
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	440a      	add	r2, r1
 8007d0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	791b      	ldrb	r3, [r3, #4]
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d003      	beq.n	8007d28 <USB_EPClearStall+0x4c>
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	791b      	ldrb	r3, [r3, #4]
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d138      	bne.n	8007d9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	0151      	lsls	r1, r2, #5
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	440a      	add	r2, r1
 8007d3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	e027      	b.n	8007d9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	015a      	lsls	r2, r3, #5
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	0151      	lsls	r1, r2, #5
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	440a      	add	r2, r1
 8007d60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d64:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	791b      	ldrb	r3, [r3, #4]
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d003      	beq.n	8007d7a <USB_EPClearStall+0x9e>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	791b      	ldrb	r3, [r3, #4]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d10f      	bne.n	8007d9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	015a      	lsls	r2, r3, #5
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	0151      	lsls	r1, r2, #5
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	440a      	add	r2, r1
 8007d90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dc6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007dca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	011b      	lsls	r3, r3, #4
 8007dd8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007ddc:	68f9      	ldr	r1, [r7, #12]
 8007dde:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007de2:	4313      	orrs	r3, r2
 8007de4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e0e:	f023 0303 	bic.w	r3, r3, #3
 8007e12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e22:	f023 0302 	bic.w	r3, r3, #2
 8007e26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b085      	sub	sp, #20
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e50:	f023 0303 	bic.w	r3, r3, #3
 8007e54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e64:	f043 0302 	orr.w	r3, r3, #2
 8007e68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e90:	68fb      	ldr	r3, [r7, #12]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b085      	sub	sp, #20
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	0c1b      	lsrs	r3, r3, #16
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b085      	sub	sp, #20
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	b29b      	uxth	r3, r3
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b085      	sub	sp, #20
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f16:	78fb      	ldrb	r3, [r7, #3]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	4013      	ands	r3, r2
 8007f32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f34:	68bb      	ldr	r3, [r7, #8]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b087      	sub	sp, #28
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007f66:	78fb      	ldrb	r3, [r7, #3]
 8007f68:	f003 030f 	and.w	r3, r3, #15
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f72:	01db      	lsls	r3, r3, #7
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007f7c:	78fb      	ldrb	r3, [r7, #3]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f90:	68bb      	ldr	r3, [r7, #8]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	371c      	adds	r7, #28
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b083      	sub	sp, #12
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	f003 0301 	and.w	r3, r3, #1
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b085      	sub	sp, #20
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fd4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007fd8:	f023 0307 	bic.w	r3, r3, #7
 8007fdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ff0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008000:	b480      	push	{r7}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	460b      	mov	r3, r1
 800800a:	607a      	str	r2, [r7, #4]
 800800c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	333c      	adds	r3, #60	@ 0x3c
 8008016:	3304      	adds	r3, #4
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	4a26      	ldr	r2, [pc, #152]	@ (80080b8 <USB_EP0_OutStart+0xb8>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d90a      	bls.n	800803a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008030:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008034:	d101      	bne.n	800803a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	e037      	b.n	80080aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008040:	461a      	mov	r2, r3
 8008042:	2300      	movs	r3, #0
 8008044:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008054:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008058:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008068:	f043 0318 	orr.w	r3, r3, #24
 800806c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800807c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008080:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008082:	7afb      	ldrb	r3, [r7, #11]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d10f      	bne.n	80080a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800808e:	461a      	mov	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080a2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80080a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	371c      	adds	r7, #28
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	4f54300a 	.word	0x4f54300a

080080bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	3301      	adds	r3, #1
 80080cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080d4:	d901      	bls.n	80080da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e01b      	b.n	8008112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	daf2      	bge.n	80080c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	f043 0201 	orr.w	r2, r3, #1
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3301      	adds	r3, #1
 80080f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080fe:	d901      	bls.n	8008104 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e006      	b.n	8008112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b01      	cmp	r3, #1
 800810e:	d0f0      	beq.n	80080f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
	...

08008120 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800812c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008130:	f002 fce4 	bl	800aafc <USBD_static_malloc>
 8008134:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d109      	bne.n	8008150 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	32b0      	adds	r2, #176	@ 0xb0
 8008146:	2100      	movs	r1, #0
 8008148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800814c:	2302      	movs	r3, #2
 800814e:	e0d4      	b.n	80082fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008150:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008154:	2100      	movs	r1, #0
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f003 faac 	bl	800b6b4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	32b0      	adds	r2, #176	@ 0xb0
 8008166:	68f9      	ldr	r1, [r7, #12]
 8008168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	32b0      	adds	r2, #176	@ 0xb0
 8008176:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	7c1b      	ldrb	r3, [r3, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d138      	bne.n	80081fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008188:	4b5e      	ldr	r3, [pc, #376]	@ (8008304 <USBD_CDC_Init+0x1e4>)
 800818a:	7819      	ldrb	r1, [r3, #0]
 800818c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008190:	2202      	movs	r2, #2
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f002 fb8f 	bl	800a8b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008198:	4b5a      	ldr	r3, [pc, #360]	@ (8008304 <USBD_CDC_Init+0x1e4>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	f003 020f 	and.w	r2, r3, #15
 80081a0:	6879      	ldr	r1, [r7, #4]
 80081a2:	4613      	mov	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4413      	add	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	440b      	add	r3, r1
 80081ac:	3324      	adds	r3, #36	@ 0x24
 80081ae:	2201      	movs	r2, #1
 80081b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80081b2:	4b55      	ldr	r3, [pc, #340]	@ (8008308 <USBD_CDC_Init+0x1e8>)
 80081b4:	7819      	ldrb	r1, [r3, #0]
 80081b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081ba:	2202      	movs	r2, #2
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f002 fb7a 	bl	800a8b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80081c2:	4b51      	ldr	r3, [pc, #324]	@ (8008308 <USBD_CDC_Init+0x1e8>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	f003 020f 	and.w	r2, r3, #15
 80081ca:	6879      	ldr	r1, [r7, #4]
 80081cc:	4613      	mov	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	440b      	add	r3, r1
 80081d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80081da:	2201      	movs	r2, #1
 80081dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80081de:	4b4b      	ldr	r3, [pc, #300]	@ (800830c <USBD_CDC_Init+0x1ec>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	f003 020f 	and.w	r2, r3, #15
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	4613      	mov	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	3326      	adds	r3, #38	@ 0x26
 80081f4:	2210      	movs	r2, #16
 80081f6:	801a      	strh	r2, [r3, #0]
 80081f8:	e035      	b.n	8008266 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80081fa:	4b42      	ldr	r3, [pc, #264]	@ (8008304 <USBD_CDC_Init+0x1e4>)
 80081fc:	7819      	ldrb	r1, [r3, #0]
 80081fe:	2340      	movs	r3, #64	@ 0x40
 8008200:	2202      	movs	r2, #2
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f002 fb57 	bl	800a8b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008208:	4b3e      	ldr	r3, [pc, #248]	@ (8008304 <USBD_CDC_Init+0x1e4>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	f003 020f 	and.w	r2, r3, #15
 8008210:	6879      	ldr	r1, [r7, #4]
 8008212:	4613      	mov	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4413      	add	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	440b      	add	r3, r1
 800821c:	3324      	adds	r3, #36	@ 0x24
 800821e:	2201      	movs	r2, #1
 8008220:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008222:	4b39      	ldr	r3, [pc, #228]	@ (8008308 <USBD_CDC_Init+0x1e8>)
 8008224:	7819      	ldrb	r1, [r3, #0]
 8008226:	2340      	movs	r3, #64	@ 0x40
 8008228:	2202      	movs	r2, #2
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f002 fb43 	bl	800a8b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008230:	4b35      	ldr	r3, [pc, #212]	@ (8008308 <USBD_CDC_Init+0x1e8>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	f003 020f 	and.w	r2, r3, #15
 8008238:	6879      	ldr	r1, [r7, #4]
 800823a:	4613      	mov	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	440b      	add	r3, r1
 8008244:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008248:	2201      	movs	r2, #1
 800824a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800824c:	4b2f      	ldr	r3, [pc, #188]	@ (800830c <USBD_CDC_Init+0x1ec>)
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	f003 020f 	and.w	r2, r3, #15
 8008254:	6879      	ldr	r1, [r7, #4]
 8008256:	4613      	mov	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	440b      	add	r3, r1
 8008260:	3326      	adds	r3, #38	@ 0x26
 8008262:	2210      	movs	r2, #16
 8008264:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008266:	4b29      	ldr	r3, [pc, #164]	@ (800830c <USBD_CDC_Init+0x1ec>)
 8008268:	7819      	ldrb	r1, [r3, #0]
 800826a:	2308      	movs	r3, #8
 800826c:	2203      	movs	r2, #3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f002 fb21 	bl	800a8b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008274:	4b25      	ldr	r3, [pc, #148]	@ (800830c <USBD_CDC_Init+0x1ec>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	f003 020f 	and.w	r2, r3, #15
 800827c:	6879      	ldr	r1, [r7, #4]
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	440b      	add	r3, r1
 8008288:	3324      	adds	r3, #36	@ 0x24
 800828a:	2201      	movs	r2, #1
 800828c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	33b0      	adds	r3, #176	@ 0xb0
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	4413      	add	r3, r2
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80082c4:	2302      	movs	r3, #2
 80082c6:	e018      	b.n	80082fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	7c1b      	ldrb	r3, [r3, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10a      	bne.n	80082e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008308 <USBD_CDC_Init+0x1e8>)
 80082d2:	7819      	ldrb	r1, [r3, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f002 fbd8 	bl	800aa94 <USBD_LL_PrepareReceive>
 80082e4:	e008      	b.n	80082f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082e6:	4b08      	ldr	r3, [pc, #32]	@ (8008308 <USBD_CDC_Init+0x1e8>)
 80082e8:	7819      	ldrb	r1, [r3, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082f0:	2340      	movs	r3, #64	@ 0x40
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f002 fbce 	bl	800aa94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	20000093 	.word	0x20000093
 8008308:	20000094 	.word	0x20000094
 800830c:	20000095 	.word	0x20000095

08008310 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800831c:	4b3a      	ldr	r3, [pc, #232]	@ (8008408 <USBD_CDC_DeInit+0xf8>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f002 faed 	bl	800a902 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008328:	4b37      	ldr	r3, [pc, #220]	@ (8008408 <USBD_CDC_DeInit+0xf8>)
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	f003 020f 	and.w	r2, r3, #15
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	4613      	mov	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	440b      	add	r3, r1
 800833c:	3324      	adds	r3, #36	@ 0x24
 800833e:	2200      	movs	r2, #0
 8008340:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008342:	4b32      	ldr	r3, [pc, #200]	@ (800840c <USBD_CDC_DeInit+0xfc>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f002 fada 	bl	800a902 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800834e:	4b2f      	ldr	r3, [pc, #188]	@ (800840c <USBD_CDC_DeInit+0xfc>)
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	f003 020f 	and.w	r2, r3, #15
 8008356:	6879      	ldr	r1, [r7, #4]
 8008358:	4613      	mov	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	440b      	add	r3, r1
 8008362:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008366:	2200      	movs	r2, #0
 8008368:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800836a:	4b29      	ldr	r3, [pc, #164]	@ (8008410 <USBD_CDC_DeInit+0x100>)
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	4619      	mov	r1, r3
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f002 fac6 	bl	800a902 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008376:	4b26      	ldr	r3, [pc, #152]	@ (8008410 <USBD_CDC_DeInit+0x100>)
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	f003 020f 	and.w	r2, r3, #15
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	4613      	mov	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	440b      	add	r3, r1
 800838a:	3324      	adds	r3, #36	@ 0x24
 800838c:	2200      	movs	r2, #0
 800838e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008390:	4b1f      	ldr	r3, [pc, #124]	@ (8008410 <USBD_CDC_DeInit+0x100>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	f003 020f 	and.w	r2, r3, #15
 8008398:	6879      	ldr	r1, [r7, #4]
 800839a:	4613      	mov	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	440b      	add	r3, r1
 80083a4:	3326      	adds	r3, #38	@ 0x26
 80083a6:	2200      	movs	r2, #0
 80083a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	32b0      	adds	r2, #176	@ 0xb0
 80083b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d01f      	beq.n	80083fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	33b0      	adds	r3, #176	@ 0xb0
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	32b0      	adds	r2, #176	@ 0xb0
 80083da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083de:	4618      	mov	r0, r3
 80083e0:	f002 fb9a 	bl	800ab18 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	32b0      	adds	r2, #176	@ 0xb0
 80083ee:	2100      	movs	r1, #0
 80083f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000093 	.word	0x20000093
 800840c:	20000094 	.word	0x20000094
 8008410:	20000095 	.word	0x20000095

08008414 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	32b0      	adds	r2, #176	@ 0xb0
 8008428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800842e:	2300      	movs	r3, #0
 8008430:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008432:	2300      	movs	r3, #0
 8008434:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008440:	2303      	movs	r3, #3
 8008442:	e0bf      	b.n	80085c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800844c:	2b00      	cmp	r3, #0
 800844e:	d050      	beq.n	80084f2 <USBD_CDC_Setup+0xde>
 8008450:	2b20      	cmp	r3, #32
 8008452:	f040 80af 	bne.w	80085b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	88db      	ldrh	r3, [r3, #6]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d03a      	beq.n	80084d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	b25b      	sxtb	r3, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	da1b      	bge.n	80084a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	33b0      	adds	r3, #176	@ 0xb0
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800847e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	88d2      	ldrh	r2, [r2, #6]
 8008484:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	88db      	ldrh	r3, [r3, #6]
 800848a:	2b07      	cmp	r3, #7
 800848c:	bf28      	it	cs
 800848e:	2307      	movcs	r3, #7
 8008490:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	89fa      	ldrh	r2, [r7, #14]
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 fd93 	bl	8009fc4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800849e:	e090      	b.n	80085c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	785a      	ldrb	r2, [r3, #1]
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	88db      	ldrh	r3, [r3, #6]
 80084ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80084b0:	d803      	bhi.n	80084ba <USBD_CDC_Setup+0xa6>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	88db      	ldrh	r3, [r3, #6]
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	e000      	b.n	80084bc <USBD_CDC_Setup+0xa8>
 80084ba:	2240      	movs	r2, #64	@ 0x40
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80084c2:	6939      	ldr	r1, [r7, #16]
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80084ca:	461a      	mov	r2, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 fda5 	bl	800a01c <USBD_CtlPrepareRx>
      break;
 80084d2:	e076      	b.n	80085c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	33b0      	adds	r3, #176	@ 0xb0
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	7850      	ldrb	r0, [r2, #1]
 80084ea:	2200      	movs	r2, #0
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	4798      	blx	r3
      break;
 80084f0:	e067      	b.n	80085c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	785b      	ldrb	r3, [r3, #1]
 80084f6:	2b0b      	cmp	r3, #11
 80084f8:	d851      	bhi.n	800859e <USBD_CDC_Setup+0x18a>
 80084fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008500 <USBD_CDC_Setup+0xec>)
 80084fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008500:	08008531 	.word	0x08008531
 8008504:	080085ad 	.word	0x080085ad
 8008508:	0800859f 	.word	0x0800859f
 800850c:	0800859f 	.word	0x0800859f
 8008510:	0800859f 	.word	0x0800859f
 8008514:	0800859f 	.word	0x0800859f
 8008518:	0800859f 	.word	0x0800859f
 800851c:	0800859f 	.word	0x0800859f
 8008520:	0800859f 	.word	0x0800859f
 8008524:	0800859f 	.word	0x0800859f
 8008528:	0800855b 	.word	0x0800855b
 800852c:	08008585 	.word	0x08008585
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b03      	cmp	r3, #3
 800853a:	d107      	bne.n	800854c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800853c:	f107 030a 	add.w	r3, r7, #10
 8008540:	2202      	movs	r2, #2
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 fd3d 	bl	8009fc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800854a:	e032      	b.n	80085b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f001 fcbb 	bl	8009eca <USBD_CtlError>
            ret = USBD_FAIL;
 8008554:	2303      	movs	r3, #3
 8008556:	75fb      	strb	r3, [r7, #23]
          break;
 8008558:	e02b      	b.n	80085b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b03      	cmp	r3, #3
 8008564:	d107      	bne.n	8008576 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008566:	f107 030d 	add.w	r3, r7, #13
 800856a:	2201      	movs	r2, #1
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f001 fd28 	bl	8009fc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008574:	e01d      	b.n	80085b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 fca6 	bl	8009eca <USBD_CtlError>
            ret = USBD_FAIL;
 800857e:	2303      	movs	r3, #3
 8008580:	75fb      	strb	r3, [r7, #23]
          break;
 8008582:	e016      	b.n	80085b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b03      	cmp	r3, #3
 800858e:	d00f      	beq.n	80085b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f001 fc99 	bl	8009eca <USBD_CtlError>
            ret = USBD_FAIL;
 8008598:	2303      	movs	r3, #3
 800859a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800859c:	e008      	b.n	80085b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 fc92 	bl	8009eca <USBD_CtlError>
          ret = USBD_FAIL;
 80085a6:	2303      	movs	r3, #3
 80085a8:	75fb      	strb	r3, [r7, #23]
          break;
 80085aa:	e002      	b.n	80085b2 <USBD_CDC_Setup+0x19e>
          break;
 80085ac:	bf00      	nop
 80085ae:	e008      	b.n	80085c2 <USBD_CDC_Setup+0x1ae>
          break;
 80085b0:	bf00      	nop
      }
      break;
 80085b2:	e006      	b.n	80085c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f001 fc87 	bl	8009eca <USBD_CtlError>
      ret = USBD_FAIL;
 80085bc:	2303      	movs	r3, #3
 80085be:	75fb      	strb	r3, [r7, #23]
      break;
 80085c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	32b0      	adds	r2, #176	@ 0xb0
 80085ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e065      	b.n	80086c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	32b0      	adds	r2, #176	@ 0xb0
 8008600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008604:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008606:	78fb      	ldrb	r3, [r7, #3]
 8008608:	f003 020f 	and.w	r2, r3, #15
 800860c:	6879      	ldr	r1, [r7, #4]
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	440b      	add	r3, r1
 8008618:	3318      	adds	r3, #24
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d02f      	beq.n	8008680 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	f003 020f 	and.w	r2, r3, #15
 8008626:	6879      	ldr	r1, [r7, #4]
 8008628:	4613      	mov	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	440b      	add	r3, r1
 8008632:	3318      	adds	r3, #24
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	78fb      	ldrb	r3, [r7, #3]
 8008638:	f003 010f 	and.w	r1, r3, #15
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	460b      	mov	r3, r1
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	440b      	add	r3, r1
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4403      	add	r3, r0
 8008648:	331c      	adds	r3, #28
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008650:	fb01 f303 	mul.w	r3, r1, r3
 8008654:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008656:	2b00      	cmp	r3, #0
 8008658:	d112      	bne.n	8008680 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800865a:	78fb      	ldrb	r3, [r7, #3]
 800865c:	f003 020f 	and.w	r2, r3, #15
 8008660:	6879      	ldr	r1, [r7, #4]
 8008662:	4613      	mov	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	440b      	add	r3, r1
 800866c:	3318      	adds	r3, #24
 800866e:	2200      	movs	r2, #0
 8008670:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008672:	78f9      	ldrb	r1, [r7, #3]
 8008674:	2300      	movs	r3, #0
 8008676:	2200      	movs	r2, #0
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f002 f9ea 	bl	800aa52 <USBD_LL_Transmit>
 800867e:	e01f      	b.n	80086c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2200      	movs	r2, #0
 8008684:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	33b0      	adds	r3, #176	@ 0xb0
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d010      	beq.n	80086c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	33b0      	adds	r3, #176	@ 0xb0
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80086bc:	78fa      	ldrb	r2, [r7, #3]
 80086be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b084      	sub	sp, #16
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	460b      	mov	r3, r1
 80086d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	32b0      	adds	r2, #176	@ 0xb0
 80086e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	32b0      	adds	r2, #176	@ 0xb0
 80086f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80086f8:	2303      	movs	r3, #3
 80086fa:	e01a      	b.n	8008732 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80086fc:	78fb      	ldrb	r3, [r7, #3]
 80086fe:	4619      	mov	r1, r3
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f002 f9e8 	bl	800aad6 <USBD_LL_GetRxDataSize>
 8008706:	4602      	mov	r2, r0
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	33b0      	adds	r3, #176	@ 0xb0
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800872c:	4611      	mov	r1, r2
 800872e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	32b0      	adds	r2, #176	@ 0xb0
 800874c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008750:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008758:	2303      	movs	r3, #3
 800875a:	e024      	b.n	80087a6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	33b0      	adds	r3, #176	@ 0xb0
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d019      	beq.n	80087a4 <USBD_CDC_EP0_RxReady+0x6a>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008776:	2bff      	cmp	r3, #255	@ 0xff
 8008778:	d014      	beq.n	80087a4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	33b0      	adds	r3, #176	@ 0xb0
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008792:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800879a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	22ff      	movs	r2, #255	@ 0xff
 80087a0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
	...

080087b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087b8:	2182      	movs	r1, #130	@ 0x82
 80087ba:	4818      	ldr	r0, [pc, #96]	@ (800881c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087bc:	f000 fd4f 	bl	800925e <USBD_GetEpDesc>
 80087c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80087c2:	2101      	movs	r1, #1
 80087c4:	4815      	ldr	r0, [pc, #84]	@ (800881c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087c6:	f000 fd4a 	bl	800925e <USBD_GetEpDesc>
 80087ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80087cc:	2181      	movs	r1, #129	@ 0x81
 80087ce:	4813      	ldr	r0, [pc, #76]	@ (800881c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087d0:	f000 fd45 	bl	800925e <USBD_GetEpDesc>
 80087d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d002      	beq.n	80087e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2210      	movs	r2, #16
 80087e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d006      	beq.n	80087f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087f0:	711a      	strb	r2, [r3, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d006      	beq.n	800880a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008804:	711a      	strb	r2, [r3, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2243      	movs	r2, #67	@ 0x43
 800880e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008810:	4b02      	ldr	r3, [pc, #8]	@ (800881c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008812:	4618      	mov	r0, r3
 8008814:	3718      	adds	r7, #24
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20000050 	.word	0x20000050

08008820 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008828:	2182      	movs	r1, #130	@ 0x82
 800882a:	4818      	ldr	r0, [pc, #96]	@ (800888c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800882c:	f000 fd17 	bl	800925e <USBD_GetEpDesc>
 8008830:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008832:	2101      	movs	r1, #1
 8008834:	4815      	ldr	r0, [pc, #84]	@ (800888c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008836:	f000 fd12 	bl	800925e <USBD_GetEpDesc>
 800883a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800883c:	2181      	movs	r1, #129	@ 0x81
 800883e:	4813      	ldr	r0, [pc, #76]	@ (800888c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008840:	f000 fd0d 	bl	800925e <USBD_GetEpDesc>
 8008844:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d002      	beq.n	8008852 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	2210      	movs	r2, #16
 8008850:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d006      	beq.n	8008866 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	2200      	movs	r2, #0
 800885c:	711a      	strb	r2, [r3, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	f042 0202 	orr.w	r2, r2, #2
 8008864:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d006      	beq.n	800887a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	711a      	strb	r2, [r3, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f042 0202 	orr.w	r2, r2, #2
 8008878:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2243      	movs	r2, #67	@ 0x43
 800887e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008880:	4b02      	ldr	r3, [pc, #8]	@ (800888c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008882:	4618      	mov	r0, r3
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	20000050 	.word	0x20000050

08008890 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008898:	2182      	movs	r1, #130	@ 0x82
 800889a:	4818      	ldr	r0, [pc, #96]	@ (80088fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800889c:	f000 fcdf 	bl	800925e <USBD_GetEpDesc>
 80088a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80088a2:	2101      	movs	r1, #1
 80088a4:	4815      	ldr	r0, [pc, #84]	@ (80088fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80088a6:	f000 fcda 	bl	800925e <USBD_GetEpDesc>
 80088aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80088ac:	2181      	movs	r1, #129	@ 0x81
 80088ae:	4813      	ldr	r0, [pc, #76]	@ (80088fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80088b0:	f000 fcd5 	bl	800925e <USBD_GetEpDesc>
 80088b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d002      	beq.n	80088c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	2210      	movs	r2, #16
 80088c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d006      	beq.n	80088d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088d0:	711a      	strb	r2, [r3, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d006      	beq.n	80088ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088e4:	711a      	strb	r2, [r3, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2243      	movs	r2, #67	@ 0x43
 80088ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80088f0:	4b02      	ldr	r3, [pc, #8]	@ (80088fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3718      	adds	r7, #24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	20000050 	.word	0x20000050

08008900 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	220a      	movs	r2, #10
 800890c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800890e:	4b03      	ldr	r3, [pc, #12]	@ (800891c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008910:	4618      	mov	r0, r3
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr
 800891c:	2000000c 	.word	0x2000000c

08008920 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008930:	2303      	movs	r3, #3
 8008932:	e009      	b.n	8008948 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	33b0      	adds	r3, #176	@ 0xb0
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	32b0      	adds	r2, #176	@ 0xb0
 800896a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008976:	2303      	movs	r3, #3
 8008978:	e008      	b.n	800898c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	371c      	adds	r7, #28
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	32b0      	adds	r2, #176	@ 0xb0
 80089ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e004      	b.n	80089c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
	...

080089d4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	32b0      	adds	r2, #176	@ 0xb0
 80089e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ea:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80089ec:	2301      	movs	r3, #1
 80089ee:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e025      	b.n	8008a46 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d11f      	bne.n	8008a44 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008a0c:	4b10      	ldr	r3, [pc, #64]	@ (8008a50 <USBD_CDC_TransmitPacket+0x7c>)
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	f003 020f 	and.w	r2, r3, #15
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4403      	add	r3, r0
 8008a26:	3318      	adds	r3, #24
 8008a28:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008a2a:	4b09      	ldr	r3, [pc, #36]	@ (8008a50 <USBD_CDC_TransmitPacket+0x7c>)
 8008a2c:	7819      	ldrb	r1, [r3, #0]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f002 f809 	bl	800aa52 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	20000093 	.word	0x20000093

08008a54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	32b0      	adds	r2, #176	@ 0xb0
 8008a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a6a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	32b0      	adds	r2, #176	@ 0xb0
 8008a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e018      	b.n	8008ab4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	7c1b      	ldrb	r3, [r3, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10a      	bne.n	8008aa0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8008abc <USBD_CDC_ReceivePacket+0x68>)
 8008a8c:	7819      	ldrb	r1, [r3, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 fffb 	bl	800aa94 <USBD_LL_PrepareReceive>
 8008a9e:	e008      	b.n	8008ab2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008aa0:	4b06      	ldr	r3, [pc, #24]	@ (8008abc <USBD_CDC_ReceivePacket+0x68>)
 8008aa2:	7819      	ldrb	r1, [r3, #0]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008aaa:	2340      	movs	r3, #64	@ 0x40
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f001 fff1 	bl	800aa94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	20000094 	.word	0x20000094

08008ac0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	4613      	mov	r3, r2
 8008acc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e01f      	b.n	8008b18 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	79fa      	ldrb	r2, [r7, #7]
 8008b0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f001 fe6b 	bl	800a7e8 <USBD_LL_Init>
 8008b12:	4603      	mov	r3, r0
 8008b14:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3718      	adds	r7, #24
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d101      	bne.n	8008b38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e025      	b.n	8008b84 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	32ae      	adds	r2, #174	@ 0xae
 8008b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00f      	beq.n	8008b74 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	32ae      	adds	r2, #174	@ 0xae
 8008b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b64:	f107 020e 	add.w	r2, r7, #14
 8008b68:	4610      	mov	r0, r2
 8008b6a:	4798      	blx	r3
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008b7a:	1c5a      	adds	r2, r3, #1
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f001 fe73 	bl	800a880 <USBD_LL_Start>
 8008b9a:	4603      	mov	r3, r0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008bac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d009      	beq.n	8008be8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	78fa      	ldrb	r2, [r7, #3]
 8008bde:	4611      	mov	r1, r2
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	4798      	blx	r3
 8008be4:	4603      	mov	r3, r0
 8008be6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	78fa      	ldrb	r2, [r7, #3]
 8008c0c:	4611      	mov	r1, r2
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	4798      	blx	r3
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b084      	sub	sp, #16
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f001 f90c 	bl	8009e56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008c5a:	f003 031f 	and.w	r3, r3, #31
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d01a      	beq.n	8008c98 <USBD_LL_SetupStage+0x72>
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d822      	bhi.n	8008cac <USBD_LL_SetupStage+0x86>
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d002      	beq.n	8008c70 <USBD_LL_SetupStage+0x4a>
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d00a      	beq.n	8008c84 <USBD_LL_SetupStage+0x5e>
 8008c6e:	e01d      	b.n	8008cac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fb63 	bl	8009344 <USBD_StdDevReq>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	73fb      	strb	r3, [r7, #15]
      break;
 8008c82:	e020      	b.n	8008cc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fbcb 	bl	8009428 <USBD_StdItfReq>
 8008c92:	4603      	mov	r3, r0
 8008c94:	73fb      	strb	r3, [r7, #15]
      break;
 8008c96:	e016      	b.n	8008cc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fc2d 	bl	8009500 <USBD_StdEPReq>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8008caa:	e00c      	b.n	8008cc6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008cb2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f001 fe40 	bl	800a940 <USBD_LL_StallEP>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8008cc4:	bf00      	nop
  }

  return ret;
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008ce2:	7afb      	ldrb	r3, [r7, #11]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d16e      	bne.n	8008dc6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008cee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	f040 8098 	bne.w	8008e2c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	689a      	ldr	r2, [r3, #8]
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d913      	bls.n	8008d30 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	689a      	ldr	r2, [r3, #8]
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	1ad2      	subs	r2, r2, r3
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	68da      	ldr	r2, [r3, #12]
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	bf28      	it	cs
 8008d22:	4613      	movcs	r3, r2
 8008d24:	461a      	mov	r2, r3
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f001 f994 	bl	800a056 <USBD_CtlContinueRx>
 8008d2e:	e07d      	b.n	8008e2c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d36:	f003 031f 	and.w	r3, r3, #31
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d014      	beq.n	8008d68 <USBD_LL_DataOutStage+0x98>
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d81d      	bhi.n	8008d7e <USBD_LL_DataOutStage+0xae>
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <USBD_LL_DataOutStage+0x7c>
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d003      	beq.n	8008d52 <USBD_LL_DataOutStage+0x82>
 8008d4a:	e018      	b.n	8008d7e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	75bb      	strb	r3, [r7, #22]
            break;
 8008d50:	e018      	b.n	8008d84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f000 fa64 	bl	800922a <USBD_CoreFindIF>
 8008d62:	4603      	mov	r3, r0
 8008d64:	75bb      	strb	r3, [r7, #22]
            break;
 8008d66:	e00d      	b.n	8008d84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	4619      	mov	r1, r3
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f000 fa66 	bl	8009244 <USBD_CoreFindEP>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	75bb      	strb	r3, [r7, #22]
            break;
 8008d7c:	e002      	b.n	8008d84 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	75bb      	strb	r3, [r7, #22]
            break;
 8008d82:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008d84:	7dbb      	ldrb	r3, [r7, #22]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d119      	bne.n	8008dbe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	d113      	bne.n	8008dbe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008d96:	7dba      	ldrb	r2, [r7, #22]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	32ae      	adds	r2, #174	@ 0xae
 8008d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00b      	beq.n	8008dbe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008da6:	7dba      	ldrb	r2, [r7, #22]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008dae:	7dba      	ldrb	r2, [r7, #22]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	32ae      	adds	r2, #174	@ 0xae
 8008db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f001 f95a 	bl	800a078 <USBD_CtlSendStatus>
 8008dc4:	e032      	b.n	8008e2c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008dc6:	7afb      	ldrb	r3, [r7, #11]
 8008dc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	4619      	mov	r1, r3
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f000 fa37 	bl	8009244 <USBD_CoreFindEP>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008dda:	7dbb      	ldrb	r3, [r7, #22]
 8008ddc:	2bff      	cmp	r3, #255	@ 0xff
 8008dde:	d025      	beq.n	8008e2c <USBD_LL_DataOutStage+0x15c>
 8008de0:	7dbb      	ldrb	r3, [r7, #22]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d122      	bne.n	8008e2c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d117      	bne.n	8008e22 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008df2:	7dba      	ldrb	r2, [r7, #22]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	32ae      	adds	r2, #174	@ 0xae
 8008df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00f      	beq.n	8008e22 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008e02:	7dba      	ldrb	r2, [r7, #22]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008e0a:	7dba      	ldrb	r2, [r7, #22]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	32ae      	adds	r2, #174	@ 0xae
 8008e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	7afa      	ldrb	r2, [r7, #11]
 8008e18:	4611      	mov	r1, r2
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	4798      	blx	r3
 8008e1e:	4603      	mov	r3, r0
 8008e20:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008e22:	7dfb      	ldrb	r3, [r7, #23]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008e28:	7dfb      	ldrb	r3, [r7, #23]
 8008e2a:	e000      	b.n	8008e2e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3718      	adds	r7, #24
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b086      	sub	sp, #24
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	60f8      	str	r0, [r7, #12]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	607a      	str	r2, [r7, #4]
 8008e42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008e44:	7afb      	ldrb	r3, [r7, #11]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d16f      	bne.n	8008f2a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3314      	adds	r3, #20
 8008e4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d15a      	bne.n	8008f10 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	689a      	ldr	r2, [r3, #8]
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d914      	bls.n	8008e90 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	689a      	ldr	r2, [r3, #8]
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	1ad2      	subs	r2, r2, r3
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	6879      	ldr	r1, [r7, #4]
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f001 f8bc 	bl	8009ffa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e82:	2300      	movs	r3, #0
 8008e84:	2200      	movs	r2, #0
 8008e86:	2100      	movs	r1, #0
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f001 fe03 	bl	800aa94 <USBD_LL_PrepareReceive>
 8008e8e:	e03f      	b.n	8008f10 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	68da      	ldr	r2, [r3, #12]
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d11c      	bne.n	8008ed6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d316      	bcc.n	8008ed6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d20f      	bcs.n	8008ed6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2100      	movs	r1, #0
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f001 f89d 	bl	8009ffa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ec8:	2300      	movs	r3, #0
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2100      	movs	r1, #0
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f001 fde0 	bl	800aa94 <USBD_LL_PrepareReceive>
 8008ed4:	e01c      	b.n	8008f10 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d10f      	bne.n	8008f02 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d009      	beq.n	8008f02 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f02:	2180      	movs	r1, #128	@ 0x80
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f001 fd1b 	bl	800a940 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f001 f8c7 	bl	800a09e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d03a      	beq.n	8008f90 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f7ff fe42 	bl	8008ba4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008f28:	e032      	b.n	8008f90 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008f2a:	7afb      	ldrb	r3, [r7, #11]
 8008f2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	4619      	mov	r1, r3
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 f985 	bl	8009244 <USBD_CoreFindEP>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f3e:	7dfb      	ldrb	r3, [r7, #23]
 8008f40:	2bff      	cmp	r3, #255	@ 0xff
 8008f42:	d025      	beq.n	8008f90 <USBD_LL_DataInStage+0x15a>
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d122      	bne.n	8008f90 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d11c      	bne.n	8008f90 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008f56:	7dfa      	ldrb	r2, [r7, #23]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	32ae      	adds	r2, #174	@ 0xae
 8008f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d014      	beq.n	8008f90 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008f66:	7dfa      	ldrb	r2, [r7, #23]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008f6e:	7dfa      	ldrb	r2, [r7, #23]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	32ae      	adds	r2, #174	@ 0xae
 8008f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f78:	695b      	ldr	r3, [r3, #20]
 8008f7a:	7afa      	ldrb	r2, [r7, #11]
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	4798      	blx	r3
 8008f82:	4603      	mov	r3, r0
 8008f84:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008f86:	7dbb      	ldrb	r3, [r7, #22]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d001      	beq.n	8008f90 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008f8c:	7dbb      	ldrb	r3, [r7, #22]
 8008f8e:	e000      	b.n	8008f92 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d014      	beq.n	8009000 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00e      	beq.n	8009000 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	6852      	ldr	r2, [r2, #4]
 8008fee:	b2d2      	uxtb	r2, r2
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	4798      	blx	r3
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d001      	beq.n	8009000 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009000:	2340      	movs	r3, #64	@ 0x40
 8009002:	2200      	movs	r2, #0
 8009004:	2100      	movs	r1, #0
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f001 fc55 	bl	800a8b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2240      	movs	r2, #64	@ 0x40
 8009018:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800901c:	2340      	movs	r3, #64	@ 0x40
 800901e:	2200      	movs	r2, #0
 8009020:	2180      	movs	r1, #128	@ 0x80
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f001 fc47 	bl	800a8b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2240      	movs	r2, #64	@ 0x40
 8009032:	621a      	str	r2, [r3, #32]

  return ret;
 8009034:	7bfb      	ldrb	r3, [r7, #15]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	460b      	mov	r3, r1
 8009048:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	78fa      	ldrb	r2, [r7, #3]
 800904e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800905e:	b480      	push	{r7}
 8009060:	b083      	sub	sp, #12
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b04      	cmp	r3, #4
 8009070:	d006      	beq.n	8009080 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009078:	b2da      	uxtb	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2204      	movs	r2, #4
 8009084:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009096:	b480      	push	{r7}
 8009098:	b083      	sub	sp, #12
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b04      	cmp	r3, #4
 80090a8:	d106      	bne.n	80090b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80090b0:	b2da      	uxtb	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d110      	bne.n	80090fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00b      	beq.n	80090fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ea:	69db      	ldr	r3, [r3, #28]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d005      	beq.n	80090fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090f6:	69db      	ldr	r3, [r3, #28]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b082      	sub	sp, #8
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	460b      	mov	r3, r1
 8009110:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	32ae      	adds	r2, #174	@ 0xae
 800911c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d101      	bne.n	8009128 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009124:	2303      	movs	r3, #3
 8009126:	e01c      	b.n	8009162 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b03      	cmp	r3, #3
 8009132:	d115      	bne.n	8009160 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	32ae      	adds	r2, #174	@ 0xae
 800913e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009142:	6a1b      	ldr	r3, [r3, #32]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00b      	beq.n	8009160 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	32ae      	adds	r2, #174	@ 0xae
 8009152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009156:	6a1b      	ldr	r3, [r3, #32]
 8009158:	78fa      	ldrb	r2, [r7, #3]
 800915a:	4611      	mov	r1, r2
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b082      	sub	sp, #8
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	460b      	mov	r3, r1
 8009174:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	32ae      	adds	r2, #174	@ 0xae
 8009180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009188:	2303      	movs	r3, #3
 800918a:	e01c      	b.n	80091c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b03      	cmp	r3, #3
 8009196:	d115      	bne.n	80091c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	32ae      	adds	r2, #174	@ 0xae
 80091a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00b      	beq.n	80091c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	32ae      	adds	r2, #174	@ 0xae
 80091b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091bc:	78fa      	ldrb	r2, [r7, #3]
 80091be:	4611      	mov	r1, r2
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80091ce:	b480      	push	{r7}
 80091d0:	b083      	sub	sp, #12
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80091ec:	2300      	movs	r3, #0
 80091ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00e      	beq.n	8009220 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	6852      	ldr	r2, [r2, #4]
 800920e:	b2d2      	uxtb	r2, r2
 8009210:	4611      	mov	r1, r2
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	4798      	blx	r3
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d001      	beq.n	8009220 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800921c:	2303      	movs	r3, #3
 800921e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009220:	7bfb      	ldrb	r3, [r7, #15]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800922a:	b480      	push	{r7}
 800922c:	b083      	sub	sp, #12
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	460b      	mov	r3, r1
 8009234:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009236:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009238:	4618      	mov	r0, r3
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009250:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009252:	4618      	mov	r0, r3
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b086      	sub	sp, #24
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	460b      	mov	r3, r1
 8009268:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009272:	2300      	movs	r3, #0
 8009274:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	885b      	ldrh	r3, [r3, #2]
 800927a:	b29b      	uxth	r3, r3
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	7812      	ldrb	r2, [r2, #0]
 8009280:	4293      	cmp	r3, r2
 8009282:	d91f      	bls.n	80092c4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800928a:	e013      	b.n	80092b4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800928c:	f107 030a 	add.w	r3, r7, #10
 8009290:	4619      	mov	r1, r3
 8009292:	6978      	ldr	r0, [r7, #20]
 8009294:	f000 f81b 	bl	80092ce <USBD_GetNextDesc>
 8009298:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	785b      	ldrb	r3, [r3, #1]
 800929e:	2b05      	cmp	r3, #5
 80092a0:	d108      	bne.n	80092b4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	789b      	ldrb	r3, [r3, #2]
 80092aa:	78fa      	ldrb	r2, [r7, #3]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d008      	beq.n	80092c2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80092b0:	2300      	movs	r3, #0
 80092b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	885b      	ldrh	r3, [r3, #2]
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	897b      	ldrh	r3, [r7, #10]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d8e5      	bhi.n	800928c <USBD_GetEpDesc+0x2e>
 80092c0:	e000      	b.n	80092c4 <USBD_GetEpDesc+0x66>
          break;
 80092c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80092c4:	693b      	ldr	r3, [r7, #16]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b085      	sub	sp, #20
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	7812      	ldrb	r2, [r2, #0]
 80092e4:	4413      	add	r3, r2
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	461a      	mov	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4413      	add	r3, r2
 80092f6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80092f8:	68fb      	ldr	r3, [r7, #12]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009306:	b480      	push	{r7}
 8009308:	b087      	sub	sp, #28
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	3301      	adds	r3, #1
 800931c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009324:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009328:	021b      	lsls	r3, r3, #8
 800932a:	b21a      	sxth	r2, r3
 800932c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009330:	4313      	orrs	r3, r2
 8009332:	b21b      	sxth	r3, r3
 8009334:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009336:	89fb      	ldrh	r3, [r7, #14]
}
 8009338:	4618      	mov	r0, r3
 800933a:	371c      	adds	r7, #28
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800935a:	2b40      	cmp	r3, #64	@ 0x40
 800935c:	d005      	beq.n	800936a <USBD_StdDevReq+0x26>
 800935e:	2b40      	cmp	r3, #64	@ 0x40
 8009360:	d857      	bhi.n	8009412 <USBD_StdDevReq+0xce>
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00f      	beq.n	8009386 <USBD_StdDevReq+0x42>
 8009366:	2b20      	cmp	r3, #32
 8009368:	d153      	bne.n	8009412 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	32ae      	adds	r2, #174	@ 0xae
 8009374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	6839      	ldr	r1, [r7, #0]
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	4798      	blx	r3
 8009380:	4603      	mov	r3, r0
 8009382:	73fb      	strb	r3, [r7, #15]
      break;
 8009384:	e04a      	b.n	800941c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	785b      	ldrb	r3, [r3, #1]
 800938a:	2b09      	cmp	r3, #9
 800938c:	d83b      	bhi.n	8009406 <USBD_StdDevReq+0xc2>
 800938e:	a201      	add	r2, pc, #4	@ (adr r2, 8009394 <USBD_StdDevReq+0x50>)
 8009390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009394:	080093e9 	.word	0x080093e9
 8009398:	080093fd 	.word	0x080093fd
 800939c:	08009407 	.word	0x08009407
 80093a0:	080093f3 	.word	0x080093f3
 80093a4:	08009407 	.word	0x08009407
 80093a8:	080093c7 	.word	0x080093c7
 80093ac:	080093bd 	.word	0x080093bd
 80093b0:	08009407 	.word	0x08009407
 80093b4:	080093df 	.word	0x080093df
 80093b8:	080093d1 	.word	0x080093d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fa3c 	bl	800983c <USBD_GetDescriptor>
          break;
 80093c4:	e024      	b.n	8009410 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fba1 	bl	8009b10 <USBD_SetAddress>
          break;
 80093ce:	e01f      	b.n	8009410 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fbe0 	bl	8009b98 <USBD_SetConfig>
 80093d8:	4603      	mov	r3, r0
 80093da:	73fb      	strb	r3, [r7, #15]
          break;
 80093dc:	e018      	b.n	8009410 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fc83 	bl	8009cec <USBD_GetConfig>
          break;
 80093e6:	e013      	b.n	8009410 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fcb4 	bl	8009d58 <USBD_GetStatus>
          break;
 80093f0:	e00e      	b.n	8009410 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fce3 	bl	8009dc0 <USBD_SetFeature>
          break;
 80093fa:	e009      	b.n	8009410 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80093fc:	6839      	ldr	r1, [r7, #0]
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fd07 	bl	8009e12 <USBD_ClrFeature>
          break;
 8009404:	e004      	b.n	8009410 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fd5e 	bl	8009eca <USBD_CtlError>
          break;
 800940e:	bf00      	nop
      }
      break;
 8009410:	e004      	b.n	800941c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fd58 	bl	8009eca <USBD_CtlError>
      break;
 800941a:	bf00      	nop
  }

  return ret;
 800941c:	7bfb      	ldrb	r3, [r7, #15]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop

08009428 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800943e:	2b40      	cmp	r3, #64	@ 0x40
 8009440:	d005      	beq.n	800944e <USBD_StdItfReq+0x26>
 8009442:	2b40      	cmp	r3, #64	@ 0x40
 8009444:	d852      	bhi.n	80094ec <USBD_StdItfReq+0xc4>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <USBD_StdItfReq+0x26>
 800944a:	2b20      	cmp	r3, #32
 800944c:	d14e      	bne.n	80094ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009454:	b2db      	uxtb	r3, r3
 8009456:	3b01      	subs	r3, #1
 8009458:	2b02      	cmp	r3, #2
 800945a:	d840      	bhi.n	80094de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	889b      	ldrh	r3, [r3, #4]
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2b01      	cmp	r3, #1
 8009464:	d836      	bhi.n	80094d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	889b      	ldrh	r3, [r3, #4]
 800946a:	b2db      	uxtb	r3, r3
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7ff fedb 	bl	800922a <USBD_CoreFindIF>
 8009474:	4603      	mov	r3, r0
 8009476:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009478:	7bbb      	ldrb	r3, [r7, #14]
 800947a:	2bff      	cmp	r3, #255	@ 0xff
 800947c:	d01d      	beq.n	80094ba <USBD_StdItfReq+0x92>
 800947e:	7bbb      	ldrb	r3, [r7, #14]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d11a      	bne.n	80094ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009484:	7bba      	ldrb	r2, [r7, #14]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	32ae      	adds	r2, #174	@ 0xae
 800948a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00f      	beq.n	80094b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009494:	7bba      	ldrb	r2, [r7, #14]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800949c:	7bba      	ldrb	r2, [r7, #14]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	32ae      	adds	r2, #174	@ 0xae
 80094a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	4798      	blx	r3
 80094ae:	4603      	mov	r3, r0
 80094b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80094b2:	e004      	b.n	80094be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80094b4:	2303      	movs	r3, #3
 80094b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80094b8:	e001      	b.n	80094be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80094ba:	2303      	movs	r3, #3
 80094bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	88db      	ldrh	r3, [r3, #6]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d110      	bne.n	80094e8 <USBD_StdItfReq+0xc0>
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10d      	bne.n	80094e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fdd3 	bl	800a078 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80094d2:	e009      	b.n	80094e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fcf7 	bl	8009eca <USBD_CtlError>
          break;
 80094dc:	e004      	b.n	80094e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fcf2 	bl	8009eca <USBD_CtlError>
          break;
 80094e6:	e000      	b.n	80094ea <USBD_StdItfReq+0xc2>
          break;
 80094e8:	bf00      	nop
      }
      break;
 80094ea:	e004      	b.n	80094f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fceb 	bl	8009eca <USBD_CtlError>
      break;
 80094f4:	bf00      	nop
  }

  return ret;
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	889b      	ldrh	r3, [r3, #4]
 8009512:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800951c:	2b40      	cmp	r3, #64	@ 0x40
 800951e:	d007      	beq.n	8009530 <USBD_StdEPReq+0x30>
 8009520:	2b40      	cmp	r3, #64	@ 0x40
 8009522:	f200 817f 	bhi.w	8009824 <USBD_StdEPReq+0x324>
 8009526:	2b00      	cmp	r3, #0
 8009528:	d02a      	beq.n	8009580 <USBD_StdEPReq+0x80>
 800952a:	2b20      	cmp	r3, #32
 800952c:	f040 817a 	bne.w	8009824 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009530:	7bbb      	ldrb	r3, [r7, #14]
 8009532:	4619      	mov	r1, r3
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7ff fe85 	bl	8009244 <USBD_CoreFindEP>
 800953a:	4603      	mov	r3, r0
 800953c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800953e:	7b7b      	ldrb	r3, [r7, #13]
 8009540:	2bff      	cmp	r3, #255	@ 0xff
 8009542:	f000 8174 	beq.w	800982e <USBD_StdEPReq+0x32e>
 8009546:	7b7b      	ldrb	r3, [r7, #13]
 8009548:	2b00      	cmp	r3, #0
 800954a:	f040 8170 	bne.w	800982e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800954e:	7b7a      	ldrb	r2, [r7, #13]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009556:	7b7a      	ldrb	r2, [r7, #13]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	32ae      	adds	r2, #174	@ 0xae
 800955c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 8163 	beq.w	800982e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009568:	7b7a      	ldrb	r2, [r7, #13]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	32ae      	adds	r2, #174	@ 0xae
 800956e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	4798      	blx	r3
 800957a:	4603      	mov	r3, r0
 800957c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800957e:	e156      	b.n	800982e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	785b      	ldrb	r3, [r3, #1]
 8009584:	2b03      	cmp	r3, #3
 8009586:	d008      	beq.n	800959a <USBD_StdEPReq+0x9a>
 8009588:	2b03      	cmp	r3, #3
 800958a:	f300 8145 	bgt.w	8009818 <USBD_StdEPReq+0x318>
 800958e:	2b00      	cmp	r3, #0
 8009590:	f000 809b 	beq.w	80096ca <USBD_StdEPReq+0x1ca>
 8009594:	2b01      	cmp	r3, #1
 8009596:	d03c      	beq.n	8009612 <USBD_StdEPReq+0x112>
 8009598:	e13e      	b.n	8009818 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d002      	beq.n	80095ac <USBD_StdEPReq+0xac>
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	d016      	beq.n	80095d8 <USBD_StdEPReq+0xd8>
 80095aa:	e02c      	b.n	8009606 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095ac:	7bbb      	ldrb	r3, [r7, #14]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00d      	beq.n	80095ce <USBD_StdEPReq+0xce>
 80095b2:	7bbb      	ldrb	r3, [r7, #14]
 80095b4:	2b80      	cmp	r3, #128	@ 0x80
 80095b6:	d00a      	beq.n	80095ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80095b8:	7bbb      	ldrb	r3, [r7, #14]
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f001 f9bf 	bl	800a940 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80095c2:	2180      	movs	r1, #128	@ 0x80
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f001 f9bb 	bl	800a940 <USBD_LL_StallEP>
 80095ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095cc:	e020      	b.n	8009610 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80095ce:	6839      	ldr	r1, [r7, #0]
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fc7a 	bl	8009eca <USBD_CtlError>
              break;
 80095d6:	e01b      	b.n	8009610 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	885b      	ldrh	r3, [r3, #2]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10e      	bne.n	80095fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00b      	beq.n	80095fe <USBD_StdEPReq+0xfe>
 80095e6:	7bbb      	ldrb	r3, [r7, #14]
 80095e8:	2b80      	cmp	r3, #128	@ 0x80
 80095ea:	d008      	beq.n	80095fe <USBD_StdEPReq+0xfe>
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	88db      	ldrh	r3, [r3, #6]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d104      	bne.n	80095fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80095f4:	7bbb      	ldrb	r3, [r7, #14]
 80095f6:	4619      	mov	r1, r3
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f001 f9a1 	bl	800a940 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fd3a 	bl	800a078 <USBD_CtlSendStatus>

              break;
 8009604:	e004      	b.n	8009610 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fc5e 	bl	8009eca <USBD_CtlError>
              break;
 800960e:	bf00      	nop
          }
          break;
 8009610:	e107      	b.n	8009822 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b02      	cmp	r3, #2
 800961c:	d002      	beq.n	8009624 <USBD_StdEPReq+0x124>
 800961e:	2b03      	cmp	r3, #3
 8009620:	d016      	beq.n	8009650 <USBD_StdEPReq+0x150>
 8009622:	e04b      	b.n	80096bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00d      	beq.n	8009646 <USBD_StdEPReq+0x146>
 800962a:	7bbb      	ldrb	r3, [r7, #14]
 800962c:	2b80      	cmp	r3, #128	@ 0x80
 800962e:	d00a      	beq.n	8009646 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009630:	7bbb      	ldrb	r3, [r7, #14]
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f001 f983 	bl	800a940 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800963a:	2180      	movs	r1, #128	@ 0x80
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f001 f97f 	bl	800a940 <USBD_LL_StallEP>
 8009642:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009644:	e040      	b.n	80096c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fc3e 	bl	8009eca <USBD_CtlError>
              break;
 800964e:	e03b      	b.n	80096c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	885b      	ldrh	r3, [r3, #2]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d136      	bne.n	80096c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009658:	7bbb      	ldrb	r3, [r7, #14]
 800965a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800965e:	2b00      	cmp	r3, #0
 8009660:	d004      	beq.n	800966c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009662:	7bbb      	ldrb	r3, [r7, #14]
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f001 f989 	bl	800a97e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fd03 	bl	800a078 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009672:	7bbb      	ldrb	r3, [r7, #14]
 8009674:	4619      	mov	r1, r3
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7ff fde4 	bl	8009244 <USBD_CoreFindEP>
 800967c:	4603      	mov	r3, r0
 800967e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009680:	7b7b      	ldrb	r3, [r7, #13]
 8009682:	2bff      	cmp	r3, #255	@ 0xff
 8009684:	d01f      	beq.n	80096c6 <USBD_StdEPReq+0x1c6>
 8009686:	7b7b      	ldrb	r3, [r7, #13]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d11c      	bne.n	80096c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800968c:	7b7a      	ldrb	r2, [r7, #13]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009694:	7b7a      	ldrb	r2, [r7, #13]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	32ae      	adds	r2, #174	@ 0xae
 800969a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d010      	beq.n	80096c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80096a4:	7b7a      	ldrb	r2, [r7, #13]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	32ae      	adds	r2, #174	@ 0xae
 80096aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	4798      	blx	r3
 80096b6:	4603      	mov	r3, r0
 80096b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80096ba:	e004      	b.n	80096c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fc03 	bl	8009eca <USBD_CtlError>
              break;
 80096c4:	e000      	b.n	80096c8 <USBD_StdEPReq+0x1c8>
              break;
 80096c6:	bf00      	nop
          }
          break;
 80096c8:	e0ab      	b.n	8009822 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d002      	beq.n	80096dc <USBD_StdEPReq+0x1dc>
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d032      	beq.n	8009740 <USBD_StdEPReq+0x240>
 80096da:	e097      	b.n	800980c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d007      	beq.n	80096f2 <USBD_StdEPReq+0x1f2>
 80096e2:	7bbb      	ldrb	r3, [r7, #14]
 80096e4:	2b80      	cmp	r3, #128	@ 0x80
 80096e6:	d004      	beq.n	80096f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fbed 	bl	8009eca <USBD_CtlError>
                break;
 80096f0:	e091      	b.n	8009816 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	da0b      	bge.n	8009712 <USBD_StdEPReq+0x212>
 80096fa:	7bbb      	ldrb	r3, [r7, #14]
 80096fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009700:	4613      	mov	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4413      	add	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	3310      	adds	r3, #16
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	4413      	add	r3, r2
 800970e:	3304      	adds	r3, #4
 8009710:	e00b      	b.n	800972a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009712:	7bbb      	ldrb	r3, [r7, #14]
 8009714:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009718:	4613      	mov	r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4413      	add	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	4413      	add	r3, r2
 8009728:	3304      	adds	r3, #4
 800972a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	2200      	movs	r2, #0
 8009730:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	2202      	movs	r2, #2
 8009736:	4619      	mov	r1, r3
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fc43 	bl	8009fc4 <USBD_CtlSendData>
              break;
 800973e:	e06a      	b.n	8009816 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009744:	2b00      	cmp	r3, #0
 8009746:	da11      	bge.n	800976c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009748:	7bbb      	ldrb	r3, [r7, #14]
 800974a:	f003 020f 	and.w	r2, r3, #15
 800974e:	6879      	ldr	r1, [r7, #4]
 8009750:	4613      	mov	r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4413      	add	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	440b      	add	r3, r1
 800975a:	3324      	adds	r3, #36	@ 0x24
 800975c:	881b      	ldrh	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d117      	bne.n	8009792 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fbb0 	bl	8009eca <USBD_CtlError>
                  break;
 800976a:	e054      	b.n	8009816 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800976c:	7bbb      	ldrb	r3, [r7, #14]
 800976e:	f003 020f 	and.w	r2, r3, #15
 8009772:	6879      	ldr	r1, [r7, #4]
 8009774:	4613      	mov	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	440b      	add	r3, r1
 800977e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009782:	881b      	ldrh	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d104      	bne.n	8009792 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009788:	6839      	ldr	r1, [r7, #0]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fb9d 	bl	8009eca <USBD_CtlError>
                  break;
 8009790:	e041      	b.n	8009816 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009792:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009796:	2b00      	cmp	r3, #0
 8009798:	da0b      	bge.n	80097b2 <USBD_StdEPReq+0x2b2>
 800979a:	7bbb      	ldrb	r3, [r7, #14]
 800979c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097a0:	4613      	mov	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	4413      	add	r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	3310      	adds	r3, #16
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	4413      	add	r3, r2
 80097ae:	3304      	adds	r3, #4
 80097b0:	e00b      	b.n	80097ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097b2:	7bbb      	ldrb	r3, [r7, #14]
 80097b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097b8:	4613      	mov	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	4413      	add	r3, r2
 80097c8:	3304      	adds	r3, #4
 80097ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d002      	beq.n	80097d8 <USBD_StdEPReq+0x2d8>
 80097d2:	7bbb      	ldrb	r3, [r7, #14]
 80097d4:	2b80      	cmp	r3, #128	@ 0x80
 80097d6:	d103      	bne.n	80097e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	2200      	movs	r2, #0
 80097dc:	601a      	str	r2, [r3, #0]
 80097de:	e00e      	b.n	80097fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80097e0:	7bbb      	ldrb	r3, [r7, #14]
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 f8e9 	bl	800a9bc <USBD_LL_IsStallEP>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d003      	beq.n	80097f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	2201      	movs	r2, #1
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	e002      	b.n	80097fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2200      	movs	r2, #0
 80097fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	2202      	movs	r2, #2
 8009802:	4619      	mov	r1, r3
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 fbdd 	bl	8009fc4 <USBD_CtlSendData>
              break;
 800980a:	e004      	b.n	8009816 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fb5b 	bl	8009eca <USBD_CtlError>
              break;
 8009814:	bf00      	nop
          }
          break;
 8009816:	e004      	b.n	8009822 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fb55 	bl	8009eca <USBD_CtlError>
          break;
 8009820:	bf00      	nop
      }
      break;
 8009822:	e005      	b.n	8009830 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fb4f 	bl	8009eca <USBD_CtlError>
      break;
 800982c:	e000      	b.n	8009830 <USBD_StdEPReq+0x330>
      break;
 800982e:	bf00      	nop
  }

  return ret;
 8009830:	7bfb      	ldrb	r3, [r7, #15]
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
	...

0800983c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009846:	2300      	movs	r3, #0
 8009848:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800984a:	2300      	movs	r3, #0
 800984c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	885b      	ldrh	r3, [r3, #2]
 8009856:	0a1b      	lsrs	r3, r3, #8
 8009858:	b29b      	uxth	r3, r3
 800985a:	3b01      	subs	r3, #1
 800985c:	2b06      	cmp	r3, #6
 800985e:	f200 8128 	bhi.w	8009ab2 <USBD_GetDescriptor+0x276>
 8009862:	a201      	add	r2, pc, #4	@ (adr r2, 8009868 <USBD_GetDescriptor+0x2c>)
 8009864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009868:	08009885 	.word	0x08009885
 800986c:	0800989d 	.word	0x0800989d
 8009870:	080098dd 	.word	0x080098dd
 8009874:	08009ab3 	.word	0x08009ab3
 8009878:	08009ab3 	.word	0x08009ab3
 800987c:	08009a53 	.word	0x08009a53
 8009880:	08009a7f 	.word	0x08009a7f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	7c12      	ldrb	r2, [r2, #16]
 8009890:	f107 0108 	add.w	r1, r7, #8
 8009894:	4610      	mov	r0, r2
 8009896:	4798      	blx	r3
 8009898:	60f8      	str	r0, [r7, #12]
      break;
 800989a:	e112      	b.n	8009ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	7c1b      	ldrb	r3, [r3, #16]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10d      	bne.n	80098c0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ac:	f107 0208 	add.w	r2, r7, #8
 80098b0:	4610      	mov	r0, r2
 80098b2:	4798      	blx	r3
 80098b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3301      	adds	r3, #1
 80098ba:	2202      	movs	r2, #2
 80098bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80098be:	e100      	b.n	8009ac2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c8:	f107 0208 	add.w	r2, r7, #8
 80098cc:	4610      	mov	r0, r2
 80098ce:	4798      	blx	r3
 80098d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	3301      	adds	r3, #1
 80098d6:	2202      	movs	r2, #2
 80098d8:	701a      	strb	r2, [r3, #0]
      break;
 80098da:	e0f2      	b.n	8009ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	885b      	ldrh	r3, [r3, #2]
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	2b05      	cmp	r3, #5
 80098e4:	f200 80ac 	bhi.w	8009a40 <USBD_GetDescriptor+0x204>
 80098e8:	a201      	add	r2, pc, #4	@ (adr r2, 80098f0 <USBD_GetDescriptor+0xb4>)
 80098ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ee:	bf00      	nop
 80098f0:	08009909 	.word	0x08009909
 80098f4:	0800993d 	.word	0x0800993d
 80098f8:	08009971 	.word	0x08009971
 80098fc:	080099a5 	.word	0x080099a5
 8009900:	080099d9 	.word	0x080099d9
 8009904:	08009a0d 	.word	0x08009a0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00b      	beq.n	800992c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	7c12      	ldrb	r2, [r2, #16]
 8009920:	f107 0108 	add.w	r1, r7, #8
 8009924:	4610      	mov	r0, r2
 8009926:	4798      	blx	r3
 8009928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800992a:	e091      	b.n	8009a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800992c:	6839      	ldr	r1, [r7, #0]
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 facb 	bl	8009eca <USBD_CtlError>
            err++;
 8009934:	7afb      	ldrb	r3, [r7, #11]
 8009936:	3301      	adds	r3, #1
 8009938:	72fb      	strb	r3, [r7, #11]
          break;
 800993a:	e089      	b.n	8009a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00b      	beq.n	8009960 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	7c12      	ldrb	r2, [r2, #16]
 8009954:	f107 0108 	add.w	r1, r7, #8
 8009958:	4610      	mov	r0, r2
 800995a:	4798      	blx	r3
 800995c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800995e:	e077      	b.n	8009a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fab1 	bl	8009eca <USBD_CtlError>
            err++;
 8009968:	7afb      	ldrb	r3, [r7, #11]
 800996a:	3301      	adds	r3, #1
 800996c:	72fb      	strb	r3, [r7, #11]
          break;
 800996e:	e06f      	b.n	8009a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00b      	beq.n	8009994 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	7c12      	ldrb	r2, [r2, #16]
 8009988:	f107 0108 	add.w	r1, r7, #8
 800998c:	4610      	mov	r0, r2
 800998e:	4798      	blx	r3
 8009990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009992:	e05d      	b.n	8009a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fa97 	bl	8009eca <USBD_CtlError>
            err++;
 800999c:	7afb      	ldrb	r3, [r7, #11]
 800999e:	3301      	adds	r3, #1
 80099a0:	72fb      	strb	r3, [r7, #11]
          break;
 80099a2:	e055      	b.n	8009a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00b      	beq.n	80099c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	7c12      	ldrb	r2, [r2, #16]
 80099bc:	f107 0108 	add.w	r1, r7, #8
 80099c0:	4610      	mov	r0, r2
 80099c2:	4798      	blx	r3
 80099c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099c6:	e043      	b.n	8009a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fa7d 	bl	8009eca <USBD_CtlError>
            err++;
 80099d0:	7afb      	ldrb	r3, [r7, #11]
 80099d2:	3301      	adds	r3, #1
 80099d4:	72fb      	strb	r3, [r7, #11]
          break;
 80099d6:	e03b      	b.n	8009a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099de:	695b      	ldr	r3, [r3, #20]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00b      	beq.n	80099fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	7c12      	ldrb	r2, [r2, #16]
 80099f0:	f107 0108 	add.w	r1, r7, #8
 80099f4:	4610      	mov	r0, r2
 80099f6:	4798      	blx	r3
 80099f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099fa:	e029      	b.n	8009a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099fc:	6839      	ldr	r1, [r7, #0]
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 fa63 	bl	8009eca <USBD_CtlError>
            err++;
 8009a04:	7afb      	ldrb	r3, [r7, #11]
 8009a06:	3301      	adds	r3, #1
 8009a08:	72fb      	strb	r3, [r7, #11]
          break;
 8009a0a:	e021      	b.n	8009a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00b      	beq.n	8009a30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	7c12      	ldrb	r2, [r2, #16]
 8009a24:	f107 0108 	add.w	r1, r7, #8
 8009a28:	4610      	mov	r0, r2
 8009a2a:	4798      	blx	r3
 8009a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a2e:	e00f      	b.n	8009a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fa49 	bl	8009eca <USBD_CtlError>
            err++;
 8009a38:	7afb      	ldrb	r3, [r7, #11]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a3e:	e007      	b.n	8009a50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fa41 	bl	8009eca <USBD_CtlError>
          err++;
 8009a48:	7afb      	ldrb	r3, [r7, #11]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009a4e:	bf00      	nop
      }
      break;
 8009a50:	e037      	b.n	8009ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	7c1b      	ldrb	r3, [r3, #16]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d109      	bne.n	8009a6e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a62:	f107 0208 	add.w	r2, r7, #8
 8009a66:	4610      	mov	r0, r2
 8009a68:	4798      	blx	r3
 8009a6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a6c:	e029      	b.n	8009ac2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fa2a 	bl	8009eca <USBD_CtlError>
        err++;
 8009a76:	7afb      	ldrb	r3, [r7, #11]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	72fb      	strb	r3, [r7, #11]
      break;
 8009a7c:	e021      	b.n	8009ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	7c1b      	ldrb	r3, [r3, #16]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10d      	bne.n	8009aa2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a8e:	f107 0208 	add.w	r2, r7, #8
 8009a92:	4610      	mov	r0, r2
 8009a94:	4798      	blx	r3
 8009a96:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	2207      	movs	r2, #7
 8009a9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009aa0:	e00f      	b.n	8009ac2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fa10 	bl	8009eca <USBD_CtlError>
        err++;
 8009aaa:	7afb      	ldrb	r3, [r7, #11]
 8009aac:	3301      	adds	r3, #1
 8009aae:	72fb      	strb	r3, [r7, #11]
      break;
 8009ab0:	e007      	b.n	8009ac2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fa08 	bl	8009eca <USBD_CtlError>
      err++;
 8009aba:	7afb      	ldrb	r3, [r7, #11]
 8009abc:	3301      	adds	r3, #1
 8009abe:	72fb      	strb	r3, [r7, #11]
      break;
 8009ac0:	bf00      	nop
  }

  if (err != 0U)
 8009ac2:	7afb      	ldrb	r3, [r7, #11]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d11e      	bne.n	8009b06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	88db      	ldrh	r3, [r3, #6]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d016      	beq.n	8009afe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009ad0:	893b      	ldrh	r3, [r7, #8]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00e      	beq.n	8009af4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	88da      	ldrh	r2, [r3, #6]
 8009ada:	893b      	ldrh	r3, [r7, #8]
 8009adc:	4293      	cmp	r3, r2
 8009ade:	bf28      	it	cs
 8009ae0:	4613      	movcs	r3, r2
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ae6:	893b      	ldrh	r3, [r7, #8]
 8009ae8:	461a      	mov	r2, r3
 8009aea:	68f9      	ldr	r1, [r7, #12]
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fa69 	bl	8009fc4 <USBD_CtlSendData>
 8009af2:	e009      	b.n	8009b08 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009af4:	6839      	ldr	r1, [r7, #0]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f9e7 	bl	8009eca <USBD_CtlError>
 8009afc:	e004      	b.n	8009b08 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 faba 	bl	800a078 <USBD_CtlSendStatus>
 8009b04:	e000      	b.n	8009b08 <USBD_GetDescriptor+0x2cc>
    return;
 8009b06:	bf00      	nop
  }
}
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop

08009b10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	889b      	ldrh	r3, [r3, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d131      	bne.n	8009b86 <USBD_SetAddress+0x76>
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	88db      	ldrh	r3, [r3, #6]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d12d      	bne.n	8009b86 <USBD_SetAddress+0x76>
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	885b      	ldrh	r3, [r3, #2]
 8009b2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b30:	d829      	bhi.n	8009b86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	885b      	ldrh	r3, [r3, #2]
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	2b03      	cmp	r3, #3
 8009b48:	d104      	bne.n	8009b54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f9bc 	bl	8009eca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b52:	e01d      	b.n	8009b90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	7bfa      	ldrb	r2, [r7, #15]
 8009b58:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 ff57 	bl	800aa14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fa86 	bl	800a078 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d004      	beq.n	8009b7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2202      	movs	r2, #2
 8009b76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b7a:	e009      	b.n	8009b90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b84:	e004      	b.n	8009b90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b86:	6839      	ldr	r1, [r7, #0]
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f99e 	bl	8009eca <USBD_CtlError>
  }
}
 8009b8e:	bf00      	nop
 8009b90:	bf00      	nop
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	885b      	ldrh	r3, [r3, #2]
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	4b4e      	ldr	r3, [pc, #312]	@ (8009ce8 <USBD_SetConfig+0x150>)
 8009bae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8009ce8 <USBD_SetConfig+0x150>)
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d905      	bls.n	8009bc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009bb8:	6839      	ldr	r1, [r7, #0]
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f985 	bl	8009eca <USBD_CtlError>
    return USBD_FAIL;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e08c      	b.n	8009cde <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d002      	beq.n	8009bd6 <USBD_SetConfig+0x3e>
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d029      	beq.n	8009c28 <USBD_SetConfig+0x90>
 8009bd4:	e075      	b.n	8009cc2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009bd6:	4b44      	ldr	r3, [pc, #272]	@ (8009ce8 <USBD_SetConfig+0x150>)
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d020      	beq.n	8009c20 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009bde:	4b42      	ldr	r3, [pc, #264]	@ (8009ce8 <USBD_SetConfig+0x150>)
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	461a      	mov	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009be8:	4b3f      	ldr	r3, [pc, #252]	@ (8009ce8 <USBD_SetConfig+0x150>)
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	4619      	mov	r1, r3
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7fe ffe3 	bl	8008bba <USBD_SetClassConfig>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d008      	beq.n	8009c10 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f962 	bl	8009eca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2202      	movs	r2, #2
 8009c0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c0e:	e065      	b.n	8009cdc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fa31 	bl	800a078 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2203      	movs	r2, #3
 8009c1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009c1e:	e05d      	b.n	8009cdc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fa29 	bl	800a078 <USBD_CtlSendStatus>
      break;
 8009c26:	e059      	b.n	8009cdc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009c28:	4b2f      	ldr	r3, [pc, #188]	@ (8009ce8 <USBD_SetConfig+0x150>)
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d112      	bne.n	8009c56 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2202      	movs	r2, #2
 8009c34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009c38:	4b2b      	ldr	r3, [pc, #172]	@ (8009ce8 <USBD_SetConfig+0x150>)
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c42:	4b29      	ldr	r3, [pc, #164]	@ (8009ce8 <USBD_SetConfig+0x150>)
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7fe ffd2 	bl	8008bf2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fa12 	bl	800a078 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c54:	e042      	b.n	8009cdc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009c56:	4b24      	ldr	r3, [pc, #144]	@ (8009ce8 <USBD_SetConfig+0x150>)
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d02a      	beq.n	8009cba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7fe ffc0 	bl	8008bf2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009c72:	4b1d      	ldr	r3, [pc, #116]	@ (8009ce8 <USBD_SetConfig+0x150>)
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	461a      	mov	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ce8 <USBD_SetConfig+0x150>)
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	4619      	mov	r1, r3
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f7fe ff99 	bl	8008bba <USBD_SetClassConfig>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00f      	beq.n	8009cb2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f918 	bl	8009eca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7fe ffa5 	bl	8008bf2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2202      	movs	r2, #2
 8009cac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009cb0:	e014      	b.n	8009cdc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f9e0 	bl	800a078 <USBD_CtlSendStatus>
      break;
 8009cb8:	e010      	b.n	8009cdc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f9dc 	bl	800a078 <USBD_CtlSendStatus>
      break;
 8009cc0:	e00c      	b.n	8009cdc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 f900 	bl	8009eca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009cca:	4b07      	ldr	r3, [pc, #28]	@ (8009ce8 <USBD_SetConfig+0x150>)
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	4619      	mov	r1, r3
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f7fe ff8e 	bl	8008bf2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	73fb      	strb	r3, [r7, #15]
      break;
 8009cda:	bf00      	nop
  }

  return ret;
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	200004bc 	.word	0x200004bc

08009cec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	88db      	ldrh	r3, [r3, #6]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d004      	beq.n	8009d08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f8e2 	bl	8009eca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d06:	e023      	b.n	8009d50 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	dc02      	bgt.n	8009d1a <USBD_GetConfig+0x2e>
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	dc03      	bgt.n	8009d20 <USBD_GetConfig+0x34>
 8009d18:	e015      	b.n	8009d46 <USBD_GetConfig+0x5a>
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d00b      	beq.n	8009d36 <USBD_GetConfig+0x4a>
 8009d1e:	e012      	b.n	8009d46 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	3308      	adds	r3, #8
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f948 	bl	8009fc4 <USBD_CtlSendData>
        break;
 8009d34:	e00c      	b.n	8009d50 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	3304      	adds	r3, #4
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f940 	bl	8009fc4 <USBD_CtlSendData>
        break;
 8009d44:	e004      	b.n	8009d50 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f8be 	bl	8009eca <USBD_CtlError>
        break;
 8009d4e:	bf00      	nop
}
 8009d50:	bf00      	nop
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d81e      	bhi.n	8009dae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	88db      	ldrh	r3, [r3, #6]
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d004      	beq.n	8009d82 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009d78:	6839      	ldr	r1, [r7, #0]
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f8a5 	bl	8009eca <USBD_CtlError>
        break;
 8009d80:	e01a      	b.n	8009db8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d005      	beq.n	8009d9e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	f043 0202 	orr.w	r2, r3, #2
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	330c      	adds	r3, #12
 8009da2:	2202      	movs	r2, #2
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 f90c 	bl	8009fc4 <USBD_CtlSendData>
      break;
 8009dac:	e004      	b.n	8009db8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009dae:	6839      	ldr	r1, [r7, #0]
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f88a 	bl	8009eca <USBD_CtlError>
      break;
 8009db6:	bf00      	nop
  }
}
 8009db8:	bf00      	nop
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	885b      	ldrh	r3, [r3, #2]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d107      	bne.n	8009de2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f94c 	bl	800a078 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009de0:	e013      	b.n	8009e0a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	885b      	ldrh	r3, [r3, #2]
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d10b      	bne.n	8009e02 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	889b      	ldrh	r3, [r3, #4]
 8009dee:	0a1b      	lsrs	r3, r3, #8
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	b2da      	uxtb	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f93c 	bl	800a078 <USBD_CtlSendStatus>
}
 8009e00:	e003      	b.n	8009e0a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f860 	bl	8009eca <USBD_CtlError>
}
 8009e0a:	bf00      	nop
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b082      	sub	sp, #8
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	3b01      	subs	r3, #1
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d80b      	bhi.n	8009e42 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	885b      	ldrh	r3, [r3, #2]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d10c      	bne.n	8009e4c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f91c 	bl	800a078 <USBD_CtlSendStatus>
      }
      break;
 8009e40:	e004      	b.n	8009e4c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f840 	bl	8009eca <USBD_CtlError>
      break;
 8009e4a:	e000      	b.n	8009e4e <USBD_ClrFeature+0x3c>
      break;
 8009e4c:	bf00      	nop
  }
}
 8009e4e:	bf00      	nop
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b084      	sub	sp, #16
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
 8009e5e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	781a      	ldrb	r2, [r3, #0]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	781a      	ldrb	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f7ff fa40 	bl	8009306 <SWAPBYTE>
 8009e86:	4603      	mov	r3, r0
 8009e88:	461a      	mov	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3301      	adds	r3, #1
 8009e92:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	3301      	adds	r3, #1
 8009e98:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	f7ff fa33 	bl	8009306 <SWAPBYTE>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f7ff fa26 	bl	8009306 <SWAPBYTE>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	80da      	strh	r2, [r3, #6]
}
 8009ec2:	bf00      	nop
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b082      	sub	sp, #8
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ed4:	2180      	movs	r1, #128	@ 0x80
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fd32 	bl	800a940 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009edc:	2100      	movs	r1, #0
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 fd2e 	bl	800a940 <USBD_LL_StallEP>
}
 8009ee4:	bf00      	nop
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b086      	sub	sp, #24
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d042      	beq.n	8009f88 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009f06:	6938      	ldr	r0, [r7, #16]
 8009f08:	f000 f842 	bl	8009f90 <USBD_GetLen>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	3301      	adds	r3, #1
 8009f10:	005b      	lsls	r3, r3, #1
 8009f12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f16:	d808      	bhi.n	8009f2a <USBD_GetString+0x3e>
 8009f18:	6938      	ldr	r0, [r7, #16]
 8009f1a:	f000 f839 	bl	8009f90 <USBD_GetLen>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	3301      	adds	r3, #1
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	005b      	lsls	r3, r3, #1
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	e001      	b.n	8009f2e <USBD_GetString+0x42>
 8009f2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	4413      	add	r3, r2
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	7812      	ldrb	r2, [r2, #0]
 8009f3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f3e:	7dfb      	ldrb	r3, [r7, #23]
 8009f40:	3301      	adds	r3, #1
 8009f42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009f44:	7dfb      	ldrb	r3, [r7, #23]
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	4413      	add	r3, r2
 8009f4a:	2203      	movs	r2, #3
 8009f4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f4e:	7dfb      	ldrb	r3, [r7, #23]
 8009f50:	3301      	adds	r3, #1
 8009f52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009f54:	e013      	b.n	8009f7e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009f56:	7dfb      	ldrb	r3, [r7, #23]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	693a      	ldr	r2, [r7, #16]
 8009f5e:	7812      	ldrb	r2, [r2, #0]
 8009f60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	3301      	adds	r3, #1
 8009f66:	613b      	str	r3, [r7, #16]
    idx++;
 8009f68:	7dfb      	ldrb	r3, [r7, #23]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	4413      	add	r3, r2
 8009f74:	2200      	movs	r2, #0
 8009f76:	701a      	strb	r2, [r3, #0]
    idx++;
 8009f78:	7dfb      	ldrb	r3, [r7, #23]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1e7      	bne.n	8009f56 <USBD_GetString+0x6a>
 8009f86:	e000      	b.n	8009f8a <USBD_GetString+0x9e>
    return;
 8009f88:	bf00      	nop
  }
}
 8009f8a:	3718      	adds	r7, #24
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009fa0:	e005      	b.n	8009fae <USBD_GetLen+0x1e>
  {
    len++;
 8009fa2:	7bfb      	ldrb	r3, [r7, #15]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	3301      	adds	r3, #1
 8009fac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1f5      	bne.n	8009fa2 <USBD_GetLen+0x12>
  }

  return len;
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2202      	movs	r2, #2
 8009fd4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68ba      	ldr	r2, [r7, #8]
 8009fe8:	2100      	movs	r1, #0
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f000 fd31 	bl	800aa52 <USBD_LL_Transmit>

  return USBD_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b084      	sub	sp, #16
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	60f8      	str	r0, [r7, #12]
 800a002:	60b9      	str	r1, [r7, #8]
 800a004:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	2100      	movs	r1, #0
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f000 fd20 	bl	800aa52 <USBD_LL_Transmit>

  return USBD_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2203      	movs	r2, #3
 800a02c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	2100      	movs	r1, #0
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f000 fd24 	bl	800aa94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	60f8      	str	r0, [r7, #12]
 800a05e:	60b9      	str	r1, [r7, #8]
 800a060:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	2100      	movs	r1, #0
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 fd13 	bl	800aa94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2204      	movs	r2, #4
 800a084:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a088:	2300      	movs	r3, #0
 800a08a:	2200      	movs	r2, #0
 800a08c:	2100      	movs	r1, #0
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 fcdf 	bl	800aa52 <USBD_LL_Transmit>

  return USBD_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b082      	sub	sp, #8
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2205      	movs	r2, #5
 800a0aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fced 	bl	800aa94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	4912      	ldr	r1, [pc, #72]	@ (800a114 <MX_USB_DEVICE_Init+0x50>)
 800a0cc:	4812      	ldr	r0, [pc, #72]	@ (800a118 <MX_USB_DEVICE_Init+0x54>)
 800a0ce:	f7fe fcf7 	bl	8008ac0 <USBD_Init>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d001      	beq.n	800a0dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a0d8:	f7f7 fb3c 	bl	8001754 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a0dc:	490f      	ldr	r1, [pc, #60]	@ (800a11c <MX_USB_DEVICE_Init+0x58>)
 800a0de:	480e      	ldr	r0, [pc, #56]	@ (800a118 <MX_USB_DEVICE_Init+0x54>)
 800a0e0:	f7fe fd1e 	bl	8008b20 <USBD_RegisterClass>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d001      	beq.n	800a0ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a0ea:	f7f7 fb33 	bl	8001754 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a0ee:	490c      	ldr	r1, [pc, #48]	@ (800a120 <MX_USB_DEVICE_Init+0x5c>)
 800a0f0:	4809      	ldr	r0, [pc, #36]	@ (800a118 <MX_USB_DEVICE_Init+0x54>)
 800a0f2:	f7fe fc15 	bl	8008920 <USBD_CDC_RegisterInterface>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a0fc:	f7f7 fb2a 	bl	8001754 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a100:	4805      	ldr	r0, [pc, #20]	@ (800a118 <MX_USB_DEVICE_Init+0x54>)
 800a102:	f7fe fd43 	bl	8008b8c <USBD_Start>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a10c:	f7f7 fb22 	bl	8001754 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a110:	bf00      	nop
 800a112:	bd80      	pop	{r7, pc}
 800a114:	200000b4 	.word	0x200000b4
 800a118:	200004c0 	.word	0x200004c0
 800a11c:	20000018 	.word	0x20000018
 800a120:	200000a0 	.word	0x200000a0

0800a124 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a128:	2200      	movs	r2, #0
 800a12a:	4905      	ldr	r1, [pc, #20]	@ (800a140 <CDC_Init_FS+0x1c>)
 800a12c:	4805      	ldr	r0, [pc, #20]	@ (800a144 <CDC_Init_FS+0x20>)
 800a12e:	f7fe fc11 	bl	8008954 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a132:	4905      	ldr	r1, [pc, #20]	@ (800a148 <CDC_Init_FS+0x24>)
 800a134:	4803      	ldr	r0, [pc, #12]	@ (800a144 <CDC_Init_FS+0x20>)
 800a136:	f7fe fc2f 	bl	8008998 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a13a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	20000f9c 	.word	0x20000f9c
 800a144:	200004c0 	.word	0x200004c0
 800a148:	2000079c 	.word	0x2000079c

0800a14c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a14c:	b480      	push	{r7}
 800a14e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a150:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a152:	4618      	mov	r0, r3
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	4603      	mov	r3, r0
 800a164:	6039      	str	r1, [r7, #0]
 800a166:	71fb      	strb	r3, [r7, #7]
 800a168:	4613      	mov	r3, r2
 800a16a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a16c:	79fb      	ldrb	r3, [r7, #7]
 800a16e:	2b23      	cmp	r3, #35	@ 0x23
 800a170:	f200 8098 	bhi.w	800a2a4 <CDC_Control_FS+0x148>
 800a174:	a201      	add	r2, pc, #4	@ (adr r2, 800a17c <CDC_Control_FS+0x20>)
 800a176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17a:	bf00      	nop
 800a17c:	0800a2a5 	.word	0x0800a2a5
 800a180:	0800a2a5 	.word	0x0800a2a5
 800a184:	0800a2a5 	.word	0x0800a2a5
 800a188:	0800a2a5 	.word	0x0800a2a5
 800a18c:	0800a2a5 	.word	0x0800a2a5
 800a190:	0800a2a5 	.word	0x0800a2a5
 800a194:	0800a2a5 	.word	0x0800a2a5
 800a198:	0800a2a5 	.word	0x0800a2a5
 800a19c:	0800a2a5 	.word	0x0800a2a5
 800a1a0:	0800a2a5 	.word	0x0800a2a5
 800a1a4:	0800a2a5 	.word	0x0800a2a5
 800a1a8:	0800a2a5 	.word	0x0800a2a5
 800a1ac:	0800a2a5 	.word	0x0800a2a5
 800a1b0:	0800a2a5 	.word	0x0800a2a5
 800a1b4:	0800a2a5 	.word	0x0800a2a5
 800a1b8:	0800a2a5 	.word	0x0800a2a5
 800a1bc:	0800a2a5 	.word	0x0800a2a5
 800a1c0:	0800a2a5 	.word	0x0800a2a5
 800a1c4:	0800a2a5 	.word	0x0800a2a5
 800a1c8:	0800a2a5 	.word	0x0800a2a5
 800a1cc:	0800a2a5 	.word	0x0800a2a5
 800a1d0:	0800a2a5 	.word	0x0800a2a5
 800a1d4:	0800a2a5 	.word	0x0800a2a5
 800a1d8:	0800a2a5 	.word	0x0800a2a5
 800a1dc:	0800a2a5 	.word	0x0800a2a5
 800a1e0:	0800a2a5 	.word	0x0800a2a5
 800a1e4:	0800a2a5 	.word	0x0800a2a5
 800a1e8:	0800a2a5 	.word	0x0800a2a5
 800a1ec:	0800a2a5 	.word	0x0800a2a5
 800a1f0:	0800a2a5 	.word	0x0800a2a5
 800a1f4:	0800a2a5 	.word	0x0800a2a5
 800a1f8:	0800a2a5 	.word	0x0800a2a5
 800a1fc:	0800a20d 	.word	0x0800a20d
 800a200:	0800a251 	.word	0x0800a251
 800a204:	0800a2a5 	.word	0x0800a2a5
 800a208:	0800a2a5 	.word	0x0800a2a5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	461a      	mov	r2, r3
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	3301      	adds	r3, #1
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	021b      	lsls	r3, r3, #8
 800a21a:	431a      	orrs	r2, r3
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	3302      	adds	r3, #2
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	041b      	lsls	r3, r3, #16
 800a224:	431a      	orrs	r2, r3
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	3303      	adds	r3, #3
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	061b      	lsls	r3, r3, #24
 800a22e:	4313      	orrs	r3, r2
 800a230:	461a      	mov	r2, r3
 800a232:	4b20      	ldr	r3, [pc, #128]	@ (800a2b4 <CDC_Control_FS+0x158>)
 800a234:	601a      	str	r2, [r3, #0]
      LineCoding.format = pbuf[4];
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	791a      	ldrb	r2, [r3, #4]
 800a23a:	4b1e      	ldr	r3, [pc, #120]	@ (800a2b4 <CDC_Control_FS+0x158>)
 800a23c:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	795a      	ldrb	r2, [r3, #5]
 800a242:	4b1c      	ldr	r3, [pc, #112]	@ (800a2b4 <CDC_Control_FS+0x158>)
 800a244:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype = pbuf[6];
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	799a      	ldrb	r2, [r3, #6]
 800a24a:	4b1a      	ldr	r3, [pc, #104]	@ (800a2b4 <CDC_Control_FS+0x158>)
 800a24c:	719a      	strb	r2, [r3, #6]
      break;
 800a24e:	e02a      	b.n	800a2a6 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t) (LineCoding.bitrate);
 800a250:	4b18      	ldr	r3, [pc, #96]	@ (800a2b4 <CDC_Control_FS+0x158>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	b2da      	uxtb	r2, r3
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 800a25a:	4b16      	ldr	r3, [pc, #88]	@ (800a2b4 <CDC_Control_FS+0x158>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	0a1a      	lsrs	r2, r3, #8
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	3301      	adds	r3, #1
 800a264:	b2d2      	uxtb	r2, r2
 800a266:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 800a268:	4b12      	ldr	r3, [pc, #72]	@ (800a2b4 <CDC_Control_FS+0x158>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	0c1a      	lsrs	r2, r3, #16
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	3302      	adds	r3, #2
 800a272:	b2d2      	uxtb	r2, r2
 800a274:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 800a276:	4b0f      	ldr	r3, [pc, #60]	@ (800a2b4 <CDC_Control_FS+0x158>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	0e1a      	lsrs	r2, r3, #24
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	3303      	adds	r3, #3
 800a280:	b2d2      	uxtb	r2, r2
 800a282:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	3304      	adds	r3, #4
 800a288:	4a0a      	ldr	r2, [pc, #40]	@ (800a2b4 <CDC_Control_FS+0x158>)
 800a28a:	7912      	ldrb	r2, [r2, #4]
 800a28c:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	3305      	adds	r3, #5
 800a292:	4a08      	ldr	r2, [pc, #32]	@ (800a2b4 <CDC_Control_FS+0x158>)
 800a294:	7952      	ldrb	r2, [r2, #5]
 800a296:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	3306      	adds	r3, #6
 800a29c:	4a05      	ldr	r2, [pc, #20]	@ (800a2b4 <CDC_Control_FS+0x158>)
 800a29e:	7992      	ldrb	r2, [r2, #6]
 800a2a0:	701a      	strb	r2, [r3, #0]
      break;
 800a2a2:	e000      	b.n	800a2a6 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a2a4:	bf00      	nop
  }

  return (USBD_OK);
 800a2a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	20000098 	.word	0x20000098

0800a2b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a2c2:	6879      	ldr	r1, [r7, #4]
 800a2c4:	4805      	ldr	r0, [pc, #20]	@ (800a2dc <CDC_Receive_FS+0x24>)
 800a2c6:	f7fe fb67 	bl	8008998 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a2ca:	4804      	ldr	r0, [pc, #16]	@ (800a2dc <CDC_Receive_FS+0x24>)
 800a2cc:	f7fe fbc2 	bl	8008a54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a2d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	200004c0 	.word	0x200004c0

0800a2e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a2f0:	4b0d      	ldr	r3, [pc, #52]	@ (800a328 <CDC_Transmit_FS+0x48>)
 800a2f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d001      	beq.n	800a306 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a302:	2301      	movs	r3, #1
 800a304:	e00b      	b.n	800a31e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a306:	887b      	ldrh	r3, [r7, #2]
 800a308:	461a      	mov	r2, r3
 800a30a:	6879      	ldr	r1, [r7, #4]
 800a30c:	4806      	ldr	r0, [pc, #24]	@ (800a328 <CDC_Transmit_FS+0x48>)
 800a30e:	f7fe fb21 	bl	8008954 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a312:	4805      	ldr	r0, [pc, #20]	@ (800a328 <CDC_Transmit_FS+0x48>)
 800a314:	f7fe fb5e 	bl	80089d4 <USBD_CDC_TransmitPacket>
 800a318:	4603      	mov	r3, r0
 800a31a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a31c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	200004c0 	.word	0x200004c0

0800a32c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b087      	sub	sp, #28
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	4613      	mov	r3, r2
 800a338:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a33a:	2300      	movs	r3, #0
 800a33c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a33e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a342:	4618      	mov	r0, r3
 800a344:	371c      	adds	r7, #28
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
	...

0800a350 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	6039      	str	r1, [r7, #0]
 800a35a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2212      	movs	r2, #18
 800a360:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a362:	4b03      	ldr	r3, [pc, #12]	@ (800a370 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a364:	4618      	mov	r0, r3
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	200000d0 	.word	0x200000d0

0800a374 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	4603      	mov	r3, r0
 800a37c:	6039      	str	r1, [r7, #0]
 800a37e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	2204      	movs	r2, #4
 800a384:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a386:	4b03      	ldr	r3, [pc, #12]	@ (800a394 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	200000e4 	.word	0x200000e4

0800a398 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	6039      	str	r1, [r7, #0]
 800a3a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3a4:	79fb      	ldrb	r3, [r7, #7]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d105      	bne.n	800a3b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	4907      	ldr	r1, [pc, #28]	@ (800a3cc <USBD_FS_ProductStrDescriptor+0x34>)
 800a3ae:	4808      	ldr	r0, [pc, #32]	@ (800a3d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3b0:	f7ff fd9c 	bl	8009eec <USBD_GetString>
 800a3b4:	e004      	b.n	800a3c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	4904      	ldr	r1, [pc, #16]	@ (800a3cc <USBD_FS_ProductStrDescriptor+0x34>)
 800a3ba:	4805      	ldr	r0, [pc, #20]	@ (800a3d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3bc:	f7ff fd96 	bl	8009eec <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3c0:	4b02      	ldr	r3, [pc, #8]	@ (800a3cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	2000179c 	.word	0x2000179c
 800a3d0:	0800d8fc 	.word	0x0800d8fc

0800a3d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	6039      	str	r1, [r7, #0]
 800a3de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	4904      	ldr	r1, [pc, #16]	@ (800a3f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a3e4:	4804      	ldr	r0, [pc, #16]	@ (800a3f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a3e6:	f7ff fd81 	bl	8009eec <USBD_GetString>
  return USBD_StrDesc;
 800a3ea:	4b02      	ldr	r3, [pc, #8]	@ (800a3f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	2000179c 	.word	0x2000179c
 800a3f8:	0800d914 	.word	0x0800d914

0800a3fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	6039      	str	r1, [r7, #0]
 800a406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	221a      	movs	r2, #26
 800a40c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a40e:	f000 f843 	bl	800a498 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a412:	4b02      	ldr	r3, [pc, #8]	@ (800a41c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a414:	4618      	mov	r0, r3
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	200000e8 	.word	0x200000e8

0800a420 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	4603      	mov	r3, r0
 800a428:	6039      	str	r1, [r7, #0]
 800a42a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a42c:	79fb      	ldrb	r3, [r7, #7]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d105      	bne.n	800a43e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a432:	683a      	ldr	r2, [r7, #0]
 800a434:	4907      	ldr	r1, [pc, #28]	@ (800a454 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a436:	4808      	ldr	r0, [pc, #32]	@ (800a458 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a438:	f7ff fd58 	bl	8009eec <USBD_GetString>
 800a43c:	e004      	b.n	800a448 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	4904      	ldr	r1, [pc, #16]	@ (800a454 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a442:	4805      	ldr	r0, [pc, #20]	@ (800a458 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a444:	f7ff fd52 	bl	8009eec <USBD_GetString>
  }
  return USBD_StrDesc;
 800a448:	4b02      	ldr	r3, [pc, #8]	@ (800a454 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	2000179c 	.word	0x2000179c
 800a458:	0800d928 	.word	0x0800d928

0800a45c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	4603      	mov	r3, r0
 800a464:	6039      	str	r1, [r7, #0]
 800a466:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a468:	79fb      	ldrb	r3, [r7, #7]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d105      	bne.n	800a47a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	4907      	ldr	r1, [pc, #28]	@ (800a490 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a472:	4808      	ldr	r0, [pc, #32]	@ (800a494 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a474:	f7ff fd3a 	bl	8009eec <USBD_GetString>
 800a478:	e004      	b.n	800a484 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a47a:	683a      	ldr	r2, [r7, #0]
 800a47c:	4904      	ldr	r1, [pc, #16]	@ (800a490 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a47e:	4805      	ldr	r0, [pc, #20]	@ (800a494 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a480:	f7ff fd34 	bl	8009eec <USBD_GetString>
  }
  return USBD_StrDesc;
 800a484:	4b02      	ldr	r3, [pc, #8]	@ (800a490 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a486:	4618      	mov	r0, r3
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	2000179c 	.word	0x2000179c
 800a494:	0800d934 	.word	0x0800d934

0800a498 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a49e:	4b0f      	ldr	r3, [pc, #60]	@ (800a4dc <Get_SerialNum+0x44>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a4a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a4e0 <Get_SerialNum+0x48>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a4aa:	4b0e      	ldr	r3, [pc, #56]	@ (800a4e4 <Get_SerialNum+0x4c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d009      	beq.n	800a4d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a4be:	2208      	movs	r2, #8
 800a4c0:	4909      	ldr	r1, [pc, #36]	@ (800a4e8 <Get_SerialNum+0x50>)
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f000 f814 	bl	800a4f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a4c8:	2204      	movs	r2, #4
 800a4ca:	4908      	ldr	r1, [pc, #32]	@ (800a4ec <Get_SerialNum+0x54>)
 800a4cc:	68b8      	ldr	r0, [r7, #8]
 800a4ce:	f000 f80f 	bl	800a4f0 <IntToUnicode>
  }
}
 800a4d2:	bf00      	nop
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	1fff7a10 	.word	0x1fff7a10
 800a4e0:	1fff7a14 	.word	0x1fff7a14
 800a4e4:	1fff7a18 	.word	0x1fff7a18
 800a4e8:	200000ea 	.word	0x200000ea
 800a4ec:	200000fa 	.word	0x200000fa

0800a4f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b087      	sub	sp, #28
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a502:	2300      	movs	r3, #0
 800a504:	75fb      	strb	r3, [r7, #23]
 800a506:	e027      	b.n	800a558 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	0f1b      	lsrs	r3, r3, #28
 800a50c:	2b09      	cmp	r3, #9
 800a50e:	d80b      	bhi.n	800a528 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	0f1b      	lsrs	r3, r3, #28
 800a514:	b2da      	uxtb	r2, r3
 800a516:	7dfb      	ldrb	r3, [r7, #23]
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	4619      	mov	r1, r3
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	440b      	add	r3, r1
 800a520:	3230      	adds	r2, #48	@ 0x30
 800a522:	b2d2      	uxtb	r2, r2
 800a524:	701a      	strb	r2, [r3, #0]
 800a526:	e00a      	b.n	800a53e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	0f1b      	lsrs	r3, r3, #28
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	7dfb      	ldrb	r3, [r7, #23]
 800a530:	005b      	lsls	r3, r3, #1
 800a532:	4619      	mov	r1, r3
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	440b      	add	r3, r1
 800a538:	3237      	adds	r2, #55	@ 0x37
 800a53a:	b2d2      	uxtb	r2, r2
 800a53c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	011b      	lsls	r3, r3, #4
 800a542:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a544:	7dfb      	ldrb	r3, [r7, #23]
 800a546:	005b      	lsls	r3, r3, #1
 800a548:	3301      	adds	r3, #1
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	4413      	add	r3, r2
 800a54e:	2200      	movs	r2, #0
 800a550:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a552:	7dfb      	ldrb	r3, [r7, #23]
 800a554:	3301      	adds	r3, #1
 800a556:	75fb      	strb	r3, [r7, #23]
 800a558:	7dfa      	ldrb	r2, [r7, #23]
 800a55a:	79fb      	ldrb	r3, [r7, #7]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d3d3      	bcc.n	800a508 <IntToUnicode+0x18>
  }
}
 800a560:	bf00      	nop
 800a562:	bf00      	nop
 800a564:	371c      	adds	r7, #28
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
	...

0800a570 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b08a      	sub	sp, #40	@ 0x28
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a578:	f107 0314 	add.w	r3, r7, #20
 800a57c:	2200      	movs	r2, #0
 800a57e:	601a      	str	r2, [r3, #0]
 800a580:	605a      	str	r2, [r3, #4]
 800a582:	609a      	str	r2, [r3, #8]
 800a584:	60da      	str	r2, [r3, #12]
 800a586:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a590:	d13a      	bne.n	800a608 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a592:	2300      	movs	r3, #0
 800a594:	613b      	str	r3, [r7, #16]
 800a596:	4b1e      	ldr	r3, [pc, #120]	@ (800a610 <HAL_PCD_MspInit+0xa0>)
 800a598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a59a:	4a1d      	ldr	r2, [pc, #116]	@ (800a610 <HAL_PCD_MspInit+0xa0>)
 800a59c:	f043 0301 	orr.w	r3, r3, #1
 800a5a0:	6313      	str	r3, [r2, #48]	@ 0x30
 800a5a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a610 <HAL_PCD_MspInit+0xa0>)
 800a5a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	613b      	str	r3, [r7, #16]
 800a5ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a5ae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a5b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5bc:	2303      	movs	r3, #3
 800a5be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a5c0:	230a      	movs	r3, #10
 800a5c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5c4:	f107 0314 	add.w	r3, r7, #20
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	4812      	ldr	r0, [pc, #72]	@ (800a614 <HAL_PCD_MspInit+0xa4>)
 800a5cc:	f7f8 f870 	bl	80026b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a5d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a610 <HAL_PCD_MspInit+0xa0>)
 800a5d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5d4:	4a0e      	ldr	r2, [pc, #56]	@ (800a610 <HAL_PCD_MspInit+0xa0>)
 800a5d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5da:	6353      	str	r3, [r2, #52]	@ 0x34
 800a5dc:	2300      	movs	r3, #0
 800a5de:	60fb      	str	r3, [r7, #12]
 800a5e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a610 <HAL_PCD_MspInit+0xa0>)
 800a5e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5e4:	4a0a      	ldr	r2, [pc, #40]	@ (800a610 <HAL_PCD_MspInit+0xa0>)
 800a5e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a5ea:	6453      	str	r3, [r2, #68]	@ 0x44
 800a5ec:	4b08      	ldr	r3, [pc, #32]	@ (800a610 <HAL_PCD_MspInit+0xa0>)
 800a5ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	2043      	movs	r0, #67	@ 0x43
 800a5fe:	f7f8 f820 	bl	8002642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a602:	2043      	movs	r0, #67	@ 0x43
 800a604:	f7f8 f839 	bl	800267a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a608:	bf00      	nop
 800a60a:	3728      	adds	r7, #40	@ 0x28
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	40023800 	.word	0x40023800
 800a614:	40020000 	.word	0x40020000

0800a618 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a62c:	4619      	mov	r1, r3
 800a62e:	4610      	mov	r0, r2
 800a630:	f7fe faf9 	bl	8008c26 <USBD_LL_SetupStage>
}
 800a634:	bf00      	nop
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	460b      	mov	r3, r1
 800a646:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a64e:	78fa      	ldrb	r2, [r7, #3]
 800a650:	6879      	ldr	r1, [r7, #4]
 800a652:	4613      	mov	r3, r2
 800a654:	00db      	lsls	r3, r3, #3
 800a656:	4413      	add	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	440b      	add	r3, r1
 800a65c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	78fb      	ldrb	r3, [r7, #3]
 800a664:	4619      	mov	r1, r3
 800a666:	f7fe fb33 	bl	8008cd0 <USBD_LL_DataOutStage>
}
 800a66a:	bf00      	nop
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b082      	sub	sp, #8
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	460b      	mov	r3, r1
 800a67c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a684:	78fa      	ldrb	r2, [r7, #3]
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	4613      	mov	r3, r2
 800a68a:	00db      	lsls	r3, r3, #3
 800a68c:	4413      	add	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	440b      	add	r3, r1
 800a692:	3320      	adds	r3, #32
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	78fb      	ldrb	r3, [r7, #3]
 800a698:	4619      	mov	r1, r3
 800a69a:	f7fe fbcc 	bl	8008e36 <USBD_LL_DataInStage>
}
 800a69e:	bf00      	nop
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b082      	sub	sp, #8
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fe fd06 	bl	80090c6 <USBD_LL_SOF>
}
 800a6ba:	bf00      	nop
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	79db      	ldrb	r3, [r3, #7]
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d001      	beq.n	800a6da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a6d6:	f7f7 f83d 	bl	8001754 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6e0:	7bfa      	ldrb	r2, [r7, #15]
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fe fcaa 	bl	800903e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7fe fc52 	bl	8008f9a <USBD_LL_Reset>
}
 800a6f6:	bf00      	nop
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
	...

0800a700 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fe fca5 	bl	800905e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	6812      	ldr	r2, [r2, #0]
 800a722:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a726:	f043 0301 	orr.w	r3, r3, #1
 800a72a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	7adb      	ldrb	r3, [r3, #11]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d005      	beq.n	800a740 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a734:	4b04      	ldr	r3, [pc, #16]	@ (800a748 <HAL_PCD_SuspendCallback+0x48>)
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	4a03      	ldr	r2, [pc, #12]	@ (800a748 <HAL_PCD_SuspendCallback+0x48>)
 800a73a:	f043 0306 	orr.w	r3, r3, #6
 800a73e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a740:	bf00      	nop
 800a742:	3708      	adds	r7, #8
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	e000ed00 	.word	0xe000ed00

0800a74c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fe fc9b 	bl	8009096 <USBD_LL_Resume>
}
 800a760:	bf00      	nop
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	460b      	mov	r3, r1
 800a772:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a77a:	78fa      	ldrb	r2, [r7, #3]
 800a77c:	4611      	mov	r1, r2
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fe fcf3 	bl	800916a <USBD_LL_IsoOUTIncomplete>
}
 800a784:	bf00      	nop
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	460b      	mov	r3, r1
 800a796:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a79e:	78fa      	ldrb	r2, [r7, #3]
 800a7a0:	4611      	mov	r1, r2
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fe fcaf 	bl	8009106 <USBD_LL_IsoINIncomplete>
}
 800a7a8:	bf00      	nop
 800a7aa:	3708      	adds	r7, #8
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7fe fd05 	bl	80091ce <USBD_LL_DevConnected>
}
 800a7c4:	bf00      	nop
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fe fd02 	bl	80091e4 <USBD_LL_DevDisconnected>
}
 800a7e0:	bf00      	nop
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d13c      	bne.n	800a872 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a7f8:	4a20      	ldr	r2, [pc, #128]	@ (800a87c <USBD_LL_Init+0x94>)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a1e      	ldr	r2, [pc, #120]	@ (800a87c <USBD_LL_Init+0x94>)
 800a804:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a808:	4b1c      	ldr	r3, [pc, #112]	@ (800a87c <USBD_LL_Init+0x94>)
 800a80a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a80e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a810:	4b1a      	ldr	r3, [pc, #104]	@ (800a87c <USBD_LL_Init+0x94>)
 800a812:	2204      	movs	r2, #4
 800a814:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a816:	4b19      	ldr	r3, [pc, #100]	@ (800a87c <USBD_LL_Init+0x94>)
 800a818:	2202      	movs	r2, #2
 800a81a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a81c:	4b17      	ldr	r3, [pc, #92]	@ (800a87c <USBD_LL_Init+0x94>)
 800a81e:	2200      	movs	r2, #0
 800a820:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a822:	4b16      	ldr	r3, [pc, #88]	@ (800a87c <USBD_LL_Init+0x94>)
 800a824:	2202      	movs	r2, #2
 800a826:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a828:	4b14      	ldr	r3, [pc, #80]	@ (800a87c <USBD_LL_Init+0x94>)
 800a82a:	2200      	movs	r2, #0
 800a82c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a82e:	4b13      	ldr	r3, [pc, #76]	@ (800a87c <USBD_LL_Init+0x94>)
 800a830:	2200      	movs	r2, #0
 800a832:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a834:	4b11      	ldr	r3, [pc, #68]	@ (800a87c <USBD_LL_Init+0x94>)
 800a836:	2200      	movs	r2, #0
 800a838:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a83a:	4b10      	ldr	r3, [pc, #64]	@ (800a87c <USBD_LL_Init+0x94>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a840:	4b0e      	ldr	r3, [pc, #56]	@ (800a87c <USBD_LL_Init+0x94>)
 800a842:	2200      	movs	r2, #0
 800a844:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a846:	480d      	ldr	r0, [pc, #52]	@ (800a87c <USBD_LL_Init+0x94>)
 800a848:	f7f9 f8ca 	bl	80039e0 <HAL_PCD_Init>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a852:	f7f6 ff7f 	bl	8001754 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a856:	2180      	movs	r1, #128	@ 0x80
 800a858:	4808      	ldr	r0, [pc, #32]	@ (800a87c <USBD_LL_Init+0x94>)
 800a85a:	f7fa faf6 	bl	8004e4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a85e:	2240      	movs	r2, #64	@ 0x40
 800a860:	2100      	movs	r1, #0
 800a862:	4806      	ldr	r0, [pc, #24]	@ (800a87c <USBD_LL_Init+0x94>)
 800a864:	f7fa faaa 	bl	8004dbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a868:	2280      	movs	r2, #128	@ 0x80
 800a86a:	2101      	movs	r1, #1
 800a86c:	4803      	ldr	r0, [pc, #12]	@ (800a87c <USBD_LL_Init+0x94>)
 800a86e:	f7fa faa5 	bl	8004dbc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	2000199c 	.word	0x2000199c

0800a880 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a896:	4618      	mov	r0, r3
 800a898:	f7f9 f9b1 	bl	8003bfe <HAL_PCD_Start>
 800a89c:	4603      	mov	r3, r0
 800a89e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f000 f942 	bl	800ab2c <USBD_Get_USB_Status>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	4608      	mov	r0, r1
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	70fb      	strb	r3, [r7, #3]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	70bb      	strb	r3, [r7, #2]
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a8de:	78bb      	ldrb	r3, [r7, #2]
 800a8e0:	883a      	ldrh	r2, [r7, #0]
 800a8e2:	78f9      	ldrb	r1, [r7, #3]
 800a8e4:	f7f9 fe85 	bl	80045f2 <HAL_PCD_EP_Open>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f000 f91c 	bl	800ab2c <USBD_Get_USB_Status>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
 800a90a:	460b      	mov	r3, r1
 800a90c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a90e:	2300      	movs	r3, #0
 800a910:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a91c:	78fa      	ldrb	r2, [r7, #3]
 800a91e:	4611      	mov	r1, r2
 800a920:	4618      	mov	r0, r3
 800a922:	f7f9 fed0 	bl	80046c6 <HAL_PCD_EP_Close>
 800a926:	4603      	mov	r3, r0
 800a928:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a92a:	7bfb      	ldrb	r3, [r7, #15]
 800a92c:	4618      	mov	r0, r3
 800a92e:	f000 f8fd 	bl	800ab2c <USBD_Get_USB_Status>
 800a932:	4603      	mov	r3, r0
 800a934:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a936:	7bbb      	ldrb	r3, [r7, #14]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	460b      	mov	r3, r1
 800a94a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a94c:	2300      	movs	r3, #0
 800a94e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a950:	2300      	movs	r3, #0
 800a952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a95a:	78fa      	ldrb	r2, [r7, #3]
 800a95c:	4611      	mov	r1, r2
 800a95e:	4618      	mov	r0, r3
 800a960:	f7f9 ff88 	bl	8004874 <HAL_PCD_EP_SetStall>
 800a964:	4603      	mov	r3, r0
 800a966:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a968:	7bfb      	ldrb	r3, [r7, #15]
 800a96a:	4618      	mov	r0, r3
 800a96c:	f000 f8de 	bl	800ab2c <USBD_Get_USB_Status>
 800a970:	4603      	mov	r3, r0
 800a972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a974:	7bbb      	ldrb	r3, [r7, #14]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	460b      	mov	r3, r1
 800a988:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a998:	78fa      	ldrb	r2, [r7, #3]
 800a99a:	4611      	mov	r1, r2
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7f9 ffcc 	bl	800493a <HAL_PCD_EP_ClrStall>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9a6:	7bfb      	ldrb	r3, [r7, #15]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 f8bf 	bl	800ab2c <USBD_Get_USB_Status>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a9d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	da0b      	bge.n	800a9f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a9d8:	78fb      	ldrb	r3, [r7, #3]
 800a9da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a9de:	68f9      	ldr	r1, [r7, #12]
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	00db      	lsls	r3, r3, #3
 800a9e4:	4413      	add	r3, r2
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	440b      	add	r3, r1
 800a9ea:	3316      	adds	r3, #22
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	e00b      	b.n	800aa08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a9f0:	78fb      	ldrb	r3, [r7, #3]
 800a9f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a9f6:	68f9      	ldr	r1, [r7, #12]
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	00db      	lsls	r3, r3, #3
 800a9fc:	4413      	add	r3, r2
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	440b      	add	r3, r1
 800aa02:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800aa06:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3714      	adds	r7, #20
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa24:	2300      	movs	r3, #0
 800aa26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa2e:	78fa      	ldrb	r2, [r7, #3]
 800aa30:	4611      	mov	r1, r2
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7f9 fdb9 	bl	80045aa <HAL_PCD_SetAddress>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa3c:	7bfb      	ldrb	r3, [r7, #15]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f000 f874 	bl	800ab2c <USBD_Get_USB_Status>
 800aa44:	4603      	mov	r3, r0
 800aa46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa48:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b086      	sub	sp, #24
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	60f8      	str	r0, [r7, #12]
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	603b      	str	r3, [r7, #0]
 800aa5e:	460b      	mov	r3, r1
 800aa60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa62:	2300      	movs	r3, #0
 800aa64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa66:	2300      	movs	r3, #0
 800aa68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aa70:	7af9      	ldrb	r1, [r7, #11]
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	f7f9 fec3 	bl	8004800 <HAL_PCD_EP_Transmit>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa7e:	7dfb      	ldrb	r3, [r7, #23]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f000 f853 	bl	800ab2c <USBD_Get_USB_Status>
 800aa86:	4603      	mov	r3, r0
 800aa88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa8a:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	607a      	str	r2, [r7, #4]
 800aa9e:	603b      	str	r3, [r7, #0]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aab2:	7af9      	ldrb	r1, [r7, #11]
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	f7f9 fe4f 	bl	800475a <HAL_PCD_EP_Receive>
 800aabc:	4603      	mov	r3, r0
 800aabe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aac0:	7dfb      	ldrb	r3, [r7, #23]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f000 f832 	bl	800ab2c <USBD_Get_USB_Status>
 800aac8:	4603      	mov	r3, r0
 800aaca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aacc:	7dbb      	ldrb	r3, [r7, #22]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3718      	adds	r7, #24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b082      	sub	sp, #8
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	460b      	mov	r3, r1
 800aae0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aae8:	78fa      	ldrb	r2, [r7, #3]
 800aaea:	4611      	mov	r1, r2
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7f9 fe6f 	bl	80047d0 <HAL_PCD_EP_GetRxCount>
 800aaf2:	4603      	mov	r3, r0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab04:	4b03      	ldr	r3, [pc, #12]	@ (800ab14 <USBD_static_malloc+0x18>)
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	20001e80 	.word	0x20001e80

0800ab18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]

}
 800ab20:	bf00      	nop
 800ab22:	370c      	adds	r7, #12
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	4603      	mov	r3, r0
 800ab34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab36:	2300      	movs	r3, #0
 800ab38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab3a:	79fb      	ldrb	r3, [r7, #7]
 800ab3c:	2b03      	cmp	r3, #3
 800ab3e:	d817      	bhi.n	800ab70 <USBD_Get_USB_Status+0x44>
 800ab40:	a201      	add	r2, pc, #4	@ (adr r2, 800ab48 <USBD_Get_USB_Status+0x1c>)
 800ab42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab46:	bf00      	nop
 800ab48:	0800ab59 	.word	0x0800ab59
 800ab4c:	0800ab5f 	.word	0x0800ab5f
 800ab50:	0800ab65 	.word	0x0800ab65
 800ab54:	0800ab6b 	.word	0x0800ab6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab5c:	e00b      	b.n	800ab76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab5e:	2303      	movs	r3, #3
 800ab60:	73fb      	strb	r3, [r7, #15]
    break;
 800ab62:	e008      	b.n	800ab76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab64:	2301      	movs	r3, #1
 800ab66:	73fb      	strb	r3, [r7, #15]
    break;
 800ab68:	e005      	b.n	800ab76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab6a:	2303      	movs	r3, #3
 800ab6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab6e:	e002      	b.n	800ab76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab70:	2303      	movs	r3, #3
 800ab72:	73fb      	strb	r3, [r7, #15]
    break;
 800ab74:	bf00      	nop
  }
  return usb_status;
 800ab76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3714      	adds	r7, #20
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <__cvt>:
 800ab84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab88:	ec57 6b10 	vmov	r6, r7, d0
 800ab8c:	2f00      	cmp	r7, #0
 800ab8e:	460c      	mov	r4, r1
 800ab90:	4619      	mov	r1, r3
 800ab92:	463b      	mov	r3, r7
 800ab94:	bfbb      	ittet	lt
 800ab96:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ab9a:	461f      	movlt	r7, r3
 800ab9c:	2300      	movge	r3, #0
 800ab9e:	232d      	movlt	r3, #45	@ 0x2d
 800aba0:	700b      	strb	r3, [r1, #0]
 800aba2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aba4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aba8:	4691      	mov	r9, r2
 800abaa:	f023 0820 	bic.w	r8, r3, #32
 800abae:	bfbc      	itt	lt
 800abb0:	4632      	movlt	r2, r6
 800abb2:	4616      	movlt	r6, r2
 800abb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800abb8:	d005      	beq.n	800abc6 <__cvt+0x42>
 800abba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800abbe:	d100      	bne.n	800abc2 <__cvt+0x3e>
 800abc0:	3401      	adds	r4, #1
 800abc2:	2102      	movs	r1, #2
 800abc4:	e000      	b.n	800abc8 <__cvt+0x44>
 800abc6:	2103      	movs	r1, #3
 800abc8:	ab03      	add	r3, sp, #12
 800abca:	9301      	str	r3, [sp, #4]
 800abcc:	ab02      	add	r3, sp, #8
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	ec47 6b10 	vmov	d0, r6, r7
 800abd4:	4653      	mov	r3, sl
 800abd6:	4622      	mov	r2, r4
 800abd8:	f000 fe76 	bl	800b8c8 <_dtoa_r>
 800abdc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800abe0:	4605      	mov	r5, r0
 800abe2:	d119      	bne.n	800ac18 <__cvt+0x94>
 800abe4:	f019 0f01 	tst.w	r9, #1
 800abe8:	d00e      	beq.n	800ac08 <__cvt+0x84>
 800abea:	eb00 0904 	add.w	r9, r0, r4
 800abee:	2200      	movs	r2, #0
 800abf0:	2300      	movs	r3, #0
 800abf2:	4630      	mov	r0, r6
 800abf4:	4639      	mov	r1, r7
 800abf6:	f7f5 ff6f 	bl	8000ad8 <__aeabi_dcmpeq>
 800abfa:	b108      	cbz	r0, 800ac00 <__cvt+0x7c>
 800abfc:	f8cd 900c 	str.w	r9, [sp, #12]
 800ac00:	2230      	movs	r2, #48	@ 0x30
 800ac02:	9b03      	ldr	r3, [sp, #12]
 800ac04:	454b      	cmp	r3, r9
 800ac06:	d31e      	bcc.n	800ac46 <__cvt+0xc2>
 800ac08:	9b03      	ldr	r3, [sp, #12]
 800ac0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac0c:	1b5b      	subs	r3, r3, r5
 800ac0e:	4628      	mov	r0, r5
 800ac10:	6013      	str	r3, [r2, #0]
 800ac12:	b004      	add	sp, #16
 800ac14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ac1c:	eb00 0904 	add.w	r9, r0, r4
 800ac20:	d1e5      	bne.n	800abee <__cvt+0x6a>
 800ac22:	7803      	ldrb	r3, [r0, #0]
 800ac24:	2b30      	cmp	r3, #48	@ 0x30
 800ac26:	d10a      	bne.n	800ac3e <__cvt+0xba>
 800ac28:	2200      	movs	r2, #0
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	4639      	mov	r1, r7
 800ac30:	f7f5 ff52 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac34:	b918      	cbnz	r0, 800ac3e <__cvt+0xba>
 800ac36:	f1c4 0401 	rsb	r4, r4, #1
 800ac3a:	f8ca 4000 	str.w	r4, [sl]
 800ac3e:	f8da 3000 	ldr.w	r3, [sl]
 800ac42:	4499      	add	r9, r3
 800ac44:	e7d3      	b.n	800abee <__cvt+0x6a>
 800ac46:	1c59      	adds	r1, r3, #1
 800ac48:	9103      	str	r1, [sp, #12]
 800ac4a:	701a      	strb	r2, [r3, #0]
 800ac4c:	e7d9      	b.n	800ac02 <__cvt+0x7e>

0800ac4e <__exponent>:
 800ac4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac50:	2900      	cmp	r1, #0
 800ac52:	bfba      	itte	lt
 800ac54:	4249      	neglt	r1, r1
 800ac56:	232d      	movlt	r3, #45	@ 0x2d
 800ac58:	232b      	movge	r3, #43	@ 0x2b
 800ac5a:	2909      	cmp	r1, #9
 800ac5c:	7002      	strb	r2, [r0, #0]
 800ac5e:	7043      	strb	r3, [r0, #1]
 800ac60:	dd29      	ble.n	800acb6 <__exponent+0x68>
 800ac62:	f10d 0307 	add.w	r3, sp, #7
 800ac66:	461d      	mov	r5, r3
 800ac68:	270a      	movs	r7, #10
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ac70:	fb07 1416 	mls	r4, r7, r6, r1
 800ac74:	3430      	adds	r4, #48	@ 0x30
 800ac76:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	2c63      	cmp	r4, #99	@ 0x63
 800ac7e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ac82:	4631      	mov	r1, r6
 800ac84:	dcf1      	bgt.n	800ac6a <__exponent+0x1c>
 800ac86:	3130      	adds	r1, #48	@ 0x30
 800ac88:	1e94      	subs	r4, r2, #2
 800ac8a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ac8e:	1c41      	adds	r1, r0, #1
 800ac90:	4623      	mov	r3, r4
 800ac92:	42ab      	cmp	r3, r5
 800ac94:	d30a      	bcc.n	800acac <__exponent+0x5e>
 800ac96:	f10d 0309 	add.w	r3, sp, #9
 800ac9a:	1a9b      	subs	r3, r3, r2
 800ac9c:	42ac      	cmp	r4, r5
 800ac9e:	bf88      	it	hi
 800aca0:	2300      	movhi	r3, #0
 800aca2:	3302      	adds	r3, #2
 800aca4:	4403      	add	r3, r0
 800aca6:	1a18      	subs	r0, r3, r0
 800aca8:	b003      	add	sp, #12
 800acaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acac:	f813 6b01 	ldrb.w	r6, [r3], #1
 800acb0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800acb4:	e7ed      	b.n	800ac92 <__exponent+0x44>
 800acb6:	2330      	movs	r3, #48	@ 0x30
 800acb8:	3130      	adds	r1, #48	@ 0x30
 800acba:	7083      	strb	r3, [r0, #2]
 800acbc:	70c1      	strb	r1, [r0, #3]
 800acbe:	1d03      	adds	r3, r0, #4
 800acc0:	e7f1      	b.n	800aca6 <__exponent+0x58>
	...

0800acc4 <_printf_float>:
 800acc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc8:	b08d      	sub	sp, #52	@ 0x34
 800acca:	460c      	mov	r4, r1
 800accc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800acd0:	4616      	mov	r6, r2
 800acd2:	461f      	mov	r7, r3
 800acd4:	4605      	mov	r5, r0
 800acd6:	f000 fcf5 	bl	800b6c4 <_localeconv_r>
 800acda:	6803      	ldr	r3, [r0, #0]
 800acdc:	9304      	str	r3, [sp, #16]
 800acde:	4618      	mov	r0, r3
 800ace0:	f7f5 face 	bl	8000280 <strlen>
 800ace4:	2300      	movs	r3, #0
 800ace6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ace8:	f8d8 3000 	ldr.w	r3, [r8]
 800acec:	9005      	str	r0, [sp, #20]
 800acee:	3307      	adds	r3, #7
 800acf0:	f023 0307 	bic.w	r3, r3, #7
 800acf4:	f103 0208 	add.w	r2, r3, #8
 800acf8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800acfc:	f8d4 b000 	ldr.w	fp, [r4]
 800ad00:	f8c8 2000 	str.w	r2, [r8]
 800ad04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ad0c:	9307      	str	r3, [sp, #28]
 800ad0e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ad12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ad16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad1a:	4b9c      	ldr	r3, [pc, #624]	@ (800af8c <_printf_float+0x2c8>)
 800ad1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad20:	f7f5 ff0c 	bl	8000b3c <__aeabi_dcmpun>
 800ad24:	bb70      	cbnz	r0, 800ad84 <_printf_float+0xc0>
 800ad26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad2a:	4b98      	ldr	r3, [pc, #608]	@ (800af8c <_printf_float+0x2c8>)
 800ad2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad30:	f7f5 fee6 	bl	8000b00 <__aeabi_dcmple>
 800ad34:	bb30      	cbnz	r0, 800ad84 <_printf_float+0xc0>
 800ad36:	2200      	movs	r2, #0
 800ad38:	2300      	movs	r3, #0
 800ad3a:	4640      	mov	r0, r8
 800ad3c:	4649      	mov	r1, r9
 800ad3e:	f7f5 fed5 	bl	8000aec <__aeabi_dcmplt>
 800ad42:	b110      	cbz	r0, 800ad4a <_printf_float+0x86>
 800ad44:	232d      	movs	r3, #45	@ 0x2d
 800ad46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad4a:	4a91      	ldr	r2, [pc, #580]	@ (800af90 <_printf_float+0x2cc>)
 800ad4c:	4b91      	ldr	r3, [pc, #580]	@ (800af94 <_printf_float+0x2d0>)
 800ad4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ad52:	bf8c      	ite	hi
 800ad54:	4690      	movhi	r8, r2
 800ad56:	4698      	movls	r8, r3
 800ad58:	2303      	movs	r3, #3
 800ad5a:	6123      	str	r3, [r4, #16]
 800ad5c:	f02b 0304 	bic.w	r3, fp, #4
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	f04f 0900 	mov.w	r9, #0
 800ad66:	9700      	str	r7, [sp, #0]
 800ad68:	4633      	mov	r3, r6
 800ad6a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ad6c:	4621      	mov	r1, r4
 800ad6e:	4628      	mov	r0, r5
 800ad70:	f000 f9d2 	bl	800b118 <_printf_common>
 800ad74:	3001      	adds	r0, #1
 800ad76:	f040 808d 	bne.w	800ae94 <_printf_float+0x1d0>
 800ad7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad7e:	b00d      	add	sp, #52	@ 0x34
 800ad80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad84:	4642      	mov	r2, r8
 800ad86:	464b      	mov	r3, r9
 800ad88:	4640      	mov	r0, r8
 800ad8a:	4649      	mov	r1, r9
 800ad8c:	f7f5 fed6 	bl	8000b3c <__aeabi_dcmpun>
 800ad90:	b140      	cbz	r0, 800ada4 <_printf_float+0xe0>
 800ad92:	464b      	mov	r3, r9
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	bfbc      	itt	lt
 800ad98:	232d      	movlt	r3, #45	@ 0x2d
 800ad9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ad9e:	4a7e      	ldr	r2, [pc, #504]	@ (800af98 <_printf_float+0x2d4>)
 800ada0:	4b7e      	ldr	r3, [pc, #504]	@ (800af9c <_printf_float+0x2d8>)
 800ada2:	e7d4      	b.n	800ad4e <_printf_float+0x8a>
 800ada4:	6863      	ldr	r3, [r4, #4]
 800ada6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800adaa:	9206      	str	r2, [sp, #24]
 800adac:	1c5a      	adds	r2, r3, #1
 800adae:	d13b      	bne.n	800ae28 <_printf_float+0x164>
 800adb0:	2306      	movs	r3, #6
 800adb2:	6063      	str	r3, [r4, #4]
 800adb4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800adb8:	2300      	movs	r3, #0
 800adba:	6022      	str	r2, [r4, #0]
 800adbc:	9303      	str	r3, [sp, #12]
 800adbe:	ab0a      	add	r3, sp, #40	@ 0x28
 800adc0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800adc4:	ab09      	add	r3, sp, #36	@ 0x24
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	6861      	ldr	r1, [r4, #4]
 800adca:	ec49 8b10 	vmov	d0, r8, r9
 800adce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800add2:	4628      	mov	r0, r5
 800add4:	f7ff fed6 	bl	800ab84 <__cvt>
 800add8:	9b06      	ldr	r3, [sp, #24]
 800adda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800addc:	2b47      	cmp	r3, #71	@ 0x47
 800adde:	4680      	mov	r8, r0
 800ade0:	d129      	bne.n	800ae36 <_printf_float+0x172>
 800ade2:	1cc8      	adds	r0, r1, #3
 800ade4:	db02      	blt.n	800adec <_printf_float+0x128>
 800ade6:	6863      	ldr	r3, [r4, #4]
 800ade8:	4299      	cmp	r1, r3
 800adea:	dd41      	ble.n	800ae70 <_printf_float+0x1ac>
 800adec:	f1aa 0a02 	sub.w	sl, sl, #2
 800adf0:	fa5f fa8a 	uxtb.w	sl, sl
 800adf4:	3901      	subs	r1, #1
 800adf6:	4652      	mov	r2, sl
 800adf8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800adfc:	9109      	str	r1, [sp, #36]	@ 0x24
 800adfe:	f7ff ff26 	bl	800ac4e <__exponent>
 800ae02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae04:	1813      	adds	r3, r2, r0
 800ae06:	2a01      	cmp	r2, #1
 800ae08:	4681      	mov	r9, r0
 800ae0a:	6123      	str	r3, [r4, #16]
 800ae0c:	dc02      	bgt.n	800ae14 <_printf_float+0x150>
 800ae0e:	6822      	ldr	r2, [r4, #0]
 800ae10:	07d2      	lsls	r2, r2, #31
 800ae12:	d501      	bpl.n	800ae18 <_printf_float+0x154>
 800ae14:	3301      	adds	r3, #1
 800ae16:	6123      	str	r3, [r4, #16]
 800ae18:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d0a2      	beq.n	800ad66 <_printf_float+0xa2>
 800ae20:	232d      	movs	r3, #45	@ 0x2d
 800ae22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae26:	e79e      	b.n	800ad66 <_printf_float+0xa2>
 800ae28:	9a06      	ldr	r2, [sp, #24]
 800ae2a:	2a47      	cmp	r2, #71	@ 0x47
 800ae2c:	d1c2      	bne.n	800adb4 <_printf_float+0xf0>
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1c0      	bne.n	800adb4 <_printf_float+0xf0>
 800ae32:	2301      	movs	r3, #1
 800ae34:	e7bd      	b.n	800adb2 <_printf_float+0xee>
 800ae36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae3a:	d9db      	bls.n	800adf4 <_printf_float+0x130>
 800ae3c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ae40:	d118      	bne.n	800ae74 <_printf_float+0x1b0>
 800ae42:	2900      	cmp	r1, #0
 800ae44:	6863      	ldr	r3, [r4, #4]
 800ae46:	dd0b      	ble.n	800ae60 <_printf_float+0x19c>
 800ae48:	6121      	str	r1, [r4, #16]
 800ae4a:	b913      	cbnz	r3, 800ae52 <_printf_float+0x18e>
 800ae4c:	6822      	ldr	r2, [r4, #0]
 800ae4e:	07d0      	lsls	r0, r2, #31
 800ae50:	d502      	bpl.n	800ae58 <_printf_float+0x194>
 800ae52:	3301      	adds	r3, #1
 800ae54:	440b      	add	r3, r1
 800ae56:	6123      	str	r3, [r4, #16]
 800ae58:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ae5a:	f04f 0900 	mov.w	r9, #0
 800ae5e:	e7db      	b.n	800ae18 <_printf_float+0x154>
 800ae60:	b913      	cbnz	r3, 800ae68 <_printf_float+0x1a4>
 800ae62:	6822      	ldr	r2, [r4, #0]
 800ae64:	07d2      	lsls	r2, r2, #31
 800ae66:	d501      	bpl.n	800ae6c <_printf_float+0x1a8>
 800ae68:	3302      	adds	r3, #2
 800ae6a:	e7f4      	b.n	800ae56 <_printf_float+0x192>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e7f2      	b.n	800ae56 <_printf_float+0x192>
 800ae70:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ae74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae76:	4299      	cmp	r1, r3
 800ae78:	db05      	blt.n	800ae86 <_printf_float+0x1c2>
 800ae7a:	6823      	ldr	r3, [r4, #0]
 800ae7c:	6121      	str	r1, [r4, #16]
 800ae7e:	07d8      	lsls	r0, r3, #31
 800ae80:	d5ea      	bpl.n	800ae58 <_printf_float+0x194>
 800ae82:	1c4b      	adds	r3, r1, #1
 800ae84:	e7e7      	b.n	800ae56 <_printf_float+0x192>
 800ae86:	2900      	cmp	r1, #0
 800ae88:	bfd4      	ite	le
 800ae8a:	f1c1 0202 	rsble	r2, r1, #2
 800ae8e:	2201      	movgt	r2, #1
 800ae90:	4413      	add	r3, r2
 800ae92:	e7e0      	b.n	800ae56 <_printf_float+0x192>
 800ae94:	6823      	ldr	r3, [r4, #0]
 800ae96:	055a      	lsls	r2, r3, #21
 800ae98:	d407      	bmi.n	800aeaa <_printf_float+0x1e6>
 800ae9a:	6923      	ldr	r3, [r4, #16]
 800ae9c:	4642      	mov	r2, r8
 800ae9e:	4631      	mov	r1, r6
 800aea0:	4628      	mov	r0, r5
 800aea2:	47b8      	blx	r7
 800aea4:	3001      	adds	r0, #1
 800aea6:	d12b      	bne.n	800af00 <_printf_float+0x23c>
 800aea8:	e767      	b.n	800ad7a <_printf_float+0xb6>
 800aeaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aeae:	f240 80dd 	bls.w	800b06c <_printf_float+0x3a8>
 800aeb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	2300      	movs	r3, #0
 800aeba:	f7f5 fe0d 	bl	8000ad8 <__aeabi_dcmpeq>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d033      	beq.n	800af2a <_printf_float+0x266>
 800aec2:	4a37      	ldr	r2, [pc, #220]	@ (800afa0 <_printf_float+0x2dc>)
 800aec4:	2301      	movs	r3, #1
 800aec6:	4631      	mov	r1, r6
 800aec8:	4628      	mov	r0, r5
 800aeca:	47b8      	blx	r7
 800aecc:	3001      	adds	r0, #1
 800aece:	f43f af54 	beq.w	800ad7a <_printf_float+0xb6>
 800aed2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aed6:	4543      	cmp	r3, r8
 800aed8:	db02      	blt.n	800aee0 <_printf_float+0x21c>
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	07d8      	lsls	r0, r3, #31
 800aede:	d50f      	bpl.n	800af00 <_printf_float+0x23c>
 800aee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aee4:	4631      	mov	r1, r6
 800aee6:	4628      	mov	r0, r5
 800aee8:	47b8      	blx	r7
 800aeea:	3001      	adds	r0, #1
 800aeec:	f43f af45 	beq.w	800ad7a <_printf_float+0xb6>
 800aef0:	f04f 0900 	mov.w	r9, #0
 800aef4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800aef8:	f104 0a1a 	add.w	sl, r4, #26
 800aefc:	45c8      	cmp	r8, r9
 800aefe:	dc09      	bgt.n	800af14 <_printf_float+0x250>
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	079b      	lsls	r3, r3, #30
 800af04:	f100 8103 	bmi.w	800b10e <_printf_float+0x44a>
 800af08:	68e0      	ldr	r0, [r4, #12]
 800af0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af0c:	4298      	cmp	r0, r3
 800af0e:	bfb8      	it	lt
 800af10:	4618      	movlt	r0, r3
 800af12:	e734      	b.n	800ad7e <_printf_float+0xba>
 800af14:	2301      	movs	r3, #1
 800af16:	4652      	mov	r2, sl
 800af18:	4631      	mov	r1, r6
 800af1a:	4628      	mov	r0, r5
 800af1c:	47b8      	blx	r7
 800af1e:	3001      	adds	r0, #1
 800af20:	f43f af2b 	beq.w	800ad7a <_printf_float+0xb6>
 800af24:	f109 0901 	add.w	r9, r9, #1
 800af28:	e7e8      	b.n	800aefc <_printf_float+0x238>
 800af2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	dc39      	bgt.n	800afa4 <_printf_float+0x2e0>
 800af30:	4a1b      	ldr	r2, [pc, #108]	@ (800afa0 <_printf_float+0x2dc>)
 800af32:	2301      	movs	r3, #1
 800af34:	4631      	mov	r1, r6
 800af36:	4628      	mov	r0, r5
 800af38:	47b8      	blx	r7
 800af3a:	3001      	adds	r0, #1
 800af3c:	f43f af1d 	beq.w	800ad7a <_printf_float+0xb6>
 800af40:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800af44:	ea59 0303 	orrs.w	r3, r9, r3
 800af48:	d102      	bne.n	800af50 <_printf_float+0x28c>
 800af4a:	6823      	ldr	r3, [r4, #0]
 800af4c:	07d9      	lsls	r1, r3, #31
 800af4e:	d5d7      	bpl.n	800af00 <_printf_float+0x23c>
 800af50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af54:	4631      	mov	r1, r6
 800af56:	4628      	mov	r0, r5
 800af58:	47b8      	blx	r7
 800af5a:	3001      	adds	r0, #1
 800af5c:	f43f af0d 	beq.w	800ad7a <_printf_float+0xb6>
 800af60:	f04f 0a00 	mov.w	sl, #0
 800af64:	f104 0b1a 	add.w	fp, r4, #26
 800af68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af6a:	425b      	negs	r3, r3
 800af6c:	4553      	cmp	r3, sl
 800af6e:	dc01      	bgt.n	800af74 <_printf_float+0x2b0>
 800af70:	464b      	mov	r3, r9
 800af72:	e793      	b.n	800ae9c <_printf_float+0x1d8>
 800af74:	2301      	movs	r3, #1
 800af76:	465a      	mov	r2, fp
 800af78:	4631      	mov	r1, r6
 800af7a:	4628      	mov	r0, r5
 800af7c:	47b8      	blx	r7
 800af7e:	3001      	adds	r0, #1
 800af80:	f43f aefb 	beq.w	800ad7a <_printf_float+0xb6>
 800af84:	f10a 0a01 	add.w	sl, sl, #1
 800af88:	e7ee      	b.n	800af68 <_printf_float+0x2a4>
 800af8a:	bf00      	nop
 800af8c:	7fefffff 	.word	0x7fefffff
 800af90:	0800d960 	.word	0x0800d960
 800af94:	0800d95c 	.word	0x0800d95c
 800af98:	0800d968 	.word	0x0800d968
 800af9c:	0800d964 	.word	0x0800d964
 800afa0:	0800d96c 	.word	0x0800d96c
 800afa4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800afa6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800afaa:	4553      	cmp	r3, sl
 800afac:	bfa8      	it	ge
 800afae:	4653      	movge	r3, sl
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	4699      	mov	r9, r3
 800afb4:	dc36      	bgt.n	800b024 <_printf_float+0x360>
 800afb6:	f04f 0b00 	mov.w	fp, #0
 800afba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afbe:	f104 021a 	add.w	r2, r4, #26
 800afc2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800afc4:	9306      	str	r3, [sp, #24]
 800afc6:	eba3 0309 	sub.w	r3, r3, r9
 800afca:	455b      	cmp	r3, fp
 800afcc:	dc31      	bgt.n	800b032 <_printf_float+0x36e>
 800afce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afd0:	459a      	cmp	sl, r3
 800afd2:	dc3a      	bgt.n	800b04a <_printf_float+0x386>
 800afd4:	6823      	ldr	r3, [r4, #0]
 800afd6:	07da      	lsls	r2, r3, #31
 800afd8:	d437      	bmi.n	800b04a <_printf_float+0x386>
 800afda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afdc:	ebaa 0903 	sub.w	r9, sl, r3
 800afe0:	9b06      	ldr	r3, [sp, #24]
 800afe2:	ebaa 0303 	sub.w	r3, sl, r3
 800afe6:	4599      	cmp	r9, r3
 800afe8:	bfa8      	it	ge
 800afea:	4699      	movge	r9, r3
 800afec:	f1b9 0f00 	cmp.w	r9, #0
 800aff0:	dc33      	bgt.n	800b05a <_printf_float+0x396>
 800aff2:	f04f 0800 	mov.w	r8, #0
 800aff6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800affa:	f104 0b1a 	add.w	fp, r4, #26
 800affe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b000:	ebaa 0303 	sub.w	r3, sl, r3
 800b004:	eba3 0309 	sub.w	r3, r3, r9
 800b008:	4543      	cmp	r3, r8
 800b00a:	f77f af79 	ble.w	800af00 <_printf_float+0x23c>
 800b00e:	2301      	movs	r3, #1
 800b010:	465a      	mov	r2, fp
 800b012:	4631      	mov	r1, r6
 800b014:	4628      	mov	r0, r5
 800b016:	47b8      	blx	r7
 800b018:	3001      	adds	r0, #1
 800b01a:	f43f aeae 	beq.w	800ad7a <_printf_float+0xb6>
 800b01e:	f108 0801 	add.w	r8, r8, #1
 800b022:	e7ec      	b.n	800affe <_printf_float+0x33a>
 800b024:	4642      	mov	r2, r8
 800b026:	4631      	mov	r1, r6
 800b028:	4628      	mov	r0, r5
 800b02a:	47b8      	blx	r7
 800b02c:	3001      	adds	r0, #1
 800b02e:	d1c2      	bne.n	800afb6 <_printf_float+0x2f2>
 800b030:	e6a3      	b.n	800ad7a <_printf_float+0xb6>
 800b032:	2301      	movs	r3, #1
 800b034:	4631      	mov	r1, r6
 800b036:	4628      	mov	r0, r5
 800b038:	9206      	str	r2, [sp, #24]
 800b03a:	47b8      	blx	r7
 800b03c:	3001      	adds	r0, #1
 800b03e:	f43f ae9c 	beq.w	800ad7a <_printf_float+0xb6>
 800b042:	9a06      	ldr	r2, [sp, #24]
 800b044:	f10b 0b01 	add.w	fp, fp, #1
 800b048:	e7bb      	b.n	800afc2 <_printf_float+0x2fe>
 800b04a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b04e:	4631      	mov	r1, r6
 800b050:	4628      	mov	r0, r5
 800b052:	47b8      	blx	r7
 800b054:	3001      	adds	r0, #1
 800b056:	d1c0      	bne.n	800afda <_printf_float+0x316>
 800b058:	e68f      	b.n	800ad7a <_printf_float+0xb6>
 800b05a:	9a06      	ldr	r2, [sp, #24]
 800b05c:	464b      	mov	r3, r9
 800b05e:	4442      	add	r2, r8
 800b060:	4631      	mov	r1, r6
 800b062:	4628      	mov	r0, r5
 800b064:	47b8      	blx	r7
 800b066:	3001      	adds	r0, #1
 800b068:	d1c3      	bne.n	800aff2 <_printf_float+0x32e>
 800b06a:	e686      	b.n	800ad7a <_printf_float+0xb6>
 800b06c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b070:	f1ba 0f01 	cmp.w	sl, #1
 800b074:	dc01      	bgt.n	800b07a <_printf_float+0x3b6>
 800b076:	07db      	lsls	r3, r3, #31
 800b078:	d536      	bpl.n	800b0e8 <_printf_float+0x424>
 800b07a:	2301      	movs	r3, #1
 800b07c:	4642      	mov	r2, r8
 800b07e:	4631      	mov	r1, r6
 800b080:	4628      	mov	r0, r5
 800b082:	47b8      	blx	r7
 800b084:	3001      	adds	r0, #1
 800b086:	f43f ae78 	beq.w	800ad7a <_printf_float+0xb6>
 800b08a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b08e:	4631      	mov	r1, r6
 800b090:	4628      	mov	r0, r5
 800b092:	47b8      	blx	r7
 800b094:	3001      	adds	r0, #1
 800b096:	f43f ae70 	beq.w	800ad7a <_printf_float+0xb6>
 800b09a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b09e:	2200      	movs	r2, #0
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b0a6:	f7f5 fd17 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0aa:	b9c0      	cbnz	r0, 800b0de <_printf_float+0x41a>
 800b0ac:	4653      	mov	r3, sl
 800b0ae:	f108 0201 	add.w	r2, r8, #1
 800b0b2:	4631      	mov	r1, r6
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	47b8      	blx	r7
 800b0b8:	3001      	adds	r0, #1
 800b0ba:	d10c      	bne.n	800b0d6 <_printf_float+0x412>
 800b0bc:	e65d      	b.n	800ad7a <_printf_float+0xb6>
 800b0be:	2301      	movs	r3, #1
 800b0c0:	465a      	mov	r2, fp
 800b0c2:	4631      	mov	r1, r6
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	47b8      	blx	r7
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	f43f ae56 	beq.w	800ad7a <_printf_float+0xb6>
 800b0ce:	f108 0801 	add.w	r8, r8, #1
 800b0d2:	45d0      	cmp	r8, sl
 800b0d4:	dbf3      	blt.n	800b0be <_printf_float+0x3fa>
 800b0d6:	464b      	mov	r3, r9
 800b0d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b0dc:	e6df      	b.n	800ae9e <_printf_float+0x1da>
 800b0de:	f04f 0800 	mov.w	r8, #0
 800b0e2:	f104 0b1a 	add.w	fp, r4, #26
 800b0e6:	e7f4      	b.n	800b0d2 <_printf_float+0x40e>
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	4642      	mov	r2, r8
 800b0ec:	e7e1      	b.n	800b0b2 <_printf_float+0x3ee>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	464a      	mov	r2, r9
 800b0f2:	4631      	mov	r1, r6
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	47b8      	blx	r7
 800b0f8:	3001      	adds	r0, #1
 800b0fa:	f43f ae3e 	beq.w	800ad7a <_printf_float+0xb6>
 800b0fe:	f108 0801 	add.w	r8, r8, #1
 800b102:	68e3      	ldr	r3, [r4, #12]
 800b104:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b106:	1a5b      	subs	r3, r3, r1
 800b108:	4543      	cmp	r3, r8
 800b10a:	dcf0      	bgt.n	800b0ee <_printf_float+0x42a>
 800b10c:	e6fc      	b.n	800af08 <_printf_float+0x244>
 800b10e:	f04f 0800 	mov.w	r8, #0
 800b112:	f104 0919 	add.w	r9, r4, #25
 800b116:	e7f4      	b.n	800b102 <_printf_float+0x43e>

0800b118 <_printf_common>:
 800b118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b11c:	4616      	mov	r6, r2
 800b11e:	4698      	mov	r8, r3
 800b120:	688a      	ldr	r2, [r1, #8]
 800b122:	690b      	ldr	r3, [r1, #16]
 800b124:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b128:	4293      	cmp	r3, r2
 800b12a:	bfb8      	it	lt
 800b12c:	4613      	movlt	r3, r2
 800b12e:	6033      	str	r3, [r6, #0]
 800b130:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b134:	4607      	mov	r7, r0
 800b136:	460c      	mov	r4, r1
 800b138:	b10a      	cbz	r2, 800b13e <_printf_common+0x26>
 800b13a:	3301      	adds	r3, #1
 800b13c:	6033      	str	r3, [r6, #0]
 800b13e:	6823      	ldr	r3, [r4, #0]
 800b140:	0699      	lsls	r1, r3, #26
 800b142:	bf42      	ittt	mi
 800b144:	6833      	ldrmi	r3, [r6, #0]
 800b146:	3302      	addmi	r3, #2
 800b148:	6033      	strmi	r3, [r6, #0]
 800b14a:	6825      	ldr	r5, [r4, #0]
 800b14c:	f015 0506 	ands.w	r5, r5, #6
 800b150:	d106      	bne.n	800b160 <_printf_common+0x48>
 800b152:	f104 0a19 	add.w	sl, r4, #25
 800b156:	68e3      	ldr	r3, [r4, #12]
 800b158:	6832      	ldr	r2, [r6, #0]
 800b15a:	1a9b      	subs	r3, r3, r2
 800b15c:	42ab      	cmp	r3, r5
 800b15e:	dc26      	bgt.n	800b1ae <_printf_common+0x96>
 800b160:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b164:	6822      	ldr	r2, [r4, #0]
 800b166:	3b00      	subs	r3, #0
 800b168:	bf18      	it	ne
 800b16a:	2301      	movne	r3, #1
 800b16c:	0692      	lsls	r2, r2, #26
 800b16e:	d42b      	bmi.n	800b1c8 <_printf_common+0xb0>
 800b170:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b174:	4641      	mov	r1, r8
 800b176:	4638      	mov	r0, r7
 800b178:	47c8      	blx	r9
 800b17a:	3001      	adds	r0, #1
 800b17c:	d01e      	beq.n	800b1bc <_printf_common+0xa4>
 800b17e:	6823      	ldr	r3, [r4, #0]
 800b180:	6922      	ldr	r2, [r4, #16]
 800b182:	f003 0306 	and.w	r3, r3, #6
 800b186:	2b04      	cmp	r3, #4
 800b188:	bf02      	ittt	eq
 800b18a:	68e5      	ldreq	r5, [r4, #12]
 800b18c:	6833      	ldreq	r3, [r6, #0]
 800b18e:	1aed      	subeq	r5, r5, r3
 800b190:	68a3      	ldr	r3, [r4, #8]
 800b192:	bf0c      	ite	eq
 800b194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b198:	2500      	movne	r5, #0
 800b19a:	4293      	cmp	r3, r2
 800b19c:	bfc4      	itt	gt
 800b19e:	1a9b      	subgt	r3, r3, r2
 800b1a0:	18ed      	addgt	r5, r5, r3
 800b1a2:	2600      	movs	r6, #0
 800b1a4:	341a      	adds	r4, #26
 800b1a6:	42b5      	cmp	r5, r6
 800b1a8:	d11a      	bne.n	800b1e0 <_printf_common+0xc8>
 800b1aa:	2000      	movs	r0, #0
 800b1ac:	e008      	b.n	800b1c0 <_printf_common+0xa8>
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	4652      	mov	r2, sl
 800b1b2:	4641      	mov	r1, r8
 800b1b4:	4638      	mov	r0, r7
 800b1b6:	47c8      	blx	r9
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	d103      	bne.n	800b1c4 <_printf_common+0xac>
 800b1bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c4:	3501      	adds	r5, #1
 800b1c6:	e7c6      	b.n	800b156 <_printf_common+0x3e>
 800b1c8:	18e1      	adds	r1, r4, r3
 800b1ca:	1c5a      	adds	r2, r3, #1
 800b1cc:	2030      	movs	r0, #48	@ 0x30
 800b1ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b1d2:	4422      	add	r2, r4
 800b1d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b1d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b1dc:	3302      	adds	r3, #2
 800b1de:	e7c7      	b.n	800b170 <_printf_common+0x58>
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	4622      	mov	r2, r4
 800b1e4:	4641      	mov	r1, r8
 800b1e6:	4638      	mov	r0, r7
 800b1e8:	47c8      	blx	r9
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	d0e6      	beq.n	800b1bc <_printf_common+0xa4>
 800b1ee:	3601      	adds	r6, #1
 800b1f0:	e7d9      	b.n	800b1a6 <_printf_common+0x8e>
	...

0800b1f4 <_printf_i>:
 800b1f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1f8:	7e0f      	ldrb	r7, [r1, #24]
 800b1fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b1fc:	2f78      	cmp	r7, #120	@ 0x78
 800b1fe:	4691      	mov	r9, r2
 800b200:	4680      	mov	r8, r0
 800b202:	460c      	mov	r4, r1
 800b204:	469a      	mov	sl, r3
 800b206:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b20a:	d807      	bhi.n	800b21c <_printf_i+0x28>
 800b20c:	2f62      	cmp	r7, #98	@ 0x62
 800b20e:	d80a      	bhi.n	800b226 <_printf_i+0x32>
 800b210:	2f00      	cmp	r7, #0
 800b212:	f000 80d1 	beq.w	800b3b8 <_printf_i+0x1c4>
 800b216:	2f58      	cmp	r7, #88	@ 0x58
 800b218:	f000 80b8 	beq.w	800b38c <_printf_i+0x198>
 800b21c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b220:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b224:	e03a      	b.n	800b29c <_printf_i+0xa8>
 800b226:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b22a:	2b15      	cmp	r3, #21
 800b22c:	d8f6      	bhi.n	800b21c <_printf_i+0x28>
 800b22e:	a101      	add	r1, pc, #4	@ (adr r1, 800b234 <_printf_i+0x40>)
 800b230:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b234:	0800b28d 	.word	0x0800b28d
 800b238:	0800b2a1 	.word	0x0800b2a1
 800b23c:	0800b21d 	.word	0x0800b21d
 800b240:	0800b21d 	.word	0x0800b21d
 800b244:	0800b21d 	.word	0x0800b21d
 800b248:	0800b21d 	.word	0x0800b21d
 800b24c:	0800b2a1 	.word	0x0800b2a1
 800b250:	0800b21d 	.word	0x0800b21d
 800b254:	0800b21d 	.word	0x0800b21d
 800b258:	0800b21d 	.word	0x0800b21d
 800b25c:	0800b21d 	.word	0x0800b21d
 800b260:	0800b39f 	.word	0x0800b39f
 800b264:	0800b2cb 	.word	0x0800b2cb
 800b268:	0800b359 	.word	0x0800b359
 800b26c:	0800b21d 	.word	0x0800b21d
 800b270:	0800b21d 	.word	0x0800b21d
 800b274:	0800b3c1 	.word	0x0800b3c1
 800b278:	0800b21d 	.word	0x0800b21d
 800b27c:	0800b2cb 	.word	0x0800b2cb
 800b280:	0800b21d 	.word	0x0800b21d
 800b284:	0800b21d 	.word	0x0800b21d
 800b288:	0800b361 	.word	0x0800b361
 800b28c:	6833      	ldr	r3, [r6, #0]
 800b28e:	1d1a      	adds	r2, r3, #4
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	6032      	str	r2, [r6, #0]
 800b294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b298:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b29c:	2301      	movs	r3, #1
 800b29e:	e09c      	b.n	800b3da <_printf_i+0x1e6>
 800b2a0:	6833      	ldr	r3, [r6, #0]
 800b2a2:	6820      	ldr	r0, [r4, #0]
 800b2a4:	1d19      	adds	r1, r3, #4
 800b2a6:	6031      	str	r1, [r6, #0]
 800b2a8:	0606      	lsls	r6, r0, #24
 800b2aa:	d501      	bpl.n	800b2b0 <_printf_i+0xbc>
 800b2ac:	681d      	ldr	r5, [r3, #0]
 800b2ae:	e003      	b.n	800b2b8 <_printf_i+0xc4>
 800b2b0:	0645      	lsls	r5, r0, #25
 800b2b2:	d5fb      	bpl.n	800b2ac <_printf_i+0xb8>
 800b2b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b2b8:	2d00      	cmp	r5, #0
 800b2ba:	da03      	bge.n	800b2c4 <_printf_i+0xd0>
 800b2bc:	232d      	movs	r3, #45	@ 0x2d
 800b2be:	426d      	negs	r5, r5
 800b2c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2c4:	4858      	ldr	r0, [pc, #352]	@ (800b428 <_printf_i+0x234>)
 800b2c6:	230a      	movs	r3, #10
 800b2c8:	e011      	b.n	800b2ee <_printf_i+0xfa>
 800b2ca:	6821      	ldr	r1, [r4, #0]
 800b2cc:	6833      	ldr	r3, [r6, #0]
 800b2ce:	0608      	lsls	r0, r1, #24
 800b2d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b2d4:	d402      	bmi.n	800b2dc <_printf_i+0xe8>
 800b2d6:	0649      	lsls	r1, r1, #25
 800b2d8:	bf48      	it	mi
 800b2da:	b2ad      	uxthmi	r5, r5
 800b2dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b2de:	4852      	ldr	r0, [pc, #328]	@ (800b428 <_printf_i+0x234>)
 800b2e0:	6033      	str	r3, [r6, #0]
 800b2e2:	bf14      	ite	ne
 800b2e4:	230a      	movne	r3, #10
 800b2e6:	2308      	moveq	r3, #8
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b2ee:	6866      	ldr	r6, [r4, #4]
 800b2f0:	60a6      	str	r6, [r4, #8]
 800b2f2:	2e00      	cmp	r6, #0
 800b2f4:	db05      	blt.n	800b302 <_printf_i+0x10e>
 800b2f6:	6821      	ldr	r1, [r4, #0]
 800b2f8:	432e      	orrs	r6, r5
 800b2fa:	f021 0104 	bic.w	r1, r1, #4
 800b2fe:	6021      	str	r1, [r4, #0]
 800b300:	d04b      	beq.n	800b39a <_printf_i+0x1a6>
 800b302:	4616      	mov	r6, r2
 800b304:	fbb5 f1f3 	udiv	r1, r5, r3
 800b308:	fb03 5711 	mls	r7, r3, r1, r5
 800b30c:	5dc7      	ldrb	r7, [r0, r7]
 800b30e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b312:	462f      	mov	r7, r5
 800b314:	42bb      	cmp	r3, r7
 800b316:	460d      	mov	r5, r1
 800b318:	d9f4      	bls.n	800b304 <_printf_i+0x110>
 800b31a:	2b08      	cmp	r3, #8
 800b31c:	d10b      	bne.n	800b336 <_printf_i+0x142>
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	07df      	lsls	r7, r3, #31
 800b322:	d508      	bpl.n	800b336 <_printf_i+0x142>
 800b324:	6923      	ldr	r3, [r4, #16]
 800b326:	6861      	ldr	r1, [r4, #4]
 800b328:	4299      	cmp	r1, r3
 800b32a:	bfde      	ittt	le
 800b32c:	2330      	movle	r3, #48	@ 0x30
 800b32e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b332:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b336:	1b92      	subs	r2, r2, r6
 800b338:	6122      	str	r2, [r4, #16]
 800b33a:	f8cd a000 	str.w	sl, [sp]
 800b33e:	464b      	mov	r3, r9
 800b340:	aa03      	add	r2, sp, #12
 800b342:	4621      	mov	r1, r4
 800b344:	4640      	mov	r0, r8
 800b346:	f7ff fee7 	bl	800b118 <_printf_common>
 800b34a:	3001      	adds	r0, #1
 800b34c:	d14a      	bne.n	800b3e4 <_printf_i+0x1f0>
 800b34e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b352:	b004      	add	sp, #16
 800b354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b358:	6823      	ldr	r3, [r4, #0]
 800b35a:	f043 0320 	orr.w	r3, r3, #32
 800b35e:	6023      	str	r3, [r4, #0]
 800b360:	4832      	ldr	r0, [pc, #200]	@ (800b42c <_printf_i+0x238>)
 800b362:	2778      	movs	r7, #120	@ 0x78
 800b364:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b368:	6823      	ldr	r3, [r4, #0]
 800b36a:	6831      	ldr	r1, [r6, #0]
 800b36c:	061f      	lsls	r7, r3, #24
 800b36e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b372:	d402      	bmi.n	800b37a <_printf_i+0x186>
 800b374:	065f      	lsls	r7, r3, #25
 800b376:	bf48      	it	mi
 800b378:	b2ad      	uxthmi	r5, r5
 800b37a:	6031      	str	r1, [r6, #0]
 800b37c:	07d9      	lsls	r1, r3, #31
 800b37e:	bf44      	itt	mi
 800b380:	f043 0320 	orrmi.w	r3, r3, #32
 800b384:	6023      	strmi	r3, [r4, #0]
 800b386:	b11d      	cbz	r5, 800b390 <_printf_i+0x19c>
 800b388:	2310      	movs	r3, #16
 800b38a:	e7ad      	b.n	800b2e8 <_printf_i+0xf4>
 800b38c:	4826      	ldr	r0, [pc, #152]	@ (800b428 <_printf_i+0x234>)
 800b38e:	e7e9      	b.n	800b364 <_printf_i+0x170>
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	f023 0320 	bic.w	r3, r3, #32
 800b396:	6023      	str	r3, [r4, #0]
 800b398:	e7f6      	b.n	800b388 <_printf_i+0x194>
 800b39a:	4616      	mov	r6, r2
 800b39c:	e7bd      	b.n	800b31a <_printf_i+0x126>
 800b39e:	6833      	ldr	r3, [r6, #0]
 800b3a0:	6825      	ldr	r5, [r4, #0]
 800b3a2:	6961      	ldr	r1, [r4, #20]
 800b3a4:	1d18      	adds	r0, r3, #4
 800b3a6:	6030      	str	r0, [r6, #0]
 800b3a8:	062e      	lsls	r6, r5, #24
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	d501      	bpl.n	800b3b2 <_printf_i+0x1be>
 800b3ae:	6019      	str	r1, [r3, #0]
 800b3b0:	e002      	b.n	800b3b8 <_printf_i+0x1c4>
 800b3b2:	0668      	lsls	r0, r5, #25
 800b3b4:	d5fb      	bpl.n	800b3ae <_printf_i+0x1ba>
 800b3b6:	8019      	strh	r1, [r3, #0]
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	6123      	str	r3, [r4, #16]
 800b3bc:	4616      	mov	r6, r2
 800b3be:	e7bc      	b.n	800b33a <_printf_i+0x146>
 800b3c0:	6833      	ldr	r3, [r6, #0]
 800b3c2:	1d1a      	adds	r2, r3, #4
 800b3c4:	6032      	str	r2, [r6, #0]
 800b3c6:	681e      	ldr	r6, [r3, #0]
 800b3c8:	6862      	ldr	r2, [r4, #4]
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	f7f4 ff07 	bl	80001e0 <memchr>
 800b3d2:	b108      	cbz	r0, 800b3d8 <_printf_i+0x1e4>
 800b3d4:	1b80      	subs	r0, r0, r6
 800b3d6:	6060      	str	r0, [r4, #4]
 800b3d8:	6863      	ldr	r3, [r4, #4]
 800b3da:	6123      	str	r3, [r4, #16]
 800b3dc:	2300      	movs	r3, #0
 800b3de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3e2:	e7aa      	b.n	800b33a <_printf_i+0x146>
 800b3e4:	6923      	ldr	r3, [r4, #16]
 800b3e6:	4632      	mov	r2, r6
 800b3e8:	4649      	mov	r1, r9
 800b3ea:	4640      	mov	r0, r8
 800b3ec:	47d0      	blx	sl
 800b3ee:	3001      	adds	r0, #1
 800b3f0:	d0ad      	beq.n	800b34e <_printf_i+0x15a>
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	079b      	lsls	r3, r3, #30
 800b3f6:	d413      	bmi.n	800b420 <_printf_i+0x22c>
 800b3f8:	68e0      	ldr	r0, [r4, #12]
 800b3fa:	9b03      	ldr	r3, [sp, #12]
 800b3fc:	4298      	cmp	r0, r3
 800b3fe:	bfb8      	it	lt
 800b400:	4618      	movlt	r0, r3
 800b402:	e7a6      	b.n	800b352 <_printf_i+0x15e>
 800b404:	2301      	movs	r3, #1
 800b406:	4632      	mov	r2, r6
 800b408:	4649      	mov	r1, r9
 800b40a:	4640      	mov	r0, r8
 800b40c:	47d0      	blx	sl
 800b40e:	3001      	adds	r0, #1
 800b410:	d09d      	beq.n	800b34e <_printf_i+0x15a>
 800b412:	3501      	adds	r5, #1
 800b414:	68e3      	ldr	r3, [r4, #12]
 800b416:	9903      	ldr	r1, [sp, #12]
 800b418:	1a5b      	subs	r3, r3, r1
 800b41a:	42ab      	cmp	r3, r5
 800b41c:	dcf2      	bgt.n	800b404 <_printf_i+0x210>
 800b41e:	e7eb      	b.n	800b3f8 <_printf_i+0x204>
 800b420:	2500      	movs	r5, #0
 800b422:	f104 0619 	add.w	r6, r4, #25
 800b426:	e7f5      	b.n	800b414 <_printf_i+0x220>
 800b428:	0800d96e 	.word	0x0800d96e
 800b42c:	0800d97f 	.word	0x0800d97f

0800b430 <std>:
 800b430:	2300      	movs	r3, #0
 800b432:	b510      	push	{r4, lr}
 800b434:	4604      	mov	r4, r0
 800b436:	e9c0 3300 	strd	r3, r3, [r0]
 800b43a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b43e:	6083      	str	r3, [r0, #8]
 800b440:	8181      	strh	r1, [r0, #12]
 800b442:	6643      	str	r3, [r0, #100]	@ 0x64
 800b444:	81c2      	strh	r2, [r0, #14]
 800b446:	6183      	str	r3, [r0, #24]
 800b448:	4619      	mov	r1, r3
 800b44a:	2208      	movs	r2, #8
 800b44c:	305c      	adds	r0, #92	@ 0x5c
 800b44e:	f000 f931 	bl	800b6b4 <memset>
 800b452:	4b0d      	ldr	r3, [pc, #52]	@ (800b488 <std+0x58>)
 800b454:	6263      	str	r3, [r4, #36]	@ 0x24
 800b456:	4b0d      	ldr	r3, [pc, #52]	@ (800b48c <std+0x5c>)
 800b458:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b45a:	4b0d      	ldr	r3, [pc, #52]	@ (800b490 <std+0x60>)
 800b45c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b45e:	4b0d      	ldr	r3, [pc, #52]	@ (800b494 <std+0x64>)
 800b460:	6323      	str	r3, [r4, #48]	@ 0x30
 800b462:	4b0d      	ldr	r3, [pc, #52]	@ (800b498 <std+0x68>)
 800b464:	6224      	str	r4, [r4, #32]
 800b466:	429c      	cmp	r4, r3
 800b468:	d006      	beq.n	800b478 <std+0x48>
 800b46a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b46e:	4294      	cmp	r4, r2
 800b470:	d002      	beq.n	800b478 <std+0x48>
 800b472:	33d0      	adds	r3, #208	@ 0xd0
 800b474:	429c      	cmp	r4, r3
 800b476:	d105      	bne.n	800b484 <std+0x54>
 800b478:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b480:	f000 b994 	b.w	800b7ac <__retarget_lock_init_recursive>
 800b484:	bd10      	pop	{r4, pc}
 800b486:	bf00      	nop
 800b488:	0800b5b5 	.word	0x0800b5b5
 800b48c:	0800b5d7 	.word	0x0800b5d7
 800b490:	0800b60f 	.word	0x0800b60f
 800b494:	0800b633 	.word	0x0800b633
 800b498:	200020a0 	.word	0x200020a0

0800b49c <stdio_exit_handler>:
 800b49c:	4a02      	ldr	r2, [pc, #8]	@ (800b4a8 <stdio_exit_handler+0xc>)
 800b49e:	4903      	ldr	r1, [pc, #12]	@ (800b4ac <stdio_exit_handler+0x10>)
 800b4a0:	4803      	ldr	r0, [pc, #12]	@ (800b4b0 <stdio_exit_handler+0x14>)
 800b4a2:	f000 b869 	b.w	800b578 <_fwalk_sglue>
 800b4a6:	bf00      	nop
 800b4a8:	20000104 	.word	0x20000104
 800b4ac:	0800d115 	.word	0x0800d115
 800b4b0:	20000114 	.word	0x20000114

0800b4b4 <cleanup_stdio>:
 800b4b4:	6841      	ldr	r1, [r0, #4]
 800b4b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b4e8 <cleanup_stdio+0x34>)
 800b4b8:	4299      	cmp	r1, r3
 800b4ba:	b510      	push	{r4, lr}
 800b4bc:	4604      	mov	r4, r0
 800b4be:	d001      	beq.n	800b4c4 <cleanup_stdio+0x10>
 800b4c0:	f001 fe28 	bl	800d114 <_fflush_r>
 800b4c4:	68a1      	ldr	r1, [r4, #8]
 800b4c6:	4b09      	ldr	r3, [pc, #36]	@ (800b4ec <cleanup_stdio+0x38>)
 800b4c8:	4299      	cmp	r1, r3
 800b4ca:	d002      	beq.n	800b4d2 <cleanup_stdio+0x1e>
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	f001 fe21 	bl	800d114 <_fflush_r>
 800b4d2:	68e1      	ldr	r1, [r4, #12]
 800b4d4:	4b06      	ldr	r3, [pc, #24]	@ (800b4f0 <cleanup_stdio+0x3c>)
 800b4d6:	4299      	cmp	r1, r3
 800b4d8:	d004      	beq.n	800b4e4 <cleanup_stdio+0x30>
 800b4da:	4620      	mov	r0, r4
 800b4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4e0:	f001 be18 	b.w	800d114 <_fflush_r>
 800b4e4:	bd10      	pop	{r4, pc}
 800b4e6:	bf00      	nop
 800b4e8:	200020a0 	.word	0x200020a0
 800b4ec:	20002108 	.word	0x20002108
 800b4f0:	20002170 	.word	0x20002170

0800b4f4 <global_stdio_init.part.0>:
 800b4f4:	b510      	push	{r4, lr}
 800b4f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b524 <global_stdio_init.part.0+0x30>)
 800b4f8:	4c0b      	ldr	r4, [pc, #44]	@ (800b528 <global_stdio_init.part.0+0x34>)
 800b4fa:	4a0c      	ldr	r2, [pc, #48]	@ (800b52c <global_stdio_init.part.0+0x38>)
 800b4fc:	601a      	str	r2, [r3, #0]
 800b4fe:	4620      	mov	r0, r4
 800b500:	2200      	movs	r2, #0
 800b502:	2104      	movs	r1, #4
 800b504:	f7ff ff94 	bl	800b430 <std>
 800b508:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b50c:	2201      	movs	r2, #1
 800b50e:	2109      	movs	r1, #9
 800b510:	f7ff ff8e 	bl	800b430 <std>
 800b514:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b518:	2202      	movs	r2, #2
 800b51a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b51e:	2112      	movs	r1, #18
 800b520:	f7ff bf86 	b.w	800b430 <std>
 800b524:	200021d8 	.word	0x200021d8
 800b528:	200020a0 	.word	0x200020a0
 800b52c:	0800b49d 	.word	0x0800b49d

0800b530 <__sfp_lock_acquire>:
 800b530:	4801      	ldr	r0, [pc, #4]	@ (800b538 <__sfp_lock_acquire+0x8>)
 800b532:	f000 b93c 	b.w	800b7ae <__retarget_lock_acquire_recursive>
 800b536:	bf00      	nop
 800b538:	200021e1 	.word	0x200021e1

0800b53c <__sfp_lock_release>:
 800b53c:	4801      	ldr	r0, [pc, #4]	@ (800b544 <__sfp_lock_release+0x8>)
 800b53e:	f000 b937 	b.w	800b7b0 <__retarget_lock_release_recursive>
 800b542:	bf00      	nop
 800b544:	200021e1 	.word	0x200021e1

0800b548 <__sinit>:
 800b548:	b510      	push	{r4, lr}
 800b54a:	4604      	mov	r4, r0
 800b54c:	f7ff fff0 	bl	800b530 <__sfp_lock_acquire>
 800b550:	6a23      	ldr	r3, [r4, #32]
 800b552:	b11b      	cbz	r3, 800b55c <__sinit+0x14>
 800b554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b558:	f7ff bff0 	b.w	800b53c <__sfp_lock_release>
 800b55c:	4b04      	ldr	r3, [pc, #16]	@ (800b570 <__sinit+0x28>)
 800b55e:	6223      	str	r3, [r4, #32]
 800b560:	4b04      	ldr	r3, [pc, #16]	@ (800b574 <__sinit+0x2c>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d1f5      	bne.n	800b554 <__sinit+0xc>
 800b568:	f7ff ffc4 	bl	800b4f4 <global_stdio_init.part.0>
 800b56c:	e7f2      	b.n	800b554 <__sinit+0xc>
 800b56e:	bf00      	nop
 800b570:	0800b4b5 	.word	0x0800b4b5
 800b574:	200021d8 	.word	0x200021d8

0800b578 <_fwalk_sglue>:
 800b578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b57c:	4607      	mov	r7, r0
 800b57e:	4688      	mov	r8, r1
 800b580:	4614      	mov	r4, r2
 800b582:	2600      	movs	r6, #0
 800b584:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b588:	f1b9 0901 	subs.w	r9, r9, #1
 800b58c:	d505      	bpl.n	800b59a <_fwalk_sglue+0x22>
 800b58e:	6824      	ldr	r4, [r4, #0]
 800b590:	2c00      	cmp	r4, #0
 800b592:	d1f7      	bne.n	800b584 <_fwalk_sglue+0xc>
 800b594:	4630      	mov	r0, r6
 800b596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b59a:	89ab      	ldrh	r3, [r5, #12]
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d907      	bls.n	800b5b0 <_fwalk_sglue+0x38>
 800b5a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	d003      	beq.n	800b5b0 <_fwalk_sglue+0x38>
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	4638      	mov	r0, r7
 800b5ac:	47c0      	blx	r8
 800b5ae:	4306      	orrs	r6, r0
 800b5b0:	3568      	adds	r5, #104	@ 0x68
 800b5b2:	e7e9      	b.n	800b588 <_fwalk_sglue+0x10>

0800b5b4 <__sread>:
 800b5b4:	b510      	push	{r4, lr}
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5bc:	f000 f8a8 	bl	800b710 <_read_r>
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	bfab      	itete	ge
 800b5c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b5c6:	89a3      	ldrhlt	r3, [r4, #12]
 800b5c8:	181b      	addge	r3, r3, r0
 800b5ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b5ce:	bfac      	ite	ge
 800b5d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b5d2:	81a3      	strhlt	r3, [r4, #12]
 800b5d4:	bd10      	pop	{r4, pc}

0800b5d6 <__swrite>:
 800b5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5da:	461f      	mov	r7, r3
 800b5dc:	898b      	ldrh	r3, [r1, #12]
 800b5de:	05db      	lsls	r3, r3, #23
 800b5e0:	4605      	mov	r5, r0
 800b5e2:	460c      	mov	r4, r1
 800b5e4:	4616      	mov	r6, r2
 800b5e6:	d505      	bpl.n	800b5f4 <__swrite+0x1e>
 800b5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f000 f87c 	bl	800b6ec <_lseek_r>
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b5fe:	81a3      	strh	r3, [r4, #12]
 800b600:	4632      	mov	r2, r6
 800b602:	463b      	mov	r3, r7
 800b604:	4628      	mov	r0, r5
 800b606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b60a:	f000 b893 	b.w	800b734 <_write_r>

0800b60e <__sseek>:
 800b60e:	b510      	push	{r4, lr}
 800b610:	460c      	mov	r4, r1
 800b612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b616:	f000 f869 	bl	800b6ec <_lseek_r>
 800b61a:	1c43      	adds	r3, r0, #1
 800b61c:	89a3      	ldrh	r3, [r4, #12]
 800b61e:	bf15      	itete	ne
 800b620:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b622:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b626:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b62a:	81a3      	strheq	r3, [r4, #12]
 800b62c:	bf18      	it	ne
 800b62e:	81a3      	strhne	r3, [r4, #12]
 800b630:	bd10      	pop	{r4, pc}

0800b632 <__sclose>:
 800b632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b636:	f000 b849 	b.w	800b6cc <_close_r>

0800b63a <_vsniprintf_r>:
 800b63a:	b530      	push	{r4, r5, lr}
 800b63c:	4614      	mov	r4, r2
 800b63e:	2c00      	cmp	r4, #0
 800b640:	b09b      	sub	sp, #108	@ 0x6c
 800b642:	4605      	mov	r5, r0
 800b644:	461a      	mov	r2, r3
 800b646:	da05      	bge.n	800b654 <_vsniprintf_r+0x1a>
 800b648:	238b      	movs	r3, #139	@ 0x8b
 800b64a:	6003      	str	r3, [r0, #0]
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b650:	b01b      	add	sp, #108	@ 0x6c
 800b652:	bd30      	pop	{r4, r5, pc}
 800b654:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b658:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b65c:	f04f 0300 	mov.w	r3, #0
 800b660:	9319      	str	r3, [sp, #100]	@ 0x64
 800b662:	bf14      	ite	ne
 800b664:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b668:	4623      	moveq	r3, r4
 800b66a:	9302      	str	r3, [sp, #8]
 800b66c:	9305      	str	r3, [sp, #20]
 800b66e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b672:	9100      	str	r1, [sp, #0]
 800b674:	9104      	str	r1, [sp, #16]
 800b676:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b67a:	4669      	mov	r1, sp
 800b67c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b67e:	f001 fbc9 	bl	800ce14 <_svfiprintf_r>
 800b682:	1c43      	adds	r3, r0, #1
 800b684:	bfbc      	itt	lt
 800b686:	238b      	movlt	r3, #139	@ 0x8b
 800b688:	602b      	strlt	r3, [r5, #0]
 800b68a:	2c00      	cmp	r4, #0
 800b68c:	d0e0      	beq.n	800b650 <_vsniprintf_r+0x16>
 800b68e:	9b00      	ldr	r3, [sp, #0]
 800b690:	2200      	movs	r2, #0
 800b692:	701a      	strb	r2, [r3, #0]
 800b694:	e7dc      	b.n	800b650 <_vsniprintf_r+0x16>
	...

0800b698 <vsniprintf>:
 800b698:	b507      	push	{r0, r1, r2, lr}
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	4613      	mov	r3, r2
 800b69e:	460a      	mov	r2, r1
 800b6a0:	4601      	mov	r1, r0
 800b6a2:	4803      	ldr	r0, [pc, #12]	@ (800b6b0 <vsniprintf+0x18>)
 800b6a4:	6800      	ldr	r0, [r0, #0]
 800b6a6:	f7ff ffc8 	bl	800b63a <_vsniprintf_r>
 800b6aa:	b003      	add	sp, #12
 800b6ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6b0:	20000110 	.word	0x20000110

0800b6b4 <memset>:
 800b6b4:	4402      	add	r2, r0
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d100      	bne.n	800b6be <memset+0xa>
 800b6bc:	4770      	bx	lr
 800b6be:	f803 1b01 	strb.w	r1, [r3], #1
 800b6c2:	e7f9      	b.n	800b6b8 <memset+0x4>

0800b6c4 <_localeconv_r>:
 800b6c4:	4800      	ldr	r0, [pc, #0]	@ (800b6c8 <_localeconv_r+0x4>)
 800b6c6:	4770      	bx	lr
 800b6c8:	20000250 	.word	0x20000250

0800b6cc <_close_r>:
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	4d06      	ldr	r5, [pc, #24]	@ (800b6e8 <_close_r+0x1c>)
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	4608      	mov	r0, r1
 800b6d6:	602b      	str	r3, [r5, #0]
 800b6d8:	f7f6 fbb8 	bl	8001e4c <_close>
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d102      	bne.n	800b6e6 <_close_r+0x1a>
 800b6e0:	682b      	ldr	r3, [r5, #0]
 800b6e2:	b103      	cbz	r3, 800b6e6 <_close_r+0x1a>
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
 800b6e8:	200021dc 	.word	0x200021dc

0800b6ec <_lseek_r>:
 800b6ec:	b538      	push	{r3, r4, r5, lr}
 800b6ee:	4d07      	ldr	r5, [pc, #28]	@ (800b70c <_lseek_r+0x20>)
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	4608      	mov	r0, r1
 800b6f4:	4611      	mov	r1, r2
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	602a      	str	r2, [r5, #0]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	f7f6 fbcd 	bl	8001e9a <_lseek>
 800b700:	1c43      	adds	r3, r0, #1
 800b702:	d102      	bne.n	800b70a <_lseek_r+0x1e>
 800b704:	682b      	ldr	r3, [r5, #0]
 800b706:	b103      	cbz	r3, 800b70a <_lseek_r+0x1e>
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	bd38      	pop	{r3, r4, r5, pc}
 800b70c:	200021dc 	.word	0x200021dc

0800b710 <_read_r>:
 800b710:	b538      	push	{r3, r4, r5, lr}
 800b712:	4d07      	ldr	r5, [pc, #28]	@ (800b730 <_read_r+0x20>)
 800b714:	4604      	mov	r4, r0
 800b716:	4608      	mov	r0, r1
 800b718:	4611      	mov	r1, r2
 800b71a:	2200      	movs	r2, #0
 800b71c:	602a      	str	r2, [r5, #0]
 800b71e:	461a      	mov	r2, r3
 800b720:	f7f6 fb5b 	bl	8001dda <_read>
 800b724:	1c43      	adds	r3, r0, #1
 800b726:	d102      	bne.n	800b72e <_read_r+0x1e>
 800b728:	682b      	ldr	r3, [r5, #0]
 800b72a:	b103      	cbz	r3, 800b72e <_read_r+0x1e>
 800b72c:	6023      	str	r3, [r4, #0]
 800b72e:	bd38      	pop	{r3, r4, r5, pc}
 800b730:	200021dc 	.word	0x200021dc

0800b734 <_write_r>:
 800b734:	b538      	push	{r3, r4, r5, lr}
 800b736:	4d07      	ldr	r5, [pc, #28]	@ (800b754 <_write_r+0x20>)
 800b738:	4604      	mov	r4, r0
 800b73a:	4608      	mov	r0, r1
 800b73c:	4611      	mov	r1, r2
 800b73e:	2200      	movs	r2, #0
 800b740:	602a      	str	r2, [r5, #0]
 800b742:	461a      	mov	r2, r3
 800b744:	f7f6 fb66 	bl	8001e14 <_write>
 800b748:	1c43      	adds	r3, r0, #1
 800b74a:	d102      	bne.n	800b752 <_write_r+0x1e>
 800b74c:	682b      	ldr	r3, [r5, #0]
 800b74e:	b103      	cbz	r3, 800b752 <_write_r+0x1e>
 800b750:	6023      	str	r3, [r4, #0]
 800b752:	bd38      	pop	{r3, r4, r5, pc}
 800b754:	200021dc 	.word	0x200021dc

0800b758 <__errno>:
 800b758:	4b01      	ldr	r3, [pc, #4]	@ (800b760 <__errno+0x8>)
 800b75a:	6818      	ldr	r0, [r3, #0]
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	20000110 	.word	0x20000110

0800b764 <__libc_init_array>:
 800b764:	b570      	push	{r4, r5, r6, lr}
 800b766:	4d0d      	ldr	r5, [pc, #52]	@ (800b79c <__libc_init_array+0x38>)
 800b768:	4c0d      	ldr	r4, [pc, #52]	@ (800b7a0 <__libc_init_array+0x3c>)
 800b76a:	1b64      	subs	r4, r4, r5
 800b76c:	10a4      	asrs	r4, r4, #2
 800b76e:	2600      	movs	r6, #0
 800b770:	42a6      	cmp	r6, r4
 800b772:	d109      	bne.n	800b788 <__libc_init_array+0x24>
 800b774:	4d0b      	ldr	r5, [pc, #44]	@ (800b7a4 <__libc_init_array+0x40>)
 800b776:	4c0c      	ldr	r4, [pc, #48]	@ (800b7a8 <__libc_init_array+0x44>)
 800b778:	f002 f86a 	bl	800d850 <_init>
 800b77c:	1b64      	subs	r4, r4, r5
 800b77e:	10a4      	asrs	r4, r4, #2
 800b780:	2600      	movs	r6, #0
 800b782:	42a6      	cmp	r6, r4
 800b784:	d105      	bne.n	800b792 <__libc_init_array+0x2e>
 800b786:	bd70      	pop	{r4, r5, r6, pc}
 800b788:	f855 3b04 	ldr.w	r3, [r5], #4
 800b78c:	4798      	blx	r3
 800b78e:	3601      	adds	r6, #1
 800b790:	e7ee      	b.n	800b770 <__libc_init_array+0xc>
 800b792:	f855 3b04 	ldr.w	r3, [r5], #4
 800b796:	4798      	blx	r3
 800b798:	3601      	adds	r6, #1
 800b79a:	e7f2      	b.n	800b782 <__libc_init_array+0x1e>
 800b79c:	0800dcdc 	.word	0x0800dcdc
 800b7a0:	0800dcdc 	.word	0x0800dcdc
 800b7a4:	0800dcdc 	.word	0x0800dcdc
 800b7a8:	0800dce0 	.word	0x0800dce0

0800b7ac <__retarget_lock_init_recursive>:
 800b7ac:	4770      	bx	lr

0800b7ae <__retarget_lock_acquire_recursive>:
 800b7ae:	4770      	bx	lr

0800b7b0 <__retarget_lock_release_recursive>:
 800b7b0:	4770      	bx	lr

0800b7b2 <quorem>:
 800b7b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b6:	6903      	ldr	r3, [r0, #16]
 800b7b8:	690c      	ldr	r4, [r1, #16]
 800b7ba:	42a3      	cmp	r3, r4
 800b7bc:	4607      	mov	r7, r0
 800b7be:	db7e      	blt.n	800b8be <quorem+0x10c>
 800b7c0:	3c01      	subs	r4, #1
 800b7c2:	f101 0814 	add.w	r8, r1, #20
 800b7c6:	00a3      	lsls	r3, r4, #2
 800b7c8:	f100 0514 	add.w	r5, r0, #20
 800b7cc:	9300      	str	r3, [sp, #0]
 800b7ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7d2:	9301      	str	r3, [sp, #4]
 800b7d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7e8:	d32e      	bcc.n	800b848 <quorem+0x96>
 800b7ea:	f04f 0a00 	mov.w	sl, #0
 800b7ee:	46c4      	mov	ip, r8
 800b7f0:	46ae      	mov	lr, r5
 800b7f2:	46d3      	mov	fp, sl
 800b7f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b7f8:	b298      	uxth	r0, r3
 800b7fa:	fb06 a000 	mla	r0, r6, r0, sl
 800b7fe:	0c02      	lsrs	r2, r0, #16
 800b800:	0c1b      	lsrs	r3, r3, #16
 800b802:	fb06 2303 	mla	r3, r6, r3, r2
 800b806:	f8de 2000 	ldr.w	r2, [lr]
 800b80a:	b280      	uxth	r0, r0
 800b80c:	b292      	uxth	r2, r2
 800b80e:	1a12      	subs	r2, r2, r0
 800b810:	445a      	add	r2, fp
 800b812:	f8de 0000 	ldr.w	r0, [lr]
 800b816:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b820:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b824:	b292      	uxth	r2, r2
 800b826:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b82a:	45e1      	cmp	r9, ip
 800b82c:	f84e 2b04 	str.w	r2, [lr], #4
 800b830:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b834:	d2de      	bcs.n	800b7f4 <quorem+0x42>
 800b836:	9b00      	ldr	r3, [sp, #0]
 800b838:	58eb      	ldr	r3, [r5, r3]
 800b83a:	b92b      	cbnz	r3, 800b848 <quorem+0x96>
 800b83c:	9b01      	ldr	r3, [sp, #4]
 800b83e:	3b04      	subs	r3, #4
 800b840:	429d      	cmp	r5, r3
 800b842:	461a      	mov	r2, r3
 800b844:	d32f      	bcc.n	800b8a6 <quorem+0xf4>
 800b846:	613c      	str	r4, [r7, #16]
 800b848:	4638      	mov	r0, r7
 800b84a:	f001 f97f 	bl	800cb4c <__mcmp>
 800b84e:	2800      	cmp	r0, #0
 800b850:	db25      	blt.n	800b89e <quorem+0xec>
 800b852:	4629      	mov	r1, r5
 800b854:	2000      	movs	r0, #0
 800b856:	f858 2b04 	ldr.w	r2, [r8], #4
 800b85a:	f8d1 c000 	ldr.w	ip, [r1]
 800b85e:	fa1f fe82 	uxth.w	lr, r2
 800b862:	fa1f f38c 	uxth.w	r3, ip
 800b866:	eba3 030e 	sub.w	r3, r3, lr
 800b86a:	4403      	add	r3, r0
 800b86c:	0c12      	lsrs	r2, r2, #16
 800b86e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b872:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b876:	b29b      	uxth	r3, r3
 800b878:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b87c:	45c1      	cmp	r9, r8
 800b87e:	f841 3b04 	str.w	r3, [r1], #4
 800b882:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b886:	d2e6      	bcs.n	800b856 <quorem+0xa4>
 800b888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b88c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b890:	b922      	cbnz	r2, 800b89c <quorem+0xea>
 800b892:	3b04      	subs	r3, #4
 800b894:	429d      	cmp	r5, r3
 800b896:	461a      	mov	r2, r3
 800b898:	d30b      	bcc.n	800b8b2 <quorem+0x100>
 800b89a:	613c      	str	r4, [r7, #16]
 800b89c:	3601      	adds	r6, #1
 800b89e:	4630      	mov	r0, r6
 800b8a0:	b003      	add	sp, #12
 800b8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a6:	6812      	ldr	r2, [r2, #0]
 800b8a8:	3b04      	subs	r3, #4
 800b8aa:	2a00      	cmp	r2, #0
 800b8ac:	d1cb      	bne.n	800b846 <quorem+0x94>
 800b8ae:	3c01      	subs	r4, #1
 800b8b0:	e7c6      	b.n	800b840 <quorem+0x8e>
 800b8b2:	6812      	ldr	r2, [r2, #0]
 800b8b4:	3b04      	subs	r3, #4
 800b8b6:	2a00      	cmp	r2, #0
 800b8b8:	d1ef      	bne.n	800b89a <quorem+0xe8>
 800b8ba:	3c01      	subs	r4, #1
 800b8bc:	e7ea      	b.n	800b894 <quorem+0xe2>
 800b8be:	2000      	movs	r0, #0
 800b8c0:	e7ee      	b.n	800b8a0 <quorem+0xee>
 800b8c2:	0000      	movs	r0, r0
 800b8c4:	0000      	movs	r0, r0
	...

0800b8c8 <_dtoa_r>:
 800b8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8cc:	69c7      	ldr	r7, [r0, #28]
 800b8ce:	b097      	sub	sp, #92	@ 0x5c
 800b8d0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b8d4:	ec55 4b10 	vmov	r4, r5, d0
 800b8d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b8da:	9107      	str	r1, [sp, #28]
 800b8dc:	4681      	mov	r9, r0
 800b8de:	920c      	str	r2, [sp, #48]	@ 0x30
 800b8e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b8e2:	b97f      	cbnz	r7, 800b904 <_dtoa_r+0x3c>
 800b8e4:	2010      	movs	r0, #16
 800b8e6:	f000 fe09 	bl	800c4fc <malloc>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	f8c9 001c 	str.w	r0, [r9, #28]
 800b8f0:	b920      	cbnz	r0, 800b8fc <_dtoa_r+0x34>
 800b8f2:	4ba9      	ldr	r3, [pc, #676]	@ (800bb98 <_dtoa_r+0x2d0>)
 800b8f4:	21ef      	movs	r1, #239	@ 0xef
 800b8f6:	48a9      	ldr	r0, [pc, #676]	@ (800bb9c <_dtoa_r+0x2d4>)
 800b8f8:	f001 fc6c 	bl	800d1d4 <__assert_func>
 800b8fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b900:	6007      	str	r7, [r0, #0]
 800b902:	60c7      	str	r7, [r0, #12]
 800b904:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b908:	6819      	ldr	r1, [r3, #0]
 800b90a:	b159      	cbz	r1, 800b924 <_dtoa_r+0x5c>
 800b90c:	685a      	ldr	r2, [r3, #4]
 800b90e:	604a      	str	r2, [r1, #4]
 800b910:	2301      	movs	r3, #1
 800b912:	4093      	lsls	r3, r2
 800b914:	608b      	str	r3, [r1, #8]
 800b916:	4648      	mov	r0, r9
 800b918:	f000 fee6 	bl	800c6e8 <_Bfree>
 800b91c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b920:	2200      	movs	r2, #0
 800b922:	601a      	str	r2, [r3, #0]
 800b924:	1e2b      	subs	r3, r5, #0
 800b926:	bfb9      	ittee	lt
 800b928:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b92c:	9305      	strlt	r3, [sp, #20]
 800b92e:	2300      	movge	r3, #0
 800b930:	6033      	strge	r3, [r6, #0]
 800b932:	9f05      	ldr	r7, [sp, #20]
 800b934:	4b9a      	ldr	r3, [pc, #616]	@ (800bba0 <_dtoa_r+0x2d8>)
 800b936:	bfbc      	itt	lt
 800b938:	2201      	movlt	r2, #1
 800b93a:	6032      	strlt	r2, [r6, #0]
 800b93c:	43bb      	bics	r3, r7
 800b93e:	d112      	bne.n	800b966 <_dtoa_r+0x9e>
 800b940:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b942:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b946:	6013      	str	r3, [r2, #0]
 800b948:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b94c:	4323      	orrs	r3, r4
 800b94e:	f000 855a 	beq.w	800c406 <_dtoa_r+0xb3e>
 800b952:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b954:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bbb4 <_dtoa_r+0x2ec>
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f000 855c 	beq.w	800c416 <_dtoa_r+0xb4e>
 800b95e:	f10a 0303 	add.w	r3, sl, #3
 800b962:	f000 bd56 	b.w	800c412 <_dtoa_r+0xb4a>
 800b966:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b96a:	2200      	movs	r2, #0
 800b96c:	ec51 0b17 	vmov	r0, r1, d7
 800b970:	2300      	movs	r3, #0
 800b972:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b976:	f7f5 f8af 	bl	8000ad8 <__aeabi_dcmpeq>
 800b97a:	4680      	mov	r8, r0
 800b97c:	b158      	cbz	r0, 800b996 <_dtoa_r+0xce>
 800b97e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b980:	2301      	movs	r3, #1
 800b982:	6013      	str	r3, [r2, #0]
 800b984:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b986:	b113      	cbz	r3, 800b98e <_dtoa_r+0xc6>
 800b988:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b98a:	4b86      	ldr	r3, [pc, #536]	@ (800bba4 <_dtoa_r+0x2dc>)
 800b98c:	6013      	str	r3, [r2, #0]
 800b98e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800bbb8 <_dtoa_r+0x2f0>
 800b992:	f000 bd40 	b.w	800c416 <_dtoa_r+0xb4e>
 800b996:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b99a:	aa14      	add	r2, sp, #80	@ 0x50
 800b99c:	a915      	add	r1, sp, #84	@ 0x54
 800b99e:	4648      	mov	r0, r9
 800b9a0:	f001 f984 	bl	800ccac <__d2b>
 800b9a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b9a8:	9002      	str	r0, [sp, #8]
 800b9aa:	2e00      	cmp	r6, #0
 800b9ac:	d078      	beq.n	800baa0 <_dtoa_r+0x1d8>
 800b9ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b9b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b9bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b9c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b9c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	4b76      	ldr	r3, [pc, #472]	@ (800bba8 <_dtoa_r+0x2e0>)
 800b9ce:	f7f4 fc63 	bl	8000298 <__aeabi_dsub>
 800b9d2:	a36b      	add	r3, pc, #428	@ (adr r3, 800bb80 <_dtoa_r+0x2b8>)
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	f7f4 fe16 	bl	8000608 <__aeabi_dmul>
 800b9dc:	a36a      	add	r3, pc, #424	@ (adr r3, 800bb88 <_dtoa_r+0x2c0>)
 800b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e2:	f7f4 fc5b 	bl	800029c <__adddf3>
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	460d      	mov	r5, r1
 800b9ec:	f7f4 fda2 	bl	8000534 <__aeabi_i2d>
 800b9f0:	a367      	add	r3, pc, #412	@ (adr r3, 800bb90 <_dtoa_r+0x2c8>)
 800b9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f6:	f7f4 fe07 	bl	8000608 <__aeabi_dmul>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	4620      	mov	r0, r4
 800ba00:	4629      	mov	r1, r5
 800ba02:	f7f4 fc4b 	bl	800029c <__adddf3>
 800ba06:	4604      	mov	r4, r0
 800ba08:	460d      	mov	r5, r1
 800ba0a:	f7f5 f8ad 	bl	8000b68 <__aeabi_d2iz>
 800ba0e:	2200      	movs	r2, #0
 800ba10:	4607      	mov	r7, r0
 800ba12:	2300      	movs	r3, #0
 800ba14:	4620      	mov	r0, r4
 800ba16:	4629      	mov	r1, r5
 800ba18:	f7f5 f868 	bl	8000aec <__aeabi_dcmplt>
 800ba1c:	b140      	cbz	r0, 800ba30 <_dtoa_r+0x168>
 800ba1e:	4638      	mov	r0, r7
 800ba20:	f7f4 fd88 	bl	8000534 <__aeabi_i2d>
 800ba24:	4622      	mov	r2, r4
 800ba26:	462b      	mov	r3, r5
 800ba28:	f7f5 f856 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba2c:	b900      	cbnz	r0, 800ba30 <_dtoa_r+0x168>
 800ba2e:	3f01      	subs	r7, #1
 800ba30:	2f16      	cmp	r7, #22
 800ba32:	d852      	bhi.n	800bada <_dtoa_r+0x212>
 800ba34:	4b5d      	ldr	r3, [pc, #372]	@ (800bbac <_dtoa_r+0x2e4>)
 800ba36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ba42:	f7f5 f853 	bl	8000aec <__aeabi_dcmplt>
 800ba46:	2800      	cmp	r0, #0
 800ba48:	d049      	beq.n	800bade <_dtoa_r+0x216>
 800ba4a:	3f01      	subs	r7, #1
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba50:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ba52:	1b9b      	subs	r3, r3, r6
 800ba54:	1e5a      	subs	r2, r3, #1
 800ba56:	bf45      	ittet	mi
 800ba58:	f1c3 0301 	rsbmi	r3, r3, #1
 800ba5c:	9300      	strmi	r3, [sp, #0]
 800ba5e:	2300      	movpl	r3, #0
 800ba60:	2300      	movmi	r3, #0
 800ba62:	9206      	str	r2, [sp, #24]
 800ba64:	bf54      	ite	pl
 800ba66:	9300      	strpl	r3, [sp, #0]
 800ba68:	9306      	strmi	r3, [sp, #24]
 800ba6a:	2f00      	cmp	r7, #0
 800ba6c:	db39      	blt.n	800bae2 <_dtoa_r+0x21a>
 800ba6e:	9b06      	ldr	r3, [sp, #24]
 800ba70:	970d      	str	r7, [sp, #52]	@ 0x34
 800ba72:	443b      	add	r3, r7
 800ba74:	9306      	str	r3, [sp, #24]
 800ba76:	2300      	movs	r3, #0
 800ba78:	9308      	str	r3, [sp, #32]
 800ba7a:	9b07      	ldr	r3, [sp, #28]
 800ba7c:	2b09      	cmp	r3, #9
 800ba7e:	d863      	bhi.n	800bb48 <_dtoa_r+0x280>
 800ba80:	2b05      	cmp	r3, #5
 800ba82:	bfc4      	itt	gt
 800ba84:	3b04      	subgt	r3, #4
 800ba86:	9307      	strgt	r3, [sp, #28]
 800ba88:	9b07      	ldr	r3, [sp, #28]
 800ba8a:	f1a3 0302 	sub.w	r3, r3, #2
 800ba8e:	bfcc      	ite	gt
 800ba90:	2400      	movgt	r4, #0
 800ba92:	2401      	movle	r4, #1
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	d863      	bhi.n	800bb60 <_dtoa_r+0x298>
 800ba98:	e8df f003 	tbb	[pc, r3]
 800ba9c:	2b375452 	.word	0x2b375452
 800baa0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800baa4:	441e      	add	r6, r3
 800baa6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800baaa:	2b20      	cmp	r3, #32
 800baac:	bfc1      	itttt	gt
 800baae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bab2:	409f      	lslgt	r7, r3
 800bab4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bab8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800babc:	bfd6      	itet	le
 800babe:	f1c3 0320 	rsble	r3, r3, #32
 800bac2:	ea47 0003 	orrgt.w	r0, r7, r3
 800bac6:	fa04 f003 	lslle.w	r0, r4, r3
 800baca:	f7f4 fd23 	bl	8000514 <__aeabi_ui2d>
 800bace:	2201      	movs	r2, #1
 800bad0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bad4:	3e01      	subs	r6, #1
 800bad6:	9212      	str	r2, [sp, #72]	@ 0x48
 800bad8:	e776      	b.n	800b9c8 <_dtoa_r+0x100>
 800bada:	2301      	movs	r3, #1
 800badc:	e7b7      	b.n	800ba4e <_dtoa_r+0x186>
 800bade:	9010      	str	r0, [sp, #64]	@ 0x40
 800bae0:	e7b6      	b.n	800ba50 <_dtoa_r+0x188>
 800bae2:	9b00      	ldr	r3, [sp, #0]
 800bae4:	1bdb      	subs	r3, r3, r7
 800bae6:	9300      	str	r3, [sp, #0]
 800bae8:	427b      	negs	r3, r7
 800baea:	9308      	str	r3, [sp, #32]
 800baec:	2300      	movs	r3, #0
 800baee:	930d      	str	r3, [sp, #52]	@ 0x34
 800baf0:	e7c3      	b.n	800ba7a <_dtoa_r+0x1b2>
 800baf2:	2301      	movs	r3, #1
 800baf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800baf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800baf8:	eb07 0b03 	add.w	fp, r7, r3
 800bafc:	f10b 0301 	add.w	r3, fp, #1
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	9303      	str	r3, [sp, #12]
 800bb04:	bfb8      	it	lt
 800bb06:	2301      	movlt	r3, #1
 800bb08:	e006      	b.n	800bb18 <_dtoa_r+0x250>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	dd28      	ble.n	800bb66 <_dtoa_r+0x29e>
 800bb14:	469b      	mov	fp, r3
 800bb16:	9303      	str	r3, [sp, #12]
 800bb18:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bb1c:	2100      	movs	r1, #0
 800bb1e:	2204      	movs	r2, #4
 800bb20:	f102 0514 	add.w	r5, r2, #20
 800bb24:	429d      	cmp	r5, r3
 800bb26:	d926      	bls.n	800bb76 <_dtoa_r+0x2ae>
 800bb28:	6041      	str	r1, [r0, #4]
 800bb2a:	4648      	mov	r0, r9
 800bb2c:	f000 fd9c 	bl	800c668 <_Balloc>
 800bb30:	4682      	mov	sl, r0
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d142      	bne.n	800bbbc <_dtoa_r+0x2f4>
 800bb36:	4b1e      	ldr	r3, [pc, #120]	@ (800bbb0 <_dtoa_r+0x2e8>)
 800bb38:	4602      	mov	r2, r0
 800bb3a:	f240 11af 	movw	r1, #431	@ 0x1af
 800bb3e:	e6da      	b.n	800b8f6 <_dtoa_r+0x2e>
 800bb40:	2300      	movs	r3, #0
 800bb42:	e7e3      	b.n	800bb0c <_dtoa_r+0x244>
 800bb44:	2300      	movs	r3, #0
 800bb46:	e7d5      	b.n	800baf4 <_dtoa_r+0x22c>
 800bb48:	2401      	movs	r4, #1
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	9307      	str	r3, [sp, #28]
 800bb4e:	9409      	str	r4, [sp, #36]	@ 0x24
 800bb50:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800bb54:	2200      	movs	r2, #0
 800bb56:	f8cd b00c 	str.w	fp, [sp, #12]
 800bb5a:	2312      	movs	r3, #18
 800bb5c:	920c      	str	r2, [sp, #48]	@ 0x30
 800bb5e:	e7db      	b.n	800bb18 <_dtoa_r+0x250>
 800bb60:	2301      	movs	r3, #1
 800bb62:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb64:	e7f4      	b.n	800bb50 <_dtoa_r+0x288>
 800bb66:	f04f 0b01 	mov.w	fp, #1
 800bb6a:	f8cd b00c 	str.w	fp, [sp, #12]
 800bb6e:	465b      	mov	r3, fp
 800bb70:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800bb74:	e7d0      	b.n	800bb18 <_dtoa_r+0x250>
 800bb76:	3101      	adds	r1, #1
 800bb78:	0052      	lsls	r2, r2, #1
 800bb7a:	e7d1      	b.n	800bb20 <_dtoa_r+0x258>
 800bb7c:	f3af 8000 	nop.w
 800bb80:	636f4361 	.word	0x636f4361
 800bb84:	3fd287a7 	.word	0x3fd287a7
 800bb88:	8b60c8b3 	.word	0x8b60c8b3
 800bb8c:	3fc68a28 	.word	0x3fc68a28
 800bb90:	509f79fb 	.word	0x509f79fb
 800bb94:	3fd34413 	.word	0x3fd34413
 800bb98:	0800d99d 	.word	0x0800d99d
 800bb9c:	0800d9b4 	.word	0x0800d9b4
 800bba0:	7ff00000 	.word	0x7ff00000
 800bba4:	0800d96d 	.word	0x0800d96d
 800bba8:	3ff80000 	.word	0x3ff80000
 800bbac:	0800db08 	.word	0x0800db08
 800bbb0:	0800da0c 	.word	0x0800da0c
 800bbb4:	0800d999 	.word	0x0800d999
 800bbb8:	0800d96c 	.word	0x0800d96c
 800bbbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bbc0:	6018      	str	r0, [r3, #0]
 800bbc2:	9b03      	ldr	r3, [sp, #12]
 800bbc4:	2b0e      	cmp	r3, #14
 800bbc6:	f200 80a1 	bhi.w	800bd0c <_dtoa_r+0x444>
 800bbca:	2c00      	cmp	r4, #0
 800bbcc:	f000 809e 	beq.w	800bd0c <_dtoa_r+0x444>
 800bbd0:	2f00      	cmp	r7, #0
 800bbd2:	dd33      	ble.n	800bc3c <_dtoa_r+0x374>
 800bbd4:	4b9c      	ldr	r3, [pc, #624]	@ (800be48 <_dtoa_r+0x580>)
 800bbd6:	f007 020f 	and.w	r2, r7, #15
 800bbda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbde:	ed93 7b00 	vldr	d7, [r3]
 800bbe2:	05f8      	lsls	r0, r7, #23
 800bbe4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bbe8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bbec:	d516      	bpl.n	800bc1c <_dtoa_r+0x354>
 800bbee:	4b97      	ldr	r3, [pc, #604]	@ (800be4c <_dtoa_r+0x584>)
 800bbf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bbf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bbf8:	f7f4 fe30 	bl	800085c <__aeabi_ddiv>
 800bbfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc00:	f004 040f 	and.w	r4, r4, #15
 800bc04:	2603      	movs	r6, #3
 800bc06:	4d91      	ldr	r5, [pc, #580]	@ (800be4c <_dtoa_r+0x584>)
 800bc08:	b954      	cbnz	r4, 800bc20 <_dtoa_r+0x358>
 800bc0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bc0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc12:	f7f4 fe23 	bl	800085c <__aeabi_ddiv>
 800bc16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc1a:	e028      	b.n	800bc6e <_dtoa_r+0x3a6>
 800bc1c:	2602      	movs	r6, #2
 800bc1e:	e7f2      	b.n	800bc06 <_dtoa_r+0x33e>
 800bc20:	07e1      	lsls	r1, r4, #31
 800bc22:	d508      	bpl.n	800bc36 <_dtoa_r+0x36e>
 800bc24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bc28:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc2c:	f7f4 fcec 	bl	8000608 <__aeabi_dmul>
 800bc30:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bc34:	3601      	adds	r6, #1
 800bc36:	1064      	asrs	r4, r4, #1
 800bc38:	3508      	adds	r5, #8
 800bc3a:	e7e5      	b.n	800bc08 <_dtoa_r+0x340>
 800bc3c:	f000 80af 	beq.w	800bd9e <_dtoa_r+0x4d6>
 800bc40:	427c      	negs	r4, r7
 800bc42:	4b81      	ldr	r3, [pc, #516]	@ (800be48 <_dtoa_r+0x580>)
 800bc44:	4d81      	ldr	r5, [pc, #516]	@ (800be4c <_dtoa_r+0x584>)
 800bc46:	f004 020f 	and.w	r2, r4, #15
 800bc4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bc56:	f7f4 fcd7 	bl	8000608 <__aeabi_dmul>
 800bc5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc5e:	1124      	asrs	r4, r4, #4
 800bc60:	2300      	movs	r3, #0
 800bc62:	2602      	movs	r6, #2
 800bc64:	2c00      	cmp	r4, #0
 800bc66:	f040 808f 	bne.w	800bd88 <_dtoa_r+0x4c0>
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1d3      	bne.n	800bc16 <_dtoa_r+0x34e>
 800bc6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bc70:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f000 8094 	beq.w	800bda2 <_dtoa_r+0x4da>
 800bc7a:	4b75      	ldr	r3, [pc, #468]	@ (800be50 <_dtoa_r+0x588>)
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	4620      	mov	r0, r4
 800bc80:	4629      	mov	r1, r5
 800bc82:	f7f4 ff33 	bl	8000aec <__aeabi_dcmplt>
 800bc86:	2800      	cmp	r0, #0
 800bc88:	f000 808b 	beq.w	800bda2 <_dtoa_r+0x4da>
 800bc8c:	9b03      	ldr	r3, [sp, #12]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f000 8087 	beq.w	800bda2 <_dtoa_r+0x4da>
 800bc94:	f1bb 0f00 	cmp.w	fp, #0
 800bc98:	dd34      	ble.n	800bd04 <_dtoa_r+0x43c>
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	4b6d      	ldr	r3, [pc, #436]	@ (800be54 <_dtoa_r+0x58c>)
 800bc9e:	2200      	movs	r2, #0
 800bca0:	4629      	mov	r1, r5
 800bca2:	f7f4 fcb1 	bl	8000608 <__aeabi_dmul>
 800bca6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcaa:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800bcae:	3601      	adds	r6, #1
 800bcb0:	465c      	mov	r4, fp
 800bcb2:	4630      	mov	r0, r6
 800bcb4:	f7f4 fc3e 	bl	8000534 <__aeabi_i2d>
 800bcb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcbc:	f7f4 fca4 	bl	8000608 <__aeabi_dmul>
 800bcc0:	4b65      	ldr	r3, [pc, #404]	@ (800be58 <_dtoa_r+0x590>)
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f7f4 faea 	bl	800029c <__adddf3>
 800bcc8:	4605      	mov	r5, r0
 800bcca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bcce:	2c00      	cmp	r4, #0
 800bcd0:	d16a      	bne.n	800bda8 <_dtoa_r+0x4e0>
 800bcd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcd6:	4b61      	ldr	r3, [pc, #388]	@ (800be5c <_dtoa_r+0x594>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f7f4 fadd 	bl	8000298 <__aeabi_dsub>
 800bcde:	4602      	mov	r2, r0
 800bce0:	460b      	mov	r3, r1
 800bce2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bce6:	462a      	mov	r2, r5
 800bce8:	4633      	mov	r3, r6
 800bcea:	f7f4 ff1d 	bl	8000b28 <__aeabi_dcmpgt>
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	f040 8298 	bne.w	800c224 <_dtoa_r+0x95c>
 800bcf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcf8:	462a      	mov	r2, r5
 800bcfa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bcfe:	f7f4 fef5 	bl	8000aec <__aeabi_dcmplt>
 800bd02:	bb38      	cbnz	r0, 800bd54 <_dtoa_r+0x48c>
 800bd04:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800bd08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bd0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	f2c0 8157 	blt.w	800bfc2 <_dtoa_r+0x6fa>
 800bd14:	2f0e      	cmp	r7, #14
 800bd16:	f300 8154 	bgt.w	800bfc2 <_dtoa_r+0x6fa>
 800bd1a:	4b4b      	ldr	r3, [pc, #300]	@ (800be48 <_dtoa_r+0x580>)
 800bd1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd20:	ed93 7b00 	vldr	d7, [r3]
 800bd24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	ed8d 7b00 	vstr	d7, [sp]
 800bd2c:	f280 80e5 	bge.w	800befa <_dtoa_r+0x632>
 800bd30:	9b03      	ldr	r3, [sp, #12]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f300 80e1 	bgt.w	800befa <_dtoa_r+0x632>
 800bd38:	d10c      	bne.n	800bd54 <_dtoa_r+0x48c>
 800bd3a:	4b48      	ldr	r3, [pc, #288]	@ (800be5c <_dtoa_r+0x594>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	ec51 0b17 	vmov	r0, r1, d7
 800bd42:	f7f4 fc61 	bl	8000608 <__aeabi_dmul>
 800bd46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd4a:	f7f4 fee3 	bl	8000b14 <__aeabi_dcmpge>
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	f000 8266 	beq.w	800c220 <_dtoa_r+0x958>
 800bd54:	2400      	movs	r4, #0
 800bd56:	4625      	mov	r5, r4
 800bd58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd5a:	4656      	mov	r6, sl
 800bd5c:	ea6f 0803 	mvn.w	r8, r3
 800bd60:	2700      	movs	r7, #0
 800bd62:	4621      	mov	r1, r4
 800bd64:	4648      	mov	r0, r9
 800bd66:	f000 fcbf 	bl	800c6e8 <_Bfree>
 800bd6a:	2d00      	cmp	r5, #0
 800bd6c:	f000 80bd 	beq.w	800beea <_dtoa_r+0x622>
 800bd70:	b12f      	cbz	r7, 800bd7e <_dtoa_r+0x4b6>
 800bd72:	42af      	cmp	r7, r5
 800bd74:	d003      	beq.n	800bd7e <_dtoa_r+0x4b6>
 800bd76:	4639      	mov	r1, r7
 800bd78:	4648      	mov	r0, r9
 800bd7a:	f000 fcb5 	bl	800c6e8 <_Bfree>
 800bd7e:	4629      	mov	r1, r5
 800bd80:	4648      	mov	r0, r9
 800bd82:	f000 fcb1 	bl	800c6e8 <_Bfree>
 800bd86:	e0b0      	b.n	800beea <_dtoa_r+0x622>
 800bd88:	07e2      	lsls	r2, r4, #31
 800bd8a:	d505      	bpl.n	800bd98 <_dtoa_r+0x4d0>
 800bd8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd90:	f7f4 fc3a 	bl	8000608 <__aeabi_dmul>
 800bd94:	3601      	adds	r6, #1
 800bd96:	2301      	movs	r3, #1
 800bd98:	1064      	asrs	r4, r4, #1
 800bd9a:	3508      	adds	r5, #8
 800bd9c:	e762      	b.n	800bc64 <_dtoa_r+0x39c>
 800bd9e:	2602      	movs	r6, #2
 800bda0:	e765      	b.n	800bc6e <_dtoa_r+0x3a6>
 800bda2:	9c03      	ldr	r4, [sp, #12]
 800bda4:	46b8      	mov	r8, r7
 800bda6:	e784      	b.n	800bcb2 <_dtoa_r+0x3ea>
 800bda8:	4b27      	ldr	r3, [pc, #156]	@ (800be48 <_dtoa_r+0x580>)
 800bdaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bdac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bdb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdb4:	4454      	add	r4, sl
 800bdb6:	2900      	cmp	r1, #0
 800bdb8:	d054      	beq.n	800be64 <_dtoa_r+0x59c>
 800bdba:	4929      	ldr	r1, [pc, #164]	@ (800be60 <_dtoa_r+0x598>)
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	f7f4 fd4d 	bl	800085c <__aeabi_ddiv>
 800bdc2:	4633      	mov	r3, r6
 800bdc4:	462a      	mov	r2, r5
 800bdc6:	f7f4 fa67 	bl	8000298 <__aeabi_dsub>
 800bdca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bdce:	4656      	mov	r6, sl
 800bdd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdd4:	f7f4 fec8 	bl	8000b68 <__aeabi_d2iz>
 800bdd8:	4605      	mov	r5, r0
 800bdda:	f7f4 fbab 	bl	8000534 <__aeabi_i2d>
 800bdde:	4602      	mov	r2, r0
 800bde0:	460b      	mov	r3, r1
 800bde2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bde6:	f7f4 fa57 	bl	8000298 <__aeabi_dsub>
 800bdea:	3530      	adds	r5, #48	@ 0x30
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bdf4:	f806 5b01 	strb.w	r5, [r6], #1
 800bdf8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bdfc:	f7f4 fe76 	bl	8000aec <__aeabi_dcmplt>
 800be00:	2800      	cmp	r0, #0
 800be02:	d172      	bne.n	800beea <_dtoa_r+0x622>
 800be04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be08:	4911      	ldr	r1, [pc, #68]	@ (800be50 <_dtoa_r+0x588>)
 800be0a:	2000      	movs	r0, #0
 800be0c:	f7f4 fa44 	bl	8000298 <__aeabi_dsub>
 800be10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800be14:	f7f4 fe6a 	bl	8000aec <__aeabi_dcmplt>
 800be18:	2800      	cmp	r0, #0
 800be1a:	f040 80b4 	bne.w	800bf86 <_dtoa_r+0x6be>
 800be1e:	42a6      	cmp	r6, r4
 800be20:	f43f af70 	beq.w	800bd04 <_dtoa_r+0x43c>
 800be24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800be28:	4b0a      	ldr	r3, [pc, #40]	@ (800be54 <_dtoa_r+0x58c>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	f7f4 fbec 	bl	8000608 <__aeabi_dmul>
 800be30:	4b08      	ldr	r3, [pc, #32]	@ (800be54 <_dtoa_r+0x58c>)
 800be32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800be36:	2200      	movs	r2, #0
 800be38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be3c:	f7f4 fbe4 	bl	8000608 <__aeabi_dmul>
 800be40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be44:	e7c4      	b.n	800bdd0 <_dtoa_r+0x508>
 800be46:	bf00      	nop
 800be48:	0800db08 	.word	0x0800db08
 800be4c:	0800dae0 	.word	0x0800dae0
 800be50:	3ff00000 	.word	0x3ff00000
 800be54:	40240000 	.word	0x40240000
 800be58:	401c0000 	.word	0x401c0000
 800be5c:	40140000 	.word	0x40140000
 800be60:	3fe00000 	.word	0x3fe00000
 800be64:	4631      	mov	r1, r6
 800be66:	4628      	mov	r0, r5
 800be68:	f7f4 fbce 	bl	8000608 <__aeabi_dmul>
 800be6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800be70:	9413      	str	r4, [sp, #76]	@ 0x4c
 800be72:	4656      	mov	r6, sl
 800be74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be78:	f7f4 fe76 	bl	8000b68 <__aeabi_d2iz>
 800be7c:	4605      	mov	r5, r0
 800be7e:	f7f4 fb59 	bl	8000534 <__aeabi_i2d>
 800be82:	4602      	mov	r2, r0
 800be84:	460b      	mov	r3, r1
 800be86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be8a:	f7f4 fa05 	bl	8000298 <__aeabi_dsub>
 800be8e:	3530      	adds	r5, #48	@ 0x30
 800be90:	f806 5b01 	strb.w	r5, [r6], #1
 800be94:	4602      	mov	r2, r0
 800be96:	460b      	mov	r3, r1
 800be98:	42a6      	cmp	r6, r4
 800be9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be9e:	f04f 0200 	mov.w	r2, #0
 800bea2:	d124      	bne.n	800beee <_dtoa_r+0x626>
 800bea4:	4baf      	ldr	r3, [pc, #700]	@ (800c164 <_dtoa_r+0x89c>)
 800bea6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800beaa:	f7f4 f9f7 	bl	800029c <__adddf3>
 800beae:	4602      	mov	r2, r0
 800beb0:	460b      	mov	r3, r1
 800beb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800beb6:	f7f4 fe37 	bl	8000b28 <__aeabi_dcmpgt>
 800beba:	2800      	cmp	r0, #0
 800bebc:	d163      	bne.n	800bf86 <_dtoa_r+0x6be>
 800bebe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bec2:	49a8      	ldr	r1, [pc, #672]	@ (800c164 <_dtoa_r+0x89c>)
 800bec4:	2000      	movs	r0, #0
 800bec6:	f7f4 f9e7 	bl	8000298 <__aeabi_dsub>
 800beca:	4602      	mov	r2, r0
 800becc:	460b      	mov	r3, r1
 800bece:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bed2:	f7f4 fe0b 	bl	8000aec <__aeabi_dcmplt>
 800bed6:	2800      	cmp	r0, #0
 800bed8:	f43f af14 	beq.w	800bd04 <_dtoa_r+0x43c>
 800bedc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bede:	1e73      	subs	r3, r6, #1
 800bee0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bee2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bee6:	2b30      	cmp	r3, #48	@ 0x30
 800bee8:	d0f8      	beq.n	800bedc <_dtoa_r+0x614>
 800beea:	4647      	mov	r7, r8
 800beec:	e03b      	b.n	800bf66 <_dtoa_r+0x69e>
 800beee:	4b9e      	ldr	r3, [pc, #632]	@ (800c168 <_dtoa_r+0x8a0>)
 800bef0:	f7f4 fb8a 	bl	8000608 <__aeabi_dmul>
 800bef4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bef8:	e7bc      	b.n	800be74 <_dtoa_r+0x5ac>
 800befa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800befe:	4656      	mov	r6, sl
 800bf00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf04:	4620      	mov	r0, r4
 800bf06:	4629      	mov	r1, r5
 800bf08:	f7f4 fca8 	bl	800085c <__aeabi_ddiv>
 800bf0c:	f7f4 fe2c 	bl	8000b68 <__aeabi_d2iz>
 800bf10:	4680      	mov	r8, r0
 800bf12:	f7f4 fb0f 	bl	8000534 <__aeabi_i2d>
 800bf16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf1a:	f7f4 fb75 	bl	8000608 <__aeabi_dmul>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	460b      	mov	r3, r1
 800bf22:	4620      	mov	r0, r4
 800bf24:	4629      	mov	r1, r5
 800bf26:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bf2a:	f7f4 f9b5 	bl	8000298 <__aeabi_dsub>
 800bf2e:	f806 4b01 	strb.w	r4, [r6], #1
 800bf32:	9d03      	ldr	r5, [sp, #12]
 800bf34:	eba6 040a 	sub.w	r4, r6, sl
 800bf38:	42a5      	cmp	r5, r4
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	d133      	bne.n	800bfa8 <_dtoa_r+0x6e0>
 800bf40:	f7f4 f9ac 	bl	800029c <__adddf3>
 800bf44:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf48:	4604      	mov	r4, r0
 800bf4a:	460d      	mov	r5, r1
 800bf4c:	f7f4 fdec 	bl	8000b28 <__aeabi_dcmpgt>
 800bf50:	b9c0      	cbnz	r0, 800bf84 <_dtoa_r+0x6bc>
 800bf52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf56:	4620      	mov	r0, r4
 800bf58:	4629      	mov	r1, r5
 800bf5a:	f7f4 fdbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf5e:	b110      	cbz	r0, 800bf66 <_dtoa_r+0x69e>
 800bf60:	f018 0f01 	tst.w	r8, #1
 800bf64:	d10e      	bne.n	800bf84 <_dtoa_r+0x6bc>
 800bf66:	9902      	ldr	r1, [sp, #8]
 800bf68:	4648      	mov	r0, r9
 800bf6a:	f000 fbbd 	bl	800c6e8 <_Bfree>
 800bf6e:	2300      	movs	r3, #0
 800bf70:	7033      	strb	r3, [r6, #0]
 800bf72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf74:	3701      	adds	r7, #1
 800bf76:	601f      	str	r7, [r3, #0]
 800bf78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f000 824b 	beq.w	800c416 <_dtoa_r+0xb4e>
 800bf80:	601e      	str	r6, [r3, #0]
 800bf82:	e248      	b.n	800c416 <_dtoa_r+0xb4e>
 800bf84:	46b8      	mov	r8, r7
 800bf86:	4633      	mov	r3, r6
 800bf88:	461e      	mov	r6, r3
 800bf8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf8e:	2a39      	cmp	r2, #57	@ 0x39
 800bf90:	d106      	bne.n	800bfa0 <_dtoa_r+0x6d8>
 800bf92:	459a      	cmp	sl, r3
 800bf94:	d1f8      	bne.n	800bf88 <_dtoa_r+0x6c0>
 800bf96:	2230      	movs	r2, #48	@ 0x30
 800bf98:	f108 0801 	add.w	r8, r8, #1
 800bf9c:	f88a 2000 	strb.w	r2, [sl]
 800bfa0:	781a      	ldrb	r2, [r3, #0]
 800bfa2:	3201      	adds	r2, #1
 800bfa4:	701a      	strb	r2, [r3, #0]
 800bfa6:	e7a0      	b.n	800beea <_dtoa_r+0x622>
 800bfa8:	4b6f      	ldr	r3, [pc, #444]	@ (800c168 <_dtoa_r+0x8a0>)
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f7f4 fb2c 	bl	8000608 <__aeabi_dmul>
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	4604      	mov	r4, r0
 800bfb6:	460d      	mov	r5, r1
 800bfb8:	f7f4 fd8e 	bl	8000ad8 <__aeabi_dcmpeq>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	d09f      	beq.n	800bf00 <_dtoa_r+0x638>
 800bfc0:	e7d1      	b.n	800bf66 <_dtoa_r+0x69e>
 800bfc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfc4:	2a00      	cmp	r2, #0
 800bfc6:	f000 80ea 	beq.w	800c19e <_dtoa_r+0x8d6>
 800bfca:	9a07      	ldr	r2, [sp, #28]
 800bfcc:	2a01      	cmp	r2, #1
 800bfce:	f300 80cd 	bgt.w	800c16c <_dtoa_r+0x8a4>
 800bfd2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bfd4:	2a00      	cmp	r2, #0
 800bfd6:	f000 80c1 	beq.w	800c15c <_dtoa_r+0x894>
 800bfda:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bfde:	9c08      	ldr	r4, [sp, #32]
 800bfe0:	9e00      	ldr	r6, [sp, #0]
 800bfe2:	9a00      	ldr	r2, [sp, #0]
 800bfe4:	441a      	add	r2, r3
 800bfe6:	9200      	str	r2, [sp, #0]
 800bfe8:	9a06      	ldr	r2, [sp, #24]
 800bfea:	2101      	movs	r1, #1
 800bfec:	441a      	add	r2, r3
 800bfee:	4648      	mov	r0, r9
 800bff0:	9206      	str	r2, [sp, #24]
 800bff2:	f000 fc2d 	bl	800c850 <__i2b>
 800bff6:	4605      	mov	r5, r0
 800bff8:	b166      	cbz	r6, 800c014 <_dtoa_r+0x74c>
 800bffa:	9b06      	ldr	r3, [sp, #24]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	dd09      	ble.n	800c014 <_dtoa_r+0x74c>
 800c000:	42b3      	cmp	r3, r6
 800c002:	9a00      	ldr	r2, [sp, #0]
 800c004:	bfa8      	it	ge
 800c006:	4633      	movge	r3, r6
 800c008:	1ad2      	subs	r2, r2, r3
 800c00a:	9200      	str	r2, [sp, #0]
 800c00c:	9a06      	ldr	r2, [sp, #24]
 800c00e:	1af6      	subs	r6, r6, r3
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	9306      	str	r3, [sp, #24]
 800c014:	9b08      	ldr	r3, [sp, #32]
 800c016:	b30b      	cbz	r3, 800c05c <_dtoa_r+0x794>
 800c018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	f000 80c6 	beq.w	800c1ac <_dtoa_r+0x8e4>
 800c020:	2c00      	cmp	r4, #0
 800c022:	f000 80c0 	beq.w	800c1a6 <_dtoa_r+0x8de>
 800c026:	4629      	mov	r1, r5
 800c028:	4622      	mov	r2, r4
 800c02a:	4648      	mov	r0, r9
 800c02c:	f000 fcc8 	bl	800c9c0 <__pow5mult>
 800c030:	9a02      	ldr	r2, [sp, #8]
 800c032:	4601      	mov	r1, r0
 800c034:	4605      	mov	r5, r0
 800c036:	4648      	mov	r0, r9
 800c038:	f000 fc20 	bl	800c87c <__multiply>
 800c03c:	9902      	ldr	r1, [sp, #8]
 800c03e:	4680      	mov	r8, r0
 800c040:	4648      	mov	r0, r9
 800c042:	f000 fb51 	bl	800c6e8 <_Bfree>
 800c046:	9b08      	ldr	r3, [sp, #32]
 800c048:	1b1b      	subs	r3, r3, r4
 800c04a:	9308      	str	r3, [sp, #32]
 800c04c:	f000 80b1 	beq.w	800c1b2 <_dtoa_r+0x8ea>
 800c050:	9a08      	ldr	r2, [sp, #32]
 800c052:	4641      	mov	r1, r8
 800c054:	4648      	mov	r0, r9
 800c056:	f000 fcb3 	bl	800c9c0 <__pow5mult>
 800c05a:	9002      	str	r0, [sp, #8]
 800c05c:	2101      	movs	r1, #1
 800c05e:	4648      	mov	r0, r9
 800c060:	f000 fbf6 	bl	800c850 <__i2b>
 800c064:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c066:	4604      	mov	r4, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 81d8 	beq.w	800c41e <_dtoa_r+0xb56>
 800c06e:	461a      	mov	r2, r3
 800c070:	4601      	mov	r1, r0
 800c072:	4648      	mov	r0, r9
 800c074:	f000 fca4 	bl	800c9c0 <__pow5mult>
 800c078:	9b07      	ldr	r3, [sp, #28]
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	4604      	mov	r4, r0
 800c07e:	f300 809f 	bgt.w	800c1c0 <_dtoa_r+0x8f8>
 800c082:	9b04      	ldr	r3, [sp, #16]
 800c084:	2b00      	cmp	r3, #0
 800c086:	f040 8097 	bne.w	800c1b8 <_dtoa_r+0x8f0>
 800c08a:	9b05      	ldr	r3, [sp, #20]
 800c08c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c090:	2b00      	cmp	r3, #0
 800c092:	f040 8093 	bne.w	800c1bc <_dtoa_r+0x8f4>
 800c096:	9b05      	ldr	r3, [sp, #20]
 800c098:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c09c:	0d1b      	lsrs	r3, r3, #20
 800c09e:	051b      	lsls	r3, r3, #20
 800c0a0:	b133      	cbz	r3, 800c0b0 <_dtoa_r+0x7e8>
 800c0a2:	9b00      	ldr	r3, [sp, #0]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	9b06      	ldr	r3, [sp, #24]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	9306      	str	r3, [sp, #24]
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	9308      	str	r3, [sp, #32]
 800c0b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	f000 81b8 	beq.w	800c42a <_dtoa_r+0xb62>
 800c0ba:	6923      	ldr	r3, [r4, #16]
 800c0bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c0c0:	6918      	ldr	r0, [r3, #16]
 800c0c2:	f000 fb79 	bl	800c7b8 <__hi0bits>
 800c0c6:	f1c0 0020 	rsb	r0, r0, #32
 800c0ca:	9b06      	ldr	r3, [sp, #24]
 800c0cc:	4418      	add	r0, r3
 800c0ce:	f010 001f 	ands.w	r0, r0, #31
 800c0d2:	f000 8082 	beq.w	800c1da <_dtoa_r+0x912>
 800c0d6:	f1c0 0320 	rsb	r3, r0, #32
 800c0da:	2b04      	cmp	r3, #4
 800c0dc:	dd73      	ble.n	800c1c6 <_dtoa_r+0x8fe>
 800c0de:	9b00      	ldr	r3, [sp, #0]
 800c0e0:	f1c0 001c 	rsb	r0, r0, #28
 800c0e4:	4403      	add	r3, r0
 800c0e6:	9300      	str	r3, [sp, #0]
 800c0e8:	9b06      	ldr	r3, [sp, #24]
 800c0ea:	4403      	add	r3, r0
 800c0ec:	4406      	add	r6, r0
 800c0ee:	9306      	str	r3, [sp, #24]
 800c0f0:	9b00      	ldr	r3, [sp, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	dd05      	ble.n	800c102 <_dtoa_r+0x83a>
 800c0f6:	9902      	ldr	r1, [sp, #8]
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	4648      	mov	r0, r9
 800c0fc:	f000 fcba 	bl	800ca74 <__lshift>
 800c100:	9002      	str	r0, [sp, #8]
 800c102:	9b06      	ldr	r3, [sp, #24]
 800c104:	2b00      	cmp	r3, #0
 800c106:	dd05      	ble.n	800c114 <_dtoa_r+0x84c>
 800c108:	4621      	mov	r1, r4
 800c10a:	461a      	mov	r2, r3
 800c10c:	4648      	mov	r0, r9
 800c10e:	f000 fcb1 	bl	800ca74 <__lshift>
 800c112:	4604      	mov	r4, r0
 800c114:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c116:	2b00      	cmp	r3, #0
 800c118:	d061      	beq.n	800c1de <_dtoa_r+0x916>
 800c11a:	9802      	ldr	r0, [sp, #8]
 800c11c:	4621      	mov	r1, r4
 800c11e:	f000 fd15 	bl	800cb4c <__mcmp>
 800c122:	2800      	cmp	r0, #0
 800c124:	da5b      	bge.n	800c1de <_dtoa_r+0x916>
 800c126:	2300      	movs	r3, #0
 800c128:	9902      	ldr	r1, [sp, #8]
 800c12a:	220a      	movs	r2, #10
 800c12c:	4648      	mov	r0, r9
 800c12e:	f000 fafd 	bl	800c72c <__multadd>
 800c132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c134:	9002      	str	r0, [sp, #8]
 800c136:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	f000 8177 	beq.w	800c42e <_dtoa_r+0xb66>
 800c140:	4629      	mov	r1, r5
 800c142:	2300      	movs	r3, #0
 800c144:	220a      	movs	r2, #10
 800c146:	4648      	mov	r0, r9
 800c148:	f000 faf0 	bl	800c72c <__multadd>
 800c14c:	f1bb 0f00 	cmp.w	fp, #0
 800c150:	4605      	mov	r5, r0
 800c152:	dc6f      	bgt.n	800c234 <_dtoa_r+0x96c>
 800c154:	9b07      	ldr	r3, [sp, #28]
 800c156:	2b02      	cmp	r3, #2
 800c158:	dc49      	bgt.n	800c1ee <_dtoa_r+0x926>
 800c15a:	e06b      	b.n	800c234 <_dtoa_r+0x96c>
 800c15c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c15e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c162:	e73c      	b.n	800bfde <_dtoa_r+0x716>
 800c164:	3fe00000 	.word	0x3fe00000
 800c168:	40240000 	.word	0x40240000
 800c16c:	9b03      	ldr	r3, [sp, #12]
 800c16e:	1e5c      	subs	r4, r3, #1
 800c170:	9b08      	ldr	r3, [sp, #32]
 800c172:	42a3      	cmp	r3, r4
 800c174:	db09      	blt.n	800c18a <_dtoa_r+0x8c2>
 800c176:	1b1c      	subs	r4, r3, r4
 800c178:	9b03      	ldr	r3, [sp, #12]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f6bf af30 	bge.w	800bfe0 <_dtoa_r+0x718>
 800c180:	9b00      	ldr	r3, [sp, #0]
 800c182:	9a03      	ldr	r2, [sp, #12]
 800c184:	1a9e      	subs	r6, r3, r2
 800c186:	2300      	movs	r3, #0
 800c188:	e72b      	b.n	800bfe2 <_dtoa_r+0x71a>
 800c18a:	9b08      	ldr	r3, [sp, #32]
 800c18c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c18e:	9408      	str	r4, [sp, #32]
 800c190:	1ae3      	subs	r3, r4, r3
 800c192:	441a      	add	r2, r3
 800c194:	9e00      	ldr	r6, [sp, #0]
 800c196:	9b03      	ldr	r3, [sp, #12]
 800c198:	920d      	str	r2, [sp, #52]	@ 0x34
 800c19a:	2400      	movs	r4, #0
 800c19c:	e721      	b.n	800bfe2 <_dtoa_r+0x71a>
 800c19e:	9c08      	ldr	r4, [sp, #32]
 800c1a0:	9e00      	ldr	r6, [sp, #0]
 800c1a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c1a4:	e728      	b.n	800bff8 <_dtoa_r+0x730>
 800c1a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c1aa:	e751      	b.n	800c050 <_dtoa_r+0x788>
 800c1ac:	9a08      	ldr	r2, [sp, #32]
 800c1ae:	9902      	ldr	r1, [sp, #8]
 800c1b0:	e750      	b.n	800c054 <_dtoa_r+0x78c>
 800c1b2:	f8cd 8008 	str.w	r8, [sp, #8]
 800c1b6:	e751      	b.n	800c05c <_dtoa_r+0x794>
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	e779      	b.n	800c0b0 <_dtoa_r+0x7e8>
 800c1bc:	9b04      	ldr	r3, [sp, #16]
 800c1be:	e777      	b.n	800c0b0 <_dtoa_r+0x7e8>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	9308      	str	r3, [sp, #32]
 800c1c4:	e779      	b.n	800c0ba <_dtoa_r+0x7f2>
 800c1c6:	d093      	beq.n	800c0f0 <_dtoa_r+0x828>
 800c1c8:	9a00      	ldr	r2, [sp, #0]
 800c1ca:	331c      	adds	r3, #28
 800c1cc:	441a      	add	r2, r3
 800c1ce:	9200      	str	r2, [sp, #0]
 800c1d0:	9a06      	ldr	r2, [sp, #24]
 800c1d2:	441a      	add	r2, r3
 800c1d4:	441e      	add	r6, r3
 800c1d6:	9206      	str	r2, [sp, #24]
 800c1d8:	e78a      	b.n	800c0f0 <_dtoa_r+0x828>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	e7f4      	b.n	800c1c8 <_dtoa_r+0x900>
 800c1de:	9b03      	ldr	r3, [sp, #12]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	46b8      	mov	r8, r7
 800c1e4:	dc20      	bgt.n	800c228 <_dtoa_r+0x960>
 800c1e6:	469b      	mov	fp, r3
 800c1e8:	9b07      	ldr	r3, [sp, #28]
 800c1ea:	2b02      	cmp	r3, #2
 800c1ec:	dd1e      	ble.n	800c22c <_dtoa_r+0x964>
 800c1ee:	f1bb 0f00 	cmp.w	fp, #0
 800c1f2:	f47f adb1 	bne.w	800bd58 <_dtoa_r+0x490>
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	465b      	mov	r3, fp
 800c1fa:	2205      	movs	r2, #5
 800c1fc:	4648      	mov	r0, r9
 800c1fe:	f000 fa95 	bl	800c72c <__multadd>
 800c202:	4601      	mov	r1, r0
 800c204:	4604      	mov	r4, r0
 800c206:	9802      	ldr	r0, [sp, #8]
 800c208:	f000 fca0 	bl	800cb4c <__mcmp>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	f77f ada3 	ble.w	800bd58 <_dtoa_r+0x490>
 800c212:	4656      	mov	r6, sl
 800c214:	2331      	movs	r3, #49	@ 0x31
 800c216:	f806 3b01 	strb.w	r3, [r6], #1
 800c21a:	f108 0801 	add.w	r8, r8, #1
 800c21e:	e59f      	b.n	800bd60 <_dtoa_r+0x498>
 800c220:	9c03      	ldr	r4, [sp, #12]
 800c222:	46b8      	mov	r8, r7
 800c224:	4625      	mov	r5, r4
 800c226:	e7f4      	b.n	800c212 <_dtoa_r+0x94a>
 800c228:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c22e:	2b00      	cmp	r3, #0
 800c230:	f000 8101 	beq.w	800c436 <_dtoa_r+0xb6e>
 800c234:	2e00      	cmp	r6, #0
 800c236:	dd05      	ble.n	800c244 <_dtoa_r+0x97c>
 800c238:	4629      	mov	r1, r5
 800c23a:	4632      	mov	r2, r6
 800c23c:	4648      	mov	r0, r9
 800c23e:	f000 fc19 	bl	800ca74 <__lshift>
 800c242:	4605      	mov	r5, r0
 800c244:	9b08      	ldr	r3, [sp, #32]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d05c      	beq.n	800c304 <_dtoa_r+0xa3c>
 800c24a:	6869      	ldr	r1, [r5, #4]
 800c24c:	4648      	mov	r0, r9
 800c24e:	f000 fa0b 	bl	800c668 <_Balloc>
 800c252:	4606      	mov	r6, r0
 800c254:	b928      	cbnz	r0, 800c262 <_dtoa_r+0x99a>
 800c256:	4b82      	ldr	r3, [pc, #520]	@ (800c460 <_dtoa_r+0xb98>)
 800c258:	4602      	mov	r2, r0
 800c25a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c25e:	f7ff bb4a 	b.w	800b8f6 <_dtoa_r+0x2e>
 800c262:	692a      	ldr	r2, [r5, #16]
 800c264:	3202      	adds	r2, #2
 800c266:	0092      	lsls	r2, r2, #2
 800c268:	f105 010c 	add.w	r1, r5, #12
 800c26c:	300c      	adds	r0, #12
 800c26e:	f000 ffa3 	bl	800d1b8 <memcpy>
 800c272:	2201      	movs	r2, #1
 800c274:	4631      	mov	r1, r6
 800c276:	4648      	mov	r0, r9
 800c278:	f000 fbfc 	bl	800ca74 <__lshift>
 800c27c:	f10a 0301 	add.w	r3, sl, #1
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	eb0a 030b 	add.w	r3, sl, fp
 800c286:	9308      	str	r3, [sp, #32]
 800c288:	9b04      	ldr	r3, [sp, #16]
 800c28a:	f003 0301 	and.w	r3, r3, #1
 800c28e:	462f      	mov	r7, r5
 800c290:	9306      	str	r3, [sp, #24]
 800c292:	4605      	mov	r5, r0
 800c294:	9b00      	ldr	r3, [sp, #0]
 800c296:	9802      	ldr	r0, [sp, #8]
 800c298:	4621      	mov	r1, r4
 800c29a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800c29e:	f7ff fa88 	bl	800b7b2 <quorem>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	3330      	adds	r3, #48	@ 0x30
 800c2a6:	9003      	str	r0, [sp, #12]
 800c2a8:	4639      	mov	r1, r7
 800c2aa:	9802      	ldr	r0, [sp, #8]
 800c2ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2ae:	f000 fc4d 	bl	800cb4c <__mcmp>
 800c2b2:	462a      	mov	r2, r5
 800c2b4:	9004      	str	r0, [sp, #16]
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	4648      	mov	r0, r9
 800c2ba:	f000 fc63 	bl	800cb84 <__mdiff>
 800c2be:	68c2      	ldr	r2, [r0, #12]
 800c2c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2c2:	4606      	mov	r6, r0
 800c2c4:	bb02      	cbnz	r2, 800c308 <_dtoa_r+0xa40>
 800c2c6:	4601      	mov	r1, r0
 800c2c8:	9802      	ldr	r0, [sp, #8]
 800c2ca:	f000 fc3f 	bl	800cb4c <__mcmp>
 800c2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	4631      	mov	r1, r6
 800c2d4:	4648      	mov	r0, r9
 800c2d6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c2d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2da:	f000 fa05 	bl	800c6e8 <_Bfree>
 800c2de:	9b07      	ldr	r3, [sp, #28]
 800c2e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c2e2:	9e00      	ldr	r6, [sp, #0]
 800c2e4:	ea42 0103 	orr.w	r1, r2, r3
 800c2e8:	9b06      	ldr	r3, [sp, #24]
 800c2ea:	4319      	orrs	r1, r3
 800c2ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2ee:	d10d      	bne.n	800c30c <_dtoa_r+0xa44>
 800c2f0:	2b39      	cmp	r3, #57	@ 0x39
 800c2f2:	d027      	beq.n	800c344 <_dtoa_r+0xa7c>
 800c2f4:	9a04      	ldr	r2, [sp, #16]
 800c2f6:	2a00      	cmp	r2, #0
 800c2f8:	dd01      	ble.n	800c2fe <_dtoa_r+0xa36>
 800c2fa:	9b03      	ldr	r3, [sp, #12]
 800c2fc:	3331      	adds	r3, #49	@ 0x31
 800c2fe:	f88b 3000 	strb.w	r3, [fp]
 800c302:	e52e      	b.n	800bd62 <_dtoa_r+0x49a>
 800c304:	4628      	mov	r0, r5
 800c306:	e7b9      	b.n	800c27c <_dtoa_r+0x9b4>
 800c308:	2201      	movs	r2, #1
 800c30a:	e7e2      	b.n	800c2d2 <_dtoa_r+0xa0a>
 800c30c:	9904      	ldr	r1, [sp, #16]
 800c30e:	2900      	cmp	r1, #0
 800c310:	db04      	blt.n	800c31c <_dtoa_r+0xa54>
 800c312:	9807      	ldr	r0, [sp, #28]
 800c314:	4301      	orrs	r1, r0
 800c316:	9806      	ldr	r0, [sp, #24]
 800c318:	4301      	orrs	r1, r0
 800c31a:	d120      	bne.n	800c35e <_dtoa_r+0xa96>
 800c31c:	2a00      	cmp	r2, #0
 800c31e:	ddee      	ble.n	800c2fe <_dtoa_r+0xa36>
 800c320:	9902      	ldr	r1, [sp, #8]
 800c322:	9300      	str	r3, [sp, #0]
 800c324:	2201      	movs	r2, #1
 800c326:	4648      	mov	r0, r9
 800c328:	f000 fba4 	bl	800ca74 <__lshift>
 800c32c:	4621      	mov	r1, r4
 800c32e:	9002      	str	r0, [sp, #8]
 800c330:	f000 fc0c 	bl	800cb4c <__mcmp>
 800c334:	2800      	cmp	r0, #0
 800c336:	9b00      	ldr	r3, [sp, #0]
 800c338:	dc02      	bgt.n	800c340 <_dtoa_r+0xa78>
 800c33a:	d1e0      	bne.n	800c2fe <_dtoa_r+0xa36>
 800c33c:	07da      	lsls	r2, r3, #31
 800c33e:	d5de      	bpl.n	800c2fe <_dtoa_r+0xa36>
 800c340:	2b39      	cmp	r3, #57	@ 0x39
 800c342:	d1da      	bne.n	800c2fa <_dtoa_r+0xa32>
 800c344:	2339      	movs	r3, #57	@ 0x39
 800c346:	f88b 3000 	strb.w	r3, [fp]
 800c34a:	4633      	mov	r3, r6
 800c34c:	461e      	mov	r6, r3
 800c34e:	3b01      	subs	r3, #1
 800c350:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c354:	2a39      	cmp	r2, #57	@ 0x39
 800c356:	d04e      	beq.n	800c3f6 <_dtoa_r+0xb2e>
 800c358:	3201      	adds	r2, #1
 800c35a:	701a      	strb	r2, [r3, #0]
 800c35c:	e501      	b.n	800bd62 <_dtoa_r+0x49a>
 800c35e:	2a00      	cmp	r2, #0
 800c360:	dd03      	ble.n	800c36a <_dtoa_r+0xaa2>
 800c362:	2b39      	cmp	r3, #57	@ 0x39
 800c364:	d0ee      	beq.n	800c344 <_dtoa_r+0xa7c>
 800c366:	3301      	adds	r3, #1
 800c368:	e7c9      	b.n	800c2fe <_dtoa_r+0xa36>
 800c36a:	9a00      	ldr	r2, [sp, #0]
 800c36c:	9908      	ldr	r1, [sp, #32]
 800c36e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c372:	428a      	cmp	r2, r1
 800c374:	d028      	beq.n	800c3c8 <_dtoa_r+0xb00>
 800c376:	9902      	ldr	r1, [sp, #8]
 800c378:	2300      	movs	r3, #0
 800c37a:	220a      	movs	r2, #10
 800c37c:	4648      	mov	r0, r9
 800c37e:	f000 f9d5 	bl	800c72c <__multadd>
 800c382:	42af      	cmp	r7, r5
 800c384:	9002      	str	r0, [sp, #8]
 800c386:	f04f 0300 	mov.w	r3, #0
 800c38a:	f04f 020a 	mov.w	r2, #10
 800c38e:	4639      	mov	r1, r7
 800c390:	4648      	mov	r0, r9
 800c392:	d107      	bne.n	800c3a4 <_dtoa_r+0xadc>
 800c394:	f000 f9ca 	bl	800c72c <__multadd>
 800c398:	4607      	mov	r7, r0
 800c39a:	4605      	mov	r5, r0
 800c39c:	9b00      	ldr	r3, [sp, #0]
 800c39e:	3301      	adds	r3, #1
 800c3a0:	9300      	str	r3, [sp, #0]
 800c3a2:	e777      	b.n	800c294 <_dtoa_r+0x9cc>
 800c3a4:	f000 f9c2 	bl	800c72c <__multadd>
 800c3a8:	4629      	mov	r1, r5
 800c3aa:	4607      	mov	r7, r0
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	220a      	movs	r2, #10
 800c3b0:	4648      	mov	r0, r9
 800c3b2:	f000 f9bb 	bl	800c72c <__multadd>
 800c3b6:	4605      	mov	r5, r0
 800c3b8:	e7f0      	b.n	800c39c <_dtoa_r+0xad4>
 800c3ba:	f1bb 0f00 	cmp.w	fp, #0
 800c3be:	bfcc      	ite	gt
 800c3c0:	465e      	movgt	r6, fp
 800c3c2:	2601      	movle	r6, #1
 800c3c4:	4456      	add	r6, sl
 800c3c6:	2700      	movs	r7, #0
 800c3c8:	9902      	ldr	r1, [sp, #8]
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	4648      	mov	r0, r9
 800c3d0:	f000 fb50 	bl	800ca74 <__lshift>
 800c3d4:	4621      	mov	r1, r4
 800c3d6:	9002      	str	r0, [sp, #8]
 800c3d8:	f000 fbb8 	bl	800cb4c <__mcmp>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	dcb4      	bgt.n	800c34a <_dtoa_r+0xa82>
 800c3e0:	d102      	bne.n	800c3e8 <_dtoa_r+0xb20>
 800c3e2:	9b00      	ldr	r3, [sp, #0]
 800c3e4:	07db      	lsls	r3, r3, #31
 800c3e6:	d4b0      	bmi.n	800c34a <_dtoa_r+0xa82>
 800c3e8:	4633      	mov	r3, r6
 800c3ea:	461e      	mov	r6, r3
 800c3ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3f0:	2a30      	cmp	r2, #48	@ 0x30
 800c3f2:	d0fa      	beq.n	800c3ea <_dtoa_r+0xb22>
 800c3f4:	e4b5      	b.n	800bd62 <_dtoa_r+0x49a>
 800c3f6:	459a      	cmp	sl, r3
 800c3f8:	d1a8      	bne.n	800c34c <_dtoa_r+0xa84>
 800c3fa:	2331      	movs	r3, #49	@ 0x31
 800c3fc:	f108 0801 	add.w	r8, r8, #1
 800c400:	f88a 3000 	strb.w	r3, [sl]
 800c404:	e4ad      	b.n	800bd62 <_dtoa_r+0x49a>
 800c406:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c408:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c464 <_dtoa_r+0xb9c>
 800c40c:	b11b      	cbz	r3, 800c416 <_dtoa_r+0xb4e>
 800c40e:	f10a 0308 	add.w	r3, sl, #8
 800c412:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c414:	6013      	str	r3, [r2, #0]
 800c416:	4650      	mov	r0, sl
 800c418:	b017      	add	sp, #92	@ 0x5c
 800c41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c41e:	9b07      	ldr	r3, [sp, #28]
 800c420:	2b01      	cmp	r3, #1
 800c422:	f77f ae2e 	ble.w	800c082 <_dtoa_r+0x7ba>
 800c426:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c428:	9308      	str	r3, [sp, #32]
 800c42a:	2001      	movs	r0, #1
 800c42c:	e64d      	b.n	800c0ca <_dtoa_r+0x802>
 800c42e:	f1bb 0f00 	cmp.w	fp, #0
 800c432:	f77f aed9 	ble.w	800c1e8 <_dtoa_r+0x920>
 800c436:	4656      	mov	r6, sl
 800c438:	9802      	ldr	r0, [sp, #8]
 800c43a:	4621      	mov	r1, r4
 800c43c:	f7ff f9b9 	bl	800b7b2 <quorem>
 800c440:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c444:	f806 3b01 	strb.w	r3, [r6], #1
 800c448:	eba6 020a 	sub.w	r2, r6, sl
 800c44c:	4593      	cmp	fp, r2
 800c44e:	ddb4      	ble.n	800c3ba <_dtoa_r+0xaf2>
 800c450:	9902      	ldr	r1, [sp, #8]
 800c452:	2300      	movs	r3, #0
 800c454:	220a      	movs	r2, #10
 800c456:	4648      	mov	r0, r9
 800c458:	f000 f968 	bl	800c72c <__multadd>
 800c45c:	9002      	str	r0, [sp, #8]
 800c45e:	e7eb      	b.n	800c438 <_dtoa_r+0xb70>
 800c460:	0800da0c 	.word	0x0800da0c
 800c464:	0800d990 	.word	0x0800d990

0800c468 <_free_r>:
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	4605      	mov	r5, r0
 800c46c:	2900      	cmp	r1, #0
 800c46e:	d041      	beq.n	800c4f4 <_free_r+0x8c>
 800c470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c474:	1f0c      	subs	r4, r1, #4
 800c476:	2b00      	cmp	r3, #0
 800c478:	bfb8      	it	lt
 800c47a:	18e4      	addlt	r4, r4, r3
 800c47c:	f000 f8e8 	bl	800c650 <__malloc_lock>
 800c480:	4a1d      	ldr	r2, [pc, #116]	@ (800c4f8 <_free_r+0x90>)
 800c482:	6813      	ldr	r3, [r2, #0]
 800c484:	b933      	cbnz	r3, 800c494 <_free_r+0x2c>
 800c486:	6063      	str	r3, [r4, #4]
 800c488:	6014      	str	r4, [r2, #0]
 800c48a:	4628      	mov	r0, r5
 800c48c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c490:	f000 b8e4 	b.w	800c65c <__malloc_unlock>
 800c494:	42a3      	cmp	r3, r4
 800c496:	d908      	bls.n	800c4aa <_free_r+0x42>
 800c498:	6820      	ldr	r0, [r4, #0]
 800c49a:	1821      	adds	r1, r4, r0
 800c49c:	428b      	cmp	r3, r1
 800c49e:	bf01      	itttt	eq
 800c4a0:	6819      	ldreq	r1, [r3, #0]
 800c4a2:	685b      	ldreq	r3, [r3, #4]
 800c4a4:	1809      	addeq	r1, r1, r0
 800c4a6:	6021      	streq	r1, [r4, #0]
 800c4a8:	e7ed      	b.n	800c486 <_free_r+0x1e>
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	b10b      	cbz	r3, 800c4b4 <_free_r+0x4c>
 800c4b0:	42a3      	cmp	r3, r4
 800c4b2:	d9fa      	bls.n	800c4aa <_free_r+0x42>
 800c4b4:	6811      	ldr	r1, [r2, #0]
 800c4b6:	1850      	adds	r0, r2, r1
 800c4b8:	42a0      	cmp	r0, r4
 800c4ba:	d10b      	bne.n	800c4d4 <_free_r+0x6c>
 800c4bc:	6820      	ldr	r0, [r4, #0]
 800c4be:	4401      	add	r1, r0
 800c4c0:	1850      	adds	r0, r2, r1
 800c4c2:	4283      	cmp	r3, r0
 800c4c4:	6011      	str	r1, [r2, #0]
 800c4c6:	d1e0      	bne.n	800c48a <_free_r+0x22>
 800c4c8:	6818      	ldr	r0, [r3, #0]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	6053      	str	r3, [r2, #4]
 800c4ce:	4408      	add	r0, r1
 800c4d0:	6010      	str	r0, [r2, #0]
 800c4d2:	e7da      	b.n	800c48a <_free_r+0x22>
 800c4d4:	d902      	bls.n	800c4dc <_free_r+0x74>
 800c4d6:	230c      	movs	r3, #12
 800c4d8:	602b      	str	r3, [r5, #0]
 800c4da:	e7d6      	b.n	800c48a <_free_r+0x22>
 800c4dc:	6820      	ldr	r0, [r4, #0]
 800c4de:	1821      	adds	r1, r4, r0
 800c4e0:	428b      	cmp	r3, r1
 800c4e2:	bf04      	itt	eq
 800c4e4:	6819      	ldreq	r1, [r3, #0]
 800c4e6:	685b      	ldreq	r3, [r3, #4]
 800c4e8:	6063      	str	r3, [r4, #4]
 800c4ea:	bf04      	itt	eq
 800c4ec:	1809      	addeq	r1, r1, r0
 800c4ee:	6021      	streq	r1, [r4, #0]
 800c4f0:	6054      	str	r4, [r2, #4]
 800c4f2:	e7ca      	b.n	800c48a <_free_r+0x22>
 800c4f4:	bd38      	pop	{r3, r4, r5, pc}
 800c4f6:	bf00      	nop
 800c4f8:	200021e8 	.word	0x200021e8

0800c4fc <malloc>:
 800c4fc:	4b02      	ldr	r3, [pc, #8]	@ (800c508 <malloc+0xc>)
 800c4fe:	4601      	mov	r1, r0
 800c500:	6818      	ldr	r0, [r3, #0]
 800c502:	f000 b825 	b.w	800c550 <_malloc_r>
 800c506:	bf00      	nop
 800c508:	20000110 	.word	0x20000110

0800c50c <sbrk_aligned>:
 800c50c:	b570      	push	{r4, r5, r6, lr}
 800c50e:	4e0f      	ldr	r6, [pc, #60]	@ (800c54c <sbrk_aligned+0x40>)
 800c510:	460c      	mov	r4, r1
 800c512:	6831      	ldr	r1, [r6, #0]
 800c514:	4605      	mov	r5, r0
 800c516:	b911      	cbnz	r1, 800c51e <sbrk_aligned+0x12>
 800c518:	f000 fe3e 	bl	800d198 <_sbrk_r>
 800c51c:	6030      	str	r0, [r6, #0]
 800c51e:	4621      	mov	r1, r4
 800c520:	4628      	mov	r0, r5
 800c522:	f000 fe39 	bl	800d198 <_sbrk_r>
 800c526:	1c43      	adds	r3, r0, #1
 800c528:	d103      	bne.n	800c532 <sbrk_aligned+0x26>
 800c52a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c52e:	4620      	mov	r0, r4
 800c530:	bd70      	pop	{r4, r5, r6, pc}
 800c532:	1cc4      	adds	r4, r0, #3
 800c534:	f024 0403 	bic.w	r4, r4, #3
 800c538:	42a0      	cmp	r0, r4
 800c53a:	d0f8      	beq.n	800c52e <sbrk_aligned+0x22>
 800c53c:	1a21      	subs	r1, r4, r0
 800c53e:	4628      	mov	r0, r5
 800c540:	f000 fe2a 	bl	800d198 <_sbrk_r>
 800c544:	3001      	adds	r0, #1
 800c546:	d1f2      	bne.n	800c52e <sbrk_aligned+0x22>
 800c548:	e7ef      	b.n	800c52a <sbrk_aligned+0x1e>
 800c54a:	bf00      	nop
 800c54c:	200021e4 	.word	0x200021e4

0800c550 <_malloc_r>:
 800c550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c554:	1ccd      	adds	r5, r1, #3
 800c556:	f025 0503 	bic.w	r5, r5, #3
 800c55a:	3508      	adds	r5, #8
 800c55c:	2d0c      	cmp	r5, #12
 800c55e:	bf38      	it	cc
 800c560:	250c      	movcc	r5, #12
 800c562:	2d00      	cmp	r5, #0
 800c564:	4606      	mov	r6, r0
 800c566:	db01      	blt.n	800c56c <_malloc_r+0x1c>
 800c568:	42a9      	cmp	r1, r5
 800c56a:	d904      	bls.n	800c576 <_malloc_r+0x26>
 800c56c:	230c      	movs	r3, #12
 800c56e:	6033      	str	r3, [r6, #0]
 800c570:	2000      	movs	r0, #0
 800c572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c64c <_malloc_r+0xfc>
 800c57a:	f000 f869 	bl	800c650 <__malloc_lock>
 800c57e:	f8d8 3000 	ldr.w	r3, [r8]
 800c582:	461c      	mov	r4, r3
 800c584:	bb44      	cbnz	r4, 800c5d8 <_malloc_r+0x88>
 800c586:	4629      	mov	r1, r5
 800c588:	4630      	mov	r0, r6
 800c58a:	f7ff ffbf 	bl	800c50c <sbrk_aligned>
 800c58e:	1c43      	adds	r3, r0, #1
 800c590:	4604      	mov	r4, r0
 800c592:	d158      	bne.n	800c646 <_malloc_r+0xf6>
 800c594:	f8d8 4000 	ldr.w	r4, [r8]
 800c598:	4627      	mov	r7, r4
 800c59a:	2f00      	cmp	r7, #0
 800c59c:	d143      	bne.n	800c626 <_malloc_r+0xd6>
 800c59e:	2c00      	cmp	r4, #0
 800c5a0:	d04b      	beq.n	800c63a <_malloc_r+0xea>
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	4639      	mov	r1, r7
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	eb04 0903 	add.w	r9, r4, r3
 800c5ac:	f000 fdf4 	bl	800d198 <_sbrk_r>
 800c5b0:	4581      	cmp	r9, r0
 800c5b2:	d142      	bne.n	800c63a <_malloc_r+0xea>
 800c5b4:	6821      	ldr	r1, [r4, #0]
 800c5b6:	1a6d      	subs	r5, r5, r1
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	f7ff ffa6 	bl	800c50c <sbrk_aligned>
 800c5c0:	3001      	adds	r0, #1
 800c5c2:	d03a      	beq.n	800c63a <_malloc_r+0xea>
 800c5c4:	6823      	ldr	r3, [r4, #0]
 800c5c6:	442b      	add	r3, r5
 800c5c8:	6023      	str	r3, [r4, #0]
 800c5ca:	f8d8 3000 	ldr.w	r3, [r8]
 800c5ce:	685a      	ldr	r2, [r3, #4]
 800c5d0:	bb62      	cbnz	r2, 800c62c <_malloc_r+0xdc>
 800c5d2:	f8c8 7000 	str.w	r7, [r8]
 800c5d6:	e00f      	b.n	800c5f8 <_malloc_r+0xa8>
 800c5d8:	6822      	ldr	r2, [r4, #0]
 800c5da:	1b52      	subs	r2, r2, r5
 800c5dc:	d420      	bmi.n	800c620 <_malloc_r+0xd0>
 800c5de:	2a0b      	cmp	r2, #11
 800c5e0:	d917      	bls.n	800c612 <_malloc_r+0xc2>
 800c5e2:	1961      	adds	r1, r4, r5
 800c5e4:	42a3      	cmp	r3, r4
 800c5e6:	6025      	str	r5, [r4, #0]
 800c5e8:	bf18      	it	ne
 800c5ea:	6059      	strne	r1, [r3, #4]
 800c5ec:	6863      	ldr	r3, [r4, #4]
 800c5ee:	bf08      	it	eq
 800c5f0:	f8c8 1000 	streq.w	r1, [r8]
 800c5f4:	5162      	str	r2, [r4, r5]
 800c5f6:	604b      	str	r3, [r1, #4]
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	f000 f82f 	bl	800c65c <__malloc_unlock>
 800c5fe:	f104 000b 	add.w	r0, r4, #11
 800c602:	1d23      	adds	r3, r4, #4
 800c604:	f020 0007 	bic.w	r0, r0, #7
 800c608:	1ac2      	subs	r2, r0, r3
 800c60a:	bf1c      	itt	ne
 800c60c:	1a1b      	subne	r3, r3, r0
 800c60e:	50a3      	strne	r3, [r4, r2]
 800c610:	e7af      	b.n	800c572 <_malloc_r+0x22>
 800c612:	6862      	ldr	r2, [r4, #4]
 800c614:	42a3      	cmp	r3, r4
 800c616:	bf0c      	ite	eq
 800c618:	f8c8 2000 	streq.w	r2, [r8]
 800c61c:	605a      	strne	r2, [r3, #4]
 800c61e:	e7eb      	b.n	800c5f8 <_malloc_r+0xa8>
 800c620:	4623      	mov	r3, r4
 800c622:	6864      	ldr	r4, [r4, #4]
 800c624:	e7ae      	b.n	800c584 <_malloc_r+0x34>
 800c626:	463c      	mov	r4, r7
 800c628:	687f      	ldr	r7, [r7, #4]
 800c62a:	e7b6      	b.n	800c59a <_malloc_r+0x4a>
 800c62c:	461a      	mov	r2, r3
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	42a3      	cmp	r3, r4
 800c632:	d1fb      	bne.n	800c62c <_malloc_r+0xdc>
 800c634:	2300      	movs	r3, #0
 800c636:	6053      	str	r3, [r2, #4]
 800c638:	e7de      	b.n	800c5f8 <_malloc_r+0xa8>
 800c63a:	230c      	movs	r3, #12
 800c63c:	6033      	str	r3, [r6, #0]
 800c63e:	4630      	mov	r0, r6
 800c640:	f000 f80c 	bl	800c65c <__malloc_unlock>
 800c644:	e794      	b.n	800c570 <_malloc_r+0x20>
 800c646:	6005      	str	r5, [r0, #0]
 800c648:	e7d6      	b.n	800c5f8 <_malloc_r+0xa8>
 800c64a:	bf00      	nop
 800c64c:	200021e8 	.word	0x200021e8

0800c650 <__malloc_lock>:
 800c650:	4801      	ldr	r0, [pc, #4]	@ (800c658 <__malloc_lock+0x8>)
 800c652:	f7ff b8ac 	b.w	800b7ae <__retarget_lock_acquire_recursive>
 800c656:	bf00      	nop
 800c658:	200021e0 	.word	0x200021e0

0800c65c <__malloc_unlock>:
 800c65c:	4801      	ldr	r0, [pc, #4]	@ (800c664 <__malloc_unlock+0x8>)
 800c65e:	f7ff b8a7 	b.w	800b7b0 <__retarget_lock_release_recursive>
 800c662:	bf00      	nop
 800c664:	200021e0 	.word	0x200021e0

0800c668 <_Balloc>:
 800c668:	b570      	push	{r4, r5, r6, lr}
 800c66a:	69c6      	ldr	r6, [r0, #28]
 800c66c:	4604      	mov	r4, r0
 800c66e:	460d      	mov	r5, r1
 800c670:	b976      	cbnz	r6, 800c690 <_Balloc+0x28>
 800c672:	2010      	movs	r0, #16
 800c674:	f7ff ff42 	bl	800c4fc <malloc>
 800c678:	4602      	mov	r2, r0
 800c67a:	61e0      	str	r0, [r4, #28]
 800c67c:	b920      	cbnz	r0, 800c688 <_Balloc+0x20>
 800c67e:	4b18      	ldr	r3, [pc, #96]	@ (800c6e0 <_Balloc+0x78>)
 800c680:	4818      	ldr	r0, [pc, #96]	@ (800c6e4 <_Balloc+0x7c>)
 800c682:	216b      	movs	r1, #107	@ 0x6b
 800c684:	f000 fda6 	bl	800d1d4 <__assert_func>
 800c688:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c68c:	6006      	str	r6, [r0, #0]
 800c68e:	60c6      	str	r6, [r0, #12]
 800c690:	69e6      	ldr	r6, [r4, #28]
 800c692:	68f3      	ldr	r3, [r6, #12]
 800c694:	b183      	cbz	r3, 800c6b8 <_Balloc+0x50>
 800c696:	69e3      	ldr	r3, [r4, #28]
 800c698:	68db      	ldr	r3, [r3, #12]
 800c69a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c69e:	b9b8      	cbnz	r0, 800c6d0 <_Balloc+0x68>
 800c6a0:	2101      	movs	r1, #1
 800c6a2:	fa01 f605 	lsl.w	r6, r1, r5
 800c6a6:	1d72      	adds	r2, r6, #5
 800c6a8:	0092      	lsls	r2, r2, #2
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	f000 fdb0 	bl	800d210 <_calloc_r>
 800c6b0:	b160      	cbz	r0, 800c6cc <_Balloc+0x64>
 800c6b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c6b6:	e00e      	b.n	800c6d6 <_Balloc+0x6e>
 800c6b8:	2221      	movs	r2, #33	@ 0x21
 800c6ba:	2104      	movs	r1, #4
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f000 fda7 	bl	800d210 <_calloc_r>
 800c6c2:	69e3      	ldr	r3, [r4, #28]
 800c6c4:	60f0      	str	r0, [r6, #12]
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1e4      	bne.n	800c696 <_Balloc+0x2e>
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	bd70      	pop	{r4, r5, r6, pc}
 800c6d0:	6802      	ldr	r2, [r0, #0]
 800c6d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6dc:	e7f7      	b.n	800c6ce <_Balloc+0x66>
 800c6de:	bf00      	nop
 800c6e0:	0800d99d 	.word	0x0800d99d
 800c6e4:	0800da1d 	.word	0x0800da1d

0800c6e8 <_Bfree>:
 800c6e8:	b570      	push	{r4, r5, r6, lr}
 800c6ea:	69c6      	ldr	r6, [r0, #28]
 800c6ec:	4605      	mov	r5, r0
 800c6ee:	460c      	mov	r4, r1
 800c6f0:	b976      	cbnz	r6, 800c710 <_Bfree+0x28>
 800c6f2:	2010      	movs	r0, #16
 800c6f4:	f7ff ff02 	bl	800c4fc <malloc>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	61e8      	str	r0, [r5, #28]
 800c6fc:	b920      	cbnz	r0, 800c708 <_Bfree+0x20>
 800c6fe:	4b09      	ldr	r3, [pc, #36]	@ (800c724 <_Bfree+0x3c>)
 800c700:	4809      	ldr	r0, [pc, #36]	@ (800c728 <_Bfree+0x40>)
 800c702:	218f      	movs	r1, #143	@ 0x8f
 800c704:	f000 fd66 	bl	800d1d4 <__assert_func>
 800c708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c70c:	6006      	str	r6, [r0, #0]
 800c70e:	60c6      	str	r6, [r0, #12]
 800c710:	b13c      	cbz	r4, 800c722 <_Bfree+0x3a>
 800c712:	69eb      	ldr	r3, [r5, #28]
 800c714:	6862      	ldr	r2, [r4, #4]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c71c:	6021      	str	r1, [r4, #0]
 800c71e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c722:	bd70      	pop	{r4, r5, r6, pc}
 800c724:	0800d99d 	.word	0x0800d99d
 800c728:	0800da1d 	.word	0x0800da1d

0800c72c <__multadd>:
 800c72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c730:	690d      	ldr	r5, [r1, #16]
 800c732:	4607      	mov	r7, r0
 800c734:	460c      	mov	r4, r1
 800c736:	461e      	mov	r6, r3
 800c738:	f101 0c14 	add.w	ip, r1, #20
 800c73c:	2000      	movs	r0, #0
 800c73e:	f8dc 3000 	ldr.w	r3, [ip]
 800c742:	b299      	uxth	r1, r3
 800c744:	fb02 6101 	mla	r1, r2, r1, r6
 800c748:	0c1e      	lsrs	r6, r3, #16
 800c74a:	0c0b      	lsrs	r3, r1, #16
 800c74c:	fb02 3306 	mla	r3, r2, r6, r3
 800c750:	b289      	uxth	r1, r1
 800c752:	3001      	adds	r0, #1
 800c754:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c758:	4285      	cmp	r5, r0
 800c75a:	f84c 1b04 	str.w	r1, [ip], #4
 800c75e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c762:	dcec      	bgt.n	800c73e <__multadd+0x12>
 800c764:	b30e      	cbz	r6, 800c7aa <__multadd+0x7e>
 800c766:	68a3      	ldr	r3, [r4, #8]
 800c768:	42ab      	cmp	r3, r5
 800c76a:	dc19      	bgt.n	800c7a0 <__multadd+0x74>
 800c76c:	6861      	ldr	r1, [r4, #4]
 800c76e:	4638      	mov	r0, r7
 800c770:	3101      	adds	r1, #1
 800c772:	f7ff ff79 	bl	800c668 <_Balloc>
 800c776:	4680      	mov	r8, r0
 800c778:	b928      	cbnz	r0, 800c786 <__multadd+0x5a>
 800c77a:	4602      	mov	r2, r0
 800c77c:	4b0c      	ldr	r3, [pc, #48]	@ (800c7b0 <__multadd+0x84>)
 800c77e:	480d      	ldr	r0, [pc, #52]	@ (800c7b4 <__multadd+0x88>)
 800c780:	21ba      	movs	r1, #186	@ 0xba
 800c782:	f000 fd27 	bl	800d1d4 <__assert_func>
 800c786:	6922      	ldr	r2, [r4, #16]
 800c788:	3202      	adds	r2, #2
 800c78a:	f104 010c 	add.w	r1, r4, #12
 800c78e:	0092      	lsls	r2, r2, #2
 800c790:	300c      	adds	r0, #12
 800c792:	f000 fd11 	bl	800d1b8 <memcpy>
 800c796:	4621      	mov	r1, r4
 800c798:	4638      	mov	r0, r7
 800c79a:	f7ff ffa5 	bl	800c6e8 <_Bfree>
 800c79e:	4644      	mov	r4, r8
 800c7a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c7a4:	3501      	adds	r5, #1
 800c7a6:	615e      	str	r6, [r3, #20]
 800c7a8:	6125      	str	r5, [r4, #16]
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b0:	0800da0c 	.word	0x0800da0c
 800c7b4:	0800da1d 	.word	0x0800da1d

0800c7b8 <__hi0bits>:
 800c7b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c7bc:	4603      	mov	r3, r0
 800c7be:	bf36      	itet	cc
 800c7c0:	0403      	lslcc	r3, r0, #16
 800c7c2:	2000      	movcs	r0, #0
 800c7c4:	2010      	movcc	r0, #16
 800c7c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c7ca:	bf3c      	itt	cc
 800c7cc:	021b      	lslcc	r3, r3, #8
 800c7ce:	3008      	addcc	r0, #8
 800c7d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7d4:	bf3c      	itt	cc
 800c7d6:	011b      	lslcc	r3, r3, #4
 800c7d8:	3004      	addcc	r0, #4
 800c7da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7de:	bf3c      	itt	cc
 800c7e0:	009b      	lslcc	r3, r3, #2
 800c7e2:	3002      	addcc	r0, #2
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	db05      	blt.n	800c7f4 <__hi0bits+0x3c>
 800c7e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c7ec:	f100 0001 	add.w	r0, r0, #1
 800c7f0:	bf08      	it	eq
 800c7f2:	2020      	moveq	r0, #32
 800c7f4:	4770      	bx	lr

0800c7f6 <__lo0bits>:
 800c7f6:	6803      	ldr	r3, [r0, #0]
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	f013 0007 	ands.w	r0, r3, #7
 800c7fe:	d00b      	beq.n	800c818 <__lo0bits+0x22>
 800c800:	07d9      	lsls	r1, r3, #31
 800c802:	d421      	bmi.n	800c848 <__lo0bits+0x52>
 800c804:	0798      	lsls	r0, r3, #30
 800c806:	bf49      	itett	mi
 800c808:	085b      	lsrmi	r3, r3, #1
 800c80a:	089b      	lsrpl	r3, r3, #2
 800c80c:	2001      	movmi	r0, #1
 800c80e:	6013      	strmi	r3, [r2, #0]
 800c810:	bf5c      	itt	pl
 800c812:	6013      	strpl	r3, [r2, #0]
 800c814:	2002      	movpl	r0, #2
 800c816:	4770      	bx	lr
 800c818:	b299      	uxth	r1, r3
 800c81a:	b909      	cbnz	r1, 800c820 <__lo0bits+0x2a>
 800c81c:	0c1b      	lsrs	r3, r3, #16
 800c81e:	2010      	movs	r0, #16
 800c820:	b2d9      	uxtb	r1, r3
 800c822:	b909      	cbnz	r1, 800c828 <__lo0bits+0x32>
 800c824:	3008      	adds	r0, #8
 800c826:	0a1b      	lsrs	r3, r3, #8
 800c828:	0719      	lsls	r1, r3, #28
 800c82a:	bf04      	itt	eq
 800c82c:	091b      	lsreq	r3, r3, #4
 800c82e:	3004      	addeq	r0, #4
 800c830:	0799      	lsls	r1, r3, #30
 800c832:	bf04      	itt	eq
 800c834:	089b      	lsreq	r3, r3, #2
 800c836:	3002      	addeq	r0, #2
 800c838:	07d9      	lsls	r1, r3, #31
 800c83a:	d403      	bmi.n	800c844 <__lo0bits+0x4e>
 800c83c:	085b      	lsrs	r3, r3, #1
 800c83e:	f100 0001 	add.w	r0, r0, #1
 800c842:	d003      	beq.n	800c84c <__lo0bits+0x56>
 800c844:	6013      	str	r3, [r2, #0]
 800c846:	4770      	bx	lr
 800c848:	2000      	movs	r0, #0
 800c84a:	4770      	bx	lr
 800c84c:	2020      	movs	r0, #32
 800c84e:	4770      	bx	lr

0800c850 <__i2b>:
 800c850:	b510      	push	{r4, lr}
 800c852:	460c      	mov	r4, r1
 800c854:	2101      	movs	r1, #1
 800c856:	f7ff ff07 	bl	800c668 <_Balloc>
 800c85a:	4602      	mov	r2, r0
 800c85c:	b928      	cbnz	r0, 800c86a <__i2b+0x1a>
 800c85e:	4b05      	ldr	r3, [pc, #20]	@ (800c874 <__i2b+0x24>)
 800c860:	4805      	ldr	r0, [pc, #20]	@ (800c878 <__i2b+0x28>)
 800c862:	f240 1145 	movw	r1, #325	@ 0x145
 800c866:	f000 fcb5 	bl	800d1d4 <__assert_func>
 800c86a:	2301      	movs	r3, #1
 800c86c:	6144      	str	r4, [r0, #20]
 800c86e:	6103      	str	r3, [r0, #16]
 800c870:	bd10      	pop	{r4, pc}
 800c872:	bf00      	nop
 800c874:	0800da0c 	.word	0x0800da0c
 800c878:	0800da1d 	.word	0x0800da1d

0800c87c <__multiply>:
 800c87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c880:	4617      	mov	r7, r2
 800c882:	690a      	ldr	r2, [r1, #16]
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	429a      	cmp	r2, r3
 800c888:	bfa8      	it	ge
 800c88a:	463b      	movge	r3, r7
 800c88c:	4689      	mov	r9, r1
 800c88e:	bfa4      	itt	ge
 800c890:	460f      	movge	r7, r1
 800c892:	4699      	movge	r9, r3
 800c894:	693d      	ldr	r5, [r7, #16]
 800c896:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	6879      	ldr	r1, [r7, #4]
 800c89e:	eb05 060a 	add.w	r6, r5, sl
 800c8a2:	42b3      	cmp	r3, r6
 800c8a4:	b085      	sub	sp, #20
 800c8a6:	bfb8      	it	lt
 800c8a8:	3101      	addlt	r1, #1
 800c8aa:	f7ff fedd 	bl	800c668 <_Balloc>
 800c8ae:	b930      	cbnz	r0, 800c8be <__multiply+0x42>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	4b41      	ldr	r3, [pc, #260]	@ (800c9b8 <__multiply+0x13c>)
 800c8b4:	4841      	ldr	r0, [pc, #260]	@ (800c9bc <__multiply+0x140>)
 800c8b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c8ba:	f000 fc8b 	bl	800d1d4 <__assert_func>
 800c8be:	f100 0414 	add.w	r4, r0, #20
 800c8c2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c8c6:	4623      	mov	r3, r4
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	4573      	cmp	r3, lr
 800c8cc:	d320      	bcc.n	800c910 <__multiply+0x94>
 800c8ce:	f107 0814 	add.w	r8, r7, #20
 800c8d2:	f109 0114 	add.w	r1, r9, #20
 800c8d6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c8da:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c8de:	9302      	str	r3, [sp, #8]
 800c8e0:	1beb      	subs	r3, r5, r7
 800c8e2:	3b15      	subs	r3, #21
 800c8e4:	f023 0303 	bic.w	r3, r3, #3
 800c8e8:	3304      	adds	r3, #4
 800c8ea:	3715      	adds	r7, #21
 800c8ec:	42bd      	cmp	r5, r7
 800c8ee:	bf38      	it	cc
 800c8f0:	2304      	movcc	r3, #4
 800c8f2:	9301      	str	r3, [sp, #4]
 800c8f4:	9b02      	ldr	r3, [sp, #8]
 800c8f6:	9103      	str	r1, [sp, #12]
 800c8f8:	428b      	cmp	r3, r1
 800c8fa:	d80c      	bhi.n	800c916 <__multiply+0x9a>
 800c8fc:	2e00      	cmp	r6, #0
 800c8fe:	dd03      	ble.n	800c908 <__multiply+0x8c>
 800c900:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c904:	2b00      	cmp	r3, #0
 800c906:	d055      	beq.n	800c9b4 <__multiply+0x138>
 800c908:	6106      	str	r6, [r0, #16]
 800c90a:	b005      	add	sp, #20
 800c90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c910:	f843 2b04 	str.w	r2, [r3], #4
 800c914:	e7d9      	b.n	800c8ca <__multiply+0x4e>
 800c916:	f8b1 a000 	ldrh.w	sl, [r1]
 800c91a:	f1ba 0f00 	cmp.w	sl, #0
 800c91e:	d01f      	beq.n	800c960 <__multiply+0xe4>
 800c920:	46c4      	mov	ip, r8
 800c922:	46a1      	mov	r9, r4
 800c924:	2700      	movs	r7, #0
 800c926:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c92a:	f8d9 3000 	ldr.w	r3, [r9]
 800c92e:	fa1f fb82 	uxth.w	fp, r2
 800c932:	b29b      	uxth	r3, r3
 800c934:	fb0a 330b 	mla	r3, sl, fp, r3
 800c938:	443b      	add	r3, r7
 800c93a:	f8d9 7000 	ldr.w	r7, [r9]
 800c93e:	0c12      	lsrs	r2, r2, #16
 800c940:	0c3f      	lsrs	r7, r7, #16
 800c942:	fb0a 7202 	mla	r2, sl, r2, r7
 800c946:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c950:	4565      	cmp	r5, ip
 800c952:	f849 3b04 	str.w	r3, [r9], #4
 800c956:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c95a:	d8e4      	bhi.n	800c926 <__multiply+0xaa>
 800c95c:	9b01      	ldr	r3, [sp, #4]
 800c95e:	50e7      	str	r7, [r4, r3]
 800c960:	9b03      	ldr	r3, [sp, #12]
 800c962:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c966:	3104      	adds	r1, #4
 800c968:	f1b9 0f00 	cmp.w	r9, #0
 800c96c:	d020      	beq.n	800c9b0 <__multiply+0x134>
 800c96e:	6823      	ldr	r3, [r4, #0]
 800c970:	4647      	mov	r7, r8
 800c972:	46a4      	mov	ip, r4
 800c974:	f04f 0a00 	mov.w	sl, #0
 800c978:	f8b7 b000 	ldrh.w	fp, [r7]
 800c97c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c980:	fb09 220b 	mla	r2, r9, fp, r2
 800c984:	4452      	add	r2, sl
 800c986:	b29b      	uxth	r3, r3
 800c988:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c98c:	f84c 3b04 	str.w	r3, [ip], #4
 800c990:	f857 3b04 	ldr.w	r3, [r7], #4
 800c994:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c998:	f8bc 3000 	ldrh.w	r3, [ip]
 800c99c:	fb09 330a 	mla	r3, r9, sl, r3
 800c9a0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c9a4:	42bd      	cmp	r5, r7
 800c9a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9aa:	d8e5      	bhi.n	800c978 <__multiply+0xfc>
 800c9ac:	9a01      	ldr	r2, [sp, #4]
 800c9ae:	50a3      	str	r3, [r4, r2]
 800c9b0:	3404      	adds	r4, #4
 800c9b2:	e79f      	b.n	800c8f4 <__multiply+0x78>
 800c9b4:	3e01      	subs	r6, #1
 800c9b6:	e7a1      	b.n	800c8fc <__multiply+0x80>
 800c9b8:	0800da0c 	.word	0x0800da0c
 800c9bc:	0800da1d 	.word	0x0800da1d

0800c9c0 <__pow5mult>:
 800c9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9c4:	4615      	mov	r5, r2
 800c9c6:	f012 0203 	ands.w	r2, r2, #3
 800c9ca:	4607      	mov	r7, r0
 800c9cc:	460e      	mov	r6, r1
 800c9ce:	d007      	beq.n	800c9e0 <__pow5mult+0x20>
 800c9d0:	4c25      	ldr	r4, [pc, #148]	@ (800ca68 <__pow5mult+0xa8>)
 800c9d2:	3a01      	subs	r2, #1
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9da:	f7ff fea7 	bl	800c72c <__multadd>
 800c9de:	4606      	mov	r6, r0
 800c9e0:	10ad      	asrs	r5, r5, #2
 800c9e2:	d03d      	beq.n	800ca60 <__pow5mult+0xa0>
 800c9e4:	69fc      	ldr	r4, [r7, #28]
 800c9e6:	b97c      	cbnz	r4, 800ca08 <__pow5mult+0x48>
 800c9e8:	2010      	movs	r0, #16
 800c9ea:	f7ff fd87 	bl	800c4fc <malloc>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	61f8      	str	r0, [r7, #28]
 800c9f2:	b928      	cbnz	r0, 800ca00 <__pow5mult+0x40>
 800c9f4:	4b1d      	ldr	r3, [pc, #116]	@ (800ca6c <__pow5mult+0xac>)
 800c9f6:	481e      	ldr	r0, [pc, #120]	@ (800ca70 <__pow5mult+0xb0>)
 800c9f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c9fc:	f000 fbea 	bl	800d1d4 <__assert_func>
 800ca00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca04:	6004      	str	r4, [r0, #0]
 800ca06:	60c4      	str	r4, [r0, #12]
 800ca08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ca0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca10:	b94c      	cbnz	r4, 800ca26 <__pow5mult+0x66>
 800ca12:	f240 2171 	movw	r1, #625	@ 0x271
 800ca16:	4638      	mov	r0, r7
 800ca18:	f7ff ff1a 	bl	800c850 <__i2b>
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca22:	4604      	mov	r4, r0
 800ca24:	6003      	str	r3, [r0, #0]
 800ca26:	f04f 0900 	mov.w	r9, #0
 800ca2a:	07eb      	lsls	r3, r5, #31
 800ca2c:	d50a      	bpl.n	800ca44 <__pow5mult+0x84>
 800ca2e:	4631      	mov	r1, r6
 800ca30:	4622      	mov	r2, r4
 800ca32:	4638      	mov	r0, r7
 800ca34:	f7ff ff22 	bl	800c87c <__multiply>
 800ca38:	4631      	mov	r1, r6
 800ca3a:	4680      	mov	r8, r0
 800ca3c:	4638      	mov	r0, r7
 800ca3e:	f7ff fe53 	bl	800c6e8 <_Bfree>
 800ca42:	4646      	mov	r6, r8
 800ca44:	106d      	asrs	r5, r5, #1
 800ca46:	d00b      	beq.n	800ca60 <__pow5mult+0xa0>
 800ca48:	6820      	ldr	r0, [r4, #0]
 800ca4a:	b938      	cbnz	r0, 800ca5c <__pow5mult+0x9c>
 800ca4c:	4622      	mov	r2, r4
 800ca4e:	4621      	mov	r1, r4
 800ca50:	4638      	mov	r0, r7
 800ca52:	f7ff ff13 	bl	800c87c <__multiply>
 800ca56:	6020      	str	r0, [r4, #0]
 800ca58:	f8c0 9000 	str.w	r9, [r0]
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	e7e4      	b.n	800ca2a <__pow5mult+0x6a>
 800ca60:	4630      	mov	r0, r6
 800ca62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca66:	bf00      	nop
 800ca68:	0800dad0 	.word	0x0800dad0
 800ca6c:	0800d99d 	.word	0x0800d99d
 800ca70:	0800da1d 	.word	0x0800da1d

0800ca74 <__lshift>:
 800ca74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca78:	460c      	mov	r4, r1
 800ca7a:	6849      	ldr	r1, [r1, #4]
 800ca7c:	6923      	ldr	r3, [r4, #16]
 800ca7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca82:	68a3      	ldr	r3, [r4, #8]
 800ca84:	4607      	mov	r7, r0
 800ca86:	4691      	mov	r9, r2
 800ca88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca8c:	f108 0601 	add.w	r6, r8, #1
 800ca90:	42b3      	cmp	r3, r6
 800ca92:	db0b      	blt.n	800caac <__lshift+0x38>
 800ca94:	4638      	mov	r0, r7
 800ca96:	f7ff fde7 	bl	800c668 <_Balloc>
 800ca9a:	4605      	mov	r5, r0
 800ca9c:	b948      	cbnz	r0, 800cab2 <__lshift+0x3e>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	4b28      	ldr	r3, [pc, #160]	@ (800cb44 <__lshift+0xd0>)
 800caa2:	4829      	ldr	r0, [pc, #164]	@ (800cb48 <__lshift+0xd4>)
 800caa4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800caa8:	f000 fb94 	bl	800d1d4 <__assert_func>
 800caac:	3101      	adds	r1, #1
 800caae:	005b      	lsls	r3, r3, #1
 800cab0:	e7ee      	b.n	800ca90 <__lshift+0x1c>
 800cab2:	2300      	movs	r3, #0
 800cab4:	f100 0114 	add.w	r1, r0, #20
 800cab8:	f100 0210 	add.w	r2, r0, #16
 800cabc:	4618      	mov	r0, r3
 800cabe:	4553      	cmp	r3, sl
 800cac0:	db33      	blt.n	800cb2a <__lshift+0xb6>
 800cac2:	6920      	ldr	r0, [r4, #16]
 800cac4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cac8:	f104 0314 	add.w	r3, r4, #20
 800cacc:	f019 091f 	ands.w	r9, r9, #31
 800cad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cad4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cad8:	d02b      	beq.n	800cb32 <__lshift+0xbe>
 800cada:	f1c9 0e20 	rsb	lr, r9, #32
 800cade:	468a      	mov	sl, r1
 800cae0:	2200      	movs	r2, #0
 800cae2:	6818      	ldr	r0, [r3, #0]
 800cae4:	fa00 f009 	lsl.w	r0, r0, r9
 800cae8:	4310      	orrs	r0, r2
 800caea:	f84a 0b04 	str.w	r0, [sl], #4
 800caee:	f853 2b04 	ldr.w	r2, [r3], #4
 800caf2:	459c      	cmp	ip, r3
 800caf4:	fa22 f20e 	lsr.w	r2, r2, lr
 800caf8:	d8f3      	bhi.n	800cae2 <__lshift+0x6e>
 800cafa:	ebac 0304 	sub.w	r3, ip, r4
 800cafe:	3b15      	subs	r3, #21
 800cb00:	f023 0303 	bic.w	r3, r3, #3
 800cb04:	3304      	adds	r3, #4
 800cb06:	f104 0015 	add.w	r0, r4, #21
 800cb0a:	4560      	cmp	r0, ip
 800cb0c:	bf88      	it	hi
 800cb0e:	2304      	movhi	r3, #4
 800cb10:	50ca      	str	r2, [r1, r3]
 800cb12:	b10a      	cbz	r2, 800cb18 <__lshift+0xa4>
 800cb14:	f108 0602 	add.w	r6, r8, #2
 800cb18:	3e01      	subs	r6, #1
 800cb1a:	4638      	mov	r0, r7
 800cb1c:	612e      	str	r6, [r5, #16]
 800cb1e:	4621      	mov	r1, r4
 800cb20:	f7ff fde2 	bl	800c6e8 <_Bfree>
 800cb24:	4628      	mov	r0, r5
 800cb26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb2e:	3301      	adds	r3, #1
 800cb30:	e7c5      	b.n	800cabe <__lshift+0x4a>
 800cb32:	3904      	subs	r1, #4
 800cb34:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb38:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb3c:	459c      	cmp	ip, r3
 800cb3e:	d8f9      	bhi.n	800cb34 <__lshift+0xc0>
 800cb40:	e7ea      	b.n	800cb18 <__lshift+0xa4>
 800cb42:	bf00      	nop
 800cb44:	0800da0c 	.word	0x0800da0c
 800cb48:	0800da1d 	.word	0x0800da1d

0800cb4c <__mcmp>:
 800cb4c:	690a      	ldr	r2, [r1, #16]
 800cb4e:	4603      	mov	r3, r0
 800cb50:	6900      	ldr	r0, [r0, #16]
 800cb52:	1a80      	subs	r0, r0, r2
 800cb54:	b530      	push	{r4, r5, lr}
 800cb56:	d10e      	bne.n	800cb76 <__mcmp+0x2a>
 800cb58:	3314      	adds	r3, #20
 800cb5a:	3114      	adds	r1, #20
 800cb5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cb60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cb64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb6c:	4295      	cmp	r5, r2
 800cb6e:	d003      	beq.n	800cb78 <__mcmp+0x2c>
 800cb70:	d205      	bcs.n	800cb7e <__mcmp+0x32>
 800cb72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb76:	bd30      	pop	{r4, r5, pc}
 800cb78:	42a3      	cmp	r3, r4
 800cb7a:	d3f3      	bcc.n	800cb64 <__mcmp+0x18>
 800cb7c:	e7fb      	b.n	800cb76 <__mcmp+0x2a>
 800cb7e:	2001      	movs	r0, #1
 800cb80:	e7f9      	b.n	800cb76 <__mcmp+0x2a>
	...

0800cb84 <__mdiff>:
 800cb84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb88:	4689      	mov	r9, r1
 800cb8a:	4606      	mov	r6, r0
 800cb8c:	4611      	mov	r1, r2
 800cb8e:	4648      	mov	r0, r9
 800cb90:	4614      	mov	r4, r2
 800cb92:	f7ff ffdb 	bl	800cb4c <__mcmp>
 800cb96:	1e05      	subs	r5, r0, #0
 800cb98:	d112      	bne.n	800cbc0 <__mdiff+0x3c>
 800cb9a:	4629      	mov	r1, r5
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	f7ff fd63 	bl	800c668 <_Balloc>
 800cba2:	4602      	mov	r2, r0
 800cba4:	b928      	cbnz	r0, 800cbb2 <__mdiff+0x2e>
 800cba6:	4b3f      	ldr	r3, [pc, #252]	@ (800cca4 <__mdiff+0x120>)
 800cba8:	f240 2137 	movw	r1, #567	@ 0x237
 800cbac:	483e      	ldr	r0, [pc, #248]	@ (800cca8 <__mdiff+0x124>)
 800cbae:	f000 fb11 	bl	800d1d4 <__assert_func>
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cbb8:	4610      	mov	r0, r2
 800cbba:	b003      	add	sp, #12
 800cbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc0:	bfbc      	itt	lt
 800cbc2:	464b      	movlt	r3, r9
 800cbc4:	46a1      	movlt	r9, r4
 800cbc6:	4630      	mov	r0, r6
 800cbc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cbcc:	bfba      	itte	lt
 800cbce:	461c      	movlt	r4, r3
 800cbd0:	2501      	movlt	r5, #1
 800cbd2:	2500      	movge	r5, #0
 800cbd4:	f7ff fd48 	bl	800c668 <_Balloc>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	b918      	cbnz	r0, 800cbe4 <__mdiff+0x60>
 800cbdc:	4b31      	ldr	r3, [pc, #196]	@ (800cca4 <__mdiff+0x120>)
 800cbde:	f240 2145 	movw	r1, #581	@ 0x245
 800cbe2:	e7e3      	b.n	800cbac <__mdiff+0x28>
 800cbe4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cbe8:	6926      	ldr	r6, [r4, #16]
 800cbea:	60c5      	str	r5, [r0, #12]
 800cbec:	f109 0310 	add.w	r3, r9, #16
 800cbf0:	f109 0514 	add.w	r5, r9, #20
 800cbf4:	f104 0e14 	add.w	lr, r4, #20
 800cbf8:	f100 0b14 	add.w	fp, r0, #20
 800cbfc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cc00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cc04:	9301      	str	r3, [sp, #4]
 800cc06:	46d9      	mov	r9, fp
 800cc08:	f04f 0c00 	mov.w	ip, #0
 800cc0c:	9b01      	ldr	r3, [sp, #4]
 800cc0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cc12:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cc16:	9301      	str	r3, [sp, #4]
 800cc18:	fa1f f38a 	uxth.w	r3, sl
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	b283      	uxth	r3, r0
 800cc20:	1acb      	subs	r3, r1, r3
 800cc22:	0c00      	lsrs	r0, r0, #16
 800cc24:	4463      	add	r3, ip
 800cc26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cc2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cc34:	4576      	cmp	r6, lr
 800cc36:	f849 3b04 	str.w	r3, [r9], #4
 800cc3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc3e:	d8e5      	bhi.n	800cc0c <__mdiff+0x88>
 800cc40:	1b33      	subs	r3, r6, r4
 800cc42:	3b15      	subs	r3, #21
 800cc44:	f023 0303 	bic.w	r3, r3, #3
 800cc48:	3415      	adds	r4, #21
 800cc4a:	3304      	adds	r3, #4
 800cc4c:	42a6      	cmp	r6, r4
 800cc4e:	bf38      	it	cc
 800cc50:	2304      	movcc	r3, #4
 800cc52:	441d      	add	r5, r3
 800cc54:	445b      	add	r3, fp
 800cc56:	461e      	mov	r6, r3
 800cc58:	462c      	mov	r4, r5
 800cc5a:	4544      	cmp	r4, r8
 800cc5c:	d30e      	bcc.n	800cc7c <__mdiff+0xf8>
 800cc5e:	f108 0103 	add.w	r1, r8, #3
 800cc62:	1b49      	subs	r1, r1, r5
 800cc64:	f021 0103 	bic.w	r1, r1, #3
 800cc68:	3d03      	subs	r5, #3
 800cc6a:	45a8      	cmp	r8, r5
 800cc6c:	bf38      	it	cc
 800cc6e:	2100      	movcc	r1, #0
 800cc70:	440b      	add	r3, r1
 800cc72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc76:	b191      	cbz	r1, 800cc9e <__mdiff+0x11a>
 800cc78:	6117      	str	r7, [r2, #16]
 800cc7a:	e79d      	b.n	800cbb8 <__mdiff+0x34>
 800cc7c:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc80:	46e6      	mov	lr, ip
 800cc82:	0c08      	lsrs	r0, r1, #16
 800cc84:	fa1c fc81 	uxtah	ip, ip, r1
 800cc88:	4471      	add	r1, lr
 800cc8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cc8e:	b289      	uxth	r1, r1
 800cc90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cc94:	f846 1b04 	str.w	r1, [r6], #4
 800cc98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc9c:	e7dd      	b.n	800cc5a <__mdiff+0xd6>
 800cc9e:	3f01      	subs	r7, #1
 800cca0:	e7e7      	b.n	800cc72 <__mdiff+0xee>
 800cca2:	bf00      	nop
 800cca4:	0800da0c 	.word	0x0800da0c
 800cca8:	0800da1d 	.word	0x0800da1d

0800ccac <__d2b>:
 800ccac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ccb0:	460f      	mov	r7, r1
 800ccb2:	2101      	movs	r1, #1
 800ccb4:	ec59 8b10 	vmov	r8, r9, d0
 800ccb8:	4616      	mov	r6, r2
 800ccba:	f7ff fcd5 	bl	800c668 <_Balloc>
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	b930      	cbnz	r0, 800ccd0 <__d2b+0x24>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	4b23      	ldr	r3, [pc, #140]	@ (800cd54 <__d2b+0xa8>)
 800ccc6:	4824      	ldr	r0, [pc, #144]	@ (800cd58 <__d2b+0xac>)
 800ccc8:	f240 310f 	movw	r1, #783	@ 0x30f
 800cccc:	f000 fa82 	bl	800d1d4 <__assert_func>
 800ccd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ccd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ccd8:	b10d      	cbz	r5, 800ccde <__d2b+0x32>
 800ccda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ccde:	9301      	str	r3, [sp, #4]
 800cce0:	f1b8 0300 	subs.w	r3, r8, #0
 800cce4:	d023      	beq.n	800cd2e <__d2b+0x82>
 800cce6:	4668      	mov	r0, sp
 800cce8:	9300      	str	r3, [sp, #0]
 800ccea:	f7ff fd84 	bl	800c7f6 <__lo0bits>
 800ccee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ccf2:	b1d0      	cbz	r0, 800cd2a <__d2b+0x7e>
 800ccf4:	f1c0 0320 	rsb	r3, r0, #32
 800ccf8:	fa02 f303 	lsl.w	r3, r2, r3
 800ccfc:	430b      	orrs	r3, r1
 800ccfe:	40c2      	lsrs	r2, r0
 800cd00:	6163      	str	r3, [r4, #20]
 800cd02:	9201      	str	r2, [sp, #4]
 800cd04:	9b01      	ldr	r3, [sp, #4]
 800cd06:	61a3      	str	r3, [r4, #24]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	bf0c      	ite	eq
 800cd0c:	2201      	moveq	r2, #1
 800cd0e:	2202      	movne	r2, #2
 800cd10:	6122      	str	r2, [r4, #16]
 800cd12:	b1a5      	cbz	r5, 800cd3e <__d2b+0x92>
 800cd14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cd18:	4405      	add	r5, r0
 800cd1a:	603d      	str	r5, [r7, #0]
 800cd1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cd20:	6030      	str	r0, [r6, #0]
 800cd22:	4620      	mov	r0, r4
 800cd24:	b003      	add	sp, #12
 800cd26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd2a:	6161      	str	r1, [r4, #20]
 800cd2c:	e7ea      	b.n	800cd04 <__d2b+0x58>
 800cd2e:	a801      	add	r0, sp, #4
 800cd30:	f7ff fd61 	bl	800c7f6 <__lo0bits>
 800cd34:	9b01      	ldr	r3, [sp, #4]
 800cd36:	6163      	str	r3, [r4, #20]
 800cd38:	3020      	adds	r0, #32
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	e7e8      	b.n	800cd10 <__d2b+0x64>
 800cd3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cd46:	6038      	str	r0, [r7, #0]
 800cd48:	6918      	ldr	r0, [r3, #16]
 800cd4a:	f7ff fd35 	bl	800c7b8 <__hi0bits>
 800cd4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd52:	e7e5      	b.n	800cd20 <__d2b+0x74>
 800cd54:	0800da0c 	.word	0x0800da0c
 800cd58:	0800da1d 	.word	0x0800da1d

0800cd5c <__ssputs_r>:
 800cd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd60:	688e      	ldr	r6, [r1, #8]
 800cd62:	461f      	mov	r7, r3
 800cd64:	42be      	cmp	r6, r7
 800cd66:	680b      	ldr	r3, [r1, #0]
 800cd68:	4682      	mov	sl, r0
 800cd6a:	460c      	mov	r4, r1
 800cd6c:	4690      	mov	r8, r2
 800cd6e:	d82d      	bhi.n	800cdcc <__ssputs_r+0x70>
 800cd70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cd78:	d026      	beq.n	800cdc8 <__ssputs_r+0x6c>
 800cd7a:	6965      	ldr	r5, [r4, #20]
 800cd7c:	6909      	ldr	r1, [r1, #16]
 800cd7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd82:	eba3 0901 	sub.w	r9, r3, r1
 800cd86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd8a:	1c7b      	adds	r3, r7, #1
 800cd8c:	444b      	add	r3, r9
 800cd8e:	106d      	asrs	r5, r5, #1
 800cd90:	429d      	cmp	r5, r3
 800cd92:	bf38      	it	cc
 800cd94:	461d      	movcc	r5, r3
 800cd96:	0553      	lsls	r3, r2, #21
 800cd98:	d527      	bpl.n	800cdea <__ssputs_r+0x8e>
 800cd9a:	4629      	mov	r1, r5
 800cd9c:	f7ff fbd8 	bl	800c550 <_malloc_r>
 800cda0:	4606      	mov	r6, r0
 800cda2:	b360      	cbz	r0, 800cdfe <__ssputs_r+0xa2>
 800cda4:	6921      	ldr	r1, [r4, #16]
 800cda6:	464a      	mov	r2, r9
 800cda8:	f000 fa06 	bl	800d1b8 <memcpy>
 800cdac:	89a3      	ldrh	r3, [r4, #12]
 800cdae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cdb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdb6:	81a3      	strh	r3, [r4, #12]
 800cdb8:	6126      	str	r6, [r4, #16]
 800cdba:	6165      	str	r5, [r4, #20]
 800cdbc:	444e      	add	r6, r9
 800cdbe:	eba5 0509 	sub.w	r5, r5, r9
 800cdc2:	6026      	str	r6, [r4, #0]
 800cdc4:	60a5      	str	r5, [r4, #8]
 800cdc6:	463e      	mov	r6, r7
 800cdc8:	42be      	cmp	r6, r7
 800cdca:	d900      	bls.n	800cdce <__ssputs_r+0x72>
 800cdcc:	463e      	mov	r6, r7
 800cdce:	6820      	ldr	r0, [r4, #0]
 800cdd0:	4632      	mov	r2, r6
 800cdd2:	4641      	mov	r1, r8
 800cdd4:	f000 f9c6 	bl	800d164 <memmove>
 800cdd8:	68a3      	ldr	r3, [r4, #8]
 800cdda:	1b9b      	subs	r3, r3, r6
 800cddc:	60a3      	str	r3, [r4, #8]
 800cdde:	6823      	ldr	r3, [r4, #0]
 800cde0:	4433      	add	r3, r6
 800cde2:	6023      	str	r3, [r4, #0]
 800cde4:	2000      	movs	r0, #0
 800cde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdea:	462a      	mov	r2, r5
 800cdec:	f000 fa36 	bl	800d25c <_realloc_r>
 800cdf0:	4606      	mov	r6, r0
 800cdf2:	2800      	cmp	r0, #0
 800cdf4:	d1e0      	bne.n	800cdb8 <__ssputs_r+0x5c>
 800cdf6:	6921      	ldr	r1, [r4, #16]
 800cdf8:	4650      	mov	r0, sl
 800cdfa:	f7ff fb35 	bl	800c468 <_free_r>
 800cdfe:	230c      	movs	r3, #12
 800ce00:	f8ca 3000 	str.w	r3, [sl]
 800ce04:	89a3      	ldrh	r3, [r4, #12]
 800ce06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce0a:	81a3      	strh	r3, [r4, #12]
 800ce0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce10:	e7e9      	b.n	800cde6 <__ssputs_r+0x8a>
	...

0800ce14 <_svfiprintf_r>:
 800ce14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce18:	4698      	mov	r8, r3
 800ce1a:	898b      	ldrh	r3, [r1, #12]
 800ce1c:	061b      	lsls	r3, r3, #24
 800ce1e:	b09d      	sub	sp, #116	@ 0x74
 800ce20:	4607      	mov	r7, r0
 800ce22:	460d      	mov	r5, r1
 800ce24:	4614      	mov	r4, r2
 800ce26:	d510      	bpl.n	800ce4a <_svfiprintf_r+0x36>
 800ce28:	690b      	ldr	r3, [r1, #16]
 800ce2a:	b973      	cbnz	r3, 800ce4a <_svfiprintf_r+0x36>
 800ce2c:	2140      	movs	r1, #64	@ 0x40
 800ce2e:	f7ff fb8f 	bl	800c550 <_malloc_r>
 800ce32:	6028      	str	r0, [r5, #0]
 800ce34:	6128      	str	r0, [r5, #16]
 800ce36:	b930      	cbnz	r0, 800ce46 <_svfiprintf_r+0x32>
 800ce38:	230c      	movs	r3, #12
 800ce3a:	603b      	str	r3, [r7, #0]
 800ce3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce40:	b01d      	add	sp, #116	@ 0x74
 800ce42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce46:	2340      	movs	r3, #64	@ 0x40
 800ce48:	616b      	str	r3, [r5, #20]
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce4e:	2320      	movs	r3, #32
 800ce50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce54:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce58:	2330      	movs	r3, #48	@ 0x30
 800ce5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cff8 <_svfiprintf_r+0x1e4>
 800ce5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce62:	f04f 0901 	mov.w	r9, #1
 800ce66:	4623      	mov	r3, r4
 800ce68:	469a      	mov	sl, r3
 800ce6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce6e:	b10a      	cbz	r2, 800ce74 <_svfiprintf_r+0x60>
 800ce70:	2a25      	cmp	r2, #37	@ 0x25
 800ce72:	d1f9      	bne.n	800ce68 <_svfiprintf_r+0x54>
 800ce74:	ebba 0b04 	subs.w	fp, sl, r4
 800ce78:	d00b      	beq.n	800ce92 <_svfiprintf_r+0x7e>
 800ce7a:	465b      	mov	r3, fp
 800ce7c:	4622      	mov	r2, r4
 800ce7e:	4629      	mov	r1, r5
 800ce80:	4638      	mov	r0, r7
 800ce82:	f7ff ff6b 	bl	800cd5c <__ssputs_r>
 800ce86:	3001      	adds	r0, #1
 800ce88:	f000 80a7 	beq.w	800cfda <_svfiprintf_r+0x1c6>
 800ce8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce8e:	445a      	add	r2, fp
 800ce90:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce92:	f89a 3000 	ldrb.w	r3, [sl]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	f000 809f 	beq.w	800cfda <_svfiprintf_r+0x1c6>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cea6:	f10a 0a01 	add.w	sl, sl, #1
 800ceaa:	9304      	str	r3, [sp, #16]
 800ceac:	9307      	str	r3, [sp, #28]
 800ceae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ceb2:	931a      	str	r3, [sp, #104]	@ 0x68
 800ceb4:	4654      	mov	r4, sl
 800ceb6:	2205      	movs	r2, #5
 800ceb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cebc:	484e      	ldr	r0, [pc, #312]	@ (800cff8 <_svfiprintf_r+0x1e4>)
 800cebe:	f7f3 f98f 	bl	80001e0 <memchr>
 800cec2:	9a04      	ldr	r2, [sp, #16]
 800cec4:	b9d8      	cbnz	r0, 800cefe <_svfiprintf_r+0xea>
 800cec6:	06d0      	lsls	r0, r2, #27
 800cec8:	bf44      	itt	mi
 800ceca:	2320      	movmi	r3, #32
 800cecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ced0:	0711      	lsls	r1, r2, #28
 800ced2:	bf44      	itt	mi
 800ced4:	232b      	movmi	r3, #43	@ 0x2b
 800ced6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ceda:	f89a 3000 	ldrb.w	r3, [sl]
 800cede:	2b2a      	cmp	r3, #42	@ 0x2a
 800cee0:	d015      	beq.n	800cf0e <_svfiprintf_r+0xfa>
 800cee2:	9a07      	ldr	r2, [sp, #28]
 800cee4:	4654      	mov	r4, sl
 800cee6:	2000      	movs	r0, #0
 800cee8:	f04f 0c0a 	mov.w	ip, #10
 800ceec:	4621      	mov	r1, r4
 800ceee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cef2:	3b30      	subs	r3, #48	@ 0x30
 800cef4:	2b09      	cmp	r3, #9
 800cef6:	d94b      	bls.n	800cf90 <_svfiprintf_r+0x17c>
 800cef8:	b1b0      	cbz	r0, 800cf28 <_svfiprintf_r+0x114>
 800cefa:	9207      	str	r2, [sp, #28]
 800cefc:	e014      	b.n	800cf28 <_svfiprintf_r+0x114>
 800cefe:	eba0 0308 	sub.w	r3, r0, r8
 800cf02:	fa09 f303 	lsl.w	r3, r9, r3
 800cf06:	4313      	orrs	r3, r2
 800cf08:	9304      	str	r3, [sp, #16]
 800cf0a:	46a2      	mov	sl, r4
 800cf0c:	e7d2      	b.n	800ceb4 <_svfiprintf_r+0xa0>
 800cf0e:	9b03      	ldr	r3, [sp, #12]
 800cf10:	1d19      	adds	r1, r3, #4
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	9103      	str	r1, [sp, #12]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	bfbb      	ittet	lt
 800cf1a:	425b      	neglt	r3, r3
 800cf1c:	f042 0202 	orrlt.w	r2, r2, #2
 800cf20:	9307      	strge	r3, [sp, #28]
 800cf22:	9307      	strlt	r3, [sp, #28]
 800cf24:	bfb8      	it	lt
 800cf26:	9204      	strlt	r2, [sp, #16]
 800cf28:	7823      	ldrb	r3, [r4, #0]
 800cf2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf2c:	d10a      	bne.n	800cf44 <_svfiprintf_r+0x130>
 800cf2e:	7863      	ldrb	r3, [r4, #1]
 800cf30:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf32:	d132      	bne.n	800cf9a <_svfiprintf_r+0x186>
 800cf34:	9b03      	ldr	r3, [sp, #12]
 800cf36:	1d1a      	adds	r2, r3, #4
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	9203      	str	r2, [sp, #12]
 800cf3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf40:	3402      	adds	r4, #2
 800cf42:	9305      	str	r3, [sp, #20]
 800cf44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d008 <_svfiprintf_r+0x1f4>
 800cf48:	7821      	ldrb	r1, [r4, #0]
 800cf4a:	2203      	movs	r2, #3
 800cf4c:	4650      	mov	r0, sl
 800cf4e:	f7f3 f947 	bl	80001e0 <memchr>
 800cf52:	b138      	cbz	r0, 800cf64 <_svfiprintf_r+0x150>
 800cf54:	9b04      	ldr	r3, [sp, #16]
 800cf56:	eba0 000a 	sub.w	r0, r0, sl
 800cf5a:	2240      	movs	r2, #64	@ 0x40
 800cf5c:	4082      	lsls	r2, r0
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	3401      	adds	r4, #1
 800cf62:	9304      	str	r3, [sp, #16]
 800cf64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf68:	4824      	ldr	r0, [pc, #144]	@ (800cffc <_svfiprintf_r+0x1e8>)
 800cf6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf6e:	2206      	movs	r2, #6
 800cf70:	f7f3 f936 	bl	80001e0 <memchr>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d036      	beq.n	800cfe6 <_svfiprintf_r+0x1d2>
 800cf78:	4b21      	ldr	r3, [pc, #132]	@ (800d000 <_svfiprintf_r+0x1ec>)
 800cf7a:	bb1b      	cbnz	r3, 800cfc4 <_svfiprintf_r+0x1b0>
 800cf7c:	9b03      	ldr	r3, [sp, #12]
 800cf7e:	3307      	adds	r3, #7
 800cf80:	f023 0307 	bic.w	r3, r3, #7
 800cf84:	3308      	adds	r3, #8
 800cf86:	9303      	str	r3, [sp, #12]
 800cf88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf8a:	4433      	add	r3, r6
 800cf8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf8e:	e76a      	b.n	800ce66 <_svfiprintf_r+0x52>
 800cf90:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf94:	460c      	mov	r4, r1
 800cf96:	2001      	movs	r0, #1
 800cf98:	e7a8      	b.n	800ceec <_svfiprintf_r+0xd8>
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	3401      	adds	r4, #1
 800cf9e:	9305      	str	r3, [sp, #20]
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	f04f 0c0a 	mov.w	ip, #10
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfac:	3a30      	subs	r2, #48	@ 0x30
 800cfae:	2a09      	cmp	r2, #9
 800cfb0:	d903      	bls.n	800cfba <_svfiprintf_r+0x1a6>
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d0c6      	beq.n	800cf44 <_svfiprintf_r+0x130>
 800cfb6:	9105      	str	r1, [sp, #20]
 800cfb8:	e7c4      	b.n	800cf44 <_svfiprintf_r+0x130>
 800cfba:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	e7f0      	b.n	800cfa6 <_svfiprintf_r+0x192>
 800cfc4:	ab03      	add	r3, sp, #12
 800cfc6:	9300      	str	r3, [sp, #0]
 800cfc8:	462a      	mov	r2, r5
 800cfca:	4b0e      	ldr	r3, [pc, #56]	@ (800d004 <_svfiprintf_r+0x1f0>)
 800cfcc:	a904      	add	r1, sp, #16
 800cfce:	4638      	mov	r0, r7
 800cfd0:	f7fd fe78 	bl	800acc4 <_printf_float>
 800cfd4:	1c42      	adds	r2, r0, #1
 800cfd6:	4606      	mov	r6, r0
 800cfd8:	d1d6      	bne.n	800cf88 <_svfiprintf_r+0x174>
 800cfda:	89ab      	ldrh	r3, [r5, #12]
 800cfdc:	065b      	lsls	r3, r3, #25
 800cfde:	f53f af2d 	bmi.w	800ce3c <_svfiprintf_r+0x28>
 800cfe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfe4:	e72c      	b.n	800ce40 <_svfiprintf_r+0x2c>
 800cfe6:	ab03      	add	r3, sp, #12
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	462a      	mov	r2, r5
 800cfec:	4b05      	ldr	r3, [pc, #20]	@ (800d004 <_svfiprintf_r+0x1f0>)
 800cfee:	a904      	add	r1, sp, #16
 800cff0:	4638      	mov	r0, r7
 800cff2:	f7fe f8ff 	bl	800b1f4 <_printf_i>
 800cff6:	e7ed      	b.n	800cfd4 <_svfiprintf_r+0x1c0>
 800cff8:	0800da76 	.word	0x0800da76
 800cffc:	0800da80 	.word	0x0800da80
 800d000:	0800acc5 	.word	0x0800acc5
 800d004:	0800cd5d 	.word	0x0800cd5d
 800d008:	0800da7c 	.word	0x0800da7c

0800d00c <__sflush_r>:
 800d00c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d014:	0716      	lsls	r6, r2, #28
 800d016:	4605      	mov	r5, r0
 800d018:	460c      	mov	r4, r1
 800d01a:	d454      	bmi.n	800d0c6 <__sflush_r+0xba>
 800d01c:	684b      	ldr	r3, [r1, #4]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	dc02      	bgt.n	800d028 <__sflush_r+0x1c>
 800d022:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d024:	2b00      	cmp	r3, #0
 800d026:	dd48      	ble.n	800d0ba <__sflush_r+0xae>
 800d028:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d02a:	2e00      	cmp	r6, #0
 800d02c:	d045      	beq.n	800d0ba <__sflush_r+0xae>
 800d02e:	2300      	movs	r3, #0
 800d030:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d034:	682f      	ldr	r7, [r5, #0]
 800d036:	6a21      	ldr	r1, [r4, #32]
 800d038:	602b      	str	r3, [r5, #0]
 800d03a:	d030      	beq.n	800d09e <__sflush_r+0x92>
 800d03c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d03e:	89a3      	ldrh	r3, [r4, #12]
 800d040:	0759      	lsls	r1, r3, #29
 800d042:	d505      	bpl.n	800d050 <__sflush_r+0x44>
 800d044:	6863      	ldr	r3, [r4, #4]
 800d046:	1ad2      	subs	r2, r2, r3
 800d048:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d04a:	b10b      	cbz	r3, 800d050 <__sflush_r+0x44>
 800d04c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d04e:	1ad2      	subs	r2, r2, r3
 800d050:	2300      	movs	r3, #0
 800d052:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d054:	6a21      	ldr	r1, [r4, #32]
 800d056:	4628      	mov	r0, r5
 800d058:	47b0      	blx	r6
 800d05a:	1c43      	adds	r3, r0, #1
 800d05c:	89a3      	ldrh	r3, [r4, #12]
 800d05e:	d106      	bne.n	800d06e <__sflush_r+0x62>
 800d060:	6829      	ldr	r1, [r5, #0]
 800d062:	291d      	cmp	r1, #29
 800d064:	d82b      	bhi.n	800d0be <__sflush_r+0xb2>
 800d066:	4a2a      	ldr	r2, [pc, #168]	@ (800d110 <__sflush_r+0x104>)
 800d068:	40ca      	lsrs	r2, r1
 800d06a:	07d6      	lsls	r6, r2, #31
 800d06c:	d527      	bpl.n	800d0be <__sflush_r+0xb2>
 800d06e:	2200      	movs	r2, #0
 800d070:	6062      	str	r2, [r4, #4]
 800d072:	04d9      	lsls	r1, r3, #19
 800d074:	6922      	ldr	r2, [r4, #16]
 800d076:	6022      	str	r2, [r4, #0]
 800d078:	d504      	bpl.n	800d084 <__sflush_r+0x78>
 800d07a:	1c42      	adds	r2, r0, #1
 800d07c:	d101      	bne.n	800d082 <__sflush_r+0x76>
 800d07e:	682b      	ldr	r3, [r5, #0]
 800d080:	b903      	cbnz	r3, 800d084 <__sflush_r+0x78>
 800d082:	6560      	str	r0, [r4, #84]	@ 0x54
 800d084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d086:	602f      	str	r7, [r5, #0]
 800d088:	b1b9      	cbz	r1, 800d0ba <__sflush_r+0xae>
 800d08a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d08e:	4299      	cmp	r1, r3
 800d090:	d002      	beq.n	800d098 <__sflush_r+0x8c>
 800d092:	4628      	mov	r0, r5
 800d094:	f7ff f9e8 	bl	800c468 <_free_r>
 800d098:	2300      	movs	r3, #0
 800d09a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d09c:	e00d      	b.n	800d0ba <__sflush_r+0xae>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	47b0      	blx	r6
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	1c50      	adds	r0, r2, #1
 800d0a8:	d1c9      	bne.n	800d03e <__sflush_r+0x32>
 800d0aa:	682b      	ldr	r3, [r5, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d0c6      	beq.n	800d03e <__sflush_r+0x32>
 800d0b0:	2b1d      	cmp	r3, #29
 800d0b2:	d001      	beq.n	800d0b8 <__sflush_r+0xac>
 800d0b4:	2b16      	cmp	r3, #22
 800d0b6:	d11e      	bne.n	800d0f6 <__sflush_r+0xea>
 800d0b8:	602f      	str	r7, [r5, #0]
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	e022      	b.n	800d104 <__sflush_r+0xf8>
 800d0be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0c2:	b21b      	sxth	r3, r3
 800d0c4:	e01b      	b.n	800d0fe <__sflush_r+0xf2>
 800d0c6:	690f      	ldr	r7, [r1, #16]
 800d0c8:	2f00      	cmp	r7, #0
 800d0ca:	d0f6      	beq.n	800d0ba <__sflush_r+0xae>
 800d0cc:	0793      	lsls	r3, r2, #30
 800d0ce:	680e      	ldr	r6, [r1, #0]
 800d0d0:	bf08      	it	eq
 800d0d2:	694b      	ldreq	r3, [r1, #20]
 800d0d4:	600f      	str	r7, [r1, #0]
 800d0d6:	bf18      	it	ne
 800d0d8:	2300      	movne	r3, #0
 800d0da:	eba6 0807 	sub.w	r8, r6, r7
 800d0de:	608b      	str	r3, [r1, #8]
 800d0e0:	f1b8 0f00 	cmp.w	r8, #0
 800d0e4:	dde9      	ble.n	800d0ba <__sflush_r+0xae>
 800d0e6:	6a21      	ldr	r1, [r4, #32]
 800d0e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d0ea:	4643      	mov	r3, r8
 800d0ec:	463a      	mov	r2, r7
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	47b0      	blx	r6
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	dc08      	bgt.n	800d108 <__sflush_r+0xfc>
 800d0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0fe:	81a3      	strh	r3, [r4, #12]
 800d100:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d108:	4407      	add	r7, r0
 800d10a:	eba8 0800 	sub.w	r8, r8, r0
 800d10e:	e7e7      	b.n	800d0e0 <__sflush_r+0xd4>
 800d110:	20400001 	.word	0x20400001

0800d114 <_fflush_r>:
 800d114:	b538      	push	{r3, r4, r5, lr}
 800d116:	690b      	ldr	r3, [r1, #16]
 800d118:	4605      	mov	r5, r0
 800d11a:	460c      	mov	r4, r1
 800d11c:	b913      	cbnz	r3, 800d124 <_fflush_r+0x10>
 800d11e:	2500      	movs	r5, #0
 800d120:	4628      	mov	r0, r5
 800d122:	bd38      	pop	{r3, r4, r5, pc}
 800d124:	b118      	cbz	r0, 800d12e <_fflush_r+0x1a>
 800d126:	6a03      	ldr	r3, [r0, #32]
 800d128:	b90b      	cbnz	r3, 800d12e <_fflush_r+0x1a>
 800d12a:	f7fe fa0d 	bl	800b548 <__sinit>
 800d12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d0f3      	beq.n	800d11e <_fflush_r+0xa>
 800d136:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d138:	07d0      	lsls	r0, r2, #31
 800d13a:	d404      	bmi.n	800d146 <_fflush_r+0x32>
 800d13c:	0599      	lsls	r1, r3, #22
 800d13e:	d402      	bmi.n	800d146 <_fflush_r+0x32>
 800d140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d142:	f7fe fb34 	bl	800b7ae <__retarget_lock_acquire_recursive>
 800d146:	4628      	mov	r0, r5
 800d148:	4621      	mov	r1, r4
 800d14a:	f7ff ff5f 	bl	800d00c <__sflush_r>
 800d14e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d150:	07da      	lsls	r2, r3, #31
 800d152:	4605      	mov	r5, r0
 800d154:	d4e4      	bmi.n	800d120 <_fflush_r+0xc>
 800d156:	89a3      	ldrh	r3, [r4, #12]
 800d158:	059b      	lsls	r3, r3, #22
 800d15a:	d4e1      	bmi.n	800d120 <_fflush_r+0xc>
 800d15c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d15e:	f7fe fb27 	bl	800b7b0 <__retarget_lock_release_recursive>
 800d162:	e7dd      	b.n	800d120 <_fflush_r+0xc>

0800d164 <memmove>:
 800d164:	4288      	cmp	r0, r1
 800d166:	b510      	push	{r4, lr}
 800d168:	eb01 0402 	add.w	r4, r1, r2
 800d16c:	d902      	bls.n	800d174 <memmove+0x10>
 800d16e:	4284      	cmp	r4, r0
 800d170:	4623      	mov	r3, r4
 800d172:	d807      	bhi.n	800d184 <memmove+0x20>
 800d174:	1e43      	subs	r3, r0, #1
 800d176:	42a1      	cmp	r1, r4
 800d178:	d008      	beq.n	800d18c <memmove+0x28>
 800d17a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d17e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d182:	e7f8      	b.n	800d176 <memmove+0x12>
 800d184:	4402      	add	r2, r0
 800d186:	4601      	mov	r1, r0
 800d188:	428a      	cmp	r2, r1
 800d18a:	d100      	bne.n	800d18e <memmove+0x2a>
 800d18c:	bd10      	pop	{r4, pc}
 800d18e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d196:	e7f7      	b.n	800d188 <memmove+0x24>

0800d198 <_sbrk_r>:
 800d198:	b538      	push	{r3, r4, r5, lr}
 800d19a:	4d06      	ldr	r5, [pc, #24]	@ (800d1b4 <_sbrk_r+0x1c>)
 800d19c:	2300      	movs	r3, #0
 800d19e:	4604      	mov	r4, r0
 800d1a0:	4608      	mov	r0, r1
 800d1a2:	602b      	str	r3, [r5, #0]
 800d1a4:	f7f4 fe86 	bl	8001eb4 <_sbrk>
 800d1a8:	1c43      	adds	r3, r0, #1
 800d1aa:	d102      	bne.n	800d1b2 <_sbrk_r+0x1a>
 800d1ac:	682b      	ldr	r3, [r5, #0]
 800d1ae:	b103      	cbz	r3, 800d1b2 <_sbrk_r+0x1a>
 800d1b0:	6023      	str	r3, [r4, #0]
 800d1b2:	bd38      	pop	{r3, r4, r5, pc}
 800d1b4:	200021dc 	.word	0x200021dc

0800d1b8 <memcpy>:
 800d1b8:	440a      	add	r2, r1
 800d1ba:	4291      	cmp	r1, r2
 800d1bc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d1c0:	d100      	bne.n	800d1c4 <memcpy+0xc>
 800d1c2:	4770      	bx	lr
 800d1c4:	b510      	push	{r4, lr}
 800d1c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1ce:	4291      	cmp	r1, r2
 800d1d0:	d1f9      	bne.n	800d1c6 <memcpy+0xe>
 800d1d2:	bd10      	pop	{r4, pc}

0800d1d4 <__assert_func>:
 800d1d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1d6:	4614      	mov	r4, r2
 800d1d8:	461a      	mov	r2, r3
 800d1da:	4b09      	ldr	r3, [pc, #36]	@ (800d200 <__assert_func+0x2c>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4605      	mov	r5, r0
 800d1e0:	68d8      	ldr	r0, [r3, #12]
 800d1e2:	b14c      	cbz	r4, 800d1f8 <__assert_func+0x24>
 800d1e4:	4b07      	ldr	r3, [pc, #28]	@ (800d204 <__assert_func+0x30>)
 800d1e6:	9100      	str	r1, [sp, #0]
 800d1e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d1ec:	4906      	ldr	r1, [pc, #24]	@ (800d208 <__assert_func+0x34>)
 800d1ee:	462b      	mov	r3, r5
 800d1f0:	f000 f870 	bl	800d2d4 <fiprintf>
 800d1f4:	f000 f880 	bl	800d2f8 <abort>
 800d1f8:	4b04      	ldr	r3, [pc, #16]	@ (800d20c <__assert_func+0x38>)
 800d1fa:	461c      	mov	r4, r3
 800d1fc:	e7f3      	b.n	800d1e6 <__assert_func+0x12>
 800d1fe:	bf00      	nop
 800d200:	20000110 	.word	0x20000110
 800d204:	0800da91 	.word	0x0800da91
 800d208:	0800da9e 	.word	0x0800da9e
 800d20c:	0800dacc 	.word	0x0800dacc

0800d210 <_calloc_r>:
 800d210:	b570      	push	{r4, r5, r6, lr}
 800d212:	fba1 5402 	umull	r5, r4, r1, r2
 800d216:	b934      	cbnz	r4, 800d226 <_calloc_r+0x16>
 800d218:	4629      	mov	r1, r5
 800d21a:	f7ff f999 	bl	800c550 <_malloc_r>
 800d21e:	4606      	mov	r6, r0
 800d220:	b928      	cbnz	r0, 800d22e <_calloc_r+0x1e>
 800d222:	4630      	mov	r0, r6
 800d224:	bd70      	pop	{r4, r5, r6, pc}
 800d226:	220c      	movs	r2, #12
 800d228:	6002      	str	r2, [r0, #0]
 800d22a:	2600      	movs	r6, #0
 800d22c:	e7f9      	b.n	800d222 <_calloc_r+0x12>
 800d22e:	462a      	mov	r2, r5
 800d230:	4621      	mov	r1, r4
 800d232:	f7fe fa3f 	bl	800b6b4 <memset>
 800d236:	e7f4      	b.n	800d222 <_calloc_r+0x12>

0800d238 <__ascii_mbtowc>:
 800d238:	b082      	sub	sp, #8
 800d23a:	b901      	cbnz	r1, 800d23e <__ascii_mbtowc+0x6>
 800d23c:	a901      	add	r1, sp, #4
 800d23e:	b142      	cbz	r2, 800d252 <__ascii_mbtowc+0x1a>
 800d240:	b14b      	cbz	r3, 800d256 <__ascii_mbtowc+0x1e>
 800d242:	7813      	ldrb	r3, [r2, #0]
 800d244:	600b      	str	r3, [r1, #0]
 800d246:	7812      	ldrb	r2, [r2, #0]
 800d248:	1e10      	subs	r0, r2, #0
 800d24a:	bf18      	it	ne
 800d24c:	2001      	movne	r0, #1
 800d24e:	b002      	add	sp, #8
 800d250:	4770      	bx	lr
 800d252:	4610      	mov	r0, r2
 800d254:	e7fb      	b.n	800d24e <__ascii_mbtowc+0x16>
 800d256:	f06f 0001 	mvn.w	r0, #1
 800d25a:	e7f8      	b.n	800d24e <__ascii_mbtowc+0x16>

0800d25c <_realloc_r>:
 800d25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d260:	4607      	mov	r7, r0
 800d262:	4614      	mov	r4, r2
 800d264:	460d      	mov	r5, r1
 800d266:	b921      	cbnz	r1, 800d272 <_realloc_r+0x16>
 800d268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d26c:	4611      	mov	r1, r2
 800d26e:	f7ff b96f 	b.w	800c550 <_malloc_r>
 800d272:	b92a      	cbnz	r2, 800d280 <_realloc_r+0x24>
 800d274:	f7ff f8f8 	bl	800c468 <_free_r>
 800d278:	4625      	mov	r5, r4
 800d27a:	4628      	mov	r0, r5
 800d27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d280:	f000 f841 	bl	800d306 <_malloc_usable_size_r>
 800d284:	4284      	cmp	r4, r0
 800d286:	4606      	mov	r6, r0
 800d288:	d802      	bhi.n	800d290 <_realloc_r+0x34>
 800d28a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d28e:	d8f4      	bhi.n	800d27a <_realloc_r+0x1e>
 800d290:	4621      	mov	r1, r4
 800d292:	4638      	mov	r0, r7
 800d294:	f7ff f95c 	bl	800c550 <_malloc_r>
 800d298:	4680      	mov	r8, r0
 800d29a:	b908      	cbnz	r0, 800d2a0 <_realloc_r+0x44>
 800d29c:	4645      	mov	r5, r8
 800d29e:	e7ec      	b.n	800d27a <_realloc_r+0x1e>
 800d2a0:	42b4      	cmp	r4, r6
 800d2a2:	4622      	mov	r2, r4
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	bf28      	it	cs
 800d2a8:	4632      	movcs	r2, r6
 800d2aa:	f7ff ff85 	bl	800d1b8 <memcpy>
 800d2ae:	4629      	mov	r1, r5
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	f7ff f8d9 	bl	800c468 <_free_r>
 800d2b6:	e7f1      	b.n	800d29c <_realloc_r+0x40>

0800d2b8 <__ascii_wctomb>:
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	4608      	mov	r0, r1
 800d2bc:	b141      	cbz	r1, 800d2d0 <__ascii_wctomb+0x18>
 800d2be:	2aff      	cmp	r2, #255	@ 0xff
 800d2c0:	d904      	bls.n	800d2cc <__ascii_wctomb+0x14>
 800d2c2:	228a      	movs	r2, #138	@ 0x8a
 800d2c4:	601a      	str	r2, [r3, #0]
 800d2c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d2ca:	4770      	bx	lr
 800d2cc:	700a      	strb	r2, [r1, #0]
 800d2ce:	2001      	movs	r0, #1
 800d2d0:	4770      	bx	lr
	...

0800d2d4 <fiprintf>:
 800d2d4:	b40e      	push	{r1, r2, r3}
 800d2d6:	b503      	push	{r0, r1, lr}
 800d2d8:	4601      	mov	r1, r0
 800d2da:	ab03      	add	r3, sp, #12
 800d2dc:	4805      	ldr	r0, [pc, #20]	@ (800d2f4 <fiprintf+0x20>)
 800d2de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2e2:	6800      	ldr	r0, [r0, #0]
 800d2e4:	9301      	str	r3, [sp, #4]
 800d2e6:	f000 f83f 	bl	800d368 <_vfiprintf_r>
 800d2ea:	b002      	add	sp, #8
 800d2ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2f0:	b003      	add	sp, #12
 800d2f2:	4770      	bx	lr
 800d2f4:	20000110 	.word	0x20000110

0800d2f8 <abort>:
 800d2f8:	b508      	push	{r3, lr}
 800d2fa:	2006      	movs	r0, #6
 800d2fc:	f000 fa08 	bl	800d710 <raise>
 800d300:	2001      	movs	r0, #1
 800d302:	f7f4 fd5f 	bl	8001dc4 <_exit>

0800d306 <_malloc_usable_size_r>:
 800d306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d30a:	1f18      	subs	r0, r3, #4
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	bfbc      	itt	lt
 800d310:	580b      	ldrlt	r3, [r1, r0]
 800d312:	18c0      	addlt	r0, r0, r3
 800d314:	4770      	bx	lr

0800d316 <__sfputc_r>:
 800d316:	6893      	ldr	r3, [r2, #8]
 800d318:	3b01      	subs	r3, #1
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	b410      	push	{r4}
 800d31e:	6093      	str	r3, [r2, #8]
 800d320:	da08      	bge.n	800d334 <__sfputc_r+0x1e>
 800d322:	6994      	ldr	r4, [r2, #24]
 800d324:	42a3      	cmp	r3, r4
 800d326:	db01      	blt.n	800d32c <__sfputc_r+0x16>
 800d328:	290a      	cmp	r1, #10
 800d32a:	d103      	bne.n	800d334 <__sfputc_r+0x1e>
 800d32c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d330:	f000 b932 	b.w	800d598 <__swbuf_r>
 800d334:	6813      	ldr	r3, [r2, #0]
 800d336:	1c58      	adds	r0, r3, #1
 800d338:	6010      	str	r0, [r2, #0]
 800d33a:	7019      	strb	r1, [r3, #0]
 800d33c:	4608      	mov	r0, r1
 800d33e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <__sfputs_r>:
 800d344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d346:	4606      	mov	r6, r0
 800d348:	460f      	mov	r7, r1
 800d34a:	4614      	mov	r4, r2
 800d34c:	18d5      	adds	r5, r2, r3
 800d34e:	42ac      	cmp	r4, r5
 800d350:	d101      	bne.n	800d356 <__sfputs_r+0x12>
 800d352:	2000      	movs	r0, #0
 800d354:	e007      	b.n	800d366 <__sfputs_r+0x22>
 800d356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d35a:	463a      	mov	r2, r7
 800d35c:	4630      	mov	r0, r6
 800d35e:	f7ff ffda 	bl	800d316 <__sfputc_r>
 800d362:	1c43      	adds	r3, r0, #1
 800d364:	d1f3      	bne.n	800d34e <__sfputs_r+0xa>
 800d366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d368 <_vfiprintf_r>:
 800d368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d36c:	460d      	mov	r5, r1
 800d36e:	b09d      	sub	sp, #116	@ 0x74
 800d370:	4614      	mov	r4, r2
 800d372:	4698      	mov	r8, r3
 800d374:	4606      	mov	r6, r0
 800d376:	b118      	cbz	r0, 800d380 <_vfiprintf_r+0x18>
 800d378:	6a03      	ldr	r3, [r0, #32]
 800d37a:	b90b      	cbnz	r3, 800d380 <_vfiprintf_r+0x18>
 800d37c:	f7fe f8e4 	bl	800b548 <__sinit>
 800d380:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d382:	07d9      	lsls	r1, r3, #31
 800d384:	d405      	bmi.n	800d392 <_vfiprintf_r+0x2a>
 800d386:	89ab      	ldrh	r3, [r5, #12]
 800d388:	059a      	lsls	r2, r3, #22
 800d38a:	d402      	bmi.n	800d392 <_vfiprintf_r+0x2a>
 800d38c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d38e:	f7fe fa0e 	bl	800b7ae <__retarget_lock_acquire_recursive>
 800d392:	89ab      	ldrh	r3, [r5, #12]
 800d394:	071b      	lsls	r3, r3, #28
 800d396:	d501      	bpl.n	800d39c <_vfiprintf_r+0x34>
 800d398:	692b      	ldr	r3, [r5, #16]
 800d39a:	b99b      	cbnz	r3, 800d3c4 <_vfiprintf_r+0x5c>
 800d39c:	4629      	mov	r1, r5
 800d39e:	4630      	mov	r0, r6
 800d3a0:	f000 f938 	bl	800d614 <__swsetup_r>
 800d3a4:	b170      	cbz	r0, 800d3c4 <_vfiprintf_r+0x5c>
 800d3a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3a8:	07dc      	lsls	r4, r3, #31
 800d3aa:	d504      	bpl.n	800d3b6 <_vfiprintf_r+0x4e>
 800d3ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3b0:	b01d      	add	sp, #116	@ 0x74
 800d3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b6:	89ab      	ldrh	r3, [r5, #12]
 800d3b8:	0598      	lsls	r0, r3, #22
 800d3ba:	d4f7      	bmi.n	800d3ac <_vfiprintf_r+0x44>
 800d3bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3be:	f7fe f9f7 	bl	800b7b0 <__retarget_lock_release_recursive>
 800d3c2:	e7f3      	b.n	800d3ac <_vfiprintf_r+0x44>
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3c8:	2320      	movs	r3, #32
 800d3ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3d2:	2330      	movs	r3, #48	@ 0x30
 800d3d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d584 <_vfiprintf_r+0x21c>
 800d3d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3dc:	f04f 0901 	mov.w	r9, #1
 800d3e0:	4623      	mov	r3, r4
 800d3e2:	469a      	mov	sl, r3
 800d3e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3e8:	b10a      	cbz	r2, 800d3ee <_vfiprintf_r+0x86>
 800d3ea:	2a25      	cmp	r2, #37	@ 0x25
 800d3ec:	d1f9      	bne.n	800d3e2 <_vfiprintf_r+0x7a>
 800d3ee:	ebba 0b04 	subs.w	fp, sl, r4
 800d3f2:	d00b      	beq.n	800d40c <_vfiprintf_r+0xa4>
 800d3f4:	465b      	mov	r3, fp
 800d3f6:	4622      	mov	r2, r4
 800d3f8:	4629      	mov	r1, r5
 800d3fa:	4630      	mov	r0, r6
 800d3fc:	f7ff ffa2 	bl	800d344 <__sfputs_r>
 800d400:	3001      	adds	r0, #1
 800d402:	f000 80a7 	beq.w	800d554 <_vfiprintf_r+0x1ec>
 800d406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d408:	445a      	add	r2, fp
 800d40a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d40c:	f89a 3000 	ldrb.w	r3, [sl]
 800d410:	2b00      	cmp	r3, #0
 800d412:	f000 809f 	beq.w	800d554 <_vfiprintf_r+0x1ec>
 800d416:	2300      	movs	r3, #0
 800d418:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d41c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d420:	f10a 0a01 	add.w	sl, sl, #1
 800d424:	9304      	str	r3, [sp, #16]
 800d426:	9307      	str	r3, [sp, #28]
 800d428:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d42c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d42e:	4654      	mov	r4, sl
 800d430:	2205      	movs	r2, #5
 800d432:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d436:	4853      	ldr	r0, [pc, #332]	@ (800d584 <_vfiprintf_r+0x21c>)
 800d438:	f7f2 fed2 	bl	80001e0 <memchr>
 800d43c:	9a04      	ldr	r2, [sp, #16]
 800d43e:	b9d8      	cbnz	r0, 800d478 <_vfiprintf_r+0x110>
 800d440:	06d1      	lsls	r1, r2, #27
 800d442:	bf44      	itt	mi
 800d444:	2320      	movmi	r3, #32
 800d446:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d44a:	0713      	lsls	r3, r2, #28
 800d44c:	bf44      	itt	mi
 800d44e:	232b      	movmi	r3, #43	@ 0x2b
 800d450:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d454:	f89a 3000 	ldrb.w	r3, [sl]
 800d458:	2b2a      	cmp	r3, #42	@ 0x2a
 800d45a:	d015      	beq.n	800d488 <_vfiprintf_r+0x120>
 800d45c:	9a07      	ldr	r2, [sp, #28]
 800d45e:	4654      	mov	r4, sl
 800d460:	2000      	movs	r0, #0
 800d462:	f04f 0c0a 	mov.w	ip, #10
 800d466:	4621      	mov	r1, r4
 800d468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d46c:	3b30      	subs	r3, #48	@ 0x30
 800d46e:	2b09      	cmp	r3, #9
 800d470:	d94b      	bls.n	800d50a <_vfiprintf_r+0x1a2>
 800d472:	b1b0      	cbz	r0, 800d4a2 <_vfiprintf_r+0x13a>
 800d474:	9207      	str	r2, [sp, #28]
 800d476:	e014      	b.n	800d4a2 <_vfiprintf_r+0x13a>
 800d478:	eba0 0308 	sub.w	r3, r0, r8
 800d47c:	fa09 f303 	lsl.w	r3, r9, r3
 800d480:	4313      	orrs	r3, r2
 800d482:	9304      	str	r3, [sp, #16]
 800d484:	46a2      	mov	sl, r4
 800d486:	e7d2      	b.n	800d42e <_vfiprintf_r+0xc6>
 800d488:	9b03      	ldr	r3, [sp, #12]
 800d48a:	1d19      	adds	r1, r3, #4
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	9103      	str	r1, [sp, #12]
 800d490:	2b00      	cmp	r3, #0
 800d492:	bfbb      	ittet	lt
 800d494:	425b      	neglt	r3, r3
 800d496:	f042 0202 	orrlt.w	r2, r2, #2
 800d49a:	9307      	strge	r3, [sp, #28]
 800d49c:	9307      	strlt	r3, [sp, #28]
 800d49e:	bfb8      	it	lt
 800d4a0:	9204      	strlt	r2, [sp, #16]
 800d4a2:	7823      	ldrb	r3, [r4, #0]
 800d4a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4a6:	d10a      	bne.n	800d4be <_vfiprintf_r+0x156>
 800d4a8:	7863      	ldrb	r3, [r4, #1]
 800d4aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4ac:	d132      	bne.n	800d514 <_vfiprintf_r+0x1ac>
 800d4ae:	9b03      	ldr	r3, [sp, #12]
 800d4b0:	1d1a      	adds	r2, r3, #4
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	9203      	str	r2, [sp, #12]
 800d4b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4ba:	3402      	adds	r4, #2
 800d4bc:	9305      	str	r3, [sp, #20]
 800d4be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d594 <_vfiprintf_r+0x22c>
 800d4c2:	7821      	ldrb	r1, [r4, #0]
 800d4c4:	2203      	movs	r2, #3
 800d4c6:	4650      	mov	r0, sl
 800d4c8:	f7f2 fe8a 	bl	80001e0 <memchr>
 800d4cc:	b138      	cbz	r0, 800d4de <_vfiprintf_r+0x176>
 800d4ce:	9b04      	ldr	r3, [sp, #16]
 800d4d0:	eba0 000a 	sub.w	r0, r0, sl
 800d4d4:	2240      	movs	r2, #64	@ 0x40
 800d4d6:	4082      	lsls	r2, r0
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	3401      	adds	r4, #1
 800d4dc:	9304      	str	r3, [sp, #16]
 800d4de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4e2:	4829      	ldr	r0, [pc, #164]	@ (800d588 <_vfiprintf_r+0x220>)
 800d4e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4e8:	2206      	movs	r2, #6
 800d4ea:	f7f2 fe79 	bl	80001e0 <memchr>
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	d03f      	beq.n	800d572 <_vfiprintf_r+0x20a>
 800d4f2:	4b26      	ldr	r3, [pc, #152]	@ (800d58c <_vfiprintf_r+0x224>)
 800d4f4:	bb1b      	cbnz	r3, 800d53e <_vfiprintf_r+0x1d6>
 800d4f6:	9b03      	ldr	r3, [sp, #12]
 800d4f8:	3307      	adds	r3, #7
 800d4fa:	f023 0307 	bic.w	r3, r3, #7
 800d4fe:	3308      	adds	r3, #8
 800d500:	9303      	str	r3, [sp, #12]
 800d502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d504:	443b      	add	r3, r7
 800d506:	9309      	str	r3, [sp, #36]	@ 0x24
 800d508:	e76a      	b.n	800d3e0 <_vfiprintf_r+0x78>
 800d50a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d50e:	460c      	mov	r4, r1
 800d510:	2001      	movs	r0, #1
 800d512:	e7a8      	b.n	800d466 <_vfiprintf_r+0xfe>
 800d514:	2300      	movs	r3, #0
 800d516:	3401      	adds	r4, #1
 800d518:	9305      	str	r3, [sp, #20]
 800d51a:	4619      	mov	r1, r3
 800d51c:	f04f 0c0a 	mov.w	ip, #10
 800d520:	4620      	mov	r0, r4
 800d522:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d526:	3a30      	subs	r2, #48	@ 0x30
 800d528:	2a09      	cmp	r2, #9
 800d52a:	d903      	bls.n	800d534 <_vfiprintf_r+0x1cc>
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d0c6      	beq.n	800d4be <_vfiprintf_r+0x156>
 800d530:	9105      	str	r1, [sp, #20]
 800d532:	e7c4      	b.n	800d4be <_vfiprintf_r+0x156>
 800d534:	fb0c 2101 	mla	r1, ip, r1, r2
 800d538:	4604      	mov	r4, r0
 800d53a:	2301      	movs	r3, #1
 800d53c:	e7f0      	b.n	800d520 <_vfiprintf_r+0x1b8>
 800d53e:	ab03      	add	r3, sp, #12
 800d540:	9300      	str	r3, [sp, #0]
 800d542:	462a      	mov	r2, r5
 800d544:	4b12      	ldr	r3, [pc, #72]	@ (800d590 <_vfiprintf_r+0x228>)
 800d546:	a904      	add	r1, sp, #16
 800d548:	4630      	mov	r0, r6
 800d54a:	f7fd fbbb 	bl	800acc4 <_printf_float>
 800d54e:	4607      	mov	r7, r0
 800d550:	1c78      	adds	r0, r7, #1
 800d552:	d1d6      	bne.n	800d502 <_vfiprintf_r+0x19a>
 800d554:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d556:	07d9      	lsls	r1, r3, #31
 800d558:	d405      	bmi.n	800d566 <_vfiprintf_r+0x1fe>
 800d55a:	89ab      	ldrh	r3, [r5, #12]
 800d55c:	059a      	lsls	r2, r3, #22
 800d55e:	d402      	bmi.n	800d566 <_vfiprintf_r+0x1fe>
 800d560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d562:	f7fe f925 	bl	800b7b0 <__retarget_lock_release_recursive>
 800d566:	89ab      	ldrh	r3, [r5, #12]
 800d568:	065b      	lsls	r3, r3, #25
 800d56a:	f53f af1f 	bmi.w	800d3ac <_vfiprintf_r+0x44>
 800d56e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d570:	e71e      	b.n	800d3b0 <_vfiprintf_r+0x48>
 800d572:	ab03      	add	r3, sp, #12
 800d574:	9300      	str	r3, [sp, #0]
 800d576:	462a      	mov	r2, r5
 800d578:	4b05      	ldr	r3, [pc, #20]	@ (800d590 <_vfiprintf_r+0x228>)
 800d57a:	a904      	add	r1, sp, #16
 800d57c:	4630      	mov	r0, r6
 800d57e:	f7fd fe39 	bl	800b1f4 <_printf_i>
 800d582:	e7e4      	b.n	800d54e <_vfiprintf_r+0x1e6>
 800d584:	0800da76 	.word	0x0800da76
 800d588:	0800da80 	.word	0x0800da80
 800d58c:	0800acc5 	.word	0x0800acc5
 800d590:	0800d345 	.word	0x0800d345
 800d594:	0800da7c 	.word	0x0800da7c

0800d598 <__swbuf_r>:
 800d598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d59a:	460e      	mov	r6, r1
 800d59c:	4614      	mov	r4, r2
 800d59e:	4605      	mov	r5, r0
 800d5a0:	b118      	cbz	r0, 800d5aa <__swbuf_r+0x12>
 800d5a2:	6a03      	ldr	r3, [r0, #32]
 800d5a4:	b90b      	cbnz	r3, 800d5aa <__swbuf_r+0x12>
 800d5a6:	f7fd ffcf 	bl	800b548 <__sinit>
 800d5aa:	69a3      	ldr	r3, [r4, #24]
 800d5ac:	60a3      	str	r3, [r4, #8]
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	071a      	lsls	r2, r3, #28
 800d5b2:	d501      	bpl.n	800d5b8 <__swbuf_r+0x20>
 800d5b4:	6923      	ldr	r3, [r4, #16]
 800d5b6:	b943      	cbnz	r3, 800d5ca <__swbuf_r+0x32>
 800d5b8:	4621      	mov	r1, r4
 800d5ba:	4628      	mov	r0, r5
 800d5bc:	f000 f82a 	bl	800d614 <__swsetup_r>
 800d5c0:	b118      	cbz	r0, 800d5ca <__swbuf_r+0x32>
 800d5c2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d5c6:	4638      	mov	r0, r7
 800d5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5ca:	6823      	ldr	r3, [r4, #0]
 800d5cc:	6922      	ldr	r2, [r4, #16]
 800d5ce:	1a98      	subs	r0, r3, r2
 800d5d0:	6963      	ldr	r3, [r4, #20]
 800d5d2:	b2f6      	uxtb	r6, r6
 800d5d4:	4283      	cmp	r3, r0
 800d5d6:	4637      	mov	r7, r6
 800d5d8:	dc05      	bgt.n	800d5e6 <__swbuf_r+0x4e>
 800d5da:	4621      	mov	r1, r4
 800d5dc:	4628      	mov	r0, r5
 800d5de:	f7ff fd99 	bl	800d114 <_fflush_r>
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d1ed      	bne.n	800d5c2 <__swbuf_r+0x2a>
 800d5e6:	68a3      	ldr	r3, [r4, #8]
 800d5e8:	3b01      	subs	r3, #1
 800d5ea:	60a3      	str	r3, [r4, #8]
 800d5ec:	6823      	ldr	r3, [r4, #0]
 800d5ee:	1c5a      	adds	r2, r3, #1
 800d5f0:	6022      	str	r2, [r4, #0]
 800d5f2:	701e      	strb	r6, [r3, #0]
 800d5f4:	6962      	ldr	r2, [r4, #20]
 800d5f6:	1c43      	adds	r3, r0, #1
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d004      	beq.n	800d606 <__swbuf_r+0x6e>
 800d5fc:	89a3      	ldrh	r3, [r4, #12]
 800d5fe:	07db      	lsls	r3, r3, #31
 800d600:	d5e1      	bpl.n	800d5c6 <__swbuf_r+0x2e>
 800d602:	2e0a      	cmp	r6, #10
 800d604:	d1df      	bne.n	800d5c6 <__swbuf_r+0x2e>
 800d606:	4621      	mov	r1, r4
 800d608:	4628      	mov	r0, r5
 800d60a:	f7ff fd83 	bl	800d114 <_fflush_r>
 800d60e:	2800      	cmp	r0, #0
 800d610:	d0d9      	beq.n	800d5c6 <__swbuf_r+0x2e>
 800d612:	e7d6      	b.n	800d5c2 <__swbuf_r+0x2a>

0800d614 <__swsetup_r>:
 800d614:	b538      	push	{r3, r4, r5, lr}
 800d616:	4b29      	ldr	r3, [pc, #164]	@ (800d6bc <__swsetup_r+0xa8>)
 800d618:	4605      	mov	r5, r0
 800d61a:	6818      	ldr	r0, [r3, #0]
 800d61c:	460c      	mov	r4, r1
 800d61e:	b118      	cbz	r0, 800d628 <__swsetup_r+0x14>
 800d620:	6a03      	ldr	r3, [r0, #32]
 800d622:	b90b      	cbnz	r3, 800d628 <__swsetup_r+0x14>
 800d624:	f7fd ff90 	bl	800b548 <__sinit>
 800d628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d62c:	0719      	lsls	r1, r3, #28
 800d62e:	d422      	bmi.n	800d676 <__swsetup_r+0x62>
 800d630:	06da      	lsls	r2, r3, #27
 800d632:	d407      	bmi.n	800d644 <__swsetup_r+0x30>
 800d634:	2209      	movs	r2, #9
 800d636:	602a      	str	r2, [r5, #0]
 800d638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d63c:	81a3      	strh	r3, [r4, #12]
 800d63e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d642:	e033      	b.n	800d6ac <__swsetup_r+0x98>
 800d644:	0758      	lsls	r0, r3, #29
 800d646:	d512      	bpl.n	800d66e <__swsetup_r+0x5a>
 800d648:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d64a:	b141      	cbz	r1, 800d65e <__swsetup_r+0x4a>
 800d64c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d650:	4299      	cmp	r1, r3
 800d652:	d002      	beq.n	800d65a <__swsetup_r+0x46>
 800d654:	4628      	mov	r0, r5
 800d656:	f7fe ff07 	bl	800c468 <_free_r>
 800d65a:	2300      	movs	r3, #0
 800d65c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d65e:	89a3      	ldrh	r3, [r4, #12]
 800d660:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d664:	81a3      	strh	r3, [r4, #12]
 800d666:	2300      	movs	r3, #0
 800d668:	6063      	str	r3, [r4, #4]
 800d66a:	6923      	ldr	r3, [r4, #16]
 800d66c:	6023      	str	r3, [r4, #0]
 800d66e:	89a3      	ldrh	r3, [r4, #12]
 800d670:	f043 0308 	orr.w	r3, r3, #8
 800d674:	81a3      	strh	r3, [r4, #12]
 800d676:	6923      	ldr	r3, [r4, #16]
 800d678:	b94b      	cbnz	r3, 800d68e <__swsetup_r+0x7a>
 800d67a:	89a3      	ldrh	r3, [r4, #12]
 800d67c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d684:	d003      	beq.n	800d68e <__swsetup_r+0x7a>
 800d686:	4621      	mov	r1, r4
 800d688:	4628      	mov	r0, r5
 800d68a:	f000 f883 	bl	800d794 <__smakebuf_r>
 800d68e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d692:	f013 0201 	ands.w	r2, r3, #1
 800d696:	d00a      	beq.n	800d6ae <__swsetup_r+0x9a>
 800d698:	2200      	movs	r2, #0
 800d69a:	60a2      	str	r2, [r4, #8]
 800d69c:	6962      	ldr	r2, [r4, #20]
 800d69e:	4252      	negs	r2, r2
 800d6a0:	61a2      	str	r2, [r4, #24]
 800d6a2:	6922      	ldr	r2, [r4, #16]
 800d6a4:	b942      	cbnz	r2, 800d6b8 <__swsetup_r+0xa4>
 800d6a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d6aa:	d1c5      	bne.n	800d638 <__swsetup_r+0x24>
 800d6ac:	bd38      	pop	{r3, r4, r5, pc}
 800d6ae:	0799      	lsls	r1, r3, #30
 800d6b0:	bf58      	it	pl
 800d6b2:	6962      	ldrpl	r2, [r4, #20]
 800d6b4:	60a2      	str	r2, [r4, #8]
 800d6b6:	e7f4      	b.n	800d6a2 <__swsetup_r+0x8e>
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	e7f7      	b.n	800d6ac <__swsetup_r+0x98>
 800d6bc:	20000110 	.word	0x20000110

0800d6c0 <_raise_r>:
 800d6c0:	291f      	cmp	r1, #31
 800d6c2:	b538      	push	{r3, r4, r5, lr}
 800d6c4:	4605      	mov	r5, r0
 800d6c6:	460c      	mov	r4, r1
 800d6c8:	d904      	bls.n	800d6d4 <_raise_r+0x14>
 800d6ca:	2316      	movs	r3, #22
 800d6cc:	6003      	str	r3, [r0, #0]
 800d6ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6d2:	bd38      	pop	{r3, r4, r5, pc}
 800d6d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d6d6:	b112      	cbz	r2, 800d6de <_raise_r+0x1e>
 800d6d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6dc:	b94b      	cbnz	r3, 800d6f2 <_raise_r+0x32>
 800d6de:	4628      	mov	r0, r5
 800d6e0:	f000 f830 	bl	800d744 <_getpid_r>
 800d6e4:	4622      	mov	r2, r4
 800d6e6:	4601      	mov	r1, r0
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6ee:	f000 b817 	b.w	800d720 <_kill_r>
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d00a      	beq.n	800d70c <_raise_r+0x4c>
 800d6f6:	1c59      	adds	r1, r3, #1
 800d6f8:	d103      	bne.n	800d702 <_raise_r+0x42>
 800d6fa:	2316      	movs	r3, #22
 800d6fc:	6003      	str	r3, [r0, #0]
 800d6fe:	2001      	movs	r0, #1
 800d700:	e7e7      	b.n	800d6d2 <_raise_r+0x12>
 800d702:	2100      	movs	r1, #0
 800d704:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d708:	4620      	mov	r0, r4
 800d70a:	4798      	blx	r3
 800d70c:	2000      	movs	r0, #0
 800d70e:	e7e0      	b.n	800d6d2 <_raise_r+0x12>

0800d710 <raise>:
 800d710:	4b02      	ldr	r3, [pc, #8]	@ (800d71c <raise+0xc>)
 800d712:	4601      	mov	r1, r0
 800d714:	6818      	ldr	r0, [r3, #0]
 800d716:	f7ff bfd3 	b.w	800d6c0 <_raise_r>
 800d71a:	bf00      	nop
 800d71c:	20000110 	.word	0x20000110

0800d720 <_kill_r>:
 800d720:	b538      	push	{r3, r4, r5, lr}
 800d722:	4d07      	ldr	r5, [pc, #28]	@ (800d740 <_kill_r+0x20>)
 800d724:	2300      	movs	r3, #0
 800d726:	4604      	mov	r4, r0
 800d728:	4608      	mov	r0, r1
 800d72a:	4611      	mov	r1, r2
 800d72c:	602b      	str	r3, [r5, #0]
 800d72e:	f7f4 fb39 	bl	8001da4 <_kill>
 800d732:	1c43      	adds	r3, r0, #1
 800d734:	d102      	bne.n	800d73c <_kill_r+0x1c>
 800d736:	682b      	ldr	r3, [r5, #0]
 800d738:	b103      	cbz	r3, 800d73c <_kill_r+0x1c>
 800d73a:	6023      	str	r3, [r4, #0]
 800d73c:	bd38      	pop	{r3, r4, r5, pc}
 800d73e:	bf00      	nop
 800d740:	200021dc 	.word	0x200021dc

0800d744 <_getpid_r>:
 800d744:	f7f4 bb26 	b.w	8001d94 <_getpid>

0800d748 <__swhatbuf_r>:
 800d748:	b570      	push	{r4, r5, r6, lr}
 800d74a:	460c      	mov	r4, r1
 800d74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d750:	2900      	cmp	r1, #0
 800d752:	b096      	sub	sp, #88	@ 0x58
 800d754:	4615      	mov	r5, r2
 800d756:	461e      	mov	r6, r3
 800d758:	da0d      	bge.n	800d776 <__swhatbuf_r+0x2e>
 800d75a:	89a3      	ldrh	r3, [r4, #12]
 800d75c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d760:	f04f 0100 	mov.w	r1, #0
 800d764:	bf14      	ite	ne
 800d766:	2340      	movne	r3, #64	@ 0x40
 800d768:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d76c:	2000      	movs	r0, #0
 800d76e:	6031      	str	r1, [r6, #0]
 800d770:	602b      	str	r3, [r5, #0]
 800d772:	b016      	add	sp, #88	@ 0x58
 800d774:	bd70      	pop	{r4, r5, r6, pc}
 800d776:	466a      	mov	r2, sp
 800d778:	f000 f848 	bl	800d80c <_fstat_r>
 800d77c:	2800      	cmp	r0, #0
 800d77e:	dbec      	blt.n	800d75a <__swhatbuf_r+0x12>
 800d780:	9901      	ldr	r1, [sp, #4]
 800d782:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d786:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d78a:	4259      	negs	r1, r3
 800d78c:	4159      	adcs	r1, r3
 800d78e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d792:	e7eb      	b.n	800d76c <__swhatbuf_r+0x24>

0800d794 <__smakebuf_r>:
 800d794:	898b      	ldrh	r3, [r1, #12]
 800d796:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d798:	079d      	lsls	r5, r3, #30
 800d79a:	4606      	mov	r6, r0
 800d79c:	460c      	mov	r4, r1
 800d79e:	d507      	bpl.n	800d7b0 <__smakebuf_r+0x1c>
 800d7a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d7a4:	6023      	str	r3, [r4, #0]
 800d7a6:	6123      	str	r3, [r4, #16]
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	6163      	str	r3, [r4, #20]
 800d7ac:	b003      	add	sp, #12
 800d7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7b0:	ab01      	add	r3, sp, #4
 800d7b2:	466a      	mov	r2, sp
 800d7b4:	f7ff ffc8 	bl	800d748 <__swhatbuf_r>
 800d7b8:	9f00      	ldr	r7, [sp, #0]
 800d7ba:	4605      	mov	r5, r0
 800d7bc:	4639      	mov	r1, r7
 800d7be:	4630      	mov	r0, r6
 800d7c0:	f7fe fec6 	bl	800c550 <_malloc_r>
 800d7c4:	b948      	cbnz	r0, 800d7da <__smakebuf_r+0x46>
 800d7c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7ca:	059a      	lsls	r2, r3, #22
 800d7cc:	d4ee      	bmi.n	800d7ac <__smakebuf_r+0x18>
 800d7ce:	f023 0303 	bic.w	r3, r3, #3
 800d7d2:	f043 0302 	orr.w	r3, r3, #2
 800d7d6:	81a3      	strh	r3, [r4, #12]
 800d7d8:	e7e2      	b.n	800d7a0 <__smakebuf_r+0xc>
 800d7da:	89a3      	ldrh	r3, [r4, #12]
 800d7dc:	6020      	str	r0, [r4, #0]
 800d7de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7e2:	81a3      	strh	r3, [r4, #12]
 800d7e4:	9b01      	ldr	r3, [sp, #4]
 800d7e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d7ea:	b15b      	cbz	r3, 800d804 <__smakebuf_r+0x70>
 800d7ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	f000 f81d 	bl	800d830 <_isatty_r>
 800d7f6:	b128      	cbz	r0, 800d804 <__smakebuf_r+0x70>
 800d7f8:	89a3      	ldrh	r3, [r4, #12]
 800d7fa:	f023 0303 	bic.w	r3, r3, #3
 800d7fe:	f043 0301 	orr.w	r3, r3, #1
 800d802:	81a3      	strh	r3, [r4, #12]
 800d804:	89a3      	ldrh	r3, [r4, #12]
 800d806:	431d      	orrs	r5, r3
 800d808:	81a5      	strh	r5, [r4, #12]
 800d80a:	e7cf      	b.n	800d7ac <__smakebuf_r+0x18>

0800d80c <_fstat_r>:
 800d80c:	b538      	push	{r3, r4, r5, lr}
 800d80e:	4d07      	ldr	r5, [pc, #28]	@ (800d82c <_fstat_r+0x20>)
 800d810:	2300      	movs	r3, #0
 800d812:	4604      	mov	r4, r0
 800d814:	4608      	mov	r0, r1
 800d816:	4611      	mov	r1, r2
 800d818:	602b      	str	r3, [r5, #0]
 800d81a:	f7f4 fb23 	bl	8001e64 <_fstat>
 800d81e:	1c43      	adds	r3, r0, #1
 800d820:	d102      	bne.n	800d828 <_fstat_r+0x1c>
 800d822:	682b      	ldr	r3, [r5, #0]
 800d824:	b103      	cbz	r3, 800d828 <_fstat_r+0x1c>
 800d826:	6023      	str	r3, [r4, #0]
 800d828:	bd38      	pop	{r3, r4, r5, pc}
 800d82a:	bf00      	nop
 800d82c:	200021dc 	.word	0x200021dc

0800d830 <_isatty_r>:
 800d830:	b538      	push	{r3, r4, r5, lr}
 800d832:	4d06      	ldr	r5, [pc, #24]	@ (800d84c <_isatty_r+0x1c>)
 800d834:	2300      	movs	r3, #0
 800d836:	4604      	mov	r4, r0
 800d838:	4608      	mov	r0, r1
 800d83a:	602b      	str	r3, [r5, #0]
 800d83c:	f7f4 fb22 	bl	8001e84 <_isatty>
 800d840:	1c43      	adds	r3, r0, #1
 800d842:	d102      	bne.n	800d84a <_isatty_r+0x1a>
 800d844:	682b      	ldr	r3, [r5, #0]
 800d846:	b103      	cbz	r3, 800d84a <_isatty_r+0x1a>
 800d848:	6023      	str	r3, [r4, #0]
 800d84a:	bd38      	pop	{r3, r4, r5, pc}
 800d84c:	200021dc 	.word	0x200021dc

0800d850 <_init>:
 800d850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d852:	bf00      	nop
 800d854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d856:	bc08      	pop	{r3}
 800d858:	469e      	mov	lr, r3
 800d85a:	4770      	bx	lr

0800d85c <_fini>:
 800d85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d85e:	bf00      	nop
 800d860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d862:	bc08      	pop	{r3}
 800d864:	469e      	mov	lr, r3
 800d866:	4770      	bx	lr
