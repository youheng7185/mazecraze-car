
mazecrase-car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a4  0800eb40  0800eb40  0000fb40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2e4  0800f2e4  000112cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f2e4  0800f2e4  000102e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2ec  0800f2ec  000112cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2ec  0800f2ec  000102ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f2f0  0800f2f0  000102f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  0800f2f4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f30  200002cc  0800f5c0  000112cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021fc  0800f5c0  000121fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000112cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019736  00000000  00000000  000112fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042df  00000000  00000000  0002aa32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  0002ed18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001145  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006688  00000000  00000000  000314d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c267  00000000  00000000  00037b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095de1  00000000  00000000  00053dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9ba5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fec  00000000  00000000  000e9be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f0bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800eb28 	.word	0x0800eb28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800eb28 	.word	0x0800eb28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <my_printf>:
#define BUFFER_LEN 128
//uint8_t tx_buffer[BUFFER_LEN];
//uint16_t usbTxLength;

static inline void my_printf(const char *format, ...)
{
 8000f24:	b40f      	push	{r0, r1, r2, r3}
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b0a2      	sub	sp, #136	@ 0x88
 8000f2a:	af00      	add	r7, sp, #0
    char tx_buffer[BUFFER_LEN];
    va_list args;
    va_start(args, format);
 8000f2c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f30:	603b      	str	r3, [r7, #0]
    int usbTxLength = vsnprintf(tx_buffer, BUFFER_LEN, format, args);
 8000f32:	1d38      	adds	r0, r7, #4
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000f3a:	2180      	movs	r1, #128	@ 0x80
 8000f3c:	f00b fd18 	bl	800c970 <vsniprintf>
 8000f40:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    va_end(args);

    if (usbTxLength > 0 && usbTxLength < BUFFER_LEN)
 8000f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	dd0b      	ble.n	8000f64 <my_printf+0x40>
 8000f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f50:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f52:	dc07      	bgt.n	8000f64 <my_printf+0x40>
    {
        CDC_Transmit_FS((uint8_t *)tx_buffer, usbTxLength);
 8000f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f00a faba 	bl	800b4d8 <CDC_Transmit_FS>
    }
}
 8000f64:	bf00      	nop
 8000f66:	3788      	adds	r7, #136	@ 0x88
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f6e:	b004      	add	sp, #16
 8000f70:	4770      	bx	lr
	...

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08c      	sub	sp, #48	@ 0x30
 8000f78:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7a:	f002 fb57 	bl	800362c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7e:	f000 f883 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f82:	f000 fabd 	bl	8001500 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f86:	f000 f8e7 	bl	8001158 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f8a:	f000 f913 	bl	80011b4 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000f8e:	f000 f93f 	bl	8001210 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000f92:	f000 f9e9 	bl	8001368 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000f96:	f000 fa3b 	bl	8001410 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8000f9a:	f00a f98f 	bl	800b2bc <MX_USB_DEVICE_Init>
  MX_TIM11_Init();
 8000f9e:	f000 fa8b 	bl	80014b8 <MX_TIM11_Init>
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // PB12 LOW
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // PB13 HIGH
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // PB12 LOW
//  HAL_GPIO_WritePin(GPIOA, motor_stdby_Pin, GPIO_PIN_SET); // make standby pin high, activate the motor driver

  HAL_TIM_Base_Start_IT(&htim11);
 8000fa2:	4833      	ldr	r0, [pc, #204]	@ (8001070 <main+0xfc>)
 8000fa4:	f005 fd82 	bl	8006aac <HAL_TIM_Base_Start_IT>

  selectTCAChannel(0);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f000 fecd 	bl	8001d48 <selectTCAChannel>
  TCS34725_t tcs34725_sensor;
  tcs32725_begin(&tcs34725_sensor, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	21f6      	movs	r1, #246	@ 0xf6
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 ff8c 	bl	8001ed4 <tcs32725_begin>
  selectTCAChannel(1);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f000 fec3 	bl	8001d48 <selectTCAChannel>
  TCS34725_t tcs34725_sensor1;
  tcs32725_begin(&tcs34725_sensor1, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	21f6      	movs	r1, #246	@ 0xf6
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 ff82 	bl	8001ed4 <tcs32725_begin>
  selectTCAChannel(2);
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f000 feb9 	bl	8001d48 <selectTCAChannel>
  TCS34725_t tcs34725_sensor2;
  tcs32725_begin(&tcs34725_sensor2, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	21f6      	movs	r1, #246	@ 0xf6
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 ff79 	bl	8001ed4 <tcs32725_begin>
  float r, g, b;
  uint32_t count = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24


  uint8_t dev_id = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	70fb      	strb	r3, [r7, #3]
  uint8_t whoami = 0x0F;
 8000fea:	230f      	movs	r3, #15
 8000fec:	70bb      	strb	r3, [r7, #2]
  HAL_I2C_Master_Transmit(&hi2c2, 0x6B << 1, &whoami, 1, 100);
 8000fee:	1cba      	adds	r2, r7, #2
 8000ff0:	2364      	movs	r3, #100	@ 0x64
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	21d6      	movs	r1, #214	@ 0xd6
 8000ff8:	481e      	ldr	r0, [pc, #120]	@ (8001074 <main+0x100>)
 8000ffa:	f002 ffbb 	bl	8003f74 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c2, 0x6B << 1, &dev_id, 1, 100);
 8000ffe:	1cfa      	adds	r2, r7, #3
 8001000:	2364      	movs	r3, #100	@ 0x64
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2301      	movs	r3, #1
 8001006:	21d6      	movs	r1, #214	@ 0xd6
 8001008:	481a      	ldr	r0, [pc, #104]	@ (8001074 <main+0x100>)
 800100a:	f003 f8b1 	bl	8004170 <HAL_I2C_Master_Receive>
  my_printf("my id: %d", dev_id);
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	4619      	mov	r1, r3
 8001012:	4819      	ldr	r0, [pc, #100]	@ (8001078 <main+0x104>)
 8001014:	f7ff ff86 	bl	8000f24 <my_printf>

  motor_init();
 8001018:	f000 fb06 	bl	8001628 <motor_init>
  uint8_t speed = 25;
 800101c:	2319      	movs	r3, #25
 800101e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  motor_direction_t dir_A = REVERSE;
 8001022:	2301      	movs	r3, #1
 8001024:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  motor_direction_t dir_B = FORWARD;
 8001028:	2300      	movs	r3, #0
 800102a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  int32_t tick_m_a = 0, tick_m_b = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  int16_t tick_m_a_short = 0, tick_m_b_short = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	82fb      	strh	r3, [r7, #22]
 800103a:	2300      	movs	r3, #0
 800103c:	82bb      	strh	r3, [r7, #20]

  vl53l0x_init();
 800103e:	f002 fa9b 	bl	8003578 <vl53l0x_init>
  uint16_t range_a = 0, range_b = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	827b      	strh	r3, [r7, #18]
 8001046:	2300      	movs	r3, #0
 8001048:	823b      	strh	r3, [r7, #16]

  //lsm6dsl_read_data_polling();
  HAL_Delay(1000);
 800104a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800104e:	f002 fb5f 	bl	8003710 <HAL_Delay>
//	  selectTCAChannel(count % 3);
//	  getRGB(&r, &g, &b);
//	  my_printf("RGB Values from %d: R = %d, G = %d, B = %d\r\n", count%3, (int)(r), (int)(g), (int)(b));
//	  count++;

	  printColour(&pf_sensor_a_colour);
 8001052:	480a      	ldr	r0, [pc, #40]	@ (800107c <main+0x108>)
 8001054:	f000 fb7a 	bl	800174c <printColour>
	  printColour(&pf_sensor_b_colour);
 8001058:	4809      	ldr	r0, [pc, #36]	@ (8001080 <main+0x10c>)
 800105a:	f000 fb77 	bl	800174c <printColour>
	  printColour(&pf_sensor_c_colour);
 800105e:	4809      	ldr	r0, [pc, #36]	@ (8001084 <main+0x110>)
 8001060:	f000 fb74 	bl	800174c <printColour>
	  HAL_Delay(100);
 8001064:	2064      	movs	r0, #100	@ 0x64
 8001066:	f002 fb53 	bl	8003710 <HAL_Delay>
	  printColour(&pf_sensor_a_colour);
 800106a:	bf00      	nop
 800106c:	e7f1      	b.n	8001052 <main+0xde>
 800106e:	bf00      	nop
 8001070:	20000468 	.word	0x20000468
 8001074:	2000033c 	.word	0x2000033c
 8001078:	0800eb40 	.word	0x0800eb40
 800107c:	200004b0 	.word	0x200004b0
 8001080:	200004b4 	.word	0x200004b4
 8001084:	200004b8 	.word	0x200004b8

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b094      	sub	sp, #80	@ 0x50
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 0320 	add.w	r3, r7, #32
 8001092:	2230      	movs	r2, #48	@ 0x30
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f00b fd0c 	bl	800cab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	4b27      	ldr	r3, [pc, #156]	@ (8001150 <SystemClock_Config+0xc8>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	4a26      	ldr	r2, [pc, #152]	@ (8001150 <SystemClock_Config+0xc8>)
 80010b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80010bc:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <SystemClock_Config+0xc8>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	4b21      	ldr	r3, [pc, #132]	@ (8001154 <SystemClock_Config+0xcc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a20      	ldr	r2, [pc, #128]	@ (8001154 <SystemClock_Config+0xcc>)
 80010d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <SystemClock_Config+0xcc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e4:	2301      	movs	r3, #1
 80010e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ee:	2302      	movs	r3, #2
 80010f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010f8:	2319      	movs	r3, #25
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010fc:	23c0      	movs	r3, #192	@ 0xc0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001100:	2302      	movs	r3, #2
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001108:	f107 0320 	add.w	r3, r7, #32
 800110c:	4618      	mov	r0, r3
 800110e:	f005 f839 	bl	8006184 <HAL_RCC_OscConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001118:	f000 fa80 	bl	800161c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111c:	230f      	movs	r3, #15
 800111e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001120:	2302      	movs	r3, #2
 8001122:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001128:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800112c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	2103      	movs	r1, #3
 8001138:	4618      	mov	r0, r3
 800113a:	f005 fa9b 	bl	8006674 <HAL_RCC_ClockConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001144:	f000 fa6a 	bl	800161c <Error_Handler>
  }
}
 8001148:	bf00      	nop
 800114a:	3750      	adds	r7, #80	@ 0x50
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40023800 	.word	0x40023800
 8001154:	40007000 	.word	0x40007000

08001158 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <MX_I2C1_Init+0x50>)
 800115e:	4a13      	ldr	r2, [pc, #76]	@ (80011ac <MX_I2C1_Init+0x54>)
 8001160:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001164:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <MX_I2C1_Init+0x58>)
 8001166:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001176:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800117a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800117c:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <MX_I2C1_Init+0x50>)
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001188:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001194:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001196:	f002 fda9 	bl	8003cec <HAL_I2C_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a0:	f000 fa3c 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200002e8 	.word	0x200002e8
 80011ac:	40005400 	.word	0x40005400
 80011b0:	000186a0 	.word	0x000186a0

080011b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <MX_I2C2_Init+0x50>)
 80011ba:	4a13      	ldr	r2, [pc, #76]	@ (8001208 <MX_I2C2_Init+0x54>)
 80011bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_I2C2_Init+0x50>)
 80011c0:	4a12      	ldr	r2, [pc, #72]	@ (800120c <MX_I2C2_Init+0x58>)
 80011c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <MX_I2C2_Init+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <MX_I2C2_Init+0x50>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <MX_I2C2_Init+0x50>)
 80011d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <MX_I2C2_Init+0x50>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011de:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <MX_I2C2_Init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e4:	4b07      	ldr	r3, [pc, #28]	@ (8001204 <MX_I2C2_Init+0x50>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <MX_I2C2_Init+0x50>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011f0:	4804      	ldr	r0, [pc, #16]	@ (8001204 <MX_I2C2_Init+0x50>)
 80011f2:	f002 fd7b 	bl	8003cec <HAL_I2C_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011fc:	f000 fa0e 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	2000033c 	.word	0x2000033c
 8001208:	40005800 	.word	0x40005800
 800120c:	000186a0 	.word	0x000186a0

08001210 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b096      	sub	sp, #88	@ 0x58
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001216:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
 800123e:	615a      	str	r2, [r3, #20]
 8001240:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2220      	movs	r2, #32
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f00b fc33 	bl	800cab4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800124e:	4b44      	ldr	r3, [pc, #272]	@ (8001360 <MX_TIM1_Init+0x150>)
 8001250:	4a44      	ldr	r2, [pc, #272]	@ (8001364 <MX_TIM1_Init+0x154>)
 8001252:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8001254:	4b42      	ldr	r3, [pc, #264]	@ (8001360 <MX_TIM1_Init+0x150>)
 8001256:	225f      	movs	r2, #95	@ 0x5f
 8001258:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b41      	ldr	r3, [pc, #260]	@ (8001360 <MX_TIM1_Init+0x150>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 8001260:	4b3f      	ldr	r3, [pc, #252]	@ (8001360 <MX_TIM1_Init+0x150>)
 8001262:	2231      	movs	r2, #49	@ 0x31
 8001264:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001266:	4b3e      	ldr	r3, [pc, #248]	@ (8001360 <MX_TIM1_Init+0x150>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800126c:	4b3c      	ldr	r3, [pc, #240]	@ (8001360 <MX_TIM1_Init+0x150>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001272:	4b3b      	ldr	r3, [pc, #236]	@ (8001360 <MX_TIM1_Init+0x150>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001278:	4839      	ldr	r0, [pc, #228]	@ (8001360 <MX_TIM1_Init+0x150>)
 800127a:	f005 fbc7 	bl	8006a0c <HAL_TIM_Base_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001284:	f000 f9ca 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001288:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800128e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001292:	4619      	mov	r1, r3
 8001294:	4832      	ldr	r0, [pc, #200]	@ (8001360 <MX_TIM1_Init+0x150>)
 8001296:	f006 f85b 	bl	8007350 <HAL_TIM_ConfigClockSource>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80012a0:	f000 f9bc 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012a4:	482e      	ldr	r0, [pc, #184]	@ (8001360 <MX_TIM1_Init+0x150>)
 80012a6:	f005 fc63 	bl	8006b70 <HAL_TIM_PWM_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80012b0:	f000 f9b4 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012c0:	4619      	mov	r1, r3
 80012c2:	4827      	ldr	r0, [pc, #156]	@ (8001360 <MX_TIM1_Init+0x150>)
 80012c4:	f006 fc0c 	bl	8007ae0 <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80012ce:	f000 f9a5 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d2:	2360      	movs	r3, #96	@ 0x60
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012de:	2300      	movs	r3, #0
 80012e0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	481a      	ldr	r0, [pc, #104]	@ (8001360 <MX_TIM1_Init+0x150>)
 80012f8:	f005 ff68 	bl	80071cc <HAL_TIM_PWM_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001302:	f000 f98b 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130a:	2204      	movs	r2, #4
 800130c:	4619      	mov	r1, r3
 800130e:	4814      	ldr	r0, [pc, #80]	@ (8001360 <MX_TIM1_Init+0x150>)
 8001310:	f005 ff5c 	bl	80071cc <HAL_TIM_PWM_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800131a:	f000 f97f 	bl	800161c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001332:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001336:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	4619      	mov	r1, r3
 8001340:	4807      	ldr	r0, [pc, #28]	@ (8001360 <MX_TIM1_Init+0x150>)
 8001342:	f006 fc3b 	bl	8007bbc <HAL_TIMEx_ConfigBreakDeadTime>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800134c:	f000 f966 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001350:	4803      	ldr	r0, [pc, #12]	@ (8001360 <MX_TIM1_Init+0x150>)
 8001352:	f000 fb9f 	bl	8001a94 <HAL_TIM_MspPostInit>

}
 8001356:	bf00      	nop
 8001358:	3758      	adds	r7, #88	@ 0x58
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000390 	.word	0x20000390
 8001364:	40010000 	.word	0x40010000

08001368 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08c      	sub	sp, #48	@ 0x30
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	2224      	movs	r2, #36	@ 0x24
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f00b fb9c 	bl	800cab4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001384:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <MX_TIM4_Init+0xa0>)
 8001386:	4a21      	ldr	r2, [pc, #132]	@ (800140c <MX_TIM4_Init+0xa4>)
 8001388:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800138a:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <MX_TIM4_Init+0xa0>)
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001390:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <MX_TIM4_Init+0xa0>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <MX_TIM4_Init+0xa0>)
 8001398:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800139c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <MX_TIM4_Init+0xa0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a4:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <MX_TIM4_Init+0xa0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013aa:	2301      	movs	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013b2:	2301      	movs	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013c2:	2301      	movs	r3, #1
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	4619      	mov	r1, r3
 80013d4:	480c      	ldr	r0, [pc, #48]	@ (8001408 <MX_TIM4_Init+0xa0>)
 80013d6:	f005 fcd5 	bl	8006d84 <HAL_TIM_Encoder_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80013e0:	f000 f91c 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	@ (8001408 <MX_TIM4_Init+0xa0>)
 80013f2:	f006 fb75 	bl	8007ae0 <HAL_TIMEx_MasterConfigSynchronization>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80013fc:	f000 f90e 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	3730      	adds	r7, #48	@ 0x30
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200003d8 	.word	0x200003d8
 800140c:	40000800 	.word	0x40000800

08001410 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	@ 0x30
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	2224      	movs	r2, #36	@ 0x24
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f00b fb48 	bl	800cab4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800142c:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <MX_TIM5_Init+0xa0>)
 800142e:	4a21      	ldr	r2, [pc, #132]	@ (80014b4 <MX_TIM5_Init+0xa4>)
 8001430:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001432:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <MX_TIM5_Init+0xa0>)
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <MX_TIM5_Init+0xa0>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800143e:	4b1c      	ldr	r3, [pc, #112]	@ (80014b0 <MX_TIM5_Init+0xa0>)
 8001440:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001444:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b1a      	ldr	r3, [pc, #104]	@ (80014b0 <MX_TIM5_Init+0xa0>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b18      	ldr	r3, [pc, #96]	@ (80014b0 <MX_TIM5_Init+0xa0>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001452:	2301      	movs	r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800145a:	2301      	movs	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800146a:	2301      	movs	r3, #1
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	4619      	mov	r1, r3
 800147c:	480c      	ldr	r0, [pc, #48]	@ (80014b0 <MX_TIM5_Init+0xa0>)
 800147e:	f005 fc81 	bl	8006d84 <HAL_TIM_Encoder_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001488:	f000 f8c8 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <MX_TIM5_Init+0xa0>)
 800149a:	f006 fb21 	bl	8007ae0 <HAL_TIMEx_MasterConfigSynchronization>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80014a4:	f000 f8ba 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	3730      	adds	r7, #48	@ 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000420 	.word	0x20000420
 80014b4:	40000c00 	.word	0x40000c00

080014b8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <MX_TIM11_Init+0x40>)
 80014be:	4a0f      	ldr	r2, [pc, #60]	@ (80014fc <MX_TIM11_Init+0x44>)
 80014c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 960-1;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <MX_TIM11_Init+0x40>)
 80014c4:	f240 32bf 	movw	r2, #959	@ 0x3bf
 80014c8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <MX_TIM11_Init+0x40>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10416-1;
 80014d0:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <MX_TIM11_Init+0x40>)
 80014d2:	f642 02af 	movw	r2, #10415	@ 0x28af
 80014d6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d8:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <MX_TIM11_Init+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <MX_TIM11_Init+0x40>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80014e4:	4804      	ldr	r0, [pc, #16]	@ (80014f8 <MX_TIM11_Init+0x40>)
 80014e6:	f005 fa91 	bl	8006a0c <HAL_TIM_Base_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80014f0:	f000 f894 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000468 	.word	0x20000468
 80014fc:	40014800 	.word	0x40014800

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	@ 0x28
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b3c      	ldr	r3, [pc, #240]	@ (800160c <MX_GPIO_Init+0x10c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a3b      	ldr	r2, [pc, #236]	@ (800160c <MX_GPIO_Init+0x10c>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b39      	ldr	r3, [pc, #228]	@ (800160c <MX_GPIO_Init+0x10c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b35      	ldr	r3, [pc, #212]	@ (800160c <MX_GPIO_Init+0x10c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a34      	ldr	r2, [pc, #208]	@ (800160c <MX_GPIO_Init+0x10c>)
 800153c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b32      	ldr	r3, [pc, #200]	@ (800160c <MX_GPIO_Init+0x10c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	4b2e      	ldr	r3, [pc, #184]	@ (800160c <MX_GPIO_Init+0x10c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a2d      	ldr	r2, [pc, #180]	@ (800160c <MX_GPIO_Init+0x10c>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b2b      	ldr	r3, [pc, #172]	@ (800160c <MX_GPIO_Init+0x10c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	4b27      	ldr	r3, [pc, #156]	@ (800160c <MX_GPIO_Init+0x10c>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a26      	ldr	r2, [pc, #152]	@ (800160c <MX_GPIO_Init+0x10c>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b24      	ldr	r3, [pc, #144]	@ (800160c <MX_GPIO_Init+0x10c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800158c:	4820      	ldr	r0, [pc, #128]	@ (8001610 <MX_GPIO_Init+0x110>)
 800158e:	f002 fb79 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_h2_Pin|a_h1_Pin|b_h2_Pin|b_h1_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001598:	481e      	ldr	r0, [pc, #120]	@ (8001614 <MX_GPIO_Init+0x114>)
 800159a:	f002 fb73 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(motor_stdby_GPIO_Port, motor_stdby_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015a4:	481c      	ldr	r0, [pc, #112]	@ (8001618 <MX_GPIO_Init+0x118>)
 80015a6:	f002 fb6d 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	4813      	ldr	r0, [pc, #76]	@ (8001610 <MX_GPIO_Init+0x110>)
 80015c4:	f002 f9da 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : a_h2_Pin a_h1_Pin b_h2_Pin b_h1_Pin */
  GPIO_InitStruct.Pin = a_h2_Pin|a_h1_Pin|b_h2_Pin|b_h1_Pin;
 80015c8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	480c      	ldr	r0, [pc, #48]	@ (8001614 <MX_GPIO_Init+0x114>)
 80015e2:	f002 f9cb 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pin : motor_stdby_Pin */
  GPIO_InitStruct.Pin = motor_stdby_Pin;
 80015e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(motor_stdby_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	4806      	ldr	r0, [pc, #24]	@ (8001618 <MX_GPIO_Init+0x118>)
 8001600:	f002 f9bc 	bl	800397c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001604:	bf00      	nop
 8001606:	3728      	adds	r7, #40	@ 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	40020800 	.word	0x40020800
 8001614:	40020400 	.word	0x40020400
 8001618:	40020000 	.word	0x40020000

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <Error_Handler+0x8>

08001628 <motor_init>:
#include "main.h"
#include "stm32f4xx_hal.h"
#include "motor_ll.h"

void motor_init()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800162c:	2100      	movs	r1, #0
 800162e:	480f      	ldr	r0, [pc, #60]	@ (800166c <motor_init+0x44>)
 8001630:	f005 faf8 	bl	8006c24 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001634:	2104      	movs	r1, #4
 8001636:	480d      	ldr	r0, [pc, #52]	@ (800166c <motor_init+0x44>)
 8001638:	f005 faf4 	bl	8006c24 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800163c:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <motor_init+0x44>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2200      	movs	r2, #0
 8001642:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0); // make it stop
 8001644:	4b09      	ldr	r3, [pc, #36]	@ (800166c <motor_init+0x44>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2200      	movs	r2, #0
 800164a:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_GPIO_WritePin(GPIOA, motor_stdby_Pin, GPIO_PIN_SET); // make standby pin high, activate the motor driver
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001652:	4807      	ldr	r0, [pc, #28]	@ (8001670 <motor_init+0x48>)
 8001654:	f002 fb16 	bl	8003c84 <HAL_GPIO_WritePin>
	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001658:	213c      	movs	r1, #60	@ 0x3c
 800165a:	4806      	ldr	r0, [pc, #24]	@ (8001674 <motor_init+0x4c>)
 800165c:	f005 fc38 	bl	8006ed0 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001660:	213c      	movs	r1, #60	@ 0x3c
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <motor_init+0x50>)
 8001664:	f005 fc34 	bl	8006ed0 <HAL_TIM_Encoder_Start>
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000390 	.word	0x20000390
 8001670:	40020000 	.word	0x40020000
 8001674:	200003d8 	.word	0x200003d8
 8001678:	20000420 	.word	0x20000420

0800167c <my_printf>:
{
 800167c:	b40f      	push	{r0, r1, r2, r3}
 800167e:	b580      	push	{r7, lr}
 8001680:	b0a2      	sub	sp, #136	@ 0x88
 8001682:	af00      	add	r7, sp, #0
    va_start(args, format);
 8001684:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001688:	603b      	str	r3, [r7, #0]
    int usbTxLength = vsnprintf(tx_buffer, BUFFER_LEN, format, args);
 800168a:	1d38      	adds	r0, r7, #4
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001692:	2180      	movs	r1, #128	@ 0x80
 8001694:	f00b f96c 	bl	800c970 <vsniprintf>
 8001698:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (usbTxLength > 0 && usbTxLength < BUFFER_LEN)
 800169c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	dd0b      	ble.n	80016bc <my_printf+0x40>
 80016a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80016aa:	dc07      	bgt.n	80016bc <my_printf+0x40>
        CDC_Transmit_FS((uint8_t *)tx_buffer, usbTxLength);
 80016ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f009 ff0e 	bl	800b4d8 <CDC_Transmit_FS>
}
 80016bc:	bf00      	nop
 80016be:	3788      	adds	r7, #136	@ 0x88
 80016c0:	46bd      	mov	sp, r7
 80016c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016c6:	b004      	add	sp, #16
 80016c8:	4770      	bx	lr
	...

080016cc <HAL_TIM_PeriodElapsedCallback>:
pf_colour_t pf_sensor_a_colour;
pf_colour_t pf_sensor_b_colour;
pf_colour_t pf_sensor_c_colour;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM11)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a11      	ldr	r2, [pc, #68]	@ (8001720 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d11c      	bne.n	8001718 <HAL_TIM_PeriodElapsedCallback+0x4c>
  {
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80016de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016e2:	4810      	ldr	r0, [pc, #64]	@ (8001724 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80016e4:	f002 fae7 	bl	8003cb6 <HAL_GPIO_TogglePin>
    // Select channel for sensor A, then read RGB values

    // Select channel for sensor A, then read RGB values
    selectTCAChannel(0);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f000 fb2d 	bl	8001d48 <selectTCAChannel>
    getRGB(&pf_sensor_a_colour.r, &pf_sensor_a_colour.g, &pf_sensor_a_colour.b);
 80016ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80016f0:	490e      	ldr	r1, [pc, #56]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80016f2:	480f      	ldr	r0, [pc, #60]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80016f4:	f000 fc7c 	bl	8001ff0 <getRGB>

    // Select channel for sensor B, then read RGB values
    selectTCAChannel(1);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f000 fb25 	bl	8001d48 <selectTCAChannel>
    getRGB(&pf_sensor_b_colour.r, &pf_sensor_b_colour.g, &pf_sensor_b_colour.b);
 80016fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001734 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001700:	490d      	ldr	r1, [pc, #52]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001702:	480e      	ldr	r0, [pc, #56]	@ (800173c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001704:	f000 fc74 	bl	8001ff0 <getRGB>

    // Select channel for sensor C, then read RGB values
    selectTCAChannel(2);
 8001708:	2002      	movs	r0, #2
 800170a:	f000 fb1d 	bl	8001d48 <selectTCAChannel>
    getRGB(&pf_sensor_c_colour.r, &pf_sensor_c_colour.g, &pf_sensor_c_colour.b);
 800170e:	4a0c      	ldr	r2, [pc, #48]	@ (8001740 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001710:	490c      	ldr	r1, [pc, #48]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001712:	480d      	ldr	r0, [pc, #52]	@ (8001748 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001714:	f000 fc6c 	bl	8001ff0 <getRGB>
  }
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40014800 	.word	0x40014800
 8001724:	40020800 	.word	0x40020800
 8001728:	200004b2 	.word	0x200004b2
 800172c:	200004b1 	.word	0x200004b1
 8001730:	200004b0 	.word	0x200004b0
 8001734:	200004b6 	.word	0x200004b6
 8001738:	200004b5 	.word	0x200004b5
 800173c:	200004b4 	.word	0x200004b4
 8001740:	200004ba 	.word	0x200004ba
 8001744:	200004b9 	.word	0x200004b9
 8001748:	200004b8 	.word	0x200004b8

0800174c <printColour>:

uint32_t count_sensor = 0;
void printColour(pf_colour_t *colour) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af02      	add	r7, sp, #8
 8001752:	6078      	str	r0, [r7, #4]
    my_printf("RGB Values from %d: R = %d, G = %d, B = %d\r\n", (count_sensor%3), colour->r, colour->g, colour->b);
 8001754:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <printColour+0x48>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <printColour+0x4c>)
 800175a:	fba3 1302 	umull	r1, r3, r3, r2
 800175e:	0859      	lsrs	r1, r3, #1
 8001760:	460b      	mov	r3, r1
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	440b      	add	r3, r1
 8001766:	1ad1      	subs	r1, r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	785b      	ldrb	r3, [r3, #1]
 8001772:	4618      	mov	r0, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	789b      	ldrb	r3, [r3, #2]
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	4603      	mov	r3, r0
 800177c:	4807      	ldr	r0, [pc, #28]	@ (800179c <printColour+0x50>)
 800177e:	f7ff ff7d 	bl	800167c <my_printf>
    count_sensor++;
 8001782:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <printColour+0x48>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	4a02      	ldr	r2, [pc, #8]	@ (8001794 <printColour+0x48>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200004bc 	.word	0x200004bc
 8001798:	aaaaaaab 	.word	0xaaaaaaab
 800179c:	0800eb4c 	.word	0x0800eb4c

080017a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <HAL_MspInit+0x4c>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	4a0f      	ldr	r2, [pc, #60]	@ (80017ec <HAL_MspInit+0x4c>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017b6:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <HAL_MspInit+0x4c>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <HAL_MspInit+0x4c>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	4a08      	ldr	r2, [pc, #32]	@ (80017ec <HAL_MspInit+0x4c>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_MspInit+0x4c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800

080017f0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	@ 0x30
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a3b      	ldr	r2, [pc, #236]	@ (80018fc <HAL_I2C_MspInit+0x10c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d12d      	bne.n	800186e <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
 8001816:	4b3a      	ldr	r3, [pc, #232]	@ (8001900 <HAL_I2C_MspInit+0x110>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a39      	ldr	r2, [pc, #228]	@ (8001900 <HAL_I2C_MspInit+0x110>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b37      	ldr	r3, [pc, #220]	@ (8001900 <HAL_I2C_MspInit+0x110>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	61bb      	str	r3, [r7, #24]
 800182c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800182e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001834:	2312      	movs	r3, #18
 8001836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001840:	2304      	movs	r3, #4
 8001842:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	4619      	mov	r1, r3
 800184a:	482e      	ldr	r0, [pc, #184]	@ (8001904 <HAL_I2C_MspInit+0x114>)
 800184c:	f002 f896 	bl	800397c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	4b2a      	ldr	r3, [pc, #168]	@ (8001900 <HAL_I2C_MspInit+0x110>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	4a29      	ldr	r2, [pc, #164]	@ (8001900 <HAL_I2C_MspInit+0x110>)
 800185a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800185e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001860:	4b27      	ldr	r3, [pc, #156]	@ (8001900 <HAL_I2C_MspInit+0x110>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800186c:	e041      	b.n	80018f2 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a25      	ldr	r2, [pc, #148]	@ (8001908 <HAL_I2C_MspInit+0x118>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d13c      	bne.n	80018f2 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	4b20      	ldr	r3, [pc, #128]	@ (8001900 <HAL_I2C_MspInit+0x110>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001880:	4a1f      	ldr	r2, [pc, #124]	@ (8001900 <HAL_I2C_MspInit+0x110>)
 8001882:	f043 0302 	orr.w	r3, r3, #2
 8001886:	6313      	str	r3, [r2, #48]	@ 0x30
 8001888:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <HAL_I2C_MspInit+0x110>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189a:	2312      	movs	r3, #18
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800189e:	2301      	movs	r3, #1
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018a6:	2304      	movs	r3, #4
 80018a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	4619      	mov	r1, r3
 80018b0:	4814      	ldr	r0, [pc, #80]	@ (8001904 <HAL_I2C_MspInit+0x114>)
 80018b2:	f002 f863 	bl	800397c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018b6:	2308      	movs	r3, #8
 80018b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ba:	2312      	movs	r3, #18
 80018bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018be:	2301      	movs	r3, #1
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80018c6:	2309      	movs	r3, #9
 80018c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4619      	mov	r1, r3
 80018d0:	480c      	ldr	r0, [pc, #48]	@ (8001904 <HAL_I2C_MspInit+0x114>)
 80018d2:	f002 f853 	bl	800397c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <HAL_I2C_MspInit+0x110>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	4a08      	ldr	r2, [pc, #32]	@ (8001900 <HAL_I2C_MspInit+0x110>)
 80018e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e6:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_I2C_MspInit+0x110>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
}
 80018f2:	bf00      	nop
 80018f4:	3730      	adds	r7, #48	@ 0x30
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40005400 	.word	0x40005400
 8001900:	40023800 	.word	0x40023800
 8001904:	40020400 	.word	0x40020400
 8001908:	40005800 	.word	0x40005800

0800190c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1c      	ldr	r2, [pc, #112]	@ (800198c <HAL_TIM_Base_MspInit+0x80>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d116      	bne.n	800194c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b1b      	ldr	r3, [pc, #108]	@ (8001990 <HAL_TIM_Base_MspInit+0x84>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001926:	4a1a      	ldr	r2, [pc, #104]	@ (8001990 <HAL_TIM_Base_MspInit+0x84>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6453      	str	r3, [r2, #68]	@ 0x44
 800192e:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <HAL_TIM_Base_MspInit+0x84>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	201a      	movs	r0, #26
 8001940:	f001 ffe5 	bl	800390e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001944:	201a      	movs	r0, #26
 8001946:	f001 fffe 	bl	8003946 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 800194a:	e01a      	b.n	8001982 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a10      	ldr	r2, [pc, #64]	@ (8001994 <HAL_TIM_Base_MspInit+0x88>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d115      	bne.n	8001982 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <HAL_TIM_Base_MspInit+0x84>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	4a0c      	ldr	r2, [pc, #48]	@ (8001990 <HAL_TIM_Base_MspInit+0x84>)
 8001960:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001964:	6453      	str	r3, [r2, #68]	@ 0x44
 8001966:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <HAL_TIM_Base_MspInit+0x84>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	201a      	movs	r0, #26
 8001978:	f001 ffc9 	bl	800390e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800197c:	201a      	movs	r0, #26
 800197e:	f001 ffe2 	bl	8003946 <HAL_NVIC_EnableIRQ>
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40010000 	.word	0x40010000
 8001990:	40023800 	.word	0x40023800
 8001994:	40014800 	.word	0x40014800

08001998 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	@ 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a32      	ldr	r2, [pc, #200]	@ (8001a80 <HAL_TIM_Encoder_MspInit+0xe8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d12c      	bne.n	8001a14 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	4b31      	ldr	r3, [pc, #196]	@ (8001a84 <HAL_TIM_Encoder_MspInit+0xec>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	4a30      	ldr	r2, [pc, #192]	@ (8001a84 <HAL_TIM_Encoder_MspInit+0xec>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001a84 <HAL_TIM_Encoder_MspInit+0xec>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	4b2a      	ldr	r3, [pc, #168]	@ (8001a84 <HAL_TIM_Encoder_MspInit+0xec>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a29      	ldr	r2, [pc, #164]	@ (8001a84 <HAL_TIM_Encoder_MspInit+0xec>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e6:	4b27      	ldr	r3, [pc, #156]	@ (8001a84 <HAL_TIM_Encoder_MspInit+0xec>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019f2:	23c0      	movs	r3, #192	@ 0xc0
 80019f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a02:	2302      	movs	r3, #2
 8001a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	481e      	ldr	r0, [pc, #120]	@ (8001a88 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001a0e:	f001 ffb5 	bl	800397c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001a12:	e030      	b.n	8001a76 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1c      	ldr	r2, [pc, #112]	@ (8001a8c <HAL_TIM_Encoder_MspInit+0xf4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d12b      	bne.n	8001a76 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <HAL_TIM_Encoder_MspInit+0xec>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	4a17      	ldr	r2, [pc, #92]	@ (8001a84 <HAL_TIM_Encoder_MspInit+0xec>)
 8001a28:	f043 0308 	orr.w	r3, r3, #8
 8001a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <HAL_TIM_Encoder_MspInit+0xec>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <HAL_TIM_Encoder_MspInit+0xec>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a10      	ldr	r2, [pc, #64]	@ (8001a84 <HAL_TIM_Encoder_MspInit+0xec>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <HAL_TIM_Encoder_MspInit+0xec>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a56:	2303      	movs	r3, #3
 8001a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a66:	2302      	movs	r3, #2
 8001a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4807      	ldr	r0, [pc, #28]	@ (8001a90 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001a72:	f001 ff83 	bl	800397c <HAL_GPIO_Init>
}
 8001a76:	bf00      	nop
 8001a78:	3730      	adds	r7, #48	@ 0x30
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40000800 	.word	0x40000800
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020400 	.word	0x40020400
 8001a8c:	40000c00 	.word	0x40000c00
 8001a90:	40020000 	.word	0x40020000

08001a94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a12      	ldr	r2, [pc, #72]	@ (8001afc <HAL_TIM_MspPostInit+0x68>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d11e      	bne.n	8001af4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <HAL_TIM_MspPostInit+0x6c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4a10      	ldr	r2, [pc, #64]	@ (8001b00 <HAL_TIM_MspPostInit+0x6c>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <HAL_TIM_MspPostInit+0x6c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ad2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ad6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	4619      	mov	r1, r3
 8001aee:	4805      	ldr	r0, [pc, #20]	@ (8001b04 <HAL_TIM_MspPostInit+0x70>)
 8001af0:	f001 ff44 	bl	800397c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001af4:	bf00      	nop
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40010000 	.word	0x40010000
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020000 	.word	0x40020000

08001b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <NMI_Handler+0x4>

08001b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <HardFault_Handler+0x4>

08001b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <MemManage_Handler+0x4>

08001b20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <BusFault_Handler+0x4>

08001b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <UsageFault_Handler+0x4>

08001b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5e:	f001 fdb7 	bl	80036d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b6c:	4803      	ldr	r0, [pc, #12]	@ (8001b7c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001b6e:	f005 fa3d 	bl	8006fec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001b72:	4803      	ldr	r0, [pc, #12]	@ (8001b80 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001b74:	f005 fa3a 	bl	8006fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000390 	.word	0x20000390
 8001b80:	20000468 	.word	0x20000468

08001b84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <OTG_FS_IRQHandler+0x10>)
 8001b8a:	f003 f9ed 	bl	8004f68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200019ac 	.word	0x200019ac

08001b98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return 1;
 8001b9c:	2301      	movs	r3, #1
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <_kill>:

int _kill(int pid, int sig)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bb2:	f00a ffd1 	bl	800cb58 <__errno>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2216      	movs	r2, #22
 8001bba:	601a      	str	r2, [r3, #0]
  return -1;
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <_exit>:

void _exit (int status)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ffe7 	bl	8001ba8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bda:	bf00      	nop
 8001bdc:	e7fd      	b.n	8001bda <_exit+0x12>

08001bde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e00a      	b.n	8001c06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bf0:	f3af 8000 	nop.w
 8001bf4:	4601      	mov	r1, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	60ba      	str	r2, [r7, #8]
 8001bfc:	b2ca      	uxtb	r2, r1
 8001bfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	3301      	adds	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	dbf0      	blt.n	8001bf0 <_read+0x12>
  }

  return len;
 8001c0e:	687b      	ldr	r3, [r7, #4]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	e009      	b.n	8001c3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	60ba      	str	r2, [r7, #8]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	dbf1      	blt.n	8001c2a <_write+0x12>
  }
  return len;
 8001c46:	687b      	ldr	r3, [r7, #4]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <_close>:

int _close(int file)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c78:	605a      	str	r2, [r3, #4]
  return 0;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <_isatty>:

int _isatty(int file)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c90:	2301      	movs	r3, #1
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc0:	4a14      	ldr	r2, [pc, #80]	@ (8001d14 <_sbrk+0x5c>)
 8001cc2:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <_sbrk+0x60>)
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ccc:	4b13      	ldr	r3, [pc, #76]	@ (8001d1c <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <_sbrk+0x64>)
 8001cd6:	4a12      	ldr	r2, [pc, #72]	@ (8001d20 <_sbrk+0x68>)
 8001cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cda:	4b10      	ldr	r3, [pc, #64]	@ (8001d1c <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d207      	bcs.n	8001cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce8:	f00a ff36 	bl	800cb58 <__errno>
 8001cec:	4603      	mov	r3, r0
 8001cee:	220c      	movs	r2, #12
 8001cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cf6:	e009      	b.n	8001d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf8:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	4a05      	ldr	r2, [pc, #20]	@ (8001d1c <_sbrk+0x64>)
 8001d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20020000 	.word	0x20020000
 8001d18:	00000400 	.word	0x00000400
 8001d1c:	200004c0 	.word	0x200004c0
 8001d20:	20002200 	.word	0x20002200

08001d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <SystemInit+0x20>)
 8001d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d2e:	4a05      	ldr	r2, [pc, #20]	@ (8001d44 <SystemInit+0x20>)
 8001d30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <selectTCAChannel>:
 */
#include "stm32f4xx_hal.h"
#include "main.h"
#include "tca9548.h"

void selectTCAChannel(uint8_t channel) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = (1 << channel);  // Enable only the selected channel
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	2201      	movs	r2, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, 0x77 << 1, &cmd, 1, HAL_MAX_DELAY);
 8001d5e:	f107 020f 	add.w	r2, r7, #15
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2301      	movs	r3, #1
 8001d6a:	21ee      	movs	r1, #238	@ 0xee
 8001d6c:	4803      	ldr	r0, [pc, #12]	@ (8001d7c <selectTCAChannel+0x34>)
 8001d6e:	f002 f901 	bl	8003f74 <HAL_I2C_Master_Transmit>
}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200002e8 	.word	0x200002e8

08001d80 <my_printf>:
{
 8001d80:	b40f      	push	{r0, r1, r2, r3}
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b0a2      	sub	sp, #136	@ 0x88
 8001d86:	af00      	add	r7, sp, #0
    va_start(args, format);
 8001d88:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001d8c:	603b      	str	r3, [r7, #0]
    int usbTxLength = vsnprintf(tx_buffer, BUFFER_LEN, format, args);
 8001d8e:	1d38      	adds	r0, r7, #4
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001d96:	2180      	movs	r1, #128	@ 0x80
 8001d98:	f00a fdea 	bl	800c970 <vsniprintf>
 8001d9c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (usbTxLength > 0 && usbTxLength < BUFFER_LEN)
 8001da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	dd0b      	ble.n	8001dc0 <my_printf+0x40>
 8001da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001dac:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dae:	dc07      	bgt.n	8001dc0 <my_printf+0x40>
        CDC_Transmit_FS((uint8_t *)tx_buffer, usbTxLength);
 8001db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f009 fb8c 	bl	800b4d8 <CDC_Transmit_FS>
}
 8001dc0:	bf00      	nop
 8001dc2:	3788      	adds	r7, #136	@ 0x88
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dca:	b004      	add	sp, #16
 8001dcc:	4770      	bx	lr
	...

08001dd0 <tcs34725_write8>:
/**************************************************************************/
/*!
    @brief  Writes a register and an 8 bit value over I2C
*/
/**************************************************************************/
void tcs34725_write8(uint8_t reg, uint8_t value) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	460a      	mov	r2, r1
 8001dda:	71fb      	strb	r3, [r7, #7]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	71bb      	strb	r3, [r7, #6]
    Wire.send(TCS34725_COMMAND_BIT | reg);
    Wire.send(value & 0xFF);
    #endif
    Wire.endTransmission();
    */
    uint8_t buffer[2] = {TCS34725_COMMAND_BIT | reg, value};
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	733b      	strb	r3, [r7, #12]
 8001dea:	79bb      	ldrb	r3, [r7, #6]
 8001dec:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8001dee:	f107 020c 	add.w	r2, r7, #12
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2302      	movs	r3, #2
 8001dfa:	2152      	movs	r1, #82	@ 0x52
 8001dfc:	4803      	ldr	r0, [pc, #12]	@ (8001e0c <tcs34725_write8+0x3c>)
 8001dfe:	f002 f8b9 	bl	8003f74 <HAL_I2C_Master_Transmit>
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200002e8 	.word	0x200002e8

08001e10 <read8>:
/**************************************************************************/
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
uint8_t read8(uint8_t reg) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
    return Wire.read();
    #else
    return Wire.receive();
    #endif
    */
    uint8_t cmd = TCS34725_COMMAND_BIT | reg;
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	73fb      	strb	r3, [r7, #15]
    uint8_t value = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 8001e28:	f107 020f 	add.w	r2, r7, #15
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2301      	movs	r3, #1
 8001e34:	2152      	movs	r1, #82	@ 0x52
 8001e36:	4809      	ldr	r0, [pc, #36]	@ (8001e5c <read8+0x4c>)
 8001e38:	f002 f89c 	bl	8003f74 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, &value, 1, HAL_MAX_DELAY);
 8001e3c:	f107 020e 	add.w	r2, r7, #14
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2301      	movs	r3, #1
 8001e48:	2152      	movs	r1, #82	@ 0x52
 8001e4a:	4804      	ldr	r0, [pc, #16]	@ (8001e5c <read8+0x4c>)
 8001e4c:	f002 f990 	bl	8004170 <HAL_I2C_Master_Receive>
    return value;
 8001e50:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200002e8 	.word	0x200002e8

08001e60 <read16>:
/**************************************************************************/
/*!
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
uint16_t read16(uint8_t reg) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
    #endif
    x <<= 8;
    x |= t;
    return x;
    */
	uint8_t cmd = TCS34725_COMMAND_BIT | reg;
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[2];
	HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 8001e74:	f107 020f 	add.w	r2, r7, #15
 8001e78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2301      	movs	r3, #1
 8001e80:	2152      	movs	r1, #82	@ 0x52
 8001e82:	480b      	ldr	r0, [pc, #44]	@ (8001eb0 <read16+0x50>)
 8001e84:	f002 f876 	bl	8003f74 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8001e88:	f107 020c 	add.w	r2, r7, #12
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2302      	movs	r3, #2
 8001e94:	2152      	movs	r1, #82	@ 0x52
 8001e96:	4806      	ldr	r0, [pc, #24]	@ (8001eb0 <read16+0x50>)
 8001e98:	f002 f96a 	bl	8004170 <HAL_I2C_Master_Receive>
	return (uint16_t)(buffer[1] << 8) | buffer[0];
 8001e9c:	7b7b      	ldrb	r3, [r7, #13]
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	7b3a      	ldrb	r2, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	b29b      	uxth	r3, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	200002e8 	.word	0x200002e8

08001eb4 <enable>:
/**************************************************************************/
/*!
    Enables the device
*/
/**************************************************************************/
void enable(void) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
    tcs34725_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 8001eb8:	2101      	movs	r1, #1
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff ff88 	bl	8001dd0 <tcs34725_write8>
    HAL_Delay(3);
 8001ec0:	2003      	movs	r0, #3
 8001ec2:	f001 fc25 	bl	8003710 <HAL_Delay>
    tcs34725_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 8001ec6:	2103      	movs	r1, #3
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7ff ff81 	bl	8001dd0 <tcs34725_write8>
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <tcs32725_begin>:
    doing anything else)
*/
/**************************************************************************/


bool tcs32725_begin(TCS34725_t *sensor, tcs34725IntegrationTime_t it, tcs34725Gain_t gain) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	70fb      	strb	r3, [r7, #3]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	70bb      	strb	r3, [r7, #2]
    //Wire.begin();

    /* Make sure we're actually connected */
    uint8_t x = read8(TCS34725_ID);
 8001ee4:	2012      	movs	r0, #18
 8001ee6:	f7ff ff93 	bl	8001e10 <read8>
 8001eea:	4603      	mov	r3, r0
 8001eec:	73fb      	strb	r3, [r7, #15]
    my_printf("device id: %d", x);
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	480d      	ldr	r0, [pc, #52]	@ (8001f28 <tcs32725_begin+0x54>)
 8001ef4:	f7ff ff44 	bl	8001d80 <my_printf>
    if (x != 0x4D) {
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	2b4d      	cmp	r3, #77	@ 0x4d
 8001efc:	d001      	beq.n	8001f02 <tcs32725_begin+0x2e>
        return false;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e00d      	b.n	8001f1e <tcs32725_begin+0x4a>
    }
    _tcs34725Initialised = true;
 8001f02:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <tcs32725_begin+0x58>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]

    /* Set default integration time and gain */
    setIntegrationTime(it);
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f810 	bl	8001f30 <setIntegrationTime>
    setGain(gain);
 8001f10:	78bb      	ldrb	r3, [r7, #2]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f82e 	bl	8001f74 <setGain>

    /* Note: by default, the device is in power down mode on bootup */
    enable();
 8001f18:	f7ff ffcc 	bl	8001eb4 <enable>

    return true;
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	0800eb7c 	.word	0x0800eb7c
 8001f2c:	200004c4 	.word	0x200004c4

08001f30 <setIntegrationTime>:
/**************************************************************************/
/*!
    Sets the integration time for the TC34725
*/
/**************************************************************************/
void setIntegrationTime(tcs34725IntegrationTime_t it) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
    if (!_tcs34725Initialised) {
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <setIntegrationTime+0x38>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	f083 0301 	eor.w	r3, r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <setIntegrationTime+0x1e>
        //begin();
    	my_printf("set integration time go wrong\r\n");
 8001f48:	4808      	ldr	r0, [pc, #32]	@ (8001f6c <setIntegrationTime+0x3c>)
 8001f4a:	f7ff ff19 	bl	8001d80 <my_printf>
    }

    /* Update the timing register */
    tcs34725_write8(TCS34725_ATIME, it);
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	4619      	mov	r1, r3
 8001f52:	2001      	movs	r0, #1
 8001f54:	f7ff ff3c 	bl	8001dd0 <tcs34725_write8>

    /* Update value placeholder */
    _tcs34725IntegrationTime = it;
 8001f58:	4a05      	ldr	r2, [pc, #20]	@ (8001f70 <setIntegrationTime+0x40>)
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	7013      	strb	r3, [r2, #0]
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200004c4 	.word	0x200004c4
 8001f6c:	0800eb8c 	.word	0x0800eb8c
 8001f70:	200004c6 	.word	0x200004c6

08001f74 <setGain>:
/**************************************************************************/
/*!
    Adjusts the gain on the TCS34725 (adjusts the sensitivity to light)
*/
/**************************************************************************/
void setGain(tcs34725Gain_t gain) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
        begin();
    }
    */

    /* Update the timing register */
    tcs34725_write8(TCS34725_CONTROL, gain);
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	4619      	mov	r1, r3
 8001f82:	200f      	movs	r0, #15
 8001f84:	f7ff ff24 	bl	8001dd0 <tcs34725_write8>

    /* Update value placeholders */
    _tcs34725Gain = gain;
 8001f88:	4a03      	ldr	r2, [pc, #12]	@ (8001f98 <setGain+0x24>)
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	7013      	strb	r3, [r2, #0]
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200004c5 	.word	0x200004c5

08001f9c <getRawData>:
/**************************************************************************/
/*!
    @brief  Reads the raw red, green, blue and clear channel values
*/
/**************************************************************************/
void getRawData(uint16_t* r, uint16_t* g, uint16_t* b, uint16_t* c) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
	/*
    if (!_tcs34725Initialised) {
        begin();
    }
	*/
    *c = read16(TCS34725_CDATAL);
 8001faa:	2014      	movs	r0, #20
 8001fac:	f7ff ff58 	bl	8001e60 <read16>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	801a      	strh	r2, [r3, #0]
    *r = read16(TCS34725_RDATAL);
 8001fb8:	2016      	movs	r0, #22
 8001fba:	f7ff ff51 	bl	8001e60 <read16>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	801a      	strh	r2, [r3, #0]
    *g = read16(TCS34725_GDATAL);
 8001fc6:	2018      	movs	r0, #24
 8001fc8:	f7ff ff4a 	bl	8001e60 <read16>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	801a      	strh	r2, [r3, #0]
    *b = read16(TCS34725_BDATAL);
 8001fd4:	201a      	movs	r0, #26
 8001fd6:	f7ff ff43 	bl	8001e60 <read16>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	461a      	mov	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	801a      	strh	r2, [r3, #0]
//        	HAL_Delay(154);
//            break;
//        case TCS34725_INTEGRATIONTIME_700MS:
//        	HAL_Delay(700);
//            break;
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	0000      	movs	r0, r0
 8001fec:	0000      	movs	r0, r0
	...

08001ff0 <getRGB>:

void getRGB(uint8_t *r, uint8_t *g, uint8_t *b) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint16_t red, green, blue, clear;
  getRawData(&red, &green, &blue, &clear);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	f107 0216 	add.w	r2, r7, #22
 8002004:	f107 0118 	add.w	r1, r7, #24
 8002008:	f107 001a 	add.w	r0, r7, #26
 800200c:	f7ff ffc6 	bl	8001f9c <getRawData>
  uint32_t sum = clear;
 8002010:	8abb      	ldrh	r3, [r7, #20]
 8002012:	61fb      	str	r3, [r7, #28]

  // Avoid divide by zero errors ... if clear = 0 return black
  if (clear == 0) {
 8002014:	8abb      	ldrh	r3, [r7, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10b      	bne.n	8002032 <getRGB+0x42>
    *r = *g = *b = 0;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	781a      	ldrb	r2, [r3, #0]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	701a      	strb	r2, [r3, #0]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	781a      	ldrb	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e05c      	b.n	80020ec <getRGB+0xfc>
    return;
  }

  // Scale the RGB values based on the clear channel and convert to uint8_t (0-255)
  *r = (uint8_t)((float)red / sum * 255.0);
 8002032:	8b7b      	ldrh	r3, [r7, #26]
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002046:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800204a:	ee16 0a90 	vmov	r0, s13
 800204e:	f7fe fa83 	bl	8000558 <__aeabi_f2d>
 8002052:	a329      	add	r3, pc, #164	@ (adr r3, 80020f8 <getRGB+0x108>)
 8002054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002058:	f7fe fad6 	bl	8000608 <__aeabi_dmul>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	f7fe fda8 	bl	8000bb8 <__aeabi_d2uiz>
 8002068:	4603      	mov	r3, r0
 800206a:	b2da      	uxtb	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	701a      	strb	r2, [r3, #0]
  *g = (uint8_t)((float)green / sum * 255.0);
 8002070:	8b3b      	ldrh	r3, [r7, #24]
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	ee07 3a90 	vmov	s15, r3
 8002080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002084:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002088:	ee16 0a90 	vmov	r0, s13
 800208c:	f7fe fa64 	bl	8000558 <__aeabi_f2d>
 8002090:	a319      	add	r3, pc, #100	@ (adr r3, 80020f8 <getRGB+0x108>)
 8002092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002096:	f7fe fab7 	bl	8000608 <__aeabi_dmul>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4610      	mov	r0, r2
 80020a0:	4619      	mov	r1, r3
 80020a2:	f7fe fd89 	bl	8000bb8 <__aeabi_d2uiz>
 80020a6:	4603      	mov	r3, r0
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	701a      	strb	r2, [r3, #0]
  *b = (uint8_t)((float)blue / sum * 255.0);
 80020ae:	8afb      	ldrh	r3, [r7, #22]
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	ee07 3a90 	vmov	s15, r3
 80020be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020c6:	ee16 0a90 	vmov	r0, s13
 80020ca:	f7fe fa45 	bl	8000558 <__aeabi_f2d>
 80020ce:	a30a      	add	r3, pc, #40	@ (adr r3, 80020f8 <getRGB+0x108>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	f7fe fa98 	bl	8000608 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f7fe fd6a 	bl	8000bb8 <__aeabi_d2uiz>
 80020e4:	4603      	mov	r3, r0
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	701a      	strb	r2, [r3, #0]
}
 80020ec:	3720      	adds	r7, #32
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	f3af 8000 	nop.w
 80020f8:	00000000 	.word	0x00000000
 80020fc:	406fe000 	.word	0x406fe000

08002100 <my_printf>:
{
 8002100:	b40f      	push	{r0, r1, r2, r3}
 8002102:	b580      	push	{r7, lr}
 8002104:	b0a2      	sub	sp, #136	@ 0x88
 8002106:	af00      	add	r7, sp, #0
    va_start(args, format);
 8002108:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800210c:	603b      	str	r3, [r7, #0]
    int usbTxLength = vsnprintf(tx_buffer, BUFFER_LEN, format, args);
 800210e:	1d38      	adds	r0, r7, #4
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	f00a fc2a 	bl	800c970 <vsniprintf>
 800211c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (usbTxLength > 0 && usbTxLength < BUFFER_LEN)
 8002120:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002124:	2b00      	cmp	r3, #0
 8002126:	dd0b      	ble.n	8002140 <my_printf+0x40>
 8002128:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800212c:	2b7f      	cmp	r3, #127	@ 0x7f
 800212e:	dc07      	bgt.n	8002140 <my_printf+0x40>
        CDC_Transmit_FS((uint8_t *)tx_buffer, usbTxLength);
 8002130:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002134:	b29a      	uxth	r2, r3
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f009 f9cc 	bl	800b4d8 <CDC_Transmit_FS>
}
 8002140:	bf00      	nop
 8002142:	3788      	adds	r7, #136	@ 0x88
 8002144:	46bd      	mov	sp, r7
 8002146:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800214a:	b004      	add	sp, #16
 800214c:	4770      	bx	lr
	...

08002150 <i2c_read_addr8_data8>:
 * moved from i2c.h, these are all i2c function needed
 **/

extern I2C_HandleTypeDef hi2c1;

bool i2c_read_addr8_data8(uint8_t addr, uint8_t *data) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af02      	add	r7, sp, #8
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 800215c:	1dfa      	adds	r2, r7, #7
 800215e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2301      	movs	r3, #1
 8002166:	2152      	movs	r1, #82	@ 0x52
 8002168:	4812      	ldr	r0, [pc, #72]	@ (80021b4 <i2c_read_addr8_data8+0x64>)
 800216a:	f001 ff03 	bl	8003f74 <HAL_I2C_Master_Transmit>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d006      	beq.n	8002182 <i2c_read_addr8_data8+0x32>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_data8 (register 0x%X)\r\n", addr);
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	4619      	mov	r1, r3
 8002178:	480f      	ldr	r0, [pc, #60]	@ (80021b8 <i2c_read_addr8_data8+0x68>)
 800217a:	f7ff ffc1 	bl	8002100 <my_printf>
        return false;
 800217e:	2300      	movs	r3, #0
 8002180:	e013      	b.n	80021aa <i2c_read_addr8_data8+0x5a>
    }
    if (HAL_I2C_Master_Receive(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002182:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	2301      	movs	r3, #1
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	2152      	movs	r1, #82	@ 0x52
 800218e:	4809      	ldr	r0, [pc, #36]	@ (80021b4 <i2c_read_addr8_data8+0x64>)
 8002190:	f001 ffee 	bl	8004170 <HAL_I2C_Master_Receive>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <i2c_read_addr8_data8+0x58>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_data8 (register 0x%X)\r\n", addr);
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	4619      	mov	r1, r3
 800219e:	4807      	ldr	r0, [pc, #28]	@ (80021bc <i2c_read_addr8_data8+0x6c>)
 80021a0:	f7ff ffae 	bl	8002100 <my_printf>
        return false;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e000      	b.n	80021aa <i2c_read_addr8_data8+0x5a>
    }
    return true;
 80021a8:	2301      	movs	r3, #1
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200002e8 	.word	0x200002e8
 80021b8:	0800ebac 	.word	0x0800ebac
 80021bc:	0800ebf0 	.word	0x0800ebf0

080021c0 <i2c_write_addr8_data8>:
    }
    *data = (buf[0] << 8) | buf[1];
    return true;
}

bool i2c_write_addr8_data8(uint8_t addr, uint8_t data) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	4603      	mov	r3, r0
 80021c8:	460a      	mov	r2, r1
 80021ca:	71fb      	strb	r3, [r7, #7]
 80021cc:	4613      	mov	r3, r2
 80021ce:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {addr, data};
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	733b      	strb	r3, [r7, #12]
 80021d4:	79bb      	ldrb	r3, [r7, #6]
 80021d6:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, buf, 2, HAL_MAX_DELAY) != HAL_OK) {
 80021d8:	f107 020c 	add.w	r2, r7, #12
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2302      	movs	r3, #2
 80021e4:	2152      	movs	r1, #82	@ 0x52
 80021e6:	4809      	ldr	r0, [pc, #36]	@ (800220c <i2c_write_addr8_data8+0x4c>)
 80021e8:	f001 fec4 	bl	8003f74 <HAL_I2C_Master_Transmit>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <i2c_write_addr8_data8+0x42>
        my_printf("[I2C] ERROR: Write failed i2c_write_addr8_data8 (register 0x%X) on device 0x%X\r\n", addr, VL53L0X_DEFAULT_ADDRESS);
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	2229      	movs	r2, #41	@ 0x29
 80021f6:	4619      	mov	r1, r3
 80021f8:	4805      	ldr	r0, [pc, #20]	@ (8002210 <i2c_write_addr8_data8+0x50>)
 80021fa:	f7ff ff81 	bl	8002100 <my_printf>
        return false;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <i2c_write_addr8_data8+0x44>
    }
    return true;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	200002e8 	.word	0x200002e8
 8002210:	0800ecc0 	.word	0x0800ecc0

08002214 <i2c_read_addr8_data32>:

bool i2c_read_addr8_data32(uint8_t addr, uint32_t *data) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af02      	add	r7, sp, #8
 800221a:	4603      	mov	r3, r0
 800221c:	6039      	str	r1, [r7, #0]
 800221e:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002220:	1dfa      	adds	r2, r7, #7
 8002222:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2301      	movs	r3, #1
 800222a:	2152      	movs	r1, #82	@ 0x52
 800222c:	4819      	ldr	r0, [pc, #100]	@ (8002294 <i2c_read_addr8_data32+0x80>)
 800222e:	f001 fea1 	bl	8003f74 <HAL_I2C_Master_Transmit>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d006      	beq.n	8002246 <i2c_read_addr8_data32+0x32>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_data32 (register 0x%X)\r\n", addr);
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	4619      	mov	r1, r3
 800223c:	4816      	ldr	r0, [pc, #88]	@ (8002298 <i2c_read_addr8_data32+0x84>)
 800223e:	f7ff ff5f 	bl	8002100 <my_printf>
        return false;
 8002242:	2300      	movs	r3, #0
 8002244:	e021      	b.n	800228a <i2c_read_addr8_data32+0x76>
    }
    uint8_t buf[4];
    if (HAL_I2C_Master_Receive(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, buf, 4, HAL_MAX_DELAY) != HAL_OK) {
 8002246:	f107 020c 	add.w	r2, r7, #12
 800224a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2304      	movs	r3, #4
 8002252:	2152      	movs	r1, #82	@ 0x52
 8002254:	480f      	ldr	r0, [pc, #60]	@ (8002294 <i2c_read_addr8_data32+0x80>)
 8002256:	f001 ff8b 	bl	8004170 <HAL_I2C_Master_Receive>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d006      	beq.n	800226e <i2c_read_addr8_data32+0x5a>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_data32 (register 0x%X)\r\n", addr);
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	4619      	mov	r1, r3
 8002264:	480d      	ldr	r0, [pc, #52]	@ (800229c <i2c_read_addr8_data32+0x88>)
 8002266:	f7ff ff4b 	bl	8002100 <my_printf>
        return false;
 800226a:	2300      	movs	r3, #0
 800226c:	e00d      	b.n	800228a <i2c_read_addr8_data32+0x76>
    }
    *data = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 800226e:	7b3b      	ldrb	r3, [r7, #12]
 8002270:	061a      	lsls	r2, r3, #24
 8002272:	7b7b      	ldrb	r3, [r7, #13]
 8002274:	041b      	lsls	r3, r3, #16
 8002276:	431a      	orrs	r2, r3
 8002278:	7bbb      	ldrb	r3, [r7, #14]
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	4313      	orrs	r3, r2
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	4313      	orrs	r3, r2
 8002282:	461a      	mov	r2, r3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	601a      	str	r2, [r3, #0]
    return true;
 8002288:	2301      	movs	r3, #1
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200002e8 	.word	0x200002e8
 8002298:	0800ed14 	.word	0x0800ed14
 800229c:	0800ed5c 	.word	0x0800ed5c

080022a0 <i2c_write_addr8_bytes>:

bool i2c_write_addr8_bytes(uint8_t addr, const uint8_t *data, uint8_t length) {
 80022a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022a4:	b087      	sub	sp, #28
 80022a6:	af02      	add	r7, sp, #8
 80022a8:	4603      	mov	r3, r0
 80022aa:	6039      	str	r1, [r7, #0]
 80022ac:	71fb      	strb	r3, [r7, #7]
 80022ae:	4613      	mov	r3, r2
 80022b0:	71bb      	strb	r3, [r7, #6]
 80022b2:	466b      	mov	r3, sp
 80022b4:	461e      	mov	r6, r3
    uint8_t buf[1 + length];
 80022b6:	79bb      	ldrb	r3, [r7, #6]
 80022b8:	1c59      	adds	r1, r3, #1
 80022ba:	1e4b      	subs	r3, r1, #1
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	460a      	mov	r2, r1
 80022c0:	2300      	movs	r3, #0
 80022c2:	4690      	mov	r8, r2
 80022c4:	4699      	mov	r9, r3
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022da:	460a      	mov	r2, r1
 80022dc:	2300      	movs	r3, #0
 80022de:	4614      	mov	r4, r2
 80022e0:	461d      	mov	r5, r3
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	00eb      	lsls	r3, r5, #3
 80022ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022f0:	00e2      	lsls	r2, r4, #3
 80022f2:	460b      	mov	r3, r1
 80022f4:	3307      	adds	r3, #7
 80022f6:	08db      	lsrs	r3, r3, #3
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	ebad 0d03 	sub.w	sp, sp, r3
 80022fe:	ab02      	add	r3, sp, #8
 8002300:	3300      	adds	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
    buf[0] = addr;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	79fa      	ldrb	r2, [r7, #7]
 8002308:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[1], data, length);
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	3301      	adds	r3, #1
 800230e:	79ba      	ldrb	r2, [r7, #6]
 8002310:	6839      	ldr	r1, [r7, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f00a fc4d 	bl	800cbb2 <memcpy>

    if (HAL_I2C_Master_Transmit(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, buf, length + 1, HAL_MAX_DELAY) != HAL_OK) {
 8002318:	79bb      	ldrb	r3, [r7, #6]
 800231a:	b29b      	uxth	r3, r3
 800231c:	3301      	adds	r3, #1
 800231e:	b29b      	uxth	r3, r3
 8002320:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002324:	9200      	str	r2, [sp, #0]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	2152      	movs	r1, #82	@ 0x52
 800232a:	480a      	ldr	r0, [pc, #40]	@ (8002354 <i2c_write_addr8_bytes+0xb4>)
 800232c:	f001 fe22 	bl	8003f74 <HAL_I2C_Master_Transmit>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d006      	beq.n	8002344 <i2c_write_addr8_bytes+0xa4>
        my_printf("[I2C] ERROR: Write failed i2c_write_addr8_bytes (register 0x%X)\r\n", addr);
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	4619      	mov	r1, r3
 800233a:	4807      	ldr	r0, [pc, #28]	@ (8002358 <i2c_write_addr8_bytes+0xb8>)
 800233c:	f7ff fee0 	bl	8002100 <my_printf>
        return false;
 8002340:	2300      	movs	r3, #0
 8002342:	e000      	b.n	8002346 <i2c_write_addr8_bytes+0xa6>
    }
    return true;
 8002344:	2301      	movs	r3, #1
 8002346:	46b5      	mov	sp, r6
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002352:	bf00      	nop
 8002354:	200002e8 	.word	0x200002e8
 8002358:	0800eda0 	.word	0x0800eda0

0800235c <i2c_read_addr8_bytes>:

bool i2c_read_addr8_bytes(uint8_t addr, uint8_t *data, uint8_t length) {
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af02      	add	r7, sp, #8
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
 8002368:	4613      	mov	r3, r2
 800236a:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Master_Transmit(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 800236c:	1dfa      	adds	r2, r7, #7
 800236e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2301      	movs	r3, #1
 8002376:	2152      	movs	r1, #82	@ 0x52
 8002378:	4812      	ldr	r0, [pc, #72]	@ (80023c4 <i2c_read_addr8_bytes+0x68>)
 800237a:	f001 fdfb 	bl	8003f74 <HAL_I2C_Master_Transmit>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d006      	beq.n	8002392 <i2c_read_addr8_bytes+0x36>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_bytes (register 0x%X)\r\n", addr);
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	4619      	mov	r1, r3
 8002388:	480f      	ldr	r0, [pc, #60]	@ (80023c8 <i2c_read_addr8_bytes+0x6c>)
 800238a:	f7ff feb9 	bl	8002100 <my_printf>
        return false;
 800238e:	2300      	movs	r3, #0
 8002390:	e014      	b.n	80023bc <i2c_read_addr8_bytes+0x60>
    }
    if (HAL_I2C_Master_Receive(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, data, length, HAL_MAX_DELAY) != HAL_OK) {
 8002392:	79bb      	ldrb	r3, [r7, #6]
 8002394:	b29b      	uxth	r3, r3
 8002396:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800239a:	9200      	str	r2, [sp, #0]
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	2152      	movs	r1, #82	@ 0x52
 80023a0:	4808      	ldr	r0, [pc, #32]	@ (80023c4 <i2c_read_addr8_bytes+0x68>)
 80023a2:	f001 fee5 	bl	8004170 <HAL_I2C_Master_Receive>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <i2c_read_addr8_bytes+0x5e>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_bytes (register 0x%X)\r\n", addr);
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	4619      	mov	r1, r3
 80023b0:	4806      	ldr	r0, [pc, #24]	@ (80023cc <i2c_read_addr8_bytes+0x70>)
 80023b2:	f7ff fea5 	bl	8002100 <my_printf>
        return false;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <i2c_read_addr8_bytes+0x60>
    }
    return true;
 80023ba:	2301      	movs	r3, #1
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200002e8 	.word	0x200002e8
 80023c8:	0800ede4 	.word	0x0800ede4
 80023cc:	0800ee28 	.word	0x0800ee28

080023d0 <device_is_booted>:
/**
 * We can read the model id to confirm that the device is booted.
 * (There is no fresh_out_of_reset as on the vl6180x)
 */
static bool device_is_booted()
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
    printf("check device is booted\r\n");
 80023d6:	4813      	ldr	r0, [pc, #76]	@ (8002424 <device_is_booted+0x54>)
 80023d8:	f00a fa50 	bl	800c87c <puts>
    uint8_t device_id = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	71fb      	strb	r3, [r7, #7]
    if (!i2c_read_addr8_data8(REG_IDENTIFICATION_MODEL_ID, &device_id)) {
 80023e0:	1dfb      	adds	r3, r7, #7
 80023e2:	4619      	mov	r1, r3
 80023e4:	20c0      	movs	r0, #192	@ 0xc0
 80023e6:	f7ff feb3 	bl	8002150 <i2c_read_addr8_data8>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f083 0301 	eor.w	r3, r3, #1
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d006      	beq.n	8002404 <device_is_booted+0x34>
        printf("current device id: %d", device_id);
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	4619      	mov	r1, r3
 80023fa:	480b      	ldr	r0, [pc, #44]	@ (8002428 <device_is_booted+0x58>)
 80023fc:	f00a f9d6 	bl	800c7ac <iprintf>
        return false;
 8002400:	2300      	movs	r3, #0
 8002402:	e00a      	b.n	800241a <device_is_booted+0x4a>
    } else {
        printf("device id: %d", device_id);
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	4619      	mov	r1, r3
 8002408:	4808      	ldr	r0, [pc, #32]	@ (800242c <device_is_booted+0x5c>)
 800240a:	f00a f9cf 	bl	800c7ac <iprintf>
    }
    return device_id == VL53L0X_EXPECTED_DEVICE_ID;
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	2bee      	cmp	r3, #238	@ 0xee
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	0800ee6c 	.word	0x0800ee6c
 8002428:	0800ee84 	.word	0x0800ee84
 800242c:	0800ee9c 	.word	0x0800ee9c

08002430 <data_init>:

/**
 * One time device initialization
 */
static bool data_init()
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
    bool success = false;
 8002436:	2300      	movs	r3, #0
 8002438:	71fb      	strb	r3, [r7, #7]

    /* Set 2v8 mode */
    uint8_t vhv_config_scl_sda = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	71bb      	strb	r3, [r7, #6]
    if (!i2c_read_addr8_data8(REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, &vhv_config_scl_sda)) {
 800243e:	1dbb      	adds	r3, r7, #6
 8002440:	4619      	mov	r1, r3
 8002442:	2089      	movs	r0, #137	@ 0x89
 8002444:	f7ff fe84 	bl	8002150 <i2c_read_addr8_data8>
 8002448:	4603      	mov	r3, r0
 800244a:	f083 0301 	eor.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <data_init+0x28>
        return false;
 8002454:	2300      	movs	r3, #0
 8002456:	e073      	b.n	8002540 <data_init+0x110>
    }
    vhv_config_scl_sda |= 0x01;
 8002458:	79bb      	ldrb	r3, [r7, #6]
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	b2db      	uxtb	r3, r3
 8002460:	71bb      	strb	r3, [r7, #6]
    if (!i2c_write_addr8_data8(REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, vhv_config_scl_sda)) {
 8002462:	79bb      	ldrb	r3, [r7, #6]
 8002464:	4619      	mov	r1, r3
 8002466:	2089      	movs	r0, #137	@ 0x89
 8002468:	f7ff feaa 	bl	80021c0 <i2c_write_addr8_data8>
 800246c:	4603      	mov	r3, r0
 800246e:	f083 0301 	eor.w	r3, r3, #1
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <data_init+0x4c>
        return false;
 8002478:	2300      	movs	r3, #0
 800247a:	e061      	b.n	8002540 <data_init+0x110>
    }

    /* Set I2C standard mode */
    success = i2c_write_addr8_data8(0x88, 0x00);
 800247c:	2100      	movs	r1, #0
 800247e:	2088      	movs	r0, #136	@ 0x88
 8002480:	f7ff fe9e 	bl	80021c0 <i2c_write_addr8_data8>
 8002484:	4603      	mov	r3, r0
 8002486:	71fb      	strb	r3, [r7, #7]

    success &= i2c_write_addr8_data8(0x80, 0x01);
 8002488:	2101      	movs	r1, #1
 800248a:	2080      	movs	r0, #128	@ 0x80
 800248c:	f7ff fe98 	bl	80021c0 <i2c_write_addr8_data8>
 8002490:	4603      	mov	r3, r0
 8002492:	461a      	mov	r2, r3
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf14      	ite	ne
 800249c:	2301      	movne	r3, #1
 800249e:	2300      	moveq	r3, #0
 80024a0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 80024a2:	2101      	movs	r1, #1
 80024a4:	20ff      	movs	r0, #255	@ 0xff
 80024a6:	f7ff fe8b 	bl	80021c0 <i2c_write_addr8_data8>
 80024aa:	4603      	mov	r3, r0
 80024ac:	461a      	mov	r2, r3
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bf14      	ite	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	2300      	moveq	r3, #0
 80024ba:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 80024bc:	2100      	movs	r1, #0
 80024be:	2000      	movs	r0, #0
 80024c0:	f7ff fe7e 	bl	80021c0 <i2c_write_addr8_data8>
 80024c4:	4603      	mov	r3, r0
 80024c6:	461a      	mov	r2, r3
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf14      	ite	ne
 80024d0:	2301      	movne	r3, #1
 80024d2:	2300      	moveq	r3, #0
 80024d4:	71fb      	strb	r3, [r7, #7]
    /* It may be unnecessary to retrieve the stop variable for each sensor */
    success &= i2c_read_addr8_data8(0x91, &stop_variable);
 80024d6:	491c      	ldr	r1, [pc, #112]	@ (8002548 <data_init+0x118>)
 80024d8:	2091      	movs	r0, #145	@ 0x91
 80024da:	f7ff fe39 	bl	8002150 <i2c_read_addr8_data8>
 80024de:	4603      	mov	r3, r0
 80024e0:	461a      	mov	r2, r3
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	bf14      	ite	ne
 80024ea:	2301      	movne	r3, #1
 80024ec:	2300      	moveq	r3, #0
 80024ee:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x01);
 80024f0:	2101      	movs	r1, #1
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7ff fe64 	bl	80021c0 <i2c_write_addr8_data8>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf14      	ite	ne
 8002504:	2301      	movne	r3, #1
 8002506:	2300      	moveq	r3, #0
 8002508:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 800250a:	2100      	movs	r1, #0
 800250c:	20ff      	movs	r0, #255	@ 0xff
 800250e:	f7ff fe57 	bl	80021c0 <i2c_write_addr8_data8>
 8002512:	4603      	mov	r3, r0
 8002514:	461a      	mov	r2, r3
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	4013      	ands	r3, r2
 800251a:	2b00      	cmp	r3, #0
 800251c:	bf14      	ite	ne
 800251e:	2301      	movne	r3, #1
 8002520:	2300      	moveq	r3, #0
 8002522:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x00);
 8002524:	2100      	movs	r1, #0
 8002526:	2080      	movs	r0, #128	@ 0x80
 8002528:	f7ff fe4a 	bl	80021c0 <i2c_write_addr8_data8>
 800252c:	4603      	mov	r3, r0
 800252e:	461a      	mov	r2, r3
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf14      	ite	ne
 8002538:	2301      	movne	r3, #1
 800253a:	2300      	moveq	r3, #0
 800253c:	71fb      	strb	r3, [r7, #7]

    return success;
 800253e:	79fb      	ldrb	r3, [r7, #7]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	200004c7 	.word	0x200004c7

0800254c <read_strobe>:
/**
 * Wait for strobe value to be set. This is used when we read values
 * from NVM (non volatile memory).
 */
static bool read_strobe()
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
    bool success = false;
 8002552:	2300      	movs	r3, #0
 8002554:	71fb      	strb	r3, [r7, #7]
    uint8_t strobe = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	71bb      	strb	r3, [r7, #6]
    if (!i2c_write_addr8_data8(0x83, 0x00)) {
 800255a:	2100      	movs	r1, #0
 800255c:	2083      	movs	r0, #131	@ 0x83
 800255e:	f7ff fe2f 	bl	80021c0 <i2c_write_addr8_data8>
 8002562:	4603      	mov	r3, r0
 8002564:	f083 0301 	eor.w	r3, r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <read_strobe+0x26>
        return false;
 800256e:	2300      	movs	r3, #0
 8002570:	e021      	b.n	80025b6 <read_strobe+0x6a>
    }
    do {
        success = i2c_read_addr8_data8(0x83, &strobe);
 8002572:	1dbb      	adds	r3, r7, #6
 8002574:	4619      	mov	r1, r3
 8002576:	2083      	movs	r0, #131	@ 0x83
 8002578:	f7ff fdea 	bl	8002150 <i2c_read_addr8_data8>
 800257c:	4603      	mov	r3, r0
 800257e:	71fb      	strb	r3, [r7, #7]
    } while (success && (strobe == 0));
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <read_strobe+0x40>
 8002586:	79bb      	ldrb	r3, [r7, #6]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f2      	beq.n	8002572 <read_strobe+0x26>
    if (!success) {
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	f083 0301 	eor.w	r3, r3, #1
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <read_strobe+0x50>
        return false;
 8002598:	2300      	movs	r3, #0
 800259a:	e00c      	b.n	80025b6 <read_strobe+0x6a>
    }
    if (!i2c_write_addr8_data8(0x83, 0x01)) {
 800259c:	2101      	movs	r1, #1
 800259e:	2083      	movs	r0, #131	@ 0x83
 80025a0:	f7ff fe0e 	bl	80021c0 <i2c_write_addr8_data8>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f083 0301 	eor.w	r3, r3, #1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <read_strobe+0x68>
        return false;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e000      	b.n	80025b6 <read_strobe+0x6a>
    }
    return true;
 80025b4:	2301      	movs	r3, #1
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <get_spad_info_from_nvm>:
 * or only non-aperture SPADs. The number of SPADs to enable and which type
 * are also saved during the calibration step at ST factory and can be retrieved
 * from NVM.
 */
static bool get_spad_info_from_nvm(uint8_t *spad_count, uint8_t *spad_type, uint8_t good_spad_map[6])
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
    bool success = false;
 80025ca:	2300      	movs	r3, #0
 80025cc:	75fb      	strb	r3, [r7, #23]
    uint8_t tmp_data8 = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75bb      	strb	r3, [r7, #22]
    uint32_t tmp_data32 = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]

    /* Setup to read from NVM */
    success  = i2c_write_addr8_data8(0x80, 0x01);
 80025d6:	2101      	movs	r1, #1
 80025d8:	2080      	movs	r0, #128	@ 0x80
 80025da:	f7ff fdf1 	bl	80021c0 <i2c_write_addr8_data8>
 80025de:	4603      	mov	r3, r0
 80025e0:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 80025e2:	2101      	movs	r1, #1
 80025e4:	20ff      	movs	r0, #255	@ 0xff
 80025e6:	f7ff fdeb 	bl	80021c0 <i2c_write_addr8_data8>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	bf14      	ite	ne
 80025f6:	2301      	movne	r3, #1
 80025f8:	2300      	moveq	r3, #0
 80025fa:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 80025fc:	2100      	movs	r1, #0
 80025fe:	2000      	movs	r0, #0
 8002600:	f7ff fdde 	bl	80021c0 <i2c_write_addr8_data8>
 8002604:	4603      	mov	r3, r0
 8002606:	461a      	mov	r2, r3
 8002608:	7dfb      	ldrb	r3, [r7, #23]
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf14      	ite	ne
 8002610:	2301      	movne	r3, #1
 8002612:	2300      	moveq	r3, #0
 8002614:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x06);
 8002616:	2106      	movs	r1, #6
 8002618:	20ff      	movs	r0, #255	@ 0xff
 800261a:	f7ff fdd1 	bl	80021c0 <i2c_write_addr8_data8>
 800261e:	4603      	mov	r3, r0
 8002620:	461a      	mov	r2, r3
 8002622:	7dfb      	ldrb	r3, [r7, #23]
 8002624:	4013      	ands	r3, r2
 8002626:	2b00      	cmp	r3, #0
 8002628:	bf14      	ite	ne
 800262a:	2301      	movne	r3, #1
 800262c:	2300      	moveq	r3, #0
 800262e:	75fb      	strb	r3, [r7, #23]
    success &= i2c_read_addr8_data8(0x83, &tmp_data8);
 8002630:	f107 0316 	add.w	r3, r7, #22
 8002634:	4619      	mov	r1, r3
 8002636:	2083      	movs	r0, #131	@ 0x83
 8002638:	f7ff fd8a 	bl	8002150 <i2c_read_addr8_data8>
 800263c:	4603      	mov	r3, r0
 800263e:	461a      	mov	r2, r3
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf14      	ite	ne
 8002648:	2301      	movne	r3, #1
 800264a:	2300      	moveq	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x83, tmp_data8 | 0x04);
 800264e:	7dbb      	ldrb	r3, [r7, #22]
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	b2db      	uxtb	r3, r3
 8002656:	4619      	mov	r1, r3
 8002658:	2083      	movs	r0, #131	@ 0x83
 800265a:	f7ff fdb1 	bl	80021c0 <i2c_write_addr8_data8>
 800265e:	4603      	mov	r3, r0
 8002660:	461a      	mov	r2, r3
 8002662:	7dfb      	ldrb	r3, [r7, #23]
 8002664:	4013      	ands	r3, r2
 8002666:	2b00      	cmp	r3, #0
 8002668:	bf14      	ite	ne
 800266a:	2301      	movne	r3, #1
 800266c:	2300      	moveq	r3, #0
 800266e:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x07);
 8002670:	2107      	movs	r1, #7
 8002672:	20ff      	movs	r0, #255	@ 0xff
 8002674:	f7ff fda4 	bl	80021c0 <i2c_write_addr8_data8>
 8002678:	4603      	mov	r3, r0
 800267a:	461a      	mov	r2, r3
 800267c:	7dfb      	ldrb	r3, [r7, #23]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf14      	ite	ne
 8002684:	2301      	movne	r3, #1
 8002686:	2300      	moveq	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x81, 0x01);
 800268a:	2101      	movs	r1, #1
 800268c:	2081      	movs	r0, #129	@ 0x81
 800268e:	f7ff fd97 	bl	80021c0 <i2c_write_addr8_data8>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	7dfb      	ldrb	r3, [r7, #23]
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	bf14      	ite	ne
 800269e:	2301      	movne	r3, #1
 80026a0:	2300      	moveq	r3, #0
 80026a2:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x80, 0x01);
 80026a4:	2101      	movs	r1, #1
 80026a6:	2080      	movs	r0, #128	@ 0x80
 80026a8:	f7ff fd8a 	bl	80021c0 <i2c_write_addr8_data8>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461a      	mov	r2, r3
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bf14      	ite	ne
 80026b8:	2301      	movne	r3, #1
 80026ba:	2300      	moveq	r3, #0
 80026bc:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	f083 0301 	eor.w	r3, r3, #1
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <get_spad_info_from_nvm+0x110>
      return false;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e0c1      	b.n	8002852 <get_spad_info_from_nvm+0x294>
    }

    /* Get the SPAD count and type */
    success &= i2c_write_addr8_data8(0x94, 0x6b);
 80026ce:	216b      	movs	r1, #107	@ 0x6b
 80026d0:	2094      	movs	r0, #148	@ 0x94
 80026d2:	f7ff fd75 	bl	80021c0 <i2c_write_addr8_data8>
 80026d6:	4603      	mov	r3, r0
 80026d8:	461a      	mov	r2, r3
 80026da:	7dfb      	ldrb	r3, [r7, #23]
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf14      	ite	ne
 80026e2:	2301      	movne	r3, #1
 80026e4:	2300      	moveq	r3, #0
 80026e6:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	f083 0301 	eor.w	r3, r3, #1
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <get_spad_info_from_nvm+0x13a>
        return false;
 80026f4:	2300      	movs	r3, #0
 80026f6:	e0ac      	b.n	8002852 <get_spad_info_from_nvm+0x294>
    }
    if (!read_strobe()) {
 80026f8:	f7ff ff28 	bl	800254c <read_strobe>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f083 0301 	eor.w	r3, r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <get_spad_info_from_nvm+0x14e>
        return false;
 8002708:	2300      	movs	r3, #0
 800270a:	e0a2      	b.n	8002852 <get_spad_info_from_nvm+0x294>
    }
    success &= i2c_read_addr8_data32(0x90, &tmp_data32);
 800270c:	f107 0310 	add.w	r3, r7, #16
 8002710:	4619      	mov	r1, r3
 8002712:	2090      	movs	r0, #144	@ 0x90
 8002714:	f7ff fd7e 	bl	8002214 <i2c_read_addr8_data32>
 8002718:	4603      	mov	r3, r0
 800271a:	461a      	mov	r2, r3
 800271c:	7dfb      	ldrb	r3, [r7, #23]
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf14      	ite	ne
 8002724:	2301      	movne	r3, #1
 8002726:	2300      	moveq	r3, #0
 8002728:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 800272a:	7dfb      	ldrb	r3, [r7, #23]
 800272c:	f083 0301 	eor.w	r3, r3, #1
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <get_spad_info_from_nvm+0x17c>
        return false;
 8002736:	2300      	movs	r3, #0
 8002738:	e08b      	b.n	8002852 <get_spad_info_from_nvm+0x294>
    }
    *spad_count = (tmp_data32 >> 8) & 0x7f;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002744:	b2da      	uxtb	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	701a      	strb	r2, [r3, #0]
    *spad_type = (tmp_data32 >> 15) & 0x01;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	0bdb      	lsrs	r3, r3, #15
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	b2da      	uxtb	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	701a      	strb	r2, [r3, #0]
    good_spad_map[5] = (uint8_t)((tmp_data32 >> 16) & 0xFF);

#endif

    /* Restore after reading from NVM */
    success &=i2c_write_addr8_data8(0x81, 0x00);
 800275a:	2100      	movs	r1, #0
 800275c:	2081      	movs	r0, #129	@ 0x81
 800275e:	f7ff fd2f 	bl	80021c0 <i2c_write_addr8_data8>
 8002762:	4603      	mov	r3, r0
 8002764:	461a      	mov	r2, r3
 8002766:	7dfb      	ldrb	r3, [r7, #23]
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf14      	ite	ne
 800276e:	2301      	movne	r3, #1
 8002770:	2300      	moveq	r3, #0
 8002772:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x06);
 8002774:	2106      	movs	r1, #6
 8002776:	20ff      	movs	r0, #255	@ 0xff
 8002778:	f7ff fd22 	bl	80021c0 <i2c_write_addr8_data8>
 800277c:	4603      	mov	r3, r0
 800277e:	461a      	mov	r2, r3
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf14      	ite	ne
 8002788:	2301      	movne	r3, #1
 800278a:	2300      	moveq	r3, #0
 800278c:	75fb      	strb	r3, [r7, #23]
    success &=i2c_read_addr8_data8(0x83, &tmp_data8);
 800278e:	f107 0316 	add.w	r3, r7, #22
 8002792:	4619      	mov	r1, r3
 8002794:	2083      	movs	r0, #131	@ 0x83
 8002796:	f7ff fcdb 	bl	8002150 <i2c_read_addr8_data8>
 800279a:	4603      	mov	r3, r0
 800279c:	461a      	mov	r2, r3
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bf14      	ite	ne
 80027a6:	2301      	movne	r3, #1
 80027a8:	2300      	moveq	r3, #0
 80027aa:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x83, tmp_data8 & 0xfb);
 80027ac:	7dbb      	ldrb	r3, [r7, #22]
 80027ae:	f023 0304 	bic.w	r3, r3, #4
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	4619      	mov	r1, r3
 80027b6:	2083      	movs	r0, #131	@ 0x83
 80027b8:	f7ff fd02 	bl	80021c0 <i2c_write_addr8_data8>
 80027bc:	4603      	mov	r3, r0
 80027be:	461a      	mov	r2, r3
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf14      	ite	ne
 80027c8:	2301      	movne	r3, #1
 80027ca:	2300      	moveq	r3, #0
 80027cc:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x01);
 80027ce:	2101      	movs	r1, #1
 80027d0:	20ff      	movs	r0, #255	@ 0xff
 80027d2:	f7ff fcf5 	bl	80021c0 <i2c_write_addr8_data8>
 80027d6:	4603      	mov	r3, r0
 80027d8:	461a      	mov	r2, r3
 80027da:	7dfb      	ldrb	r3, [r7, #23]
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	bf14      	ite	ne
 80027e2:	2301      	movne	r3, #1
 80027e4:	2300      	moveq	r3, #0
 80027e6:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x00, 0x01);
 80027e8:	2101      	movs	r1, #1
 80027ea:	2000      	movs	r0, #0
 80027ec:	f7ff fce8 	bl	80021c0 <i2c_write_addr8_data8>
 80027f0:	4603      	mov	r3, r0
 80027f2:	461a      	mov	r2, r3
 80027f4:	7dfb      	ldrb	r3, [r7, #23]
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	bf14      	ite	ne
 80027fc:	2301      	movne	r3, #1
 80027fe:	2300      	moveq	r3, #0
 8002800:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x00);
 8002802:	2100      	movs	r1, #0
 8002804:	20ff      	movs	r0, #255	@ 0xff
 8002806:	f7ff fcdb 	bl	80021c0 <i2c_write_addr8_data8>
 800280a:	4603      	mov	r3, r0
 800280c:	461a      	mov	r2, r3
 800280e:	7dfb      	ldrb	r3, [r7, #23]
 8002810:	4013      	ands	r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	bf14      	ite	ne
 8002816:	2301      	movne	r3, #1
 8002818:	2300      	moveq	r3, #0
 800281a:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x80, 0x00);
 800281c:	2100      	movs	r1, #0
 800281e:	2080      	movs	r0, #128	@ 0x80
 8002820:	f7ff fcce 	bl	80021c0 <i2c_write_addr8_data8>
 8002824:	4603      	mov	r3, r0
 8002826:	461a      	mov	r2, r3
 8002828:	7dfb      	ldrb	r3, [r7, #23]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf14      	ite	ne
 8002830:	2301      	movne	r3, #1
 8002832:	2300      	moveq	r3, #0
 8002834:	75fb      	strb	r3, [r7, #23]

    /* When we haven't configured the SPAD map yet, the SPAD map register actually
     * contains the good SPAD map, so we can retrieve it straight from this register
     * instead of reading it from the NVM. */
    if (!i2c_read_addr8_bytes(REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, good_spad_map, 6)) {
 8002836:	2206      	movs	r2, #6
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	20b0      	movs	r0, #176	@ 0xb0
 800283c:	f7ff fd8e 	bl	800235c <i2c_read_addr8_bytes>
 8002840:	4603      	mov	r3, r0
 8002842:	f083 0301 	eor.w	r3, r3, #1
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <get_spad_info_from_nvm+0x292>
        return false;
 800284c:	2300      	movs	r3, #0
 800284e:	e000      	b.n	8002852 <get_spad_info_from_nvm+0x294>
    }
    return success;
 8002850:	7dfb      	ldrb	r3, [r7, #23]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <set_spads_from_nvm>:
 * Sets the SPADs according to the value saved to NVM by ST during production. Assuming
 * similar conditions (e.g. no cover glass), this should give reasonable readings and we
 * can avoid running ref spad management (tedious code).
 */
static bool set_spads_from_nvm()
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b08c      	sub	sp, #48	@ 0x30
 800285e:	af00      	add	r7, sp, #0
    uint8_t spad_map[SPAD_MAP_ROW_COUNT] = { 0 };
 8002860:	f107 0310 	add.w	r3, r7, #16
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	809a      	strh	r2, [r3, #4]
    uint8_t good_spad_map[SPAD_MAP_ROW_COUNT] = { 0 };
 800286a:	f107 0308 	add.w	r3, r7, #8
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	809a      	strh	r2, [r3, #4]
    uint8_t spads_enabled_count = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t spads_to_enable_count = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	71fb      	strb	r3, [r7, #7]
    uint8_t spad_type = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	71bb      	strb	r3, [r7, #6]
    volatile uint32_t total_val = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	603b      	str	r3, [r7, #0]

    if (!get_spad_info_from_nvm(&spads_to_enable_count, &spad_type, good_spad_map)) {
 8002886:	f107 0208 	add.w	r2, r7, #8
 800288a:	1db9      	adds	r1, r7, #6
 800288c:	1dfb      	adds	r3, r7, #7
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fe95 	bl	80025be <get_spad_info_from_nvm>
 8002894:	4603      	mov	r3, r0
 8002896:	f083 0301 	eor.w	r3, r3, #1
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <set_spads_from_nvm+0x4a>
        return false;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e0c7      	b.n	8002a34 <set_spads_from_nvm+0x1da>
    }

    for (int i = 0; i < 6; i++) {
 80028a4:	2300      	movs	r3, #0
 80028a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028a8:	e00b      	b.n	80028c2 <set_spads_from_nvm+0x68>
        total_val += good_spad_map[i];
 80028aa:	f107 0208 	add.w	r2, r7, #8
 80028ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b0:	4413      	add	r3, r2
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	461a      	mov	r2, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 6; i++) {
 80028bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028be:	3301      	adds	r3, #1
 80028c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c4:	2b05      	cmp	r3, #5
 80028c6:	ddf0      	ble.n	80028aa <set_spads_from_nvm+0x50>
    }

    bool success = i2c_write_addr8_data8(0xFF, 0x01);
 80028c8:	2101      	movs	r1, #1
 80028ca:	20ff      	movs	r0, #255	@ 0xff
 80028cc:	f7ff fc78 	bl	80021c0 <i2c_write_addr8_data8>
 80028d0:	4603      	mov	r3, r0
 80028d2:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80028d4:	2100      	movs	r1, #0
 80028d6:	204f      	movs	r0, #79	@ 0x4f
 80028d8:	f7ff fc72 	bl	80021c0 <i2c_write_addr8_data8>
 80028dc:	4603      	mov	r3, r0
 80028de:	461a      	mov	r2, r3
 80028e0:	7ffb      	ldrb	r3, [r7, #31]
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bf14      	ite	ne
 80028e8:	2301      	movne	r3, #1
 80028ea:	2300      	moveq	r3, #0
 80028ec:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80028ee:	212c      	movs	r1, #44	@ 0x2c
 80028f0:	204e      	movs	r0, #78	@ 0x4e
 80028f2:	f7ff fc65 	bl	80021c0 <i2c_write_addr8_data8>
 80028f6:	4603      	mov	r3, r0
 80028f8:	461a      	mov	r2, r3
 80028fa:	7ffb      	ldrb	r3, [r7, #31]
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf14      	ite	ne
 8002902:	2301      	movne	r3, #1
 8002904:	2300      	moveq	r3, #0
 8002906:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002908:	2100      	movs	r1, #0
 800290a:	20ff      	movs	r0, #255	@ 0xff
 800290c:	f7ff fc58 	bl	80021c0 <i2c_write_addr8_data8>
 8002910:	4603      	mov	r3, r0
 8002912:	461a      	mov	r2, r3
 8002914:	7ffb      	ldrb	r3, [r7, #31]
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	bf14      	ite	ne
 800291c:	2301      	movne	r3, #1
 800291e:	2300      	moveq	r3, #0
 8002920:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_GLOBAL_CONFIG_REF_EN_START_SELECT, SPAD_START_SELECT);
 8002922:	21b4      	movs	r1, #180	@ 0xb4
 8002924:	20b6      	movs	r0, #182	@ 0xb6
 8002926:	f7ff fc4b 	bl	80021c0 <i2c_write_addr8_data8>
 800292a:	4603      	mov	r3, r0
 800292c:	461a      	mov	r2, r3
 800292e:	7ffb      	ldrb	r3, [r7, #31]
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	bf14      	ite	ne
 8002936:	2301      	movne	r3, #1
 8002938:	2300      	moveq	r3, #0
 800293a:	77fb      	strb	r3, [r7, #31]
    if (!success) {
 800293c:	7ffb      	ldrb	r3, [r7, #31]
 800293e:	f083 0301 	eor.w	r3, r3, #1
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <set_spads_from_nvm+0xf2>
        return false;
 8002948:	2300      	movs	r3, #0
 800294a:	e073      	b.n	8002a34 <set_spads_from_nvm+0x1da>
    }

    uint8_t offset = (spad_type == SPAD_TYPE_APERTURE) ? SPAD_APERTURE_START_INDEX : 0;
 800294c:	79bb      	ldrb	r3, [r7, #6]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <set_spads_from_nvm+0xfc>
 8002952:	230c      	movs	r3, #12
 8002954:	e000      	b.n	8002958 <set_spads_from_nvm+0xfe>
 8002956:	2300      	movs	r3, #0
 8002958:	77bb      	strb	r3, [r7, #30]

    /* Create a new SPAD array by selecting a subset of the SPADs suggested by the good SPAD map.
     * The subset should only have the number of type enabled as suggested by the reading from
     * the NVM (spads_to_enable_count and spad_type). */
    for (int row = 0; row < SPAD_MAP_ROW_COUNT; row++) {
 800295a:	2300      	movs	r3, #0
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24
 800295e:	e04d      	b.n	80029fc <set_spads_from_nvm+0x1a2>
        for (int column = 0; column < SPAD_ROW_SIZE; column++) {
 8002960:	2300      	movs	r3, #0
 8002962:	623b      	str	r3, [r7, #32]
 8002964:	e03d      	b.n	80029e2 <set_spads_from_nvm+0x188>
            int index = (row * SPAD_ROW_SIZE) + column;
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	6a3a      	ldr	r2, [r7, #32]
 800296c:	4413      	add	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
            if (index >= SPAD_MAX_COUNT) {
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b2b      	cmp	r3, #43	@ 0x2b
 8002974:	dd01      	ble.n	800297a <set_spads_from_nvm+0x120>
                return false;
 8002976:	2300      	movs	r3, #0
 8002978:	e05c      	b.n	8002a34 <set_spads_from_nvm+0x1da>
            }
            if (spads_enabled_count == spads_to_enable_count) {
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002980:	429a      	cmp	r2, r3
 8002982:	d032      	beq.n	80029ea <set_spads_from_nvm+0x190>
                /* We are done */
                break;
            }
            if (index < offset) {
 8002984:	7fbb      	ldrb	r3, [r7, #30]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	429a      	cmp	r2, r3
 800298a:	db26      	blt.n	80029da <set_spads_from_nvm+0x180>
                continue;
            }
            if ((good_spad_map[row] >> column) & 0x1) {
 800298c:	f107 0208 	add.w	r2, r7, #8
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	4413      	add	r3, r2
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	fa42 f303 	asr.w	r3, r2, r3
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d01a      	beq.n	80029dc <set_spads_from_nvm+0x182>
                spad_map[row] |= (1 << column);
 80029a6:	f107 0210 	add.w	r2, r7, #16
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	4413      	add	r3, r2
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	b25a      	sxtb	r2, r3
 80029b2:	2101      	movs	r1, #1
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	b25b      	sxtb	r3, r3
 80029bc:	4313      	orrs	r3, r2
 80029be:	b25b      	sxtb	r3, r3
 80029c0:	b2d9      	uxtb	r1, r3
 80029c2:	f107 0210 	add.w	r2, r7, #16
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	4413      	add	r3, r2
 80029ca:	460a      	mov	r2, r1
 80029cc:	701a      	strb	r2, [r3, #0]
                spads_enabled_count++;
 80029ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80029d2:	3301      	adds	r3, #1
 80029d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80029d8:	e000      	b.n	80029dc <set_spads_from_nvm+0x182>
                continue;
 80029da:	bf00      	nop
        for (int column = 0; column < SPAD_ROW_SIZE; column++) {
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	3301      	adds	r3, #1
 80029e0:	623b      	str	r3, [r7, #32]
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	2b07      	cmp	r3, #7
 80029e6:	ddbe      	ble.n	8002966 <set_spads_from_nvm+0x10c>
 80029e8:	e000      	b.n	80029ec <set_spads_from_nvm+0x192>
                break;
 80029ea:	bf00      	nop
            }
        }
        if (spads_enabled_count == spads_to_enable_count) {
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d006      	beq.n	8002a04 <set_spads_from_nvm+0x1aa>
    for (int row = 0; row < SPAD_MAP_ROW_COUNT; row++) {
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	3301      	adds	r3, #1
 80029fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	ddae      	ble.n	8002960 <set_spads_from_nvm+0x106>
 8002a02:	e000      	b.n	8002a06 <set_spads_from_nvm+0x1ac>
            /* To avoid looping unnecessarily when we are already done. */
            break;
 8002a04:	bf00      	nop
        }
    }

    if (spads_enabled_count != spads_to_enable_count) {
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <set_spads_from_nvm+0x1ba>
        return false;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e00f      	b.n	8002a34 <set_spads_from_nvm+0x1da>
    }

    /* Write the new SPAD configuration */
    if (!i2c_write_addr8_bytes(REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, spad_map, SPAD_MAP_ROW_COUNT)) {
 8002a14:	f107 0310 	add.w	r3, r7, #16
 8002a18:	2206      	movs	r2, #6
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	20b0      	movs	r0, #176	@ 0xb0
 8002a1e:	f7ff fc3f 	bl	80022a0 <i2c_write_addr8_bytes>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f083 0301 	eor.w	r3, r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <set_spads_from_nvm+0x1d8>
        return false;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e000      	b.n	8002a34 <set_spads_from_nvm+0x1da>
    }

    return true;
 8002a32:	2301      	movs	r3, #1
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3730      	adds	r7, #48	@ 0x30
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <load_default_tuning_settings>:

/**
 * Load tuning settings (same as default tuning settings provided by ST api code)
 */
static bool load_default_tuning_settings()
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
    bool success = i2c_write_addr8_data8(0xFF, 0x01);
 8002a42:	2101      	movs	r1, #1
 8002a44:	20ff      	movs	r0, #255	@ 0xff
 8002a46:	f7ff fbbb 	bl	80021c0 <i2c_write_addr8_data8>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8002a4e:	2100      	movs	r1, #0
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7ff fbb5 	bl	80021c0 <i2c_write_addr8_data8>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bf14      	ite	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	2300      	moveq	r3, #0
 8002a66:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002a68:	2100      	movs	r1, #0
 8002a6a:	20ff      	movs	r0, #255	@ 0xff
 8002a6c:	f7ff fba8 	bl	80021c0 <i2c_write_addr8_data8>
 8002a70:	4603      	mov	r3, r0
 8002a72:	461a      	mov	r2, r3
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bf14      	ite	ne
 8002a7c:	2301      	movne	r3, #1
 8002a7e:	2300      	moveq	r3, #0
 8002a80:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x09, 0x00);
 8002a82:	2100      	movs	r1, #0
 8002a84:	2009      	movs	r0, #9
 8002a86:	f7ff fb9b 	bl	80021c0 <i2c_write_addr8_data8>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bf14      	ite	ne
 8002a96:	2301      	movne	r3, #1
 8002a98:	2300      	moveq	r3, #0
 8002a9a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x10, 0x00);
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	2010      	movs	r0, #16
 8002aa0:	f7ff fb8e 	bl	80021c0 <i2c_write_addr8_data8>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf14      	ite	ne
 8002ab0:	2301      	movne	r3, #1
 8002ab2:	2300      	moveq	r3, #0
 8002ab4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x11, 0x00);
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	2011      	movs	r0, #17
 8002aba:	f7ff fb81 	bl	80021c0 <i2c_write_addr8_data8>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bf14      	ite	ne
 8002aca:	2301      	movne	r3, #1
 8002acc:	2300      	moveq	r3, #0
 8002ace:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x24, 0x01);
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	2024      	movs	r0, #36	@ 0x24
 8002ad4:	f7ff fb74 	bl	80021c0 <i2c_write_addr8_data8>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf14      	ite	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	2300      	moveq	r3, #0
 8002ae8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x25, 0xFF);
 8002aea:	21ff      	movs	r1, #255	@ 0xff
 8002aec:	2025      	movs	r0, #37	@ 0x25
 8002aee:	f7ff fb67 	bl	80021c0 <i2c_write_addr8_data8>
 8002af2:	4603      	mov	r3, r0
 8002af4:	461a      	mov	r2, r3
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	bf14      	ite	ne
 8002afe:	2301      	movne	r3, #1
 8002b00:	2300      	moveq	r3, #0
 8002b02:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x75, 0x00);
 8002b04:	2100      	movs	r1, #0
 8002b06:	2075      	movs	r0, #117	@ 0x75
 8002b08:	f7ff fb5a 	bl	80021c0 <i2c_write_addr8_data8>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	461a      	mov	r2, r3
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf14      	ite	ne
 8002b18:	2301      	movne	r3, #1
 8002b1a:	2300      	moveq	r3, #0
 8002b1c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8002b1e:	2101      	movs	r1, #1
 8002b20:	20ff      	movs	r0, #255	@ 0xff
 8002b22:	f7ff fb4d 	bl	80021c0 <i2c_write_addr8_data8>
 8002b26:	4603      	mov	r3, r0
 8002b28:	461a      	mov	r2, r3
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bf14      	ite	ne
 8002b32:	2301      	movne	r3, #1
 8002b34:	2300      	moveq	r3, #0
 8002b36:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4E, 0x2C);
 8002b38:	212c      	movs	r1, #44	@ 0x2c
 8002b3a:	204e      	movs	r0, #78	@ 0x4e
 8002b3c:	f7ff fb40 	bl	80021c0 <i2c_write_addr8_data8>
 8002b40:	4603      	mov	r3, r0
 8002b42:	461a      	mov	r2, r3
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf14      	ite	ne
 8002b4c:	2301      	movne	r3, #1
 8002b4e:	2300      	moveq	r3, #0
 8002b50:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x48, 0x00);
 8002b52:	2100      	movs	r1, #0
 8002b54:	2048      	movs	r0, #72	@ 0x48
 8002b56:	f7ff fb33 	bl	80021c0 <i2c_write_addr8_data8>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bf14      	ite	ne
 8002b66:	2301      	movne	r3, #1
 8002b68:	2300      	moveq	r3, #0
 8002b6a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x30, 0x20);
 8002b6c:	2120      	movs	r1, #32
 8002b6e:	2030      	movs	r0, #48	@ 0x30
 8002b70:	f7ff fb26 	bl	80021c0 <i2c_write_addr8_data8>
 8002b74:	4603      	mov	r3, r0
 8002b76:	461a      	mov	r2, r3
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf14      	ite	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	2300      	moveq	r3, #0
 8002b84:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002b86:	2100      	movs	r1, #0
 8002b88:	20ff      	movs	r0, #255	@ 0xff
 8002b8a:	f7ff fb19 	bl	80021c0 <i2c_write_addr8_data8>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	461a      	mov	r2, r3
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bf14      	ite	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	2300      	moveq	r3, #0
 8002b9e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x30, 0x09);
 8002ba0:	2109      	movs	r1, #9
 8002ba2:	2030      	movs	r0, #48	@ 0x30
 8002ba4:	f7ff fb0c 	bl	80021c0 <i2c_write_addr8_data8>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	461a      	mov	r2, r3
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x54, 0x00);
 8002bba:	2100      	movs	r1, #0
 8002bbc:	2054      	movs	r0, #84	@ 0x54
 8002bbe:	f7ff faff 	bl	80021c0 <i2c_write_addr8_data8>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf14      	ite	ne
 8002bce:	2301      	movne	r3, #1
 8002bd0:	2300      	moveq	r3, #0
 8002bd2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x31, 0x04);
 8002bd4:	2104      	movs	r1, #4
 8002bd6:	2031      	movs	r0, #49	@ 0x31
 8002bd8:	f7ff faf2 	bl	80021c0 <i2c_write_addr8_data8>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	461a      	mov	r2, r3
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x32, 0x03);
 8002bee:	2103      	movs	r1, #3
 8002bf0:	2032      	movs	r0, #50	@ 0x32
 8002bf2:	f7ff fae5 	bl	80021c0 <i2c_write_addr8_data8>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf14      	ite	ne
 8002c02:	2301      	movne	r3, #1
 8002c04:	2300      	moveq	r3, #0
 8002c06:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x40, 0x83);
 8002c08:	2183      	movs	r1, #131	@ 0x83
 8002c0a:	2040      	movs	r0, #64	@ 0x40
 8002c0c:	f7ff fad8 	bl	80021c0 <i2c_write_addr8_data8>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x46, 0x25);
 8002c22:	2125      	movs	r1, #37	@ 0x25
 8002c24:	2046      	movs	r0, #70	@ 0x46
 8002c26:	f7ff facb 	bl	80021c0 <i2c_write_addr8_data8>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bf14      	ite	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	2300      	moveq	r3, #0
 8002c3a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x60, 0x00);
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	2060      	movs	r0, #96	@ 0x60
 8002c40:	f7ff fabe 	bl	80021c0 <i2c_write_addr8_data8>
 8002c44:	4603      	mov	r3, r0
 8002c46:	461a      	mov	r2, r3
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x27, 0x00);
 8002c56:	2100      	movs	r1, #0
 8002c58:	2027      	movs	r0, #39	@ 0x27
 8002c5a:	f7ff fab1 	bl	80021c0 <i2c_write_addr8_data8>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	461a      	mov	r2, r3
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	bf14      	ite	ne
 8002c6a:	2301      	movne	r3, #1
 8002c6c:	2300      	moveq	r3, #0
 8002c6e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x50, 0x06);
 8002c70:	2106      	movs	r1, #6
 8002c72:	2050      	movs	r0, #80	@ 0x50
 8002c74:	f7ff faa4 	bl	80021c0 <i2c_write_addr8_data8>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x51, 0x00);
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	2051      	movs	r0, #81	@ 0x51
 8002c8e:	f7ff fa97 	bl	80021c0 <i2c_write_addr8_data8>
 8002c92:	4603      	mov	r3, r0
 8002c94:	461a      	mov	r2, r3
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	bf14      	ite	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	2300      	moveq	r3, #0
 8002ca2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x52, 0x96);
 8002ca4:	2196      	movs	r1, #150	@ 0x96
 8002ca6:	2052      	movs	r0, #82	@ 0x52
 8002ca8:	f7ff fa8a 	bl	80021c0 <i2c_write_addr8_data8>
 8002cac:	4603      	mov	r3, r0
 8002cae:	461a      	mov	r2, r3
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	bf14      	ite	ne
 8002cb8:	2301      	movne	r3, #1
 8002cba:	2300      	moveq	r3, #0
 8002cbc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x56, 0x08);
 8002cbe:	2108      	movs	r1, #8
 8002cc0:	2056      	movs	r0, #86	@ 0x56
 8002cc2:	f7ff fa7d 	bl	80021c0 <i2c_write_addr8_data8>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	461a      	mov	r2, r3
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bf14      	ite	ne
 8002cd2:	2301      	movne	r3, #1
 8002cd4:	2300      	moveq	r3, #0
 8002cd6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x57, 0x30);
 8002cd8:	2130      	movs	r1, #48	@ 0x30
 8002cda:	2057      	movs	r0, #87	@ 0x57
 8002cdc:	f7ff fa70 	bl	80021c0 <i2c_write_addr8_data8>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf14      	ite	ne
 8002cec:	2301      	movne	r3, #1
 8002cee:	2300      	moveq	r3, #0
 8002cf0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x61, 0x00);
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	2061      	movs	r0, #97	@ 0x61
 8002cf6:	f7ff fa63 	bl	80021c0 <i2c_write_addr8_data8>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bf14      	ite	ne
 8002d06:	2301      	movne	r3, #1
 8002d08:	2300      	moveq	r3, #0
 8002d0a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x62, 0x00);
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	2062      	movs	r0, #98	@ 0x62
 8002d10:	f7ff fa56 	bl	80021c0 <i2c_write_addr8_data8>
 8002d14:	4603      	mov	r3, r0
 8002d16:	461a      	mov	r2, r3
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x64, 0x00);
 8002d26:	2100      	movs	r1, #0
 8002d28:	2064      	movs	r0, #100	@ 0x64
 8002d2a:	f7ff fa49 	bl	80021c0 <i2c_write_addr8_data8>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	461a      	mov	r2, r3
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	bf14      	ite	ne
 8002d3a:	2301      	movne	r3, #1
 8002d3c:	2300      	moveq	r3, #0
 8002d3e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x65, 0x00);
 8002d40:	2100      	movs	r1, #0
 8002d42:	2065      	movs	r0, #101	@ 0x65
 8002d44:	f7ff fa3c 	bl	80021c0 <i2c_write_addr8_data8>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x66, 0xA0);
 8002d5a:	21a0      	movs	r1, #160	@ 0xa0
 8002d5c:	2066      	movs	r0, #102	@ 0x66
 8002d5e:	f7ff fa2f 	bl	80021c0 <i2c_write_addr8_data8>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf14      	ite	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	2300      	moveq	r3, #0
 8002d72:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8002d74:	2101      	movs	r1, #1
 8002d76:	20ff      	movs	r0, #255	@ 0xff
 8002d78:	f7ff fa22 	bl	80021c0 <i2c_write_addr8_data8>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	461a      	mov	r2, r3
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf14      	ite	ne
 8002d88:	2301      	movne	r3, #1
 8002d8a:	2300      	moveq	r3, #0
 8002d8c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x22, 0x32);
 8002d8e:	2132      	movs	r1, #50	@ 0x32
 8002d90:	2022      	movs	r0, #34	@ 0x22
 8002d92:	f7ff fa15 	bl	80021c0 <i2c_write_addr8_data8>
 8002d96:	4603      	mov	r3, r0
 8002d98:	461a      	mov	r2, r3
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	bf14      	ite	ne
 8002da2:	2301      	movne	r3, #1
 8002da4:	2300      	moveq	r3, #0
 8002da6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x47, 0x14);
 8002da8:	2114      	movs	r1, #20
 8002daa:	2047      	movs	r0, #71	@ 0x47
 8002dac:	f7ff fa08 	bl	80021c0 <i2c_write_addr8_data8>
 8002db0:	4603      	mov	r3, r0
 8002db2:	461a      	mov	r2, r3
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x49, 0xFF);
 8002dc2:	21ff      	movs	r1, #255	@ 0xff
 8002dc4:	2049      	movs	r0, #73	@ 0x49
 8002dc6:	f7ff f9fb 	bl	80021c0 <i2c_write_addr8_data8>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461a      	mov	r2, r3
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	bf14      	ite	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	2300      	moveq	r3, #0
 8002dda:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4A, 0x00);
 8002ddc:	2100      	movs	r1, #0
 8002dde:	204a      	movs	r0, #74	@ 0x4a
 8002de0:	f7ff f9ee 	bl	80021c0 <i2c_write_addr8_data8>
 8002de4:	4603      	mov	r3, r0
 8002de6:	461a      	mov	r2, r3
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002df6:	2100      	movs	r1, #0
 8002df8:	20ff      	movs	r0, #255	@ 0xff
 8002dfa:	f7ff f9e1 	bl	80021c0 <i2c_write_addr8_data8>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	461a      	mov	r2, r3
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	bf14      	ite	ne
 8002e0a:	2301      	movne	r3, #1
 8002e0c:	2300      	moveq	r3, #0
 8002e0e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x7A, 0x0A);
 8002e10:	210a      	movs	r1, #10
 8002e12:	207a      	movs	r0, #122	@ 0x7a
 8002e14:	f7ff f9d4 	bl	80021c0 <i2c_write_addr8_data8>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x7B, 0x00);
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	207b      	movs	r0, #123	@ 0x7b
 8002e2e:	f7ff f9c7 	bl	80021c0 <i2c_write_addr8_data8>
 8002e32:	4603      	mov	r3, r0
 8002e34:	461a      	mov	r2, r3
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bf14      	ite	ne
 8002e3e:	2301      	movne	r3, #1
 8002e40:	2300      	moveq	r3, #0
 8002e42:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x78, 0x21);
 8002e44:	2121      	movs	r1, #33	@ 0x21
 8002e46:	2078      	movs	r0, #120	@ 0x78
 8002e48:	f7ff f9ba 	bl	80021c0 <i2c_write_addr8_data8>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	461a      	mov	r2, r3
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf14      	ite	ne
 8002e58:	2301      	movne	r3, #1
 8002e5a:	2300      	moveq	r3, #0
 8002e5c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8002e5e:	2101      	movs	r1, #1
 8002e60:	20ff      	movs	r0, #255	@ 0xff
 8002e62:	f7ff f9ad 	bl	80021c0 <i2c_write_addr8_data8>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bf14      	ite	ne
 8002e72:	2301      	movne	r3, #1
 8002e74:	2300      	moveq	r3, #0
 8002e76:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x23, 0x34);
 8002e78:	2134      	movs	r1, #52	@ 0x34
 8002e7a:	2023      	movs	r0, #35	@ 0x23
 8002e7c:	f7ff f9a0 	bl	80021c0 <i2c_write_addr8_data8>
 8002e80:	4603      	mov	r3, r0
 8002e82:	461a      	mov	r2, r3
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x42, 0x00);
 8002e92:	2100      	movs	r1, #0
 8002e94:	2042      	movs	r0, #66	@ 0x42
 8002e96:	f7ff f993 	bl	80021c0 <i2c_write_addr8_data8>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bf14      	ite	ne
 8002ea6:	2301      	movne	r3, #1
 8002ea8:	2300      	moveq	r3, #0
 8002eaa:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x44, 0xFF);
 8002eac:	21ff      	movs	r1, #255	@ 0xff
 8002eae:	2044      	movs	r0, #68	@ 0x44
 8002eb0:	f7ff f986 	bl	80021c0 <i2c_write_addr8_data8>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf14      	ite	ne
 8002ec0:	2301      	movne	r3, #1
 8002ec2:	2300      	moveq	r3, #0
 8002ec4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x45, 0x26);
 8002ec6:	2126      	movs	r1, #38	@ 0x26
 8002ec8:	2045      	movs	r0, #69	@ 0x45
 8002eca:	f7ff f979 	bl	80021c0 <i2c_write_addr8_data8>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	bf14      	ite	ne
 8002eda:	2301      	movne	r3, #1
 8002edc:	2300      	moveq	r3, #0
 8002ede:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x46, 0x05);
 8002ee0:	2105      	movs	r1, #5
 8002ee2:	2046      	movs	r0, #70	@ 0x46
 8002ee4:	f7ff f96c 	bl	80021c0 <i2c_write_addr8_data8>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	461a      	mov	r2, r3
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf14      	ite	ne
 8002ef4:	2301      	movne	r3, #1
 8002ef6:	2300      	moveq	r3, #0
 8002ef8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x40, 0x40);
 8002efa:	2140      	movs	r1, #64	@ 0x40
 8002efc:	2040      	movs	r0, #64	@ 0x40
 8002efe:	f7ff f95f 	bl	80021c0 <i2c_write_addr8_data8>
 8002f02:	4603      	mov	r3, r0
 8002f04:	461a      	mov	r2, r3
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bf14      	ite	ne
 8002f0e:	2301      	movne	r3, #1
 8002f10:	2300      	moveq	r3, #0
 8002f12:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x0E, 0x06);
 8002f14:	2106      	movs	r1, #6
 8002f16:	200e      	movs	r0, #14
 8002f18:	f7ff f952 	bl	80021c0 <i2c_write_addr8_data8>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	461a      	mov	r2, r3
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bf14      	ite	ne
 8002f28:	2301      	movne	r3, #1
 8002f2a:	2300      	moveq	r3, #0
 8002f2c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x20, 0x1A);
 8002f2e:	211a      	movs	r1, #26
 8002f30:	2020      	movs	r0, #32
 8002f32:	f7ff f945 	bl	80021c0 <i2c_write_addr8_data8>
 8002f36:	4603      	mov	r3, r0
 8002f38:	461a      	mov	r2, r3
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	bf14      	ite	ne
 8002f42:	2301      	movne	r3, #1
 8002f44:	2300      	moveq	r3, #0
 8002f46:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x43, 0x40);
 8002f48:	2140      	movs	r1, #64	@ 0x40
 8002f4a:	2043      	movs	r0, #67	@ 0x43
 8002f4c:	f7ff f938 	bl	80021c0 <i2c_write_addr8_data8>
 8002f50:	4603      	mov	r3, r0
 8002f52:	461a      	mov	r2, r3
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf14      	ite	ne
 8002f5c:	2301      	movne	r3, #1
 8002f5e:	2300      	moveq	r3, #0
 8002f60:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002f62:	2100      	movs	r1, #0
 8002f64:	20ff      	movs	r0, #255	@ 0xff
 8002f66:	f7ff f92b 	bl	80021c0 <i2c_write_addr8_data8>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	bf14      	ite	ne
 8002f76:	2301      	movne	r3, #1
 8002f78:	2300      	moveq	r3, #0
 8002f7a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x34, 0x03);
 8002f7c:	2103      	movs	r1, #3
 8002f7e:	2034      	movs	r0, #52	@ 0x34
 8002f80:	f7ff f91e 	bl	80021c0 <i2c_write_addr8_data8>
 8002f84:	4603      	mov	r3, r0
 8002f86:	461a      	mov	r2, r3
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x35, 0x44);
 8002f96:	2144      	movs	r1, #68	@ 0x44
 8002f98:	2035      	movs	r0, #53	@ 0x35
 8002f9a:	f7ff f911 	bl	80021c0 <i2c_write_addr8_data8>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf14      	ite	ne
 8002faa:	2301      	movne	r3, #1
 8002fac:	2300      	moveq	r3, #0
 8002fae:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	20ff      	movs	r0, #255	@ 0xff
 8002fb4:	f7ff f904 	bl	80021c0 <i2c_write_addr8_data8>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf14      	ite	ne
 8002fc4:	2301      	movne	r3, #1
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x31, 0x04);
 8002fca:	2104      	movs	r1, #4
 8002fcc:	2031      	movs	r0, #49	@ 0x31
 8002fce:	f7ff f8f7 	bl	80021c0 <i2c_write_addr8_data8>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf14      	ite	ne
 8002fde:	2301      	movne	r3, #1
 8002fe0:	2300      	moveq	r3, #0
 8002fe2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4B, 0x09);
 8002fe4:	2109      	movs	r1, #9
 8002fe6:	204b      	movs	r0, #75	@ 0x4b
 8002fe8:	f7ff f8ea 	bl	80021c0 <i2c_write_addr8_data8>
 8002fec:	4603      	mov	r3, r0
 8002fee:	461a      	mov	r2, r3
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf14      	ite	ne
 8002ff8:	2301      	movne	r3, #1
 8002ffa:	2300      	moveq	r3, #0
 8002ffc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4C, 0x05);
 8002ffe:	2105      	movs	r1, #5
 8003000:	204c      	movs	r0, #76	@ 0x4c
 8003002:	f7ff f8dd 	bl	80021c0 <i2c_write_addr8_data8>
 8003006:	4603      	mov	r3, r0
 8003008:	461a      	mov	r2, r3
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	4013      	ands	r3, r2
 800300e:	2b00      	cmp	r3, #0
 8003010:	bf14      	ite	ne
 8003012:	2301      	movne	r3, #1
 8003014:	2300      	moveq	r3, #0
 8003016:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4D, 0x04);
 8003018:	2104      	movs	r1, #4
 800301a:	204d      	movs	r0, #77	@ 0x4d
 800301c:	f7ff f8d0 	bl	80021c0 <i2c_write_addr8_data8>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003032:	2100      	movs	r1, #0
 8003034:	20ff      	movs	r0, #255	@ 0xff
 8003036:	f7ff f8c3 	bl	80021c0 <i2c_write_addr8_data8>
 800303a:	4603      	mov	r3, r0
 800303c:	461a      	mov	r2, r3
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	bf14      	ite	ne
 8003046:	2301      	movne	r3, #1
 8003048:	2300      	moveq	r3, #0
 800304a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x44, 0x00);
 800304c:	2100      	movs	r1, #0
 800304e:	2044      	movs	r0, #68	@ 0x44
 8003050:	f7ff f8b6 	bl	80021c0 <i2c_write_addr8_data8>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x45, 0x20);
 8003066:	2120      	movs	r1, #32
 8003068:	2045      	movs	r0, #69	@ 0x45
 800306a:	f7ff f8a9 	bl	80021c0 <i2c_write_addr8_data8>
 800306e:	4603      	mov	r3, r0
 8003070:	461a      	mov	r2, r3
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	bf14      	ite	ne
 800307a:	2301      	movne	r3, #1
 800307c:	2300      	moveq	r3, #0
 800307e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x47, 0x08);
 8003080:	2108      	movs	r1, #8
 8003082:	2047      	movs	r0, #71	@ 0x47
 8003084:	f7ff f89c 	bl	80021c0 <i2c_write_addr8_data8>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf14      	ite	ne
 8003094:	2301      	movne	r3, #1
 8003096:	2300      	moveq	r3, #0
 8003098:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x48, 0x28);
 800309a:	2128      	movs	r1, #40	@ 0x28
 800309c:	2048      	movs	r0, #72	@ 0x48
 800309e:	f7ff f88f 	bl	80021c0 <i2c_write_addr8_data8>
 80030a2:	4603      	mov	r3, r0
 80030a4:	461a      	mov	r2, r3
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	bf14      	ite	ne
 80030ae:	2301      	movne	r3, #1
 80030b0:	2300      	moveq	r3, #0
 80030b2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x67, 0x00);
 80030b4:	2100      	movs	r1, #0
 80030b6:	2067      	movs	r0, #103	@ 0x67
 80030b8:	f7ff f882 	bl	80021c0 <i2c_write_addr8_data8>
 80030bc:	4603      	mov	r3, r0
 80030be:	461a      	mov	r2, r3
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf14      	ite	ne
 80030c8:	2301      	movne	r3, #1
 80030ca:	2300      	moveq	r3, #0
 80030cc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x70, 0x04);
 80030ce:	2104      	movs	r1, #4
 80030d0:	2070      	movs	r0, #112	@ 0x70
 80030d2:	f7ff f875 	bl	80021c0 <i2c_write_addr8_data8>
 80030d6:	4603      	mov	r3, r0
 80030d8:	461a      	mov	r2, r3
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf14      	ite	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	2300      	moveq	r3, #0
 80030e6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x71, 0x01);
 80030e8:	2101      	movs	r1, #1
 80030ea:	2071      	movs	r0, #113	@ 0x71
 80030ec:	f7ff f868 	bl	80021c0 <i2c_write_addr8_data8>
 80030f0:	4603      	mov	r3, r0
 80030f2:	461a      	mov	r2, r3
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x72, 0xFE);
 8003102:	21fe      	movs	r1, #254	@ 0xfe
 8003104:	2072      	movs	r0, #114	@ 0x72
 8003106:	f7ff f85b 	bl	80021c0 <i2c_write_addr8_data8>
 800310a:	4603      	mov	r3, r0
 800310c:	461a      	mov	r2, r3
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	bf14      	ite	ne
 8003116:	2301      	movne	r3, #1
 8003118:	2300      	moveq	r3, #0
 800311a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x76, 0x00);
 800311c:	2100      	movs	r1, #0
 800311e:	2076      	movs	r0, #118	@ 0x76
 8003120:	f7ff f84e 	bl	80021c0 <i2c_write_addr8_data8>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x77, 0x00);
 8003136:	2100      	movs	r1, #0
 8003138:	2077      	movs	r0, #119	@ 0x77
 800313a:	f7ff f841 	bl	80021c0 <i2c_write_addr8_data8>
 800313e:	4603      	mov	r3, r0
 8003140:	461a      	mov	r2, r3
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	4013      	ands	r3, r2
 8003146:	2b00      	cmp	r3, #0
 8003148:	bf14      	ite	ne
 800314a:	2301      	movne	r3, #1
 800314c:	2300      	moveq	r3, #0
 800314e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003150:	2101      	movs	r1, #1
 8003152:	20ff      	movs	r0, #255	@ 0xff
 8003154:	f7ff f834 	bl	80021c0 <i2c_write_addr8_data8>
 8003158:	4603      	mov	r3, r0
 800315a:	461a      	mov	r2, r3
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x0D, 0x01);
 800316a:	2101      	movs	r1, #1
 800316c:	200d      	movs	r0, #13
 800316e:	f7ff f827 	bl	80021c0 <i2c_write_addr8_data8>
 8003172:	4603      	mov	r3, r0
 8003174:	461a      	mov	r2, r3
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	4013      	ands	r3, r2
 800317a:	2b00      	cmp	r3, #0
 800317c:	bf14      	ite	ne
 800317e:	2301      	movne	r3, #1
 8003180:	2300      	moveq	r3, #0
 8003182:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003184:	2100      	movs	r1, #0
 8003186:	20ff      	movs	r0, #255	@ 0xff
 8003188:	f7ff f81a 	bl	80021c0 <i2c_write_addr8_data8>
 800318c:	4603      	mov	r3, r0
 800318e:	461a      	mov	r2, r3
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x01);
 800319e:	2101      	movs	r1, #1
 80031a0:	2080      	movs	r0, #128	@ 0x80
 80031a2:	f7ff f80d 	bl	80021c0 <i2c_write_addr8_data8>
 80031a6:	4603      	mov	r3, r0
 80031a8:	461a      	mov	r2, r3
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf14      	ite	ne
 80031b2:	2301      	movne	r3, #1
 80031b4:	2300      	moveq	r3, #0
 80031b6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x01, 0xF8);
 80031b8:	21f8      	movs	r1, #248	@ 0xf8
 80031ba:	2001      	movs	r0, #1
 80031bc:	f7ff f800 	bl	80021c0 <i2c_write_addr8_data8>
 80031c0:	4603      	mov	r3, r0
 80031c2:	461a      	mov	r2, r3
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf14      	ite	ne
 80031cc:	2301      	movne	r3, #1
 80031ce:	2300      	moveq	r3, #0
 80031d0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 80031d2:	2101      	movs	r1, #1
 80031d4:	20ff      	movs	r0, #255	@ 0xff
 80031d6:	f7fe fff3 	bl	80021c0 <i2c_write_addr8_data8>
 80031da:	4603      	mov	r3, r0
 80031dc:	461a      	mov	r2, r3
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x8E, 0x01);
 80031ec:	2101      	movs	r1, #1
 80031ee:	208e      	movs	r0, #142	@ 0x8e
 80031f0:	f7fe ffe6 	bl	80021c0 <i2c_write_addr8_data8>
 80031f4:	4603      	mov	r3, r0
 80031f6:	461a      	mov	r2, r3
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf14      	ite	ne
 8003200:	2301      	movne	r3, #1
 8003202:	2300      	moveq	r3, #0
 8003204:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x01);
 8003206:	2101      	movs	r1, #1
 8003208:	2000      	movs	r0, #0
 800320a:	f7fe ffd9 	bl	80021c0 <i2c_write_addr8_data8>
 800320e:	4603      	mov	r3, r0
 8003210:	461a      	mov	r2, r3
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	bf14      	ite	ne
 800321a:	2301      	movne	r3, #1
 800321c:	2300      	moveq	r3, #0
 800321e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003220:	2100      	movs	r1, #0
 8003222:	20ff      	movs	r0, #255	@ 0xff
 8003224:	f7fe ffcc 	bl	80021c0 <i2c_write_addr8_data8>
 8003228:	4603      	mov	r3, r0
 800322a:	461a      	mov	r2, r3
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x00);
 800323a:	2100      	movs	r1, #0
 800323c:	2080      	movs	r0, #128	@ 0x80
 800323e:	f7fe ffbf 	bl	80021c0 <i2c_write_addr8_data8>
 8003242:	4603      	mov	r3, r0
 8003244:	461a      	mov	r2, r3
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	bf14      	ite	ne
 800324e:	2301      	movne	r3, #1
 8003250:	2300      	moveq	r3, #0
 8003252:	71fb      	strb	r3, [r7, #7]
    return success;
 8003254:	79fb      	ldrb	r3, [r7, #7]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <configure_interrupt>:

static bool configure_interrupt()
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
    /* Interrupt on new sample ready */
    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04)) {
 8003264:	2104      	movs	r1, #4
 8003266:	200a      	movs	r0, #10
 8003268:	f7fe ffaa 	bl	80021c0 <i2c_write_addr8_data8>
 800326c:	4603      	mov	r3, r0
 800326e:	f083 0301 	eor.w	r3, r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <configure_interrupt+0x1e>
        return false;
 8003278:	2300      	movs	r3, #0
 800327a:	e02d      	b.n	80032d8 <configure_interrupt+0x7a>
    }

    /* Configure active low since the pin is pulled-up on most breakout boards */
    uint8_t gpio_hv_mux_active_high = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	71fb      	strb	r3, [r7, #7]
    if (!i2c_read_addr8_data8(REG_GPIO_HV_MUX_ACTIVE_HIGH, &gpio_hv_mux_active_high)) {
 8003280:	1dfb      	adds	r3, r7, #7
 8003282:	4619      	mov	r1, r3
 8003284:	2084      	movs	r0, #132	@ 0x84
 8003286:	f7fe ff63 	bl	8002150 <i2c_read_addr8_data8>
 800328a:	4603      	mov	r3, r0
 800328c:	f083 0301 	eor.w	r3, r3, #1
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <configure_interrupt+0x3c>
        return false;
 8003296:	2300      	movs	r3, #0
 8003298:	e01e      	b.n	80032d8 <configure_interrupt+0x7a>
    }
    gpio_hv_mux_active_high &= ~0x10;
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	f023 0310 	bic.w	r3, r3, #16
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	71fb      	strb	r3, [r7, #7]
    if (!i2c_write_addr8_data8(REG_GPIO_HV_MUX_ACTIVE_HIGH, gpio_hv_mux_active_high)) {
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	4619      	mov	r1, r3
 80032a8:	2084      	movs	r0, #132	@ 0x84
 80032aa:	f7fe ff89 	bl	80021c0 <i2c_write_addr8_data8>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f083 0301 	eor.w	r3, r3, #1
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <configure_interrupt+0x60>
        return false;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e00c      	b.n	80032d8 <configure_interrupt+0x7a>
    }

    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CLEAR, 0x01)) {
 80032be:	2101      	movs	r1, #1
 80032c0:	200b      	movs	r0, #11
 80032c2:	f7fe ff7d 	bl	80021c0 <i2c_write_addr8_data8>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f083 0301 	eor.w	r3, r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <configure_interrupt+0x78>
        return false;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e000      	b.n	80032d8 <configure_interrupt+0x7a>
    }
    return true;
 80032d6:	2301      	movs	r3, #1
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <set_sequence_steps_enabled>:

/**
 * Enable (or disable) specific steps in the sequence
 */
static bool set_sequence_steps_enabled(uint8_t sequence_step)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	71fb      	strb	r3, [r7, #7]
    return i2c_write_addr8_data8(REG_SYSTEM_SEQUENCE_CONFIG, sequence_step);
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	4619      	mov	r1, r3
 80032ee:	2001      	movs	r0, #1
 80032f0:	f7fe ff66 	bl	80021c0 <i2c_write_addr8_data8>
 80032f4:	4603      	mov	r3, r0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <static_init>:

/**
 * Basic device initialization
 */
static bool static_init()
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	af00      	add	r7, sp, #0
    if (!set_spads_from_nvm()) {
 8003302:	f7ff faaa 	bl	800285a <set_spads_from_nvm>
 8003306:	4603      	mov	r3, r0
 8003308:	f083 0301 	eor.w	r3, r3, #1
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <static_init+0x18>
        return false;
 8003312:	2300      	movs	r3, #0
 8003314:	e01f      	b.n	8003356 <static_init+0x58>
    }

    if (!load_default_tuning_settings()) {
 8003316:	f7ff fb91 	bl	8002a3c <load_default_tuning_settings>
 800331a:	4603      	mov	r3, r0
 800331c:	f083 0301 	eor.w	r3, r3, #1
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <static_init+0x2c>
        return false;
 8003326:	2300      	movs	r3, #0
 8003328:	e015      	b.n	8003356 <static_init+0x58>
    }

    if (!configure_interrupt()) {
 800332a:	f7ff ff98 	bl	800325e <configure_interrupt>
 800332e:	4603      	mov	r3, r0
 8003330:	f083 0301 	eor.w	r3, r3, #1
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <static_init+0x40>
        return false;
 800333a:	2300      	movs	r3, #0
 800333c:	e00b      	b.n	8003356 <static_init+0x58>
    }

    if (!set_sequence_steps_enabled(RANGE_SEQUENCE_STEP_DSS +
 800333e:	20e8      	movs	r0, #232	@ 0xe8
 8003340:	f7ff ffce 	bl	80032e0 <set_sequence_steps_enabled>
 8003344:	4603      	mov	r3, r0
 8003346:	f083 0301 	eor.w	r3, r3, #1
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <static_init+0x56>
                                    RANGE_SEQUENCE_STEP_PRE_RANGE +
                                    RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
        return false;
 8003350:	2300      	movs	r3, #0
 8003352:	e000      	b.n	8003356 <static_init+0x58>
    }

    return true;
 8003354:	2301      	movs	r3, #1
}
 8003356:	4618      	mov	r0, r3
 8003358:	bd80      	pop	{r7, pc}

0800335a <perform_single_ref_calibration>:

static bool perform_single_ref_calibration(calibration_type_t calib_type)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	4603      	mov	r3, r0
 8003362:	71fb      	strb	r3, [r7, #7]
    uint8_t sysrange_start = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	73fb      	strb	r3, [r7, #15]
    uint8_t sequence_config = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	73bb      	strb	r3, [r7, #14]
    switch (calib_type)
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <perform_single_ref_calibration+0x1e>
 8003372:	2b01      	cmp	r3, #1
 8003374:	d005      	beq.n	8003382 <perform_single_ref_calibration+0x28>
 8003376:	e009      	b.n	800338c <perform_single_ref_calibration+0x32>
    {
    case CALIBRATION_TYPE_VHV:
        sequence_config = 0x01;
 8003378:	2301      	movs	r3, #1
 800337a:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x40;
 800337c:	2341      	movs	r3, #65	@ 0x41
 800337e:	73fb      	strb	r3, [r7, #15]
        break;
 8003380:	e004      	b.n	800338c <perform_single_ref_calibration+0x32>
    case CALIBRATION_TYPE_PHASE:
        sequence_config = 0x02;
 8003382:	2302      	movs	r3, #2
 8003384:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x00;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
        break;
 800338a:	bf00      	nop
    }
    if (!i2c_write_addr8_data8(REG_SYSTEM_SEQUENCE_CONFIG, sequence_config)) {
 800338c:	7bbb      	ldrb	r3, [r7, #14]
 800338e:	4619      	mov	r1, r3
 8003390:	2001      	movs	r0, #1
 8003392:	f7fe ff15 	bl	80021c0 <i2c_write_addr8_data8>
 8003396:	4603      	mov	r3, r0
 8003398:	f083 0301 	eor.w	r3, r3, #1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <perform_single_ref_calibration+0x4c>
        return false;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e041      	b.n	800342a <perform_single_ref_calibration+0xd0>
    }
    if (!i2c_write_addr8_data8(REG_SYSRANGE_START, sysrange_start)) {
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	4619      	mov	r1, r3
 80033aa:	2000      	movs	r0, #0
 80033ac:	f7fe ff08 	bl	80021c0 <i2c_write_addr8_data8>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f083 0301 	eor.w	r3, r3, #1
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <perform_single_ref_calibration+0x66>
        return false;
 80033bc:	2300      	movs	r3, #0
 80033be:	e034      	b.n	800342a <perform_single_ref_calibration+0xd0>
    }
    /* Wait for interrupt */
    uint8_t interrupt_status = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	733b      	strb	r3, [r7, #12]
    bool success = false;
 80033c4:	2300      	movs	r3, #0
 80033c6:	737b      	strb	r3, [r7, #13]
    do {
        success = i2c_read_addr8_data8(REG_RESULT_INTERRUPT_STATUS, &interrupt_status);
 80033c8:	f107 030c 	add.w	r3, r7, #12
 80033cc:	4619      	mov	r1, r3
 80033ce:	2013      	movs	r0, #19
 80033d0:	f7fe febe 	bl	8002150 <i2c_read_addr8_data8>
 80033d4:	4603      	mov	r3, r0
 80033d6:	737b      	strb	r3, [r7, #13]
    } while (success && ((interrupt_status & 0x07) == 0));
 80033d8:	7b7b      	ldrb	r3, [r7, #13]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d004      	beq.n	80033e8 <perform_single_ref_calibration+0x8e>
 80033de:	7b3b      	ldrb	r3, [r7, #12]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0ef      	beq.n	80033c8 <perform_single_ref_calibration+0x6e>
    if (!success) {
 80033e8:	7b7b      	ldrb	r3, [r7, #13]
 80033ea:	f083 0301 	eor.w	r3, r3, #1
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <perform_single_ref_calibration+0x9e>
        return false;
 80033f4:	2300      	movs	r3, #0
 80033f6:	e018      	b.n	800342a <perform_single_ref_calibration+0xd0>
    }
    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CLEAR, 0x01)) {
 80033f8:	2101      	movs	r1, #1
 80033fa:	200b      	movs	r0, #11
 80033fc:	f7fe fee0 	bl	80021c0 <i2c_write_addr8_data8>
 8003400:	4603      	mov	r3, r0
 8003402:	f083 0301 	eor.w	r3, r3, #1
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <perform_single_ref_calibration+0xb6>
        return false;
 800340c:	2300      	movs	r3, #0
 800340e:	e00c      	b.n	800342a <perform_single_ref_calibration+0xd0>
    }

    if (!i2c_write_addr8_data8(REG_SYSRANGE_START, 0x00)) {
 8003410:	2100      	movs	r1, #0
 8003412:	2000      	movs	r0, #0
 8003414:	f7fe fed4 	bl	80021c0 <i2c_write_addr8_data8>
 8003418:	4603      	mov	r3, r0
 800341a:	f083 0301 	eor.w	r3, r3, #1
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <perform_single_ref_calibration+0xce>
        return false;
 8003424:	2300      	movs	r3, #0
 8003426:	e000      	b.n	800342a <perform_single_ref_calibration+0xd0>
    }
    return true;
 8003428:	2301      	movs	r3, #1
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <perform_ref_calibration>:
/**
 * Temperature calibration needs to be run again if the temperature changes by
 * more than 8 degrees according to the datasheet.
 */
static bool perform_ref_calibration()
{
 8003432:	b580      	push	{r7, lr}
 8003434:	af00      	add	r7, sp, #0
    if (!perform_single_ref_calibration(CALIBRATION_TYPE_VHV)) {
 8003436:	2000      	movs	r0, #0
 8003438:	f7ff ff8f 	bl	800335a <perform_single_ref_calibration>
 800343c:	4603      	mov	r3, r0
 800343e:	f083 0301 	eor.w	r3, r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <perform_ref_calibration+0x1a>
        return false;
 8003448:	2300      	movs	r3, #0
 800344a:	e016      	b.n	800347a <perform_ref_calibration+0x48>
    }
    if (!perform_single_ref_calibration(CALIBRATION_TYPE_PHASE)) {
 800344c:	2001      	movs	r0, #1
 800344e:	f7ff ff84 	bl	800335a <perform_single_ref_calibration>
 8003452:	4603      	mov	r3, r0
 8003454:	f083 0301 	eor.w	r3, r3, #1
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <perform_ref_calibration+0x30>
        return false;
 800345e:	2300      	movs	r3, #0
 8003460:	e00b      	b.n	800347a <perform_ref_calibration+0x48>
    }
    /* Restore sequence steps enabled */
    if (!set_sequence_steps_enabled(RANGE_SEQUENCE_STEP_DSS +
 8003462:	20e8      	movs	r0, #232	@ 0xe8
 8003464:	f7ff ff3c 	bl	80032e0 <set_sequence_steps_enabled>
 8003468:	4603      	mov	r3, r0
 800346a:	f083 0301 	eor.w	r3, r3, #1
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <perform_ref_calibration+0x46>
                                    RANGE_SEQUENCE_STEP_PRE_RANGE +
                                    RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
        return false;
 8003474:	2300      	movs	r3, #0
 8003476:	e000      	b.n	800347a <perform_ref_calibration+0x48>
    }
    return true;
 8003478:	2301      	movs	r3, #1
}
 800347a:	4618      	mov	r0, r3
 800347c:	bd80      	pop	{r7, pc}

0800347e <configure_gpio>:
 * hardware standby after this function is called.
 *
 * NOTE: The pins are hard-coded to P1.0, P1.1, and P1.2.
 **/
static void configure_gpio()
{
 800347e:	b480      	push	{r7}
 8003480:	af00      	add	r7, sp, #0

}
 8003482:	bf00      	nop
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <init_address>:

/* Sets the address of a single VL53L0X sensor.
 * This functions assumes that all non-configured VL53L0X are still
 * in hardware standby. */
static bool init_address(vl53l0x_idx_t idx)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	71fb      	strb	r3, [r7, #7]
    //set_hardware_standby(idx, false);
    selectTCAChannel(vl53l0x_infos[idx].mux_channel);
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	4a0c      	ldr	r2, [pc, #48]	@ (80034cc <init_address+0x40>)
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	4618      	mov	r0, r3
 800349e:	f7fe fc53 	bl	8001d48 <selectTCAChannel>
    /* The datasheet doesn't say how long we must wait to leave hw standby,
     * but using the same delay as vl6180x seems to work fine. */
    HAL_Delay(1);
 80034a2:	2001      	movs	r0, #1
 80034a4:	f000 f934 	bl	8003710 <HAL_Delay>

    if (!device_is_booted()) {
 80034a8:	f7fe ff92 	bl	80023d0 <device_is_booted>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f083 0301 	eor.w	r3, r3, #1
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d004      	beq.n	80034c2 <init_address+0x36>
        my_printf("device is not booted\n");
 80034b8:	4805      	ldr	r0, [pc, #20]	@ (80034d0 <init_address+0x44>)
 80034ba:	f7fe fe21 	bl	8002100 <my_printf>
        return false;
 80034be:	2300      	movs	r3, #0
 80034c0:	e000      	b.n	80034c4 <init_address+0x38>
    }

    return true;
 80034c2:	2301      	movs	r3, #1
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	0800ef70 	.word	0x0800ef70
 80034d0:	0800eeac 	.word	0x0800eeac

080034d4 <init_addresses>:
/**
 * Initializes the sensors by putting them in hw standby and then
 * waking them up one-by-one as described in AN4846.
 */
static bool init_addresses()
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
    /* Puts all sensors in hardware standby */
    configure_gpio();
 80034d8:	f7ff ffd1 	bl	800347e <configure_gpio>

    /* Wake each sensor up one by one and set a unique address for each one */
    if (!init_address(VL53L0X_IDX_FIRST)) {
 80034dc:	2000      	movs	r0, #0
 80034de:	f7ff ffd5 	bl	800348c <init_address>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f083 0301 	eor.w	r3, r3, #1
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d004      	beq.n	80034f8 <init_addresses+0x24>
        my_printf("fail init address first sensor\r\n");
 80034ee:	4809      	ldr	r0, [pc, #36]	@ (8003514 <init_addresses+0x40>)
 80034f0:	f7fe fe06 	bl	8002100 <my_printf>
        return false;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e00b      	b.n	8003510 <init_addresses+0x3c>
    }
    if (!init_address(VL53L0X_IDX_SECOND)) {
 80034f8:	2001      	movs	r0, #1
 80034fa:	f7ff ffc7 	bl	800348c <init_address>
 80034fe:	4603      	mov	r3, r0
 8003500:	f083 0301 	eor.w	r3, r3, #1
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <init_addresses+0x3a>
        return false;
 800350a:	2300      	movs	r3, #0
 800350c:	e000      	b.n	8003510 <init_addresses+0x3c>
    }
    return true;
 800350e:	2301      	movs	r3, #1
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	0800eec4 	.word	0x0800eec4

08003518 <init_config>:

static bool init_config(vl53l0x_idx_t idx)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	71fb      	strb	r3, [r7, #7]
    //i2c_set_slave_address(vl53l0x_infos[idx].addr);
	selectTCAChannel(vl53l0x_infos[idx].mux_channel);
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	4a13      	ldr	r2, [pc, #76]	@ (8003574 <init_config+0x5c>)
 8003526:	5cd3      	ldrb	r3, [r2, r3]
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe fc0d 	bl	8001d48 <selectTCAChannel>

    if (!data_init()) {
 800352e:	f7fe ff7f 	bl	8002430 <data_init>
 8003532:	4603      	mov	r3, r0
 8003534:	f083 0301 	eor.w	r3, r3, #1
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <init_config+0x2a>
        return false;
 800353e:	2300      	movs	r3, #0
 8003540:	e014      	b.n	800356c <init_config+0x54>
    }
    if (!static_init()) {
 8003542:	f7ff fedc 	bl	80032fe <static_init>
 8003546:	4603      	mov	r3, r0
 8003548:	f083 0301 	eor.w	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <init_config+0x3e>
        return false;
 8003552:	2300      	movs	r3, #0
 8003554:	e00a      	b.n	800356c <init_config+0x54>
    }
    if (!perform_ref_calibration()) {
 8003556:	f7ff ff6c 	bl	8003432 <perform_ref_calibration>
 800355a:	4603      	mov	r3, r0
 800355c:	f083 0301 	eor.w	r3, r3, #1
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <init_config+0x52>
        return false;
 8003566:	2300      	movs	r3, #0
 8003568:	e000      	b.n	800356c <init_config+0x54>
    }
    return true;
 800356a:	2301      	movs	r3, #1
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	0800ef70 	.word	0x0800ef70

08003578 <vl53l0x_init>:

bool vl53l0x_init()
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
    if (!init_addresses()) {
 800357c:	f7ff ffaa 	bl	80034d4 <init_addresses>
 8003580:	4603      	mov	r3, r0
 8003582:	f083 0301 	eor.w	r3, r3, #1
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d004      	beq.n	8003596 <vl53l0x_init+0x1e>
        my_printf("fail init address\r\n");
 800358c:	4810      	ldr	r0, [pc, #64]	@ (80035d0 <vl53l0x_init+0x58>)
 800358e:	f7fe fdb7 	bl	8002100 <my_printf>
        return false;
 8003592:	2300      	movs	r3, #0
 8003594:	e019      	b.n	80035ca <vl53l0x_init+0x52>
    }
    if (!init_config(VL53L0X_IDX_FIRST)) {
 8003596:	2000      	movs	r0, #0
 8003598:	f7ff ffbe 	bl	8003518 <init_config>
 800359c:	4603      	mov	r3, r0
 800359e:	f083 0301 	eor.w	r3, r3, #1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d004      	beq.n	80035b2 <vl53l0x_init+0x3a>
        my_printf("fail init first\r\n");
 80035a8:	480a      	ldr	r0, [pc, #40]	@ (80035d4 <vl53l0x_init+0x5c>)
 80035aa:	f7fe fda9 	bl	8002100 <my_printf>
        return false;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e00b      	b.n	80035ca <vl53l0x_init+0x52>
    }
    if (!init_config(VL53L0X_IDX_SECOND)) {
 80035b2:	2001      	movs	r0, #1
 80035b4:	f7ff ffb0 	bl	8003518 <init_config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f083 0301 	eor.w	r3, r3, #1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <vl53l0x_init+0x50>
        return false;
 80035c4:	2300      	movs	r3, #0
 80035c6:	e000      	b.n	80035ca <vl53l0x_init+0x52>
    }
    return true;
 80035c8:	2301      	movs	r3, #1
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	0800eee8 	.word	0x0800eee8
 80035d4:	0800eefc 	.word	0x0800eefc

080035d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80035d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003610 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035dc:	f7fe fba2 	bl	8001d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035e0:	480c      	ldr	r0, [pc, #48]	@ (8003614 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035e2:	490d      	ldr	r1, [pc, #52]	@ (8003618 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035e4:	4a0d      	ldr	r2, [pc, #52]	@ (800361c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035e8:	e002      	b.n	80035f0 <LoopCopyDataInit>

080035ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ee:	3304      	adds	r3, #4

080035f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035f4:	d3f9      	bcc.n	80035ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003620 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035f8:	4c0a      	ldr	r4, [pc, #40]	@ (8003624 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035fc:	e001      	b.n	8003602 <LoopFillZerobss>

080035fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003600:	3204      	adds	r2, #4

08003602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003604:	d3fb      	bcc.n	80035fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003606:	f009 faad 	bl	800cb64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800360a:	f7fd fcb3 	bl	8000f74 <main>
  bx  lr    
 800360e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003610:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003618:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 800361c:	0800f2f4 	.word	0x0800f2f4
  ldr r2, =_sbss
 8003620:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8003624:	200021fc 	.word	0x200021fc

08003628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003628:	e7fe      	b.n	8003628 <ADC_IRQHandler>
	...

0800362c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003630:	4b0e      	ldr	r3, [pc, #56]	@ (800366c <HAL_Init+0x40>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a0d      	ldr	r2, [pc, #52]	@ (800366c <HAL_Init+0x40>)
 8003636:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800363a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800363c:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <HAL_Init+0x40>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <HAL_Init+0x40>)
 8003642:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003646:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003648:	4b08      	ldr	r3, [pc, #32]	@ (800366c <HAL_Init+0x40>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a07      	ldr	r2, [pc, #28]	@ (800366c <HAL_Init+0x40>)
 800364e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003652:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003654:	2003      	movs	r0, #3
 8003656:	f000 f94f 	bl	80038f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800365a:	200f      	movs	r0, #15
 800365c:	f000 f808 	bl	8003670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003660:	f7fe f89e 	bl	80017a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40023c00 	.word	0x40023c00

08003670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003678:	4b12      	ldr	r3, [pc, #72]	@ (80036c4 <HAL_InitTick+0x54>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b12      	ldr	r3, [pc, #72]	@ (80036c8 <HAL_InitTick+0x58>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	4619      	mov	r1, r3
 8003682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003686:	fbb3 f3f1 	udiv	r3, r3, r1
 800368a:	fbb2 f3f3 	udiv	r3, r2, r3
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f967 	bl	8003962 <HAL_SYSTICK_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e00e      	b.n	80036bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b0f      	cmp	r3, #15
 80036a2:	d80a      	bhi.n	80036ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a4:	2200      	movs	r2, #0
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036ac:	f000 f92f 	bl	800390e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036b0:	4a06      	ldr	r2, [pc, #24]	@ (80036cc <HAL_InitTick+0x5c>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	e000      	b.n	80036bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000000 	.word	0x20000000
 80036c8:	20000008 	.word	0x20000008
 80036cc:	20000004 	.word	0x20000004

080036d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036d4:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <HAL_IncTick+0x20>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <HAL_IncTick+0x24>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	4a04      	ldr	r2, [pc, #16]	@ (80036f4 <HAL_IncTick+0x24>)
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000008 	.word	0x20000008
 80036f4:	200004c8 	.word	0x200004c8

080036f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return uwTick;
 80036fc:	4b03      	ldr	r3, [pc, #12]	@ (800370c <HAL_GetTick+0x14>)
 80036fe:	681b      	ldr	r3, [r3, #0]
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	200004c8 	.word	0x200004c8

08003710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003718:	f7ff ffee 	bl	80036f8 <HAL_GetTick>
 800371c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003728:	d005      	beq.n	8003736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800372a:	4b0a      	ldr	r3, [pc, #40]	@ (8003754 <HAL_Delay+0x44>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003736:	bf00      	nop
 8003738:	f7ff ffde 	bl	80036f8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	429a      	cmp	r2, r3
 8003746:	d8f7      	bhi.n	8003738 <HAL_Delay+0x28>
  {
  }
}
 8003748:	bf00      	nop
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20000008 	.word	0x20000008

08003758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003768:	4b0c      	ldr	r3, [pc, #48]	@ (800379c <__NVIC_SetPriorityGrouping+0x44>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003774:	4013      	ands	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800378a:	4a04      	ldr	r2, [pc, #16]	@ (800379c <__NVIC_SetPriorityGrouping+0x44>)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	60d3      	str	r3, [r2, #12]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000ed00 	.word	0xe000ed00

080037a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a4:	4b04      	ldr	r3, [pc, #16]	@ (80037b8 <__NVIC_GetPriorityGrouping+0x18>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	0a1b      	lsrs	r3, r3, #8
 80037aa:	f003 0307 	and.w	r3, r3, #7
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	db0b      	blt.n	80037e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	f003 021f 	and.w	r2, r3, #31
 80037d4:	4907      	ldr	r1, [pc, #28]	@ (80037f4 <__NVIC_EnableIRQ+0x38>)
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	2001      	movs	r0, #1
 80037de:	fa00 f202 	lsl.w	r2, r0, r2
 80037e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	e000e100 	.word	0xe000e100

080037f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	6039      	str	r1, [r7, #0]
 8003802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003808:	2b00      	cmp	r3, #0
 800380a:	db0a      	blt.n	8003822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	b2da      	uxtb	r2, r3
 8003810:	490c      	ldr	r1, [pc, #48]	@ (8003844 <__NVIC_SetPriority+0x4c>)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	0112      	lsls	r2, r2, #4
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	440b      	add	r3, r1
 800381c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003820:	e00a      	b.n	8003838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	b2da      	uxtb	r2, r3
 8003826:	4908      	ldr	r1, [pc, #32]	@ (8003848 <__NVIC_SetPriority+0x50>)
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	3b04      	subs	r3, #4
 8003830:	0112      	lsls	r2, r2, #4
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	440b      	add	r3, r1
 8003836:	761a      	strb	r2, [r3, #24]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000e100 	.word	0xe000e100
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	@ 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f1c3 0307 	rsb	r3, r3, #7
 8003866:	2b04      	cmp	r3, #4
 8003868:	bf28      	it	cs
 800386a:	2304      	movcs	r3, #4
 800386c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3304      	adds	r3, #4
 8003872:	2b06      	cmp	r3, #6
 8003874:	d902      	bls.n	800387c <NVIC_EncodePriority+0x30>
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3b03      	subs	r3, #3
 800387a:	e000      	b.n	800387e <NVIC_EncodePriority+0x32>
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003880:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43da      	mvns	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	401a      	ands	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003894:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	fa01 f303 	lsl.w	r3, r1, r3
 800389e:	43d9      	mvns	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a4:	4313      	orrs	r3, r2
         );
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3724      	adds	r7, #36	@ 0x24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038c4:	d301      	bcc.n	80038ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038c6:	2301      	movs	r3, #1
 80038c8:	e00f      	b.n	80038ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ca:	4a0a      	ldr	r2, [pc, #40]	@ (80038f4 <SysTick_Config+0x40>)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d2:	210f      	movs	r1, #15
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038d8:	f7ff ff8e 	bl	80037f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038dc:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <SysTick_Config+0x40>)
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e2:	4b04      	ldr	r3, [pc, #16]	@ (80038f4 <SysTick_Config+0x40>)
 80038e4:	2207      	movs	r2, #7
 80038e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	e000e010 	.word	0xe000e010

080038f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ff29 	bl	8003758 <__NVIC_SetPriorityGrouping>
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	4603      	mov	r3, r0
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003920:	f7ff ff3e 	bl	80037a0 <__NVIC_GetPriorityGrouping>
 8003924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	6978      	ldr	r0, [r7, #20]
 800392c:	f7ff ff8e 	bl	800384c <NVIC_EncodePriority>
 8003930:	4602      	mov	r2, r0
 8003932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff ff5d 	bl	80037f8 <__NVIC_SetPriority>
}
 800393e:	bf00      	nop
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	4603      	mov	r3, r0
 800394e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ff31 	bl	80037bc <__NVIC_EnableIRQ>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ffa2 	bl	80038b4 <SysTick_Config>
 8003970:	4603      	mov	r3, r0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	@ 0x24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800398a:	2300      	movs	r3, #0
 800398c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	e159      	b.n	8003c4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003998:	2201      	movs	r2, #1
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4013      	ands	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	f040 8148 	bne.w	8003c46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d005      	beq.n	80039ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d130      	bne.n	8003a30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	2203      	movs	r2, #3
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a04:	2201      	movs	r2, #1
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f003 0201 	and.w	r2, r3, #1
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d017      	beq.n	8003a6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	2203      	movs	r2, #3
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d123      	bne.n	8003ac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	08da      	lsrs	r2, r3, #3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3208      	adds	r2, #8
 8003a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	220f      	movs	r2, #15
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	08da      	lsrs	r2, r3, #3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3208      	adds	r2, #8
 8003aba:	69b9      	ldr	r1, [r7, #24]
 8003abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	2203      	movs	r2, #3
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 0203 	and.w	r2, r3, #3
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80a2 	beq.w	8003c46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	4b57      	ldr	r3, [pc, #348]	@ (8003c64 <HAL_GPIO_Init+0x2e8>)
 8003b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0a:	4a56      	ldr	r2, [pc, #344]	@ (8003c64 <HAL_GPIO_Init+0x2e8>)
 8003b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b12:	4b54      	ldr	r3, [pc, #336]	@ (8003c64 <HAL_GPIO_Init+0x2e8>)
 8003b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b1e:	4a52      	ldr	r2, [pc, #328]	@ (8003c68 <HAL_GPIO_Init+0x2ec>)
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	089b      	lsrs	r3, r3, #2
 8003b24:	3302      	adds	r3, #2
 8003b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	220f      	movs	r2, #15
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a49      	ldr	r2, [pc, #292]	@ (8003c6c <HAL_GPIO_Init+0x2f0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d019      	beq.n	8003b7e <HAL_GPIO_Init+0x202>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a48      	ldr	r2, [pc, #288]	@ (8003c70 <HAL_GPIO_Init+0x2f4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d013      	beq.n	8003b7a <HAL_GPIO_Init+0x1fe>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a47      	ldr	r2, [pc, #284]	@ (8003c74 <HAL_GPIO_Init+0x2f8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00d      	beq.n	8003b76 <HAL_GPIO_Init+0x1fa>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a46      	ldr	r2, [pc, #280]	@ (8003c78 <HAL_GPIO_Init+0x2fc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d007      	beq.n	8003b72 <HAL_GPIO_Init+0x1f6>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a45      	ldr	r2, [pc, #276]	@ (8003c7c <HAL_GPIO_Init+0x300>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d101      	bne.n	8003b6e <HAL_GPIO_Init+0x1f2>
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	e008      	b.n	8003b80 <HAL_GPIO_Init+0x204>
 8003b6e:	2307      	movs	r3, #7
 8003b70:	e006      	b.n	8003b80 <HAL_GPIO_Init+0x204>
 8003b72:	2303      	movs	r3, #3
 8003b74:	e004      	b.n	8003b80 <HAL_GPIO_Init+0x204>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e002      	b.n	8003b80 <HAL_GPIO_Init+0x204>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_GPIO_Init+0x204>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	f002 0203 	and.w	r2, r2, #3
 8003b86:	0092      	lsls	r2, r2, #2
 8003b88:	4093      	lsls	r3, r2
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b90:	4935      	ldr	r1, [pc, #212]	@ (8003c68 <HAL_GPIO_Init+0x2ec>)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	3302      	adds	r3, #2
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b9e:	4b38      	ldr	r3, [pc, #224]	@ (8003c80 <HAL_GPIO_Init+0x304>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bc2:	4a2f      	ldr	r2, [pc, #188]	@ (8003c80 <HAL_GPIO_Init+0x304>)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c80 <HAL_GPIO_Init+0x304>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bec:	4a24      	ldr	r2, [pc, #144]	@ (8003c80 <HAL_GPIO_Init+0x304>)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bf2:	4b23      	ldr	r3, [pc, #140]	@ (8003c80 <HAL_GPIO_Init+0x304>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c16:	4a1a      	ldr	r2, [pc, #104]	@ (8003c80 <HAL_GPIO_Init+0x304>)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c1c:	4b18      	ldr	r3, [pc, #96]	@ (8003c80 <HAL_GPIO_Init+0x304>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	43db      	mvns	r3, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c40:	4a0f      	ldr	r2, [pc, #60]	@ (8003c80 <HAL_GPIO_Init+0x304>)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	2b0f      	cmp	r3, #15
 8003c50:	f67f aea2 	bls.w	8003998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	3724      	adds	r7, #36	@ 0x24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800
 8003c68:	40013800 	.word	0x40013800
 8003c6c:	40020000 	.word	0x40020000
 8003c70:	40020400 	.word	0x40020400
 8003c74:	40020800 	.word	0x40020800
 8003c78:	40020c00 	.word	0x40020c00
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40013c00 	.word	0x40013c00

08003c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]
 8003c90:	4613      	mov	r3, r2
 8003c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c94:	787b      	ldrb	r3, [r7, #1]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c9a:	887a      	ldrh	r2, [r7, #2]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ca0:	e003      	b.n	8003caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ca2:	887b      	ldrh	r3, [r7, #2]
 8003ca4:	041a      	lsls	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	619a      	str	r2, [r3, #24]
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cc8:	887a      	ldrh	r2, [r7, #2]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	041a      	lsls	r2, r3, #16
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	43d9      	mvns	r1, r3
 8003cd4:	887b      	ldrh	r3, [r7, #2]
 8003cd6:	400b      	ands	r3, r1
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	619a      	str	r2, [r3, #24]
}
 8003cde:	bf00      	nop
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e12b      	b.n	8003f56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fd fd6c 	bl	80017f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2224      	movs	r2, #36	@ 0x24
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d50:	f002 fe48 	bl	80069e4 <HAL_RCC_GetPCLK1Freq>
 8003d54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	4a81      	ldr	r2, [pc, #516]	@ (8003f60 <HAL_I2C_Init+0x274>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d807      	bhi.n	8003d70 <HAL_I2C_Init+0x84>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a80      	ldr	r2, [pc, #512]	@ (8003f64 <HAL_I2C_Init+0x278>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	bf94      	ite	ls
 8003d68:	2301      	movls	r3, #1
 8003d6a:	2300      	movhi	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	e006      	b.n	8003d7e <HAL_I2C_Init+0x92>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4a7d      	ldr	r2, [pc, #500]	@ (8003f68 <HAL_I2C_Init+0x27c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	bf94      	ite	ls
 8003d78:	2301      	movls	r3, #1
 8003d7a:	2300      	movhi	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e0e7      	b.n	8003f56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4a78      	ldr	r2, [pc, #480]	@ (8003f6c <HAL_I2C_Init+0x280>)
 8003d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8e:	0c9b      	lsrs	r3, r3, #18
 8003d90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	4a6a      	ldr	r2, [pc, #424]	@ (8003f60 <HAL_I2C_Init+0x274>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d802      	bhi.n	8003dc0 <HAL_I2C_Init+0xd4>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	e009      	b.n	8003dd4 <HAL_I2C_Init+0xe8>
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	4a69      	ldr	r2, [pc, #420]	@ (8003f70 <HAL_I2C_Init+0x284>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	099b      	lsrs	r3, r3, #6
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003de6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	495c      	ldr	r1, [pc, #368]	@ (8003f60 <HAL_I2C_Init+0x274>)
 8003df0:	428b      	cmp	r3, r1
 8003df2:	d819      	bhi.n	8003e28 <HAL_I2C_Init+0x13c>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1e59      	subs	r1, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e02:	1c59      	adds	r1, r3, #1
 8003e04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e08:	400b      	ands	r3, r1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_I2C_Init+0x138>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1e59      	subs	r1, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e22:	e051      	b.n	8003ec8 <HAL_I2C_Init+0x1dc>
 8003e24:	2304      	movs	r3, #4
 8003e26:	e04f      	b.n	8003ec8 <HAL_I2C_Init+0x1dc>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d111      	bne.n	8003e54 <HAL_I2C_Init+0x168>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1e58      	subs	r0, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6859      	ldr	r1, [r3, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	440b      	add	r3, r1
 8003e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e42:	3301      	adds	r3, #1
 8003e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	e012      	b.n	8003e7a <HAL_I2C_Init+0x18e>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	1e58      	subs	r0, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6859      	ldr	r1, [r3, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	0099      	lsls	r1, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Init+0x196>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e022      	b.n	8003ec8 <HAL_I2C_Init+0x1dc>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10e      	bne.n	8003ea8 <HAL_I2C_Init+0x1bc>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1e58      	subs	r0, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6859      	ldr	r1, [r3, #4]
 8003e92:	460b      	mov	r3, r1
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	440b      	add	r3, r1
 8003e98:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ea6:	e00f      	b.n	8003ec8 <HAL_I2C_Init+0x1dc>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1e58      	subs	r0, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	0099      	lsls	r1, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	6809      	ldr	r1, [r1, #0]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69da      	ldr	r2, [r3, #28]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ef6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6911      	ldr	r1, [r2, #16]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68d2      	ldr	r2, [r2, #12]
 8003f02:	4311      	orrs	r1, r2
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6812      	ldr	r2, [r2, #0]
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	000186a0 	.word	0x000186a0
 8003f64:	001e847f 	.word	0x001e847f
 8003f68:	003d08ff 	.word	0x003d08ff
 8003f6c:	431bde83 	.word	0x431bde83
 8003f70:	10624dd3 	.word	0x10624dd3

08003f74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	607a      	str	r2, [r7, #4]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	460b      	mov	r3, r1
 8003f82:	817b      	strh	r3, [r7, #10]
 8003f84:	4613      	mov	r3, r2
 8003f86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f88:	f7ff fbb6 	bl	80036f8 <HAL_GetTick>
 8003f8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	f040 80e0 	bne.w	800415c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2319      	movs	r3, #25
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	4970      	ldr	r1, [pc, #448]	@ (8004168 <HAL_I2C_Master_Transmit+0x1f4>)
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fc64 	bl	8004874 <I2C_WaitOnFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e0d3      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_I2C_Master_Transmit+0x50>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e0cc      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d007      	beq.n	8003fea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0201 	orr.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ff8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2221      	movs	r2, #33	@ 0x21
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2210      	movs	r2, #16
 8004006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	893a      	ldrh	r2, [r7, #8]
 800401a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a50      	ldr	r2, [pc, #320]	@ (800416c <HAL_I2C_Master_Transmit+0x1f8>)
 800402a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800402c:	8979      	ldrh	r1, [r7, #10]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	6a3a      	ldr	r2, [r7, #32]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 face 	bl	80045d4 <I2C_MasterRequestWrite>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e08d      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004058:	e066      	b.n	8004128 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	6a39      	ldr	r1, [r7, #32]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 fd22 	bl	8004aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00d      	beq.n	8004086 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406e:	2b04      	cmp	r3, #4
 8004070:	d107      	bne.n	8004082 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004080:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e06b      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408a:	781a      	ldrb	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d11b      	bne.n	80040fc <HAL_I2C_Master_Transmit+0x188>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d017      	beq.n	80040fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	781a      	ldrb	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	6a39      	ldr	r1, [r7, #32]
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 fd19 	bl	8004b38 <I2C_WaitOnBTFFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00d      	beq.n	8004128 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004110:	2b04      	cmp	r3, #4
 8004112:	d107      	bne.n	8004124 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004122:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e01a      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412c:	2b00      	cmp	r3, #0
 800412e:	d194      	bne.n	800405a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800413e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	e000      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800415c:	2302      	movs	r3, #2
  }
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	00100002 	.word	0x00100002
 800416c:	ffff0000 	.word	0xffff0000

08004170 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08c      	sub	sp, #48	@ 0x30
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	461a      	mov	r2, r3
 800417c:	460b      	mov	r3, r1
 800417e:	817b      	strh	r3, [r7, #10]
 8004180:	4613      	mov	r3, r2
 8004182:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004184:	f7ff fab8 	bl	80036f8 <HAL_GetTick>
 8004188:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b20      	cmp	r3, #32
 8004194:	f040 8217 	bne.w	80045c6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	2319      	movs	r3, #25
 800419e:	2201      	movs	r2, #1
 80041a0:	497c      	ldr	r1, [pc, #496]	@ (8004394 <HAL_I2C_Master_Receive+0x224>)
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 fb66 	bl	8004874 <I2C_WaitOnFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
 80041b0:	e20a      	b.n	80045c8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_I2C_Master_Receive+0x50>
 80041bc:	2302      	movs	r3, #2
 80041be:	e203      	b.n	80045c8 <HAL_I2C_Master_Receive+0x458>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d007      	beq.n	80041e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 0201 	orr.w	r2, r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2222      	movs	r2, #34	@ 0x22
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2210      	movs	r2, #16
 8004202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	893a      	ldrh	r2, [r7, #8]
 8004216:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4a5c      	ldr	r2, [pc, #368]	@ (8004398 <HAL_I2C_Master_Receive+0x228>)
 8004226:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004228:	8979      	ldrh	r1, [r7, #10]
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fa52 	bl	80046d8 <I2C_MasterRequestRead>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e1c4      	b.n	80045c8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004242:	2b00      	cmp	r3, #0
 8004244:	d113      	bne.n	800426e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004246:	2300      	movs	r3, #0
 8004248:	623b      	str	r3, [r7, #32]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	623b      	str	r3, [r7, #32]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	623b      	str	r3, [r7, #32]
 800425a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	e198      	b.n	80045a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004272:	2b01      	cmp	r3, #1
 8004274:	d11b      	bne.n	80042ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004284:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	e178      	b.n	80045a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d11b      	bne.n	80042ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d6:	2300      	movs	r3, #0
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	61bb      	str	r3, [r7, #24]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	e158      	b.n	80045a0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004314:	e144      	b.n	80045a0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431a:	2b03      	cmp	r3, #3
 800431c:	f200 80f1 	bhi.w	8004502 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004324:	2b01      	cmp	r3, #1
 8004326:	d123      	bne.n	8004370 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800432a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 fc4b 	bl	8004bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e145      	b.n	80045c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691a      	ldr	r2, [r3, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800436e:	e117      	b.n	80045a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004374:	2b02      	cmp	r3, #2
 8004376:	d14e      	bne.n	8004416 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437e:	2200      	movs	r2, #0
 8004380:	4906      	ldr	r1, [pc, #24]	@ (800439c <HAL_I2C_Master_Receive+0x22c>)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 fa76 	bl	8004874 <I2C_WaitOnFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e11a      	b.n	80045c8 <HAL_I2C_Master_Receive+0x458>
 8004392:	bf00      	nop
 8004394:	00100002 	.word	0x00100002
 8004398:	ffff0000 	.word	0xffff0000
 800439c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004414:	e0c4      	b.n	80045a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441c:	2200      	movs	r2, #0
 800441e:	496c      	ldr	r1, [pc, #432]	@ (80045d0 <HAL_I2C_Master_Receive+0x460>)
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 fa27 	bl	8004874 <I2C_WaitOnFlagUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0cb      	b.n	80045c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800443e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004478:	2200      	movs	r2, #0
 800447a:	4955      	ldr	r1, [pc, #340]	@ (80045d0 <HAL_I2C_Master_Receive+0x460>)
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f9f9 	bl	8004874 <I2C_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e09d      	b.n	80045c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800449a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004500:	e04e      	b.n	80045a0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004504:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fb5e 	bl	8004bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e058      	b.n	80045c8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b04      	cmp	r3, #4
 8004554:	d124      	bne.n	80045a0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800455a:	2b03      	cmp	r3, #3
 800455c:	d107      	bne.n	800456e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800456c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f47f aeb6 	bne.w	8004316 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	e000      	b.n	80045c8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80045c6:	2302      	movs	r3, #2
  }
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3728      	adds	r7, #40	@ 0x28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	00010004 	.word	0x00010004

080045d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af02      	add	r7, sp, #8
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	607a      	str	r2, [r7, #4]
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	460b      	mov	r3, r1
 80045e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d006      	beq.n	80045fe <I2C_MasterRequestWrite+0x2a>
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d003      	beq.n	80045fe <I2C_MasterRequestWrite+0x2a>
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045fc:	d108      	bne.n	8004610 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	e00b      	b.n	8004628 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004614:	2b12      	cmp	r3, #18
 8004616:	d107      	bne.n	8004628 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004626:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f91d 	bl	8004874 <I2C_WaitOnFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00d      	beq.n	800465c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800464e:	d103      	bne.n	8004658 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004656:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e035      	b.n	80046c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004664:	d108      	bne.n	8004678 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004666:	897b      	ldrh	r3, [r7, #10]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	461a      	mov	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004674:	611a      	str	r2, [r3, #16]
 8004676:	e01b      	b.n	80046b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004678:	897b      	ldrh	r3, [r7, #10]
 800467a:	11db      	asrs	r3, r3, #7
 800467c:	b2db      	uxtb	r3, r3
 800467e:	f003 0306 	and.w	r3, r3, #6
 8004682:	b2db      	uxtb	r3, r3
 8004684:	f063 030f 	orn	r3, r3, #15
 8004688:	b2da      	uxtb	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	490e      	ldr	r1, [pc, #56]	@ (80046d0 <I2C_MasterRequestWrite+0xfc>)
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f966 	bl	8004968 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e010      	b.n	80046c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046a6:	897b      	ldrh	r3, [r7, #10]
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4907      	ldr	r1, [pc, #28]	@ (80046d4 <I2C_MasterRequestWrite+0x100>)
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f956 	bl	8004968 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	00010008 	.word	0x00010008
 80046d4:	00010002 	.word	0x00010002

080046d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af02      	add	r7, sp, #8
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	460b      	mov	r3, r1
 80046e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b08      	cmp	r3, #8
 8004702:	d006      	beq.n	8004712 <I2C_MasterRequestRead+0x3a>
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d003      	beq.n	8004712 <I2C_MasterRequestRead+0x3a>
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004710:	d108      	bne.n	8004724 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	e00b      	b.n	800473c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004728:	2b11      	cmp	r3, #17
 800472a:	d107      	bne.n	800473c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800473a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f893 	bl	8004874 <I2C_WaitOnFlagUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00d      	beq.n	8004770 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800475e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004762:	d103      	bne.n	800476c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800476a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e079      	b.n	8004864 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004778:	d108      	bne.n	800478c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800477a:	897b      	ldrh	r3, [r7, #10]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	b2da      	uxtb	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	611a      	str	r2, [r3, #16]
 800478a:	e05f      	b.n	800484c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800478c:	897b      	ldrh	r3, [r7, #10]
 800478e:	11db      	asrs	r3, r3, #7
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f003 0306 	and.w	r3, r3, #6
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f063 030f 	orn	r3, r3, #15
 800479c:	b2da      	uxtb	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	4930      	ldr	r1, [pc, #192]	@ (800486c <I2C_MasterRequestRead+0x194>)
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f8dc 	bl	8004968 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e054      	b.n	8004864 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047ba:	897b      	ldrh	r3, [r7, #10]
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	4929      	ldr	r1, [pc, #164]	@ (8004870 <I2C_MasterRequestRead+0x198>)
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f8cc 	bl	8004968 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e044      	b.n	8004864 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047da:	2300      	movs	r3, #0
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f831 	bl	8004874 <I2C_WaitOnFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00d      	beq.n	8004834 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004826:	d103      	bne.n	8004830 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800482e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e017      	b.n	8004864 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004834:	897b      	ldrh	r3, [r7, #10]
 8004836:	11db      	asrs	r3, r3, #7
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f003 0306 	and.w	r3, r3, #6
 800483e:	b2db      	uxtb	r3, r3
 8004840:	f063 030e 	orn	r3, r3, #14
 8004844:	b2da      	uxtb	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	4907      	ldr	r1, [pc, #28]	@ (8004870 <I2C_MasterRequestRead+0x198>)
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 f888 	bl	8004968 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	00010008 	.word	0x00010008
 8004870:	00010002 	.word	0x00010002

08004874 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	603b      	str	r3, [r7, #0]
 8004880:	4613      	mov	r3, r2
 8004882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004884:	e048      	b.n	8004918 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800488c:	d044      	beq.n	8004918 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488e:	f7fe ff33 	bl	80036f8 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d302      	bcc.n	80048a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d139      	bne.n	8004918 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	0c1b      	lsrs	r3, r3, #16
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d10d      	bne.n	80048ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	43da      	mvns	r2, r3
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4013      	ands	r3, r2
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bf0c      	ite	eq
 80048c0:	2301      	moveq	r3, #1
 80048c2:	2300      	movne	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	461a      	mov	r2, r3
 80048c8:	e00c      	b.n	80048e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	43da      	mvns	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4013      	ands	r3, r2
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf0c      	ite	eq
 80048dc:	2301      	moveq	r3, #1
 80048de:	2300      	movne	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d116      	bne.n	8004918 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004904:	f043 0220 	orr.w	r2, r3, #32
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e023      	b.n	8004960 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	0c1b      	lsrs	r3, r3, #16
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b01      	cmp	r3, #1
 8004920:	d10d      	bne.n	800493e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	43da      	mvns	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	4013      	ands	r3, r2
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf0c      	ite	eq
 8004934:	2301      	moveq	r3, #1
 8004936:	2300      	movne	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	e00c      	b.n	8004958 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	43da      	mvns	r2, r3
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	4013      	ands	r3, r2
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	bf0c      	ite	eq
 8004950:	2301      	moveq	r3, #1
 8004952:	2300      	movne	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	461a      	mov	r2, r3
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	429a      	cmp	r2, r3
 800495c:	d093      	beq.n	8004886 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004976:	e071      	b.n	8004a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004982:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004986:	d123      	bne.n	80049d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004996:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049bc:	f043 0204 	orr.w	r2, r3, #4
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e067      	b.n	8004aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049d6:	d041      	beq.n	8004a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d8:	f7fe fe8e 	bl	80036f8 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d302      	bcc.n	80049ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d136      	bne.n	8004a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	0c1b      	lsrs	r3, r3, #16
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d10c      	bne.n	8004a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	43da      	mvns	r2, r3
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4013      	ands	r3, r2
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bf14      	ite	ne
 8004a0a:	2301      	movne	r3, #1
 8004a0c:	2300      	moveq	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	e00b      	b.n	8004a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	43da      	mvns	r2, r3
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	bf14      	ite	ne
 8004a24:	2301      	movne	r3, #1
 8004a26:	2300      	moveq	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d016      	beq.n	8004a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a48:	f043 0220 	orr.w	r2, r3, #32
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e021      	b.n	8004aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	0c1b      	lsrs	r3, r3, #16
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d10c      	bne.n	8004a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	43da      	mvns	r2, r3
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	4013      	ands	r3, r2
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	bf14      	ite	ne
 8004a78:	2301      	movne	r3, #1
 8004a7a:	2300      	moveq	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	e00b      	b.n	8004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	43da      	mvns	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bf14      	ite	ne
 8004a92:	2301      	movne	r3, #1
 8004a94:	2300      	moveq	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f47f af6d 	bne.w	8004978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ab4:	e034      	b.n	8004b20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f8e3 	bl	8004c82 <I2C_IsAcknowledgeFailed>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e034      	b.n	8004b30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004acc:	d028      	beq.n	8004b20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ace:	f7fe fe13 	bl	80036f8 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d302      	bcc.n	8004ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d11d      	bne.n	8004b20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aee:	2b80      	cmp	r3, #128	@ 0x80
 8004af0:	d016      	beq.n	8004b20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0c:	f043 0220 	orr.w	r2, r3, #32
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e007      	b.n	8004b30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2a:	2b80      	cmp	r3, #128	@ 0x80
 8004b2c:	d1c3      	bne.n	8004ab6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b44:	e034      	b.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 f89b 	bl	8004c82 <I2C_IsAcknowledgeFailed>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e034      	b.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b5c:	d028      	beq.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b5e:	f7fe fdcb 	bl	80036f8 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d302      	bcc.n	8004b74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d11d      	bne.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d016      	beq.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9c:	f043 0220 	orr.w	r2, r3, #32
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e007      	b.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d1c3      	bne.n	8004b46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bd4:	e049      	b.n	8004c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	d119      	bne.n	8004c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0210 	mvn.w	r2, #16
 8004bec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e030      	b.n	8004c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c18:	f7fe fd6e 	bl	80036f8 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d302      	bcc.n	8004c2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d11d      	bne.n	8004c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c38:	2b40      	cmp	r3, #64	@ 0x40
 8004c3a:	d016      	beq.n	8004c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c56:	f043 0220 	orr.w	r2, r3, #32
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e007      	b.n	8004c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c74:	2b40      	cmp	r3, #64	@ 0x40
 8004c76:	d1ae      	bne.n	8004bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c98:	d11b      	bne.n	8004cd2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ca2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbe:	f043 0204 	orr.w	r2, r3, #4
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e101      	b.n	8004ef6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d106      	bne.n	8004d12 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f006 fd2b 	bl	800b768 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2203      	movs	r2, #3
 8004d16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d20:	d102      	bne.n	8004d28 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f003 f8c2 	bl	8007eb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	7c1a      	ldrb	r2, [r3, #16]
 8004d3a:	f88d 2000 	strb.w	r2, [sp]
 8004d3e:	3304      	adds	r3, #4
 8004d40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d42:	f002 ffa1 	bl	8007c88 <USB_CoreInit>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0ce      	b.n	8004ef6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f003 f8ba 	bl	8007ed8 <USB_SetCurrentMode>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e0bf      	b.n	8004ef6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d76:	2300      	movs	r3, #0
 8004d78:	73fb      	strb	r3, [r7, #15]
 8004d7a:	e04a      	b.n	8004e12 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d7c:	7bfa      	ldrb	r2, [r7, #15]
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	4613      	mov	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	3315      	adds	r3, #21
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d90:	7bfa      	ldrb	r2, [r7, #15]
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	3314      	adds	r3, #20
 8004da0:	7bfa      	ldrb	r2, [r7, #15]
 8004da2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004da4:	7bfa      	ldrb	r2, [r7, #15]
 8004da6:	7bfb      	ldrb	r3, [r7, #15]
 8004da8:	b298      	uxth	r0, r3
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4613      	mov	r3, r2
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	332e      	adds	r3, #46	@ 0x2e
 8004db8:	4602      	mov	r2, r0
 8004dba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004dbc:	7bfa      	ldrb	r2, [r7, #15]
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	3318      	adds	r3, #24
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004dd0:	7bfa      	ldrb	r2, [r7, #15]
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	331c      	adds	r3, #28
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004de4:	7bfa      	ldrb	r2, [r7, #15]
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4413      	add	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	3320      	adds	r3, #32
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004df8:	7bfa      	ldrb	r2, [r7, #15]
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	3324      	adds	r3, #36	@ 0x24
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	73fb      	strb	r3, [r7, #15]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	791b      	ldrb	r3, [r3, #4]
 8004e16:	7bfa      	ldrb	r2, [r7, #15]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d3af      	bcc.n	8004d7c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	73fb      	strb	r3, [r7, #15]
 8004e20:	e044      	b.n	8004eac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004e34:	2200      	movs	r2, #0
 8004e36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e38:	7bfa      	ldrb	r2, [r7, #15]
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004e4a:	7bfa      	ldrb	r2, [r7, #15]
 8004e4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e4e:	7bfa      	ldrb	r2, [r7, #15]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004e60:	2200      	movs	r2, #0
 8004e62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e64:	7bfa      	ldrb	r2, [r7, #15]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e7a:	7bfa      	ldrb	r2, [r7, #15]
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e90:	7bfa      	ldrb	r2, [r7, #15]
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	73fb      	strb	r3, [r7, #15]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	791b      	ldrb	r3, [r3, #4]
 8004eb0:	7bfa      	ldrb	r2, [r7, #15]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d3b5      	bcc.n	8004e22 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	7c1a      	ldrb	r2, [r3, #16]
 8004ebe:	f88d 2000 	strb.w	r2, [sp]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ec6:	f003 f853 	bl	8007f70 <USB_DevInit>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e00c      	b.n	8004ef6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f004 f89d 	bl	800902e <USB_DevDisconnect>

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b084      	sub	sp, #16
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_PCD_Start+0x1c>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e022      	b.n	8004f60 <HAL_PCD_Start+0x62>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d105      	bne.n	8004f42 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f002 ffa4 	bl	8007e94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f004 f84b 	bl	8008fec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f68:	b590      	push	{r4, r7, lr}
 8004f6a:	b08d      	sub	sp, #52	@ 0x34
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f004 f909 	bl	8009196 <USB_GetMode>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f040 848c 	bne.w	80058a4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f004 f86d 	bl	8009070 <USB_ReadInterrupts>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 8482 	beq.w	80058a2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	0a1b      	lsrs	r3, r3, #8
 8004fa8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f004 f85a 	bl	8009070 <USB_ReadInterrupts>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d107      	bne.n	8004fd6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695a      	ldr	r2, [r3, #20]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f002 0202 	and.w	r2, r2, #2
 8004fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f004 f848 	bl	8009070 <USB_ReadInterrupts>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b10      	cmp	r3, #16
 8004fe8:	d161      	bne.n	80050ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699a      	ldr	r2, [r3, #24]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0210 	bic.w	r2, r2, #16
 8004ff8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	f003 020f 	and.w	r2, r3, #15
 8005006:	4613      	mov	r3, r2
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	4413      	add	r3, r2
 8005016:	3304      	adds	r3, #4
 8005018:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005020:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005024:	d124      	bne.n	8005070 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800502c:	4013      	ands	r3, r2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d035      	beq.n	800509e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	091b      	lsrs	r3, r3, #4
 800503a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800503c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005040:	b29b      	uxth	r3, r3
 8005042:	461a      	mov	r2, r3
 8005044:	6a38      	ldr	r0, [r7, #32]
 8005046:	f003 fe7f 	bl	8008d48 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005056:	441a      	add	r2, r3
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	695a      	ldr	r2, [r3, #20]
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	091b      	lsrs	r3, r3, #4
 8005064:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005068:	441a      	add	r2, r3
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	615a      	str	r2, [r3, #20]
 800506e:	e016      	b.n	800509e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005076:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800507a:	d110      	bne.n	800509e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005082:	2208      	movs	r2, #8
 8005084:	4619      	mov	r1, r3
 8005086:	6a38      	ldr	r0, [r7, #32]
 8005088:	f003 fe5e 	bl	8008d48 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	695a      	ldr	r2, [r3, #20]
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	091b      	lsrs	r3, r3, #4
 8005094:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005098:	441a      	add	r2, r3
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	699a      	ldr	r2, [r3, #24]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f042 0210 	orr.w	r2, r2, #16
 80050ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f003 ffdc 	bl	8009070 <USB_ReadInterrupts>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050c2:	f040 80a7 	bne.w	8005214 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f003 ffe1 	bl	8009096 <USB_ReadDevAllOutEpInterrupt>
 80050d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80050d6:	e099      	b.n	800520c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80050d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 808e 	beq.w	8005200 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	4611      	mov	r1, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f004 f805 	bl	80090fe <USB_ReadDevOutEPInterrupt>
 80050f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00c      	beq.n	800511a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800510c:	461a      	mov	r2, r3
 800510e:	2301      	movs	r3, #1
 8005110:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005112:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fea3 	bl	8005e60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00c      	beq.n	800513e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005130:	461a      	mov	r2, r3
 8005132:	2308      	movs	r3, #8
 8005134:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005136:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 ff79 	bl	8006030 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b00      	cmp	r3, #0
 8005146:	d008      	beq.n	800515a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005154:	461a      	mov	r2, r3
 8005156:	2310      	movs	r3, #16
 8005158:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d030      	beq.n	80051c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800516c:	2b80      	cmp	r3, #128	@ 0x80
 800516e:	d109      	bne.n	8005184 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800517e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005182:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005186:	4613      	mov	r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	4413      	add	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	4413      	add	r3, r2
 8005196:	3304      	adds	r3, #4
 8005198:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	78db      	ldrb	r3, [r3, #3]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d108      	bne.n	80051b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2200      	movs	r2, #0
 80051a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	4619      	mov	r1, r3
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f006 fbd6 	bl	800b960 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80051b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c0:	461a      	mov	r2, r3
 80051c2:	2302      	movs	r3, #2
 80051c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d008      	beq.n	80051e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051dc:	461a      	mov	r2, r3
 80051de:	2320      	movs	r3, #32
 80051e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d009      	beq.n	8005200 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80051ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051f8:	461a      	mov	r2, r3
 80051fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	3301      	adds	r3, #1
 8005204:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005208:	085b      	lsrs	r3, r3, #1
 800520a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800520c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520e:	2b00      	cmp	r3, #0
 8005210:	f47f af62 	bne.w	80050d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f003 ff29 	bl	8009070 <USB_ReadInterrupts>
 800521e:	4603      	mov	r3, r0
 8005220:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005224:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005228:	f040 80db 	bne.w	80053e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f003 ff4a 	bl	80090ca <USB_ReadDevAllInEpInterrupt>
 8005236:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800523c:	e0cd      	b.n	80053da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800523e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80c2 	beq.w	80053ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	4611      	mov	r1, r2
 8005254:	4618      	mov	r0, r3
 8005256:	f003 ff70 	bl	800913a <USB_ReadDevInEPInterrupt>
 800525a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d057      	beq.n	8005316 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	2201      	movs	r2, #1
 800526e:	fa02 f303 	lsl.w	r3, r2, r3
 8005272:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800527a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	43db      	mvns	r3, r3
 8005280:	69f9      	ldr	r1, [r7, #28]
 8005282:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005286:	4013      	ands	r3, r2
 8005288:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005296:	461a      	mov	r2, r3
 8005298:	2301      	movs	r3, #1
 800529a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	799b      	ldrb	r3, [r3, #6]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d132      	bne.n	800530a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	3320      	adds	r3, #32
 80052b4:	6819      	ldr	r1, [r3, #0]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ba:	4613      	mov	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	4413      	add	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4403      	add	r3, r0
 80052c4:	331c      	adds	r3, #28
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4419      	add	r1, r3
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ce:	4613      	mov	r3, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4403      	add	r3, r0
 80052d8:	3320      	adds	r3, #32
 80052da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d113      	bne.n	800530a <HAL_PCD_IRQHandler+0x3a2>
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e6:	4613      	mov	r3, r2
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	3324      	adds	r3, #36	@ 0x24
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d108      	bne.n	800530a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005302:	461a      	mov	r2, r3
 8005304:	2101      	movs	r1, #1
 8005306:	f003 ff77 	bl	80091f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	b2db      	uxtb	r3, r3
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f006 faaa 	bl	800b86a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800532c:	461a      	mov	r2, r3
 800532e:	2308      	movs	r3, #8
 8005330:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800533c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005348:	461a      	mov	r2, r3
 800534a:	2310      	movs	r3, #16
 800534c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005354:	2b00      	cmp	r3, #0
 8005356:	d008      	beq.n	800536a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005364:	461a      	mov	r2, r3
 8005366:	2340      	movs	r3, #64	@ 0x40
 8005368:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d023      	beq.n	80053bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005374:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005376:	6a38      	ldr	r0, [r7, #32]
 8005378:	f002 ff5e 	bl	8008238 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800537c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800537e:	4613      	mov	r3, r2
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	4413      	add	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	3310      	adds	r3, #16
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	4413      	add	r3, r2
 800538c:	3304      	adds	r3, #4
 800538e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	78db      	ldrb	r3, [r3, #3]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d108      	bne.n	80053aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2200      	movs	r2, #0
 800539c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	4619      	mov	r1, r3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f006 faed 	bl	800b984 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b6:	461a      	mov	r2, r3
 80053b8:	2302      	movs	r3, #2
 80053ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80053c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fcbd 	bl	8005d48 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	3301      	adds	r3, #1
 80053d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80053d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d6:	085b      	lsrs	r3, r3, #1
 80053d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80053da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f47f af2e 	bne.w	800523e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f003 fe42 	bl	8009070 <USB_ReadInterrupts>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053f6:	d122      	bne.n	800543e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005412:	2b01      	cmp	r3, #1
 8005414:	d108      	bne.n	8005428 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800541e:	2100      	movs	r1, #0
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fea3 	bl	800616c <HAL_PCDEx_LPM_Callback>
 8005426:	e002      	b.n	800542e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f006 fa8b 	bl	800b944 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695a      	ldr	r2, [r3, #20]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800543c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f003 fe14 	bl	8009070 <USB_ReadInterrupts>
 8005448:	4603      	mov	r3, r0
 800544a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800544e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005452:	d112      	bne.n	800547a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b01      	cmp	r3, #1
 8005462:	d102      	bne.n	800546a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f006 fa47 	bl	800b8f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695a      	ldr	r2, [r3, #20]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005478:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f003 fdf6 	bl	8009070 <USB_ReadInterrupts>
 8005484:	4603      	mov	r3, r0
 8005486:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800548a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800548e:	f040 80b7 	bne.w	8005600 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	69fa      	ldr	r2, [r7, #28]
 800549c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054a0:	f023 0301 	bic.w	r3, r3, #1
 80054a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2110      	movs	r1, #16
 80054ac:	4618      	mov	r0, r3
 80054ae:	f002 fec3 	bl	8008238 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054b2:	2300      	movs	r3, #0
 80054b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054b6:	e046      	b.n	8005546 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80054b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054c4:	461a      	mov	r2, r3
 80054c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054dc:	0151      	lsls	r1, r2, #5
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	440a      	add	r2, r1
 80054e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80054ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f8:	461a      	mov	r2, r3
 80054fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	69fa      	ldr	r2, [r7, #28]
 8005514:	440a      	add	r2, r1
 8005516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800551a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800551e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005530:	0151      	lsls	r1, r2, #5
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	440a      	add	r2, r1
 8005536:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800553a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800553e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005542:	3301      	adds	r3, #1
 8005544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	791b      	ldrb	r3, [r3, #4]
 800554a:	461a      	mov	r2, r3
 800554c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554e:	4293      	cmp	r3, r2
 8005550:	d3b2      	bcc.n	80054b8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005560:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005564:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	7bdb      	ldrb	r3, [r3, #15]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d016      	beq.n	800559c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800557e:	f043 030b 	orr.w	r3, r3, #11
 8005582:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800558c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005594:	f043 030b 	orr.w	r3, r3, #11
 8005598:	6453      	str	r3, [r2, #68]	@ 0x44
 800559a:	e015      	b.n	80055c8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80055ae:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80055b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055c2:	f043 030b 	orr.w	r3, r3, #11
 80055c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	69fa      	ldr	r2, [r7, #28]
 80055d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80055da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80055ea:	461a      	mov	r2, r3
 80055ec:	f003 fe04 	bl	80091f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695a      	ldr	r2, [r3, #20]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80055fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	f003 fd33 	bl	8009070 <USB_ReadInterrupts>
 800560a:	4603      	mov	r3, r0
 800560c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005614:	d123      	bne.n	800565e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f003 fdc9 	bl	80091b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f002 fe80 	bl	800832a <USB_GetDevSpeed>
 800562a:	4603      	mov	r3, r0
 800562c:	461a      	mov	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681c      	ldr	r4, [r3, #0]
 8005636:	f001 f9c9 	bl	80069cc <HAL_RCC_GetHCLKFreq>
 800563a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005640:	461a      	mov	r2, r3
 8005642:	4620      	mov	r0, r4
 8005644:	f002 fb84 	bl	8007d50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f006 f936 	bl	800b8ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695a      	ldr	r2, [r3, #20]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800565c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f003 fd04 	bl	8009070 <USB_ReadInterrupts>
 8005668:	4603      	mov	r3, r0
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b08      	cmp	r3, #8
 8005670:	d10a      	bne.n	8005688 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f006 f913 	bl	800b89e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695a      	ldr	r2, [r3, #20]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f002 0208 	and.w	r2, r2, #8
 8005686:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4618      	mov	r0, r3
 800568e:	f003 fcef 	bl	8009070 <USB_ReadInterrupts>
 8005692:	4603      	mov	r3, r0
 8005694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005698:	2b80      	cmp	r3, #128	@ 0x80
 800569a:	d123      	bne.n	80056e4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056a8:	2301      	movs	r3, #1
 80056aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ac:	e014      	b.n	80056d8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056b2:	4613      	mov	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	4413      	add	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d105      	bne.n	80056d2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	4619      	mov	r1, r3
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fb0a 	bl	8005ce6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	3301      	adds	r3, #1
 80056d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	791b      	ldrb	r3, [r3, #4]
 80056dc:	461a      	mov	r2, r3
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d3e4      	bcc.n	80056ae <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f003 fcc1 	bl	8009070 <USB_ReadInterrupts>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056f8:	d13c      	bne.n	8005774 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056fa:	2301      	movs	r3, #1
 80056fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80056fe:	e02b      	b.n	8005758 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005714:	4613      	mov	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	4413      	add	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	3318      	adds	r3, #24
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d115      	bne.n	8005752 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005726:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005728:	2b00      	cmp	r3, #0
 800572a:	da12      	bge.n	8005752 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005730:	4613      	mov	r3, r2
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	3317      	adds	r3, #23
 800573c:	2201      	movs	r2, #1
 800573e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	b2db      	uxtb	r3, r3
 8005744:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005748:	b2db      	uxtb	r3, r3
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 faca 	bl	8005ce6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	3301      	adds	r3, #1
 8005756:	627b      	str	r3, [r7, #36]	@ 0x24
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	791b      	ldrb	r3, [r3, #4]
 800575c:	461a      	mov	r2, r3
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	4293      	cmp	r3, r2
 8005762:	d3cd      	bcc.n	8005700 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695a      	ldr	r2, [r3, #20]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005772:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4618      	mov	r0, r3
 800577a:	f003 fc79 	bl	8009070 <USB_ReadInterrupts>
 800577e:	4603      	mov	r3, r0
 8005780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005784:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005788:	d156      	bne.n	8005838 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800578a:	2301      	movs	r3, #1
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
 800578e:	e045      	b.n	800581c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a4:	4613      	mov	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d12e      	bne.n	8005816 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	da2b      	bge.n	8005816 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80057ca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d121      	bne.n	8005816 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d6:	4613      	mov	r3, r2
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	440b      	add	r3, r1
 80057e0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80057e4:	2201      	movs	r2, #1
 80057e6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800580e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005812:	6053      	str	r3, [r2, #4]
            break;
 8005814:	e008      	b.n	8005828 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	3301      	adds	r3, #1
 800581a:	627b      	str	r3, [r7, #36]	@ 0x24
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	791b      	ldrb	r3, [r3, #4]
 8005820:	461a      	mov	r2, r3
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	4293      	cmp	r3, r2
 8005826:	d3b3      	bcc.n	8005790 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695a      	ldr	r2, [r3, #20]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005836:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4618      	mov	r0, r3
 800583e:	f003 fc17 	bl	8009070 <USB_ReadInterrupts>
 8005842:	4603      	mov	r3, r0
 8005844:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800584c:	d10a      	bne.n	8005864 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f006 f8aa 	bl	800b9a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695a      	ldr	r2, [r3, #20]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4618      	mov	r0, r3
 800586a:	f003 fc01 	bl	8009070 <USB_ReadInterrupts>
 800586e:	4603      	mov	r3, r0
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b04      	cmp	r3, #4
 8005876:	d115      	bne.n	80058a4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f006 f89a 	bl	800b9c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6859      	ldr	r1, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	430a      	orrs	r2, r1
 800589e:	605a      	str	r2, [r3, #4]
 80058a0:	e000      	b.n	80058a4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80058a2:	bf00      	nop
    }
  }
}
 80058a4:	3734      	adds	r7, #52	@ 0x34
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd90      	pop	{r4, r7, pc}

080058aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	460b      	mov	r3, r1
 80058b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_PCD_SetAddress+0x1a>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e012      	b.n	80058ea <HAL_PCD_SetAddress+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	78fa      	ldrb	r2, [r7, #3]
 80058d0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	78fa      	ldrb	r2, [r7, #3]
 80058d8:	4611      	mov	r1, r2
 80058da:	4618      	mov	r0, r3
 80058dc:	f003 fb60 	bl	8008fa0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	4608      	mov	r0, r1
 80058fc:	4611      	mov	r1, r2
 80058fe:	461a      	mov	r2, r3
 8005900:	4603      	mov	r3, r0
 8005902:	70fb      	strb	r3, [r7, #3]
 8005904:	460b      	mov	r3, r1
 8005906:	803b      	strh	r3, [r7, #0]
 8005908:	4613      	mov	r3, r2
 800590a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800590c:	2300      	movs	r3, #0
 800590e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005914:	2b00      	cmp	r3, #0
 8005916:	da0f      	bge.n	8005938 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	f003 020f 	and.w	r2, r3, #15
 800591e:	4613      	mov	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	3310      	adds	r3, #16
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	4413      	add	r3, r2
 800592c:	3304      	adds	r3, #4
 800592e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2201      	movs	r2, #1
 8005934:	705a      	strb	r2, [r3, #1]
 8005936:	e00f      	b.n	8005958 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	f003 020f 	and.w	r2, r3, #15
 800593e:	4613      	mov	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	4413      	add	r3, r2
 800594e:	3304      	adds	r3, #4
 8005950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	b2da      	uxtb	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005964:	883b      	ldrh	r3, [r7, #0]
 8005966:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	78ba      	ldrb	r2, [r7, #2]
 8005972:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	785b      	ldrb	r3, [r3, #1]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d004      	beq.n	8005986 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	461a      	mov	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005986:	78bb      	ldrb	r3, [r7, #2]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d102      	bne.n	8005992 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_PCD_EP_Open+0xae>
 800599c:	2302      	movs	r3, #2
 800599e:	e00e      	b.n	80059be <HAL_PCD_EP_Open+0xcc>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68f9      	ldr	r1, [r7, #12]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f002 fce0 	bl	8008374 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80059bc:	7afb      	ldrb	r3, [r7, #11]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	460b      	mov	r3, r1
 80059d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	da0f      	bge.n	80059fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059da:	78fb      	ldrb	r3, [r7, #3]
 80059dc:	f003 020f 	and.w	r2, r3, #15
 80059e0:	4613      	mov	r3, r2
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	4413      	add	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	3310      	adds	r3, #16
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4413      	add	r3, r2
 80059ee:	3304      	adds	r3, #4
 80059f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	705a      	strb	r2, [r3, #1]
 80059f8:	e00f      	b.n	8005a1a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	f003 020f 	and.w	r2, r3, #15
 8005a00:	4613      	mov	r3, r2
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	4413      	add	r3, r2
 8005a10:	3304      	adds	r3, #4
 8005a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a1a:	78fb      	ldrb	r3, [r7, #3]
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_PCD_EP_Close+0x6e>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e00e      	b.n	8005a52 <HAL_PCD_EP_Close+0x8c>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68f9      	ldr	r1, [r7, #12]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f002 fd1e 	bl	8008484 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b086      	sub	sp, #24
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	460b      	mov	r3, r1
 8005a68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a6a:	7afb      	ldrb	r3, [r7, #11]
 8005a6c:	f003 020f 	and.w	r2, r3, #15
 8005a70:	4613      	mov	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	3304      	adds	r3, #4
 8005a82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2200      	movs	r2, #0
 8005a94:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a9c:	7afb      	ldrb	r3, [r7, #11]
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	799b      	ldrb	r3, [r3, #6]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d102      	bne.n	8005ab6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	799b      	ldrb	r3, [r3, #6]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	6979      	ldr	r1, [r7, #20]
 8005ac2:	f002 fdbb 	bl	800863c <USB_EPStartXfer>

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	f003 020f 	and.w	r2, r3, #15
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	4413      	add	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	440b      	add	r3, r1
 8005aee:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005af2:	681b      	ldr	r3, [r3, #0]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	607a      	str	r2, [r7, #4]
 8005b0a:	603b      	str	r3, [r7, #0]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b10:	7afb      	ldrb	r3, [r7, #11]
 8005b12:	f003 020f 	and.w	r2, r3, #15
 8005b16:	4613      	mov	r3, r2
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	3310      	adds	r3, #16
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4413      	add	r3, r2
 8005b24:	3304      	adds	r3, #4
 8005b26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2200      	movs	r2, #0
 8005b38:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b40:	7afb      	ldrb	r3, [r7, #11]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	799b      	ldrb	r3, [r3, #6]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d102      	bne.n	8005b5a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6818      	ldr	r0, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	799b      	ldrb	r3, [r3, #6]
 8005b62:	461a      	mov	r2, r3
 8005b64:	6979      	ldr	r1, [r7, #20]
 8005b66:	f002 fd69 	bl	800863c <USB_EPStartXfer>

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	7912      	ldrb	r2, [r2, #4]
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d901      	bls.n	8005b92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e04f      	b.n	8005c32 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	da0f      	bge.n	8005bba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b9a:	78fb      	ldrb	r3, [r7, #3]
 8005b9c:	f003 020f 	and.w	r2, r3, #15
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	3310      	adds	r3, #16
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	4413      	add	r3, r2
 8005bae:	3304      	adds	r3, #4
 8005bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	705a      	strb	r2, [r3, #1]
 8005bb8:	e00d      	b.n	8005bd6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005bba:	78fa      	ldrb	r2, [r7, #3]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	4413      	add	r3, r2
 8005bcc:	3304      	adds	r3, #4
 8005bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d101      	bne.n	8005bf6 <HAL_PCD_EP_SetStall+0x82>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	e01d      	b.n	8005c32 <HAL_PCD_EP_SetStall+0xbe>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68f9      	ldr	r1, [r7, #12]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f003 f8f7 	bl	8008df8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	f003 030f 	and.w	r3, r3, #15
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d109      	bne.n	8005c28 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	7999      	ldrb	r1, [r3, #6]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c22:	461a      	mov	r2, r3
 8005c24:	f003 fae8 	bl	80091f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	460b      	mov	r3, r1
 8005c44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005c46:	78fb      	ldrb	r3, [r7, #3]
 8005c48:	f003 030f 	and.w	r3, r3, #15
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	7912      	ldrb	r2, [r2, #4]
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d901      	bls.n	8005c58 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e042      	b.n	8005cde <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	da0f      	bge.n	8005c80 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	f003 020f 	and.w	r2, r3, #15
 8005c66:	4613      	mov	r3, r2
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	3310      	adds	r3, #16
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	4413      	add	r3, r2
 8005c74:	3304      	adds	r3, #4
 8005c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	705a      	strb	r2, [r3, #1]
 8005c7e:	e00f      	b.n	8005ca0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	f003 020f 	and.w	r2, r3, #15
 8005c86:	4613      	mov	r3, r2
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	4413      	add	r3, r2
 8005c96:	3304      	adds	r3, #4
 8005c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_PCD_EP_ClrStall+0x86>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e00e      	b.n	8005cde <HAL_PCD_EP_ClrStall+0xa4>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68f9      	ldr	r1, [r7, #12]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f003 f900 	bl	8008ed4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005cf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	da0c      	bge.n	8005d14 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cfa:	78fb      	ldrb	r3, [r7, #3]
 8005cfc:	f003 020f 	and.w	r2, r3, #15
 8005d00:	4613      	mov	r3, r2
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	3310      	adds	r3, #16
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	3304      	adds	r3, #4
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	e00c      	b.n	8005d2e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	f003 020f 	and.w	r2, r3, #15
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	4413      	add	r3, r2
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68f9      	ldr	r1, [r7, #12]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f002 ff1f 	bl	8008b78 <USB_EPStopXfer>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005d3e:	7afb      	ldrb	r3, [r7, #11]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	@ 0x28
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	3310      	adds	r3, #16
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	695a      	ldr	r2, [r3, #20]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d901      	bls.n	8005d80 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e06b      	b.n	8005e58 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	69fa      	ldr	r2, [r7, #28]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d902      	bls.n	8005d9c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	3303      	adds	r3, #3
 8005da0:	089b      	lsrs	r3, r3, #2
 8005da2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005da4:	e02a      	b.n	8005dfc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	691a      	ldr	r2, [r3, #16]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d902      	bls.n	8005dc2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	3303      	adds	r3, #3
 8005dc6:	089b      	lsrs	r3, r3, #2
 8005dc8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	68d9      	ldr	r1, [r3, #12]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	4603      	mov	r3, r0
 8005dde:	6978      	ldr	r0, [r7, #20]
 8005de0:	f002 ff74 	bl	8008ccc <USB_WritePacket>

    ep->xfer_buff  += len;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	441a      	add	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	695a      	ldr	r2, [r3, #20]
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	441a      	add	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d809      	bhi.n	8005e26 <PCD_WriteEmptyTxFifo+0xde>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	695a      	ldr	r2, [r3, #20]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d203      	bcs.n	8005e26 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1bf      	bne.n	8005da6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d811      	bhi.n	8005e56 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	f003 030f 	and.w	r3, r3, #15
 8005e38:	2201      	movs	r2, #1
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	43db      	mvns	r3, r3
 8005e4c:	6939      	ldr	r1, [r7, #16]
 8005e4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e52:	4013      	ands	r3, r2
 8005e54:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3720      	adds	r7, #32
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	333c      	adds	r3, #60	@ 0x3c
 8005e78:	3304      	adds	r3, #4
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	799b      	ldrb	r3, [r3, #6]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d17b      	bne.n	8005f8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d015      	beq.n	8005ecc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	4a61      	ldr	r2, [pc, #388]	@ (8006028 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	f240 80b9 	bls.w	800601c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 80b3 	beq.w	800601c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ec8:	6093      	str	r3, [r2, #8]
 8005eca:	e0a7      	b.n	800601c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	2320      	movs	r3, #32
 8005ee6:	6093      	str	r3, [r2, #8]
 8005ee8:	e098      	b.n	800601c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f040 8093 	bne.w	800601c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8006028 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d90f      	bls.n	8005f1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00a      	beq.n	8005f1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f14:	461a      	mov	r2, r3
 8005f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f1a:	6093      	str	r3, [r2, #8]
 8005f1c:	e07e      	b.n	800601c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	4613      	mov	r3, r2
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	4413      	add	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	4413      	add	r3, r2
 8005f30:	3304      	adds	r3, #4
 8005f32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a1a      	ldr	r2, [r3, #32]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	0159      	lsls	r1, r3, #5
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	440b      	add	r3, r1
 8005f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f4a:	1ad2      	subs	r2, r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d114      	bne.n	8005f80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d109      	bne.n	8005f72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6818      	ldr	r0, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f68:	461a      	mov	r2, r3
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	f003 f944 	bl	80091f8 <USB_EP0_OutStart>
 8005f70:	e006      	b.n	8005f80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	441a      	add	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f005 fc54 	bl	800b834 <HAL_PCD_DataOutStageCallback>
 8005f8c:	e046      	b.n	800601c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	4a26      	ldr	r2, [pc, #152]	@ (800602c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d124      	bne.n	8005fe0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00a      	beq.n	8005fb6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fac:	461a      	mov	r2, r3
 8005fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fb2:	6093      	str	r3, [r2, #8]
 8005fb4:	e032      	b.n	800601c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d008      	beq.n	8005fd2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fcc:	461a      	mov	r2, r3
 8005fce:	2320      	movs	r3, #32
 8005fd0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f005 fc2b 	bl	800b834 <HAL_PCD_DataOutStageCallback>
 8005fde:	e01d      	b.n	800601c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d114      	bne.n	8006010 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	4613      	mov	r3, r2
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d108      	bne.n	8006010 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006008:	461a      	mov	r2, r3
 800600a:	2100      	movs	r1, #0
 800600c:	f003 f8f4 	bl	80091f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	b2db      	uxtb	r3, r3
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f005 fc0c 	bl	800b834 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3720      	adds	r7, #32
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	4f54300a 	.word	0x4f54300a
 800602c:	4f54310a 	.word	0x4f54310a

08006030 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	333c      	adds	r3, #60	@ 0x3c
 8006048:	3304      	adds	r3, #4
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4a15      	ldr	r2, [pc, #84]	@ (80060b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d90e      	bls.n	8006084 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800606c:	2b00      	cmp	r3, #0
 800606e:	d009      	beq.n	8006084 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800607c:	461a      	mov	r2, r3
 800607e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006082:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f005 fbc3 	bl	800b810 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4a0a      	ldr	r2, [pc, #40]	@ (80060b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d90c      	bls.n	80060ac <PCD_EP_OutSetupPacket_int+0x7c>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	799b      	ldrb	r3, [r3, #6]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d108      	bne.n	80060ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6818      	ldr	r0, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80060a4:	461a      	mov	r2, r3
 80060a6:	2101      	movs	r1, #1
 80060a8:	f003 f8a6 	bl	80091f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	4f54300a 	.word	0x4f54300a

080060bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	70fb      	strb	r3, [r7, #3]
 80060c8:	4613      	mov	r3, r2
 80060ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d107      	bne.n	80060ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80060da:	883b      	ldrh	r3, [r7, #0]
 80060dc:	0419      	lsls	r1, r3, #16
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80060e8:	e028      	b.n	800613c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f0:	0c1b      	lsrs	r3, r3, #16
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	4413      	add	r3, r2
 80060f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80060f8:	2300      	movs	r3, #0
 80060fa:	73fb      	strb	r3, [r7, #15]
 80060fc:	e00d      	b.n	800611a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	3340      	adds	r3, #64	@ 0x40
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	0c1b      	lsrs	r3, r3, #16
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	4413      	add	r3, r2
 8006112:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	3301      	adds	r3, #1
 8006118:	73fb      	strb	r3, [r7, #15]
 800611a:	7bfa      	ldrb	r2, [r7, #15]
 800611c:	78fb      	ldrb	r3, [r7, #3]
 800611e:	3b01      	subs	r3, #1
 8006120:	429a      	cmp	r2, r3
 8006122:	d3ec      	bcc.n	80060fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006124:	883b      	ldrh	r3, [r7, #0]
 8006126:	0418      	lsls	r0, r3, #16
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6819      	ldr	r1, [r3, #0]
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	3b01      	subs	r3, #1
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	4302      	orrs	r2, r0
 8006134:	3340      	adds	r3, #64	@ 0x40
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	440b      	add	r3, r1
 800613a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	460b      	mov	r3, r1
 8006154:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	887a      	ldrh	r2, [r7, #2]
 800615c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e267      	b.n	8006666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d075      	beq.n	800628e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061a2:	4b88      	ldr	r3, [pc, #544]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 030c 	and.w	r3, r3, #12
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d00c      	beq.n	80061c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061ae:	4b85      	ldr	r3, [pc, #532]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d112      	bne.n	80061e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061ba:	4b82      	ldr	r3, [pc, #520]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061c6:	d10b      	bne.n	80061e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c8:	4b7e      	ldr	r3, [pc, #504]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d05b      	beq.n	800628c <HAL_RCC_OscConfig+0x108>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d157      	bne.n	800628c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e242      	b.n	8006666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e8:	d106      	bne.n	80061f8 <HAL_RCC_OscConfig+0x74>
 80061ea:	4b76      	ldr	r3, [pc, #472]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a75      	ldr	r2, [pc, #468]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 80061f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	e01d      	b.n	8006234 <HAL_RCC_OscConfig+0xb0>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006200:	d10c      	bne.n	800621c <HAL_RCC_OscConfig+0x98>
 8006202:	4b70      	ldr	r3, [pc, #448]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a6f      	ldr	r2, [pc, #444]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 8006208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	4b6d      	ldr	r3, [pc, #436]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a6c      	ldr	r2, [pc, #432]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 8006214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e00b      	b.n	8006234 <HAL_RCC_OscConfig+0xb0>
 800621c:	4b69      	ldr	r3, [pc, #420]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a68      	ldr	r2, [pc, #416]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 8006222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	4b66      	ldr	r3, [pc, #408]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a65      	ldr	r2, [pc, #404]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 800622e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d013      	beq.n	8006264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623c:	f7fd fa5c 	bl	80036f8 <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006244:	f7fd fa58 	bl	80036f8 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b64      	cmp	r3, #100	@ 0x64
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e207      	b.n	8006666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006256:	4b5b      	ldr	r3, [pc, #364]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0f0      	beq.n	8006244 <HAL_RCC_OscConfig+0xc0>
 8006262:	e014      	b.n	800628e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006264:	f7fd fa48 	bl	80036f8 <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800626c:	f7fd fa44 	bl	80036f8 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b64      	cmp	r3, #100	@ 0x64
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e1f3      	b.n	8006666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800627e:	4b51      	ldr	r3, [pc, #324]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1f0      	bne.n	800626c <HAL_RCC_OscConfig+0xe8>
 800628a:	e000      	b.n	800628e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800628c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d063      	beq.n	8006362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800629a:	4b4a      	ldr	r3, [pc, #296]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 030c 	and.w	r3, r3, #12
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00b      	beq.n	80062be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062a6:	4b47      	ldr	r3, [pc, #284]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80062ae:	2b08      	cmp	r3, #8
 80062b0:	d11c      	bne.n	80062ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062b2:	4b44      	ldr	r3, [pc, #272]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d116      	bne.n	80062ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062be:	4b41      	ldr	r3, [pc, #260]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <HAL_RCC_OscConfig+0x152>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d001      	beq.n	80062d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e1c7      	b.n	8006666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d6:	4b3b      	ldr	r3, [pc, #236]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	4937      	ldr	r1, [pc, #220]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ea:	e03a      	b.n	8006362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d020      	beq.n	8006336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062f4:	4b34      	ldr	r3, [pc, #208]	@ (80063c8 <HAL_RCC_OscConfig+0x244>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062fa:	f7fd f9fd 	bl	80036f8 <HAL_GetTick>
 80062fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006300:	e008      	b.n	8006314 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006302:	f7fd f9f9 	bl	80036f8 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e1a8      	b.n	8006666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006314:	4b2b      	ldr	r3, [pc, #172]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0f0      	beq.n	8006302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006320:	4b28      	ldr	r3, [pc, #160]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	4925      	ldr	r1, [pc, #148]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 8006330:	4313      	orrs	r3, r2
 8006332:	600b      	str	r3, [r1, #0]
 8006334:	e015      	b.n	8006362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006336:	4b24      	ldr	r3, [pc, #144]	@ (80063c8 <HAL_RCC_OscConfig+0x244>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633c:	f7fd f9dc 	bl	80036f8 <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006344:	f7fd f9d8 	bl	80036f8 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e187      	b.n	8006666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006356:	4b1b      	ldr	r3, [pc, #108]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1f0      	bne.n	8006344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0308 	and.w	r3, r3, #8
 800636a:	2b00      	cmp	r3, #0
 800636c:	d036      	beq.n	80063dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d016      	beq.n	80063a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006376:	4b15      	ldr	r3, [pc, #84]	@ (80063cc <HAL_RCC_OscConfig+0x248>)
 8006378:	2201      	movs	r2, #1
 800637a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800637c:	f7fd f9bc 	bl	80036f8 <HAL_GetTick>
 8006380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006384:	f7fd f9b8 	bl	80036f8 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e167      	b.n	8006666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006396:	4b0b      	ldr	r3, [pc, #44]	@ (80063c4 <HAL_RCC_OscConfig+0x240>)
 8006398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0f0      	beq.n	8006384 <HAL_RCC_OscConfig+0x200>
 80063a2:	e01b      	b.n	80063dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063a4:	4b09      	ldr	r3, [pc, #36]	@ (80063cc <HAL_RCC_OscConfig+0x248>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063aa:	f7fd f9a5 	bl	80036f8 <HAL_GetTick>
 80063ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063b0:	e00e      	b.n	80063d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063b2:	f7fd f9a1 	bl	80036f8 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d907      	bls.n	80063d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e150      	b.n	8006666 <HAL_RCC_OscConfig+0x4e2>
 80063c4:	40023800 	.word	0x40023800
 80063c8:	42470000 	.word	0x42470000
 80063cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063d0:	4b88      	ldr	r3, [pc, #544]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 80063d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1ea      	bne.n	80063b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 8097 	beq.w	8006518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063ea:	2300      	movs	r3, #0
 80063ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063ee:	4b81      	ldr	r3, [pc, #516]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 80063f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10f      	bne.n	800641a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063fa:	2300      	movs	r3, #0
 80063fc:	60bb      	str	r3, [r7, #8]
 80063fe:	4b7d      	ldr	r3, [pc, #500]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 8006400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006402:	4a7c      	ldr	r2, [pc, #496]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 8006404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006408:	6413      	str	r3, [r2, #64]	@ 0x40
 800640a:	4b7a      	ldr	r3, [pc, #488]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 800640c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006412:	60bb      	str	r3, [r7, #8]
 8006414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006416:	2301      	movs	r3, #1
 8006418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800641a:	4b77      	ldr	r3, [pc, #476]	@ (80065f8 <HAL_RCC_OscConfig+0x474>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006422:	2b00      	cmp	r3, #0
 8006424:	d118      	bne.n	8006458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006426:	4b74      	ldr	r3, [pc, #464]	@ (80065f8 <HAL_RCC_OscConfig+0x474>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a73      	ldr	r2, [pc, #460]	@ (80065f8 <HAL_RCC_OscConfig+0x474>)
 800642c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006432:	f7fd f961 	bl	80036f8 <HAL_GetTick>
 8006436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006438:	e008      	b.n	800644c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800643a:	f7fd f95d 	bl	80036f8 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b02      	cmp	r3, #2
 8006446:	d901      	bls.n	800644c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e10c      	b.n	8006666 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800644c:	4b6a      	ldr	r3, [pc, #424]	@ (80065f8 <HAL_RCC_OscConfig+0x474>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0f0      	beq.n	800643a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d106      	bne.n	800646e <HAL_RCC_OscConfig+0x2ea>
 8006460:	4b64      	ldr	r3, [pc, #400]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 8006462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006464:	4a63      	ldr	r2, [pc, #396]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	6713      	str	r3, [r2, #112]	@ 0x70
 800646c:	e01c      	b.n	80064a8 <HAL_RCC_OscConfig+0x324>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	2b05      	cmp	r3, #5
 8006474:	d10c      	bne.n	8006490 <HAL_RCC_OscConfig+0x30c>
 8006476:	4b5f      	ldr	r3, [pc, #380]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 8006478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800647a:	4a5e      	ldr	r2, [pc, #376]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 800647c:	f043 0304 	orr.w	r3, r3, #4
 8006480:	6713      	str	r3, [r2, #112]	@ 0x70
 8006482:	4b5c      	ldr	r3, [pc, #368]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 8006484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006486:	4a5b      	ldr	r2, [pc, #364]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 8006488:	f043 0301 	orr.w	r3, r3, #1
 800648c:	6713      	str	r3, [r2, #112]	@ 0x70
 800648e:	e00b      	b.n	80064a8 <HAL_RCC_OscConfig+0x324>
 8006490:	4b58      	ldr	r3, [pc, #352]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 8006492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006494:	4a57      	ldr	r2, [pc, #348]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 8006496:	f023 0301 	bic.w	r3, r3, #1
 800649a:	6713      	str	r3, [r2, #112]	@ 0x70
 800649c:	4b55      	ldr	r3, [pc, #340]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 800649e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a0:	4a54      	ldr	r2, [pc, #336]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 80064a2:	f023 0304 	bic.w	r3, r3, #4
 80064a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d015      	beq.n	80064dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b0:	f7fd f922 	bl	80036f8 <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064b6:	e00a      	b.n	80064ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064b8:	f7fd f91e 	bl	80036f8 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e0cb      	b.n	8006666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ce:	4b49      	ldr	r3, [pc, #292]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 80064d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0ee      	beq.n	80064b8 <HAL_RCC_OscConfig+0x334>
 80064da:	e014      	b.n	8006506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064dc:	f7fd f90c 	bl	80036f8 <HAL_GetTick>
 80064e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064e2:	e00a      	b.n	80064fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064e4:	f7fd f908 	bl	80036f8 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e0b5      	b.n	8006666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064fa:	4b3e      	ldr	r3, [pc, #248]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 80064fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1ee      	bne.n	80064e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006506:	7dfb      	ldrb	r3, [r7, #23]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d105      	bne.n	8006518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800650c:	4b39      	ldr	r3, [pc, #228]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 800650e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006510:	4a38      	ldr	r2, [pc, #224]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 8006512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006516:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 80a1 	beq.w	8006664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006522:	4b34      	ldr	r3, [pc, #208]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 030c 	and.w	r3, r3, #12
 800652a:	2b08      	cmp	r3, #8
 800652c:	d05c      	beq.n	80065e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	2b02      	cmp	r3, #2
 8006534:	d141      	bne.n	80065ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006536:	4b31      	ldr	r3, [pc, #196]	@ (80065fc <HAL_RCC_OscConfig+0x478>)
 8006538:	2200      	movs	r2, #0
 800653a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800653c:	f7fd f8dc 	bl	80036f8 <HAL_GetTick>
 8006540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006542:	e008      	b.n	8006556 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006544:	f7fd f8d8 	bl	80036f8 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e087      	b.n	8006666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006556:	4b27      	ldr	r3, [pc, #156]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1f0      	bne.n	8006544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	69da      	ldr	r2, [r3, #28]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006570:	019b      	lsls	r3, r3, #6
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006578:	085b      	lsrs	r3, r3, #1
 800657a:	3b01      	subs	r3, #1
 800657c:	041b      	lsls	r3, r3, #16
 800657e:	431a      	orrs	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006584:	061b      	lsls	r3, r3, #24
 8006586:	491b      	ldr	r1, [pc, #108]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 8006588:	4313      	orrs	r3, r2
 800658a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800658c:	4b1b      	ldr	r3, [pc, #108]	@ (80065fc <HAL_RCC_OscConfig+0x478>)
 800658e:	2201      	movs	r2, #1
 8006590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006592:	f7fd f8b1 	bl	80036f8 <HAL_GetTick>
 8006596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006598:	e008      	b.n	80065ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800659a:	f7fd f8ad 	bl	80036f8 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e05c      	b.n	8006666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ac:	4b11      	ldr	r3, [pc, #68]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0f0      	beq.n	800659a <HAL_RCC_OscConfig+0x416>
 80065b8:	e054      	b.n	8006664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ba:	4b10      	ldr	r3, [pc, #64]	@ (80065fc <HAL_RCC_OscConfig+0x478>)
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c0:	f7fd f89a 	bl	80036f8 <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c8:	f7fd f896 	bl	80036f8 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e045      	b.n	8006666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065da:	4b06      	ldr	r3, [pc, #24]	@ (80065f4 <HAL_RCC_OscConfig+0x470>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1f0      	bne.n	80065c8 <HAL_RCC_OscConfig+0x444>
 80065e6:	e03d      	b.n	8006664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d107      	bne.n	8006600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e038      	b.n	8006666 <HAL_RCC_OscConfig+0x4e2>
 80065f4:	40023800 	.word	0x40023800
 80065f8:	40007000 	.word	0x40007000
 80065fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006600:	4b1b      	ldr	r3, [pc, #108]	@ (8006670 <HAL_RCC_OscConfig+0x4ec>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d028      	beq.n	8006660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006618:	429a      	cmp	r2, r3
 800661a:	d121      	bne.n	8006660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006626:	429a      	cmp	r2, r3
 8006628:	d11a      	bne.n	8006660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006630:	4013      	ands	r3, r2
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006638:	4293      	cmp	r3, r2
 800663a:	d111      	bne.n	8006660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006646:	085b      	lsrs	r3, r3, #1
 8006648:	3b01      	subs	r3, #1
 800664a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800664c:	429a      	cmp	r2, r3
 800664e:	d107      	bne.n	8006660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800665c:	429a      	cmp	r2, r3
 800665e:	d001      	beq.n	8006664 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e000      	b.n	8006666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	40023800 	.word	0x40023800

08006674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e0cc      	b.n	8006822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006688:	4b68      	ldr	r3, [pc, #416]	@ (800682c <HAL_RCC_ClockConfig+0x1b8>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0307 	and.w	r3, r3, #7
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	429a      	cmp	r2, r3
 8006694:	d90c      	bls.n	80066b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006696:	4b65      	ldr	r3, [pc, #404]	@ (800682c <HAL_RCC_ClockConfig+0x1b8>)
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800669e:	4b63      	ldr	r3, [pc, #396]	@ (800682c <HAL_RCC_ClockConfig+0x1b8>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0307 	and.w	r3, r3, #7
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d001      	beq.n	80066b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e0b8      	b.n	8006822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d020      	beq.n	80066fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d005      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066c8:	4b59      	ldr	r3, [pc, #356]	@ (8006830 <HAL_RCC_ClockConfig+0x1bc>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	4a58      	ldr	r2, [pc, #352]	@ (8006830 <HAL_RCC_ClockConfig+0x1bc>)
 80066ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80066d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0308 	and.w	r3, r3, #8
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d005      	beq.n	80066ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066e0:	4b53      	ldr	r3, [pc, #332]	@ (8006830 <HAL_RCC_ClockConfig+0x1bc>)
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	4a52      	ldr	r2, [pc, #328]	@ (8006830 <HAL_RCC_ClockConfig+0x1bc>)
 80066e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80066ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066ec:	4b50      	ldr	r3, [pc, #320]	@ (8006830 <HAL_RCC_ClockConfig+0x1bc>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	494d      	ldr	r1, [pc, #308]	@ (8006830 <HAL_RCC_ClockConfig+0x1bc>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d044      	beq.n	8006794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d107      	bne.n	8006722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006712:	4b47      	ldr	r3, [pc, #284]	@ (8006830 <HAL_RCC_ClockConfig+0x1bc>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d119      	bne.n	8006752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e07f      	b.n	8006822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	2b02      	cmp	r3, #2
 8006728:	d003      	beq.n	8006732 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800672e:	2b03      	cmp	r3, #3
 8006730:	d107      	bne.n	8006742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006732:	4b3f      	ldr	r3, [pc, #252]	@ (8006830 <HAL_RCC_ClockConfig+0x1bc>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d109      	bne.n	8006752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e06f      	b.n	8006822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006742:	4b3b      	ldr	r3, [pc, #236]	@ (8006830 <HAL_RCC_ClockConfig+0x1bc>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e067      	b.n	8006822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006752:	4b37      	ldr	r3, [pc, #220]	@ (8006830 <HAL_RCC_ClockConfig+0x1bc>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f023 0203 	bic.w	r2, r3, #3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	4934      	ldr	r1, [pc, #208]	@ (8006830 <HAL_RCC_ClockConfig+0x1bc>)
 8006760:	4313      	orrs	r3, r2
 8006762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006764:	f7fc ffc8 	bl	80036f8 <HAL_GetTick>
 8006768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800676a:	e00a      	b.n	8006782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800676c:	f7fc ffc4 	bl	80036f8 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800677a:	4293      	cmp	r3, r2
 800677c:	d901      	bls.n	8006782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e04f      	b.n	8006822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006782:	4b2b      	ldr	r3, [pc, #172]	@ (8006830 <HAL_RCC_ClockConfig+0x1bc>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 020c 	and.w	r2, r3, #12
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	429a      	cmp	r2, r3
 8006792:	d1eb      	bne.n	800676c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006794:	4b25      	ldr	r3, [pc, #148]	@ (800682c <HAL_RCC_ClockConfig+0x1b8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0307 	and.w	r3, r3, #7
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d20c      	bcs.n	80067bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067a2:	4b22      	ldr	r3, [pc, #136]	@ (800682c <HAL_RCC_ClockConfig+0x1b8>)
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067aa:	4b20      	ldr	r3, [pc, #128]	@ (800682c <HAL_RCC_ClockConfig+0x1b8>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0307 	and.w	r3, r3, #7
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d001      	beq.n	80067bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e032      	b.n	8006822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d008      	beq.n	80067da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067c8:	4b19      	ldr	r3, [pc, #100]	@ (8006830 <HAL_RCC_ClockConfig+0x1bc>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	4916      	ldr	r1, [pc, #88]	@ (8006830 <HAL_RCC_ClockConfig+0x1bc>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067e6:	4b12      	ldr	r3, [pc, #72]	@ (8006830 <HAL_RCC_ClockConfig+0x1bc>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	490e      	ldr	r1, [pc, #56]	@ (8006830 <HAL_RCC_ClockConfig+0x1bc>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067fa:	f000 f821 	bl	8006840 <HAL_RCC_GetSysClockFreq>
 80067fe:	4602      	mov	r2, r0
 8006800:	4b0b      	ldr	r3, [pc, #44]	@ (8006830 <HAL_RCC_ClockConfig+0x1bc>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	091b      	lsrs	r3, r3, #4
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	490a      	ldr	r1, [pc, #40]	@ (8006834 <HAL_RCC_ClockConfig+0x1c0>)
 800680c:	5ccb      	ldrb	r3, [r1, r3]
 800680e:	fa22 f303 	lsr.w	r3, r2, r3
 8006812:	4a09      	ldr	r2, [pc, #36]	@ (8006838 <HAL_RCC_ClockConfig+0x1c4>)
 8006814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006816:	4b09      	ldr	r3, [pc, #36]	@ (800683c <HAL_RCC_ClockConfig+0x1c8>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f7fc ff28 	bl	8003670 <HAL_InitTick>

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	40023c00 	.word	0x40023c00
 8006830:	40023800 	.word	0x40023800
 8006834:	0800ef58 	.word	0x0800ef58
 8006838:	20000000 	.word	0x20000000
 800683c:	20000004 	.word	0x20000004

08006840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006844:	b090      	sub	sp, #64	@ 0x40
 8006846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006858:	4b59      	ldr	r3, [pc, #356]	@ (80069c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f003 030c 	and.w	r3, r3, #12
 8006860:	2b08      	cmp	r3, #8
 8006862:	d00d      	beq.n	8006880 <HAL_RCC_GetSysClockFreq+0x40>
 8006864:	2b08      	cmp	r3, #8
 8006866:	f200 80a1 	bhi.w	80069ac <HAL_RCC_GetSysClockFreq+0x16c>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <HAL_RCC_GetSysClockFreq+0x34>
 800686e:	2b04      	cmp	r3, #4
 8006870:	d003      	beq.n	800687a <HAL_RCC_GetSysClockFreq+0x3a>
 8006872:	e09b      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006874:	4b53      	ldr	r3, [pc, #332]	@ (80069c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006876:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006878:	e09b      	b.n	80069b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800687a:	4b53      	ldr	r3, [pc, #332]	@ (80069c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800687c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800687e:	e098      	b.n	80069b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006880:	4b4f      	ldr	r3, [pc, #316]	@ (80069c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006888:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800688a:	4b4d      	ldr	r3, [pc, #308]	@ (80069c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d028      	beq.n	80068e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006896:	4b4a      	ldr	r3, [pc, #296]	@ (80069c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	099b      	lsrs	r3, r3, #6
 800689c:	2200      	movs	r2, #0
 800689e:	623b      	str	r3, [r7, #32]
 80068a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80068a8:	2100      	movs	r1, #0
 80068aa:	4b47      	ldr	r3, [pc, #284]	@ (80069c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80068ac:	fb03 f201 	mul.w	r2, r3, r1
 80068b0:	2300      	movs	r3, #0
 80068b2:	fb00 f303 	mul.w	r3, r0, r3
 80068b6:	4413      	add	r3, r2
 80068b8:	4a43      	ldr	r2, [pc, #268]	@ (80069c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80068ba:	fba0 1202 	umull	r1, r2, r0, r2
 80068be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068c0:	460a      	mov	r2, r1
 80068c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80068c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068c6:	4413      	add	r3, r2
 80068c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068cc:	2200      	movs	r2, #0
 80068ce:	61bb      	str	r3, [r7, #24]
 80068d0:	61fa      	str	r2, [r7, #28]
 80068d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80068da:	f7fa f98d 	bl	8000bf8 <__aeabi_uldivmod>
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	4613      	mov	r3, r2
 80068e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068e6:	e053      	b.n	8006990 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068e8:	4b35      	ldr	r3, [pc, #212]	@ (80069c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	099b      	lsrs	r3, r3, #6
 80068ee:	2200      	movs	r2, #0
 80068f0:	613b      	str	r3, [r7, #16]
 80068f2:	617a      	str	r2, [r7, #20]
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80068fa:	f04f 0b00 	mov.w	fp, #0
 80068fe:	4652      	mov	r2, sl
 8006900:	465b      	mov	r3, fp
 8006902:	f04f 0000 	mov.w	r0, #0
 8006906:	f04f 0100 	mov.w	r1, #0
 800690a:	0159      	lsls	r1, r3, #5
 800690c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006910:	0150      	lsls	r0, r2, #5
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	ebb2 080a 	subs.w	r8, r2, sl
 800691a:	eb63 090b 	sbc.w	r9, r3, fp
 800691e:	f04f 0200 	mov.w	r2, #0
 8006922:	f04f 0300 	mov.w	r3, #0
 8006926:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800692a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800692e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006932:	ebb2 0408 	subs.w	r4, r2, r8
 8006936:	eb63 0509 	sbc.w	r5, r3, r9
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	00eb      	lsls	r3, r5, #3
 8006944:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006948:	00e2      	lsls	r2, r4, #3
 800694a:	4614      	mov	r4, r2
 800694c:	461d      	mov	r5, r3
 800694e:	eb14 030a 	adds.w	r3, r4, sl
 8006952:	603b      	str	r3, [r7, #0]
 8006954:	eb45 030b 	adc.w	r3, r5, fp
 8006958:	607b      	str	r3, [r7, #4]
 800695a:	f04f 0200 	mov.w	r2, #0
 800695e:	f04f 0300 	mov.w	r3, #0
 8006962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006966:	4629      	mov	r1, r5
 8006968:	028b      	lsls	r3, r1, #10
 800696a:	4621      	mov	r1, r4
 800696c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006970:	4621      	mov	r1, r4
 8006972:	028a      	lsls	r2, r1, #10
 8006974:	4610      	mov	r0, r2
 8006976:	4619      	mov	r1, r3
 8006978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800697a:	2200      	movs	r2, #0
 800697c:	60bb      	str	r3, [r7, #8]
 800697e:	60fa      	str	r2, [r7, #12]
 8006980:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006984:	f7fa f938 	bl	8000bf8 <__aeabi_uldivmod>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4613      	mov	r3, r2
 800698e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006990:	4b0b      	ldr	r3, [pc, #44]	@ (80069c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	0c1b      	lsrs	r3, r3, #16
 8006996:	f003 0303 	and.w	r3, r3, #3
 800699a:	3301      	adds	r3, #1
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80069a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80069a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80069aa:	e002      	b.n	80069b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069ac:	4b05      	ldr	r3, [pc, #20]	@ (80069c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80069ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80069b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3740      	adds	r7, #64	@ 0x40
 80069b8:	46bd      	mov	sp, r7
 80069ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069be:	bf00      	nop
 80069c0:	40023800 	.word	0x40023800
 80069c4:	00f42400 	.word	0x00f42400
 80069c8:	017d7840 	.word	0x017d7840

080069cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069d0:	4b03      	ldr	r3, [pc, #12]	@ (80069e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80069d2:	681b      	ldr	r3, [r3, #0]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	20000000 	.word	0x20000000

080069e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069e8:	f7ff fff0 	bl	80069cc <HAL_RCC_GetHCLKFreq>
 80069ec:	4602      	mov	r2, r0
 80069ee:	4b05      	ldr	r3, [pc, #20]	@ (8006a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	0a9b      	lsrs	r3, r3, #10
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	4903      	ldr	r1, [pc, #12]	@ (8006a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069fa:	5ccb      	ldrb	r3, [r1, r3]
 80069fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	40023800 	.word	0x40023800
 8006a08:	0800ef68 	.word	0x0800ef68

08006a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e041      	b.n	8006aa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d106      	bne.n	8006a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7fa ff6a 	bl	800190c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	f000 fd70 	bl	8007530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d001      	beq.n	8006ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e044      	b.n	8006b4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68da      	ldr	r2, [r3, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 0201 	orr.w	r2, r2, #1
 8006ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8006b5c <HAL_TIM_Base_Start_IT+0xb0>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d018      	beq.n	8006b18 <HAL_TIM_Base_Start_IT+0x6c>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aee:	d013      	beq.n	8006b18 <HAL_TIM_Base_Start_IT+0x6c>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a1a      	ldr	r2, [pc, #104]	@ (8006b60 <HAL_TIM_Base_Start_IT+0xb4>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d00e      	beq.n	8006b18 <HAL_TIM_Base_Start_IT+0x6c>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a19      	ldr	r2, [pc, #100]	@ (8006b64 <HAL_TIM_Base_Start_IT+0xb8>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d009      	beq.n	8006b18 <HAL_TIM_Base_Start_IT+0x6c>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a17      	ldr	r2, [pc, #92]	@ (8006b68 <HAL_TIM_Base_Start_IT+0xbc>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d004      	beq.n	8006b18 <HAL_TIM_Base_Start_IT+0x6c>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a16      	ldr	r2, [pc, #88]	@ (8006b6c <HAL_TIM_Base_Start_IT+0xc0>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d111      	bne.n	8006b3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b06      	cmp	r3, #6
 8006b28:	d010      	beq.n	8006b4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f042 0201 	orr.w	r2, r2, #1
 8006b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b3a:	e007      	b.n	8006b4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f042 0201 	orr.w	r2, r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40010000 	.word	0x40010000
 8006b60:	40000400 	.word	0x40000400
 8006b64:	40000800 	.word	0x40000800
 8006b68:	40000c00 	.word	0x40000c00
 8006b6c:	40014000 	.word	0x40014000

08006b70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e041      	b.n	8006c06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d106      	bne.n	8006b9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f839 	bl	8006c0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	3304      	adds	r3, #4
 8006bac:	4619      	mov	r1, r3
 8006bae:	4610      	mov	r0, r2
 8006bb0:	f000 fcbe 	bl	8007530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
	...

08006c24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d109      	bne.n	8006c48 <HAL_TIM_PWM_Start+0x24>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	bf14      	ite	ne
 8006c40:	2301      	movne	r3, #1
 8006c42:	2300      	moveq	r3, #0
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	e022      	b.n	8006c8e <HAL_TIM_PWM_Start+0x6a>
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	d109      	bne.n	8006c62 <HAL_TIM_PWM_Start+0x3e>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	bf14      	ite	ne
 8006c5a:	2301      	movne	r3, #1
 8006c5c:	2300      	moveq	r3, #0
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	e015      	b.n	8006c8e <HAL_TIM_PWM_Start+0x6a>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	d109      	bne.n	8006c7c <HAL_TIM_PWM_Start+0x58>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	bf14      	ite	ne
 8006c74:	2301      	movne	r3, #1
 8006c76:	2300      	moveq	r3, #0
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	e008      	b.n	8006c8e <HAL_TIM_PWM_Start+0x6a>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	bf14      	ite	ne
 8006c88:	2301      	movne	r3, #1
 8006c8a:	2300      	moveq	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e068      	b.n	8006d68 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d104      	bne.n	8006ca6 <HAL_TIM_PWM_Start+0x82>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ca4:	e013      	b.n	8006cce <HAL_TIM_PWM_Start+0xaa>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d104      	bne.n	8006cb6 <HAL_TIM_PWM_Start+0x92>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cb4:	e00b      	b.n	8006cce <HAL_TIM_PWM_Start+0xaa>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d104      	bne.n	8006cc6 <HAL_TIM_PWM_Start+0xa2>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cc4:	e003      	b.n	8006cce <HAL_TIM_PWM_Start+0xaa>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fedc 	bl	8007a94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a23      	ldr	r2, [pc, #140]	@ (8006d70 <HAL_TIM_PWM_Start+0x14c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d107      	bne.n	8006cf6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cf4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a1d      	ldr	r2, [pc, #116]	@ (8006d70 <HAL_TIM_PWM_Start+0x14c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d018      	beq.n	8006d32 <HAL_TIM_PWM_Start+0x10e>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d08:	d013      	beq.n	8006d32 <HAL_TIM_PWM_Start+0x10e>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a19      	ldr	r2, [pc, #100]	@ (8006d74 <HAL_TIM_PWM_Start+0x150>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00e      	beq.n	8006d32 <HAL_TIM_PWM_Start+0x10e>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a17      	ldr	r2, [pc, #92]	@ (8006d78 <HAL_TIM_PWM_Start+0x154>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d009      	beq.n	8006d32 <HAL_TIM_PWM_Start+0x10e>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a16      	ldr	r2, [pc, #88]	@ (8006d7c <HAL_TIM_PWM_Start+0x158>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d004      	beq.n	8006d32 <HAL_TIM_PWM_Start+0x10e>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a14      	ldr	r2, [pc, #80]	@ (8006d80 <HAL_TIM_PWM_Start+0x15c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d111      	bne.n	8006d56 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b06      	cmp	r3, #6
 8006d42:	d010      	beq.n	8006d66 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0201 	orr.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d54:	e007      	b.n	8006d66 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f042 0201 	orr.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	40010000 	.word	0x40010000
 8006d74:	40000400 	.word	0x40000400
 8006d78:	40000800 	.word	0x40000800
 8006d7c:	40000c00 	.word	0x40000c00
 8006d80:	40014000 	.word	0x40014000

08006d84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e097      	b.n	8006ec8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d106      	bne.n	8006db2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7fa fdf3 	bl	8001998 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2202      	movs	r2, #2
 8006db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6812      	ldr	r2, [r2, #0]
 8006dc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dc8:	f023 0307 	bic.w	r3, r3, #7
 8006dcc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	4610      	mov	r0, r2
 8006dda:	f000 fba9 	bl	8007530 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e06:	f023 0303 	bic.w	r3, r3, #3
 8006e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	021b      	lsls	r3, r3, #8
 8006e16:	4313      	orrs	r3, r2
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006e24:	f023 030c 	bic.w	r3, r3, #12
 8006e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	68da      	ldr	r2, [r3, #12]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	021b      	lsls	r3, r3, #8
 8006e40:	4313      	orrs	r3, r2
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	011a      	lsls	r2, r3, #4
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	031b      	lsls	r3, r3, #12
 8006e54:	4313      	orrs	r3, r2
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006e62:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006e6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	011b      	lsls	r3, r3, #4
 8006e76:	4313      	orrs	r3, r2
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ee0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ee8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ef0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006ef8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d110      	bne.n	8006f22 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d102      	bne.n	8006f0c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f06:	7b7b      	ldrb	r3, [r7, #13]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d001      	beq.n	8006f10 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e069      	b.n	8006fe4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f20:	e031      	b.n	8006f86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	d110      	bne.n	8006f4a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f28:	7bbb      	ldrb	r3, [r7, #14]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d102      	bne.n	8006f34 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f2e:	7b3b      	ldrb	r3, [r7, #12]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d001      	beq.n	8006f38 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e055      	b.n	8006fe4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f48:	e01d      	b.n	8006f86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d108      	bne.n	8006f62 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d105      	bne.n	8006f62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f56:	7b7b      	ldrb	r3, [r7, #13]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d102      	bne.n	8006f62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f5c:	7b3b      	ldrb	r3, [r7, #12]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d001      	beq.n	8006f66 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e03e      	b.n	8006fe4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2202      	movs	r2, #2
 8006f6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2202      	movs	r2, #2
 8006f72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2202      	movs	r2, #2
 8006f82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d003      	beq.n	8006f94 <HAL_TIM_Encoder_Start+0xc4>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d008      	beq.n	8006fa4 <HAL_TIM_Encoder_Start+0xd4>
 8006f92:	e00f      	b.n	8006fb4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fd79 	bl	8007a94 <TIM_CCxChannelCmd>
      break;
 8006fa2:	e016      	b.n	8006fd2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	2104      	movs	r1, #4
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 fd71 	bl	8007a94 <TIM_CCxChannelCmd>
      break;
 8006fb2:	e00e      	b.n	8006fd2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	2100      	movs	r1, #0
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 fd69 	bl	8007a94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	2104      	movs	r1, #4
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fd62 	bl	8007a94 <TIM_CCxChannelCmd>
      break;
 8006fd0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f042 0201 	orr.w	r2, r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f003 0302 	and.w	r3, r3, #2
 800700a:	2b00      	cmp	r3, #0
 800700c:	d020      	beq.n	8007050 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d01b      	beq.n	8007050 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f06f 0202 	mvn.w	r2, #2
 8007020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	f003 0303 	and.w	r3, r3, #3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fa5b 	bl	80074f2 <HAL_TIM_IC_CaptureCallback>
 800703c:	e005      	b.n	800704a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa4d 	bl	80074de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fa5e 	bl	8007506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f003 0304 	and.w	r3, r3, #4
 8007056:	2b00      	cmp	r3, #0
 8007058:	d020      	beq.n	800709c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01b      	beq.n	800709c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f06f 0204 	mvn.w	r2, #4
 800706c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2202      	movs	r2, #2
 8007072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa35 	bl	80074f2 <HAL_TIM_IC_CaptureCallback>
 8007088:	e005      	b.n	8007096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fa27 	bl	80074de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fa38 	bl	8007506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f003 0308 	and.w	r3, r3, #8
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d020      	beq.n	80070e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01b      	beq.n	80070e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f06f 0208 	mvn.w	r2, #8
 80070b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2204      	movs	r2, #4
 80070be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fa0f 	bl	80074f2 <HAL_TIM_IC_CaptureCallback>
 80070d4:	e005      	b.n	80070e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fa01 	bl	80074de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fa12 	bl	8007506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d020      	beq.n	8007134 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f003 0310 	and.w	r3, r3, #16
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d01b      	beq.n	8007134 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f06f 0210 	mvn.w	r2, #16
 8007104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2208      	movs	r2, #8
 800710a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f9e9 	bl	80074f2 <HAL_TIM_IC_CaptureCallback>
 8007120:	e005      	b.n	800712e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f9db 	bl	80074de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f9ec 	bl	8007506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00c      	beq.n	8007158 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d007      	beq.n	8007158 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f06f 0201 	mvn.w	r2, #1
 8007150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fa faba 	bl	80016cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00c      	beq.n	800717c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007168:	2b00      	cmp	r3, #0
 800716a:	d007      	beq.n	800717c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fd7c 	bl	8007c74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00c      	beq.n	80071a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800718c:	2b00      	cmp	r3, #0
 800718e:	d007      	beq.n	80071a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f9bd 	bl	800751a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00c      	beq.n	80071c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f003 0320 	and.w	r3, r3, #32
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d007      	beq.n	80071c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f06f 0220 	mvn.w	r2, #32
 80071bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fd4e 	bl	8007c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071c4:	bf00      	nop
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d101      	bne.n	80071ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071e6:	2302      	movs	r3, #2
 80071e8:	e0ae      	b.n	8007348 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b0c      	cmp	r3, #12
 80071f6:	f200 809f 	bhi.w	8007338 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007200 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007200:	08007235 	.word	0x08007235
 8007204:	08007339 	.word	0x08007339
 8007208:	08007339 	.word	0x08007339
 800720c:	08007339 	.word	0x08007339
 8007210:	08007275 	.word	0x08007275
 8007214:	08007339 	.word	0x08007339
 8007218:	08007339 	.word	0x08007339
 800721c:	08007339 	.word	0x08007339
 8007220:	080072b7 	.word	0x080072b7
 8007224:	08007339 	.word	0x08007339
 8007228:	08007339 	.word	0x08007339
 800722c:	08007339 	.word	0x08007339
 8007230:	080072f7 	.word	0x080072f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68b9      	ldr	r1, [r7, #8]
 800723a:	4618      	mov	r0, r3
 800723c:	f000 fa04 	bl	8007648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699a      	ldr	r2, [r3, #24]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0208 	orr.w	r2, r2, #8
 800724e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699a      	ldr	r2, [r3, #24]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 0204 	bic.w	r2, r2, #4
 800725e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6999      	ldr	r1, [r3, #24]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	691a      	ldr	r2, [r3, #16]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	619a      	str	r2, [r3, #24]
      break;
 8007272:	e064      	b.n	800733e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	4618      	mov	r0, r3
 800727c:	f000 fa4a 	bl	8007714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	699a      	ldr	r2, [r3, #24]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800728e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	699a      	ldr	r2, [r3, #24]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800729e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6999      	ldr	r1, [r3, #24]
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	021a      	lsls	r2, r3, #8
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	619a      	str	r2, [r3, #24]
      break;
 80072b4:	e043      	b.n	800733e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68b9      	ldr	r1, [r7, #8]
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 fa95 	bl	80077ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	69da      	ldr	r2, [r3, #28]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f042 0208 	orr.w	r2, r2, #8
 80072d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69da      	ldr	r2, [r3, #28]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0204 	bic.w	r2, r2, #4
 80072e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69d9      	ldr	r1, [r3, #28]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	691a      	ldr	r2, [r3, #16]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	430a      	orrs	r2, r1
 80072f2:	61da      	str	r2, [r3, #28]
      break;
 80072f4:	e023      	b.n	800733e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68b9      	ldr	r1, [r7, #8]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 fadf 	bl	80078c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69da      	ldr	r2, [r3, #28]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69da      	ldr	r2, [r3, #28]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	69d9      	ldr	r1, [r3, #28]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	021a      	lsls	r2, r3, #8
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	61da      	str	r2, [r3, #28]
      break;
 8007336:	e002      	b.n	800733e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	75fb      	strb	r3, [r7, #23]
      break;
 800733c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007346:	7dfb      	ldrb	r3, [r7, #23]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007364:	2b01      	cmp	r3, #1
 8007366:	d101      	bne.n	800736c <HAL_TIM_ConfigClockSource+0x1c>
 8007368:	2302      	movs	r3, #2
 800736a:	e0b4      	b.n	80074d6 <HAL_TIM_ConfigClockSource+0x186>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800738a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007392:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073a4:	d03e      	beq.n	8007424 <HAL_TIM_ConfigClockSource+0xd4>
 80073a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073aa:	f200 8087 	bhi.w	80074bc <HAL_TIM_ConfigClockSource+0x16c>
 80073ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073b2:	f000 8086 	beq.w	80074c2 <HAL_TIM_ConfigClockSource+0x172>
 80073b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ba:	d87f      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x16c>
 80073bc:	2b70      	cmp	r3, #112	@ 0x70
 80073be:	d01a      	beq.n	80073f6 <HAL_TIM_ConfigClockSource+0xa6>
 80073c0:	2b70      	cmp	r3, #112	@ 0x70
 80073c2:	d87b      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x16c>
 80073c4:	2b60      	cmp	r3, #96	@ 0x60
 80073c6:	d050      	beq.n	800746a <HAL_TIM_ConfigClockSource+0x11a>
 80073c8:	2b60      	cmp	r3, #96	@ 0x60
 80073ca:	d877      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x16c>
 80073cc:	2b50      	cmp	r3, #80	@ 0x50
 80073ce:	d03c      	beq.n	800744a <HAL_TIM_ConfigClockSource+0xfa>
 80073d0:	2b50      	cmp	r3, #80	@ 0x50
 80073d2:	d873      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x16c>
 80073d4:	2b40      	cmp	r3, #64	@ 0x40
 80073d6:	d058      	beq.n	800748a <HAL_TIM_ConfigClockSource+0x13a>
 80073d8:	2b40      	cmp	r3, #64	@ 0x40
 80073da:	d86f      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x16c>
 80073dc:	2b30      	cmp	r3, #48	@ 0x30
 80073de:	d064      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x15a>
 80073e0:	2b30      	cmp	r3, #48	@ 0x30
 80073e2:	d86b      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x16c>
 80073e4:	2b20      	cmp	r3, #32
 80073e6:	d060      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x15a>
 80073e8:	2b20      	cmp	r3, #32
 80073ea:	d867      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x16c>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d05c      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x15a>
 80073f0:	2b10      	cmp	r3, #16
 80073f2:	d05a      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x15a>
 80073f4:	e062      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007406:	f000 fb25 	bl	8007a54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007418:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	609a      	str	r2, [r3, #8]
      break;
 8007422:	e04f      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007434:	f000 fb0e 	bl	8007a54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689a      	ldr	r2, [r3, #8]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007446:	609a      	str	r2, [r3, #8]
      break;
 8007448:	e03c      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007456:	461a      	mov	r2, r3
 8007458:	f000 fa82 	bl	8007960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2150      	movs	r1, #80	@ 0x50
 8007462:	4618      	mov	r0, r3
 8007464:	f000 fadb 	bl	8007a1e <TIM_ITRx_SetConfig>
      break;
 8007468:	e02c      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007476:	461a      	mov	r2, r3
 8007478:	f000 faa1 	bl	80079be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2160      	movs	r1, #96	@ 0x60
 8007482:	4618      	mov	r0, r3
 8007484:	f000 facb 	bl	8007a1e <TIM_ITRx_SetConfig>
      break;
 8007488:	e01c      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007496:	461a      	mov	r2, r3
 8007498:	f000 fa62 	bl	8007960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2140      	movs	r1, #64	@ 0x40
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 fabb 	bl	8007a1e <TIM_ITRx_SetConfig>
      break;
 80074a8:	e00c      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4619      	mov	r1, r3
 80074b4:	4610      	mov	r0, r2
 80074b6:	f000 fab2 	bl	8007a1e <TIM_ITRx_SetConfig>
      break;
 80074ba:	e003      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	73fb      	strb	r3, [r7, #15]
      break;
 80074c0:	e000      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800750e:	bf00      	nop
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
	...

08007530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a3a      	ldr	r2, [pc, #232]	@ (800762c <TIM_Base_SetConfig+0xfc>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00f      	beq.n	8007568 <TIM_Base_SetConfig+0x38>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800754e:	d00b      	beq.n	8007568 <TIM_Base_SetConfig+0x38>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a37      	ldr	r2, [pc, #220]	@ (8007630 <TIM_Base_SetConfig+0x100>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d007      	beq.n	8007568 <TIM_Base_SetConfig+0x38>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a36      	ldr	r2, [pc, #216]	@ (8007634 <TIM_Base_SetConfig+0x104>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d003      	beq.n	8007568 <TIM_Base_SetConfig+0x38>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a35      	ldr	r2, [pc, #212]	@ (8007638 <TIM_Base_SetConfig+0x108>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d108      	bne.n	800757a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800756e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	4313      	orrs	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a2b      	ldr	r2, [pc, #172]	@ (800762c <TIM_Base_SetConfig+0xfc>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d01b      	beq.n	80075ba <TIM_Base_SetConfig+0x8a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007588:	d017      	beq.n	80075ba <TIM_Base_SetConfig+0x8a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a28      	ldr	r2, [pc, #160]	@ (8007630 <TIM_Base_SetConfig+0x100>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d013      	beq.n	80075ba <TIM_Base_SetConfig+0x8a>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a27      	ldr	r2, [pc, #156]	@ (8007634 <TIM_Base_SetConfig+0x104>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d00f      	beq.n	80075ba <TIM_Base_SetConfig+0x8a>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a26      	ldr	r2, [pc, #152]	@ (8007638 <TIM_Base_SetConfig+0x108>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d00b      	beq.n	80075ba <TIM_Base_SetConfig+0x8a>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a25      	ldr	r2, [pc, #148]	@ (800763c <TIM_Base_SetConfig+0x10c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d007      	beq.n	80075ba <TIM_Base_SetConfig+0x8a>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a24      	ldr	r2, [pc, #144]	@ (8007640 <TIM_Base_SetConfig+0x110>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d003      	beq.n	80075ba <TIM_Base_SetConfig+0x8a>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a23      	ldr	r2, [pc, #140]	@ (8007644 <TIM_Base_SetConfig+0x114>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d108      	bne.n	80075cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	689a      	ldr	r2, [r3, #8]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a0e      	ldr	r2, [pc, #56]	@ (800762c <TIM_Base_SetConfig+0xfc>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d103      	bne.n	8007600 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	691a      	ldr	r2, [r3, #16]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b01      	cmp	r3, #1
 8007610:	d105      	bne.n	800761e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f023 0201 	bic.w	r2, r3, #1
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	611a      	str	r2, [r3, #16]
  }
}
 800761e:	bf00      	nop
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	40010000 	.word	0x40010000
 8007630:	40000400 	.word	0x40000400
 8007634:	40000800 	.word	0x40000800
 8007638:	40000c00 	.word	0x40000c00
 800763c:	40014000 	.word	0x40014000
 8007640:	40014400 	.word	0x40014400
 8007644:	40014800 	.word	0x40014800

08007648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	f023 0201 	bic.w	r2, r3, #1
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 0303 	bic.w	r3, r3, #3
 800767e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f023 0302 	bic.w	r3, r3, #2
 8007690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	4313      	orrs	r3, r2
 800769a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a1c      	ldr	r2, [pc, #112]	@ (8007710 <TIM_OC1_SetConfig+0xc8>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d10c      	bne.n	80076be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f023 0308 	bic.w	r3, r3, #8
 80076aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f023 0304 	bic.w	r3, r3, #4
 80076bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a13      	ldr	r2, [pc, #76]	@ (8007710 <TIM_OC1_SetConfig+0xc8>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d111      	bne.n	80076ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	621a      	str	r2, [r3, #32]
}
 8007704:	bf00      	nop
 8007706:	371c      	adds	r7, #28
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	40010000 	.word	0x40010000

08007714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007714:	b480      	push	{r7}
 8007716:	b087      	sub	sp, #28
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a1b      	ldr	r3, [r3, #32]
 8007728:	f023 0210 	bic.w	r2, r3, #16
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800774a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	021b      	lsls	r3, r3, #8
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	4313      	orrs	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f023 0320 	bic.w	r3, r3, #32
 800775e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	011b      	lsls	r3, r3, #4
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	4313      	orrs	r3, r2
 800776a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a1e      	ldr	r2, [pc, #120]	@ (80077e8 <TIM_OC2_SetConfig+0xd4>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d10d      	bne.n	8007790 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800777a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	011b      	lsls	r3, r3, #4
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	4313      	orrs	r3, r2
 8007786:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800778e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a15      	ldr	r2, [pc, #84]	@ (80077e8 <TIM_OC2_SetConfig+0xd4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d113      	bne.n	80077c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800779e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4313      	orrs	r3, r2
 80077be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	621a      	str	r2, [r3, #32]
}
 80077da:	bf00      	nop
 80077dc:	371c      	adds	r7, #28
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	40010000 	.word	0x40010000

080077ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800781a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f023 0303 	bic.w	r3, r3, #3
 8007822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	4313      	orrs	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	021b      	lsls	r3, r3, #8
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	4313      	orrs	r3, r2
 8007840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a1d      	ldr	r2, [pc, #116]	@ (80078bc <TIM_OC3_SetConfig+0xd0>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d10d      	bne.n	8007866 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007850:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	021b      	lsls	r3, r3, #8
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	4313      	orrs	r3, r2
 800785c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a14      	ldr	r2, [pc, #80]	@ (80078bc <TIM_OC3_SetConfig+0xd0>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d113      	bne.n	8007896 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800787c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	011b      	lsls	r3, r3, #4
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	4313      	orrs	r3, r2
 8007888:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	011b      	lsls	r3, r3, #4
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	4313      	orrs	r3, r2
 8007894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	621a      	str	r2, [r3, #32]
}
 80078b0:	bf00      	nop
 80078b2:	371c      	adds	r7, #28
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	40010000 	.word	0x40010000

080078c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b087      	sub	sp, #28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	021b      	lsls	r3, r3, #8
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	4313      	orrs	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800790a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	031b      	lsls	r3, r3, #12
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	4313      	orrs	r3, r2
 8007916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a10      	ldr	r2, [pc, #64]	@ (800795c <TIM_OC4_SetConfig+0x9c>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d109      	bne.n	8007934 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	019b      	lsls	r3, r3, #6
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	4313      	orrs	r3, r2
 8007932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	621a      	str	r2, [r3, #32]
}
 800794e:	bf00      	nop
 8007950:	371c      	adds	r7, #28
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	40010000 	.word	0x40010000

08007960 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	f023 0201 	bic.w	r2, r3, #1
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800798a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	4313      	orrs	r3, r2
 8007994:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f023 030a 	bic.w	r3, r3, #10
 800799c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	621a      	str	r2, [r3, #32]
}
 80079b2:	bf00      	nop
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079be:	b480      	push	{r7}
 80079c0:	b087      	sub	sp, #28
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	f023 0210 	bic.w	r2, r3, #16
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	031b      	lsls	r3, r3, #12
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80079fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	011b      	lsls	r3, r3, #4
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	621a      	str	r2, [r3, #32]
}
 8007a12:	bf00      	nop
 8007a14:	371c      	adds	r7, #28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b085      	sub	sp, #20
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f043 0307 	orr.w	r3, r3, #7
 8007a40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	609a      	str	r2, [r3, #8]
}
 8007a48:	bf00      	nop
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	021a      	lsls	r2, r3, #8
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	431a      	orrs	r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	609a      	str	r2, [r3, #8]
}
 8007a88:	bf00      	nop
 8007a8a:	371c      	adds	r7, #28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f003 031f 	and.w	r3, r3, #31
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6a1a      	ldr	r2, [r3, #32]
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	43db      	mvns	r3, r3
 8007ab6:	401a      	ands	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6a1a      	ldr	r2, [r3, #32]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f003 031f 	and.w	r3, r3, #31
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8007acc:	431a      	orrs	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	621a      	str	r2, [r3, #32]
}
 8007ad2:	bf00      	nop
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
	...

08007ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d101      	bne.n	8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007af4:	2302      	movs	r3, #2
 8007af6:	e050      	b.n	8007b9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2202      	movs	r2, #2
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a1c      	ldr	r2, [pc, #112]	@ (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d018      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b44:	d013      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a18      	ldr	r2, [pc, #96]	@ (8007bac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00e      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a16      	ldr	r2, [pc, #88]	@ (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d009      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a15      	ldr	r2, [pc, #84]	@ (8007bb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d004      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a13      	ldr	r2, [pc, #76]	@ (8007bb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d10c      	bne.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	40010000 	.word	0x40010000
 8007bac:	40000400 	.word	0x40000400
 8007bb0:	40000800 	.word	0x40000800
 8007bb4:	40000c00 	.word	0x40000c00
 8007bb8:	40014000 	.word	0x40014000

08007bbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d101      	bne.n	8007bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	e03d      	b.n	8007c54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	695b      	ldr	r3, [r3, #20]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c88:	b084      	sub	sp, #16
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	f107 001c 	add.w	r0, r7, #28
 8007c96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d123      	bne.n	8007cea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007cb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007cca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d105      	bne.n	8007cde <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 fae8 	bl	80092b4 <USB_CoreReset>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	73fb      	strb	r3, [r7, #15]
 8007ce8:	e01b      	b.n	8007d22 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f001 fadc 	bl	80092b4 <USB_CoreReset>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d106      	bne.n	8007d16 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d14:	e005      	b.n	8007d22 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007d22:	7fbb      	ldrb	r3, [r7, #30]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d10b      	bne.n	8007d40 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f043 0206 	orr.w	r2, r3, #6
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f043 0220 	orr.w	r2, r3, #32
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d4c:	b004      	add	sp, #16
 8007d4e:	4770      	bx	lr

08007d50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d165      	bne.n	8007e30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	4a41      	ldr	r2, [pc, #260]	@ (8007e6c <USB_SetTurnaroundTime+0x11c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d906      	bls.n	8007d7a <USB_SetTurnaroundTime+0x2a>
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	4a40      	ldr	r2, [pc, #256]	@ (8007e70 <USB_SetTurnaroundTime+0x120>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d202      	bcs.n	8007d7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007d74:	230f      	movs	r3, #15
 8007d76:	617b      	str	r3, [r7, #20]
 8007d78:	e062      	b.n	8007e40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	4a3c      	ldr	r2, [pc, #240]	@ (8007e70 <USB_SetTurnaroundTime+0x120>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d306      	bcc.n	8007d90 <USB_SetTurnaroundTime+0x40>
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	4a3b      	ldr	r2, [pc, #236]	@ (8007e74 <USB_SetTurnaroundTime+0x124>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d202      	bcs.n	8007d90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007d8a:	230e      	movs	r3, #14
 8007d8c:	617b      	str	r3, [r7, #20]
 8007d8e:	e057      	b.n	8007e40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	4a38      	ldr	r2, [pc, #224]	@ (8007e74 <USB_SetTurnaroundTime+0x124>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d306      	bcc.n	8007da6 <USB_SetTurnaroundTime+0x56>
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	4a37      	ldr	r2, [pc, #220]	@ (8007e78 <USB_SetTurnaroundTime+0x128>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d202      	bcs.n	8007da6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007da0:	230d      	movs	r3, #13
 8007da2:	617b      	str	r3, [r7, #20]
 8007da4:	e04c      	b.n	8007e40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	4a33      	ldr	r2, [pc, #204]	@ (8007e78 <USB_SetTurnaroundTime+0x128>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d306      	bcc.n	8007dbc <USB_SetTurnaroundTime+0x6c>
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	4a32      	ldr	r2, [pc, #200]	@ (8007e7c <USB_SetTurnaroundTime+0x12c>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d802      	bhi.n	8007dbc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007db6:	230c      	movs	r3, #12
 8007db8:	617b      	str	r3, [r7, #20]
 8007dba:	e041      	b.n	8007e40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	4a2f      	ldr	r2, [pc, #188]	@ (8007e7c <USB_SetTurnaroundTime+0x12c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d906      	bls.n	8007dd2 <USB_SetTurnaroundTime+0x82>
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	4a2e      	ldr	r2, [pc, #184]	@ (8007e80 <USB_SetTurnaroundTime+0x130>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d802      	bhi.n	8007dd2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007dcc:	230b      	movs	r3, #11
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	e036      	b.n	8007e40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	4a2a      	ldr	r2, [pc, #168]	@ (8007e80 <USB_SetTurnaroundTime+0x130>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d906      	bls.n	8007de8 <USB_SetTurnaroundTime+0x98>
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	4a29      	ldr	r2, [pc, #164]	@ (8007e84 <USB_SetTurnaroundTime+0x134>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d802      	bhi.n	8007de8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007de2:	230a      	movs	r3, #10
 8007de4:	617b      	str	r3, [r7, #20]
 8007de6:	e02b      	b.n	8007e40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	4a26      	ldr	r2, [pc, #152]	@ (8007e84 <USB_SetTurnaroundTime+0x134>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d906      	bls.n	8007dfe <USB_SetTurnaroundTime+0xae>
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	4a25      	ldr	r2, [pc, #148]	@ (8007e88 <USB_SetTurnaroundTime+0x138>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d202      	bcs.n	8007dfe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007df8:	2309      	movs	r3, #9
 8007dfa:	617b      	str	r3, [r7, #20]
 8007dfc:	e020      	b.n	8007e40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	4a21      	ldr	r2, [pc, #132]	@ (8007e88 <USB_SetTurnaroundTime+0x138>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d306      	bcc.n	8007e14 <USB_SetTurnaroundTime+0xc4>
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	4a20      	ldr	r2, [pc, #128]	@ (8007e8c <USB_SetTurnaroundTime+0x13c>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d802      	bhi.n	8007e14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007e0e:	2308      	movs	r3, #8
 8007e10:	617b      	str	r3, [r7, #20]
 8007e12:	e015      	b.n	8007e40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4a1d      	ldr	r2, [pc, #116]	@ (8007e8c <USB_SetTurnaroundTime+0x13c>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d906      	bls.n	8007e2a <USB_SetTurnaroundTime+0xda>
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8007e90 <USB_SetTurnaroundTime+0x140>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d202      	bcs.n	8007e2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007e24:	2307      	movs	r3, #7
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	e00a      	b.n	8007e40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007e2a:	2306      	movs	r3, #6
 8007e2c:	617b      	str	r3, [r7, #20]
 8007e2e:	e007      	b.n	8007e40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007e30:	79fb      	ldrb	r3, [r7, #7]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d102      	bne.n	8007e3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007e36:	2309      	movs	r3, #9
 8007e38:	617b      	str	r3, [r7, #20]
 8007e3a:	e001      	b.n	8007e40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007e3c:	2309      	movs	r3, #9
 8007e3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	68da      	ldr	r2, [r3, #12]
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	029b      	lsls	r3, r3, #10
 8007e54:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007e58:	431a      	orrs	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	371c      	adds	r7, #28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	00d8acbf 	.word	0x00d8acbf
 8007e70:	00e4e1c0 	.word	0x00e4e1c0
 8007e74:	00f42400 	.word	0x00f42400
 8007e78:	01067380 	.word	0x01067380
 8007e7c:	011a499f 	.word	0x011a499f
 8007e80:	01312cff 	.word	0x01312cff
 8007e84:	014ca43f 	.word	0x014ca43f
 8007e88:	016e3600 	.word	0x016e3600
 8007e8c:	01a6ab1f 	.word	0x01a6ab1f
 8007e90:	01e84800 	.word	0x01e84800

08007e94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f043 0201 	orr.w	r2, r3, #1
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f023 0201 	bic.w	r2, r3, #1
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ef4:	78fb      	ldrb	r3, [r7, #3]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d115      	bne.n	8007f26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f06:	200a      	movs	r0, #10
 8007f08:	f7fb fc02 	bl	8003710 <HAL_Delay>
      ms += 10U;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	330a      	adds	r3, #10
 8007f10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 f93f 	bl	8009196 <USB_GetMode>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d01e      	beq.n	8007f5c <USB_SetCurrentMode+0x84>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f22:	d9f0      	bls.n	8007f06 <USB_SetCurrentMode+0x2e>
 8007f24:	e01a      	b.n	8007f5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f26:	78fb      	ldrb	r3, [r7, #3]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d115      	bne.n	8007f58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f38:	200a      	movs	r0, #10
 8007f3a:	f7fb fbe9 	bl	8003710 <HAL_Delay>
      ms += 10U;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	330a      	adds	r3, #10
 8007f42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 f926 	bl	8009196 <USB_GetMode>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <USB_SetCurrentMode+0x84>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f54:	d9f0      	bls.n	8007f38 <USB_SetCurrentMode+0x60>
 8007f56:	e001      	b.n	8007f5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e005      	b.n	8007f68 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007f60:	d101      	bne.n	8007f66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e000      	b.n	8007f68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f70:	b084      	sub	sp, #16
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b086      	sub	sp, #24
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	613b      	str	r3, [r7, #16]
 8007f8e:	e009      	b.n	8007fa4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	3340      	adds	r3, #64	@ 0x40
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	613b      	str	r3, [r7, #16]
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	2b0e      	cmp	r3, #14
 8007fa8:	d9f2      	bls.n	8007f90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007faa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d11c      	bne.n	8007fec <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fc0:	f043 0302 	orr.w	r3, r3, #2
 8007fc4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	639a      	str	r2, [r3, #56]	@ 0x38
 8007fea:	e00b      	b.n	8008004 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ffc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800800a:	461a      	mov	r2, r3
 800800c:	2300      	movs	r3, #0
 800800e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008010:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008014:	2b01      	cmp	r3, #1
 8008016:	d10d      	bne.n	8008034 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800801c:	2b00      	cmp	r3, #0
 800801e:	d104      	bne.n	800802a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008020:	2100      	movs	r1, #0
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f968 	bl	80082f8 <USB_SetDevSpeed>
 8008028:	e008      	b.n	800803c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800802a:	2101      	movs	r1, #1
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f963 	bl	80082f8 <USB_SetDevSpeed>
 8008032:	e003      	b.n	800803c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008034:	2103      	movs	r1, #3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f95e 	bl	80082f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800803c:	2110      	movs	r1, #16
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f8fa 	bl	8008238 <USB_FlushTxFifo>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f924 	bl	800829c <USB_FlushRxFifo>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d001      	beq.n	800805e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008064:	461a      	mov	r2, r3
 8008066:	2300      	movs	r3, #0
 8008068:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008070:	461a      	mov	r2, r3
 8008072:	2300      	movs	r3, #0
 8008074:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800807c:	461a      	mov	r2, r3
 800807e:	2300      	movs	r3, #0
 8008080:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008082:	2300      	movs	r3, #0
 8008084:	613b      	str	r3, [r7, #16]
 8008086:	e043      	b.n	8008110 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	015a      	lsls	r2, r3, #5
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4413      	add	r3, r2
 8008090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800809a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800809e:	d118      	bne.n	80080d2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10a      	bne.n	80080bc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080b2:	461a      	mov	r2, r3
 80080b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	e013      	b.n	80080e4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080c8:	461a      	mov	r2, r3
 80080ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	e008      	b.n	80080e4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080de:	461a      	mov	r2, r3
 80080e0:	2300      	movs	r3, #0
 80080e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080f0:	461a      	mov	r2, r3
 80080f2:	2300      	movs	r3, #0
 80080f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	015a      	lsls	r2, r3, #5
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	4413      	add	r3, r2
 80080fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008102:	461a      	mov	r2, r3
 8008104:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008108:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	3301      	adds	r3, #1
 800810e:	613b      	str	r3, [r7, #16]
 8008110:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008114:	461a      	mov	r2, r3
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	4293      	cmp	r3, r2
 800811a:	d3b5      	bcc.n	8008088 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800811c:	2300      	movs	r3, #0
 800811e:	613b      	str	r3, [r7, #16]
 8008120:	e043      	b.n	80081aa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	015a      	lsls	r2, r3, #5
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4413      	add	r3, r2
 800812a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008134:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008138:	d118      	bne.n	800816c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10a      	bne.n	8008156 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800814c:	461a      	mov	r2, r3
 800814e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008152:	6013      	str	r3, [r2, #0]
 8008154:	e013      	b.n	800817e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	4413      	add	r3, r2
 800815e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008162:	461a      	mov	r2, r3
 8008164:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008168:	6013      	str	r3, [r2, #0]
 800816a:	e008      	b.n	800817e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008178:	461a      	mov	r2, r3
 800817a:	2300      	movs	r3, #0
 800817c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	4413      	add	r3, r2
 8008186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800818a:	461a      	mov	r2, r3
 800818c:	2300      	movs	r3, #0
 800818e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4413      	add	r3, r2
 8008198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800819c:	461a      	mov	r2, r3
 800819e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80081a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	3301      	adds	r3, #1
 80081a8:	613b      	str	r3, [r7, #16]
 80081aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80081ae:	461a      	mov	r2, r3
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d3b5      	bcc.n	8008122 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80081d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d105      	bne.n	80081ec <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	f043 0210 	orr.w	r2, r3, #16
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	699a      	ldr	r2, [r3, #24]
 80081f0:	4b10      	ldr	r3, [pc, #64]	@ (8008234 <USB_DevInit+0x2c4>)
 80081f2:	4313      	orrs	r3, r2
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80081f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d005      	beq.n	800820c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	f043 0208 	orr.w	r2, r3, #8
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800820c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008210:	2b01      	cmp	r3, #1
 8008212:	d107      	bne.n	8008224 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800821c:	f043 0304 	orr.w	r3, r3, #4
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008224:	7dfb      	ldrb	r3, [r7, #23]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008230:	b004      	add	sp, #16
 8008232:	4770      	bx	lr
 8008234:	803c3800 	.word	0x803c3800

08008238 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	3301      	adds	r3, #1
 800824a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008252:	d901      	bls.n	8008258 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e01b      	b.n	8008290 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	daf2      	bge.n	8008246 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008260:	2300      	movs	r3, #0
 8008262:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	019b      	lsls	r3, r3, #6
 8008268:	f043 0220 	orr.w	r2, r3, #32
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	3301      	adds	r3, #1
 8008274:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800827c:	d901      	bls.n	8008282 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e006      	b.n	8008290 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f003 0320 	and.w	r3, r3, #32
 800828a:	2b20      	cmp	r3, #32
 800828c:	d0f0      	beq.n	8008270 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082a4:	2300      	movs	r3, #0
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	3301      	adds	r3, #1
 80082ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082b4:	d901      	bls.n	80082ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e018      	b.n	80082ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	daf2      	bge.n	80082a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2210      	movs	r2, #16
 80082ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	3301      	adds	r3, #1
 80082d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082d8:	d901      	bls.n	80082de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	e006      	b.n	80082ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	f003 0310 	and.w	r3, r3, #16
 80082e6:	2b10      	cmp	r3, #16
 80082e8:	d0f0      	beq.n	80082cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	68f9      	ldr	r1, [r7, #12]
 8008314:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008318:	4313      	orrs	r3, r2
 800831a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3714      	adds	r7, #20
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800832a:	b480      	push	{r7}
 800832c:	b087      	sub	sp, #28
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f003 0306 	and.w	r3, r3, #6
 8008342:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d102      	bne.n	8008350 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800834a:	2300      	movs	r3, #0
 800834c:	75fb      	strb	r3, [r7, #23]
 800834e:	e00a      	b.n	8008366 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2b02      	cmp	r3, #2
 8008354:	d002      	beq.n	800835c <USB_GetDevSpeed+0x32>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2b06      	cmp	r3, #6
 800835a:	d102      	bne.n	8008362 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800835c:	2302      	movs	r3, #2
 800835e:	75fb      	strb	r3, [r7, #23]
 8008360:	e001      	b.n	8008366 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008362:	230f      	movs	r3, #15
 8008364:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008366:	7dfb      	ldrb	r3, [r7, #23]
}
 8008368:	4618      	mov	r0, r3
 800836a:	371c      	adds	r7, #28
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	785b      	ldrb	r3, [r3, #1]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d13a      	bne.n	8008406 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008396:	69da      	ldr	r2, [r3, #28]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	f003 030f 	and.w	r3, r3, #15
 80083a0:	2101      	movs	r1, #1
 80083a2:	fa01 f303 	lsl.w	r3, r1, r3
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	68f9      	ldr	r1, [r7, #12]
 80083aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083ae:	4313      	orrs	r3, r2
 80083b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d155      	bne.n	8008474 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	791b      	ldrb	r3, [r3, #4]
 80083e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	059b      	lsls	r3, r3, #22
 80083ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083ec:	4313      	orrs	r3, r2
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	0151      	lsls	r1, r2, #5
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	440a      	add	r2, r1
 80083f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	e036      	b.n	8008474 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800840c:	69da      	ldr	r2, [r3, #28]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	f003 030f 	and.w	r3, r3, #15
 8008416:	2101      	movs	r1, #1
 8008418:	fa01 f303 	lsl.w	r3, r1, r3
 800841c:	041b      	lsls	r3, r3, #16
 800841e:	68f9      	ldr	r1, [r7, #12]
 8008420:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008424:	4313      	orrs	r3, r2
 8008426:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d11a      	bne.n	8008474 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	4413      	add	r3, r2
 8008446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	791b      	ldrb	r3, [r3, #4]
 8008458:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800845a:	430b      	orrs	r3, r1
 800845c:	4313      	orrs	r3, r2
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	0151      	lsls	r1, r2, #5
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	440a      	add	r2, r1
 8008466:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800846a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800846e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008472:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
	...

08008484 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	785b      	ldrb	r3, [r3, #1]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d161      	bne.n	8008564 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084b6:	d11f      	bne.n	80084f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	0151      	lsls	r1, r2, #5
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	440a      	add	r2, r1
 80084ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	0151      	lsls	r1, r2, #5
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	440a      	add	r2, r1
 80084ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	f003 030f 	and.w	r3, r3, #15
 8008508:	2101      	movs	r1, #1
 800850a:	fa01 f303 	lsl.w	r3, r1, r3
 800850e:	b29b      	uxth	r3, r3
 8008510:	43db      	mvns	r3, r3
 8008512:	68f9      	ldr	r1, [r7, #12]
 8008514:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008518:	4013      	ands	r3, r2
 800851a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008522:	69da      	ldr	r2, [r3, #28]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	f003 030f 	and.w	r3, r3, #15
 800852c:	2101      	movs	r1, #1
 800852e:	fa01 f303 	lsl.w	r3, r1, r3
 8008532:	b29b      	uxth	r3, r3
 8008534:	43db      	mvns	r3, r3
 8008536:	68f9      	ldr	r1, [r7, #12]
 8008538:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800853c:	4013      	ands	r3, r2
 800853e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	0159      	lsls	r1, r3, #5
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	440b      	add	r3, r1
 8008556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800855a:	4619      	mov	r1, r3
 800855c:	4b35      	ldr	r3, [pc, #212]	@ (8008634 <USB_DeactivateEndpoint+0x1b0>)
 800855e:	4013      	ands	r3, r2
 8008560:	600b      	str	r3, [r1, #0]
 8008562:	e060      	b.n	8008626 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008576:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800857a:	d11f      	bne.n	80085bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	4413      	add	r3, r2
 8008584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	0151      	lsls	r1, r2, #5
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	440a      	add	r2, r1
 8008592:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008596:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800859a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	0151      	lsls	r1, r2, #5
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	440a      	add	r2, r1
 80085b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	f003 030f 	and.w	r3, r3, #15
 80085cc:	2101      	movs	r1, #1
 80085ce:	fa01 f303 	lsl.w	r3, r1, r3
 80085d2:	041b      	lsls	r3, r3, #16
 80085d4:	43db      	mvns	r3, r3
 80085d6:	68f9      	ldr	r1, [r7, #12]
 80085d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085dc:	4013      	ands	r3, r2
 80085de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085e6:	69da      	ldr	r2, [r3, #28]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	f003 030f 	and.w	r3, r3, #15
 80085f0:	2101      	movs	r1, #1
 80085f2:	fa01 f303 	lsl.w	r3, r1, r3
 80085f6:	041b      	lsls	r3, r3, #16
 80085f8:	43db      	mvns	r3, r3
 80085fa:	68f9      	ldr	r1, [r7, #12]
 80085fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008600:	4013      	ands	r3, r2
 8008602:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	015a      	lsls	r2, r3, #5
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4413      	add	r3, r2
 800860c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	0159      	lsls	r1, r3, #5
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	440b      	add	r3, r1
 800861a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800861e:	4619      	mov	r1, r3
 8008620:	4b05      	ldr	r3, [pc, #20]	@ (8008638 <USB_DeactivateEndpoint+0x1b4>)
 8008622:	4013      	ands	r3, r2
 8008624:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	ec337800 	.word	0xec337800
 8008638:	eff37800 	.word	0xeff37800

0800863c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b08a      	sub	sp, #40	@ 0x28
 8008640:	af02      	add	r7, sp, #8
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	4613      	mov	r3, r2
 8008648:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	785b      	ldrb	r3, [r3, #1]
 8008658:	2b01      	cmp	r3, #1
 800865a:	f040 817f 	bne.w	800895c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d132      	bne.n	80086cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	015a      	lsls	r2, r3, #5
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	4413      	add	r3, r2
 800866e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	69ba      	ldr	r2, [r7, #24]
 8008676:	0151      	lsls	r1, r2, #5
 8008678:	69fa      	ldr	r2, [r7, #28]
 800867a:	440a      	add	r2, r1
 800867c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008680:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008684:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008688:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	015a      	lsls	r2, r3, #5
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	4413      	add	r3, r2
 8008692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	0151      	lsls	r1, r2, #5
 800869c:	69fa      	ldr	r2, [r7, #28]
 800869e:	440a      	add	r2, r1
 80086a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80086a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	015a      	lsls	r2, r3, #5
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	69ba      	ldr	r2, [r7, #24]
 80086ba:	0151      	lsls	r1, r2, #5
 80086bc:	69fa      	ldr	r2, [r7, #28]
 80086be:	440a      	add	r2, r1
 80086c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086c4:	0cdb      	lsrs	r3, r3, #19
 80086c6:	04db      	lsls	r3, r3, #19
 80086c8:	6113      	str	r3, [r2, #16]
 80086ca:	e097      	b.n	80087fc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	015a      	lsls	r2, r3, #5
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	4413      	add	r3, r2
 80086d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	69ba      	ldr	r2, [r7, #24]
 80086dc:	0151      	lsls	r1, r2, #5
 80086de:	69fa      	ldr	r2, [r7, #28]
 80086e0:	440a      	add	r2, r1
 80086e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086e6:	0cdb      	lsrs	r3, r3, #19
 80086e8:	04db      	lsls	r3, r3, #19
 80086ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	0151      	lsls	r1, r2, #5
 80086fe:	69fa      	ldr	r2, [r7, #28]
 8008700:	440a      	add	r2, r1
 8008702:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008706:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800870a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800870e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d11a      	bne.n	800874c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	691a      	ldr	r2, [r3, #16]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	429a      	cmp	r2, r3
 8008720:	d903      	bls.n	800872a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	689a      	ldr	r2, [r3, #8]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	015a      	lsls	r2, r3, #5
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	4413      	add	r3, r2
 8008732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	69ba      	ldr	r2, [r7, #24]
 800873a:	0151      	lsls	r1, r2, #5
 800873c:	69fa      	ldr	r2, [r7, #28]
 800873e:	440a      	add	r2, r1
 8008740:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008744:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008748:	6113      	str	r3, [r2, #16]
 800874a:	e044      	b.n	80087d6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	691a      	ldr	r2, [r3, #16]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	4413      	add	r3, r2
 8008756:	1e5a      	subs	r2, r3, #1
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008760:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800876e:	691a      	ldr	r2, [r3, #16]
 8008770:	8afb      	ldrh	r3, [r7, #22]
 8008772:	04d9      	lsls	r1, r3, #19
 8008774:	4ba4      	ldr	r3, [pc, #656]	@ (8008a08 <USB_EPStartXfer+0x3cc>)
 8008776:	400b      	ands	r3, r1
 8008778:	69b9      	ldr	r1, [r7, #24]
 800877a:	0148      	lsls	r0, r1, #5
 800877c:	69f9      	ldr	r1, [r7, #28]
 800877e:	4401      	add	r1, r0
 8008780:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008784:	4313      	orrs	r3, r2
 8008786:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	791b      	ldrb	r3, [r3, #4]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d122      	bne.n	80087d6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	4413      	add	r3, r2
 8008798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	69ba      	ldr	r2, [r7, #24]
 80087a0:	0151      	lsls	r1, r2, #5
 80087a2:	69fa      	ldr	r2, [r7, #28]
 80087a4:	440a      	add	r2, r1
 80087a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087aa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80087ae:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087bc:	691a      	ldr	r2, [r3, #16]
 80087be:	8afb      	ldrh	r3, [r7, #22]
 80087c0:	075b      	lsls	r3, r3, #29
 80087c2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80087c6:	69b9      	ldr	r1, [r7, #24]
 80087c8:	0148      	lsls	r0, r1, #5
 80087ca:	69f9      	ldr	r1, [r7, #28]
 80087cc:	4401      	add	r1, r0
 80087ce:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80087d2:	4313      	orrs	r3, r2
 80087d4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087e2:	691a      	ldr	r2, [r3, #16]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087ec:	69b9      	ldr	r1, [r7, #24]
 80087ee:	0148      	lsls	r0, r1, #5
 80087f0:	69f9      	ldr	r1, [r7, #28]
 80087f2:	4401      	add	r1, r0
 80087f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80087f8:	4313      	orrs	r3, r2
 80087fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80087fc:	79fb      	ldrb	r3, [r7, #7]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d14b      	bne.n	800889a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d009      	beq.n	800881e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	015a      	lsls	r2, r3, #5
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	4413      	add	r3, r2
 8008812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008816:	461a      	mov	r2, r3
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	69db      	ldr	r3, [r3, #28]
 800881c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	791b      	ldrb	r3, [r3, #4]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d128      	bne.n	8008878 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008832:	2b00      	cmp	r3, #0
 8008834:	d110      	bne.n	8008858 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	4413      	add	r3, r2
 800883e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	69ba      	ldr	r2, [r7, #24]
 8008846:	0151      	lsls	r1, r2, #5
 8008848:	69fa      	ldr	r2, [r7, #28]
 800884a:	440a      	add	r2, r1
 800884c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008850:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008854:	6013      	str	r3, [r2, #0]
 8008856:	e00f      	b.n	8008878 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69ba      	ldr	r2, [r7, #24]
 8008868:	0151      	lsls	r1, r2, #5
 800886a:	69fa      	ldr	r2, [r7, #28]
 800886c:	440a      	add	r2, r1
 800886e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008876:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	4413      	add	r3, r2
 8008880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69ba      	ldr	r2, [r7, #24]
 8008888:	0151      	lsls	r1, r2, #5
 800888a:	69fa      	ldr	r2, [r7, #28]
 800888c:	440a      	add	r2, r1
 800888e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008892:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	e166      	b.n	8008b68 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	015a      	lsls	r2, r3, #5
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	69ba      	ldr	r2, [r7, #24]
 80088aa:	0151      	lsls	r1, r2, #5
 80088ac:	69fa      	ldr	r2, [r7, #28]
 80088ae:	440a      	add	r2, r1
 80088b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088b4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80088b8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	791b      	ldrb	r3, [r3, #4]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d015      	beq.n	80088ee <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 814e 	beq.w	8008b68 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	f003 030f 	and.w	r3, r3, #15
 80088dc:	2101      	movs	r1, #1
 80088de:	fa01 f303 	lsl.w	r3, r1, r3
 80088e2:	69f9      	ldr	r1, [r7, #28]
 80088e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088e8:	4313      	orrs	r3, r2
 80088ea:	634b      	str	r3, [r1, #52]	@ 0x34
 80088ec:	e13c      	b.n	8008b68 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d110      	bne.n	8008920 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	4413      	add	r3, r2
 8008906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	69ba      	ldr	r2, [r7, #24]
 800890e:	0151      	lsls	r1, r2, #5
 8008910:	69fa      	ldr	r2, [r7, #28]
 8008912:	440a      	add	r2, r1
 8008914:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008918:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800891c:	6013      	str	r3, [r2, #0]
 800891e:	e00f      	b.n	8008940 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	4413      	add	r3, r2
 8008928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	0151      	lsls	r1, r2, #5
 8008932:	69fa      	ldr	r2, [r7, #28]
 8008934:	440a      	add	r2, r1
 8008936:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800893a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800893e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	68d9      	ldr	r1, [r3, #12]
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	781a      	ldrb	r2, [r3, #0]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	b298      	uxth	r0, r3
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	4603      	mov	r3, r0
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 f9b9 	bl	8008ccc <USB_WritePacket>
 800895a:	e105      	b.n	8008b68 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	0151      	lsls	r1, r2, #5
 800896e:	69fa      	ldr	r2, [r7, #28]
 8008970:	440a      	add	r2, r1
 8008972:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008976:	0cdb      	lsrs	r3, r3, #19
 8008978:	04db      	lsls	r3, r3, #19
 800897a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	4413      	add	r3, r2
 8008984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	69ba      	ldr	r2, [r7, #24]
 800898c:	0151      	lsls	r1, r2, #5
 800898e:	69fa      	ldr	r2, [r7, #28]
 8008990:	440a      	add	r2, r1
 8008992:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008996:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800899a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800899e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d132      	bne.n	8008a0c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d003      	beq.n	80089b6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	689a      	ldr	r2, [r3, #8]
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	689a      	ldr	r2, [r3, #8]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ca:	691a      	ldr	r2, [r3, #16]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	6a1b      	ldr	r3, [r3, #32]
 80089d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089d4:	69b9      	ldr	r1, [r7, #24]
 80089d6:	0148      	lsls	r0, r1, #5
 80089d8:	69f9      	ldr	r1, [r7, #28]
 80089da:	4401      	add	r1, r0
 80089dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80089e0:	4313      	orrs	r3, r2
 80089e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	015a      	lsls	r2, r3, #5
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	69ba      	ldr	r2, [r7, #24]
 80089f4:	0151      	lsls	r1, r2, #5
 80089f6:	69fa      	ldr	r2, [r7, #28]
 80089f8:	440a      	add	r2, r1
 80089fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a02:	6113      	str	r3, [r2, #16]
 8008a04:	e062      	b.n	8008acc <USB_EPStartXfer+0x490>
 8008a06:	bf00      	nop
 8008a08:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d123      	bne.n	8008a5c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a20:	691a      	ldr	r2, [r3, #16]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a2a:	69b9      	ldr	r1, [r7, #24]
 8008a2c:	0148      	lsls	r0, r1, #5
 8008a2e:	69f9      	ldr	r1, [r7, #28]
 8008a30:	4401      	add	r1, r0
 8008a32:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a36:	4313      	orrs	r3, r2
 8008a38:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	0151      	lsls	r1, r2, #5
 8008a4c:	69fa      	ldr	r2, [r7, #28]
 8008a4e:	440a      	add	r2, r1
 8008a50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a58:	6113      	str	r3, [r2, #16]
 8008a5a:	e037      	b.n	8008acc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	691a      	ldr	r2, [r3, #16]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	4413      	add	r3, r2
 8008a66:	1e5a      	subs	r2, r3, #1
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a70:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	8afa      	ldrh	r2, [r7, #22]
 8008a78:	fb03 f202 	mul.w	r2, r3, r2
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a8c:	691a      	ldr	r2, [r3, #16]
 8008a8e:	8afb      	ldrh	r3, [r7, #22]
 8008a90:	04d9      	lsls	r1, r3, #19
 8008a92:	4b38      	ldr	r3, [pc, #224]	@ (8008b74 <USB_EPStartXfer+0x538>)
 8008a94:	400b      	ands	r3, r1
 8008a96:	69b9      	ldr	r1, [r7, #24]
 8008a98:	0148      	lsls	r0, r1, #5
 8008a9a:	69f9      	ldr	r1, [r7, #28]
 8008a9c:	4401      	add	r1, r0
 8008a9e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ab2:	691a      	ldr	r2, [r3, #16]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	6a1b      	ldr	r3, [r3, #32]
 8008ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008abc:	69b9      	ldr	r1, [r7, #24]
 8008abe:	0148      	lsls	r0, r1, #5
 8008ac0:	69f9      	ldr	r1, [r7, #28]
 8008ac2:	4401      	add	r1, r0
 8008ac4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008acc:	79fb      	ldrb	r3, [r7, #7]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d10d      	bne.n	8008aee <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d009      	beq.n	8008aee <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	68d9      	ldr	r1, [r3, #12]
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aea:	460a      	mov	r2, r1
 8008aec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	791b      	ldrb	r3, [r3, #4]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d128      	bne.n	8008b48 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d110      	bne.n	8008b28 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	69ba      	ldr	r2, [r7, #24]
 8008b16:	0151      	lsls	r1, r2, #5
 8008b18:	69fa      	ldr	r2, [r7, #28]
 8008b1a:	440a      	add	r2, r1
 8008b1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008b24:	6013      	str	r3, [r2, #0]
 8008b26:	e00f      	b.n	8008b48 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69ba      	ldr	r2, [r7, #24]
 8008b38:	0151      	lsls	r1, r2, #5
 8008b3a:	69fa      	ldr	r2, [r7, #28]
 8008b3c:	440a      	add	r2, r1
 8008b3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	0151      	lsls	r1, r2, #5
 8008b5a:	69fa      	ldr	r2, [r7, #28]
 8008b5c:	440a      	add	r2, r1
 8008b5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b62:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008b66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3720      	adds	r7, #32
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	1ff80000 	.word	0x1ff80000

08008b78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	785b      	ldrb	r3, [r3, #1]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d14a      	bne.n	8008c2c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008baa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bae:	f040 8086 	bne.w	8008cbe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	7812      	ldrb	r2, [r2, #0]
 8008bc6:	0151      	lsls	r1, r2, #5
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	440a      	add	r2, r1
 8008bcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bd0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008bd4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	7812      	ldrb	r2, [r2, #0]
 8008bea:	0151      	lsls	r1, r2, #5
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	440a      	add	r2, r1
 8008bf0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bf4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008bf8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d902      	bls.n	8008c10 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c0e:	e056      	b.n	8008cbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c28:	d0e7      	beq.n	8008bfa <USB_EPStopXfer+0x82>
 8008c2a:	e048      	b.n	8008cbe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c44:	d13b      	bne.n	8008cbe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	7812      	ldrb	r2, [r2, #0]
 8008c5a:	0151      	lsls	r1, r2, #5
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	440a      	add	r2, r1
 8008c60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c64:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008c68:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	7812      	ldrb	r2, [r2, #0]
 8008c7e:	0151      	lsls	r1, r2, #5
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	440a      	add	r2, r1
 8008c84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	3301      	adds	r3, #1
 8008c92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d902      	bls.n	8008ca4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ca2:	e00c      	b.n	8008cbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cbc:	d0e7      	beq.n	8008c8e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	371c      	adds	r7, #28
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b089      	sub	sp, #36	@ 0x24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	461a      	mov	r2, r3
 8008cda:	460b      	mov	r3, r1
 8008cdc:	71fb      	strb	r3, [r7, #7]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008cea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d123      	bne.n	8008d3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008cf2:	88bb      	ldrh	r3, [r7, #4]
 8008cf4:	3303      	adds	r3, #3
 8008cf6:	089b      	lsrs	r3, r3, #2
 8008cf8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	61bb      	str	r3, [r7, #24]
 8008cfe:	e018      	b.n	8008d32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008d00:	79fb      	ldrb	r3, [r7, #7]
 8008d02:	031a      	lsls	r2, r3, #12
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	3301      	adds	r3, #1
 8008d18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	3301      	adds	r3, #1
 8008d24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	61bb      	str	r3, [r7, #24]
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d3e2      	bcc.n	8008d00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3724      	adds	r7, #36	@ 0x24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b08b      	sub	sp, #44	@ 0x2c
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	4613      	mov	r3, r2
 8008d54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008d5e:	88fb      	ldrh	r3, [r7, #6]
 8008d60:	089b      	lsrs	r3, r3, #2
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008d66:	88fb      	ldrh	r3, [r7, #6]
 8008d68:	f003 0303 	and.w	r3, r3, #3
 8008d6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008d6e:	2300      	movs	r3, #0
 8008d70:	623b      	str	r3, [r7, #32]
 8008d72:	e014      	b.n	8008d9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d82:	3301      	adds	r3, #1
 8008d84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d88:	3301      	adds	r3, #1
 8008d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8e:	3301      	adds	r3, #1
 8008d90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d94:	3301      	adds	r3, #1
 8008d96:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	623b      	str	r3, [r7, #32]
 8008d9e:	6a3a      	ldr	r2, [r7, #32]
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d3e6      	bcc.n	8008d74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008da6:	8bfb      	ldrh	r3, [r7, #30]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d01e      	beq.n	8008dea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008db6:	461a      	mov	r2, r3
 8008db8:	f107 0310 	add.w	r3, r7, #16
 8008dbc:	6812      	ldr	r2, [r2, #0]
 8008dbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd0:	701a      	strb	r2, [r3, #0]
      i++;
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	623b      	str	r3, [r7, #32]
      pDest++;
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dda:	3301      	adds	r3, #1
 8008ddc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008dde:	8bfb      	ldrh	r3, [r7, #30]
 8008de0:	3b01      	subs	r3, #1
 8008de2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008de4:	8bfb      	ldrh	r3, [r7, #30]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1ea      	bne.n	8008dc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	372c      	adds	r7, #44	@ 0x2c
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	785b      	ldrb	r3, [r3, #1]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d12c      	bne.n	8008e6e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	015a      	lsls	r2, r3, #5
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	db12      	blt.n	8008e4c <USB_EPSetStall+0x54>
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00f      	beq.n	8008e4c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	0151      	lsls	r1, r2, #5
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	440a      	add	r2, r1
 8008e42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e46:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008e4a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	0151      	lsls	r1, r2, #5
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	440a      	add	r2, r1
 8008e62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008e6a:	6013      	str	r3, [r2, #0]
 8008e6c:	e02b      	b.n	8008ec6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	015a      	lsls	r2, r3, #5
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	4413      	add	r3, r2
 8008e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	db12      	blt.n	8008ea6 <USB_EPSetStall+0xae>
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00f      	beq.n	8008ea6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	0151      	lsls	r1, r2, #5
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	440a      	add	r2, r1
 8008e9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ea0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008ea4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	015a      	lsls	r2, r3, #5
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	4413      	add	r3, r2
 8008eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	0151      	lsls	r1, r2, #5
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	440a      	add	r2, r1
 8008ebc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ec0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008ec4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	785b      	ldrb	r3, [r3, #1]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d128      	bne.n	8008f42 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	0151      	lsls	r1, r2, #5
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	440a      	add	r2, r1
 8008f06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008f0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	791b      	ldrb	r3, [r3, #4]
 8008f14:	2b03      	cmp	r3, #3
 8008f16:	d003      	beq.n	8008f20 <USB_EPClearStall+0x4c>
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	791b      	ldrb	r3, [r3, #4]
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d138      	bne.n	8008f92 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	0151      	lsls	r1, r2, #5
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	440a      	add	r2, r1
 8008f36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	e027      	b.n	8008f92 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	015a      	lsls	r2, r3, #5
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	4413      	add	r3, r2
 8008f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	0151      	lsls	r1, r2, #5
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	440a      	add	r2, r1
 8008f58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f5c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008f60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	791b      	ldrb	r3, [r3, #4]
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d003      	beq.n	8008f72 <USB_EPClearStall+0x9e>
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	791b      	ldrb	r3, [r3, #4]
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d10f      	bne.n	8008f92 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	0151      	lsls	r1, r2, #5
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	440a      	add	r2, r1
 8008f88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f90:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008fbe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008fc2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	78fb      	ldrb	r3, [r7, #3]
 8008fce:	011b      	lsls	r3, r3, #4
 8008fd0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008fd4:	68f9      	ldr	r1, [r7, #12]
 8008fd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3714      	adds	r7, #20
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009006:	f023 0303 	bic.w	r3, r3, #3
 800900a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800901a:	f023 0302 	bic.w	r3, r3, #2
 800901e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800902e:	b480      	push	{r7}
 8009030:	b085      	sub	sp, #20
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009048:	f023 0303 	bic.w	r3, r3, #3
 800904c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800905c:	f043 0302 	orr.w	r3, r3, #2
 8009060:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	4013      	ands	r3, r2
 8009086:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009088:	68fb      	ldr	r3, [r7, #12]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009096:	b480      	push	{r7}
 8009098:	b085      	sub	sp, #20
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	4013      	ands	r3, r2
 80090b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	0c1b      	lsrs	r3, r3, #16
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3714      	adds	r7, #20
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr

080090ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80090ca:	b480      	push	{r7}
 80090cc:	b085      	sub	sp, #20
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090e6:	69db      	ldr	r3, [r3, #28]
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	4013      	ands	r3, r2
 80090ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	b29b      	uxth	r3, r3
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80090fe:	b480      	push	{r7}
 8009100:	b085      	sub	sp, #20
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	460b      	mov	r3, r1
 8009108:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	015a      	lsls	r2, r3, #5
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	4413      	add	r3, r2
 8009116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	4013      	ands	r3, r2
 800912a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800912c:	68bb      	ldr	r3, [r7, #8]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3714      	adds	r7, #20
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800913a:	b480      	push	{r7}
 800913c:	b087      	sub	sp, #28
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	460b      	mov	r3, r1
 8009144:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800915a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800915c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800915e:	78fb      	ldrb	r3, [r7, #3]
 8009160:	f003 030f 	and.w	r3, r3, #15
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	fa22 f303 	lsr.w	r3, r2, r3
 800916a:	01db      	lsls	r3, r3, #7
 800916c:	b2db      	uxtb	r3, r3
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	4313      	orrs	r3, r2
 8009172:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009174:	78fb      	ldrb	r3, [r7, #3]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	4413      	add	r3, r2
 800917c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	4013      	ands	r3, r2
 8009186:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009188:	68bb      	ldr	r3, [r7, #8]
}
 800918a:	4618      	mov	r0, r3
 800918c:	371c      	adds	r7, #28
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009196:	b480      	push	{r7}
 8009198:	b083      	sub	sp, #12
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	f003 0301 	and.w	r3, r3, #1
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091cc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80091d0:	f023 0307 	bic.w	r3, r3, #7
 80091d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3714      	adds	r7, #20
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b087      	sub	sp, #28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	460b      	mov	r3, r1
 8009202:	607a      	str	r2, [r7, #4]
 8009204:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	333c      	adds	r3, #60	@ 0x3c
 800920e:	3304      	adds	r3, #4
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	4a26      	ldr	r2, [pc, #152]	@ (80092b0 <USB_EP0_OutStart+0xb8>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d90a      	bls.n	8009232 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009228:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800922c:	d101      	bne.n	8009232 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	e037      	b.n	80092a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009238:	461a      	mov	r2, r3
 800923a:	2300      	movs	r3, #0
 800923c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800924c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009250:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009260:	f043 0318 	orr.w	r3, r3, #24
 8009264:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009274:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009278:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800927a:	7afb      	ldrb	r3, [r7, #11]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d10f      	bne.n	80092a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009286:	461a      	mov	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800929a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800929e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	371c      	adds	r7, #28
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	4f54300a 	.word	0x4f54300a

080092b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092bc:	2300      	movs	r3, #0
 80092be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	3301      	adds	r3, #1
 80092c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092cc:	d901      	bls.n	80092d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e01b      	b.n	800930a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	daf2      	bge.n	80092c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	f043 0201 	orr.w	r2, r3, #1
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	3301      	adds	r3, #1
 80092ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092f6:	d901      	bls.n	80092fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e006      	b.n	800930a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	2b01      	cmp	r3, #1
 8009306:	d0f0      	beq.n	80092ea <USB_CoreReset+0x36>

  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
	...

08009318 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	460b      	mov	r3, r1
 8009322:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009324:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009328:	f002 fce4 	bl	800bcf4 <USBD_static_malloc>
 800932c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d109      	bne.n	8009348 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	32b0      	adds	r2, #176	@ 0xb0
 800933e:	2100      	movs	r1, #0
 8009340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009344:	2302      	movs	r3, #2
 8009346:	e0d4      	b.n	80094f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009348:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800934c:	2100      	movs	r1, #0
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f003 fbb0 	bl	800cab4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	32b0      	adds	r2, #176	@ 0xb0
 800935e:	68f9      	ldr	r1, [r7, #12]
 8009360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	32b0      	adds	r2, #176	@ 0xb0
 800936e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	7c1b      	ldrb	r3, [r3, #16]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d138      	bne.n	80093f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009380:	4b5e      	ldr	r3, [pc, #376]	@ (80094fc <USBD_CDC_Init+0x1e4>)
 8009382:	7819      	ldrb	r1, [r3, #0]
 8009384:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009388:	2202      	movs	r2, #2
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f002 fb8f 	bl	800baae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009390:	4b5a      	ldr	r3, [pc, #360]	@ (80094fc <USBD_CDC_Init+0x1e4>)
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	f003 020f 	and.w	r2, r3, #15
 8009398:	6879      	ldr	r1, [r7, #4]
 800939a:	4613      	mov	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	440b      	add	r3, r1
 80093a4:	3324      	adds	r3, #36	@ 0x24
 80093a6:	2201      	movs	r2, #1
 80093a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80093aa:	4b55      	ldr	r3, [pc, #340]	@ (8009500 <USBD_CDC_Init+0x1e8>)
 80093ac:	7819      	ldrb	r1, [r3, #0]
 80093ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093b2:	2202      	movs	r2, #2
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f002 fb7a 	bl	800baae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80093ba:	4b51      	ldr	r3, [pc, #324]	@ (8009500 <USBD_CDC_Init+0x1e8>)
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	f003 020f 	and.w	r2, r3, #15
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	4613      	mov	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	440b      	add	r3, r1
 80093ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80093d2:	2201      	movs	r2, #1
 80093d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80093d6:	4b4b      	ldr	r3, [pc, #300]	@ (8009504 <USBD_CDC_Init+0x1ec>)
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	f003 020f 	and.w	r2, r3, #15
 80093de:	6879      	ldr	r1, [r7, #4]
 80093e0:	4613      	mov	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4413      	add	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	440b      	add	r3, r1
 80093ea:	3326      	adds	r3, #38	@ 0x26
 80093ec:	2210      	movs	r2, #16
 80093ee:	801a      	strh	r2, [r3, #0]
 80093f0:	e035      	b.n	800945e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80093f2:	4b42      	ldr	r3, [pc, #264]	@ (80094fc <USBD_CDC_Init+0x1e4>)
 80093f4:	7819      	ldrb	r1, [r3, #0]
 80093f6:	2340      	movs	r3, #64	@ 0x40
 80093f8:	2202      	movs	r2, #2
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f002 fb57 	bl	800baae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009400:	4b3e      	ldr	r3, [pc, #248]	@ (80094fc <USBD_CDC_Init+0x1e4>)
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	f003 020f 	and.w	r2, r3, #15
 8009408:	6879      	ldr	r1, [r7, #4]
 800940a:	4613      	mov	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	440b      	add	r3, r1
 8009414:	3324      	adds	r3, #36	@ 0x24
 8009416:	2201      	movs	r2, #1
 8009418:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800941a:	4b39      	ldr	r3, [pc, #228]	@ (8009500 <USBD_CDC_Init+0x1e8>)
 800941c:	7819      	ldrb	r1, [r3, #0]
 800941e:	2340      	movs	r3, #64	@ 0x40
 8009420:	2202      	movs	r2, #2
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f002 fb43 	bl	800baae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009428:	4b35      	ldr	r3, [pc, #212]	@ (8009500 <USBD_CDC_Init+0x1e8>)
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	f003 020f 	and.w	r2, r3, #15
 8009430:	6879      	ldr	r1, [r7, #4]
 8009432:	4613      	mov	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	440b      	add	r3, r1
 800943c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009440:	2201      	movs	r2, #1
 8009442:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009444:	4b2f      	ldr	r3, [pc, #188]	@ (8009504 <USBD_CDC_Init+0x1ec>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	f003 020f 	and.w	r2, r3, #15
 800944c:	6879      	ldr	r1, [r7, #4]
 800944e:	4613      	mov	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4413      	add	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	440b      	add	r3, r1
 8009458:	3326      	adds	r3, #38	@ 0x26
 800945a:	2210      	movs	r2, #16
 800945c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800945e:	4b29      	ldr	r3, [pc, #164]	@ (8009504 <USBD_CDC_Init+0x1ec>)
 8009460:	7819      	ldrb	r1, [r3, #0]
 8009462:	2308      	movs	r3, #8
 8009464:	2203      	movs	r2, #3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f002 fb21 	bl	800baae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800946c:	4b25      	ldr	r3, [pc, #148]	@ (8009504 <USBD_CDC_Init+0x1ec>)
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	f003 020f 	and.w	r2, r3, #15
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	440b      	add	r3, r1
 8009480:	3324      	adds	r3, #36	@ 0x24
 8009482:	2201      	movs	r2, #1
 8009484:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	33b0      	adds	r3, #176	@ 0xb0
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d101      	bne.n	80094c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80094bc:	2302      	movs	r3, #2
 80094be:	e018      	b.n	80094f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	7c1b      	ldrb	r3, [r3, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10a      	bne.n	80094de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094c8:	4b0d      	ldr	r3, [pc, #52]	@ (8009500 <USBD_CDC_Init+0x1e8>)
 80094ca:	7819      	ldrb	r1, [r3, #0]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80094d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f002 fbd8 	bl	800bc8c <USBD_LL_PrepareReceive>
 80094dc:	e008      	b.n	80094f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094de:	4b08      	ldr	r3, [pc, #32]	@ (8009500 <USBD_CDC_Init+0x1e8>)
 80094e0:	7819      	ldrb	r1, [r3, #0]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80094e8:	2340      	movs	r3, #64	@ 0x40
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f002 fbce 	bl	800bc8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	20000093 	.word	0x20000093
 8009500:	20000094 	.word	0x20000094
 8009504:	20000095 	.word	0x20000095

08009508 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009514:	4b3a      	ldr	r3, [pc, #232]	@ (8009600 <USBD_CDC_DeInit+0xf8>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f002 faed 	bl	800bafa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009520:	4b37      	ldr	r3, [pc, #220]	@ (8009600 <USBD_CDC_DeInit+0xf8>)
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	f003 020f 	and.w	r2, r3, #15
 8009528:	6879      	ldr	r1, [r7, #4]
 800952a:	4613      	mov	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	440b      	add	r3, r1
 8009534:	3324      	adds	r3, #36	@ 0x24
 8009536:	2200      	movs	r2, #0
 8009538:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800953a:	4b32      	ldr	r3, [pc, #200]	@ (8009604 <USBD_CDC_DeInit+0xfc>)
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f002 fada 	bl	800bafa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009546:	4b2f      	ldr	r3, [pc, #188]	@ (8009604 <USBD_CDC_DeInit+0xfc>)
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	f003 020f 	and.w	r2, r3, #15
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	4613      	mov	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	440b      	add	r3, r1
 800955a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800955e:	2200      	movs	r2, #0
 8009560:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009562:	4b29      	ldr	r3, [pc, #164]	@ (8009608 <USBD_CDC_DeInit+0x100>)
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	4619      	mov	r1, r3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f002 fac6 	bl	800bafa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800956e:	4b26      	ldr	r3, [pc, #152]	@ (8009608 <USBD_CDC_DeInit+0x100>)
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	f003 020f 	and.w	r2, r3, #15
 8009576:	6879      	ldr	r1, [r7, #4]
 8009578:	4613      	mov	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	440b      	add	r3, r1
 8009582:	3324      	adds	r3, #36	@ 0x24
 8009584:	2200      	movs	r2, #0
 8009586:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009588:	4b1f      	ldr	r3, [pc, #124]	@ (8009608 <USBD_CDC_DeInit+0x100>)
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	f003 020f 	and.w	r2, r3, #15
 8009590:	6879      	ldr	r1, [r7, #4]
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	440b      	add	r3, r1
 800959c:	3326      	adds	r3, #38	@ 0x26
 800959e:	2200      	movs	r2, #0
 80095a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	32b0      	adds	r2, #176	@ 0xb0
 80095ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d01f      	beq.n	80095f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	33b0      	adds	r3, #176	@ 0xb0
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	32b0      	adds	r2, #176	@ 0xb0
 80095d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f002 fb9a 	bl	800bd10 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	32b0      	adds	r2, #176	@ 0xb0
 80095e6:	2100      	movs	r1, #0
 80095e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	20000093 	.word	0x20000093
 8009604:	20000094 	.word	0x20000094
 8009608:	20000095 	.word	0x20000095

0800960c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	32b0      	adds	r2, #176	@ 0xb0
 8009620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009624:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009626:	2300      	movs	r3, #0
 8009628:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800962a:	2300      	movs	r3, #0
 800962c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d101      	bne.n	800963c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009638:	2303      	movs	r3, #3
 800963a:	e0bf      	b.n	80097bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009644:	2b00      	cmp	r3, #0
 8009646:	d050      	beq.n	80096ea <USBD_CDC_Setup+0xde>
 8009648:	2b20      	cmp	r3, #32
 800964a:	f040 80af 	bne.w	80097ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	88db      	ldrh	r3, [r3, #6]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d03a      	beq.n	80096cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	b25b      	sxtb	r3, r3
 800965c:	2b00      	cmp	r3, #0
 800965e:	da1b      	bge.n	8009698 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	33b0      	adds	r3, #176	@ 0xb0
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009676:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	88d2      	ldrh	r2, [r2, #6]
 800967c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	88db      	ldrh	r3, [r3, #6]
 8009682:	2b07      	cmp	r3, #7
 8009684:	bf28      	it	cs
 8009686:	2307      	movcs	r3, #7
 8009688:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	89fa      	ldrh	r2, [r7, #14]
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f001 fd93 	bl	800b1bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009696:	e090      	b.n	80097ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	785a      	ldrb	r2, [r3, #1]
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	88db      	ldrh	r3, [r3, #6]
 80096a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80096a8:	d803      	bhi.n	80096b2 <USBD_CDC_Setup+0xa6>
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	88db      	ldrh	r3, [r3, #6]
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	e000      	b.n	80096b4 <USBD_CDC_Setup+0xa8>
 80096b2:	2240      	movs	r2, #64	@ 0x40
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80096ba:	6939      	ldr	r1, [r7, #16]
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80096c2:	461a      	mov	r2, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 fda5 	bl	800b214 <USBD_CtlPrepareRx>
      break;
 80096ca:	e076      	b.n	80097ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	33b0      	adds	r3, #176	@ 0xb0
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4413      	add	r3, r2
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	7850      	ldrb	r0, [r2, #1]
 80096e2:	2200      	movs	r2, #0
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	4798      	blx	r3
      break;
 80096e8:	e067      	b.n	80097ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	785b      	ldrb	r3, [r3, #1]
 80096ee:	2b0b      	cmp	r3, #11
 80096f0:	d851      	bhi.n	8009796 <USBD_CDC_Setup+0x18a>
 80096f2:	a201      	add	r2, pc, #4	@ (adr r2, 80096f8 <USBD_CDC_Setup+0xec>)
 80096f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f8:	08009729 	.word	0x08009729
 80096fc:	080097a5 	.word	0x080097a5
 8009700:	08009797 	.word	0x08009797
 8009704:	08009797 	.word	0x08009797
 8009708:	08009797 	.word	0x08009797
 800970c:	08009797 	.word	0x08009797
 8009710:	08009797 	.word	0x08009797
 8009714:	08009797 	.word	0x08009797
 8009718:	08009797 	.word	0x08009797
 800971c:	08009797 	.word	0x08009797
 8009720:	08009753 	.word	0x08009753
 8009724:	0800977d 	.word	0x0800977d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b03      	cmp	r3, #3
 8009732:	d107      	bne.n	8009744 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009734:	f107 030a 	add.w	r3, r7, #10
 8009738:	2202      	movs	r2, #2
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f001 fd3d 	bl	800b1bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009742:	e032      	b.n	80097aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f001 fcbb 	bl	800b0c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800974c:	2303      	movs	r3, #3
 800974e:	75fb      	strb	r3, [r7, #23]
          break;
 8009750:	e02b      	b.n	80097aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b03      	cmp	r3, #3
 800975c:	d107      	bne.n	800976e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800975e:	f107 030d 	add.w	r3, r7, #13
 8009762:	2201      	movs	r2, #1
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f001 fd28 	bl	800b1bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800976c:	e01d      	b.n	80097aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f001 fca6 	bl	800b0c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009776:	2303      	movs	r3, #3
 8009778:	75fb      	strb	r3, [r7, #23]
          break;
 800977a:	e016      	b.n	80097aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b03      	cmp	r3, #3
 8009786:	d00f      	beq.n	80097a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009788:	6839      	ldr	r1, [r7, #0]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f001 fc99 	bl	800b0c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009790:	2303      	movs	r3, #3
 8009792:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009794:	e008      	b.n	80097a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f001 fc92 	bl	800b0c2 <USBD_CtlError>
          ret = USBD_FAIL;
 800979e:	2303      	movs	r3, #3
 80097a0:	75fb      	strb	r3, [r7, #23]
          break;
 80097a2:	e002      	b.n	80097aa <USBD_CDC_Setup+0x19e>
          break;
 80097a4:	bf00      	nop
 80097a6:	e008      	b.n	80097ba <USBD_CDC_Setup+0x1ae>
          break;
 80097a8:	bf00      	nop
      }
      break;
 80097aa:	e006      	b.n	80097ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f001 fc87 	bl	800b0c2 <USBD_CtlError>
      ret = USBD_FAIL;
 80097b4:	2303      	movs	r3, #3
 80097b6:	75fb      	strb	r3, [r7, #23]
      break;
 80097b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80097ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	32b0      	adds	r2, #176	@ 0xb0
 80097e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d101      	bne.n	80097ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80097ea:	2303      	movs	r3, #3
 80097ec:	e065      	b.n	80098ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	32b0      	adds	r2, #176	@ 0xb0
 80097f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80097fe:	78fb      	ldrb	r3, [r7, #3]
 8009800:	f003 020f 	and.w	r2, r3, #15
 8009804:	6879      	ldr	r1, [r7, #4]
 8009806:	4613      	mov	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	440b      	add	r3, r1
 8009810:	3318      	adds	r3, #24
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d02f      	beq.n	8009878 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009818:	78fb      	ldrb	r3, [r7, #3]
 800981a:	f003 020f 	and.w	r2, r3, #15
 800981e:	6879      	ldr	r1, [r7, #4]
 8009820:	4613      	mov	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4413      	add	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	440b      	add	r3, r1
 800982a:	3318      	adds	r3, #24
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	78fb      	ldrb	r3, [r7, #3]
 8009830:	f003 010f 	and.w	r1, r3, #15
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	460b      	mov	r3, r1
 8009838:	00db      	lsls	r3, r3, #3
 800983a:	440b      	add	r3, r1
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4403      	add	r3, r0
 8009840:	331c      	adds	r3, #28
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	fbb2 f1f3 	udiv	r1, r2, r3
 8009848:	fb01 f303 	mul.w	r3, r1, r3
 800984c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800984e:	2b00      	cmp	r3, #0
 8009850:	d112      	bne.n	8009878 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009852:	78fb      	ldrb	r3, [r7, #3]
 8009854:	f003 020f 	and.w	r2, r3, #15
 8009858:	6879      	ldr	r1, [r7, #4]
 800985a:	4613      	mov	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	440b      	add	r3, r1
 8009864:	3318      	adds	r3, #24
 8009866:	2200      	movs	r2, #0
 8009868:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800986a:	78f9      	ldrb	r1, [r7, #3]
 800986c:	2300      	movs	r3, #0
 800986e:	2200      	movs	r2, #0
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f002 f9ea 	bl	800bc4a <USBD_LL_Transmit>
 8009876:	e01f      	b.n	80098b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2200      	movs	r2, #0
 800987c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	33b0      	adds	r3, #176	@ 0xb0
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4413      	add	r3, r2
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d010      	beq.n	80098b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	33b0      	adds	r3, #176	@ 0xb0
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80098b4:	78fa      	ldrb	r2, [r7, #3]
 80098b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b084      	sub	sp, #16
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	460b      	mov	r3, r1
 80098cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	32b0      	adds	r2, #176	@ 0xb0
 80098d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	32b0      	adds	r2, #176	@ 0xb0
 80098e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d101      	bne.n	80098f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e01a      	b.n	800992a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80098f4:	78fb      	ldrb	r3, [r7, #3]
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f002 f9e8 	bl	800bcce <USBD_LL_GetRxDataSize>
 80098fe:	4602      	mov	r2, r0
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	33b0      	adds	r3, #176	@ 0xb0
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009924:	4611      	mov	r1, r2
 8009926:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b084      	sub	sp, #16
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	32b0      	adds	r2, #176	@ 0xb0
 8009944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009948:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d101      	bne.n	8009954 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009950:	2303      	movs	r3, #3
 8009952:	e024      	b.n	800999e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	33b0      	adds	r3, #176	@ 0xb0
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d019      	beq.n	800999c <USBD_CDC_EP0_RxReady+0x6a>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800996e:	2bff      	cmp	r3, #255	@ 0xff
 8009970:	d014      	beq.n	800999c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	33b0      	adds	r3, #176	@ 0xb0
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800998a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009992:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	22ff      	movs	r2, #255	@ 0xff
 8009998:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
	...

080099a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80099b0:	2182      	movs	r1, #130	@ 0x82
 80099b2:	4818      	ldr	r0, [pc, #96]	@ (8009a14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099b4:	f000 fd4f 	bl	800a456 <USBD_GetEpDesc>
 80099b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80099ba:	2101      	movs	r1, #1
 80099bc:	4815      	ldr	r0, [pc, #84]	@ (8009a14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099be:	f000 fd4a 	bl	800a456 <USBD_GetEpDesc>
 80099c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099c4:	2181      	movs	r1, #129	@ 0x81
 80099c6:	4813      	ldr	r0, [pc, #76]	@ (8009a14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099c8:	f000 fd45 	bl	800a456 <USBD_GetEpDesc>
 80099cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	2210      	movs	r2, #16
 80099d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d006      	beq.n	80099ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099e8:	711a      	strb	r2, [r3, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d006      	beq.n	8009a02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099fc:	711a      	strb	r2, [r3, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2243      	movs	r2, #67	@ 0x43
 8009a06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a08:	4b02      	ldr	r3, [pc, #8]	@ (8009a14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3718      	adds	r7, #24
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20000050 	.word	0x20000050

08009a18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a20:	2182      	movs	r1, #130	@ 0x82
 8009a22:	4818      	ldr	r0, [pc, #96]	@ (8009a84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a24:	f000 fd17 	bl	800a456 <USBD_GetEpDesc>
 8009a28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a2a:	2101      	movs	r1, #1
 8009a2c:	4815      	ldr	r0, [pc, #84]	@ (8009a84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a2e:	f000 fd12 	bl	800a456 <USBD_GetEpDesc>
 8009a32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a34:	2181      	movs	r1, #129	@ 0x81
 8009a36:	4813      	ldr	r0, [pc, #76]	@ (8009a84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a38:	f000 fd0d 	bl	800a456 <USBD_GetEpDesc>
 8009a3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	2210      	movs	r2, #16
 8009a48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d006      	beq.n	8009a5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	2200      	movs	r2, #0
 8009a54:	711a      	strb	r2, [r3, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f042 0202 	orr.w	r2, r2, #2
 8009a5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d006      	beq.n	8009a72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2200      	movs	r2, #0
 8009a68:	711a      	strb	r2, [r3, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f042 0202 	orr.w	r2, r2, #2
 8009a70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2243      	movs	r2, #67	@ 0x43
 8009a76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a78:	4b02      	ldr	r3, [pc, #8]	@ (8009a84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	20000050 	.word	0x20000050

08009a88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a90:	2182      	movs	r1, #130	@ 0x82
 8009a92:	4818      	ldr	r0, [pc, #96]	@ (8009af4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a94:	f000 fcdf 	bl	800a456 <USBD_GetEpDesc>
 8009a98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	4815      	ldr	r0, [pc, #84]	@ (8009af4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a9e:	f000 fcda 	bl	800a456 <USBD_GetEpDesc>
 8009aa2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009aa4:	2181      	movs	r1, #129	@ 0x81
 8009aa6:	4813      	ldr	r0, [pc, #76]	@ (8009af4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009aa8:	f000 fcd5 	bl	800a456 <USBD_GetEpDesc>
 8009aac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	2210      	movs	r2, #16
 8009ab8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d006      	beq.n	8009ace <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ac8:	711a      	strb	r2, [r3, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d006      	beq.n	8009ae2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009adc:	711a      	strb	r2, [r3, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2243      	movs	r2, #67	@ 0x43
 8009ae6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ae8:	4b02      	ldr	r3, [pc, #8]	@ (8009af4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20000050 	.word	0x20000050

08009af8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	220a      	movs	r2, #10
 8009b04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009b06:	4b03      	ldr	r3, [pc, #12]	@ (8009b14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr
 8009b14:	2000000c 	.word	0x2000000c

08009b18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d101      	bne.n	8009b2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	e009      	b.n	8009b40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	33b0      	adds	r3, #176	@ 0xb0
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4413      	add	r3, r2
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b087      	sub	sp, #28
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	32b0      	adds	r2, #176	@ 0xb0
 8009b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d101      	bne.n	8009b72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e008      	b.n	8009b84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	68ba      	ldr	r2, [r7, #8]
 8009b76:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	371c      	adds	r7, #28
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	32b0      	adds	r2, #176	@ 0xb0
 8009ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ba8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e004      	b.n	8009bbe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3714      	adds	r7, #20
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
	...

08009bcc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	32b0      	adds	r2, #176	@ 0xb0
 8009bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009be4:	2301      	movs	r3, #1
 8009be6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d101      	bne.n	8009bf2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	e025      	b.n	8009c3e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d11f      	bne.n	8009c3c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009c04:	4b10      	ldr	r3, [pc, #64]	@ (8009c48 <USBD_CDC_TransmitPacket+0x7c>)
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	f003 020f 	and.w	r2, r3, #15
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	4613      	mov	r3, r2
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	4413      	add	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4403      	add	r3, r0
 8009c1e:	3318      	adds	r3, #24
 8009c20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009c22:	4b09      	ldr	r3, [pc, #36]	@ (8009c48 <USBD_CDC_TransmitPacket+0x7c>)
 8009c24:	7819      	ldrb	r1, [r3, #0]
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f002 f809 	bl	800bc4a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	20000093 	.word	0x20000093

08009c4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	32b0      	adds	r2, #176	@ 0xb0
 8009c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	32b0      	adds	r2, #176	@ 0xb0
 8009c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d101      	bne.n	8009c7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009c76:	2303      	movs	r3, #3
 8009c78:	e018      	b.n	8009cac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	7c1b      	ldrb	r3, [r3, #16]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10a      	bne.n	8009c98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c82:	4b0c      	ldr	r3, [pc, #48]	@ (8009cb4 <USBD_CDC_ReceivePacket+0x68>)
 8009c84:	7819      	ldrb	r1, [r3, #0]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f001 fffb 	bl	800bc8c <USBD_LL_PrepareReceive>
 8009c96:	e008      	b.n	8009caa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c98:	4b06      	ldr	r3, [pc, #24]	@ (8009cb4 <USBD_CDC_ReceivePacket+0x68>)
 8009c9a:	7819      	ldrb	r1, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009ca2:	2340      	movs	r3, #64	@ 0x40
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f001 fff1 	bl	800bc8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	20000094 	.word	0x20000094

08009cb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b086      	sub	sp, #24
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d101      	bne.n	8009cd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e01f      	b.n	8009d10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	79fa      	ldrb	r2, [r7, #7]
 8009d02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f001 fe6b 	bl	800b9e0 <USBD_LL_Init>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3718      	adds	r7, #24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d22:	2300      	movs	r3, #0
 8009d24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d101      	bne.n	8009d30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e025      	b.n	8009d7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	32ae      	adds	r2, #174	@ 0xae
 8009d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00f      	beq.n	8009d6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	32ae      	adds	r2, #174	@ 0xae
 8009d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5c:	f107 020e 	add.w	r2, r7, #14
 8009d60:	4610      	mov	r0, r2
 8009d62:	4798      	blx	r3
 8009d64:	4602      	mov	r2, r0
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009d72:	1c5a      	adds	r2, r3, #1
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f001 fe73 	bl	800ba78 <USBD_LL_Start>
 8009d92:	4603      	mov	r3, r0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009da4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b084      	sub	sp, #16
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	460b      	mov	r3, r1
 8009dbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d009      	beq.n	8009de0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	78fa      	ldrb	r2, [r7, #3]
 8009dd6:	4611      	mov	r1, r2
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	4798      	blx	r3
 8009ddc:	4603      	mov	r3, r0
 8009dde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b084      	sub	sp, #16
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
 8009df2:	460b      	mov	r3, r1
 8009df4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	78fa      	ldrb	r2, [r7, #3]
 8009e04:	4611      	mov	r1, r2
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	4798      	blx	r3
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d001      	beq.n	8009e14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009e10:	2303      	movs	r3, #3
 8009e12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b084      	sub	sp, #16
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e2e:	6839      	ldr	r1, [r7, #0]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f001 f90c 	bl	800b04e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009e44:	461a      	mov	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009e52:	f003 031f 	and.w	r3, r3, #31
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d01a      	beq.n	8009e90 <USBD_LL_SetupStage+0x72>
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d822      	bhi.n	8009ea4 <USBD_LL_SetupStage+0x86>
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d002      	beq.n	8009e68 <USBD_LL_SetupStage+0x4a>
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d00a      	beq.n	8009e7c <USBD_LL_SetupStage+0x5e>
 8009e66:	e01d      	b.n	8009ea4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fb63 	bl	800a53c <USBD_StdDevReq>
 8009e76:	4603      	mov	r3, r0
 8009e78:	73fb      	strb	r3, [r7, #15]
      break;
 8009e7a:	e020      	b.n	8009ebe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e82:	4619      	mov	r1, r3
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fbcb 	bl	800a620 <USBD_StdItfReq>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e8e:	e016      	b.n	8009ebe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e96:	4619      	mov	r1, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fc2d 	bl	800a6f8 <USBD_StdEPReq>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea2:	e00c      	b.n	8009ebe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009eaa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f001 fe40 	bl	800bb38 <USBD_LL_StallEP>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	73fb      	strb	r3, [r7, #15]
      break;
 8009ebc:	bf00      	nop
  }

  return ret;
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b086      	sub	sp, #24
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	607a      	str	r2, [r7, #4]
 8009ed4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009eda:	7afb      	ldrb	r3, [r7, #11]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d16e      	bne.n	8009fbe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009ee6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	f040 8098 	bne.w	800a024 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	689a      	ldr	r2, [r3, #8]
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d913      	bls.n	8009f28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	689a      	ldr	r2, [r3, #8]
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	1ad2      	subs	r2, r2, r3
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	68da      	ldr	r2, [r3, #12]
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	4293      	cmp	r3, r2
 8009f18:	bf28      	it	cs
 8009f1a:	4613      	movcs	r3, r2
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f001 f994 	bl	800b24e <USBD_CtlContinueRx>
 8009f26:	e07d      	b.n	800a024 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f2e:	f003 031f 	and.w	r3, r3, #31
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d014      	beq.n	8009f60 <USBD_LL_DataOutStage+0x98>
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d81d      	bhi.n	8009f76 <USBD_LL_DataOutStage+0xae>
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d002      	beq.n	8009f44 <USBD_LL_DataOutStage+0x7c>
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d003      	beq.n	8009f4a <USBD_LL_DataOutStage+0x82>
 8009f42:	e018      	b.n	8009f76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009f44:	2300      	movs	r3, #0
 8009f46:	75bb      	strb	r3, [r7, #22]
            break;
 8009f48:	e018      	b.n	8009f7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	4619      	mov	r1, r3
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f000 fa64 	bl	800a422 <USBD_CoreFindIF>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	75bb      	strb	r3, [r7, #22]
            break;
 8009f5e:	e00d      	b.n	8009f7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	4619      	mov	r1, r3
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f000 fa66 	bl	800a43c <USBD_CoreFindEP>
 8009f70:	4603      	mov	r3, r0
 8009f72:	75bb      	strb	r3, [r7, #22]
            break;
 8009f74:	e002      	b.n	8009f7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009f76:	2300      	movs	r3, #0
 8009f78:	75bb      	strb	r3, [r7, #22]
            break;
 8009f7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009f7c:	7dbb      	ldrb	r3, [r7, #22]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d119      	bne.n	8009fb6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b03      	cmp	r3, #3
 8009f8c:	d113      	bne.n	8009fb6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009f8e:	7dba      	ldrb	r2, [r7, #22]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	32ae      	adds	r2, #174	@ 0xae
 8009f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00b      	beq.n	8009fb6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009f9e:	7dba      	ldrb	r2, [r7, #22]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009fa6:	7dba      	ldrb	r2, [r7, #22]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	32ae      	adds	r2, #174	@ 0xae
 8009fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f001 f95a 	bl	800b270 <USBD_CtlSendStatus>
 8009fbc:	e032      	b.n	800a024 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009fbe:	7afb      	ldrb	r3, [r7, #11]
 8009fc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f000 fa37 	bl	800a43c <USBD_CoreFindEP>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fd2:	7dbb      	ldrb	r3, [r7, #22]
 8009fd4:	2bff      	cmp	r3, #255	@ 0xff
 8009fd6:	d025      	beq.n	800a024 <USBD_LL_DataOutStage+0x15c>
 8009fd8:	7dbb      	ldrb	r3, [r7, #22]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d122      	bne.n	800a024 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	d117      	bne.n	800a01a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009fea:	7dba      	ldrb	r2, [r7, #22]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	32ae      	adds	r2, #174	@ 0xae
 8009ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00f      	beq.n	800a01a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009ffa:	7dba      	ldrb	r2, [r7, #22]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a002:	7dba      	ldrb	r2, [r7, #22]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	32ae      	adds	r2, #174	@ 0xae
 800a008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	7afa      	ldrb	r2, [r7, #11]
 800a010:	4611      	mov	r1, r2
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	4798      	blx	r3
 800a016:	4603      	mov	r3, r0
 800a018:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a020:	7dfb      	ldrb	r3, [r7, #23]
 800a022:	e000      	b.n	800a026 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3718      	adds	r7, #24
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b086      	sub	sp, #24
 800a032:	af00      	add	r7, sp, #0
 800a034:	60f8      	str	r0, [r7, #12]
 800a036:	460b      	mov	r3, r1
 800a038:	607a      	str	r2, [r7, #4]
 800a03a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a03c:	7afb      	ldrb	r3, [r7, #11]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d16f      	bne.n	800a122 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	3314      	adds	r3, #20
 800a046:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d15a      	bne.n	800a108 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	689a      	ldr	r2, [r3, #8]
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d914      	bls.n	800a088 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	689a      	ldr	r2, [r3, #8]
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	1ad2      	subs	r2, r2, r3
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	461a      	mov	r2, r3
 800a072:	6879      	ldr	r1, [r7, #4]
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f001 f8bc 	bl	800b1f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a07a:	2300      	movs	r3, #0
 800a07c:	2200      	movs	r2, #0
 800a07e:	2100      	movs	r1, #0
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f001 fe03 	bl	800bc8c <USBD_LL_PrepareReceive>
 800a086:	e03f      	b.n	800a108 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	68da      	ldr	r2, [r3, #12]
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	429a      	cmp	r2, r3
 800a092:	d11c      	bne.n	800a0ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	685a      	ldr	r2, [r3, #4]
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d316      	bcc.n	800a0ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d20f      	bcs.n	800a0ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f001 f89d 	bl	800b1f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f001 fde0 	bl	800bc8c <USBD_LL_PrepareReceive>
 800a0cc:	e01c      	b.n	800a108 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b03      	cmp	r3, #3
 800a0d8:	d10f      	bne.n	800a0fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d009      	beq.n	800a0fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0fa:	2180      	movs	r1, #128	@ 0x80
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f001 fd1b 	bl	800bb38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f001 f8c7 	bl	800b296 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d03a      	beq.n	800a188 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f7ff fe42 	bl	8009d9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a120:	e032      	b.n	800a188 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a122:	7afb      	ldrb	r3, [r7, #11]
 800a124:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	4619      	mov	r1, r3
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f000 f985 	bl	800a43c <USBD_CoreFindEP>
 800a132:	4603      	mov	r3, r0
 800a134:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a136:	7dfb      	ldrb	r3, [r7, #23]
 800a138:	2bff      	cmp	r3, #255	@ 0xff
 800a13a:	d025      	beq.n	800a188 <USBD_LL_DataInStage+0x15a>
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d122      	bne.n	800a188 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b03      	cmp	r3, #3
 800a14c:	d11c      	bne.n	800a188 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a14e:	7dfa      	ldrb	r2, [r7, #23]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	32ae      	adds	r2, #174	@ 0xae
 800a154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d014      	beq.n	800a188 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a15e:	7dfa      	ldrb	r2, [r7, #23]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a166:	7dfa      	ldrb	r2, [r7, #23]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	32ae      	adds	r2, #174	@ 0xae
 800a16c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a170:	695b      	ldr	r3, [r3, #20]
 800a172:	7afa      	ldrb	r2, [r7, #11]
 800a174:	4611      	mov	r1, r2
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	4798      	blx	r3
 800a17a:	4603      	mov	r3, r0
 800a17c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a17e:	7dbb      	ldrb	r3, [r7, #22]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d001      	beq.n	800a188 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a184:	7dbb      	ldrb	r3, [r7, #22]
 800a186:	e000      	b.n	800a18a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3718      	adds	r7, #24
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b084      	sub	sp, #16
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d014      	beq.n	800a1f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00e      	beq.n	800a1f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	6852      	ldr	r2, [r2, #4]
 800a1e6:	b2d2      	uxtb	r2, r2
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	4798      	blx	r3
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d001      	beq.n	800a1f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1f8:	2340      	movs	r3, #64	@ 0x40
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f001 fc55 	bl	800baae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2240      	movs	r2, #64	@ 0x40
 800a210:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a214:	2340      	movs	r3, #64	@ 0x40
 800a216:	2200      	movs	r2, #0
 800a218:	2180      	movs	r1, #128	@ 0x80
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f001 fc47 	bl	800baae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2240      	movs	r2, #64	@ 0x40
 800a22a:	621a      	str	r2, [r3, #32]

  return ret;
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a236:	b480      	push	{r7}
 800a238:	b083      	sub	sp, #12
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	460b      	mov	r3, r1
 800a240:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	78fa      	ldrb	r2, [r7, #3]
 800a246:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	370c      	adds	r7, #12
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr

0800a256 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a256:	b480      	push	{r7}
 800a258:	b083      	sub	sp, #12
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a264:	b2db      	uxtb	r3, r3
 800a266:	2b04      	cmp	r3, #4
 800a268:	d006      	beq.n	800a278 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a270:	b2da      	uxtb	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2204      	movs	r2, #4
 800a27c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a28e:	b480      	push	{r7}
 800a290:	b083      	sub	sp, #12
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b04      	cmp	r3, #4
 800a2a0:	d106      	bne.n	800a2b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a2a8:	b2da      	uxtb	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b082      	sub	sp, #8
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	d110      	bne.n	800a2f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00b      	beq.n	800a2f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2e2:	69db      	ldr	r3, [r3, #28]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d005      	beq.n	800a2f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ee:	69db      	ldr	r3, [r3, #28]
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b082      	sub	sp, #8
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	460b      	mov	r3, r1
 800a308:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	32ae      	adds	r2, #174	@ 0xae
 800a314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d101      	bne.n	800a320 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a31c:	2303      	movs	r3, #3
 800a31e:	e01c      	b.n	800a35a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a326:	b2db      	uxtb	r3, r3
 800a328:	2b03      	cmp	r3, #3
 800a32a:	d115      	bne.n	800a358 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	32ae      	adds	r2, #174	@ 0xae
 800a336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33a:	6a1b      	ldr	r3, [r3, #32]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00b      	beq.n	800a358 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	32ae      	adds	r2, #174	@ 0xae
 800a34a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a34e:	6a1b      	ldr	r3, [r3, #32]
 800a350:	78fa      	ldrb	r2, [r7, #3]
 800a352:	4611      	mov	r1, r2
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	460b      	mov	r3, r1
 800a36c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	32ae      	adds	r2, #174	@ 0xae
 800a378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d101      	bne.n	800a384 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a380:	2303      	movs	r3, #3
 800a382:	e01c      	b.n	800a3be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	2b03      	cmp	r3, #3
 800a38e:	d115      	bne.n	800a3bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	32ae      	adds	r2, #174	@ 0xae
 800a39a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a39e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00b      	beq.n	800a3bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	32ae      	adds	r2, #174	@ 0xae
 800a3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b4:	78fa      	ldrb	r2, [r7, #3]
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b083      	sub	sp, #12
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00e      	beq.n	800a418 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	6852      	ldr	r2, [r2, #4]
 800a406:	b2d2      	uxtb	r2, r2
 800a408:	4611      	mov	r1, r2
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	4798      	blx	r3
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d001      	beq.n	800a418 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a414:	2303      	movs	r3, #3
 800a416:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a418:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a422:	b480      	push	{r7}
 800a424:	b083      	sub	sp, #12
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	460b      	mov	r3, r1
 800a42c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a42e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a430:	4618      	mov	r0, r3
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	460b      	mov	r3, r1
 800a446:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a448:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	370c      	adds	r7, #12
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr

0800a456 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b086      	sub	sp, #24
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	460b      	mov	r3, r1
 800a460:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a46a:	2300      	movs	r3, #0
 800a46c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	885b      	ldrh	r3, [r3, #2]
 800a472:	b29b      	uxth	r3, r3
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	7812      	ldrb	r2, [r2, #0]
 800a478:	4293      	cmp	r3, r2
 800a47a:	d91f      	bls.n	800a4bc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a482:	e013      	b.n	800a4ac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a484:	f107 030a 	add.w	r3, r7, #10
 800a488:	4619      	mov	r1, r3
 800a48a:	6978      	ldr	r0, [r7, #20]
 800a48c:	f000 f81b 	bl	800a4c6 <USBD_GetNextDesc>
 800a490:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	785b      	ldrb	r3, [r3, #1]
 800a496:	2b05      	cmp	r3, #5
 800a498:	d108      	bne.n	800a4ac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	789b      	ldrb	r3, [r3, #2]
 800a4a2:	78fa      	ldrb	r2, [r7, #3]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d008      	beq.n	800a4ba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	885b      	ldrh	r3, [r3, #2]
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	897b      	ldrh	r3, [r7, #10]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d8e5      	bhi.n	800a484 <USBD_GetEpDesc+0x2e>
 800a4b8:	e000      	b.n	800a4bc <USBD_GetEpDesc+0x66>
          break;
 800a4ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a4bc:	693b      	ldr	r3, [r7, #16]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3718      	adds	r7, #24
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b085      	sub	sp, #20
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	881b      	ldrh	r3, [r3, #0]
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	7812      	ldrb	r2, [r2, #0]
 800a4dc:	4413      	add	r3, r2
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b087      	sub	sp, #28
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	3301      	adds	r3, #1
 800a514:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a51c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a520:	021b      	lsls	r3, r3, #8
 800a522:	b21a      	sxth	r2, r3
 800a524:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a528:	4313      	orrs	r3, r2
 800a52a:	b21b      	sxth	r3, r3
 800a52c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a52e:	89fb      	ldrh	r3, [r7, #14]
}
 800a530:	4618      	mov	r0, r3
 800a532:	371c      	adds	r7, #28
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a552:	2b40      	cmp	r3, #64	@ 0x40
 800a554:	d005      	beq.n	800a562 <USBD_StdDevReq+0x26>
 800a556:	2b40      	cmp	r3, #64	@ 0x40
 800a558:	d857      	bhi.n	800a60a <USBD_StdDevReq+0xce>
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00f      	beq.n	800a57e <USBD_StdDevReq+0x42>
 800a55e:	2b20      	cmp	r3, #32
 800a560:	d153      	bne.n	800a60a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	32ae      	adds	r2, #174	@ 0xae
 800a56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	6839      	ldr	r1, [r7, #0]
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	4798      	blx	r3
 800a578:	4603      	mov	r3, r0
 800a57a:	73fb      	strb	r3, [r7, #15]
      break;
 800a57c:	e04a      	b.n	800a614 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	785b      	ldrb	r3, [r3, #1]
 800a582:	2b09      	cmp	r3, #9
 800a584:	d83b      	bhi.n	800a5fe <USBD_StdDevReq+0xc2>
 800a586:	a201      	add	r2, pc, #4	@ (adr r2, 800a58c <USBD_StdDevReq+0x50>)
 800a588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58c:	0800a5e1 	.word	0x0800a5e1
 800a590:	0800a5f5 	.word	0x0800a5f5
 800a594:	0800a5ff 	.word	0x0800a5ff
 800a598:	0800a5eb 	.word	0x0800a5eb
 800a59c:	0800a5ff 	.word	0x0800a5ff
 800a5a0:	0800a5bf 	.word	0x0800a5bf
 800a5a4:	0800a5b5 	.word	0x0800a5b5
 800a5a8:	0800a5ff 	.word	0x0800a5ff
 800a5ac:	0800a5d7 	.word	0x0800a5d7
 800a5b0:	0800a5c9 	.word	0x0800a5c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fa3c 	bl	800aa34 <USBD_GetDescriptor>
          break;
 800a5bc:	e024      	b.n	800a608 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a5be:	6839      	ldr	r1, [r7, #0]
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 fba1 	bl	800ad08 <USBD_SetAddress>
          break;
 800a5c6:	e01f      	b.n	800a608 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a5c8:	6839      	ldr	r1, [r7, #0]
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fbe0 	bl	800ad90 <USBD_SetConfig>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	73fb      	strb	r3, [r7, #15]
          break;
 800a5d4:	e018      	b.n	800a608 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a5d6:	6839      	ldr	r1, [r7, #0]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 fc83 	bl	800aee4 <USBD_GetConfig>
          break;
 800a5de:	e013      	b.n	800a608 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a5e0:	6839      	ldr	r1, [r7, #0]
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 fcb4 	bl	800af50 <USBD_GetStatus>
          break;
 800a5e8:	e00e      	b.n	800a608 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fce3 	bl	800afb8 <USBD_SetFeature>
          break;
 800a5f2:	e009      	b.n	800a608 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 fd07 	bl	800b00a <USBD_ClrFeature>
          break;
 800a5fc:	e004      	b.n	800a608 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fd5e 	bl	800b0c2 <USBD_CtlError>
          break;
 800a606:	bf00      	nop
      }
      break;
 800a608:	e004      	b.n	800a614 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fd58 	bl	800b0c2 <USBD_CtlError>
      break;
 800a612:	bf00      	nop
  }

  return ret;
 800a614:	7bfb      	ldrb	r3, [r7, #15]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop

0800a620 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a636:	2b40      	cmp	r3, #64	@ 0x40
 800a638:	d005      	beq.n	800a646 <USBD_StdItfReq+0x26>
 800a63a:	2b40      	cmp	r3, #64	@ 0x40
 800a63c:	d852      	bhi.n	800a6e4 <USBD_StdItfReq+0xc4>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <USBD_StdItfReq+0x26>
 800a642:	2b20      	cmp	r3, #32
 800a644:	d14e      	bne.n	800a6e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	3b01      	subs	r3, #1
 800a650:	2b02      	cmp	r3, #2
 800a652:	d840      	bhi.n	800a6d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	889b      	ldrh	r3, [r3, #4]
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d836      	bhi.n	800a6cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	889b      	ldrh	r3, [r3, #4]
 800a662:	b2db      	uxtb	r3, r3
 800a664:	4619      	mov	r1, r3
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7ff fedb 	bl	800a422 <USBD_CoreFindIF>
 800a66c:	4603      	mov	r3, r0
 800a66e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a670:	7bbb      	ldrb	r3, [r7, #14]
 800a672:	2bff      	cmp	r3, #255	@ 0xff
 800a674:	d01d      	beq.n	800a6b2 <USBD_StdItfReq+0x92>
 800a676:	7bbb      	ldrb	r3, [r7, #14]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d11a      	bne.n	800a6b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a67c:	7bba      	ldrb	r2, [r7, #14]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	32ae      	adds	r2, #174	@ 0xae
 800a682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00f      	beq.n	800a6ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a68c:	7bba      	ldrb	r2, [r7, #14]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a694:	7bba      	ldrb	r2, [r7, #14]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	32ae      	adds	r2, #174	@ 0xae
 800a69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	6839      	ldr	r1, [r7, #0]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	4798      	blx	r3
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a6aa:	e004      	b.n	800a6b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a6b0:	e001      	b.n	800a6b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	88db      	ldrh	r3, [r3, #6]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d110      	bne.n	800a6e0 <USBD_StdItfReq+0xc0>
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10d      	bne.n	800a6e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fdd3 	bl	800b270 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a6ca:	e009      	b.n	800a6e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fcf7 	bl	800b0c2 <USBD_CtlError>
          break;
 800a6d4:	e004      	b.n	800a6e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a6d6:	6839      	ldr	r1, [r7, #0]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fcf2 	bl	800b0c2 <USBD_CtlError>
          break;
 800a6de:	e000      	b.n	800a6e2 <USBD_StdItfReq+0xc2>
          break;
 800a6e0:	bf00      	nop
      }
      break;
 800a6e2:	e004      	b.n	800a6ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fceb 	bl	800b0c2 <USBD_CtlError>
      break;
 800a6ec:	bf00      	nop
  }

  return ret;
 800a6ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	889b      	ldrh	r3, [r3, #4]
 800a70a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a714:	2b40      	cmp	r3, #64	@ 0x40
 800a716:	d007      	beq.n	800a728 <USBD_StdEPReq+0x30>
 800a718:	2b40      	cmp	r3, #64	@ 0x40
 800a71a:	f200 817f 	bhi.w	800aa1c <USBD_StdEPReq+0x324>
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d02a      	beq.n	800a778 <USBD_StdEPReq+0x80>
 800a722:	2b20      	cmp	r3, #32
 800a724:	f040 817a 	bne.w	800aa1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a728:	7bbb      	ldrb	r3, [r7, #14]
 800a72a:	4619      	mov	r1, r3
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7ff fe85 	bl	800a43c <USBD_CoreFindEP>
 800a732:	4603      	mov	r3, r0
 800a734:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a736:	7b7b      	ldrb	r3, [r7, #13]
 800a738:	2bff      	cmp	r3, #255	@ 0xff
 800a73a:	f000 8174 	beq.w	800aa26 <USBD_StdEPReq+0x32e>
 800a73e:	7b7b      	ldrb	r3, [r7, #13]
 800a740:	2b00      	cmp	r3, #0
 800a742:	f040 8170 	bne.w	800aa26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a746:	7b7a      	ldrb	r2, [r7, #13]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a74e:	7b7a      	ldrb	r2, [r7, #13]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	32ae      	adds	r2, #174	@ 0xae
 800a754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f000 8163 	beq.w	800aa26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a760:	7b7a      	ldrb	r2, [r7, #13]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	32ae      	adds	r2, #174	@ 0xae
 800a766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	4798      	blx	r3
 800a772:	4603      	mov	r3, r0
 800a774:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a776:	e156      	b.n	800aa26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	785b      	ldrb	r3, [r3, #1]
 800a77c:	2b03      	cmp	r3, #3
 800a77e:	d008      	beq.n	800a792 <USBD_StdEPReq+0x9a>
 800a780:	2b03      	cmp	r3, #3
 800a782:	f300 8145 	bgt.w	800aa10 <USBD_StdEPReq+0x318>
 800a786:	2b00      	cmp	r3, #0
 800a788:	f000 809b 	beq.w	800a8c2 <USBD_StdEPReq+0x1ca>
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d03c      	beq.n	800a80a <USBD_StdEPReq+0x112>
 800a790:	e13e      	b.n	800aa10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d002      	beq.n	800a7a4 <USBD_StdEPReq+0xac>
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	d016      	beq.n	800a7d0 <USBD_StdEPReq+0xd8>
 800a7a2:	e02c      	b.n	800a7fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7a4:	7bbb      	ldrb	r3, [r7, #14]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00d      	beq.n	800a7c6 <USBD_StdEPReq+0xce>
 800a7aa:	7bbb      	ldrb	r3, [r7, #14]
 800a7ac:	2b80      	cmp	r3, #128	@ 0x80
 800a7ae:	d00a      	beq.n	800a7c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f001 f9bf 	bl	800bb38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7ba:	2180      	movs	r1, #128	@ 0x80
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f001 f9bb 	bl	800bb38 <USBD_LL_StallEP>
 800a7c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7c4:	e020      	b.n	800a808 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fc7a 	bl	800b0c2 <USBD_CtlError>
              break;
 800a7ce:	e01b      	b.n	800a808 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	885b      	ldrh	r3, [r3, #2]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10e      	bne.n	800a7f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a7d8:	7bbb      	ldrb	r3, [r7, #14]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00b      	beq.n	800a7f6 <USBD_StdEPReq+0xfe>
 800a7de:	7bbb      	ldrb	r3, [r7, #14]
 800a7e0:	2b80      	cmp	r3, #128	@ 0x80
 800a7e2:	d008      	beq.n	800a7f6 <USBD_StdEPReq+0xfe>
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	88db      	ldrh	r3, [r3, #6]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d104      	bne.n	800a7f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7ec:	7bbb      	ldrb	r3, [r7, #14]
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f001 f9a1 	bl	800bb38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fd3a 	bl	800b270 <USBD_CtlSendStatus>

              break;
 800a7fc:	e004      	b.n	800a808 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fc5e 	bl	800b0c2 <USBD_CtlError>
              break;
 800a806:	bf00      	nop
          }
          break;
 800a808:	e107      	b.n	800aa1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a810:	b2db      	uxtb	r3, r3
 800a812:	2b02      	cmp	r3, #2
 800a814:	d002      	beq.n	800a81c <USBD_StdEPReq+0x124>
 800a816:	2b03      	cmp	r3, #3
 800a818:	d016      	beq.n	800a848 <USBD_StdEPReq+0x150>
 800a81a:	e04b      	b.n	800a8b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a81c:	7bbb      	ldrb	r3, [r7, #14]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00d      	beq.n	800a83e <USBD_StdEPReq+0x146>
 800a822:	7bbb      	ldrb	r3, [r7, #14]
 800a824:	2b80      	cmp	r3, #128	@ 0x80
 800a826:	d00a      	beq.n	800a83e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a828:	7bbb      	ldrb	r3, [r7, #14]
 800a82a:	4619      	mov	r1, r3
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f001 f983 	bl	800bb38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a832:	2180      	movs	r1, #128	@ 0x80
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f001 f97f 	bl	800bb38 <USBD_LL_StallEP>
 800a83a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a83c:	e040      	b.n	800a8c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a83e:	6839      	ldr	r1, [r7, #0]
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 fc3e 	bl	800b0c2 <USBD_CtlError>
              break;
 800a846:	e03b      	b.n	800a8c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	885b      	ldrh	r3, [r3, #2]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d136      	bne.n	800a8be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a850:	7bbb      	ldrb	r3, [r7, #14]
 800a852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a856:	2b00      	cmp	r3, #0
 800a858:	d004      	beq.n	800a864 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a85a:	7bbb      	ldrb	r3, [r7, #14]
 800a85c:	4619      	mov	r1, r3
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f001 f989 	bl	800bb76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fd03 	bl	800b270 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a86a:	7bbb      	ldrb	r3, [r7, #14]
 800a86c:	4619      	mov	r1, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f7ff fde4 	bl	800a43c <USBD_CoreFindEP>
 800a874:	4603      	mov	r3, r0
 800a876:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a878:	7b7b      	ldrb	r3, [r7, #13]
 800a87a:	2bff      	cmp	r3, #255	@ 0xff
 800a87c:	d01f      	beq.n	800a8be <USBD_StdEPReq+0x1c6>
 800a87e:	7b7b      	ldrb	r3, [r7, #13]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d11c      	bne.n	800a8be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a884:	7b7a      	ldrb	r2, [r7, #13]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a88c:	7b7a      	ldrb	r2, [r7, #13]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	32ae      	adds	r2, #174	@ 0xae
 800a892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d010      	beq.n	800a8be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a89c:	7b7a      	ldrb	r2, [r7, #13]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	32ae      	adds	r2, #174	@ 0xae
 800a8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	6839      	ldr	r1, [r7, #0]
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	4798      	blx	r3
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a8b2:	e004      	b.n	800a8be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 fc03 	bl	800b0c2 <USBD_CtlError>
              break;
 800a8bc:	e000      	b.n	800a8c0 <USBD_StdEPReq+0x1c8>
              break;
 800a8be:	bf00      	nop
          }
          break;
 800a8c0:	e0ab      	b.n	800aa1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d002      	beq.n	800a8d4 <USBD_StdEPReq+0x1dc>
 800a8ce:	2b03      	cmp	r3, #3
 800a8d0:	d032      	beq.n	800a938 <USBD_StdEPReq+0x240>
 800a8d2:	e097      	b.n	800aa04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8d4:	7bbb      	ldrb	r3, [r7, #14]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d007      	beq.n	800a8ea <USBD_StdEPReq+0x1f2>
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	2b80      	cmp	r3, #128	@ 0x80
 800a8de:	d004      	beq.n	800a8ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a8e0:	6839      	ldr	r1, [r7, #0]
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fbed 	bl	800b0c2 <USBD_CtlError>
                break;
 800a8e8:	e091      	b.n	800aa0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	da0b      	bge.n	800a90a <USBD_StdEPReq+0x212>
 800a8f2:	7bbb      	ldrb	r3, [r7, #14]
 800a8f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4413      	add	r3, r2
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	3310      	adds	r3, #16
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	4413      	add	r3, r2
 800a906:	3304      	adds	r3, #4
 800a908:	e00b      	b.n	800a922 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a90a:	7bbb      	ldrb	r3, [r7, #14]
 800a90c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a910:	4613      	mov	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	4413      	add	r3, r2
 800a920:	3304      	adds	r3, #4
 800a922:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	2200      	movs	r2, #0
 800a928:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	2202      	movs	r2, #2
 800a92e:	4619      	mov	r1, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fc43 	bl	800b1bc <USBD_CtlSendData>
              break;
 800a936:	e06a      	b.n	800aa0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a938:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	da11      	bge.n	800a964 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a940:	7bbb      	ldrb	r3, [r7, #14]
 800a942:	f003 020f 	and.w	r2, r3, #15
 800a946:	6879      	ldr	r1, [r7, #4]
 800a948:	4613      	mov	r3, r2
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4413      	add	r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	440b      	add	r3, r1
 800a952:	3324      	adds	r3, #36	@ 0x24
 800a954:	881b      	ldrh	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d117      	bne.n	800a98a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fbb0 	bl	800b0c2 <USBD_CtlError>
                  break;
 800a962:	e054      	b.n	800aa0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a964:	7bbb      	ldrb	r3, [r7, #14]
 800a966:	f003 020f 	and.w	r2, r3, #15
 800a96a:	6879      	ldr	r1, [r7, #4]
 800a96c:	4613      	mov	r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4413      	add	r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	440b      	add	r3, r1
 800a976:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a97a:	881b      	ldrh	r3, [r3, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d104      	bne.n	800a98a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a980:	6839      	ldr	r1, [r7, #0]
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fb9d 	bl	800b0c2 <USBD_CtlError>
                  break;
 800a988:	e041      	b.n	800aa0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a98a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	da0b      	bge.n	800a9aa <USBD_StdEPReq+0x2b2>
 800a992:	7bbb      	ldrb	r3, [r7, #14]
 800a994:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a998:	4613      	mov	r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4413      	add	r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	3310      	adds	r3, #16
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	3304      	adds	r3, #4
 800a9a8:	e00b      	b.n	800a9c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9aa:	7bbb      	ldrb	r3, [r7, #14]
 800a9ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	4413      	add	r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	4413      	add	r3, r2
 800a9c0:	3304      	adds	r3, #4
 800a9c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a9c4:	7bbb      	ldrb	r3, [r7, #14]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d002      	beq.n	800a9d0 <USBD_StdEPReq+0x2d8>
 800a9ca:	7bbb      	ldrb	r3, [r7, #14]
 800a9cc:	2b80      	cmp	r3, #128	@ 0x80
 800a9ce:	d103      	bne.n	800a9d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	601a      	str	r2, [r3, #0]
 800a9d6:	e00e      	b.n	800a9f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f001 f8e9 	bl	800bbb4 <USBD_LL_IsStallEP>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d003      	beq.n	800a9f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	601a      	str	r2, [r3, #0]
 800a9ee:	e002      	b.n	800a9f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fbdd 	bl	800b1bc <USBD_CtlSendData>
              break;
 800aa02:	e004      	b.n	800aa0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aa04:	6839      	ldr	r1, [r7, #0]
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 fb5b 	bl	800b0c2 <USBD_CtlError>
              break;
 800aa0c:	bf00      	nop
          }
          break;
 800aa0e:	e004      	b.n	800aa1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 fb55 	bl	800b0c2 <USBD_CtlError>
          break;
 800aa18:	bf00      	nop
      }
      break;
 800aa1a:	e005      	b.n	800aa28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aa1c:	6839      	ldr	r1, [r7, #0]
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 fb4f 	bl	800b0c2 <USBD_CtlError>
      break;
 800aa24:	e000      	b.n	800aa28 <USBD_StdEPReq+0x330>
      break;
 800aa26:	bf00      	nop
  }

  return ret;
 800aa28:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
	...

0800aa34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa42:	2300      	movs	r3, #0
 800aa44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aa46:	2300      	movs	r3, #0
 800aa48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	885b      	ldrh	r3, [r3, #2]
 800aa4e:	0a1b      	lsrs	r3, r3, #8
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	3b01      	subs	r3, #1
 800aa54:	2b06      	cmp	r3, #6
 800aa56:	f200 8128 	bhi.w	800acaa <USBD_GetDescriptor+0x276>
 800aa5a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa60 <USBD_GetDescriptor+0x2c>)
 800aa5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa60:	0800aa7d 	.word	0x0800aa7d
 800aa64:	0800aa95 	.word	0x0800aa95
 800aa68:	0800aad5 	.word	0x0800aad5
 800aa6c:	0800acab 	.word	0x0800acab
 800aa70:	0800acab 	.word	0x0800acab
 800aa74:	0800ac4b 	.word	0x0800ac4b
 800aa78:	0800ac77 	.word	0x0800ac77
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	7c12      	ldrb	r2, [r2, #16]
 800aa88:	f107 0108 	add.w	r1, r7, #8
 800aa8c:	4610      	mov	r0, r2
 800aa8e:	4798      	blx	r3
 800aa90:	60f8      	str	r0, [r7, #12]
      break;
 800aa92:	e112      	b.n	800acba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	7c1b      	ldrb	r3, [r3, #16]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10d      	bne.n	800aab8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaa4:	f107 0208 	add.w	r2, r7, #8
 800aaa8:	4610      	mov	r0, r2
 800aaaa:	4798      	blx	r3
 800aaac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	3301      	adds	r3, #1
 800aab2:	2202      	movs	r2, #2
 800aab4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aab6:	e100      	b.n	800acba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aabe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac0:	f107 0208 	add.w	r2, r7, #8
 800aac4:	4610      	mov	r0, r2
 800aac6:	4798      	blx	r3
 800aac8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	3301      	adds	r3, #1
 800aace:	2202      	movs	r2, #2
 800aad0:	701a      	strb	r2, [r3, #0]
      break;
 800aad2:	e0f2      	b.n	800acba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	885b      	ldrh	r3, [r3, #2]
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	2b05      	cmp	r3, #5
 800aadc:	f200 80ac 	bhi.w	800ac38 <USBD_GetDescriptor+0x204>
 800aae0:	a201      	add	r2, pc, #4	@ (adr r2, 800aae8 <USBD_GetDescriptor+0xb4>)
 800aae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae6:	bf00      	nop
 800aae8:	0800ab01 	.word	0x0800ab01
 800aaec:	0800ab35 	.word	0x0800ab35
 800aaf0:	0800ab69 	.word	0x0800ab69
 800aaf4:	0800ab9d 	.word	0x0800ab9d
 800aaf8:	0800abd1 	.word	0x0800abd1
 800aafc:	0800ac05 	.word	0x0800ac05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00b      	beq.n	800ab24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	7c12      	ldrb	r2, [r2, #16]
 800ab18:	f107 0108 	add.w	r1, r7, #8
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	4798      	blx	r3
 800ab20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab22:	e091      	b.n	800ac48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 facb 	bl	800b0c2 <USBD_CtlError>
            err++;
 800ab2c:	7afb      	ldrb	r3, [r7, #11]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	72fb      	strb	r3, [r7, #11]
          break;
 800ab32:	e089      	b.n	800ac48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00b      	beq.n	800ab58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	7c12      	ldrb	r2, [r2, #16]
 800ab4c:	f107 0108 	add.w	r1, r7, #8
 800ab50:	4610      	mov	r0, r2
 800ab52:	4798      	blx	r3
 800ab54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab56:	e077      	b.n	800ac48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fab1 	bl	800b0c2 <USBD_CtlError>
            err++;
 800ab60:	7afb      	ldrb	r3, [r7, #11]
 800ab62:	3301      	adds	r3, #1
 800ab64:	72fb      	strb	r3, [r7, #11]
          break;
 800ab66:	e06f      	b.n	800ac48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00b      	beq.n	800ab8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	7c12      	ldrb	r2, [r2, #16]
 800ab80:	f107 0108 	add.w	r1, r7, #8
 800ab84:	4610      	mov	r0, r2
 800ab86:	4798      	blx	r3
 800ab88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab8a:	e05d      	b.n	800ac48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab8c:	6839      	ldr	r1, [r7, #0]
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fa97 	bl	800b0c2 <USBD_CtlError>
            err++;
 800ab94:	7afb      	ldrb	r3, [r7, #11]
 800ab96:	3301      	adds	r3, #1
 800ab98:	72fb      	strb	r3, [r7, #11]
          break;
 800ab9a:	e055      	b.n	800ac48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00b      	beq.n	800abc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	7c12      	ldrb	r2, [r2, #16]
 800abb4:	f107 0108 	add.w	r1, r7, #8
 800abb8:	4610      	mov	r0, r2
 800abba:	4798      	blx	r3
 800abbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abbe:	e043      	b.n	800ac48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fa7d 	bl	800b0c2 <USBD_CtlError>
            err++;
 800abc8:	7afb      	ldrb	r3, [r7, #11]
 800abca:	3301      	adds	r3, #1
 800abcc:	72fb      	strb	r3, [r7, #11]
          break;
 800abce:	e03b      	b.n	800ac48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00b      	beq.n	800abf4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abe2:	695b      	ldr	r3, [r3, #20]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	7c12      	ldrb	r2, [r2, #16]
 800abe8:	f107 0108 	add.w	r1, r7, #8
 800abec:	4610      	mov	r0, r2
 800abee:	4798      	blx	r3
 800abf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abf2:	e029      	b.n	800ac48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abf4:	6839      	ldr	r1, [r7, #0]
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 fa63 	bl	800b0c2 <USBD_CtlError>
            err++;
 800abfc:	7afb      	ldrb	r3, [r7, #11]
 800abfe:	3301      	adds	r3, #1
 800ac00:	72fb      	strb	r3, [r7, #11]
          break;
 800ac02:	e021      	b.n	800ac48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac0a:	699b      	ldr	r3, [r3, #24]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00b      	beq.n	800ac28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	7c12      	ldrb	r2, [r2, #16]
 800ac1c:	f107 0108 	add.w	r1, r7, #8
 800ac20:	4610      	mov	r0, r2
 800ac22:	4798      	blx	r3
 800ac24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac26:	e00f      	b.n	800ac48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fa49 	bl	800b0c2 <USBD_CtlError>
            err++;
 800ac30:	7afb      	ldrb	r3, [r7, #11]
 800ac32:	3301      	adds	r3, #1
 800ac34:	72fb      	strb	r3, [r7, #11]
          break;
 800ac36:	e007      	b.n	800ac48 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ac38:	6839      	ldr	r1, [r7, #0]
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fa41 	bl	800b0c2 <USBD_CtlError>
          err++;
 800ac40:	7afb      	ldrb	r3, [r7, #11]
 800ac42:	3301      	adds	r3, #1
 800ac44:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ac46:	bf00      	nop
      }
      break;
 800ac48:	e037      	b.n	800acba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	7c1b      	ldrb	r3, [r3, #16]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d109      	bne.n	800ac66 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac5a:	f107 0208 	add.w	r2, r7, #8
 800ac5e:	4610      	mov	r0, r2
 800ac60:	4798      	blx	r3
 800ac62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac64:	e029      	b.n	800acba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fa2a 	bl	800b0c2 <USBD_CtlError>
        err++;
 800ac6e:	7afb      	ldrb	r3, [r7, #11]
 800ac70:	3301      	adds	r3, #1
 800ac72:	72fb      	strb	r3, [r7, #11]
      break;
 800ac74:	e021      	b.n	800acba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	7c1b      	ldrb	r3, [r3, #16]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10d      	bne.n	800ac9a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac86:	f107 0208 	add.w	r2, r7, #8
 800ac8a:	4610      	mov	r0, r2
 800ac8c:	4798      	blx	r3
 800ac8e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	3301      	adds	r3, #1
 800ac94:	2207      	movs	r2, #7
 800ac96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac98:	e00f      	b.n	800acba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 fa10 	bl	800b0c2 <USBD_CtlError>
        err++;
 800aca2:	7afb      	ldrb	r3, [r7, #11]
 800aca4:	3301      	adds	r3, #1
 800aca6:	72fb      	strb	r3, [r7, #11]
      break;
 800aca8:	e007      	b.n	800acba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800acaa:	6839      	ldr	r1, [r7, #0]
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fa08 	bl	800b0c2 <USBD_CtlError>
      err++;
 800acb2:	7afb      	ldrb	r3, [r7, #11]
 800acb4:	3301      	adds	r3, #1
 800acb6:	72fb      	strb	r3, [r7, #11]
      break;
 800acb8:	bf00      	nop
  }

  if (err != 0U)
 800acba:	7afb      	ldrb	r3, [r7, #11]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d11e      	bne.n	800acfe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	88db      	ldrh	r3, [r3, #6]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d016      	beq.n	800acf6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800acc8:	893b      	ldrh	r3, [r7, #8]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00e      	beq.n	800acec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	88da      	ldrh	r2, [r3, #6]
 800acd2:	893b      	ldrh	r3, [r7, #8]
 800acd4:	4293      	cmp	r3, r2
 800acd6:	bf28      	it	cs
 800acd8:	4613      	movcs	r3, r2
 800acda:	b29b      	uxth	r3, r3
 800acdc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800acde:	893b      	ldrh	r3, [r7, #8]
 800ace0:	461a      	mov	r2, r3
 800ace2:	68f9      	ldr	r1, [r7, #12]
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fa69 	bl	800b1bc <USBD_CtlSendData>
 800acea:	e009      	b.n	800ad00 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800acec:	6839      	ldr	r1, [r7, #0]
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f9e7 	bl	800b0c2 <USBD_CtlError>
 800acf4:	e004      	b.n	800ad00 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 faba 	bl	800b270 <USBD_CtlSendStatus>
 800acfc:	e000      	b.n	800ad00 <USBD_GetDescriptor+0x2cc>
    return;
 800acfe:	bf00      	nop
  }
}
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop

0800ad08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	889b      	ldrh	r3, [r3, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d131      	bne.n	800ad7e <USBD_SetAddress+0x76>
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	88db      	ldrh	r3, [r3, #6]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d12d      	bne.n	800ad7e <USBD_SetAddress+0x76>
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	885b      	ldrh	r3, [r3, #2]
 800ad26:	2b7f      	cmp	r3, #127	@ 0x7f
 800ad28:	d829      	bhi.n	800ad7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	885b      	ldrh	r3, [r3, #2]
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	2b03      	cmp	r3, #3
 800ad40:	d104      	bne.n	800ad4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 f9bc 	bl	800b0c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad4a:	e01d      	b.n	800ad88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	7bfa      	ldrb	r2, [r7, #15]
 800ad50:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad54:	7bfb      	ldrb	r3, [r7, #15]
 800ad56:	4619      	mov	r1, r3
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 ff57 	bl	800bc0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fa86 	bl	800b270 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad64:	7bfb      	ldrb	r3, [r7, #15]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d004      	beq.n	800ad74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2202      	movs	r2, #2
 800ad6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad72:	e009      	b.n	800ad88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad7c:	e004      	b.n	800ad88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad7e:	6839      	ldr	r1, [r7, #0]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f99e 	bl	800b0c2 <USBD_CtlError>
  }
}
 800ad86:	bf00      	nop
 800ad88:	bf00      	nop
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	885b      	ldrh	r3, [r3, #2]
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	4b4e      	ldr	r3, [pc, #312]	@ (800aee0 <USBD_SetConfig+0x150>)
 800ada6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ada8:	4b4d      	ldr	r3, [pc, #308]	@ (800aee0 <USBD_SetConfig+0x150>)
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d905      	bls.n	800adbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800adb0:	6839      	ldr	r1, [r7, #0]
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f985 	bl	800b0c2 <USBD_CtlError>
    return USBD_FAIL;
 800adb8:	2303      	movs	r3, #3
 800adba:	e08c      	b.n	800aed6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d002      	beq.n	800adce <USBD_SetConfig+0x3e>
 800adc8:	2b03      	cmp	r3, #3
 800adca:	d029      	beq.n	800ae20 <USBD_SetConfig+0x90>
 800adcc:	e075      	b.n	800aeba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800adce:	4b44      	ldr	r3, [pc, #272]	@ (800aee0 <USBD_SetConfig+0x150>)
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d020      	beq.n	800ae18 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800add6:	4b42      	ldr	r3, [pc, #264]	@ (800aee0 <USBD_SetConfig+0x150>)
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	461a      	mov	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ade0:	4b3f      	ldr	r3, [pc, #252]	@ (800aee0 <USBD_SetConfig+0x150>)
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7fe ffe3 	bl	8009db2 <USBD_SetClassConfig>
 800adec:	4603      	mov	r3, r0
 800adee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d008      	beq.n	800ae08 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 f962 	bl	800b0c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2202      	movs	r2, #2
 800ae02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae06:	e065      	b.n	800aed4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 fa31 	bl	800b270 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2203      	movs	r2, #3
 800ae12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ae16:	e05d      	b.n	800aed4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 fa29 	bl	800b270 <USBD_CtlSendStatus>
      break;
 800ae1e:	e059      	b.n	800aed4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ae20:	4b2f      	ldr	r3, [pc, #188]	@ (800aee0 <USBD_SetConfig+0x150>)
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d112      	bne.n	800ae4e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2202      	movs	r2, #2
 800ae2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ae30:	4b2b      	ldr	r3, [pc, #172]	@ (800aee0 <USBD_SetConfig+0x150>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	461a      	mov	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae3a:	4b29      	ldr	r3, [pc, #164]	@ (800aee0 <USBD_SetConfig+0x150>)
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7fe ffd2 	bl	8009dea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fa12 	bl	800b270 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae4c:	e042      	b.n	800aed4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ae4e:	4b24      	ldr	r3, [pc, #144]	@ (800aee0 <USBD_SetConfig+0x150>)
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	461a      	mov	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d02a      	beq.n	800aeb2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	4619      	mov	r1, r3
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7fe ffc0 	bl	8009dea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ae6a:	4b1d      	ldr	r3, [pc, #116]	@ (800aee0 <USBD_SetConfig+0x150>)
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	461a      	mov	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae74:	4b1a      	ldr	r3, [pc, #104]	@ (800aee0 <USBD_SetConfig+0x150>)
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7fe ff99 	bl	8009db2 <USBD_SetClassConfig>
 800ae80:	4603      	mov	r3, r0
 800ae82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ae84:	7bfb      	ldrb	r3, [r7, #15]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00f      	beq.n	800aeaa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ae8a:	6839      	ldr	r1, [r7, #0]
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 f918 	bl	800b0c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	4619      	mov	r1, r3
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f7fe ffa5 	bl	8009dea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2202      	movs	r2, #2
 800aea4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aea8:	e014      	b.n	800aed4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f9e0 	bl	800b270 <USBD_CtlSendStatus>
      break;
 800aeb0:	e010      	b.n	800aed4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 f9dc 	bl	800b270 <USBD_CtlSendStatus>
      break;
 800aeb8:	e00c      	b.n	800aed4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f900 	bl	800b0c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aec2:	4b07      	ldr	r3, [pc, #28]	@ (800aee0 <USBD_SetConfig+0x150>)
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7fe ff8e 	bl	8009dea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aece:	2303      	movs	r3, #3
 800aed0:	73fb      	strb	r3, [r7, #15]
      break;
 800aed2:	bf00      	nop
  }

  return ret;
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	200004cc 	.word	0x200004cc

0800aee4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	88db      	ldrh	r3, [r3, #6]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d004      	beq.n	800af00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f8e2 	bl	800b0c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aefe:	e023      	b.n	800af48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af06:	b2db      	uxtb	r3, r3
 800af08:	2b02      	cmp	r3, #2
 800af0a:	dc02      	bgt.n	800af12 <USBD_GetConfig+0x2e>
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	dc03      	bgt.n	800af18 <USBD_GetConfig+0x34>
 800af10:	e015      	b.n	800af3e <USBD_GetConfig+0x5a>
 800af12:	2b03      	cmp	r3, #3
 800af14:	d00b      	beq.n	800af2e <USBD_GetConfig+0x4a>
 800af16:	e012      	b.n	800af3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	3308      	adds	r3, #8
 800af22:	2201      	movs	r2, #1
 800af24:	4619      	mov	r1, r3
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f948 	bl	800b1bc <USBD_CtlSendData>
        break;
 800af2c:	e00c      	b.n	800af48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	3304      	adds	r3, #4
 800af32:	2201      	movs	r2, #1
 800af34:	4619      	mov	r1, r3
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f940 	bl	800b1bc <USBD_CtlSendData>
        break;
 800af3c:	e004      	b.n	800af48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800af3e:	6839      	ldr	r1, [r7, #0]
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 f8be 	bl	800b0c2 <USBD_CtlError>
        break;
 800af46:	bf00      	nop
}
 800af48:	bf00      	nop
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af60:	b2db      	uxtb	r3, r3
 800af62:	3b01      	subs	r3, #1
 800af64:	2b02      	cmp	r3, #2
 800af66:	d81e      	bhi.n	800afa6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	88db      	ldrh	r3, [r3, #6]
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d004      	beq.n	800af7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800af70:	6839      	ldr	r1, [r7, #0]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f8a5 	bl	800b0c2 <USBD_CtlError>
        break;
 800af78:	e01a      	b.n	800afb0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2201      	movs	r2, #1
 800af7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800af86:	2b00      	cmp	r3, #0
 800af88:	d005      	beq.n	800af96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	f043 0202 	orr.w	r2, r3, #2
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	330c      	adds	r3, #12
 800af9a:	2202      	movs	r2, #2
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f90c 	bl	800b1bc <USBD_CtlSendData>
      break;
 800afa4:	e004      	b.n	800afb0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f88a 	bl	800b0c2 <USBD_CtlError>
      break;
 800afae:	bf00      	nop
  }
}
 800afb0:	bf00      	nop
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	885b      	ldrh	r3, [r3, #2]
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d107      	bne.n	800afda <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2201      	movs	r2, #1
 800afce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 f94c 	bl	800b270 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800afd8:	e013      	b.n	800b002 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	885b      	ldrh	r3, [r3, #2]
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d10b      	bne.n	800affa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	889b      	ldrh	r3, [r3, #4]
 800afe6:	0a1b      	lsrs	r3, r3, #8
 800afe8:	b29b      	uxth	r3, r3
 800afea:	b2da      	uxtb	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f93c 	bl	800b270 <USBD_CtlSendStatus>
}
 800aff8:	e003      	b.n	800b002 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800affa:	6839      	ldr	r1, [r7, #0]
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f860 	bl	800b0c2 <USBD_CtlError>
}
 800b002:	bf00      	nop
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b082      	sub	sp, #8
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	3b01      	subs	r3, #1
 800b01e:	2b02      	cmp	r3, #2
 800b020:	d80b      	bhi.n	800b03a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	885b      	ldrh	r3, [r3, #2]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d10c      	bne.n	800b044 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f91c 	bl	800b270 <USBD_CtlSendStatus>
      }
      break;
 800b038:	e004      	b.n	800b044 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b03a:	6839      	ldr	r1, [r7, #0]
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 f840 	bl	800b0c2 <USBD_CtlError>
      break;
 800b042:	e000      	b.n	800b046 <USBD_ClrFeature+0x3c>
      break;
 800b044:	bf00      	nop
  }
}
 800b046:	bf00      	nop
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b084      	sub	sp, #16
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	781a      	ldrb	r2, [r3, #0]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	3301      	adds	r3, #1
 800b068:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	781a      	ldrb	r2, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	3301      	adds	r3, #1
 800b076:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f7ff fa40 	bl	800a4fe <SWAPBYTE>
 800b07e:	4603      	mov	r3, r0
 800b080:	461a      	mov	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	3301      	adds	r3, #1
 800b08a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	3301      	adds	r3, #1
 800b090:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f7ff fa33 	bl	800a4fe <SWAPBYTE>
 800b098:	4603      	mov	r3, r0
 800b09a:	461a      	mov	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f7ff fa26 	bl	800a4fe <SWAPBYTE>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	80da      	strh	r2, [r3, #6]
}
 800b0ba:	bf00      	nop
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b082      	sub	sp, #8
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
 800b0ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0cc:	2180      	movs	r1, #128	@ 0x80
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fd32 	bl	800bb38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 fd2e 	bl	800bb38 <USBD_LL_StallEP>
}
 800b0dc:	bf00      	nop
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d042      	beq.n	800b180 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b0fe:	6938      	ldr	r0, [r7, #16]
 800b100:	f000 f842 	bl	800b188 <USBD_GetLen>
 800b104:	4603      	mov	r3, r0
 800b106:	3301      	adds	r3, #1
 800b108:	005b      	lsls	r3, r3, #1
 800b10a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b10e:	d808      	bhi.n	800b122 <USBD_GetString+0x3e>
 800b110:	6938      	ldr	r0, [r7, #16]
 800b112:	f000 f839 	bl	800b188 <USBD_GetLen>
 800b116:	4603      	mov	r3, r0
 800b118:	3301      	adds	r3, #1
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	005b      	lsls	r3, r3, #1
 800b11e:	b29a      	uxth	r2, r3
 800b120:	e001      	b.n	800b126 <USBD_GetString+0x42>
 800b122:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b12a:	7dfb      	ldrb	r3, [r7, #23]
 800b12c:	68ba      	ldr	r2, [r7, #8]
 800b12e:	4413      	add	r3, r2
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	7812      	ldrb	r2, [r2, #0]
 800b134:	701a      	strb	r2, [r3, #0]
  idx++;
 800b136:	7dfb      	ldrb	r3, [r7, #23]
 800b138:	3301      	adds	r3, #1
 800b13a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b13c:	7dfb      	ldrb	r3, [r7, #23]
 800b13e:	68ba      	ldr	r2, [r7, #8]
 800b140:	4413      	add	r3, r2
 800b142:	2203      	movs	r2, #3
 800b144:	701a      	strb	r2, [r3, #0]
  idx++;
 800b146:	7dfb      	ldrb	r3, [r7, #23]
 800b148:	3301      	adds	r3, #1
 800b14a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b14c:	e013      	b.n	800b176 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b14e:	7dfb      	ldrb	r3, [r7, #23]
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	4413      	add	r3, r2
 800b154:	693a      	ldr	r2, [r7, #16]
 800b156:	7812      	ldrb	r2, [r2, #0]
 800b158:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	3301      	adds	r3, #1
 800b15e:	613b      	str	r3, [r7, #16]
    idx++;
 800b160:	7dfb      	ldrb	r3, [r7, #23]
 800b162:	3301      	adds	r3, #1
 800b164:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b166:	7dfb      	ldrb	r3, [r7, #23]
 800b168:	68ba      	ldr	r2, [r7, #8]
 800b16a:	4413      	add	r3, r2
 800b16c:	2200      	movs	r2, #0
 800b16e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b170:	7dfb      	ldrb	r3, [r7, #23]
 800b172:	3301      	adds	r3, #1
 800b174:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1e7      	bne.n	800b14e <USBD_GetString+0x6a>
 800b17e:	e000      	b.n	800b182 <USBD_GetString+0x9e>
    return;
 800b180:	bf00      	nop
  }
}
 800b182:	3718      	adds	r7, #24
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b190:	2300      	movs	r3, #0
 800b192:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b198:	e005      	b.n	800b1a6 <USBD_GetLen+0x1e>
  {
    len++;
 800b19a:	7bfb      	ldrb	r3, [r7, #15]
 800b19c:	3301      	adds	r3, #1
 800b19e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1f5      	bne.n	800b19a <USBD_GetLen+0x12>
  }

  return len;
 800b1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3714      	adds	r7, #20
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2202      	movs	r2, #2
 800b1cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	2100      	movs	r1, #0
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f000 fd31 	bl	800bc4a <USBD_LL_Transmit>

  return USBD_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b084      	sub	sp, #16
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	60f8      	str	r0, [r7, #12]
 800b1fa:	60b9      	str	r1, [r7, #8]
 800b1fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	2100      	movs	r1, #0
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	f000 fd20 	bl	800bc4a <USBD_LL_Transmit>

  return USBD_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2203      	movs	r2, #3
 800b224:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	2100      	movs	r1, #0
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f000 fd24 	bl	800bc8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b084      	sub	sp, #16
 800b252:	af00      	add	r7, sp, #0
 800b254:	60f8      	str	r0, [r7, #12]
 800b256:	60b9      	str	r1, [r7, #8]
 800b258:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	2100      	movs	r1, #0
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f000 fd13 	bl	800bc8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2204      	movs	r2, #4
 800b27c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b280:	2300      	movs	r3, #0
 800b282:	2200      	movs	r2, #0
 800b284:	2100      	movs	r1, #0
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fcdf 	bl	800bc4a <USBD_LL_Transmit>

  return USBD_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3708      	adds	r7, #8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}

0800b296 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b296:	b580      	push	{r7, lr}
 800b298:	b082      	sub	sp, #8
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2205      	movs	r2, #5
 800b2a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 fced 	bl	800bc8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	4912      	ldr	r1, [pc, #72]	@ (800b30c <MX_USB_DEVICE_Init+0x50>)
 800b2c4:	4812      	ldr	r0, [pc, #72]	@ (800b310 <MX_USB_DEVICE_Init+0x54>)
 800b2c6:	f7fe fcf7 	bl	8009cb8 <USBD_Init>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d001      	beq.n	800b2d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b2d0:	f7f6 f9a4 	bl	800161c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b2d4:	490f      	ldr	r1, [pc, #60]	@ (800b314 <MX_USB_DEVICE_Init+0x58>)
 800b2d6:	480e      	ldr	r0, [pc, #56]	@ (800b310 <MX_USB_DEVICE_Init+0x54>)
 800b2d8:	f7fe fd1e 	bl	8009d18 <USBD_RegisterClass>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b2e2:	f7f6 f99b 	bl	800161c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b2e6:	490c      	ldr	r1, [pc, #48]	@ (800b318 <MX_USB_DEVICE_Init+0x5c>)
 800b2e8:	4809      	ldr	r0, [pc, #36]	@ (800b310 <MX_USB_DEVICE_Init+0x54>)
 800b2ea:	f7fe fc15 	bl	8009b18 <USBD_CDC_RegisterInterface>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b2f4:	f7f6 f992 	bl	800161c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b2f8:	4805      	ldr	r0, [pc, #20]	@ (800b310 <MX_USB_DEVICE_Init+0x54>)
 800b2fa:	f7fe fd43 	bl	8009d84 <USBD_Start>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b304:	f7f6 f98a 	bl	800161c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b308:	bf00      	nop
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	200000b4 	.word	0x200000b4
 800b310:	200004d0 	.word	0x200004d0
 800b314:	20000018 	.word	0x20000018
 800b318:	200000a0 	.word	0x200000a0

0800b31c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b320:	2200      	movs	r2, #0
 800b322:	4905      	ldr	r1, [pc, #20]	@ (800b338 <CDC_Init_FS+0x1c>)
 800b324:	4805      	ldr	r0, [pc, #20]	@ (800b33c <CDC_Init_FS+0x20>)
 800b326:	f7fe fc11 	bl	8009b4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b32a:	4905      	ldr	r1, [pc, #20]	@ (800b340 <CDC_Init_FS+0x24>)
 800b32c:	4803      	ldr	r0, [pc, #12]	@ (800b33c <CDC_Init_FS+0x20>)
 800b32e:	f7fe fc2f 	bl	8009b90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b332:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b334:	4618      	mov	r0, r3
 800b336:	bd80      	pop	{r7, pc}
 800b338:	20000fac 	.word	0x20000fac
 800b33c:	200004d0 	.word	0x200004d0
 800b340:	200007ac 	.word	0x200007ac

0800b344 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b344:	b480      	push	{r7}
 800b346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b348:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	4603      	mov	r3, r0
 800b35c:	6039      	str	r1, [r7, #0]
 800b35e:	71fb      	strb	r3, [r7, #7]
 800b360:	4613      	mov	r3, r2
 800b362:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b364:	79fb      	ldrb	r3, [r7, #7]
 800b366:	2b23      	cmp	r3, #35	@ 0x23
 800b368:	f200 8098 	bhi.w	800b49c <CDC_Control_FS+0x148>
 800b36c:	a201      	add	r2, pc, #4	@ (adr r2, 800b374 <CDC_Control_FS+0x20>)
 800b36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b372:	bf00      	nop
 800b374:	0800b49d 	.word	0x0800b49d
 800b378:	0800b49d 	.word	0x0800b49d
 800b37c:	0800b49d 	.word	0x0800b49d
 800b380:	0800b49d 	.word	0x0800b49d
 800b384:	0800b49d 	.word	0x0800b49d
 800b388:	0800b49d 	.word	0x0800b49d
 800b38c:	0800b49d 	.word	0x0800b49d
 800b390:	0800b49d 	.word	0x0800b49d
 800b394:	0800b49d 	.word	0x0800b49d
 800b398:	0800b49d 	.word	0x0800b49d
 800b39c:	0800b49d 	.word	0x0800b49d
 800b3a0:	0800b49d 	.word	0x0800b49d
 800b3a4:	0800b49d 	.word	0x0800b49d
 800b3a8:	0800b49d 	.word	0x0800b49d
 800b3ac:	0800b49d 	.word	0x0800b49d
 800b3b0:	0800b49d 	.word	0x0800b49d
 800b3b4:	0800b49d 	.word	0x0800b49d
 800b3b8:	0800b49d 	.word	0x0800b49d
 800b3bc:	0800b49d 	.word	0x0800b49d
 800b3c0:	0800b49d 	.word	0x0800b49d
 800b3c4:	0800b49d 	.word	0x0800b49d
 800b3c8:	0800b49d 	.word	0x0800b49d
 800b3cc:	0800b49d 	.word	0x0800b49d
 800b3d0:	0800b49d 	.word	0x0800b49d
 800b3d4:	0800b49d 	.word	0x0800b49d
 800b3d8:	0800b49d 	.word	0x0800b49d
 800b3dc:	0800b49d 	.word	0x0800b49d
 800b3e0:	0800b49d 	.word	0x0800b49d
 800b3e4:	0800b49d 	.word	0x0800b49d
 800b3e8:	0800b49d 	.word	0x0800b49d
 800b3ec:	0800b49d 	.word	0x0800b49d
 800b3f0:	0800b49d 	.word	0x0800b49d
 800b3f4:	0800b405 	.word	0x0800b405
 800b3f8:	0800b449 	.word	0x0800b449
 800b3fc:	0800b49d 	.word	0x0800b49d
 800b400:	0800b49d 	.word	0x0800b49d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	461a      	mov	r2, r3
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	3301      	adds	r3, #1
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	021b      	lsls	r3, r3, #8
 800b412:	431a      	orrs	r2, r3
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	3302      	adds	r3, #2
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	041b      	lsls	r3, r3, #16
 800b41c:	431a      	orrs	r2, r3
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	3303      	adds	r3, #3
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	061b      	lsls	r3, r3, #24
 800b426:	4313      	orrs	r3, r2
 800b428:	461a      	mov	r2, r3
 800b42a:	4b20      	ldr	r3, [pc, #128]	@ (800b4ac <CDC_Control_FS+0x158>)
 800b42c:	601a      	str	r2, [r3, #0]
      LineCoding.format = pbuf[4];
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	791a      	ldrb	r2, [r3, #4]
 800b432:	4b1e      	ldr	r3, [pc, #120]	@ (800b4ac <CDC_Control_FS+0x158>)
 800b434:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	795a      	ldrb	r2, [r3, #5]
 800b43a:	4b1c      	ldr	r3, [pc, #112]	@ (800b4ac <CDC_Control_FS+0x158>)
 800b43c:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype = pbuf[6];
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	799a      	ldrb	r2, [r3, #6]
 800b442:	4b1a      	ldr	r3, [pc, #104]	@ (800b4ac <CDC_Control_FS+0x158>)
 800b444:	719a      	strb	r2, [r3, #6]
      break;
 800b446:	e02a      	b.n	800b49e <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t) (LineCoding.bitrate);
 800b448:	4b18      	ldr	r3, [pc, #96]	@ (800b4ac <CDC_Control_FS+0x158>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	b2da      	uxtb	r2, r3
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 800b452:	4b16      	ldr	r3, [pc, #88]	@ (800b4ac <CDC_Control_FS+0x158>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	0a1a      	lsrs	r2, r3, #8
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	3301      	adds	r3, #1
 800b45c:	b2d2      	uxtb	r2, r2
 800b45e:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 800b460:	4b12      	ldr	r3, [pc, #72]	@ (800b4ac <CDC_Control_FS+0x158>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	0c1a      	lsrs	r2, r3, #16
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	3302      	adds	r3, #2
 800b46a:	b2d2      	uxtb	r2, r2
 800b46c:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 800b46e:	4b0f      	ldr	r3, [pc, #60]	@ (800b4ac <CDC_Control_FS+0x158>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	0e1a      	lsrs	r2, r3, #24
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	3303      	adds	r3, #3
 800b478:	b2d2      	uxtb	r2, r2
 800b47a:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	3304      	adds	r3, #4
 800b480:	4a0a      	ldr	r2, [pc, #40]	@ (800b4ac <CDC_Control_FS+0x158>)
 800b482:	7912      	ldrb	r2, [r2, #4]
 800b484:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	3305      	adds	r3, #5
 800b48a:	4a08      	ldr	r2, [pc, #32]	@ (800b4ac <CDC_Control_FS+0x158>)
 800b48c:	7952      	ldrb	r2, [r2, #5]
 800b48e:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	3306      	adds	r3, #6
 800b494:	4a05      	ldr	r2, [pc, #20]	@ (800b4ac <CDC_Control_FS+0x158>)
 800b496:	7992      	ldrb	r2, [r2, #6]
 800b498:	701a      	strb	r2, [r3, #0]
      break;
 800b49a:	e000      	b.n	800b49e <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b49c:	bf00      	nop
  }

  return (USBD_OK);
 800b49e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr
 800b4ac:	20000098 	.word	0x20000098

0800b4b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b4ba:	6879      	ldr	r1, [r7, #4]
 800b4bc:	4805      	ldr	r0, [pc, #20]	@ (800b4d4 <CDC_Receive_FS+0x24>)
 800b4be:	f7fe fb67 	bl	8009b90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b4c2:	4804      	ldr	r0, [pc, #16]	@ (800b4d4 <CDC_Receive_FS+0x24>)
 800b4c4:	f7fe fbc2 	bl	8009c4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b4c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	200004d0 	.word	0x200004d0

0800b4d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b4e8:	4b0d      	ldr	r3, [pc, #52]	@ (800b520 <CDC_Transmit_FS+0x48>)
 800b4ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b4ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d001      	beq.n	800b4fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e00b      	b.n	800b516 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b4fe:	887b      	ldrh	r3, [r7, #2]
 800b500:	461a      	mov	r2, r3
 800b502:	6879      	ldr	r1, [r7, #4]
 800b504:	4806      	ldr	r0, [pc, #24]	@ (800b520 <CDC_Transmit_FS+0x48>)
 800b506:	f7fe fb21 	bl	8009b4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b50a:	4805      	ldr	r0, [pc, #20]	@ (800b520 <CDC_Transmit_FS+0x48>)
 800b50c:	f7fe fb5e 	bl	8009bcc <USBD_CDC_TransmitPacket>
 800b510:	4603      	mov	r3, r0
 800b512:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b514:	7bfb      	ldrb	r3, [r7, #15]
}
 800b516:	4618      	mov	r0, r3
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	200004d0 	.word	0x200004d0

0800b524 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b524:	b480      	push	{r7}
 800b526:	b087      	sub	sp, #28
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	4613      	mov	r3, r2
 800b530:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b536:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	371c      	adds	r7, #28
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
	...

0800b548 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	4603      	mov	r3, r0
 800b550:	6039      	str	r1, [r7, #0]
 800b552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	2212      	movs	r2, #18
 800b558:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b55a:	4b03      	ldr	r3, [pc, #12]	@ (800b568 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr
 800b568:	200000d0 	.word	0x200000d0

0800b56c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	4603      	mov	r3, r0
 800b574:	6039      	str	r1, [r7, #0]
 800b576:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	2204      	movs	r2, #4
 800b57c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b57e:	4b03      	ldr	r3, [pc, #12]	@ (800b58c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b580:	4618      	mov	r0, r3
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr
 800b58c:	200000e4 	.word	0x200000e4

0800b590 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	4603      	mov	r3, r0
 800b598:	6039      	str	r1, [r7, #0]
 800b59a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b59c:	79fb      	ldrb	r3, [r7, #7]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d105      	bne.n	800b5ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	4907      	ldr	r1, [pc, #28]	@ (800b5c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5a6:	4808      	ldr	r0, [pc, #32]	@ (800b5c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5a8:	f7ff fd9c 	bl	800b0e4 <USBD_GetString>
 800b5ac:	e004      	b.n	800b5b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5ae:	683a      	ldr	r2, [r7, #0]
 800b5b0:	4904      	ldr	r1, [pc, #16]	@ (800b5c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5b2:	4805      	ldr	r0, [pc, #20]	@ (800b5c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5b4:	f7ff fd96 	bl	800b0e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5b8:	4b02      	ldr	r3, [pc, #8]	@ (800b5c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	200017ac 	.word	0x200017ac
 800b5c8:	0800ef10 	.word	0x0800ef10

0800b5cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	6039      	str	r1, [r7, #0]
 800b5d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b5d8:	683a      	ldr	r2, [r7, #0]
 800b5da:	4904      	ldr	r1, [pc, #16]	@ (800b5ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b5dc:	4804      	ldr	r0, [pc, #16]	@ (800b5f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b5de:	f7ff fd81 	bl	800b0e4 <USBD_GetString>
  return USBD_StrDesc;
 800b5e2:	4b02      	ldr	r3, [pc, #8]	@ (800b5ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	200017ac 	.word	0x200017ac
 800b5f0:	0800ef28 	.word	0x0800ef28

0800b5f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	6039      	str	r1, [r7, #0]
 800b5fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	221a      	movs	r2, #26
 800b604:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b606:	f000 f843 	bl	800b690 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b60a:	4b02      	ldr	r3, [pc, #8]	@ (800b614 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	200000e8 	.word	0x200000e8

0800b618 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	4603      	mov	r3, r0
 800b620:	6039      	str	r1, [r7, #0]
 800b622:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b624:	79fb      	ldrb	r3, [r7, #7]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d105      	bne.n	800b636 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	4907      	ldr	r1, [pc, #28]	@ (800b64c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b62e:	4808      	ldr	r0, [pc, #32]	@ (800b650 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b630:	f7ff fd58 	bl	800b0e4 <USBD_GetString>
 800b634:	e004      	b.n	800b640 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b636:	683a      	ldr	r2, [r7, #0]
 800b638:	4904      	ldr	r1, [pc, #16]	@ (800b64c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b63a:	4805      	ldr	r0, [pc, #20]	@ (800b650 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b63c:	f7ff fd52 	bl	800b0e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b640:	4b02      	ldr	r3, [pc, #8]	@ (800b64c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b642:	4618      	mov	r0, r3
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	200017ac 	.word	0x200017ac
 800b650:	0800ef3c 	.word	0x0800ef3c

0800b654 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4603      	mov	r3, r0
 800b65c:	6039      	str	r1, [r7, #0]
 800b65e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b660:	79fb      	ldrb	r3, [r7, #7]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d105      	bne.n	800b672 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b666:	683a      	ldr	r2, [r7, #0]
 800b668:	4907      	ldr	r1, [pc, #28]	@ (800b688 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b66a:	4808      	ldr	r0, [pc, #32]	@ (800b68c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b66c:	f7ff fd3a 	bl	800b0e4 <USBD_GetString>
 800b670:	e004      	b.n	800b67c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	4904      	ldr	r1, [pc, #16]	@ (800b688 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b676:	4805      	ldr	r0, [pc, #20]	@ (800b68c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b678:	f7ff fd34 	bl	800b0e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b67c:	4b02      	ldr	r3, [pc, #8]	@ (800b688 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	200017ac 	.word	0x200017ac
 800b68c:	0800ef48 	.word	0x0800ef48

0800b690 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b696:	4b0f      	ldr	r3, [pc, #60]	@ (800b6d4 <Get_SerialNum+0x44>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b69c:	4b0e      	ldr	r3, [pc, #56]	@ (800b6d8 <Get_SerialNum+0x48>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b6a2:	4b0e      	ldr	r3, [pc, #56]	@ (800b6dc <Get_SerialNum+0x4c>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d009      	beq.n	800b6ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b6b6:	2208      	movs	r2, #8
 800b6b8:	4909      	ldr	r1, [pc, #36]	@ (800b6e0 <Get_SerialNum+0x50>)
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f000 f814 	bl	800b6e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b6c0:	2204      	movs	r2, #4
 800b6c2:	4908      	ldr	r1, [pc, #32]	@ (800b6e4 <Get_SerialNum+0x54>)
 800b6c4:	68b8      	ldr	r0, [r7, #8]
 800b6c6:	f000 f80f 	bl	800b6e8 <IntToUnicode>
  }
}
 800b6ca:	bf00      	nop
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	1fff7a10 	.word	0x1fff7a10
 800b6d8:	1fff7a14 	.word	0x1fff7a14
 800b6dc:	1fff7a18 	.word	0x1fff7a18
 800b6e0:	200000ea 	.word	0x200000ea
 800b6e4:	200000fa 	.word	0x200000fa

0800b6e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b087      	sub	sp, #28
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	75fb      	strb	r3, [r7, #23]
 800b6fe:	e027      	b.n	800b750 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	0f1b      	lsrs	r3, r3, #28
 800b704:	2b09      	cmp	r3, #9
 800b706:	d80b      	bhi.n	800b720 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	0f1b      	lsrs	r3, r3, #28
 800b70c:	b2da      	uxtb	r2, r3
 800b70e:	7dfb      	ldrb	r3, [r7, #23]
 800b710:	005b      	lsls	r3, r3, #1
 800b712:	4619      	mov	r1, r3
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	440b      	add	r3, r1
 800b718:	3230      	adds	r2, #48	@ 0x30
 800b71a:	b2d2      	uxtb	r2, r2
 800b71c:	701a      	strb	r2, [r3, #0]
 800b71e:	e00a      	b.n	800b736 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	0f1b      	lsrs	r3, r3, #28
 800b724:	b2da      	uxtb	r2, r3
 800b726:	7dfb      	ldrb	r3, [r7, #23]
 800b728:	005b      	lsls	r3, r3, #1
 800b72a:	4619      	mov	r1, r3
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	440b      	add	r3, r1
 800b730:	3237      	adds	r2, #55	@ 0x37
 800b732:	b2d2      	uxtb	r2, r2
 800b734:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	011b      	lsls	r3, r3, #4
 800b73a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b73c:	7dfb      	ldrb	r3, [r7, #23]
 800b73e:	005b      	lsls	r3, r3, #1
 800b740:	3301      	adds	r3, #1
 800b742:	68ba      	ldr	r2, [r7, #8]
 800b744:	4413      	add	r3, r2
 800b746:	2200      	movs	r2, #0
 800b748:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b74a:	7dfb      	ldrb	r3, [r7, #23]
 800b74c:	3301      	adds	r3, #1
 800b74e:	75fb      	strb	r3, [r7, #23]
 800b750:	7dfa      	ldrb	r2, [r7, #23]
 800b752:	79fb      	ldrb	r3, [r7, #7]
 800b754:	429a      	cmp	r2, r3
 800b756:	d3d3      	bcc.n	800b700 <IntToUnicode+0x18>
  }
}
 800b758:	bf00      	nop
 800b75a:	bf00      	nop
 800b75c:	371c      	adds	r7, #28
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
	...

0800b768 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b08a      	sub	sp, #40	@ 0x28
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b770:	f107 0314 	add.w	r3, r7, #20
 800b774:	2200      	movs	r2, #0
 800b776:	601a      	str	r2, [r3, #0]
 800b778:	605a      	str	r2, [r3, #4]
 800b77a:	609a      	str	r2, [r3, #8]
 800b77c:	60da      	str	r2, [r3, #12]
 800b77e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b788:	d13a      	bne.n	800b800 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b78a:	2300      	movs	r3, #0
 800b78c:	613b      	str	r3, [r7, #16]
 800b78e:	4b1e      	ldr	r3, [pc, #120]	@ (800b808 <HAL_PCD_MspInit+0xa0>)
 800b790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b792:	4a1d      	ldr	r2, [pc, #116]	@ (800b808 <HAL_PCD_MspInit+0xa0>)
 800b794:	f043 0301 	orr.w	r3, r3, #1
 800b798:	6313      	str	r3, [r2, #48]	@ 0x30
 800b79a:	4b1b      	ldr	r3, [pc, #108]	@ (800b808 <HAL_PCD_MspInit+0xa0>)
 800b79c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b79e:	f003 0301 	and.w	r3, r3, #1
 800b7a2:	613b      	str	r3, [r7, #16]
 800b7a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b7a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b7aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7b4:	2303      	movs	r3, #3
 800b7b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b7b8:	230a      	movs	r3, #10
 800b7ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7bc:	f107 0314 	add.w	r3, r7, #20
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	4812      	ldr	r0, [pc, #72]	@ (800b80c <HAL_PCD_MspInit+0xa4>)
 800b7c4:	f7f8 f8da 	bl	800397c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b7c8:	4b0f      	ldr	r3, [pc, #60]	@ (800b808 <HAL_PCD_MspInit+0xa0>)
 800b7ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7cc:	4a0e      	ldr	r2, [pc, #56]	@ (800b808 <HAL_PCD_MspInit+0xa0>)
 800b7ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7d2:	6353      	str	r3, [r2, #52]	@ 0x34
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	4b0b      	ldr	r3, [pc, #44]	@ (800b808 <HAL_PCD_MspInit+0xa0>)
 800b7da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7dc:	4a0a      	ldr	r2, [pc, #40]	@ (800b808 <HAL_PCD_MspInit+0xa0>)
 800b7de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b7e2:	6453      	str	r3, [r2, #68]	@ 0x44
 800b7e4:	4b08      	ldr	r3, [pc, #32]	@ (800b808 <HAL_PCD_MspInit+0xa0>)
 800b7e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b7ec:	60fb      	str	r3, [r7, #12]
 800b7ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	2043      	movs	r0, #67	@ 0x43
 800b7f6:	f7f8 f88a 	bl	800390e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b7fa:	2043      	movs	r0, #67	@ 0x43
 800b7fc:	f7f8 f8a3 	bl	8003946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b800:	bf00      	nop
 800b802:	3728      	adds	r7, #40	@ 0x28
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	40023800 	.word	0x40023800
 800b80c:	40020000 	.word	0x40020000

0800b810 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b824:	4619      	mov	r1, r3
 800b826:	4610      	mov	r0, r2
 800b828:	f7fe faf9 	bl	8009e1e <USBD_LL_SetupStage>
}
 800b82c:	bf00      	nop
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	460b      	mov	r3, r1
 800b83e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b846:	78fa      	ldrb	r2, [r7, #3]
 800b848:	6879      	ldr	r1, [r7, #4]
 800b84a:	4613      	mov	r3, r2
 800b84c:	00db      	lsls	r3, r3, #3
 800b84e:	4413      	add	r3, r2
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	440b      	add	r3, r1
 800b854:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	78fb      	ldrb	r3, [r7, #3]
 800b85c:	4619      	mov	r1, r3
 800b85e:	f7fe fb33 	bl	8009ec8 <USBD_LL_DataOutStage>
}
 800b862:	bf00      	nop
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	460b      	mov	r3, r1
 800b874:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b87c:	78fa      	ldrb	r2, [r7, #3]
 800b87e:	6879      	ldr	r1, [r7, #4]
 800b880:	4613      	mov	r3, r2
 800b882:	00db      	lsls	r3, r3, #3
 800b884:	4413      	add	r3, r2
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	440b      	add	r3, r1
 800b88a:	3320      	adds	r3, #32
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	78fb      	ldrb	r3, [r7, #3]
 800b890:	4619      	mov	r1, r3
 800b892:	f7fe fbcc 	bl	800a02e <USBD_LL_DataInStage>
}
 800b896:	bf00      	nop
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7fe fd06 	bl	800a2be <USBD_LL_SOF>
}
 800b8b2:	bf00      	nop
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b084      	sub	sp, #16
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	79db      	ldrb	r3, [r3, #7]
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	d001      	beq.n	800b8d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b8ce:	f7f5 fea5 	bl	800161c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b8d8:	7bfa      	ldrb	r2, [r7, #15]
 800b8da:	4611      	mov	r1, r2
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fe fcaa 	bl	800a236 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7fe fc52 	bl	800a192 <USBD_LL_Reset>
}
 800b8ee:	bf00      	nop
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
	...

0800b8f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b906:	4618      	mov	r0, r3
 800b908:	f7fe fca5 	bl	800a256 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	6812      	ldr	r2, [r2, #0]
 800b91a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b91e:	f043 0301 	orr.w	r3, r3, #1
 800b922:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	7adb      	ldrb	r3, [r3, #11]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d005      	beq.n	800b938 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b92c:	4b04      	ldr	r3, [pc, #16]	@ (800b940 <HAL_PCD_SuspendCallback+0x48>)
 800b92e:	691b      	ldr	r3, [r3, #16]
 800b930:	4a03      	ldr	r2, [pc, #12]	@ (800b940 <HAL_PCD_SuspendCallback+0x48>)
 800b932:	f043 0306 	orr.w	r3, r3, #6
 800b936:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b938:	bf00      	nop
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	e000ed00 	.word	0xe000ed00

0800b944 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b952:	4618      	mov	r0, r3
 800b954:	f7fe fc9b 	bl	800a28e <USBD_LL_Resume>
}
 800b958:	bf00      	nop
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	460b      	mov	r3, r1
 800b96a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b972:	78fa      	ldrb	r2, [r7, #3]
 800b974:	4611      	mov	r1, r2
 800b976:	4618      	mov	r0, r3
 800b978:	f7fe fcf3 	bl	800a362 <USBD_LL_IsoOUTIncomplete>
}
 800b97c:	bf00      	nop
 800b97e:	3708      	adds	r7, #8
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	460b      	mov	r3, r1
 800b98e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b996:	78fa      	ldrb	r2, [r7, #3]
 800b998:	4611      	mov	r1, r2
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fe fcaf 	bl	800a2fe <USBD_LL_IsoINIncomplete>
}
 800b9a0:	bf00      	nop
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fe fd05 	bl	800a3c6 <USBD_LL_DevConnected>
}
 800b9bc:	bf00      	nop
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fe fd02 	bl	800a3dc <USBD_LL_DevDisconnected>
}
 800b9d8:	bf00      	nop
 800b9da:	3708      	adds	r7, #8
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d13c      	bne.n	800ba6a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b9f0:	4a20      	ldr	r2, [pc, #128]	@ (800ba74 <USBD_LL_Init+0x94>)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	4a1e      	ldr	r2, [pc, #120]	@ (800ba74 <USBD_LL_Init+0x94>)
 800b9fc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ba00:	4b1c      	ldr	r3, [pc, #112]	@ (800ba74 <USBD_LL_Init+0x94>)
 800ba02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ba06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ba08:	4b1a      	ldr	r3, [pc, #104]	@ (800ba74 <USBD_LL_Init+0x94>)
 800ba0a:	2204      	movs	r2, #4
 800ba0c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ba0e:	4b19      	ldr	r3, [pc, #100]	@ (800ba74 <USBD_LL_Init+0x94>)
 800ba10:	2202      	movs	r2, #2
 800ba12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ba14:	4b17      	ldr	r3, [pc, #92]	@ (800ba74 <USBD_LL_Init+0x94>)
 800ba16:	2200      	movs	r2, #0
 800ba18:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba1a:	4b16      	ldr	r3, [pc, #88]	@ (800ba74 <USBD_LL_Init+0x94>)
 800ba1c:	2202      	movs	r2, #2
 800ba1e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ba20:	4b14      	ldr	r3, [pc, #80]	@ (800ba74 <USBD_LL_Init+0x94>)
 800ba22:	2200      	movs	r2, #0
 800ba24:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ba26:	4b13      	ldr	r3, [pc, #76]	@ (800ba74 <USBD_LL_Init+0x94>)
 800ba28:	2200      	movs	r2, #0
 800ba2a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ba2c:	4b11      	ldr	r3, [pc, #68]	@ (800ba74 <USBD_LL_Init+0x94>)
 800ba2e:	2200      	movs	r2, #0
 800ba30:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ba32:	4b10      	ldr	r3, [pc, #64]	@ (800ba74 <USBD_LL_Init+0x94>)
 800ba34:	2200      	movs	r2, #0
 800ba36:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ba38:	4b0e      	ldr	r3, [pc, #56]	@ (800ba74 <USBD_LL_Init+0x94>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ba3e:	480d      	ldr	r0, [pc, #52]	@ (800ba74 <USBD_LL_Init+0x94>)
 800ba40:	f7f9 f94e 	bl	8004ce0 <HAL_PCD_Init>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d001      	beq.n	800ba4e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ba4a:	f7f5 fde7 	bl	800161c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ba4e:	2180      	movs	r1, #128	@ 0x80
 800ba50:	4808      	ldr	r0, [pc, #32]	@ (800ba74 <USBD_LL_Init+0x94>)
 800ba52:	f7fa fb7a 	bl	800614a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ba56:	2240      	movs	r2, #64	@ 0x40
 800ba58:	2100      	movs	r1, #0
 800ba5a:	4806      	ldr	r0, [pc, #24]	@ (800ba74 <USBD_LL_Init+0x94>)
 800ba5c:	f7fa fb2e 	bl	80060bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ba60:	2280      	movs	r2, #128	@ 0x80
 800ba62:	2101      	movs	r1, #1
 800ba64:	4803      	ldr	r0, [pc, #12]	@ (800ba74 <USBD_LL_Init+0x94>)
 800ba66:	f7fa fb29 	bl	80060bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3708      	adds	r7, #8
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	200019ac 	.word	0x200019ac

0800ba78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba80:	2300      	movs	r3, #0
 800ba82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba84:	2300      	movs	r3, #0
 800ba86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7f9 fa35 	bl	8004efe <HAL_PCD_Start>
 800ba94:	4603      	mov	r3, r0
 800ba96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba98:	7bfb      	ldrb	r3, [r7, #15]
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f000 f942 	bl	800bd24 <USBD_Get_USB_Status>
 800baa0:	4603      	mov	r3, r0
 800baa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baa4:	7bbb      	ldrb	r3, [r7, #14]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b084      	sub	sp, #16
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
 800bab6:	4608      	mov	r0, r1
 800bab8:	4611      	mov	r1, r2
 800baba:	461a      	mov	r2, r3
 800babc:	4603      	mov	r3, r0
 800babe:	70fb      	strb	r3, [r7, #3]
 800bac0:	460b      	mov	r3, r1
 800bac2:	70bb      	strb	r3, [r7, #2]
 800bac4:	4613      	mov	r3, r2
 800bac6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bac8:	2300      	movs	r3, #0
 800baca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bacc:	2300      	movs	r3, #0
 800bace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bad6:	78bb      	ldrb	r3, [r7, #2]
 800bad8:	883a      	ldrh	r2, [r7, #0]
 800bada:	78f9      	ldrb	r1, [r7, #3]
 800badc:	f7f9 ff09 	bl	80058f2 <HAL_PCD_EP_Open>
 800bae0:	4603      	mov	r3, r0
 800bae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bae4:	7bfb      	ldrb	r3, [r7, #15]
 800bae6:	4618      	mov	r0, r3
 800bae8:	f000 f91c 	bl	800bd24 <USBD_Get_USB_Status>
 800baec:	4603      	mov	r3, r0
 800baee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b084      	sub	sp, #16
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	460b      	mov	r3, r1
 800bb04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb06:	2300      	movs	r3, #0
 800bb08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb14:	78fa      	ldrb	r2, [r7, #3]
 800bb16:	4611      	mov	r1, r2
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7f9 ff54 	bl	80059c6 <HAL_PCD_EP_Close>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb22:	7bfb      	ldrb	r3, [r7, #15]
 800bb24:	4618      	mov	r0, r3
 800bb26:	f000 f8fd 	bl	800bd24 <USBD_Get_USB_Status>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b084      	sub	sp, #16
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	460b      	mov	r3, r1
 800bb42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb44:	2300      	movs	r3, #0
 800bb46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb52:	78fa      	ldrb	r2, [r7, #3]
 800bb54:	4611      	mov	r1, r2
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fa f80c 	bl	8005b74 <HAL_PCD_EP_SetStall>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb60:	7bfb      	ldrb	r3, [r7, #15]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f000 f8de 	bl	800bd24 <USBD_Get_USB_Status>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b084      	sub	sp, #16
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	460b      	mov	r3, r1
 800bb80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb82:	2300      	movs	r3, #0
 800bb84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb86:	2300      	movs	r3, #0
 800bb88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb90:	78fa      	ldrb	r2, [r7, #3]
 800bb92:	4611      	mov	r1, r2
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fa f850 	bl	8005c3a <HAL_PCD_EP_ClrStall>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb9e:	7bfb      	ldrb	r3, [r7, #15]
 800bba0:	4618      	mov	r0, r3
 800bba2:	f000 f8bf 	bl	800bd24 <USBD_Get_USB_Status>
 800bba6:	4603      	mov	r3, r0
 800bba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3710      	adds	r7, #16
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b085      	sub	sp, #20
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bbc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bbc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	da0b      	bge.n	800bbe8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bbd0:	78fb      	ldrb	r3, [r7, #3]
 800bbd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bbd6:	68f9      	ldr	r1, [r7, #12]
 800bbd8:	4613      	mov	r3, r2
 800bbda:	00db      	lsls	r3, r3, #3
 800bbdc:	4413      	add	r3, r2
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	440b      	add	r3, r1
 800bbe2:	3316      	adds	r3, #22
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	e00b      	b.n	800bc00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bbe8:	78fb      	ldrb	r3, [r7, #3]
 800bbea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bbee:	68f9      	ldr	r1, [r7, #12]
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	00db      	lsls	r3, r3, #3
 800bbf4:	4413      	add	r3, r2
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	440b      	add	r3, r1
 800bbfa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bbfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3714      	adds	r7, #20
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	460b      	mov	r3, r1
 800bc16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bc26:	78fa      	ldrb	r2, [r7, #3]
 800bc28:	4611      	mov	r1, r2
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7f9 fe3d 	bl	80058aa <HAL_PCD_SetAddress>
 800bc30:	4603      	mov	r3, r0
 800bc32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc34:	7bfb      	ldrb	r3, [r7, #15]
 800bc36:	4618      	mov	r0, r3
 800bc38:	f000 f874 	bl	800bd24 <USBD_Get_USB_Status>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc40:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3710      	adds	r7, #16
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}

0800bc4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc4a:	b580      	push	{r7, lr}
 800bc4c:	b086      	sub	sp, #24
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	60f8      	str	r0, [r7, #12]
 800bc52:	607a      	str	r2, [r7, #4]
 800bc54:	603b      	str	r3, [r7, #0]
 800bc56:	460b      	mov	r3, r1
 800bc58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bc68:	7af9      	ldrb	r1, [r7, #11]
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	f7f9 ff47 	bl	8005b00 <HAL_PCD_EP_Transmit>
 800bc72:	4603      	mov	r3, r0
 800bc74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc76:	7dfb      	ldrb	r3, [r7, #23]
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f000 f853 	bl	800bd24 <USBD_Get_USB_Status>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc82:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3718      	adds	r7, #24
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b086      	sub	sp, #24
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	607a      	str	r2, [r7, #4]
 800bc96:	603b      	str	r3, [r7, #0]
 800bc98:	460b      	mov	r3, r1
 800bc9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bca0:	2300      	movs	r3, #0
 800bca2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bcaa:	7af9      	ldrb	r1, [r7, #11]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	f7f9 fed3 	bl	8005a5a <HAL_PCD_EP_Receive>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcb8:	7dfb      	ldrb	r3, [r7, #23]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f000 f832 	bl	800bd24 <USBD_Get_USB_Status>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bcc4:	7dbb      	ldrb	r3, [r7, #22]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3718      	adds	r7, #24
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b082      	sub	sp, #8
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bce0:	78fa      	ldrb	r2, [r7, #3]
 800bce2:	4611      	mov	r1, r2
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7f9 fef3 	bl	8005ad0 <HAL_PCD_EP_GetRxCount>
 800bcea:	4603      	mov	r3, r0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3708      	adds	r7, #8
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bcfc:	4b03      	ldr	r3, [pc, #12]	@ (800bd0c <USBD_static_malloc+0x18>)
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	370c      	adds	r7, #12
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	20001e90 	.word	0x20001e90

0800bd10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]

}
 800bd18:	bf00      	nop
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b085      	sub	sp, #20
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd32:	79fb      	ldrb	r3, [r7, #7]
 800bd34:	2b03      	cmp	r3, #3
 800bd36:	d817      	bhi.n	800bd68 <USBD_Get_USB_Status+0x44>
 800bd38:	a201      	add	r2, pc, #4	@ (adr r2, 800bd40 <USBD_Get_USB_Status+0x1c>)
 800bd3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd3e:	bf00      	nop
 800bd40:	0800bd51 	.word	0x0800bd51
 800bd44:	0800bd57 	.word	0x0800bd57
 800bd48:	0800bd5d 	.word	0x0800bd5d
 800bd4c:	0800bd63 	.word	0x0800bd63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bd50:	2300      	movs	r3, #0
 800bd52:	73fb      	strb	r3, [r7, #15]
    break;
 800bd54:	e00b      	b.n	800bd6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd56:	2303      	movs	r3, #3
 800bd58:	73fb      	strb	r3, [r7, #15]
    break;
 800bd5a:	e008      	b.n	800bd6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd60:	e005      	b.n	800bd6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd62:	2303      	movs	r3, #3
 800bd64:	73fb      	strb	r3, [r7, #15]
    break;
 800bd66:	e002      	b.n	800bd6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bd68:	2303      	movs	r3, #3
 800bd6a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd6c:	bf00      	nop
  }
  return usb_status;
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3714      	adds	r7, #20
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <__cvt>:
 800bd7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd80:	ec57 6b10 	vmov	r6, r7, d0
 800bd84:	2f00      	cmp	r7, #0
 800bd86:	460c      	mov	r4, r1
 800bd88:	4619      	mov	r1, r3
 800bd8a:	463b      	mov	r3, r7
 800bd8c:	bfbb      	ittet	lt
 800bd8e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bd92:	461f      	movlt	r7, r3
 800bd94:	2300      	movge	r3, #0
 800bd96:	232d      	movlt	r3, #45	@ 0x2d
 800bd98:	700b      	strb	r3, [r1, #0]
 800bd9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd9c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bda0:	4691      	mov	r9, r2
 800bda2:	f023 0820 	bic.w	r8, r3, #32
 800bda6:	bfbc      	itt	lt
 800bda8:	4632      	movlt	r2, r6
 800bdaa:	4616      	movlt	r6, r2
 800bdac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bdb0:	d005      	beq.n	800bdbe <__cvt+0x42>
 800bdb2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bdb6:	d100      	bne.n	800bdba <__cvt+0x3e>
 800bdb8:	3401      	adds	r4, #1
 800bdba:	2102      	movs	r1, #2
 800bdbc:	e000      	b.n	800bdc0 <__cvt+0x44>
 800bdbe:	2103      	movs	r1, #3
 800bdc0:	ab03      	add	r3, sp, #12
 800bdc2:	9301      	str	r3, [sp, #4]
 800bdc4:	ab02      	add	r3, sp, #8
 800bdc6:	9300      	str	r3, [sp, #0]
 800bdc8:	ec47 6b10 	vmov	d0, r6, r7
 800bdcc:	4653      	mov	r3, sl
 800bdce:	4622      	mov	r2, r4
 800bdd0:	f000 ff86 	bl	800cce0 <_dtoa_r>
 800bdd4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bdd8:	4605      	mov	r5, r0
 800bdda:	d119      	bne.n	800be10 <__cvt+0x94>
 800bddc:	f019 0f01 	tst.w	r9, #1
 800bde0:	d00e      	beq.n	800be00 <__cvt+0x84>
 800bde2:	eb00 0904 	add.w	r9, r0, r4
 800bde6:	2200      	movs	r2, #0
 800bde8:	2300      	movs	r3, #0
 800bdea:	4630      	mov	r0, r6
 800bdec:	4639      	mov	r1, r7
 800bdee:	f7f4 fe73 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdf2:	b108      	cbz	r0, 800bdf8 <__cvt+0x7c>
 800bdf4:	f8cd 900c 	str.w	r9, [sp, #12]
 800bdf8:	2230      	movs	r2, #48	@ 0x30
 800bdfa:	9b03      	ldr	r3, [sp, #12]
 800bdfc:	454b      	cmp	r3, r9
 800bdfe:	d31e      	bcc.n	800be3e <__cvt+0xc2>
 800be00:	9b03      	ldr	r3, [sp, #12]
 800be02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be04:	1b5b      	subs	r3, r3, r5
 800be06:	4628      	mov	r0, r5
 800be08:	6013      	str	r3, [r2, #0]
 800be0a:	b004      	add	sp, #16
 800be0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800be14:	eb00 0904 	add.w	r9, r0, r4
 800be18:	d1e5      	bne.n	800bde6 <__cvt+0x6a>
 800be1a:	7803      	ldrb	r3, [r0, #0]
 800be1c:	2b30      	cmp	r3, #48	@ 0x30
 800be1e:	d10a      	bne.n	800be36 <__cvt+0xba>
 800be20:	2200      	movs	r2, #0
 800be22:	2300      	movs	r3, #0
 800be24:	4630      	mov	r0, r6
 800be26:	4639      	mov	r1, r7
 800be28:	f7f4 fe56 	bl	8000ad8 <__aeabi_dcmpeq>
 800be2c:	b918      	cbnz	r0, 800be36 <__cvt+0xba>
 800be2e:	f1c4 0401 	rsb	r4, r4, #1
 800be32:	f8ca 4000 	str.w	r4, [sl]
 800be36:	f8da 3000 	ldr.w	r3, [sl]
 800be3a:	4499      	add	r9, r3
 800be3c:	e7d3      	b.n	800bde6 <__cvt+0x6a>
 800be3e:	1c59      	adds	r1, r3, #1
 800be40:	9103      	str	r1, [sp, #12]
 800be42:	701a      	strb	r2, [r3, #0]
 800be44:	e7d9      	b.n	800bdfa <__cvt+0x7e>

0800be46 <__exponent>:
 800be46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be48:	2900      	cmp	r1, #0
 800be4a:	bfba      	itte	lt
 800be4c:	4249      	neglt	r1, r1
 800be4e:	232d      	movlt	r3, #45	@ 0x2d
 800be50:	232b      	movge	r3, #43	@ 0x2b
 800be52:	2909      	cmp	r1, #9
 800be54:	7002      	strb	r2, [r0, #0]
 800be56:	7043      	strb	r3, [r0, #1]
 800be58:	dd29      	ble.n	800beae <__exponent+0x68>
 800be5a:	f10d 0307 	add.w	r3, sp, #7
 800be5e:	461d      	mov	r5, r3
 800be60:	270a      	movs	r7, #10
 800be62:	461a      	mov	r2, r3
 800be64:	fbb1 f6f7 	udiv	r6, r1, r7
 800be68:	fb07 1416 	mls	r4, r7, r6, r1
 800be6c:	3430      	adds	r4, #48	@ 0x30
 800be6e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800be72:	460c      	mov	r4, r1
 800be74:	2c63      	cmp	r4, #99	@ 0x63
 800be76:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800be7a:	4631      	mov	r1, r6
 800be7c:	dcf1      	bgt.n	800be62 <__exponent+0x1c>
 800be7e:	3130      	adds	r1, #48	@ 0x30
 800be80:	1e94      	subs	r4, r2, #2
 800be82:	f803 1c01 	strb.w	r1, [r3, #-1]
 800be86:	1c41      	adds	r1, r0, #1
 800be88:	4623      	mov	r3, r4
 800be8a:	42ab      	cmp	r3, r5
 800be8c:	d30a      	bcc.n	800bea4 <__exponent+0x5e>
 800be8e:	f10d 0309 	add.w	r3, sp, #9
 800be92:	1a9b      	subs	r3, r3, r2
 800be94:	42ac      	cmp	r4, r5
 800be96:	bf88      	it	hi
 800be98:	2300      	movhi	r3, #0
 800be9a:	3302      	adds	r3, #2
 800be9c:	4403      	add	r3, r0
 800be9e:	1a18      	subs	r0, r3, r0
 800bea0:	b003      	add	sp, #12
 800bea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bea4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bea8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800beac:	e7ed      	b.n	800be8a <__exponent+0x44>
 800beae:	2330      	movs	r3, #48	@ 0x30
 800beb0:	3130      	adds	r1, #48	@ 0x30
 800beb2:	7083      	strb	r3, [r0, #2]
 800beb4:	70c1      	strb	r1, [r0, #3]
 800beb6:	1d03      	adds	r3, r0, #4
 800beb8:	e7f1      	b.n	800be9e <__exponent+0x58>
	...

0800bebc <_printf_float>:
 800bebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec0:	b08d      	sub	sp, #52	@ 0x34
 800bec2:	460c      	mov	r4, r1
 800bec4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bec8:	4616      	mov	r6, r2
 800beca:	461f      	mov	r7, r3
 800becc:	4605      	mov	r5, r0
 800bece:	f000 fdf9 	bl	800cac4 <_localeconv_r>
 800bed2:	6803      	ldr	r3, [r0, #0]
 800bed4:	9304      	str	r3, [sp, #16]
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7f4 f9d2 	bl	8000280 <strlen>
 800bedc:	2300      	movs	r3, #0
 800bede:	930a      	str	r3, [sp, #40]	@ 0x28
 800bee0:	f8d8 3000 	ldr.w	r3, [r8]
 800bee4:	9005      	str	r0, [sp, #20]
 800bee6:	3307      	adds	r3, #7
 800bee8:	f023 0307 	bic.w	r3, r3, #7
 800beec:	f103 0208 	add.w	r2, r3, #8
 800bef0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bef4:	f8d4 b000 	ldr.w	fp, [r4]
 800bef8:	f8c8 2000 	str.w	r2, [r8]
 800befc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf00:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bf04:	9307      	str	r3, [sp, #28]
 800bf06:	f8cd 8018 	str.w	r8, [sp, #24]
 800bf0a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bf0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf12:	4b9c      	ldr	r3, [pc, #624]	@ (800c184 <_printf_float+0x2c8>)
 800bf14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf18:	f7f4 fe10 	bl	8000b3c <__aeabi_dcmpun>
 800bf1c:	bb70      	cbnz	r0, 800bf7c <_printf_float+0xc0>
 800bf1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf22:	4b98      	ldr	r3, [pc, #608]	@ (800c184 <_printf_float+0x2c8>)
 800bf24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf28:	f7f4 fdea 	bl	8000b00 <__aeabi_dcmple>
 800bf2c:	bb30      	cbnz	r0, 800bf7c <_printf_float+0xc0>
 800bf2e:	2200      	movs	r2, #0
 800bf30:	2300      	movs	r3, #0
 800bf32:	4640      	mov	r0, r8
 800bf34:	4649      	mov	r1, r9
 800bf36:	f7f4 fdd9 	bl	8000aec <__aeabi_dcmplt>
 800bf3a:	b110      	cbz	r0, 800bf42 <_printf_float+0x86>
 800bf3c:	232d      	movs	r3, #45	@ 0x2d
 800bf3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf42:	4a91      	ldr	r2, [pc, #580]	@ (800c188 <_printf_float+0x2cc>)
 800bf44:	4b91      	ldr	r3, [pc, #580]	@ (800c18c <_printf_float+0x2d0>)
 800bf46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bf4a:	bf8c      	ite	hi
 800bf4c:	4690      	movhi	r8, r2
 800bf4e:	4698      	movls	r8, r3
 800bf50:	2303      	movs	r3, #3
 800bf52:	6123      	str	r3, [r4, #16]
 800bf54:	f02b 0304 	bic.w	r3, fp, #4
 800bf58:	6023      	str	r3, [r4, #0]
 800bf5a:	f04f 0900 	mov.w	r9, #0
 800bf5e:	9700      	str	r7, [sp, #0]
 800bf60:	4633      	mov	r3, r6
 800bf62:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bf64:	4621      	mov	r1, r4
 800bf66:	4628      	mov	r0, r5
 800bf68:	f000 f9d2 	bl	800c310 <_printf_common>
 800bf6c:	3001      	adds	r0, #1
 800bf6e:	f040 808d 	bne.w	800c08c <_printf_float+0x1d0>
 800bf72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf76:	b00d      	add	sp, #52	@ 0x34
 800bf78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf7c:	4642      	mov	r2, r8
 800bf7e:	464b      	mov	r3, r9
 800bf80:	4640      	mov	r0, r8
 800bf82:	4649      	mov	r1, r9
 800bf84:	f7f4 fdda 	bl	8000b3c <__aeabi_dcmpun>
 800bf88:	b140      	cbz	r0, 800bf9c <_printf_float+0xe0>
 800bf8a:	464b      	mov	r3, r9
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	bfbc      	itt	lt
 800bf90:	232d      	movlt	r3, #45	@ 0x2d
 800bf92:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bf96:	4a7e      	ldr	r2, [pc, #504]	@ (800c190 <_printf_float+0x2d4>)
 800bf98:	4b7e      	ldr	r3, [pc, #504]	@ (800c194 <_printf_float+0x2d8>)
 800bf9a:	e7d4      	b.n	800bf46 <_printf_float+0x8a>
 800bf9c:	6863      	ldr	r3, [r4, #4]
 800bf9e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bfa2:	9206      	str	r2, [sp, #24]
 800bfa4:	1c5a      	adds	r2, r3, #1
 800bfa6:	d13b      	bne.n	800c020 <_printf_float+0x164>
 800bfa8:	2306      	movs	r3, #6
 800bfaa:	6063      	str	r3, [r4, #4]
 800bfac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	6022      	str	r2, [r4, #0]
 800bfb4:	9303      	str	r3, [sp, #12]
 800bfb6:	ab0a      	add	r3, sp, #40	@ 0x28
 800bfb8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bfbc:	ab09      	add	r3, sp, #36	@ 0x24
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	6861      	ldr	r1, [r4, #4]
 800bfc2:	ec49 8b10 	vmov	d0, r8, r9
 800bfc6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bfca:	4628      	mov	r0, r5
 800bfcc:	f7ff fed6 	bl	800bd7c <__cvt>
 800bfd0:	9b06      	ldr	r3, [sp, #24]
 800bfd2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bfd4:	2b47      	cmp	r3, #71	@ 0x47
 800bfd6:	4680      	mov	r8, r0
 800bfd8:	d129      	bne.n	800c02e <_printf_float+0x172>
 800bfda:	1cc8      	adds	r0, r1, #3
 800bfdc:	db02      	blt.n	800bfe4 <_printf_float+0x128>
 800bfde:	6863      	ldr	r3, [r4, #4]
 800bfe0:	4299      	cmp	r1, r3
 800bfe2:	dd41      	ble.n	800c068 <_printf_float+0x1ac>
 800bfe4:	f1aa 0a02 	sub.w	sl, sl, #2
 800bfe8:	fa5f fa8a 	uxtb.w	sl, sl
 800bfec:	3901      	subs	r1, #1
 800bfee:	4652      	mov	r2, sl
 800bff0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bff4:	9109      	str	r1, [sp, #36]	@ 0x24
 800bff6:	f7ff ff26 	bl	800be46 <__exponent>
 800bffa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bffc:	1813      	adds	r3, r2, r0
 800bffe:	2a01      	cmp	r2, #1
 800c000:	4681      	mov	r9, r0
 800c002:	6123      	str	r3, [r4, #16]
 800c004:	dc02      	bgt.n	800c00c <_printf_float+0x150>
 800c006:	6822      	ldr	r2, [r4, #0]
 800c008:	07d2      	lsls	r2, r2, #31
 800c00a:	d501      	bpl.n	800c010 <_printf_float+0x154>
 800c00c:	3301      	adds	r3, #1
 800c00e:	6123      	str	r3, [r4, #16]
 800c010:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c014:	2b00      	cmp	r3, #0
 800c016:	d0a2      	beq.n	800bf5e <_printf_float+0xa2>
 800c018:	232d      	movs	r3, #45	@ 0x2d
 800c01a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c01e:	e79e      	b.n	800bf5e <_printf_float+0xa2>
 800c020:	9a06      	ldr	r2, [sp, #24]
 800c022:	2a47      	cmp	r2, #71	@ 0x47
 800c024:	d1c2      	bne.n	800bfac <_printf_float+0xf0>
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1c0      	bne.n	800bfac <_printf_float+0xf0>
 800c02a:	2301      	movs	r3, #1
 800c02c:	e7bd      	b.n	800bfaa <_printf_float+0xee>
 800c02e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c032:	d9db      	bls.n	800bfec <_printf_float+0x130>
 800c034:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c038:	d118      	bne.n	800c06c <_printf_float+0x1b0>
 800c03a:	2900      	cmp	r1, #0
 800c03c:	6863      	ldr	r3, [r4, #4]
 800c03e:	dd0b      	ble.n	800c058 <_printf_float+0x19c>
 800c040:	6121      	str	r1, [r4, #16]
 800c042:	b913      	cbnz	r3, 800c04a <_printf_float+0x18e>
 800c044:	6822      	ldr	r2, [r4, #0]
 800c046:	07d0      	lsls	r0, r2, #31
 800c048:	d502      	bpl.n	800c050 <_printf_float+0x194>
 800c04a:	3301      	adds	r3, #1
 800c04c:	440b      	add	r3, r1
 800c04e:	6123      	str	r3, [r4, #16]
 800c050:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c052:	f04f 0900 	mov.w	r9, #0
 800c056:	e7db      	b.n	800c010 <_printf_float+0x154>
 800c058:	b913      	cbnz	r3, 800c060 <_printf_float+0x1a4>
 800c05a:	6822      	ldr	r2, [r4, #0]
 800c05c:	07d2      	lsls	r2, r2, #31
 800c05e:	d501      	bpl.n	800c064 <_printf_float+0x1a8>
 800c060:	3302      	adds	r3, #2
 800c062:	e7f4      	b.n	800c04e <_printf_float+0x192>
 800c064:	2301      	movs	r3, #1
 800c066:	e7f2      	b.n	800c04e <_printf_float+0x192>
 800c068:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c06c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c06e:	4299      	cmp	r1, r3
 800c070:	db05      	blt.n	800c07e <_printf_float+0x1c2>
 800c072:	6823      	ldr	r3, [r4, #0]
 800c074:	6121      	str	r1, [r4, #16]
 800c076:	07d8      	lsls	r0, r3, #31
 800c078:	d5ea      	bpl.n	800c050 <_printf_float+0x194>
 800c07a:	1c4b      	adds	r3, r1, #1
 800c07c:	e7e7      	b.n	800c04e <_printf_float+0x192>
 800c07e:	2900      	cmp	r1, #0
 800c080:	bfd4      	ite	le
 800c082:	f1c1 0202 	rsble	r2, r1, #2
 800c086:	2201      	movgt	r2, #1
 800c088:	4413      	add	r3, r2
 800c08a:	e7e0      	b.n	800c04e <_printf_float+0x192>
 800c08c:	6823      	ldr	r3, [r4, #0]
 800c08e:	055a      	lsls	r2, r3, #21
 800c090:	d407      	bmi.n	800c0a2 <_printf_float+0x1e6>
 800c092:	6923      	ldr	r3, [r4, #16]
 800c094:	4642      	mov	r2, r8
 800c096:	4631      	mov	r1, r6
 800c098:	4628      	mov	r0, r5
 800c09a:	47b8      	blx	r7
 800c09c:	3001      	adds	r0, #1
 800c09e:	d12b      	bne.n	800c0f8 <_printf_float+0x23c>
 800c0a0:	e767      	b.n	800bf72 <_printf_float+0xb6>
 800c0a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c0a6:	f240 80dd 	bls.w	800c264 <_printf_float+0x3a8>
 800c0aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	f7f4 fd11 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	d033      	beq.n	800c122 <_printf_float+0x266>
 800c0ba:	4a37      	ldr	r2, [pc, #220]	@ (800c198 <_printf_float+0x2dc>)
 800c0bc:	2301      	movs	r3, #1
 800c0be:	4631      	mov	r1, r6
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	47b8      	blx	r7
 800c0c4:	3001      	adds	r0, #1
 800c0c6:	f43f af54 	beq.w	800bf72 <_printf_float+0xb6>
 800c0ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c0ce:	4543      	cmp	r3, r8
 800c0d0:	db02      	blt.n	800c0d8 <_printf_float+0x21c>
 800c0d2:	6823      	ldr	r3, [r4, #0]
 800c0d4:	07d8      	lsls	r0, r3, #31
 800c0d6:	d50f      	bpl.n	800c0f8 <_printf_float+0x23c>
 800c0d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0dc:	4631      	mov	r1, r6
 800c0de:	4628      	mov	r0, r5
 800c0e0:	47b8      	blx	r7
 800c0e2:	3001      	adds	r0, #1
 800c0e4:	f43f af45 	beq.w	800bf72 <_printf_float+0xb6>
 800c0e8:	f04f 0900 	mov.w	r9, #0
 800c0ec:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c0f0:	f104 0a1a 	add.w	sl, r4, #26
 800c0f4:	45c8      	cmp	r8, r9
 800c0f6:	dc09      	bgt.n	800c10c <_printf_float+0x250>
 800c0f8:	6823      	ldr	r3, [r4, #0]
 800c0fa:	079b      	lsls	r3, r3, #30
 800c0fc:	f100 8103 	bmi.w	800c306 <_printf_float+0x44a>
 800c100:	68e0      	ldr	r0, [r4, #12]
 800c102:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c104:	4298      	cmp	r0, r3
 800c106:	bfb8      	it	lt
 800c108:	4618      	movlt	r0, r3
 800c10a:	e734      	b.n	800bf76 <_printf_float+0xba>
 800c10c:	2301      	movs	r3, #1
 800c10e:	4652      	mov	r2, sl
 800c110:	4631      	mov	r1, r6
 800c112:	4628      	mov	r0, r5
 800c114:	47b8      	blx	r7
 800c116:	3001      	adds	r0, #1
 800c118:	f43f af2b 	beq.w	800bf72 <_printf_float+0xb6>
 800c11c:	f109 0901 	add.w	r9, r9, #1
 800c120:	e7e8      	b.n	800c0f4 <_printf_float+0x238>
 800c122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c124:	2b00      	cmp	r3, #0
 800c126:	dc39      	bgt.n	800c19c <_printf_float+0x2e0>
 800c128:	4a1b      	ldr	r2, [pc, #108]	@ (800c198 <_printf_float+0x2dc>)
 800c12a:	2301      	movs	r3, #1
 800c12c:	4631      	mov	r1, r6
 800c12e:	4628      	mov	r0, r5
 800c130:	47b8      	blx	r7
 800c132:	3001      	adds	r0, #1
 800c134:	f43f af1d 	beq.w	800bf72 <_printf_float+0xb6>
 800c138:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c13c:	ea59 0303 	orrs.w	r3, r9, r3
 800c140:	d102      	bne.n	800c148 <_printf_float+0x28c>
 800c142:	6823      	ldr	r3, [r4, #0]
 800c144:	07d9      	lsls	r1, r3, #31
 800c146:	d5d7      	bpl.n	800c0f8 <_printf_float+0x23c>
 800c148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c14c:	4631      	mov	r1, r6
 800c14e:	4628      	mov	r0, r5
 800c150:	47b8      	blx	r7
 800c152:	3001      	adds	r0, #1
 800c154:	f43f af0d 	beq.w	800bf72 <_printf_float+0xb6>
 800c158:	f04f 0a00 	mov.w	sl, #0
 800c15c:	f104 0b1a 	add.w	fp, r4, #26
 800c160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c162:	425b      	negs	r3, r3
 800c164:	4553      	cmp	r3, sl
 800c166:	dc01      	bgt.n	800c16c <_printf_float+0x2b0>
 800c168:	464b      	mov	r3, r9
 800c16a:	e793      	b.n	800c094 <_printf_float+0x1d8>
 800c16c:	2301      	movs	r3, #1
 800c16e:	465a      	mov	r2, fp
 800c170:	4631      	mov	r1, r6
 800c172:	4628      	mov	r0, r5
 800c174:	47b8      	blx	r7
 800c176:	3001      	adds	r0, #1
 800c178:	f43f aefb 	beq.w	800bf72 <_printf_float+0xb6>
 800c17c:	f10a 0a01 	add.w	sl, sl, #1
 800c180:	e7ee      	b.n	800c160 <_printf_float+0x2a4>
 800c182:	bf00      	nop
 800c184:	7fefffff 	.word	0x7fefffff
 800c188:	0800ef76 	.word	0x0800ef76
 800c18c:	0800ef72 	.word	0x0800ef72
 800c190:	0800ef7e 	.word	0x0800ef7e
 800c194:	0800ef7a 	.word	0x0800ef7a
 800c198:	0800ef82 	.word	0x0800ef82
 800c19c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c19e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c1a2:	4553      	cmp	r3, sl
 800c1a4:	bfa8      	it	ge
 800c1a6:	4653      	movge	r3, sl
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	4699      	mov	r9, r3
 800c1ac:	dc36      	bgt.n	800c21c <_printf_float+0x360>
 800c1ae:	f04f 0b00 	mov.w	fp, #0
 800c1b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1b6:	f104 021a 	add.w	r2, r4, #26
 800c1ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c1bc:	9306      	str	r3, [sp, #24]
 800c1be:	eba3 0309 	sub.w	r3, r3, r9
 800c1c2:	455b      	cmp	r3, fp
 800c1c4:	dc31      	bgt.n	800c22a <_printf_float+0x36e>
 800c1c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1c8:	459a      	cmp	sl, r3
 800c1ca:	dc3a      	bgt.n	800c242 <_printf_float+0x386>
 800c1cc:	6823      	ldr	r3, [r4, #0]
 800c1ce:	07da      	lsls	r2, r3, #31
 800c1d0:	d437      	bmi.n	800c242 <_printf_float+0x386>
 800c1d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1d4:	ebaa 0903 	sub.w	r9, sl, r3
 800c1d8:	9b06      	ldr	r3, [sp, #24]
 800c1da:	ebaa 0303 	sub.w	r3, sl, r3
 800c1de:	4599      	cmp	r9, r3
 800c1e0:	bfa8      	it	ge
 800c1e2:	4699      	movge	r9, r3
 800c1e4:	f1b9 0f00 	cmp.w	r9, #0
 800c1e8:	dc33      	bgt.n	800c252 <_printf_float+0x396>
 800c1ea:	f04f 0800 	mov.w	r8, #0
 800c1ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1f2:	f104 0b1a 	add.w	fp, r4, #26
 800c1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1f8:	ebaa 0303 	sub.w	r3, sl, r3
 800c1fc:	eba3 0309 	sub.w	r3, r3, r9
 800c200:	4543      	cmp	r3, r8
 800c202:	f77f af79 	ble.w	800c0f8 <_printf_float+0x23c>
 800c206:	2301      	movs	r3, #1
 800c208:	465a      	mov	r2, fp
 800c20a:	4631      	mov	r1, r6
 800c20c:	4628      	mov	r0, r5
 800c20e:	47b8      	blx	r7
 800c210:	3001      	adds	r0, #1
 800c212:	f43f aeae 	beq.w	800bf72 <_printf_float+0xb6>
 800c216:	f108 0801 	add.w	r8, r8, #1
 800c21a:	e7ec      	b.n	800c1f6 <_printf_float+0x33a>
 800c21c:	4642      	mov	r2, r8
 800c21e:	4631      	mov	r1, r6
 800c220:	4628      	mov	r0, r5
 800c222:	47b8      	blx	r7
 800c224:	3001      	adds	r0, #1
 800c226:	d1c2      	bne.n	800c1ae <_printf_float+0x2f2>
 800c228:	e6a3      	b.n	800bf72 <_printf_float+0xb6>
 800c22a:	2301      	movs	r3, #1
 800c22c:	4631      	mov	r1, r6
 800c22e:	4628      	mov	r0, r5
 800c230:	9206      	str	r2, [sp, #24]
 800c232:	47b8      	blx	r7
 800c234:	3001      	adds	r0, #1
 800c236:	f43f ae9c 	beq.w	800bf72 <_printf_float+0xb6>
 800c23a:	9a06      	ldr	r2, [sp, #24]
 800c23c:	f10b 0b01 	add.w	fp, fp, #1
 800c240:	e7bb      	b.n	800c1ba <_printf_float+0x2fe>
 800c242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c246:	4631      	mov	r1, r6
 800c248:	4628      	mov	r0, r5
 800c24a:	47b8      	blx	r7
 800c24c:	3001      	adds	r0, #1
 800c24e:	d1c0      	bne.n	800c1d2 <_printf_float+0x316>
 800c250:	e68f      	b.n	800bf72 <_printf_float+0xb6>
 800c252:	9a06      	ldr	r2, [sp, #24]
 800c254:	464b      	mov	r3, r9
 800c256:	4442      	add	r2, r8
 800c258:	4631      	mov	r1, r6
 800c25a:	4628      	mov	r0, r5
 800c25c:	47b8      	blx	r7
 800c25e:	3001      	adds	r0, #1
 800c260:	d1c3      	bne.n	800c1ea <_printf_float+0x32e>
 800c262:	e686      	b.n	800bf72 <_printf_float+0xb6>
 800c264:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c268:	f1ba 0f01 	cmp.w	sl, #1
 800c26c:	dc01      	bgt.n	800c272 <_printf_float+0x3b6>
 800c26e:	07db      	lsls	r3, r3, #31
 800c270:	d536      	bpl.n	800c2e0 <_printf_float+0x424>
 800c272:	2301      	movs	r3, #1
 800c274:	4642      	mov	r2, r8
 800c276:	4631      	mov	r1, r6
 800c278:	4628      	mov	r0, r5
 800c27a:	47b8      	blx	r7
 800c27c:	3001      	adds	r0, #1
 800c27e:	f43f ae78 	beq.w	800bf72 <_printf_float+0xb6>
 800c282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c286:	4631      	mov	r1, r6
 800c288:	4628      	mov	r0, r5
 800c28a:	47b8      	blx	r7
 800c28c:	3001      	adds	r0, #1
 800c28e:	f43f ae70 	beq.w	800bf72 <_printf_float+0xb6>
 800c292:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c296:	2200      	movs	r2, #0
 800c298:	2300      	movs	r3, #0
 800c29a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c29e:	f7f4 fc1b 	bl	8000ad8 <__aeabi_dcmpeq>
 800c2a2:	b9c0      	cbnz	r0, 800c2d6 <_printf_float+0x41a>
 800c2a4:	4653      	mov	r3, sl
 800c2a6:	f108 0201 	add.w	r2, r8, #1
 800c2aa:	4631      	mov	r1, r6
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	47b8      	blx	r7
 800c2b0:	3001      	adds	r0, #1
 800c2b2:	d10c      	bne.n	800c2ce <_printf_float+0x412>
 800c2b4:	e65d      	b.n	800bf72 <_printf_float+0xb6>
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	465a      	mov	r2, fp
 800c2ba:	4631      	mov	r1, r6
 800c2bc:	4628      	mov	r0, r5
 800c2be:	47b8      	blx	r7
 800c2c0:	3001      	adds	r0, #1
 800c2c2:	f43f ae56 	beq.w	800bf72 <_printf_float+0xb6>
 800c2c6:	f108 0801 	add.w	r8, r8, #1
 800c2ca:	45d0      	cmp	r8, sl
 800c2cc:	dbf3      	blt.n	800c2b6 <_printf_float+0x3fa>
 800c2ce:	464b      	mov	r3, r9
 800c2d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c2d4:	e6df      	b.n	800c096 <_printf_float+0x1da>
 800c2d6:	f04f 0800 	mov.w	r8, #0
 800c2da:	f104 0b1a 	add.w	fp, r4, #26
 800c2de:	e7f4      	b.n	800c2ca <_printf_float+0x40e>
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	4642      	mov	r2, r8
 800c2e4:	e7e1      	b.n	800c2aa <_printf_float+0x3ee>
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	464a      	mov	r2, r9
 800c2ea:	4631      	mov	r1, r6
 800c2ec:	4628      	mov	r0, r5
 800c2ee:	47b8      	blx	r7
 800c2f0:	3001      	adds	r0, #1
 800c2f2:	f43f ae3e 	beq.w	800bf72 <_printf_float+0xb6>
 800c2f6:	f108 0801 	add.w	r8, r8, #1
 800c2fa:	68e3      	ldr	r3, [r4, #12]
 800c2fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c2fe:	1a5b      	subs	r3, r3, r1
 800c300:	4543      	cmp	r3, r8
 800c302:	dcf0      	bgt.n	800c2e6 <_printf_float+0x42a>
 800c304:	e6fc      	b.n	800c100 <_printf_float+0x244>
 800c306:	f04f 0800 	mov.w	r8, #0
 800c30a:	f104 0919 	add.w	r9, r4, #25
 800c30e:	e7f4      	b.n	800c2fa <_printf_float+0x43e>

0800c310 <_printf_common>:
 800c310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c314:	4616      	mov	r6, r2
 800c316:	4698      	mov	r8, r3
 800c318:	688a      	ldr	r2, [r1, #8]
 800c31a:	690b      	ldr	r3, [r1, #16]
 800c31c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c320:	4293      	cmp	r3, r2
 800c322:	bfb8      	it	lt
 800c324:	4613      	movlt	r3, r2
 800c326:	6033      	str	r3, [r6, #0]
 800c328:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c32c:	4607      	mov	r7, r0
 800c32e:	460c      	mov	r4, r1
 800c330:	b10a      	cbz	r2, 800c336 <_printf_common+0x26>
 800c332:	3301      	adds	r3, #1
 800c334:	6033      	str	r3, [r6, #0]
 800c336:	6823      	ldr	r3, [r4, #0]
 800c338:	0699      	lsls	r1, r3, #26
 800c33a:	bf42      	ittt	mi
 800c33c:	6833      	ldrmi	r3, [r6, #0]
 800c33e:	3302      	addmi	r3, #2
 800c340:	6033      	strmi	r3, [r6, #0]
 800c342:	6825      	ldr	r5, [r4, #0]
 800c344:	f015 0506 	ands.w	r5, r5, #6
 800c348:	d106      	bne.n	800c358 <_printf_common+0x48>
 800c34a:	f104 0a19 	add.w	sl, r4, #25
 800c34e:	68e3      	ldr	r3, [r4, #12]
 800c350:	6832      	ldr	r2, [r6, #0]
 800c352:	1a9b      	subs	r3, r3, r2
 800c354:	42ab      	cmp	r3, r5
 800c356:	dc26      	bgt.n	800c3a6 <_printf_common+0x96>
 800c358:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c35c:	6822      	ldr	r2, [r4, #0]
 800c35e:	3b00      	subs	r3, #0
 800c360:	bf18      	it	ne
 800c362:	2301      	movne	r3, #1
 800c364:	0692      	lsls	r2, r2, #26
 800c366:	d42b      	bmi.n	800c3c0 <_printf_common+0xb0>
 800c368:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c36c:	4641      	mov	r1, r8
 800c36e:	4638      	mov	r0, r7
 800c370:	47c8      	blx	r9
 800c372:	3001      	adds	r0, #1
 800c374:	d01e      	beq.n	800c3b4 <_printf_common+0xa4>
 800c376:	6823      	ldr	r3, [r4, #0]
 800c378:	6922      	ldr	r2, [r4, #16]
 800c37a:	f003 0306 	and.w	r3, r3, #6
 800c37e:	2b04      	cmp	r3, #4
 800c380:	bf02      	ittt	eq
 800c382:	68e5      	ldreq	r5, [r4, #12]
 800c384:	6833      	ldreq	r3, [r6, #0]
 800c386:	1aed      	subeq	r5, r5, r3
 800c388:	68a3      	ldr	r3, [r4, #8]
 800c38a:	bf0c      	ite	eq
 800c38c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c390:	2500      	movne	r5, #0
 800c392:	4293      	cmp	r3, r2
 800c394:	bfc4      	itt	gt
 800c396:	1a9b      	subgt	r3, r3, r2
 800c398:	18ed      	addgt	r5, r5, r3
 800c39a:	2600      	movs	r6, #0
 800c39c:	341a      	adds	r4, #26
 800c39e:	42b5      	cmp	r5, r6
 800c3a0:	d11a      	bne.n	800c3d8 <_printf_common+0xc8>
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	e008      	b.n	800c3b8 <_printf_common+0xa8>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	4652      	mov	r2, sl
 800c3aa:	4641      	mov	r1, r8
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	47c8      	blx	r9
 800c3b0:	3001      	adds	r0, #1
 800c3b2:	d103      	bne.n	800c3bc <_printf_common+0xac>
 800c3b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3bc:	3501      	adds	r5, #1
 800c3be:	e7c6      	b.n	800c34e <_printf_common+0x3e>
 800c3c0:	18e1      	adds	r1, r4, r3
 800c3c2:	1c5a      	adds	r2, r3, #1
 800c3c4:	2030      	movs	r0, #48	@ 0x30
 800c3c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c3ca:	4422      	add	r2, r4
 800c3cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c3d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c3d4:	3302      	adds	r3, #2
 800c3d6:	e7c7      	b.n	800c368 <_printf_common+0x58>
 800c3d8:	2301      	movs	r3, #1
 800c3da:	4622      	mov	r2, r4
 800c3dc:	4641      	mov	r1, r8
 800c3de:	4638      	mov	r0, r7
 800c3e0:	47c8      	blx	r9
 800c3e2:	3001      	adds	r0, #1
 800c3e4:	d0e6      	beq.n	800c3b4 <_printf_common+0xa4>
 800c3e6:	3601      	adds	r6, #1
 800c3e8:	e7d9      	b.n	800c39e <_printf_common+0x8e>
	...

0800c3ec <_printf_i>:
 800c3ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f0:	7e0f      	ldrb	r7, [r1, #24]
 800c3f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c3f4:	2f78      	cmp	r7, #120	@ 0x78
 800c3f6:	4691      	mov	r9, r2
 800c3f8:	4680      	mov	r8, r0
 800c3fa:	460c      	mov	r4, r1
 800c3fc:	469a      	mov	sl, r3
 800c3fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c402:	d807      	bhi.n	800c414 <_printf_i+0x28>
 800c404:	2f62      	cmp	r7, #98	@ 0x62
 800c406:	d80a      	bhi.n	800c41e <_printf_i+0x32>
 800c408:	2f00      	cmp	r7, #0
 800c40a:	f000 80d1 	beq.w	800c5b0 <_printf_i+0x1c4>
 800c40e:	2f58      	cmp	r7, #88	@ 0x58
 800c410:	f000 80b8 	beq.w	800c584 <_printf_i+0x198>
 800c414:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c418:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c41c:	e03a      	b.n	800c494 <_printf_i+0xa8>
 800c41e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c422:	2b15      	cmp	r3, #21
 800c424:	d8f6      	bhi.n	800c414 <_printf_i+0x28>
 800c426:	a101      	add	r1, pc, #4	@ (adr r1, 800c42c <_printf_i+0x40>)
 800c428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c42c:	0800c485 	.word	0x0800c485
 800c430:	0800c499 	.word	0x0800c499
 800c434:	0800c415 	.word	0x0800c415
 800c438:	0800c415 	.word	0x0800c415
 800c43c:	0800c415 	.word	0x0800c415
 800c440:	0800c415 	.word	0x0800c415
 800c444:	0800c499 	.word	0x0800c499
 800c448:	0800c415 	.word	0x0800c415
 800c44c:	0800c415 	.word	0x0800c415
 800c450:	0800c415 	.word	0x0800c415
 800c454:	0800c415 	.word	0x0800c415
 800c458:	0800c597 	.word	0x0800c597
 800c45c:	0800c4c3 	.word	0x0800c4c3
 800c460:	0800c551 	.word	0x0800c551
 800c464:	0800c415 	.word	0x0800c415
 800c468:	0800c415 	.word	0x0800c415
 800c46c:	0800c5b9 	.word	0x0800c5b9
 800c470:	0800c415 	.word	0x0800c415
 800c474:	0800c4c3 	.word	0x0800c4c3
 800c478:	0800c415 	.word	0x0800c415
 800c47c:	0800c415 	.word	0x0800c415
 800c480:	0800c559 	.word	0x0800c559
 800c484:	6833      	ldr	r3, [r6, #0]
 800c486:	1d1a      	adds	r2, r3, #4
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	6032      	str	r2, [r6, #0]
 800c48c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c490:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c494:	2301      	movs	r3, #1
 800c496:	e09c      	b.n	800c5d2 <_printf_i+0x1e6>
 800c498:	6833      	ldr	r3, [r6, #0]
 800c49a:	6820      	ldr	r0, [r4, #0]
 800c49c:	1d19      	adds	r1, r3, #4
 800c49e:	6031      	str	r1, [r6, #0]
 800c4a0:	0606      	lsls	r6, r0, #24
 800c4a2:	d501      	bpl.n	800c4a8 <_printf_i+0xbc>
 800c4a4:	681d      	ldr	r5, [r3, #0]
 800c4a6:	e003      	b.n	800c4b0 <_printf_i+0xc4>
 800c4a8:	0645      	lsls	r5, r0, #25
 800c4aa:	d5fb      	bpl.n	800c4a4 <_printf_i+0xb8>
 800c4ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c4b0:	2d00      	cmp	r5, #0
 800c4b2:	da03      	bge.n	800c4bc <_printf_i+0xd0>
 800c4b4:	232d      	movs	r3, #45	@ 0x2d
 800c4b6:	426d      	negs	r5, r5
 800c4b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4bc:	4858      	ldr	r0, [pc, #352]	@ (800c620 <_printf_i+0x234>)
 800c4be:	230a      	movs	r3, #10
 800c4c0:	e011      	b.n	800c4e6 <_printf_i+0xfa>
 800c4c2:	6821      	ldr	r1, [r4, #0]
 800c4c4:	6833      	ldr	r3, [r6, #0]
 800c4c6:	0608      	lsls	r0, r1, #24
 800c4c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c4cc:	d402      	bmi.n	800c4d4 <_printf_i+0xe8>
 800c4ce:	0649      	lsls	r1, r1, #25
 800c4d0:	bf48      	it	mi
 800c4d2:	b2ad      	uxthmi	r5, r5
 800c4d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c4d6:	4852      	ldr	r0, [pc, #328]	@ (800c620 <_printf_i+0x234>)
 800c4d8:	6033      	str	r3, [r6, #0]
 800c4da:	bf14      	ite	ne
 800c4dc:	230a      	movne	r3, #10
 800c4de:	2308      	moveq	r3, #8
 800c4e0:	2100      	movs	r1, #0
 800c4e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c4e6:	6866      	ldr	r6, [r4, #4]
 800c4e8:	60a6      	str	r6, [r4, #8]
 800c4ea:	2e00      	cmp	r6, #0
 800c4ec:	db05      	blt.n	800c4fa <_printf_i+0x10e>
 800c4ee:	6821      	ldr	r1, [r4, #0]
 800c4f0:	432e      	orrs	r6, r5
 800c4f2:	f021 0104 	bic.w	r1, r1, #4
 800c4f6:	6021      	str	r1, [r4, #0]
 800c4f8:	d04b      	beq.n	800c592 <_printf_i+0x1a6>
 800c4fa:	4616      	mov	r6, r2
 800c4fc:	fbb5 f1f3 	udiv	r1, r5, r3
 800c500:	fb03 5711 	mls	r7, r3, r1, r5
 800c504:	5dc7      	ldrb	r7, [r0, r7]
 800c506:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c50a:	462f      	mov	r7, r5
 800c50c:	42bb      	cmp	r3, r7
 800c50e:	460d      	mov	r5, r1
 800c510:	d9f4      	bls.n	800c4fc <_printf_i+0x110>
 800c512:	2b08      	cmp	r3, #8
 800c514:	d10b      	bne.n	800c52e <_printf_i+0x142>
 800c516:	6823      	ldr	r3, [r4, #0]
 800c518:	07df      	lsls	r7, r3, #31
 800c51a:	d508      	bpl.n	800c52e <_printf_i+0x142>
 800c51c:	6923      	ldr	r3, [r4, #16]
 800c51e:	6861      	ldr	r1, [r4, #4]
 800c520:	4299      	cmp	r1, r3
 800c522:	bfde      	ittt	le
 800c524:	2330      	movle	r3, #48	@ 0x30
 800c526:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c52a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c52e:	1b92      	subs	r2, r2, r6
 800c530:	6122      	str	r2, [r4, #16]
 800c532:	f8cd a000 	str.w	sl, [sp]
 800c536:	464b      	mov	r3, r9
 800c538:	aa03      	add	r2, sp, #12
 800c53a:	4621      	mov	r1, r4
 800c53c:	4640      	mov	r0, r8
 800c53e:	f7ff fee7 	bl	800c310 <_printf_common>
 800c542:	3001      	adds	r0, #1
 800c544:	d14a      	bne.n	800c5dc <_printf_i+0x1f0>
 800c546:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c54a:	b004      	add	sp, #16
 800c54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c550:	6823      	ldr	r3, [r4, #0]
 800c552:	f043 0320 	orr.w	r3, r3, #32
 800c556:	6023      	str	r3, [r4, #0]
 800c558:	4832      	ldr	r0, [pc, #200]	@ (800c624 <_printf_i+0x238>)
 800c55a:	2778      	movs	r7, #120	@ 0x78
 800c55c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c560:	6823      	ldr	r3, [r4, #0]
 800c562:	6831      	ldr	r1, [r6, #0]
 800c564:	061f      	lsls	r7, r3, #24
 800c566:	f851 5b04 	ldr.w	r5, [r1], #4
 800c56a:	d402      	bmi.n	800c572 <_printf_i+0x186>
 800c56c:	065f      	lsls	r7, r3, #25
 800c56e:	bf48      	it	mi
 800c570:	b2ad      	uxthmi	r5, r5
 800c572:	6031      	str	r1, [r6, #0]
 800c574:	07d9      	lsls	r1, r3, #31
 800c576:	bf44      	itt	mi
 800c578:	f043 0320 	orrmi.w	r3, r3, #32
 800c57c:	6023      	strmi	r3, [r4, #0]
 800c57e:	b11d      	cbz	r5, 800c588 <_printf_i+0x19c>
 800c580:	2310      	movs	r3, #16
 800c582:	e7ad      	b.n	800c4e0 <_printf_i+0xf4>
 800c584:	4826      	ldr	r0, [pc, #152]	@ (800c620 <_printf_i+0x234>)
 800c586:	e7e9      	b.n	800c55c <_printf_i+0x170>
 800c588:	6823      	ldr	r3, [r4, #0]
 800c58a:	f023 0320 	bic.w	r3, r3, #32
 800c58e:	6023      	str	r3, [r4, #0]
 800c590:	e7f6      	b.n	800c580 <_printf_i+0x194>
 800c592:	4616      	mov	r6, r2
 800c594:	e7bd      	b.n	800c512 <_printf_i+0x126>
 800c596:	6833      	ldr	r3, [r6, #0]
 800c598:	6825      	ldr	r5, [r4, #0]
 800c59a:	6961      	ldr	r1, [r4, #20]
 800c59c:	1d18      	adds	r0, r3, #4
 800c59e:	6030      	str	r0, [r6, #0]
 800c5a0:	062e      	lsls	r6, r5, #24
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	d501      	bpl.n	800c5aa <_printf_i+0x1be>
 800c5a6:	6019      	str	r1, [r3, #0]
 800c5a8:	e002      	b.n	800c5b0 <_printf_i+0x1c4>
 800c5aa:	0668      	lsls	r0, r5, #25
 800c5ac:	d5fb      	bpl.n	800c5a6 <_printf_i+0x1ba>
 800c5ae:	8019      	strh	r1, [r3, #0]
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	6123      	str	r3, [r4, #16]
 800c5b4:	4616      	mov	r6, r2
 800c5b6:	e7bc      	b.n	800c532 <_printf_i+0x146>
 800c5b8:	6833      	ldr	r3, [r6, #0]
 800c5ba:	1d1a      	adds	r2, r3, #4
 800c5bc:	6032      	str	r2, [r6, #0]
 800c5be:	681e      	ldr	r6, [r3, #0]
 800c5c0:	6862      	ldr	r2, [r4, #4]
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f7f3 fe0b 	bl	80001e0 <memchr>
 800c5ca:	b108      	cbz	r0, 800c5d0 <_printf_i+0x1e4>
 800c5cc:	1b80      	subs	r0, r0, r6
 800c5ce:	6060      	str	r0, [r4, #4]
 800c5d0:	6863      	ldr	r3, [r4, #4]
 800c5d2:	6123      	str	r3, [r4, #16]
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c5da:	e7aa      	b.n	800c532 <_printf_i+0x146>
 800c5dc:	6923      	ldr	r3, [r4, #16]
 800c5de:	4632      	mov	r2, r6
 800c5e0:	4649      	mov	r1, r9
 800c5e2:	4640      	mov	r0, r8
 800c5e4:	47d0      	blx	sl
 800c5e6:	3001      	adds	r0, #1
 800c5e8:	d0ad      	beq.n	800c546 <_printf_i+0x15a>
 800c5ea:	6823      	ldr	r3, [r4, #0]
 800c5ec:	079b      	lsls	r3, r3, #30
 800c5ee:	d413      	bmi.n	800c618 <_printf_i+0x22c>
 800c5f0:	68e0      	ldr	r0, [r4, #12]
 800c5f2:	9b03      	ldr	r3, [sp, #12]
 800c5f4:	4298      	cmp	r0, r3
 800c5f6:	bfb8      	it	lt
 800c5f8:	4618      	movlt	r0, r3
 800c5fa:	e7a6      	b.n	800c54a <_printf_i+0x15e>
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	4632      	mov	r2, r6
 800c600:	4649      	mov	r1, r9
 800c602:	4640      	mov	r0, r8
 800c604:	47d0      	blx	sl
 800c606:	3001      	adds	r0, #1
 800c608:	d09d      	beq.n	800c546 <_printf_i+0x15a>
 800c60a:	3501      	adds	r5, #1
 800c60c:	68e3      	ldr	r3, [r4, #12]
 800c60e:	9903      	ldr	r1, [sp, #12]
 800c610:	1a5b      	subs	r3, r3, r1
 800c612:	42ab      	cmp	r3, r5
 800c614:	dcf2      	bgt.n	800c5fc <_printf_i+0x210>
 800c616:	e7eb      	b.n	800c5f0 <_printf_i+0x204>
 800c618:	2500      	movs	r5, #0
 800c61a:	f104 0619 	add.w	r6, r4, #25
 800c61e:	e7f5      	b.n	800c60c <_printf_i+0x220>
 800c620:	0800ef84 	.word	0x0800ef84
 800c624:	0800ef95 	.word	0x0800ef95

0800c628 <std>:
 800c628:	2300      	movs	r3, #0
 800c62a:	b510      	push	{r4, lr}
 800c62c:	4604      	mov	r4, r0
 800c62e:	e9c0 3300 	strd	r3, r3, [r0]
 800c632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c636:	6083      	str	r3, [r0, #8]
 800c638:	8181      	strh	r1, [r0, #12]
 800c63a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c63c:	81c2      	strh	r2, [r0, #14]
 800c63e:	6183      	str	r3, [r0, #24]
 800c640:	4619      	mov	r1, r3
 800c642:	2208      	movs	r2, #8
 800c644:	305c      	adds	r0, #92	@ 0x5c
 800c646:	f000 fa35 	bl	800cab4 <memset>
 800c64a:	4b0d      	ldr	r3, [pc, #52]	@ (800c680 <std+0x58>)
 800c64c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c64e:	4b0d      	ldr	r3, [pc, #52]	@ (800c684 <std+0x5c>)
 800c650:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c652:	4b0d      	ldr	r3, [pc, #52]	@ (800c688 <std+0x60>)
 800c654:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c656:	4b0d      	ldr	r3, [pc, #52]	@ (800c68c <std+0x64>)
 800c658:	6323      	str	r3, [r4, #48]	@ 0x30
 800c65a:	4b0d      	ldr	r3, [pc, #52]	@ (800c690 <std+0x68>)
 800c65c:	6224      	str	r4, [r4, #32]
 800c65e:	429c      	cmp	r4, r3
 800c660:	d006      	beq.n	800c670 <std+0x48>
 800c662:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c666:	4294      	cmp	r4, r2
 800c668:	d002      	beq.n	800c670 <std+0x48>
 800c66a:	33d0      	adds	r3, #208	@ 0xd0
 800c66c:	429c      	cmp	r4, r3
 800c66e:	d105      	bne.n	800c67c <std+0x54>
 800c670:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c678:	f000 ba98 	b.w	800cbac <__retarget_lock_init_recursive>
 800c67c:	bd10      	pop	{r4, pc}
 800c67e:	bf00      	nop
 800c680:	0800c88d 	.word	0x0800c88d
 800c684:	0800c8af 	.word	0x0800c8af
 800c688:	0800c8e7 	.word	0x0800c8e7
 800c68c:	0800c90b 	.word	0x0800c90b
 800c690:	200020b0 	.word	0x200020b0

0800c694 <stdio_exit_handler>:
 800c694:	4a02      	ldr	r2, [pc, #8]	@ (800c6a0 <stdio_exit_handler+0xc>)
 800c696:	4903      	ldr	r1, [pc, #12]	@ (800c6a4 <stdio_exit_handler+0x10>)
 800c698:	4803      	ldr	r0, [pc, #12]	@ (800c6a8 <stdio_exit_handler+0x14>)
 800c69a:	f000 b869 	b.w	800c770 <_fwalk_sglue>
 800c69e:	bf00      	nop
 800c6a0:	20000104 	.word	0x20000104
 800c6a4:	0800e7b1 	.word	0x0800e7b1
 800c6a8:	20000114 	.word	0x20000114

0800c6ac <cleanup_stdio>:
 800c6ac:	6841      	ldr	r1, [r0, #4]
 800c6ae:	4b0c      	ldr	r3, [pc, #48]	@ (800c6e0 <cleanup_stdio+0x34>)
 800c6b0:	4299      	cmp	r1, r3
 800c6b2:	b510      	push	{r4, lr}
 800c6b4:	4604      	mov	r4, r0
 800c6b6:	d001      	beq.n	800c6bc <cleanup_stdio+0x10>
 800c6b8:	f002 f87a 	bl	800e7b0 <_fflush_r>
 800c6bc:	68a1      	ldr	r1, [r4, #8]
 800c6be:	4b09      	ldr	r3, [pc, #36]	@ (800c6e4 <cleanup_stdio+0x38>)
 800c6c0:	4299      	cmp	r1, r3
 800c6c2:	d002      	beq.n	800c6ca <cleanup_stdio+0x1e>
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	f002 f873 	bl	800e7b0 <_fflush_r>
 800c6ca:	68e1      	ldr	r1, [r4, #12]
 800c6cc:	4b06      	ldr	r3, [pc, #24]	@ (800c6e8 <cleanup_stdio+0x3c>)
 800c6ce:	4299      	cmp	r1, r3
 800c6d0:	d004      	beq.n	800c6dc <cleanup_stdio+0x30>
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6d8:	f002 b86a 	b.w	800e7b0 <_fflush_r>
 800c6dc:	bd10      	pop	{r4, pc}
 800c6de:	bf00      	nop
 800c6e0:	200020b0 	.word	0x200020b0
 800c6e4:	20002118 	.word	0x20002118
 800c6e8:	20002180 	.word	0x20002180

0800c6ec <global_stdio_init.part.0>:
 800c6ec:	b510      	push	{r4, lr}
 800c6ee:	4b0b      	ldr	r3, [pc, #44]	@ (800c71c <global_stdio_init.part.0+0x30>)
 800c6f0:	4c0b      	ldr	r4, [pc, #44]	@ (800c720 <global_stdio_init.part.0+0x34>)
 800c6f2:	4a0c      	ldr	r2, [pc, #48]	@ (800c724 <global_stdio_init.part.0+0x38>)
 800c6f4:	601a      	str	r2, [r3, #0]
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	2104      	movs	r1, #4
 800c6fc:	f7ff ff94 	bl	800c628 <std>
 800c700:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c704:	2201      	movs	r2, #1
 800c706:	2109      	movs	r1, #9
 800c708:	f7ff ff8e 	bl	800c628 <std>
 800c70c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c710:	2202      	movs	r2, #2
 800c712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c716:	2112      	movs	r1, #18
 800c718:	f7ff bf86 	b.w	800c628 <std>
 800c71c:	200021e8 	.word	0x200021e8
 800c720:	200020b0 	.word	0x200020b0
 800c724:	0800c695 	.word	0x0800c695

0800c728 <__sfp_lock_acquire>:
 800c728:	4801      	ldr	r0, [pc, #4]	@ (800c730 <__sfp_lock_acquire+0x8>)
 800c72a:	f000 ba40 	b.w	800cbae <__retarget_lock_acquire_recursive>
 800c72e:	bf00      	nop
 800c730:	200021f1 	.word	0x200021f1

0800c734 <__sfp_lock_release>:
 800c734:	4801      	ldr	r0, [pc, #4]	@ (800c73c <__sfp_lock_release+0x8>)
 800c736:	f000 ba3b 	b.w	800cbb0 <__retarget_lock_release_recursive>
 800c73a:	bf00      	nop
 800c73c:	200021f1 	.word	0x200021f1

0800c740 <__sinit>:
 800c740:	b510      	push	{r4, lr}
 800c742:	4604      	mov	r4, r0
 800c744:	f7ff fff0 	bl	800c728 <__sfp_lock_acquire>
 800c748:	6a23      	ldr	r3, [r4, #32]
 800c74a:	b11b      	cbz	r3, 800c754 <__sinit+0x14>
 800c74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c750:	f7ff bff0 	b.w	800c734 <__sfp_lock_release>
 800c754:	4b04      	ldr	r3, [pc, #16]	@ (800c768 <__sinit+0x28>)
 800c756:	6223      	str	r3, [r4, #32]
 800c758:	4b04      	ldr	r3, [pc, #16]	@ (800c76c <__sinit+0x2c>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d1f5      	bne.n	800c74c <__sinit+0xc>
 800c760:	f7ff ffc4 	bl	800c6ec <global_stdio_init.part.0>
 800c764:	e7f2      	b.n	800c74c <__sinit+0xc>
 800c766:	bf00      	nop
 800c768:	0800c6ad 	.word	0x0800c6ad
 800c76c:	200021e8 	.word	0x200021e8

0800c770 <_fwalk_sglue>:
 800c770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c774:	4607      	mov	r7, r0
 800c776:	4688      	mov	r8, r1
 800c778:	4614      	mov	r4, r2
 800c77a:	2600      	movs	r6, #0
 800c77c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c780:	f1b9 0901 	subs.w	r9, r9, #1
 800c784:	d505      	bpl.n	800c792 <_fwalk_sglue+0x22>
 800c786:	6824      	ldr	r4, [r4, #0]
 800c788:	2c00      	cmp	r4, #0
 800c78a:	d1f7      	bne.n	800c77c <_fwalk_sglue+0xc>
 800c78c:	4630      	mov	r0, r6
 800c78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c792:	89ab      	ldrh	r3, [r5, #12]
 800c794:	2b01      	cmp	r3, #1
 800c796:	d907      	bls.n	800c7a8 <_fwalk_sglue+0x38>
 800c798:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c79c:	3301      	adds	r3, #1
 800c79e:	d003      	beq.n	800c7a8 <_fwalk_sglue+0x38>
 800c7a0:	4629      	mov	r1, r5
 800c7a2:	4638      	mov	r0, r7
 800c7a4:	47c0      	blx	r8
 800c7a6:	4306      	orrs	r6, r0
 800c7a8:	3568      	adds	r5, #104	@ 0x68
 800c7aa:	e7e9      	b.n	800c780 <_fwalk_sglue+0x10>

0800c7ac <iprintf>:
 800c7ac:	b40f      	push	{r0, r1, r2, r3}
 800c7ae:	b507      	push	{r0, r1, r2, lr}
 800c7b0:	4906      	ldr	r1, [pc, #24]	@ (800c7cc <iprintf+0x20>)
 800c7b2:	ab04      	add	r3, sp, #16
 800c7b4:	6808      	ldr	r0, [r1, #0]
 800c7b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7ba:	6881      	ldr	r1, [r0, #8]
 800c7bc:	9301      	str	r3, [sp, #4]
 800c7be:	f001 fe5b 	bl	800e478 <_vfiprintf_r>
 800c7c2:	b003      	add	sp, #12
 800c7c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7c8:	b004      	add	sp, #16
 800c7ca:	4770      	bx	lr
 800c7cc:	20000110 	.word	0x20000110

0800c7d0 <_puts_r>:
 800c7d0:	6a03      	ldr	r3, [r0, #32]
 800c7d2:	b570      	push	{r4, r5, r6, lr}
 800c7d4:	6884      	ldr	r4, [r0, #8]
 800c7d6:	4605      	mov	r5, r0
 800c7d8:	460e      	mov	r6, r1
 800c7da:	b90b      	cbnz	r3, 800c7e0 <_puts_r+0x10>
 800c7dc:	f7ff ffb0 	bl	800c740 <__sinit>
 800c7e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7e2:	07db      	lsls	r3, r3, #31
 800c7e4:	d405      	bmi.n	800c7f2 <_puts_r+0x22>
 800c7e6:	89a3      	ldrh	r3, [r4, #12]
 800c7e8:	0598      	lsls	r0, r3, #22
 800c7ea:	d402      	bmi.n	800c7f2 <_puts_r+0x22>
 800c7ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7ee:	f000 f9de 	bl	800cbae <__retarget_lock_acquire_recursive>
 800c7f2:	89a3      	ldrh	r3, [r4, #12]
 800c7f4:	0719      	lsls	r1, r3, #28
 800c7f6:	d502      	bpl.n	800c7fe <_puts_r+0x2e>
 800c7f8:	6923      	ldr	r3, [r4, #16]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d135      	bne.n	800c86a <_puts_r+0x9a>
 800c7fe:	4621      	mov	r1, r4
 800c800:	4628      	mov	r0, r5
 800c802:	f000 f901 	bl	800ca08 <__swsetup_r>
 800c806:	b380      	cbz	r0, 800c86a <_puts_r+0x9a>
 800c808:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c80c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c80e:	07da      	lsls	r2, r3, #31
 800c810:	d405      	bmi.n	800c81e <_puts_r+0x4e>
 800c812:	89a3      	ldrh	r3, [r4, #12]
 800c814:	059b      	lsls	r3, r3, #22
 800c816:	d402      	bmi.n	800c81e <_puts_r+0x4e>
 800c818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c81a:	f000 f9c9 	bl	800cbb0 <__retarget_lock_release_recursive>
 800c81e:	4628      	mov	r0, r5
 800c820:	bd70      	pop	{r4, r5, r6, pc}
 800c822:	2b00      	cmp	r3, #0
 800c824:	da04      	bge.n	800c830 <_puts_r+0x60>
 800c826:	69a2      	ldr	r2, [r4, #24]
 800c828:	429a      	cmp	r2, r3
 800c82a:	dc17      	bgt.n	800c85c <_puts_r+0x8c>
 800c82c:	290a      	cmp	r1, #10
 800c82e:	d015      	beq.n	800c85c <_puts_r+0x8c>
 800c830:	6823      	ldr	r3, [r4, #0]
 800c832:	1c5a      	adds	r2, r3, #1
 800c834:	6022      	str	r2, [r4, #0]
 800c836:	7019      	strb	r1, [r3, #0]
 800c838:	68a3      	ldr	r3, [r4, #8]
 800c83a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c83e:	3b01      	subs	r3, #1
 800c840:	60a3      	str	r3, [r4, #8]
 800c842:	2900      	cmp	r1, #0
 800c844:	d1ed      	bne.n	800c822 <_puts_r+0x52>
 800c846:	2b00      	cmp	r3, #0
 800c848:	da11      	bge.n	800c86e <_puts_r+0x9e>
 800c84a:	4622      	mov	r2, r4
 800c84c:	210a      	movs	r1, #10
 800c84e:	4628      	mov	r0, r5
 800c850:	f000 f89c 	bl	800c98c <__swbuf_r>
 800c854:	3001      	adds	r0, #1
 800c856:	d0d7      	beq.n	800c808 <_puts_r+0x38>
 800c858:	250a      	movs	r5, #10
 800c85a:	e7d7      	b.n	800c80c <_puts_r+0x3c>
 800c85c:	4622      	mov	r2, r4
 800c85e:	4628      	mov	r0, r5
 800c860:	f000 f894 	bl	800c98c <__swbuf_r>
 800c864:	3001      	adds	r0, #1
 800c866:	d1e7      	bne.n	800c838 <_puts_r+0x68>
 800c868:	e7ce      	b.n	800c808 <_puts_r+0x38>
 800c86a:	3e01      	subs	r6, #1
 800c86c:	e7e4      	b.n	800c838 <_puts_r+0x68>
 800c86e:	6823      	ldr	r3, [r4, #0]
 800c870:	1c5a      	adds	r2, r3, #1
 800c872:	6022      	str	r2, [r4, #0]
 800c874:	220a      	movs	r2, #10
 800c876:	701a      	strb	r2, [r3, #0]
 800c878:	e7ee      	b.n	800c858 <_puts_r+0x88>
	...

0800c87c <puts>:
 800c87c:	4b02      	ldr	r3, [pc, #8]	@ (800c888 <puts+0xc>)
 800c87e:	4601      	mov	r1, r0
 800c880:	6818      	ldr	r0, [r3, #0]
 800c882:	f7ff bfa5 	b.w	800c7d0 <_puts_r>
 800c886:	bf00      	nop
 800c888:	20000110 	.word	0x20000110

0800c88c <__sread>:
 800c88c:	b510      	push	{r4, lr}
 800c88e:	460c      	mov	r4, r1
 800c890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c894:	f000 f93c 	bl	800cb10 <_read_r>
 800c898:	2800      	cmp	r0, #0
 800c89a:	bfab      	itete	ge
 800c89c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c89e:	89a3      	ldrhlt	r3, [r4, #12]
 800c8a0:	181b      	addge	r3, r3, r0
 800c8a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c8a6:	bfac      	ite	ge
 800c8a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c8aa:	81a3      	strhlt	r3, [r4, #12]
 800c8ac:	bd10      	pop	{r4, pc}

0800c8ae <__swrite>:
 800c8ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b2:	461f      	mov	r7, r3
 800c8b4:	898b      	ldrh	r3, [r1, #12]
 800c8b6:	05db      	lsls	r3, r3, #23
 800c8b8:	4605      	mov	r5, r0
 800c8ba:	460c      	mov	r4, r1
 800c8bc:	4616      	mov	r6, r2
 800c8be:	d505      	bpl.n	800c8cc <__swrite+0x1e>
 800c8c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8c4:	2302      	movs	r3, #2
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f000 f910 	bl	800caec <_lseek_r>
 800c8cc:	89a3      	ldrh	r3, [r4, #12]
 800c8ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c8d6:	81a3      	strh	r3, [r4, #12]
 800c8d8:	4632      	mov	r2, r6
 800c8da:	463b      	mov	r3, r7
 800c8dc:	4628      	mov	r0, r5
 800c8de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e2:	f000 b927 	b.w	800cb34 <_write_r>

0800c8e6 <__sseek>:
 800c8e6:	b510      	push	{r4, lr}
 800c8e8:	460c      	mov	r4, r1
 800c8ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8ee:	f000 f8fd 	bl	800caec <_lseek_r>
 800c8f2:	1c43      	adds	r3, r0, #1
 800c8f4:	89a3      	ldrh	r3, [r4, #12]
 800c8f6:	bf15      	itete	ne
 800c8f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c8fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c8fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c902:	81a3      	strheq	r3, [r4, #12]
 800c904:	bf18      	it	ne
 800c906:	81a3      	strhne	r3, [r4, #12]
 800c908:	bd10      	pop	{r4, pc}

0800c90a <__sclose>:
 800c90a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c90e:	f000 b8dd 	b.w	800cacc <_close_r>

0800c912 <_vsniprintf_r>:
 800c912:	b530      	push	{r4, r5, lr}
 800c914:	4614      	mov	r4, r2
 800c916:	2c00      	cmp	r4, #0
 800c918:	b09b      	sub	sp, #108	@ 0x6c
 800c91a:	4605      	mov	r5, r0
 800c91c:	461a      	mov	r2, r3
 800c91e:	da05      	bge.n	800c92c <_vsniprintf_r+0x1a>
 800c920:	238b      	movs	r3, #139	@ 0x8b
 800c922:	6003      	str	r3, [r0, #0]
 800c924:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c928:	b01b      	add	sp, #108	@ 0x6c
 800c92a:	bd30      	pop	{r4, r5, pc}
 800c92c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c930:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c934:	f04f 0300 	mov.w	r3, #0
 800c938:	9319      	str	r3, [sp, #100]	@ 0x64
 800c93a:	bf14      	ite	ne
 800c93c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800c940:	4623      	moveq	r3, r4
 800c942:	9302      	str	r3, [sp, #8]
 800c944:	9305      	str	r3, [sp, #20]
 800c946:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c94a:	9100      	str	r1, [sp, #0]
 800c94c:	9104      	str	r1, [sp, #16]
 800c94e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c952:	4669      	mov	r1, sp
 800c954:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c956:	f001 fc69 	bl	800e22c <_svfiprintf_r>
 800c95a:	1c43      	adds	r3, r0, #1
 800c95c:	bfbc      	itt	lt
 800c95e:	238b      	movlt	r3, #139	@ 0x8b
 800c960:	602b      	strlt	r3, [r5, #0]
 800c962:	2c00      	cmp	r4, #0
 800c964:	d0e0      	beq.n	800c928 <_vsniprintf_r+0x16>
 800c966:	9b00      	ldr	r3, [sp, #0]
 800c968:	2200      	movs	r2, #0
 800c96a:	701a      	strb	r2, [r3, #0]
 800c96c:	e7dc      	b.n	800c928 <_vsniprintf_r+0x16>
	...

0800c970 <vsniprintf>:
 800c970:	b507      	push	{r0, r1, r2, lr}
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	4613      	mov	r3, r2
 800c976:	460a      	mov	r2, r1
 800c978:	4601      	mov	r1, r0
 800c97a:	4803      	ldr	r0, [pc, #12]	@ (800c988 <vsniprintf+0x18>)
 800c97c:	6800      	ldr	r0, [r0, #0]
 800c97e:	f7ff ffc8 	bl	800c912 <_vsniprintf_r>
 800c982:	b003      	add	sp, #12
 800c984:	f85d fb04 	ldr.w	pc, [sp], #4
 800c988:	20000110 	.word	0x20000110

0800c98c <__swbuf_r>:
 800c98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c98e:	460e      	mov	r6, r1
 800c990:	4614      	mov	r4, r2
 800c992:	4605      	mov	r5, r0
 800c994:	b118      	cbz	r0, 800c99e <__swbuf_r+0x12>
 800c996:	6a03      	ldr	r3, [r0, #32]
 800c998:	b90b      	cbnz	r3, 800c99e <__swbuf_r+0x12>
 800c99a:	f7ff fed1 	bl	800c740 <__sinit>
 800c99e:	69a3      	ldr	r3, [r4, #24]
 800c9a0:	60a3      	str	r3, [r4, #8]
 800c9a2:	89a3      	ldrh	r3, [r4, #12]
 800c9a4:	071a      	lsls	r2, r3, #28
 800c9a6:	d501      	bpl.n	800c9ac <__swbuf_r+0x20>
 800c9a8:	6923      	ldr	r3, [r4, #16]
 800c9aa:	b943      	cbnz	r3, 800c9be <__swbuf_r+0x32>
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	f000 f82a 	bl	800ca08 <__swsetup_r>
 800c9b4:	b118      	cbz	r0, 800c9be <__swbuf_r+0x32>
 800c9b6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c9ba:	4638      	mov	r0, r7
 800c9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9be:	6823      	ldr	r3, [r4, #0]
 800c9c0:	6922      	ldr	r2, [r4, #16]
 800c9c2:	1a98      	subs	r0, r3, r2
 800c9c4:	6963      	ldr	r3, [r4, #20]
 800c9c6:	b2f6      	uxtb	r6, r6
 800c9c8:	4283      	cmp	r3, r0
 800c9ca:	4637      	mov	r7, r6
 800c9cc:	dc05      	bgt.n	800c9da <__swbuf_r+0x4e>
 800c9ce:	4621      	mov	r1, r4
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	f001 feed 	bl	800e7b0 <_fflush_r>
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	d1ed      	bne.n	800c9b6 <__swbuf_r+0x2a>
 800c9da:	68a3      	ldr	r3, [r4, #8]
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	60a3      	str	r3, [r4, #8]
 800c9e0:	6823      	ldr	r3, [r4, #0]
 800c9e2:	1c5a      	adds	r2, r3, #1
 800c9e4:	6022      	str	r2, [r4, #0]
 800c9e6:	701e      	strb	r6, [r3, #0]
 800c9e8:	6962      	ldr	r2, [r4, #20]
 800c9ea:	1c43      	adds	r3, r0, #1
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d004      	beq.n	800c9fa <__swbuf_r+0x6e>
 800c9f0:	89a3      	ldrh	r3, [r4, #12]
 800c9f2:	07db      	lsls	r3, r3, #31
 800c9f4:	d5e1      	bpl.n	800c9ba <__swbuf_r+0x2e>
 800c9f6:	2e0a      	cmp	r6, #10
 800c9f8:	d1df      	bne.n	800c9ba <__swbuf_r+0x2e>
 800c9fa:	4621      	mov	r1, r4
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	f001 fed7 	bl	800e7b0 <_fflush_r>
 800ca02:	2800      	cmp	r0, #0
 800ca04:	d0d9      	beq.n	800c9ba <__swbuf_r+0x2e>
 800ca06:	e7d6      	b.n	800c9b6 <__swbuf_r+0x2a>

0800ca08 <__swsetup_r>:
 800ca08:	b538      	push	{r3, r4, r5, lr}
 800ca0a:	4b29      	ldr	r3, [pc, #164]	@ (800cab0 <__swsetup_r+0xa8>)
 800ca0c:	4605      	mov	r5, r0
 800ca0e:	6818      	ldr	r0, [r3, #0]
 800ca10:	460c      	mov	r4, r1
 800ca12:	b118      	cbz	r0, 800ca1c <__swsetup_r+0x14>
 800ca14:	6a03      	ldr	r3, [r0, #32]
 800ca16:	b90b      	cbnz	r3, 800ca1c <__swsetup_r+0x14>
 800ca18:	f7ff fe92 	bl	800c740 <__sinit>
 800ca1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca20:	0719      	lsls	r1, r3, #28
 800ca22:	d422      	bmi.n	800ca6a <__swsetup_r+0x62>
 800ca24:	06da      	lsls	r2, r3, #27
 800ca26:	d407      	bmi.n	800ca38 <__swsetup_r+0x30>
 800ca28:	2209      	movs	r2, #9
 800ca2a:	602a      	str	r2, [r5, #0]
 800ca2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca30:	81a3      	strh	r3, [r4, #12]
 800ca32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca36:	e033      	b.n	800caa0 <__swsetup_r+0x98>
 800ca38:	0758      	lsls	r0, r3, #29
 800ca3a:	d512      	bpl.n	800ca62 <__swsetup_r+0x5a>
 800ca3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca3e:	b141      	cbz	r1, 800ca52 <__swsetup_r+0x4a>
 800ca40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca44:	4299      	cmp	r1, r3
 800ca46:	d002      	beq.n	800ca4e <__swsetup_r+0x46>
 800ca48:	4628      	mov	r0, r5
 800ca4a:	f000 ff19 	bl	800d880 <_free_r>
 800ca4e:	2300      	movs	r3, #0
 800ca50:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca52:	89a3      	ldrh	r3, [r4, #12]
 800ca54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ca58:	81a3      	strh	r3, [r4, #12]
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	6063      	str	r3, [r4, #4]
 800ca5e:	6923      	ldr	r3, [r4, #16]
 800ca60:	6023      	str	r3, [r4, #0]
 800ca62:	89a3      	ldrh	r3, [r4, #12]
 800ca64:	f043 0308 	orr.w	r3, r3, #8
 800ca68:	81a3      	strh	r3, [r4, #12]
 800ca6a:	6923      	ldr	r3, [r4, #16]
 800ca6c:	b94b      	cbnz	r3, 800ca82 <__swsetup_r+0x7a>
 800ca6e:	89a3      	ldrh	r3, [r4, #12]
 800ca70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ca74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca78:	d003      	beq.n	800ca82 <__swsetup_r+0x7a>
 800ca7a:	4621      	mov	r1, r4
 800ca7c:	4628      	mov	r0, r5
 800ca7e:	f001 fee5 	bl	800e84c <__smakebuf_r>
 800ca82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca86:	f013 0201 	ands.w	r2, r3, #1
 800ca8a:	d00a      	beq.n	800caa2 <__swsetup_r+0x9a>
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	60a2      	str	r2, [r4, #8]
 800ca90:	6962      	ldr	r2, [r4, #20]
 800ca92:	4252      	negs	r2, r2
 800ca94:	61a2      	str	r2, [r4, #24]
 800ca96:	6922      	ldr	r2, [r4, #16]
 800ca98:	b942      	cbnz	r2, 800caac <__swsetup_r+0xa4>
 800ca9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ca9e:	d1c5      	bne.n	800ca2c <__swsetup_r+0x24>
 800caa0:	bd38      	pop	{r3, r4, r5, pc}
 800caa2:	0799      	lsls	r1, r3, #30
 800caa4:	bf58      	it	pl
 800caa6:	6962      	ldrpl	r2, [r4, #20]
 800caa8:	60a2      	str	r2, [r4, #8]
 800caaa:	e7f4      	b.n	800ca96 <__swsetup_r+0x8e>
 800caac:	2000      	movs	r0, #0
 800caae:	e7f7      	b.n	800caa0 <__swsetup_r+0x98>
 800cab0:	20000110 	.word	0x20000110

0800cab4 <memset>:
 800cab4:	4402      	add	r2, r0
 800cab6:	4603      	mov	r3, r0
 800cab8:	4293      	cmp	r3, r2
 800caba:	d100      	bne.n	800cabe <memset+0xa>
 800cabc:	4770      	bx	lr
 800cabe:	f803 1b01 	strb.w	r1, [r3], #1
 800cac2:	e7f9      	b.n	800cab8 <memset+0x4>

0800cac4 <_localeconv_r>:
 800cac4:	4800      	ldr	r0, [pc, #0]	@ (800cac8 <_localeconv_r+0x4>)
 800cac6:	4770      	bx	lr
 800cac8:	20000250 	.word	0x20000250

0800cacc <_close_r>:
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	4d06      	ldr	r5, [pc, #24]	@ (800cae8 <_close_r+0x1c>)
 800cad0:	2300      	movs	r3, #0
 800cad2:	4604      	mov	r4, r0
 800cad4:	4608      	mov	r0, r1
 800cad6:	602b      	str	r3, [r5, #0]
 800cad8:	f7f5 f8ba 	bl	8001c50 <_close>
 800cadc:	1c43      	adds	r3, r0, #1
 800cade:	d102      	bne.n	800cae6 <_close_r+0x1a>
 800cae0:	682b      	ldr	r3, [r5, #0]
 800cae2:	b103      	cbz	r3, 800cae6 <_close_r+0x1a>
 800cae4:	6023      	str	r3, [r4, #0]
 800cae6:	bd38      	pop	{r3, r4, r5, pc}
 800cae8:	200021ec 	.word	0x200021ec

0800caec <_lseek_r>:
 800caec:	b538      	push	{r3, r4, r5, lr}
 800caee:	4d07      	ldr	r5, [pc, #28]	@ (800cb0c <_lseek_r+0x20>)
 800caf0:	4604      	mov	r4, r0
 800caf2:	4608      	mov	r0, r1
 800caf4:	4611      	mov	r1, r2
 800caf6:	2200      	movs	r2, #0
 800caf8:	602a      	str	r2, [r5, #0]
 800cafa:	461a      	mov	r2, r3
 800cafc:	f7f5 f8cf 	bl	8001c9e <_lseek>
 800cb00:	1c43      	adds	r3, r0, #1
 800cb02:	d102      	bne.n	800cb0a <_lseek_r+0x1e>
 800cb04:	682b      	ldr	r3, [r5, #0]
 800cb06:	b103      	cbz	r3, 800cb0a <_lseek_r+0x1e>
 800cb08:	6023      	str	r3, [r4, #0]
 800cb0a:	bd38      	pop	{r3, r4, r5, pc}
 800cb0c:	200021ec 	.word	0x200021ec

0800cb10 <_read_r>:
 800cb10:	b538      	push	{r3, r4, r5, lr}
 800cb12:	4d07      	ldr	r5, [pc, #28]	@ (800cb30 <_read_r+0x20>)
 800cb14:	4604      	mov	r4, r0
 800cb16:	4608      	mov	r0, r1
 800cb18:	4611      	mov	r1, r2
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	602a      	str	r2, [r5, #0]
 800cb1e:	461a      	mov	r2, r3
 800cb20:	f7f5 f85d 	bl	8001bde <_read>
 800cb24:	1c43      	adds	r3, r0, #1
 800cb26:	d102      	bne.n	800cb2e <_read_r+0x1e>
 800cb28:	682b      	ldr	r3, [r5, #0]
 800cb2a:	b103      	cbz	r3, 800cb2e <_read_r+0x1e>
 800cb2c:	6023      	str	r3, [r4, #0]
 800cb2e:	bd38      	pop	{r3, r4, r5, pc}
 800cb30:	200021ec 	.word	0x200021ec

0800cb34 <_write_r>:
 800cb34:	b538      	push	{r3, r4, r5, lr}
 800cb36:	4d07      	ldr	r5, [pc, #28]	@ (800cb54 <_write_r+0x20>)
 800cb38:	4604      	mov	r4, r0
 800cb3a:	4608      	mov	r0, r1
 800cb3c:	4611      	mov	r1, r2
 800cb3e:	2200      	movs	r2, #0
 800cb40:	602a      	str	r2, [r5, #0]
 800cb42:	461a      	mov	r2, r3
 800cb44:	f7f5 f868 	bl	8001c18 <_write>
 800cb48:	1c43      	adds	r3, r0, #1
 800cb4a:	d102      	bne.n	800cb52 <_write_r+0x1e>
 800cb4c:	682b      	ldr	r3, [r5, #0]
 800cb4e:	b103      	cbz	r3, 800cb52 <_write_r+0x1e>
 800cb50:	6023      	str	r3, [r4, #0]
 800cb52:	bd38      	pop	{r3, r4, r5, pc}
 800cb54:	200021ec 	.word	0x200021ec

0800cb58 <__errno>:
 800cb58:	4b01      	ldr	r3, [pc, #4]	@ (800cb60 <__errno+0x8>)
 800cb5a:	6818      	ldr	r0, [r3, #0]
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	20000110 	.word	0x20000110

0800cb64 <__libc_init_array>:
 800cb64:	b570      	push	{r4, r5, r6, lr}
 800cb66:	4d0d      	ldr	r5, [pc, #52]	@ (800cb9c <__libc_init_array+0x38>)
 800cb68:	4c0d      	ldr	r4, [pc, #52]	@ (800cba0 <__libc_init_array+0x3c>)
 800cb6a:	1b64      	subs	r4, r4, r5
 800cb6c:	10a4      	asrs	r4, r4, #2
 800cb6e:	2600      	movs	r6, #0
 800cb70:	42a6      	cmp	r6, r4
 800cb72:	d109      	bne.n	800cb88 <__libc_init_array+0x24>
 800cb74:	4d0b      	ldr	r5, [pc, #44]	@ (800cba4 <__libc_init_array+0x40>)
 800cb76:	4c0c      	ldr	r4, [pc, #48]	@ (800cba8 <__libc_init_array+0x44>)
 800cb78:	f001 ffd6 	bl	800eb28 <_init>
 800cb7c:	1b64      	subs	r4, r4, r5
 800cb7e:	10a4      	asrs	r4, r4, #2
 800cb80:	2600      	movs	r6, #0
 800cb82:	42a6      	cmp	r6, r4
 800cb84:	d105      	bne.n	800cb92 <__libc_init_array+0x2e>
 800cb86:	bd70      	pop	{r4, r5, r6, pc}
 800cb88:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb8c:	4798      	blx	r3
 800cb8e:	3601      	adds	r6, #1
 800cb90:	e7ee      	b.n	800cb70 <__libc_init_array+0xc>
 800cb92:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb96:	4798      	blx	r3
 800cb98:	3601      	adds	r6, #1
 800cb9a:	e7f2      	b.n	800cb82 <__libc_init_array+0x1e>
 800cb9c:	0800f2ec 	.word	0x0800f2ec
 800cba0:	0800f2ec 	.word	0x0800f2ec
 800cba4:	0800f2ec 	.word	0x0800f2ec
 800cba8:	0800f2f0 	.word	0x0800f2f0

0800cbac <__retarget_lock_init_recursive>:
 800cbac:	4770      	bx	lr

0800cbae <__retarget_lock_acquire_recursive>:
 800cbae:	4770      	bx	lr

0800cbb0 <__retarget_lock_release_recursive>:
 800cbb0:	4770      	bx	lr

0800cbb2 <memcpy>:
 800cbb2:	440a      	add	r2, r1
 800cbb4:	4291      	cmp	r1, r2
 800cbb6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800cbba:	d100      	bne.n	800cbbe <memcpy+0xc>
 800cbbc:	4770      	bx	lr
 800cbbe:	b510      	push	{r4, lr}
 800cbc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbc8:	4291      	cmp	r1, r2
 800cbca:	d1f9      	bne.n	800cbc0 <memcpy+0xe>
 800cbcc:	bd10      	pop	{r4, pc}

0800cbce <quorem>:
 800cbce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd2:	6903      	ldr	r3, [r0, #16]
 800cbd4:	690c      	ldr	r4, [r1, #16]
 800cbd6:	42a3      	cmp	r3, r4
 800cbd8:	4607      	mov	r7, r0
 800cbda:	db7e      	blt.n	800ccda <quorem+0x10c>
 800cbdc:	3c01      	subs	r4, #1
 800cbde:	f101 0814 	add.w	r8, r1, #20
 800cbe2:	00a3      	lsls	r3, r4, #2
 800cbe4:	f100 0514 	add.w	r5, r0, #20
 800cbe8:	9300      	str	r3, [sp, #0]
 800cbea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbee:	9301      	str	r3, [sp, #4]
 800cbf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cbf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cc00:	fbb2 f6f3 	udiv	r6, r2, r3
 800cc04:	d32e      	bcc.n	800cc64 <quorem+0x96>
 800cc06:	f04f 0a00 	mov.w	sl, #0
 800cc0a:	46c4      	mov	ip, r8
 800cc0c:	46ae      	mov	lr, r5
 800cc0e:	46d3      	mov	fp, sl
 800cc10:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cc14:	b298      	uxth	r0, r3
 800cc16:	fb06 a000 	mla	r0, r6, r0, sl
 800cc1a:	0c02      	lsrs	r2, r0, #16
 800cc1c:	0c1b      	lsrs	r3, r3, #16
 800cc1e:	fb06 2303 	mla	r3, r6, r3, r2
 800cc22:	f8de 2000 	ldr.w	r2, [lr]
 800cc26:	b280      	uxth	r0, r0
 800cc28:	b292      	uxth	r2, r2
 800cc2a:	1a12      	subs	r2, r2, r0
 800cc2c:	445a      	add	r2, fp
 800cc2e:	f8de 0000 	ldr.w	r0, [lr]
 800cc32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cc3c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cc40:	b292      	uxth	r2, r2
 800cc42:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cc46:	45e1      	cmp	r9, ip
 800cc48:	f84e 2b04 	str.w	r2, [lr], #4
 800cc4c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cc50:	d2de      	bcs.n	800cc10 <quorem+0x42>
 800cc52:	9b00      	ldr	r3, [sp, #0]
 800cc54:	58eb      	ldr	r3, [r5, r3]
 800cc56:	b92b      	cbnz	r3, 800cc64 <quorem+0x96>
 800cc58:	9b01      	ldr	r3, [sp, #4]
 800cc5a:	3b04      	subs	r3, #4
 800cc5c:	429d      	cmp	r5, r3
 800cc5e:	461a      	mov	r2, r3
 800cc60:	d32f      	bcc.n	800ccc2 <quorem+0xf4>
 800cc62:	613c      	str	r4, [r7, #16]
 800cc64:	4638      	mov	r0, r7
 800cc66:	f001 f97d 	bl	800df64 <__mcmp>
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	db25      	blt.n	800ccba <quorem+0xec>
 800cc6e:	4629      	mov	r1, r5
 800cc70:	2000      	movs	r0, #0
 800cc72:	f858 2b04 	ldr.w	r2, [r8], #4
 800cc76:	f8d1 c000 	ldr.w	ip, [r1]
 800cc7a:	fa1f fe82 	uxth.w	lr, r2
 800cc7e:	fa1f f38c 	uxth.w	r3, ip
 800cc82:	eba3 030e 	sub.w	r3, r3, lr
 800cc86:	4403      	add	r3, r0
 800cc88:	0c12      	lsrs	r2, r2, #16
 800cc8a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cc8e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc98:	45c1      	cmp	r9, r8
 800cc9a:	f841 3b04 	str.w	r3, [r1], #4
 800cc9e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cca2:	d2e6      	bcs.n	800cc72 <quorem+0xa4>
 800cca4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cca8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ccac:	b922      	cbnz	r2, 800ccb8 <quorem+0xea>
 800ccae:	3b04      	subs	r3, #4
 800ccb0:	429d      	cmp	r5, r3
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	d30b      	bcc.n	800ccce <quorem+0x100>
 800ccb6:	613c      	str	r4, [r7, #16]
 800ccb8:	3601      	adds	r6, #1
 800ccba:	4630      	mov	r0, r6
 800ccbc:	b003      	add	sp, #12
 800ccbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccc2:	6812      	ldr	r2, [r2, #0]
 800ccc4:	3b04      	subs	r3, #4
 800ccc6:	2a00      	cmp	r2, #0
 800ccc8:	d1cb      	bne.n	800cc62 <quorem+0x94>
 800ccca:	3c01      	subs	r4, #1
 800cccc:	e7c6      	b.n	800cc5c <quorem+0x8e>
 800ccce:	6812      	ldr	r2, [r2, #0]
 800ccd0:	3b04      	subs	r3, #4
 800ccd2:	2a00      	cmp	r2, #0
 800ccd4:	d1ef      	bne.n	800ccb6 <quorem+0xe8>
 800ccd6:	3c01      	subs	r4, #1
 800ccd8:	e7ea      	b.n	800ccb0 <quorem+0xe2>
 800ccda:	2000      	movs	r0, #0
 800ccdc:	e7ee      	b.n	800ccbc <quorem+0xee>
	...

0800cce0 <_dtoa_r>:
 800cce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce4:	69c7      	ldr	r7, [r0, #28]
 800cce6:	b097      	sub	sp, #92	@ 0x5c
 800cce8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ccec:	ec55 4b10 	vmov	r4, r5, d0
 800ccf0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ccf2:	9107      	str	r1, [sp, #28]
 800ccf4:	4681      	mov	r9, r0
 800ccf6:	920c      	str	r2, [sp, #48]	@ 0x30
 800ccf8:	9311      	str	r3, [sp, #68]	@ 0x44
 800ccfa:	b97f      	cbnz	r7, 800cd1c <_dtoa_r+0x3c>
 800ccfc:	2010      	movs	r0, #16
 800ccfe:	f000 fe09 	bl	800d914 <malloc>
 800cd02:	4602      	mov	r2, r0
 800cd04:	f8c9 001c 	str.w	r0, [r9, #28]
 800cd08:	b920      	cbnz	r0, 800cd14 <_dtoa_r+0x34>
 800cd0a:	4ba9      	ldr	r3, [pc, #676]	@ (800cfb0 <_dtoa_r+0x2d0>)
 800cd0c:	21ef      	movs	r1, #239	@ 0xef
 800cd0e:	48a9      	ldr	r0, [pc, #676]	@ (800cfb4 <_dtoa_r+0x2d4>)
 800cd10:	f001 fe24 	bl	800e95c <__assert_func>
 800cd14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cd18:	6007      	str	r7, [r0, #0]
 800cd1a:	60c7      	str	r7, [r0, #12]
 800cd1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cd20:	6819      	ldr	r1, [r3, #0]
 800cd22:	b159      	cbz	r1, 800cd3c <_dtoa_r+0x5c>
 800cd24:	685a      	ldr	r2, [r3, #4]
 800cd26:	604a      	str	r2, [r1, #4]
 800cd28:	2301      	movs	r3, #1
 800cd2a:	4093      	lsls	r3, r2
 800cd2c:	608b      	str	r3, [r1, #8]
 800cd2e:	4648      	mov	r0, r9
 800cd30:	f000 fee6 	bl	800db00 <_Bfree>
 800cd34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	601a      	str	r2, [r3, #0]
 800cd3c:	1e2b      	subs	r3, r5, #0
 800cd3e:	bfb9      	ittee	lt
 800cd40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cd44:	9305      	strlt	r3, [sp, #20]
 800cd46:	2300      	movge	r3, #0
 800cd48:	6033      	strge	r3, [r6, #0]
 800cd4a:	9f05      	ldr	r7, [sp, #20]
 800cd4c:	4b9a      	ldr	r3, [pc, #616]	@ (800cfb8 <_dtoa_r+0x2d8>)
 800cd4e:	bfbc      	itt	lt
 800cd50:	2201      	movlt	r2, #1
 800cd52:	6032      	strlt	r2, [r6, #0]
 800cd54:	43bb      	bics	r3, r7
 800cd56:	d112      	bne.n	800cd7e <_dtoa_r+0x9e>
 800cd58:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cd5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cd5e:	6013      	str	r3, [r2, #0]
 800cd60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd64:	4323      	orrs	r3, r4
 800cd66:	f000 855a 	beq.w	800d81e <_dtoa_r+0xb3e>
 800cd6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd6c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800cfcc <_dtoa_r+0x2ec>
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	f000 855c 	beq.w	800d82e <_dtoa_r+0xb4e>
 800cd76:	f10a 0303 	add.w	r3, sl, #3
 800cd7a:	f000 bd56 	b.w	800d82a <_dtoa_r+0xb4a>
 800cd7e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800cd82:	2200      	movs	r2, #0
 800cd84:	ec51 0b17 	vmov	r0, r1, d7
 800cd88:	2300      	movs	r3, #0
 800cd8a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800cd8e:	f7f3 fea3 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd92:	4680      	mov	r8, r0
 800cd94:	b158      	cbz	r0, 800cdae <_dtoa_r+0xce>
 800cd96:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cd98:	2301      	movs	r3, #1
 800cd9a:	6013      	str	r3, [r2, #0]
 800cd9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd9e:	b113      	cbz	r3, 800cda6 <_dtoa_r+0xc6>
 800cda0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cda2:	4b86      	ldr	r3, [pc, #536]	@ (800cfbc <_dtoa_r+0x2dc>)
 800cda4:	6013      	str	r3, [r2, #0]
 800cda6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800cfd0 <_dtoa_r+0x2f0>
 800cdaa:	f000 bd40 	b.w	800d82e <_dtoa_r+0xb4e>
 800cdae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800cdb2:	aa14      	add	r2, sp, #80	@ 0x50
 800cdb4:	a915      	add	r1, sp, #84	@ 0x54
 800cdb6:	4648      	mov	r0, r9
 800cdb8:	f001 f984 	bl	800e0c4 <__d2b>
 800cdbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cdc0:	9002      	str	r0, [sp, #8]
 800cdc2:	2e00      	cmp	r6, #0
 800cdc4:	d078      	beq.n	800ceb8 <_dtoa_r+0x1d8>
 800cdc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cdc8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800cdcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cdd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cdd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cdd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cddc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cde0:	4619      	mov	r1, r3
 800cde2:	2200      	movs	r2, #0
 800cde4:	4b76      	ldr	r3, [pc, #472]	@ (800cfc0 <_dtoa_r+0x2e0>)
 800cde6:	f7f3 fa57 	bl	8000298 <__aeabi_dsub>
 800cdea:	a36b      	add	r3, pc, #428	@ (adr r3, 800cf98 <_dtoa_r+0x2b8>)
 800cdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf0:	f7f3 fc0a 	bl	8000608 <__aeabi_dmul>
 800cdf4:	a36a      	add	r3, pc, #424	@ (adr r3, 800cfa0 <_dtoa_r+0x2c0>)
 800cdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfa:	f7f3 fa4f 	bl	800029c <__adddf3>
 800cdfe:	4604      	mov	r4, r0
 800ce00:	4630      	mov	r0, r6
 800ce02:	460d      	mov	r5, r1
 800ce04:	f7f3 fb96 	bl	8000534 <__aeabi_i2d>
 800ce08:	a367      	add	r3, pc, #412	@ (adr r3, 800cfa8 <_dtoa_r+0x2c8>)
 800ce0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0e:	f7f3 fbfb 	bl	8000608 <__aeabi_dmul>
 800ce12:	4602      	mov	r2, r0
 800ce14:	460b      	mov	r3, r1
 800ce16:	4620      	mov	r0, r4
 800ce18:	4629      	mov	r1, r5
 800ce1a:	f7f3 fa3f 	bl	800029c <__adddf3>
 800ce1e:	4604      	mov	r4, r0
 800ce20:	460d      	mov	r5, r1
 800ce22:	f7f3 fea1 	bl	8000b68 <__aeabi_d2iz>
 800ce26:	2200      	movs	r2, #0
 800ce28:	4607      	mov	r7, r0
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	4629      	mov	r1, r5
 800ce30:	f7f3 fe5c 	bl	8000aec <__aeabi_dcmplt>
 800ce34:	b140      	cbz	r0, 800ce48 <_dtoa_r+0x168>
 800ce36:	4638      	mov	r0, r7
 800ce38:	f7f3 fb7c 	bl	8000534 <__aeabi_i2d>
 800ce3c:	4622      	mov	r2, r4
 800ce3e:	462b      	mov	r3, r5
 800ce40:	f7f3 fe4a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce44:	b900      	cbnz	r0, 800ce48 <_dtoa_r+0x168>
 800ce46:	3f01      	subs	r7, #1
 800ce48:	2f16      	cmp	r7, #22
 800ce4a:	d852      	bhi.n	800cef2 <_dtoa_r+0x212>
 800ce4c:	4b5d      	ldr	r3, [pc, #372]	@ (800cfc4 <_dtoa_r+0x2e4>)
 800ce4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ce52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ce5a:	f7f3 fe47 	bl	8000aec <__aeabi_dcmplt>
 800ce5e:	2800      	cmp	r0, #0
 800ce60:	d049      	beq.n	800cef6 <_dtoa_r+0x216>
 800ce62:	3f01      	subs	r7, #1
 800ce64:	2300      	movs	r3, #0
 800ce66:	9310      	str	r3, [sp, #64]	@ 0x40
 800ce68:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ce6a:	1b9b      	subs	r3, r3, r6
 800ce6c:	1e5a      	subs	r2, r3, #1
 800ce6e:	bf45      	ittet	mi
 800ce70:	f1c3 0301 	rsbmi	r3, r3, #1
 800ce74:	9300      	strmi	r3, [sp, #0]
 800ce76:	2300      	movpl	r3, #0
 800ce78:	2300      	movmi	r3, #0
 800ce7a:	9206      	str	r2, [sp, #24]
 800ce7c:	bf54      	ite	pl
 800ce7e:	9300      	strpl	r3, [sp, #0]
 800ce80:	9306      	strmi	r3, [sp, #24]
 800ce82:	2f00      	cmp	r7, #0
 800ce84:	db39      	blt.n	800cefa <_dtoa_r+0x21a>
 800ce86:	9b06      	ldr	r3, [sp, #24]
 800ce88:	970d      	str	r7, [sp, #52]	@ 0x34
 800ce8a:	443b      	add	r3, r7
 800ce8c:	9306      	str	r3, [sp, #24]
 800ce8e:	2300      	movs	r3, #0
 800ce90:	9308      	str	r3, [sp, #32]
 800ce92:	9b07      	ldr	r3, [sp, #28]
 800ce94:	2b09      	cmp	r3, #9
 800ce96:	d863      	bhi.n	800cf60 <_dtoa_r+0x280>
 800ce98:	2b05      	cmp	r3, #5
 800ce9a:	bfc4      	itt	gt
 800ce9c:	3b04      	subgt	r3, #4
 800ce9e:	9307      	strgt	r3, [sp, #28]
 800cea0:	9b07      	ldr	r3, [sp, #28]
 800cea2:	f1a3 0302 	sub.w	r3, r3, #2
 800cea6:	bfcc      	ite	gt
 800cea8:	2400      	movgt	r4, #0
 800ceaa:	2401      	movle	r4, #1
 800ceac:	2b03      	cmp	r3, #3
 800ceae:	d863      	bhi.n	800cf78 <_dtoa_r+0x298>
 800ceb0:	e8df f003 	tbb	[pc, r3]
 800ceb4:	2b375452 	.word	0x2b375452
 800ceb8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800cebc:	441e      	add	r6, r3
 800cebe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cec2:	2b20      	cmp	r3, #32
 800cec4:	bfc1      	itttt	gt
 800cec6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ceca:	409f      	lslgt	r7, r3
 800cecc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ced0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ced4:	bfd6      	itet	le
 800ced6:	f1c3 0320 	rsble	r3, r3, #32
 800ceda:	ea47 0003 	orrgt.w	r0, r7, r3
 800cede:	fa04 f003 	lslle.w	r0, r4, r3
 800cee2:	f7f3 fb17 	bl	8000514 <__aeabi_ui2d>
 800cee6:	2201      	movs	r2, #1
 800cee8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ceec:	3e01      	subs	r6, #1
 800ceee:	9212      	str	r2, [sp, #72]	@ 0x48
 800cef0:	e776      	b.n	800cde0 <_dtoa_r+0x100>
 800cef2:	2301      	movs	r3, #1
 800cef4:	e7b7      	b.n	800ce66 <_dtoa_r+0x186>
 800cef6:	9010      	str	r0, [sp, #64]	@ 0x40
 800cef8:	e7b6      	b.n	800ce68 <_dtoa_r+0x188>
 800cefa:	9b00      	ldr	r3, [sp, #0]
 800cefc:	1bdb      	subs	r3, r3, r7
 800cefe:	9300      	str	r3, [sp, #0]
 800cf00:	427b      	negs	r3, r7
 800cf02:	9308      	str	r3, [sp, #32]
 800cf04:	2300      	movs	r3, #0
 800cf06:	930d      	str	r3, [sp, #52]	@ 0x34
 800cf08:	e7c3      	b.n	800ce92 <_dtoa_r+0x1b2>
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cf10:	eb07 0b03 	add.w	fp, r7, r3
 800cf14:	f10b 0301 	add.w	r3, fp, #1
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	9303      	str	r3, [sp, #12]
 800cf1c:	bfb8      	it	lt
 800cf1e:	2301      	movlt	r3, #1
 800cf20:	e006      	b.n	800cf30 <_dtoa_r+0x250>
 800cf22:	2301      	movs	r3, #1
 800cf24:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	dd28      	ble.n	800cf7e <_dtoa_r+0x29e>
 800cf2c:	469b      	mov	fp, r3
 800cf2e:	9303      	str	r3, [sp, #12]
 800cf30:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800cf34:	2100      	movs	r1, #0
 800cf36:	2204      	movs	r2, #4
 800cf38:	f102 0514 	add.w	r5, r2, #20
 800cf3c:	429d      	cmp	r5, r3
 800cf3e:	d926      	bls.n	800cf8e <_dtoa_r+0x2ae>
 800cf40:	6041      	str	r1, [r0, #4]
 800cf42:	4648      	mov	r0, r9
 800cf44:	f000 fd9c 	bl	800da80 <_Balloc>
 800cf48:	4682      	mov	sl, r0
 800cf4a:	2800      	cmp	r0, #0
 800cf4c:	d142      	bne.n	800cfd4 <_dtoa_r+0x2f4>
 800cf4e:	4b1e      	ldr	r3, [pc, #120]	@ (800cfc8 <_dtoa_r+0x2e8>)
 800cf50:	4602      	mov	r2, r0
 800cf52:	f240 11af 	movw	r1, #431	@ 0x1af
 800cf56:	e6da      	b.n	800cd0e <_dtoa_r+0x2e>
 800cf58:	2300      	movs	r3, #0
 800cf5a:	e7e3      	b.n	800cf24 <_dtoa_r+0x244>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	e7d5      	b.n	800cf0c <_dtoa_r+0x22c>
 800cf60:	2401      	movs	r4, #1
 800cf62:	2300      	movs	r3, #0
 800cf64:	9307      	str	r3, [sp, #28]
 800cf66:	9409      	str	r4, [sp, #36]	@ 0x24
 800cf68:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f8cd b00c 	str.w	fp, [sp, #12]
 800cf72:	2312      	movs	r3, #18
 800cf74:	920c      	str	r2, [sp, #48]	@ 0x30
 800cf76:	e7db      	b.n	800cf30 <_dtoa_r+0x250>
 800cf78:	2301      	movs	r3, #1
 800cf7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf7c:	e7f4      	b.n	800cf68 <_dtoa_r+0x288>
 800cf7e:	f04f 0b01 	mov.w	fp, #1
 800cf82:	f8cd b00c 	str.w	fp, [sp, #12]
 800cf86:	465b      	mov	r3, fp
 800cf88:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800cf8c:	e7d0      	b.n	800cf30 <_dtoa_r+0x250>
 800cf8e:	3101      	adds	r1, #1
 800cf90:	0052      	lsls	r2, r2, #1
 800cf92:	e7d1      	b.n	800cf38 <_dtoa_r+0x258>
 800cf94:	f3af 8000 	nop.w
 800cf98:	636f4361 	.word	0x636f4361
 800cf9c:	3fd287a7 	.word	0x3fd287a7
 800cfa0:	8b60c8b3 	.word	0x8b60c8b3
 800cfa4:	3fc68a28 	.word	0x3fc68a28
 800cfa8:	509f79fb 	.word	0x509f79fb
 800cfac:	3fd34413 	.word	0x3fd34413
 800cfb0:	0800efb3 	.word	0x0800efb3
 800cfb4:	0800efca 	.word	0x0800efca
 800cfb8:	7ff00000 	.word	0x7ff00000
 800cfbc:	0800ef83 	.word	0x0800ef83
 800cfc0:	3ff80000 	.word	0x3ff80000
 800cfc4:	0800f118 	.word	0x0800f118
 800cfc8:	0800f022 	.word	0x0800f022
 800cfcc:	0800efaf 	.word	0x0800efaf
 800cfd0:	0800ef82 	.word	0x0800ef82
 800cfd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cfd8:	6018      	str	r0, [r3, #0]
 800cfda:	9b03      	ldr	r3, [sp, #12]
 800cfdc:	2b0e      	cmp	r3, #14
 800cfde:	f200 80a1 	bhi.w	800d124 <_dtoa_r+0x444>
 800cfe2:	2c00      	cmp	r4, #0
 800cfe4:	f000 809e 	beq.w	800d124 <_dtoa_r+0x444>
 800cfe8:	2f00      	cmp	r7, #0
 800cfea:	dd33      	ble.n	800d054 <_dtoa_r+0x374>
 800cfec:	4b9c      	ldr	r3, [pc, #624]	@ (800d260 <_dtoa_r+0x580>)
 800cfee:	f007 020f 	and.w	r2, r7, #15
 800cff2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cff6:	ed93 7b00 	vldr	d7, [r3]
 800cffa:	05f8      	lsls	r0, r7, #23
 800cffc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d000:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d004:	d516      	bpl.n	800d034 <_dtoa_r+0x354>
 800d006:	4b97      	ldr	r3, [pc, #604]	@ (800d264 <_dtoa_r+0x584>)
 800d008:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d00c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d010:	f7f3 fc24 	bl	800085c <__aeabi_ddiv>
 800d014:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d018:	f004 040f 	and.w	r4, r4, #15
 800d01c:	2603      	movs	r6, #3
 800d01e:	4d91      	ldr	r5, [pc, #580]	@ (800d264 <_dtoa_r+0x584>)
 800d020:	b954      	cbnz	r4, 800d038 <_dtoa_r+0x358>
 800d022:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d026:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d02a:	f7f3 fc17 	bl	800085c <__aeabi_ddiv>
 800d02e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d032:	e028      	b.n	800d086 <_dtoa_r+0x3a6>
 800d034:	2602      	movs	r6, #2
 800d036:	e7f2      	b.n	800d01e <_dtoa_r+0x33e>
 800d038:	07e1      	lsls	r1, r4, #31
 800d03a:	d508      	bpl.n	800d04e <_dtoa_r+0x36e>
 800d03c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d040:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d044:	f7f3 fae0 	bl	8000608 <__aeabi_dmul>
 800d048:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d04c:	3601      	adds	r6, #1
 800d04e:	1064      	asrs	r4, r4, #1
 800d050:	3508      	adds	r5, #8
 800d052:	e7e5      	b.n	800d020 <_dtoa_r+0x340>
 800d054:	f000 80af 	beq.w	800d1b6 <_dtoa_r+0x4d6>
 800d058:	427c      	negs	r4, r7
 800d05a:	4b81      	ldr	r3, [pc, #516]	@ (800d260 <_dtoa_r+0x580>)
 800d05c:	4d81      	ldr	r5, [pc, #516]	@ (800d264 <_dtoa_r+0x584>)
 800d05e:	f004 020f 	and.w	r2, r4, #15
 800d062:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d06e:	f7f3 facb 	bl	8000608 <__aeabi_dmul>
 800d072:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d076:	1124      	asrs	r4, r4, #4
 800d078:	2300      	movs	r3, #0
 800d07a:	2602      	movs	r6, #2
 800d07c:	2c00      	cmp	r4, #0
 800d07e:	f040 808f 	bne.w	800d1a0 <_dtoa_r+0x4c0>
 800d082:	2b00      	cmp	r3, #0
 800d084:	d1d3      	bne.n	800d02e <_dtoa_r+0x34e>
 800d086:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d088:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	f000 8094 	beq.w	800d1ba <_dtoa_r+0x4da>
 800d092:	4b75      	ldr	r3, [pc, #468]	@ (800d268 <_dtoa_r+0x588>)
 800d094:	2200      	movs	r2, #0
 800d096:	4620      	mov	r0, r4
 800d098:	4629      	mov	r1, r5
 800d09a:	f7f3 fd27 	bl	8000aec <__aeabi_dcmplt>
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	f000 808b 	beq.w	800d1ba <_dtoa_r+0x4da>
 800d0a4:	9b03      	ldr	r3, [sp, #12]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f000 8087 	beq.w	800d1ba <_dtoa_r+0x4da>
 800d0ac:	f1bb 0f00 	cmp.w	fp, #0
 800d0b0:	dd34      	ble.n	800d11c <_dtoa_r+0x43c>
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	4b6d      	ldr	r3, [pc, #436]	@ (800d26c <_dtoa_r+0x58c>)
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	f7f3 faa5 	bl	8000608 <__aeabi_dmul>
 800d0be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d0c2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800d0c6:	3601      	adds	r6, #1
 800d0c8:	465c      	mov	r4, fp
 800d0ca:	4630      	mov	r0, r6
 800d0cc:	f7f3 fa32 	bl	8000534 <__aeabi_i2d>
 800d0d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0d4:	f7f3 fa98 	bl	8000608 <__aeabi_dmul>
 800d0d8:	4b65      	ldr	r3, [pc, #404]	@ (800d270 <_dtoa_r+0x590>)
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f7f3 f8de 	bl	800029c <__adddf3>
 800d0e0:	4605      	mov	r5, r0
 800d0e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d0e6:	2c00      	cmp	r4, #0
 800d0e8:	d16a      	bne.n	800d1c0 <_dtoa_r+0x4e0>
 800d0ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d0ee:	4b61      	ldr	r3, [pc, #388]	@ (800d274 <_dtoa_r+0x594>)
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f7f3 f8d1 	bl	8000298 <__aeabi_dsub>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d0fe:	462a      	mov	r2, r5
 800d100:	4633      	mov	r3, r6
 800d102:	f7f3 fd11 	bl	8000b28 <__aeabi_dcmpgt>
 800d106:	2800      	cmp	r0, #0
 800d108:	f040 8298 	bne.w	800d63c <_dtoa_r+0x95c>
 800d10c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d110:	462a      	mov	r2, r5
 800d112:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d116:	f7f3 fce9 	bl	8000aec <__aeabi_dcmplt>
 800d11a:	bb38      	cbnz	r0, 800d16c <_dtoa_r+0x48c>
 800d11c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d120:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d124:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d126:	2b00      	cmp	r3, #0
 800d128:	f2c0 8157 	blt.w	800d3da <_dtoa_r+0x6fa>
 800d12c:	2f0e      	cmp	r7, #14
 800d12e:	f300 8154 	bgt.w	800d3da <_dtoa_r+0x6fa>
 800d132:	4b4b      	ldr	r3, [pc, #300]	@ (800d260 <_dtoa_r+0x580>)
 800d134:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d138:	ed93 7b00 	vldr	d7, [r3]
 800d13c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d13e:	2b00      	cmp	r3, #0
 800d140:	ed8d 7b00 	vstr	d7, [sp]
 800d144:	f280 80e5 	bge.w	800d312 <_dtoa_r+0x632>
 800d148:	9b03      	ldr	r3, [sp, #12]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	f300 80e1 	bgt.w	800d312 <_dtoa_r+0x632>
 800d150:	d10c      	bne.n	800d16c <_dtoa_r+0x48c>
 800d152:	4b48      	ldr	r3, [pc, #288]	@ (800d274 <_dtoa_r+0x594>)
 800d154:	2200      	movs	r2, #0
 800d156:	ec51 0b17 	vmov	r0, r1, d7
 800d15a:	f7f3 fa55 	bl	8000608 <__aeabi_dmul>
 800d15e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d162:	f7f3 fcd7 	bl	8000b14 <__aeabi_dcmpge>
 800d166:	2800      	cmp	r0, #0
 800d168:	f000 8266 	beq.w	800d638 <_dtoa_r+0x958>
 800d16c:	2400      	movs	r4, #0
 800d16e:	4625      	mov	r5, r4
 800d170:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d172:	4656      	mov	r6, sl
 800d174:	ea6f 0803 	mvn.w	r8, r3
 800d178:	2700      	movs	r7, #0
 800d17a:	4621      	mov	r1, r4
 800d17c:	4648      	mov	r0, r9
 800d17e:	f000 fcbf 	bl	800db00 <_Bfree>
 800d182:	2d00      	cmp	r5, #0
 800d184:	f000 80bd 	beq.w	800d302 <_dtoa_r+0x622>
 800d188:	b12f      	cbz	r7, 800d196 <_dtoa_r+0x4b6>
 800d18a:	42af      	cmp	r7, r5
 800d18c:	d003      	beq.n	800d196 <_dtoa_r+0x4b6>
 800d18e:	4639      	mov	r1, r7
 800d190:	4648      	mov	r0, r9
 800d192:	f000 fcb5 	bl	800db00 <_Bfree>
 800d196:	4629      	mov	r1, r5
 800d198:	4648      	mov	r0, r9
 800d19a:	f000 fcb1 	bl	800db00 <_Bfree>
 800d19e:	e0b0      	b.n	800d302 <_dtoa_r+0x622>
 800d1a0:	07e2      	lsls	r2, r4, #31
 800d1a2:	d505      	bpl.n	800d1b0 <_dtoa_r+0x4d0>
 800d1a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d1a8:	f7f3 fa2e 	bl	8000608 <__aeabi_dmul>
 800d1ac:	3601      	adds	r6, #1
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	1064      	asrs	r4, r4, #1
 800d1b2:	3508      	adds	r5, #8
 800d1b4:	e762      	b.n	800d07c <_dtoa_r+0x39c>
 800d1b6:	2602      	movs	r6, #2
 800d1b8:	e765      	b.n	800d086 <_dtoa_r+0x3a6>
 800d1ba:	9c03      	ldr	r4, [sp, #12]
 800d1bc:	46b8      	mov	r8, r7
 800d1be:	e784      	b.n	800d0ca <_dtoa_r+0x3ea>
 800d1c0:	4b27      	ldr	r3, [pc, #156]	@ (800d260 <_dtoa_r+0x580>)
 800d1c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d1c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d1c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d1cc:	4454      	add	r4, sl
 800d1ce:	2900      	cmp	r1, #0
 800d1d0:	d054      	beq.n	800d27c <_dtoa_r+0x59c>
 800d1d2:	4929      	ldr	r1, [pc, #164]	@ (800d278 <_dtoa_r+0x598>)
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	f7f3 fb41 	bl	800085c <__aeabi_ddiv>
 800d1da:	4633      	mov	r3, r6
 800d1dc:	462a      	mov	r2, r5
 800d1de:	f7f3 f85b 	bl	8000298 <__aeabi_dsub>
 800d1e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d1e6:	4656      	mov	r6, sl
 800d1e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d1ec:	f7f3 fcbc 	bl	8000b68 <__aeabi_d2iz>
 800d1f0:	4605      	mov	r5, r0
 800d1f2:	f7f3 f99f 	bl	8000534 <__aeabi_i2d>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d1fe:	f7f3 f84b 	bl	8000298 <__aeabi_dsub>
 800d202:	3530      	adds	r5, #48	@ 0x30
 800d204:	4602      	mov	r2, r0
 800d206:	460b      	mov	r3, r1
 800d208:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d20c:	f806 5b01 	strb.w	r5, [r6], #1
 800d210:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d214:	f7f3 fc6a 	bl	8000aec <__aeabi_dcmplt>
 800d218:	2800      	cmp	r0, #0
 800d21a:	d172      	bne.n	800d302 <_dtoa_r+0x622>
 800d21c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d220:	4911      	ldr	r1, [pc, #68]	@ (800d268 <_dtoa_r+0x588>)
 800d222:	2000      	movs	r0, #0
 800d224:	f7f3 f838 	bl	8000298 <__aeabi_dsub>
 800d228:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d22c:	f7f3 fc5e 	bl	8000aec <__aeabi_dcmplt>
 800d230:	2800      	cmp	r0, #0
 800d232:	f040 80b4 	bne.w	800d39e <_dtoa_r+0x6be>
 800d236:	42a6      	cmp	r6, r4
 800d238:	f43f af70 	beq.w	800d11c <_dtoa_r+0x43c>
 800d23c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d240:	4b0a      	ldr	r3, [pc, #40]	@ (800d26c <_dtoa_r+0x58c>)
 800d242:	2200      	movs	r2, #0
 800d244:	f7f3 f9e0 	bl	8000608 <__aeabi_dmul>
 800d248:	4b08      	ldr	r3, [pc, #32]	@ (800d26c <_dtoa_r+0x58c>)
 800d24a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d24e:	2200      	movs	r2, #0
 800d250:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d254:	f7f3 f9d8 	bl	8000608 <__aeabi_dmul>
 800d258:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d25c:	e7c4      	b.n	800d1e8 <_dtoa_r+0x508>
 800d25e:	bf00      	nop
 800d260:	0800f118 	.word	0x0800f118
 800d264:	0800f0f0 	.word	0x0800f0f0
 800d268:	3ff00000 	.word	0x3ff00000
 800d26c:	40240000 	.word	0x40240000
 800d270:	401c0000 	.word	0x401c0000
 800d274:	40140000 	.word	0x40140000
 800d278:	3fe00000 	.word	0x3fe00000
 800d27c:	4631      	mov	r1, r6
 800d27e:	4628      	mov	r0, r5
 800d280:	f7f3 f9c2 	bl	8000608 <__aeabi_dmul>
 800d284:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d288:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d28a:	4656      	mov	r6, sl
 800d28c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d290:	f7f3 fc6a 	bl	8000b68 <__aeabi_d2iz>
 800d294:	4605      	mov	r5, r0
 800d296:	f7f3 f94d 	bl	8000534 <__aeabi_i2d>
 800d29a:	4602      	mov	r2, r0
 800d29c:	460b      	mov	r3, r1
 800d29e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d2a2:	f7f2 fff9 	bl	8000298 <__aeabi_dsub>
 800d2a6:	3530      	adds	r5, #48	@ 0x30
 800d2a8:	f806 5b01 	strb.w	r5, [r6], #1
 800d2ac:	4602      	mov	r2, r0
 800d2ae:	460b      	mov	r3, r1
 800d2b0:	42a6      	cmp	r6, r4
 800d2b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d2b6:	f04f 0200 	mov.w	r2, #0
 800d2ba:	d124      	bne.n	800d306 <_dtoa_r+0x626>
 800d2bc:	4baf      	ldr	r3, [pc, #700]	@ (800d57c <_dtoa_r+0x89c>)
 800d2be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d2c2:	f7f2 ffeb 	bl	800029c <__adddf3>
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d2ce:	f7f3 fc2b 	bl	8000b28 <__aeabi_dcmpgt>
 800d2d2:	2800      	cmp	r0, #0
 800d2d4:	d163      	bne.n	800d39e <_dtoa_r+0x6be>
 800d2d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d2da:	49a8      	ldr	r1, [pc, #672]	@ (800d57c <_dtoa_r+0x89c>)
 800d2dc:	2000      	movs	r0, #0
 800d2de:	f7f2 ffdb 	bl	8000298 <__aeabi_dsub>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d2ea:	f7f3 fbff 	bl	8000aec <__aeabi_dcmplt>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	f43f af14 	beq.w	800d11c <_dtoa_r+0x43c>
 800d2f4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d2f6:	1e73      	subs	r3, r6, #1
 800d2f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d2fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d2fe:	2b30      	cmp	r3, #48	@ 0x30
 800d300:	d0f8      	beq.n	800d2f4 <_dtoa_r+0x614>
 800d302:	4647      	mov	r7, r8
 800d304:	e03b      	b.n	800d37e <_dtoa_r+0x69e>
 800d306:	4b9e      	ldr	r3, [pc, #632]	@ (800d580 <_dtoa_r+0x8a0>)
 800d308:	f7f3 f97e 	bl	8000608 <__aeabi_dmul>
 800d30c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d310:	e7bc      	b.n	800d28c <_dtoa_r+0x5ac>
 800d312:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d316:	4656      	mov	r6, sl
 800d318:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d31c:	4620      	mov	r0, r4
 800d31e:	4629      	mov	r1, r5
 800d320:	f7f3 fa9c 	bl	800085c <__aeabi_ddiv>
 800d324:	f7f3 fc20 	bl	8000b68 <__aeabi_d2iz>
 800d328:	4680      	mov	r8, r0
 800d32a:	f7f3 f903 	bl	8000534 <__aeabi_i2d>
 800d32e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d332:	f7f3 f969 	bl	8000608 <__aeabi_dmul>
 800d336:	4602      	mov	r2, r0
 800d338:	460b      	mov	r3, r1
 800d33a:	4620      	mov	r0, r4
 800d33c:	4629      	mov	r1, r5
 800d33e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d342:	f7f2 ffa9 	bl	8000298 <__aeabi_dsub>
 800d346:	f806 4b01 	strb.w	r4, [r6], #1
 800d34a:	9d03      	ldr	r5, [sp, #12]
 800d34c:	eba6 040a 	sub.w	r4, r6, sl
 800d350:	42a5      	cmp	r5, r4
 800d352:	4602      	mov	r2, r0
 800d354:	460b      	mov	r3, r1
 800d356:	d133      	bne.n	800d3c0 <_dtoa_r+0x6e0>
 800d358:	f7f2 ffa0 	bl	800029c <__adddf3>
 800d35c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d360:	4604      	mov	r4, r0
 800d362:	460d      	mov	r5, r1
 800d364:	f7f3 fbe0 	bl	8000b28 <__aeabi_dcmpgt>
 800d368:	b9c0      	cbnz	r0, 800d39c <_dtoa_r+0x6bc>
 800d36a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d36e:	4620      	mov	r0, r4
 800d370:	4629      	mov	r1, r5
 800d372:	f7f3 fbb1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d376:	b110      	cbz	r0, 800d37e <_dtoa_r+0x69e>
 800d378:	f018 0f01 	tst.w	r8, #1
 800d37c:	d10e      	bne.n	800d39c <_dtoa_r+0x6bc>
 800d37e:	9902      	ldr	r1, [sp, #8]
 800d380:	4648      	mov	r0, r9
 800d382:	f000 fbbd 	bl	800db00 <_Bfree>
 800d386:	2300      	movs	r3, #0
 800d388:	7033      	strb	r3, [r6, #0]
 800d38a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d38c:	3701      	adds	r7, #1
 800d38e:	601f      	str	r7, [r3, #0]
 800d390:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d392:	2b00      	cmp	r3, #0
 800d394:	f000 824b 	beq.w	800d82e <_dtoa_r+0xb4e>
 800d398:	601e      	str	r6, [r3, #0]
 800d39a:	e248      	b.n	800d82e <_dtoa_r+0xb4e>
 800d39c:	46b8      	mov	r8, r7
 800d39e:	4633      	mov	r3, r6
 800d3a0:	461e      	mov	r6, r3
 800d3a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d3a6:	2a39      	cmp	r2, #57	@ 0x39
 800d3a8:	d106      	bne.n	800d3b8 <_dtoa_r+0x6d8>
 800d3aa:	459a      	cmp	sl, r3
 800d3ac:	d1f8      	bne.n	800d3a0 <_dtoa_r+0x6c0>
 800d3ae:	2230      	movs	r2, #48	@ 0x30
 800d3b0:	f108 0801 	add.w	r8, r8, #1
 800d3b4:	f88a 2000 	strb.w	r2, [sl]
 800d3b8:	781a      	ldrb	r2, [r3, #0]
 800d3ba:	3201      	adds	r2, #1
 800d3bc:	701a      	strb	r2, [r3, #0]
 800d3be:	e7a0      	b.n	800d302 <_dtoa_r+0x622>
 800d3c0:	4b6f      	ldr	r3, [pc, #444]	@ (800d580 <_dtoa_r+0x8a0>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f7f3 f920 	bl	8000608 <__aeabi_dmul>
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	460d      	mov	r5, r1
 800d3d0:	f7f3 fb82 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	d09f      	beq.n	800d318 <_dtoa_r+0x638>
 800d3d8:	e7d1      	b.n	800d37e <_dtoa_r+0x69e>
 800d3da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3dc:	2a00      	cmp	r2, #0
 800d3de:	f000 80ea 	beq.w	800d5b6 <_dtoa_r+0x8d6>
 800d3e2:	9a07      	ldr	r2, [sp, #28]
 800d3e4:	2a01      	cmp	r2, #1
 800d3e6:	f300 80cd 	bgt.w	800d584 <_dtoa_r+0x8a4>
 800d3ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d3ec:	2a00      	cmp	r2, #0
 800d3ee:	f000 80c1 	beq.w	800d574 <_dtoa_r+0x894>
 800d3f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d3f6:	9c08      	ldr	r4, [sp, #32]
 800d3f8:	9e00      	ldr	r6, [sp, #0]
 800d3fa:	9a00      	ldr	r2, [sp, #0]
 800d3fc:	441a      	add	r2, r3
 800d3fe:	9200      	str	r2, [sp, #0]
 800d400:	9a06      	ldr	r2, [sp, #24]
 800d402:	2101      	movs	r1, #1
 800d404:	441a      	add	r2, r3
 800d406:	4648      	mov	r0, r9
 800d408:	9206      	str	r2, [sp, #24]
 800d40a:	f000 fc2d 	bl	800dc68 <__i2b>
 800d40e:	4605      	mov	r5, r0
 800d410:	b166      	cbz	r6, 800d42c <_dtoa_r+0x74c>
 800d412:	9b06      	ldr	r3, [sp, #24]
 800d414:	2b00      	cmp	r3, #0
 800d416:	dd09      	ble.n	800d42c <_dtoa_r+0x74c>
 800d418:	42b3      	cmp	r3, r6
 800d41a:	9a00      	ldr	r2, [sp, #0]
 800d41c:	bfa8      	it	ge
 800d41e:	4633      	movge	r3, r6
 800d420:	1ad2      	subs	r2, r2, r3
 800d422:	9200      	str	r2, [sp, #0]
 800d424:	9a06      	ldr	r2, [sp, #24]
 800d426:	1af6      	subs	r6, r6, r3
 800d428:	1ad3      	subs	r3, r2, r3
 800d42a:	9306      	str	r3, [sp, #24]
 800d42c:	9b08      	ldr	r3, [sp, #32]
 800d42e:	b30b      	cbz	r3, 800d474 <_dtoa_r+0x794>
 800d430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d432:	2b00      	cmp	r3, #0
 800d434:	f000 80c6 	beq.w	800d5c4 <_dtoa_r+0x8e4>
 800d438:	2c00      	cmp	r4, #0
 800d43a:	f000 80c0 	beq.w	800d5be <_dtoa_r+0x8de>
 800d43e:	4629      	mov	r1, r5
 800d440:	4622      	mov	r2, r4
 800d442:	4648      	mov	r0, r9
 800d444:	f000 fcc8 	bl	800ddd8 <__pow5mult>
 800d448:	9a02      	ldr	r2, [sp, #8]
 800d44a:	4601      	mov	r1, r0
 800d44c:	4605      	mov	r5, r0
 800d44e:	4648      	mov	r0, r9
 800d450:	f000 fc20 	bl	800dc94 <__multiply>
 800d454:	9902      	ldr	r1, [sp, #8]
 800d456:	4680      	mov	r8, r0
 800d458:	4648      	mov	r0, r9
 800d45a:	f000 fb51 	bl	800db00 <_Bfree>
 800d45e:	9b08      	ldr	r3, [sp, #32]
 800d460:	1b1b      	subs	r3, r3, r4
 800d462:	9308      	str	r3, [sp, #32]
 800d464:	f000 80b1 	beq.w	800d5ca <_dtoa_r+0x8ea>
 800d468:	9a08      	ldr	r2, [sp, #32]
 800d46a:	4641      	mov	r1, r8
 800d46c:	4648      	mov	r0, r9
 800d46e:	f000 fcb3 	bl	800ddd8 <__pow5mult>
 800d472:	9002      	str	r0, [sp, #8]
 800d474:	2101      	movs	r1, #1
 800d476:	4648      	mov	r0, r9
 800d478:	f000 fbf6 	bl	800dc68 <__i2b>
 800d47c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d47e:	4604      	mov	r4, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	f000 81d8 	beq.w	800d836 <_dtoa_r+0xb56>
 800d486:	461a      	mov	r2, r3
 800d488:	4601      	mov	r1, r0
 800d48a:	4648      	mov	r0, r9
 800d48c:	f000 fca4 	bl	800ddd8 <__pow5mult>
 800d490:	9b07      	ldr	r3, [sp, #28]
 800d492:	2b01      	cmp	r3, #1
 800d494:	4604      	mov	r4, r0
 800d496:	f300 809f 	bgt.w	800d5d8 <_dtoa_r+0x8f8>
 800d49a:	9b04      	ldr	r3, [sp, #16]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f040 8097 	bne.w	800d5d0 <_dtoa_r+0x8f0>
 800d4a2:	9b05      	ldr	r3, [sp, #20]
 800d4a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f040 8093 	bne.w	800d5d4 <_dtoa_r+0x8f4>
 800d4ae:	9b05      	ldr	r3, [sp, #20]
 800d4b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d4b4:	0d1b      	lsrs	r3, r3, #20
 800d4b6:	051b      	lsls	r3, r3, #20
 800d4b8:	b133      	cbz	r3, 800d4c8 <_dtoa_r+0x7e8>
 800d4ba:	9b00      	ldr	r3, [sp, #0]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	9b06      	ldr	r3, [sp, #24]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	9306      	str	r3, [sp, #24]
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	9308      	str	r3, [sp, #32]
 800d4ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	f000 81b8 	beq.w	800d842 <_dtoa_r+0xb62>
 800d4d2:	6923      	ldr	r3, [r4, #16]
 800d4d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d4d8:	6918      	ldr	r0, [r3, #16]
 800d4da:	f000 fb79 	bl	800dbd0 <__hi0bits>
 800d4de:	f1c0 0020 	rsb	r0, r0, #32
 800d4e2:	9b06      	ldr	r3, [sp, #24]
 800d4e4:	4418      	add	r0, r3
 800d4e6:	f010 001f 	ands.w	r0, r0, #31
 800d4ea:	f000 8082 	beq.w	800d5f2 <_dtoa_r+0x912>
 800d4ee:	f1c0 0320 	rsb	r3, r0, #32
 800d4f2:	2b04      	cmp	r3, #4
 800d4f4:	dd73      	ble.n	800d5de <_dtoa_r+0x8fe>
 800d4f6:	9b00      	ldr	r3, [sp, #0]
 800d4f8:	f1c0 001c 	rsb	r0, r0, #28
 800d4fc:	4403      	add	r3, r0
 800d4fe:	9300      	str	r3, [sp, #0]
 800d500:	9b06      	ldr	r3, [sp, #24]
 800d502:	4403      	add	r3, r0
 800d504:	4406      	add	r6, r0
 800d506:	9306      	str	r3, [sp, #24]
 800d508:	9b00      	ldr	r3, [sp, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	dd05      	ble.n	800d51a <_dtoa_r+0x83a>
 800d50e:	9902      	ldr	r1, [sp, #8]
 800d510:	461a      	mov	r2, r3
 800d512:	4648      	mov	r0, r9
 800d514:	f000 fcba 	bl	800de8c <__lshift>
 800d518:	9002      	str	r0, [sp, #8]
 800d51a:	9b06      	ldr	r3, [sp, #24]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	dd05      	ble.n	800d52c <_dtoa_r+0x84c>
 800d520:	4621      	mov	r1, r4
 800d522:	461a      	mov	r2, r3
 800d524:	4648      	mov	r0, r9
 800d526:	f000 fcb1 	bl	800de8c <__lshift>
 800d52a:	4604      	mov	r4, r0
 800d52c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d061      	beq.n	800d5f6 <_dtoa_r+0x916>
 800d532:	9802      	ldr	r0, [sp, #8]
 800d534:	4621      	mov	r1, r4
 800d536:	f000 fd15 	bl	800df64 <__mcmp>
 800d53a:	2800      	cmp	r0, #0
 800d53c:	da5b      	bge.n	800d5f6 <_dtoa_r+0x916>
 800d53e:	2300      	movs	r3, #0
 800d540:	9902      	ldr	r1, [sp, #8]
 800d542:	220a      	movs	r2, #10
 800d544:	4648      	mov	r0, r9
 800d546:	f000 fafd 	bl	800db44 <__multadd>
 800d54a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d54c:	9002      	str	r0, [sp, #8]
 800d54e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800d552:	2b00      	cmp	r3, #0
 800d554:	f000 8177 	beq.w	800d846 <_dtoa_r+0xb66>
 800d558:	4629      	mov	r1, r5
 800d55a:	2300      	movs	r3, #0
 800d55c:	220a      	movs	r2, #10
 800d55e:	4648      	mov	r0, r9
 800d560:	f000 faf0 	bl	800db44 <__multadd>
 800d564:	f1bb 0f00 	cmp.w	fp, #0
 800d568:	4605      	mov	r5, r0
 800d56a:	dc6f      	bgt.n	800d64c <_dtoa_r+0x96c>
 800d56c:	9b07      	ldr	r3, [sp, #28]
 800d56e:	2b02      	cmp	r3, #2
 800d570:	dc49      	bgt.n	800d606 <_dtoa_r+0x926>
 800d572:	e06b      	b.n	800d64c <_dtoa_r+0x96c>
 800d574:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d576:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d57a:	e73c      	b.n	800d3f6 <_dtoa_r+0x716>
 800d57c:	3fe00000 	.word	0x3fe00000
 800d580:	40240000 	.word	0x40240000
 800d584:	9b03      	ldr	r3, [sp, #12]
 800d586:	1e5c      	subs	r4, r3, #1
 800d588:	9b08      	ldr	r3, [sp, #32]
 800d58a:	42a3      	cmp	r3, r4
 800d58c:	db09      	blt.n	800d5a2 <_dtoa_r+0x8c2>
 800d58e:	1b1c      	subs	r4, r3, r4
 800d590:	9b03      	ldr	r3, [sp, #12]
 800d592:	2b00      	cmp	r3, #0
 800d594:	f6bf af30 	bge.w	800d3f8 <_dtoa_r+0x718>
 800d598:	9b00      	ldr	r3, [sp, #0]
 800d59a:	9a03      	ldr	r2, [sp, #12]
 800d59c:	1a9e      	subs	r6, r3, r2
 800d59e:	2300      	movs	r3, #0
 800d5a0:	e72b      	b.n	800d3fa <_dtoa_r+0x71a>
 800d5a2:	9b08      	ldr	r3, [sp, #32]
 800d5a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d5a6:	9408      	str	r4, [sp, #32]
 800d5a8:	1ae3      	subs	r3, r4, r3
 800d5aa:	441a      	add	r2, r3
 800d5ac:	9e00      	ldr	r6, [sp, #0]
 800d5ae:	9b03      	ldr	r3, [sp, #12]
 800d5b0:	920d      	str	r2, [sp, #52]	@ 0x34
 800d5b2:	2400      	movs	r4, #0
 800d5b4:	e721      	b.n	800d3fa <_dtoa_r+0x71a>
 800d5b6:	9c08      	ldr	r4, [sp, #32]
 800d5b8:	9e00      	ldr	r6, [sp, #0]
 800d5ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d5bc:	e728      	b.n	800d410 <_dtoa_r+0x730>
 800d5be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d5c2:	e751      	b.n	800d468 <_dtoa_r+0x788>
 800d5c4:	9a08      	ldr	r2, [sp, #32]
 800d5c6:	9902      	ldr	r1, [sp, #8]
 800d5c8:	e750      	b.n	800d46c <_dtoa_r+0x78c>
 800d5ca:	f8cd 8008 	str.w	r8, [sp, #8]
 800d5ce:	e751      	b.n	800d474 <_dtoa_r+0x794>
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	e779      	b.n	800d4c8 <_dtoa_r+0x7e8>
 800d5d4:	9b04      	ldr	r3, [sp, #16]
 800d5d6:	e777      	b.n	800d4c8 <_dtoa_r+0x7e8>
 800d5d8:	2300      	movs	r3, #0
 800d5da:	9308      	str	r3, [sp, #32]
 800d5dc:	e779      	b.n	800d4d2 <_dtoa_r+0x7f2>
 800d5de:	d093      	beq.n	800d508 <_dtoa_r+0x828>
 800d5e0:	9a00      	ldr	r2, [sp, #0]
 800d5e2:	331c      	adds	r3, #28
 800d5e4:	441a      	add	r2, r3
 800d5e6:	9200      	str	r2, [sp, #0]
 800d5e8:	9a06      	ldr	r2, [sp, #24]
 800d5ea:	441a      	add	r2, r3
 800d5ec:	441e      	add	r6, r3
 800d5ee:	9206      	str	r2, [sp, #24]
 800d5f0:	e78a      	b.n	800d508 <_dtoa_r+0x828>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	e7f4      	b.n	800d5e0 <_dtoa_r+0x900>
 800d5f6:	9b03      	ldr	r3, [sp, #12]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	46b8      	mov	r8, r7
 800d5fc:	dc20      	bgt.n	800d640 <_dtoa_r+0x960>
 800d5fe:	469b      	mov	fp, r3
 800d600:	9b07      	ldr	r3, [sp, #28]
 800d602:	2b02      	cmp	r3, #2
 800d604:	dd1e      	ble.n	800d644 <_dtoa_r+0x964>
 800d606:	f1bb 0f00 	cmp.w	fp, #0
 800d60a:	f47f adb1 	bne.w	800d170 <_dtoa_r+0x490>
 800d60e:	4621      	mov	r1, r4
 800d610:	465b      	mov	r3, fp
 800d612:	2205      	movs	r2, #5
 800d614:	4648      	mov	r0, r9
 800d616:	f000 fa95 	bl	800db44 <__multadd>
 800d61a:	4601      	mov	r1, r0
 800d61c:	4604      	mov	r4, r0
 800d61e:	9802      	ldr	r0, [sp, #8]
 800d620:	f000 fca0 	bl	800df64 <__mcmp>
 800d624:	2800      	cmp	r0, #0
 800d626:	f77f ada3 	ble.w	800d170 <_dtoa_r+0x490>
 800d62a:	4656      	mov	r6, sl
 800d62c:	2331      	movs	r3, #49	@ 0x31
 800d62e:	f806 3b01 	strb.w	r3, [r6], #1
 800d632:	f108 0801 	add.w	r8, r8, #1
 800d636:	e59f      	b.n	800d178 <_dtoa_r+0x498>
 800d638:	9c03      	ldr	r4, [sp, #12]
 800d63a:	46b8      	mov	r8, r7
 800d63c:	4625      	mov	r5, r4
 800d63e:	e7f4      	b.n	800d62a <_dtoa_r+0x94a>
 800d640:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d646:	2b00      	cmp	r3, #0
 800d648:	f000 8101 	beq.w	800d84e <_dtoa_r+0xb6e>
 800d64c:	2e00      	cmp	r6, #0
 800d64e:	dd05      	ble.n	800d65c <_dtoa_r+0x97c>
 800d650:	4629      	mov	r1, r5
 800d652:	4632      	mov	r2, r6
 800d654:	4648      	mov	r0, r9
 800d656:	f000 fc19 	bl	800de8c <__lshift>
 800d65a:	4605      	mov	r5, r0
 800d65c:	9b08      	ldr	r3, [sp, #32]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d05c      	beq.n	800d71c <_dtoa_r+0xa3c>
 800d662:	6869      	ldr	r1, [r5, #4]
 800d664:	4648      	mov	r0, r9
 800d666:	f000 fa0b 	bl	800da80 <_Balloc>
 800d66a:	4606      	mov	r6, r0
 800d66c:	b928      	cbnz	r0, 800d67a <_dtoa_r+0x99a>
 800d66e:	4b82      	ldr	r3, [pc, #520]	@ (800d878 <_dtoa_r+0xb98>)
 800d670:	4602      	mov	r2, r0
 800d672:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d676:	f7ff bb4a 	b.w	800cd0e <_dtoa_r+0x2e>
 800d67a:	692a      	ldr	r2, [r5, #16]
 800d67c:	3202      	adds	r2, #2
 800d67e:	0092      	lsls	r2, r2, #2
 800d680:	f105 010c 	add.w	r1, r5, #12
 800d684:	300c      	adds	r0, #12
 800d686:	f7ff fa94 	bl	800cbb2 <memcpy>
 800d68a:	2201      	movs	r2, #1
 800d68c:	4631      	mov	r1, r6
 800d68e:	4648      	mov	r0, r9
 800d690:	f000 fbfc 	bl	800de8c <__lshift>
 800d694:	f10a 0301 	add.w	r3, sl, #1
 800d698:	9300      	str	r3, [sp, #0]
 800d69a:	eb0a 030b 	add.w	r3, sl, fp
 800d69e:	9308      	str	r3, [sp, #32]
 800d6a0:	9b04      	ldr	r3, [sp, #16]
 800d6a2:	f003 0301 	and.w	r3, r3, #1
 800d6a6:	462f      	mov	r7, r5
 800d6a8:	9306      	str	r3, [sp, #24]
 800d6aa:	4605      	mov	r5, r0
 800d6ac:	9b00      	ldr	r3, [sp, #0]
 800d6ae:	9802      	ldr	r0, [sp, #8]
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800d6b6:	f7ff fa8a 	bl	800cbce <quorem>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	3330      	adds	r3, #48	@ 0x30
 800d6be:	9003      	str	r0, [sp, #12]
 800d6c0:	4639      	mov	r1, r7
 800d6c2:	9802      	ldr	r0, [sp, #8]
 800d6c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6c6:	f000 fc4d 	bl	800df64 <__mcmp>
 800d6ca:	462a      	mov	r2, r5
 800d6cc:	9004      	str	r0, [sp, #16]
 800d6ce:	4621      	mov	r1, r4
 800d6d0:	4648      	mov	r0, r9
 800d6d2:	f000 fc63 	bl	800df9c <__mdiff>
 800d6d6:	68c2      	ldr	r2, [r0, #12]
 800d6d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6da:	4606      	mov	r6, r0
 800d6dc:	bb02      	cbnz	r2, 800d720 <_dtoa_r+0xa40>
 800d6de:	4601      	mov	r1, r0
 800d6e0:	9802      	ldr	r0, [sp, #8]
 800d6e2:	f000 fc3f 	bl	800df64 <__mcmp>
 800d6e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	4631      	mov	r1, r6
 800d6ec:	4648      	mov	r0, r9
 800d6ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800d6f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6f2:	f000 fa05 	bl	800db00 <_Bfree>
 800d6f6:	9b07      	ldr	r3, [sp, #28]
 800d6f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d6fa:	9e00      	ldr	r6, [sp, #0]
 800d6fc:	ea42 0103 	orr.w	r1, r2, r3
 800d700:	9b06      	ldr	r3, [sp, #24]
 800d702:	4319      	orrs	r1, r3
 800d704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d706:	d10d      	bne.n	800d724 <_dtoa_r+0xa44>
 800d708:	2b39      	cmp	r3, #57	@ 0x39
 800d70a:	d027      	beq.n	800d75c <_dtoa_r+0xa7c>
 800d70c:	9a04      	ldr	r2, [sp, #16]
 800d70e:	2a00      	cmp	r2, #0
 800d710:	dd01      	ble.n	800d716 <_dtoa_r+0xa36>
 800d712:	9b03      	ldr	r3, [sp, #12]
 800d714:	3331      	adds	r3, #49	@ 0x31
 800d716:	f88b 3000 	strb.w	r3, [fp]
 800d71a:	e52e      	b.n	800d17a <_dtoa_r+0x49a>
 800d71c:	4628      	mov	r0, r5
 800d71e:	e7b9      	b.n	800d694 <_dtoa_r+0x9b4>
 800d720:	2201      	movs	r2, #1
 800d722:	e7e2      	b.n	800d6ea <_dtoa_r+0xa0a>
 800d724:	9904      	ldr	r1, [sp, #16]
 800d726:	2900      	cmp	r1, #0
 800d728:	db04      	blt.n	800d734 <_dtoa_r+0xa54>
 800d72a:	9807      	ldr	r0, [sp, #28]
 800d72c:	4301      	orrs	r1, r0
 800d72e:	9806      	ldr	r0, [sp, #24]
 800d730:	4301      	orrs	r1, r0
 800d732:	d120      	bne.n	800d776 <_dtoa_r+0xa96>
 800d734:	2a00      	cmp	r2, #0
 800d736:	ddee      	ble.n	800d716 <_dtoa_r+0xa36>
 800d738:	9902      	ldr	r1, [sp, #8]
 800d73a:	9300      	str	r3, [sp, #0]
 800d73c:	2201      	movs	r2, #1
 800d73e:	4648      	mov	r0, r9
 800d740:	f000 fba4 	bl	800de8c <__lshift>
 800d744:	4621      	mov	r1, r4
 800d746:	9002      	str	r0, [sp, #8]
 800d748:	f000 fc0c 	bl	800df64 <__mcmp>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	9b00      	ldr	r3, [sp, #0]
 800d750:	dc02      	bgt.n	800d758 <_dtoa_r+0xa78>
 800d752:	d1e0      	bne.n	800d716 <_dtoa_r+0xa36>
 800d754:	07da      	lsls	r2, r3, #31
 800d756:	d5de      	bpl.n	800d716 <_dtoa_r+0xa36>
 800d758:	2b39      	cmp	r3, #57	@ 0x39
 800d75a:	d1da      	bne.n	800d712 <_dtoa_r+0xa32>
 800d75c:	2339      	movs	r3, #57	@ 0x39
 800d75e:	f88b 3000 	strb.w	r3, [fp]
 800d762:	4633      	mov	r3, r6
 800d764:	461e      	mov	r6, r3
 800d766:	3b01      	subs	r3, #1
 800d768:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d76c:	2a39      	cmp	r2, #57	@ 0x39
 800d76e:	d04e      	beq.n	800d80e <_dtoa_r+0xb2e>
 800d770:	3201      	adds	r2, #1
 800d772:	701a      	strb	r2, [r3, #0]
 800d774:	e501      	b.n	800d17a <_dtoa_r+0x49a>
 800d776:	2a00      	cmp	r2, #0
 800d778:	dd03      	ble.n	800d782 <_dtoa_r+0xaa2>
 800d77a:	2b39      	cmp	r3, #57	@ 0x39
 800d77c:	d0ee      	beq.n	800d75c <_dtoa_r+0xa7c>
 800d77e:	3301      	adds	r3, #1
 800d780:	e7c9      	b.n	800d716 <_dtoa_r+0xa36>
 800d782:	9a00      	ldr	r2, [sp, #0]
 800d784:	9908      	ldr	r1, [sp, #32]
 800d786:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d78a:	428a      	cmp	r2, r1
 800d78c:	d028      	beq.n	800d7e0 <_dtoa_r+0xb00>
 800d78e:	9902      	ldr	r1, [sp, #8]
 800d790:	2300      	movs	r3, #0
 800d792:	220a      	movs	r2, #10
 800d794:	4648      	mov	r0, r9
 800d796:	f000 f9d5 	bl	800db44 <__multadd>
 800d79a:	42af      	cmp	r7, r5
 800d79c:	9002      	str	r0, [sp, #8]
 800d79e:	f04f 0300 	mov.w	r3, #0
 800d7a2:	f04f 020a 	mov.w	r2, #10
 800d7a6:	4639      	mov	r1, r7
 800d7a8:	4648      	mov	r0, r9
 800d7aa:	d107      	bne.n	800d7bc <_dtoa_r+0xadc>
 800d7ac:	f000 f9ca 	bl	800db44 <__multadd>
 800d7b0:	4607      	mov	r7, r0
 800d7b2:	4605      	mov	r5, r0
 800d7b4:	9b00      	ldr	r3, [sp, #0]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	9300      	str	r3, [sp, #0]
 800d7ba:	e777      	b.n	800d6ac <_dtoa_r+0x9cc>
 800d7bc:	f000 f9c2 	bl	800db44 <__multadd>
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	4607      	mov	r7, r0
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	220a      	movs	r2, #10
 800d7c8:	4648      	mov	r0, r9
 800d7ca:	f000 f9bb 	bl	800db44 <__multadd>
 800d7ce:	4605      	mov	r5, r0
 800d7d0:	e7f0      	b.n	800d7b4 <_dtoa_r+0xad4>
 800d7d2:	f1bb 0f00 	cmp.w	fp, #0
 800d7d6:	bfcc      	ite	gt
 800d7d8:	465e      	movgt	r6, fp
 800d7da:	2601      	movle	r6, #1
 800d7dc:	4456      	add	r6, sl
 800d7de:	2700      	movs	r7, #0
 800d7e0:	9902      	ldr	r1, [sp, #8]
 800d7e2:	9300      	str	r3, [sp, #0]
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	4648      	mov	r0, r9
 800d7e8:	f000 fb50 	bl	800de8c <__lshift>
 800d7ec:	4621      	mov	r1, r4
 800d7ee:	9002      	str	r0, [sp, #8]
 800d7f0:	f000 fbb8 	bl	800df64 <__mcmp>
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	dcb4      	bgt.n	800d762 <_dtoa_r+0xa82>
 800d7f8:	d102      	bne.n	800d800 <_dtoa_r+0xb20>
 800d7fa:	9b00      	ldr	r3, [sp, #0]
 800d7fc:	07db      	lsls	r3, r3, #31
 800d7fe:	d4b0      	bmi.n	800d762 <_dtoa_r+0xa82>
 800d800:	4633      	mov	r3, r6
 800d802:	461e      	mov	r6, r3
 800d804:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d808:	2a30      	cmp	r2, #48	@ 0x30
 800d80a:	d0fa      	beq.n	800d802 <_dtoa_r+0xb22>
 800d80c:	e4b5      	b.n	800d17a <_dtoa_r+0x49a>
 800d80e:	459a      	cmp	sl, r3
 800d810:	d1a8      	bne.n	800d764 <_dtoa_r+0xa84>
 800d812:	2331      	movs	r3, #49	@ 0x31
 800d814:	f108 0801 	add.w	r8, r8, #1
 800d818:	f88a 3000 	strb.w	r3, [sl]
 800d81c:	e4ad      	b.n	800d17a <_dtoa_r+0x49a>
 800d81e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d820:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d87c <_dtoa_r+0xb9c>
 800d824:	b11b      	cbz	r3, 800d82e <_dtoa_r+0xb4e>
 800d826:	f10a 0308 	add.w	r3, sl, #8
 800d82a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d82c:	6013      	str	r3, [r2, #0]
 800d82e:	4650      	mov	r0, sl
 800d830:	b017      	add	sp, #92	@ 0x5c
 800d832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d836:	9b07      	ldr	r3, [sp, #28]
 800d838:	2b01      	cmp	r3, #1
 800d83a:	f77f ae2e 	ble.w	800d49a <_dtoa_r+0x7ba>
 800d83e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d840:	9308      	str	r3, [sp, #32]
 800d842:	2001      	movs	r0, #1
 800d844:	e64d      	b.n	800d4e2 <_dtoa_r+0x802>
 800d846:	f1bb 0f00 	cmp.w	fp, #0
 800d84a:	f77f aed9 	ble.w	800d600 <_dtoa_r+0x920>
 800d84e:	4656      	mov	r6, sl
 800d850:	9802      	ldr	r0, [sp, #8]
 800d852:	4621      	mov	r1, r4
 800d854:	f7ff f9bb 	bl	800cbce <quorem>
 800d858:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d85c:	f806 3b01 	strb.w	r3, [r6], #1
 800d860:	eba6 020a 	sub.w	r2, r6, sl
 800d864:	4593      	cmp	fp, r2
 800d866:	ddb4      	ble.n	800d7d2 <_dtoa_r+0xaf2>
 800d868:	9902      	ldr	r1, [sp, #8]
 800d86a:	2300      	movs	r3, #0
 800d86c:	220a      	movs	r2, #10
 800d86e:	4648      	mov	r0, r9
 800d870:	f000 f968 	bl	800db44 <__multadd>
 800d874:	9002      	str	r0, [sp, #8]
 800d876:	e7eb      	b.n	800d850 <_dtoa_r+0xb70>
 800d878:	0800f022 	.word	0x0800f022
 800d87c:	0800efa6 	.word	0x0800efa6

0800d880 <_free_r>:
 800d880:	b538      	push	{r3, r4, r5, lr}
 800d882:	4605      	mov	r5, r0
 800d884:	2900      	cmp	r1, #0
 800d886:	d041      	beq.n	800d90c <_free_r+0x8c>
 800d888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d88c:	1f0c      	subs	r4, r1, #4
 800d88e:	2b00      	cmp	r3, #0
 800d890:	bfb8      	it	lt
 800d892:	18e4      	addlt	r4, r4, r3
 800d894:	f000 f8e8 	bl	800da68 <__malloc_lock>
 800d898:	4a1d      	ldr	r2, [pc, #116]	@ (800d910 <_free_r+0x90>)
 800d89a:	6813      	ldr	r3, [r2, #0]
 800d89c:	b933      	cbnz	r3, 800d8ac <_free_r+0x2c>
 800d89e:	6063      	str	r3, [r4, #4]
 800d8a0:	6014      	str	r4, [r2, #0]
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8a8:	f000 b8e4 	b.w	800da74 <__malloc_unlock>
 800d8ac:	42a3      	cmp	r3, r4
 800d8ae:	d908      	bls.n	800d8c2 <_free_r+0x42>
 800d8b0:	6820      	ldr	r0, [r4, #0]
 800d8b2:	1821      	adds	r1, r4, r0
 800d8b4:	428b      	cmp	r3, r1
 800d8b6:	bf01      	itttt	eq
 800d8b8:	6819      	ldreq	r1, [r3, #0]
 800d8ba:	685b      	ldreq	r3, [r3, #4]
 800d8bc:	1809      	addeq	r1, r1, r0
 800d8be:	6021      	streq	r1, [r4, #0]
 800d8c0:	e7ed      	b.n	800d89e <_free_r+0x1e>
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	b10b      	cbz	r3, 800d8cc <_free_r+0x4c>
 800d8c8:	42a3      	cmp	r3, r4
 800d8ca:	d9fa      	bls.n	800d8c2 <_free_r+0x42>
 800d8cc:	6811      	ldr	r1, [r2, #0]
 800d8ce:	1850      	adds	r0, r2, r1
 800d8d0:	42a0      	cmp	r0, r4
 800d8d2:	d10b      	bne.n	800d8ec <_free_r+0x6c>
 800d8d4:	6820      	ldr	r0, [r4, #0]
 800d8d6:	4401      	add	r1, r0
 800d8d8:	1850      	adds	r0, r2, r1
 800d8da:	4283      	cmp	r3, r0
 800d8dc:	6011      	str	r1, [r2, #0]
 800d8de:	d1e0      	bne.n	800d8a2 <_free_r+0x22>
 800d8e0:	6818      	ldr	r0, [r3, #0]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	6053      	str	r3, [r2, #4]
 800d8e6:	4408      	add	r0, r1
 800d8e8:	6010      	str	r0, [r2, #0]
 800d8ea:	e7da      	b.n	800d8a2 <_free_r+0x22>
 800d8ec:	d902      	bls.n	800d8f4 <_free_r+0x74>
 800d8ee:	230c      	movs	r3, #12
 800d8f0:	602b      	str	r3, [r5, #0]
 800d8f2:	e7d6      	b.n	800d8a2 <_free_r+0x22>
 800d8f4:	6820      	ldr	r0, [r4, #0]
 800d8f6:	1821      	adds	r1, r4, r0
 800d8f8:	428b      	cmp	r3, r1
 800d8fa:	bf04      	itt	eq
 800d8fc:	6819      	ldreq	r1, [r3, #0]
 800d8fe:	685b      	ldreq	r3, [r3, #4]
 800d900:	6063      	str	r3, [r4, #4]
 800d902:	bf04      	itt	eq
 800d904:	1809      	addeq	r1, r1, r0
 800d906:	6021      	streq	r1, [r4, #0]
 800d908:	6054      	str	r4, [r2, #4]
 800d90a:	e7ca      	b.n	800d8a2 <_free_r+0x22>
 800d90c:	bd38      	pop	{r3, r4, r5, pc}
 800d90e:	bf00      	nop
 800d910:	200021f8 	.word	0x200021f8

0800d914 <malloc>:
 800d914:	4b02      	ldr	r3, [pc, #8]	@ (800d920 <malloc+0xc>)
 800d916:	4601      	mov	r1, r0
 800d918:	6818      	ldr	r0, [r3, #0]
 800d91a:	f000 b825 	b.w	800d968 <_malloc_r>
 800d91e:	bf00      	nop
 800d920:	20000110 	.word	0x20000110

0800d924 <sbrk_aligned>:
 800d924:	b570      	push	{r4, r5, r6, lr}
 800d926:	4e0f      	ldr	r6, [pc, #60]	@ (800d964 <sbrk_aligned+0x40>)
 800d928:	460c      	mov	r4, r1
 800d92a:	6831      	ldr	r1, [r6, #0]
 800d92c:	4605      	mov	r5, r0
 800d92e:	b911      	cbnz	r1, 800d936 <sbrk_aligned+0x12>
 800d930:	f001 f804 	bl	800e93c <_sbrk_r>
 800d934:	6030      	str	r0, [r6, #0]
 800d936:	4621      	mov	r1, r4
 800d938:	4628      	mov	r0, r5
 800d93a:	f000 ffff 	bl	800e93c <_sbrk_r>
 800d93e:	1c43      	adds	r3, r0, #1
 800d940:	d103      	bne.n	800d94a <sbrk_aligned+0x26>
 800d942:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d946:	4620      	mov	r0, r4
 800d948:	bd70      	pop	{r4, r5, r6, pc}
 800d94a:	1cc4      	adds	r4, r0, #3
 800d94c:	f024 0403 	bic.w	r4, r4, #3
 800d950:	42a0      	cmp	r0, r4
 800d952:	d0f8      	beq.n	800d946 <sbrk_aligned+0x22>
 800d954:	1a21      	subs	r1, r4, r0
 800d956:	4628      	mov	r0, r5
 800d958:	f000 fff0 	bl	800e93c <_sbrk_r>
 800d95c:	3001      	adds	r0, #1
 800d95e:	d1f2      	bne.n	800d946 <sbrk_aligned+0x22>
 800d960:	e7ef      	b.n	800d942 <sbrk_aligned+0x1e>
 800d962:	bf00      	nop
 800d964:	200021f4 	.word	0x200021f4

0800d968 <_malloc_r>:
 800d968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d96c:	1ccd      	adds	r5, r1, #3
 800d96e:	f025 0503 	bic.w	r5, r5, #3
 800d972:	3508      	adds	r5, #8
 800d974:	2d0c      	cmp	r5, #12
 800d976:	bf38      	it	cc
 800d978:	250c      	movcc	r5, #12
 800d97a:	2d00      	cmp	r5, #0
 800d97c:	4606      	mov	r6, r0
 800d97e:	db01      	blt.n	800d984 <_malloc_r+0x1c>
 800d980:	42a9      	cmp	r1, r5
 800d982:	d904      	bls.n	800d98e <_malloc_r+0x26>
 800d984:	230c      	movs	r3, #12
 800d986:	6033      	str	r3, [r6, #0]
 800d988:	2000      	movs	r0, #0
 800d98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d98e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800da64 <_malloc_r+0xfc>
 800d992:	f000 f869 	bl	800da68 <__malloc_lock>
 800d996:	f8d8 3000 	ldr.w	r3, [r8]
 800d99a:	461c      	mov	r4, r3
 800d99c:	bb44      	cbnz	r4, 800d9f0 <_malloc_r+0x88>
 800d99e:	4629      	mov	r1, r5
 800d9a0:	4630      	mov	r0, r6
 800d9a2:	f7ff ffbf 	bl	800d924 <sbrk_aligned>
 800d9a6:	1c43      	adds	r3, r0, #1
 800d9a8:	4604      	mov	r4, r0
 800d9aa:	d158      	bne.n	800da5e <_malloc_r+0xf6>
 800d9ac:	f8d8 4000 	ldr.w	r4, [r8]
 800d9b0:	4627      	mov	r7, r4
 800d9b2:	2f00      	cmp	r7, #0
 800d9b4:	d143      	bne.n	800da3e <_malloc_r+0xd6>
 800d9b6:	2c00      	cmp	r4, #0
 800d9b8:	d04b      	beq.n	800da52 <_malloc_r+0xea>
 800d9ba:	6823      	ldr	r3, [r4, #0]
 800d9bc:	4639      	mov	r1, r7
 800d9be:	4630      	mov	r0, r6
 800d9c0:	eb04 0903 	add.w	r9, r4, r3
 800d9c4:	f000 ffba 	bl	800e93c <_sbrk_r>
 800d9c8:	4581      	cmp	r9, r0
 800d9ca:	d142      	bne.n	800da52 <_malloc_r+0xea>
 800d9cc:	6821      	ldr	r1, [r4, #0]
 800d9ce:	1a6d      	subs	r5, r5, r1
 800d9d0:	4629      	mov	r1, r5
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	f7ff ffa6 	bl	800d924 <sbrk_aligned>
 800d9d8:	3001      	adds	r0, #1
 800d9da:	d03a      	beq.n	800da52 <_malloc_r+0xea>
 800d9dc:	6823      	ldr	r3, [r4, #0]
 800d9de:	442b      	add	r3, r5
 800d9e0:	6023      	str	r3, [r4, #0]
 800d9e2:	f8d8 3000 	ldr.w	r3, [r8]
 800d9e6:	685a      	ldr	r2, [r3, #4]
 800d9e8:	bb62      	cbnz	r2, 800da44 <_malloc_r+0xdc>
 800d9ea:	f8c8 7000 	str.w	r7, [r8]
 800d9ee:	e00f      	b.n	800da10 <_malloc_r+0xa8>
 800d9f0:	6822      	ldr	r2, [r4, #0]
 800d9f2:	1b52      	subs	r2, r2, r5
 800d9f4:	d420      	bmi.n	800da38 <_malloc_r+0xd0>
 800d9f6:	2a0b      	cmp	r2, #11
 800d9f8:	d917      	bls.n	800da2a <_malloc_r+0xc2>
 800d9fa:	1961      	adds	r1, r4, r5
 800d9fc:	42a3      	cmp	r3, r4
 800d9fe:	6025      	str	r5, [r4, #0]
 800da00:	bf18      	it	ne
 800da02:	6059      	strne	r1, [r3, #4]
 800da04:	6863      	ldr	r3, [r4, #4]
 800da06:	bf08      	it	eq
 800da08:	f8c8 1000 	streq.w	r1, [r8]
 800da0c:	5162      	str	r2, [r4, r5]
 800da0e:	604b      	str	r3, [r1, #4]
 800da10:	4630      	mov	r0, r6
 800da12:	f000 f82f 	bl	800da74 <__malloc_unlock>
 800da16:	f104 000b 	add.w	r0, r4, #11
 800da1a:	1d23      	adds	r3, r4, #4
 800da1c:	f020 0007 	bic.w	r0, r0, #7
 800da20:	1ac2      	subs	r2, r0, r3
 800da22:	bf1c      	itt	ne
 800da24:	1a1b      	subne	r3, r3, r0
 800da26:	50a3      	strne	r3, [r4, r2]
 800da28:	e7af      	b.n	800d98a <_malloc_r+0x22>
 800da2a:	6862      	ldr	r2, [r4, #4]
 800da2c:	42a3      	cmp	r3, r4
 800da2e:	bf0c      	ite	eq
 800da30:	f8c8 2000 	streq.w	r2, [r8]
 800da34:	605a      	strne	r2, [r3, #4]
 800da36:	e7eb      	b.n	800da10 <_malloc_r+0xa8>
 800da38:	4623      	mov	r3, r4
 800da3a:	6864      	ldr	r4, [r4, #4]
 800da3c:	e7ae      	b.n	800d99c <_malloc_r+0x34>
 800da3e:	463c      	mov	r4, r7
 800da40:	687f      	ldr	r7, [r7, #4]
 800da42:	e7b6      	b.n	800d9b2 <_malloc_r+0x4a>
 800da44:	461a      	mov	r2, r3
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	42a3      	cmp	r3, r4
 800da4a:	d1fb      	bne.n	800da44 <_malloc_r+0xdc>
 800da4c:	2300      	movs	r3, #0
 800da4e:	6053      	str	r3, [r2, #4]
 800da50:	e7de      	b.n	800da10 <_malloc_r+0xa8>
 800da52:	230c      	movs	r3, #12
 800da54:	6033      	str	r3, [r6, #0]
 800da56:	4630      	mov	r0, r6
 800da58:	f000 f80c 	bl	800da74 <__malloc_unlock>
 800da5c:	e794      	b.n	800d988 <_malloc_r+0x20>
 800da5e:	6005      	str	r5, [r0, #0]
 800da60:	e7d6      	b.n	800da10 <_malloc_r+0xa8>
 800da62:	bf00      	nop
 800da64:	200021f8 	.word	0x200021f8

0800da68 <__malloc_lock>:
 800da68:	4801      	ldr	r0, [pc, #4]	@ (800da70 <__malloc_lock+0x8>)
 800da6a:	f7ff b8a0 	b.w	800cbae <__retarget_lock_acquire_recursive>
 800da6e:	bf00      	nop
 800da70:	200021f0 	.word	0x200021f0

0800da74 <__malloc_unlock>:
 800da74:	4801      	ldr	r0, [pc, #4]	@ (800da7c <__malloc_unlock+0x8>)
 800da76:	f7ff b89b 	b.w	800cbb0 <__retarget_lock_release_recursive>
 800da7a:	bf00      	nop
 800da7c:	200021f0 	.word	0x200021f0

0800da80 <_Balloc>:
 800da80:	b570      	push	{r4, r5, r6, lr}
 800da82:	69c6      	ldr	r6, [r0, #28]
 800da84:	4604      	mov	r4, r0
 800da86:	460d      	mov	r5, r1
 800da88:	b976      	cbnz	r6, 800daa8 <_Balloc+0x28>
 800da8a:	2010      	movs	r0, #16
 800da8c:	f7ff ff42 	bl	800d914 <malloc>
 800da90:	4602      	mov	r2, r0
 800da92:	61e0      	str	r0, [r4, #28]
 800da94:	b920      	cbnz	r0, 800daa0 <_Balloc+0x20>
 800da96:	4b18      	ldr	r3, [pc, #96]	@ (800daf8 <_Balloc+0x78>)
 800da98:	4818      	ldr	r0, [pc, #96]	@ (800dafc <_Balloc+0x7c>)
 800da9a:	216b      	movs	r1, #107	@ 0x6b
 800da9c:	f000 ff5e 	bl	800e95c <__assert_func>
 800daa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800daa4:	6006      	str	r6, [r0, #0]
 800daa6:	60c6      	str	r6, [r0, #12]
 800daa8:	69e6      	ldr	r6, [r4, #28]
 800daaa:	68f3      	ldr	r3, [r6, #12]
 800daac:	b183      	cbz	r3, 800dad0 <_Balloc+0x50>
 800daae:	69e3      	ldr	r3, [r4, #28]
 800dab0:	68db      	ldr	r3, [r3, #12]
 800dab2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dab6:	b9b8      	cbnz	r0, 800dae8 <_Balloc+0x68>
 800dab8:	2101      	movs	r1, #1
 800daba:	fa01 f605 	lsl.w	r6, r1, r5
 800dabe:	1d72      	adds	r2, r6, #5
 800dac0:	0092      	lsls	r2, r2, #2
 800dac2:	4620      	mov	r0, r4
 800dac4:	f000 ff68 	bl	800e998 <_calloc_r>
 800dac8:	b160      	cbz	r0, 800dae4 <_Balloc+0x64>
 800daca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dace:	e00e      	b.n	800daee <_Balloc+0x6e>
 800dad0:	2221      	movs	r2, #33	@ 0x21
 800dad2:	2104      	movs	r1, #4
 800dad4:	4620      	mov	r0, r4
 800dad6:	f000 ff5f 	bl	800e998 <_calloc_r>
 800dada:	69e3      	ldr	r3, [r4, #28]
 800dadc:	60f0      	str	r0, [r6, #12]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d1e4      	bne.n	800daae <_Balloc+0x2e>
 800dae4:	2000      	movs	r0, #0
 800dae6:	bd70      	pop	{r4, r5, r6, pc}
 800dae8:	6802      	ldr	r2, [r0, #0]
 800daea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800daee:	2300      	movs	r3, #0
 800daf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800daf4:	e7f7      	b.n	800dae6 <_Balloc+0x66>
 800daf6:	bf00      	nop
 800daf8:	0800efb3 	.word	0x0800efb3
 800dafc:	0800f033 	.word	0x0800f033

0800db00 <_Bfree>:
 800db00:	b570      	push	{r4, r5, r6, lr}
 800db02:	69c6      	ldr	r6, [r0, #28]
 800db04:	4605      	mov	r5, r0
 800db06:	460c      	mov	r4, r1
 800db08:	b976      	cbnz	r6, 800db28 <_Bfree+0x28>
 800db0a:	2010      	movs	r0, #16
 800db0c:	f7ff ff02 	bl	800d914 <malloc>
 800db10:	4602      	mov	r2, r0
 800db12:	61e8      	str	r0, [r5, #28]
 800db14:	b920      	cbnz	r0, 800db20 <_Bfree+0x20>
 800db16:	4b09      	ldr	r3, [pc, #36]	@ (800db3c <_Bfree+0x3c>)
 800db18:	4809      	ldr	r0, [pc, #36]	@ (800db40 <_Bfree+0x40>)
 800db1a:	218f      	movs	r1, #143	@ 0x8f
 800db1c:	f000 ff1e 	bl	800e95c <__assert_func>
 800db20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db24:	6006      	str	r6, [r0, #0]
 800db26:	60c6      	str	r6, [r0, #12]
 800db28:	b13c      	cbz	r4, 800db3a <_Bfree+0x3a>
 800db2a:	69eb      	ldr	r3, [r5, #28]
 800db2c:	6862      	ldr	r2, [r4, #4]
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db34:	6021      	str	r1, [r4, #0]
 800db36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800db3a:	bd70      	pop	{r4, r5, r6, pc}
 800db3c:	0800efb3 	.word	0x0800efb3
 800db40:	0800f033 	.word	0x0800f033

0800db44 <__multadd>:
 800db44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db48:	690d      	ldr	r5, [r1, #16]
 800db4a:	4607      	mov	r7, r0
 800db4c:	460c      	mov	r4, r1
 800db4e:	461e      	mov	r6, r3
 800db50:	f101 0c14 	add.w	ip, r1, #20
 800db54:	2000      	movs	r0, #0
 800db56:	f8dc 3000 	ldr.w	r3, [ip]
 800db5a:	b299      	uxth	r1, r3
 800db5c:	fb02 6101 	mla	r1, r2, r1, r6
 800db60:	0c1e      	lsrs	r6, r3, #16
 800db62:	0c0b      	lsrs	r3, r1, #16
 800db64:	fb02 3306 	mla	r3, r2, r6, r3
 800db68:	b289      	uxth	r1, r1
 800db6a:	3001      	adds	r0, #1
 800db6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db70:	4285      	cmp	r5, r0
 800db72:	f84c 1b04 	str.w	r1, [ip], #4
 800db76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db7a:	dcec      	bgt.n	800db56 <__multadd+0x12>
 800db7c:	b30e      	cbz	r6, 800dbc2 <__multadd+0x7e>
 800db7e:	68a3      	ldr	r3, [r4, #8]
 800db80:	42ab      	cmp	r3, r5
 800db82:	dc19      	bgt.n	800dbb8 <__multadd+0x74>
 800db84:	6861      	ldr	r1, [r4, #4]
 800db86:	4638      	mov	r0, r7
 800db88:	3101      	adds	r1, #1
 800db8a:	f7ff ff79 	bl	800da80 <_Balloc>
 800db8e:	4680      	mov	r8, r0
 800db90:	b928      	cbnz	r0, 800db9e <__multadd+0x5a>
 800db92:	4602      	mov	r2, r0
 800db94:	4b0c      	ldr	r3, [pc, #48]	@ (800dbc8 <__multadd+0x84>)
 800db96:	480d      	ldr	r0, [pc, #52]	@ (800dbcc <__multadd+0x88>)
 800db98:	21ba      	movs	r1, #186	@ 0xba
 800db9a:	f000 fedf 	bl	800e95c <__assert_func>
 800db9e:	6922      	ldr	r2, [r4, #16]
 800dba0:	3202      	adds	r2, #2
 800dba2:	f104 010c 	add.w	r1, r4, #12
 800dba6:	0092      	lsls	r2, r2, #2
 800dba8:	300c      	adds	r0, #12
 800dbaa:	f7ff f802 	bl	800cbb2 <memcpy>
 800dbae:	4621      	mov	r1, r4
 800dbb0:	4638      	mov	r0, r7
 800dbb2:	f7ff ffa5 	bl	800db00 <_Bfree>
 800dbb6:	4644      	mov	r4, r8
 800dbb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dbbc:	3501      	adds	r5, #1
 800dbbe:	615e      	str	r6, [r3, #20]
 800dbc0:	6125      	str	r5, [r4, #16]
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbc8:	0800f022 	.word	0x0800f022
 800dbcc:	0800f033 	.word	0x0800f033

0800dbd0 <__hi0bits>:
 800dbd0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	bf36      	itet	cc
 800dbd8:	0403      	lslcc	r3, r0, #16
 800dbda:	2000      	movcs	r0, #0
 800dbdc:	2010      	movcc	r0, #16
 800dbde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dbe2:	bf3c      	itt	cc
 800dbe4:	021b      	lslcc	r3, r3, #8
 800dbe6:	3008      	addcc	r0, #8
 800dbe8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dbec:	bf3c      	itt	cc
 800dbee:	011b      	lslcc	r3, r3, #4
 800dbf0:	3004      	addcc	r0, #4
 800dbf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbf6:	bf3c      	itt	cc
 800dbf8:	009b      	lslcc	r3, r3, #2
 800dbfa:	3002      	addcc	r0, #2
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	db05      	blt.n	800dc0c <__hi0bits+0x3c>
 800dc00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dc04:	f100 0001 	add.w	r0, r0, #1
 800dc08:	bf08      	it	eq
 800dc0a:	2020      	moveq	r0, #32
 800dc0c:	4770      	bx	lr

0800dc0e <__lo0bits>:
 800dc0e:	6803      	ldr	r3, [r0, #0]
 800dc10:	4602      	mov	r2, r0
 800dc12:	f013 0007 	ands.w	r0, r3, #7
 800dc16:	d00b      	beq.n	800dc30 <__lo0bits+0x22>
 800dc18:	07d9      	lsls	r1, r3, #31
 800dc1a:	d421      	bmi.n	800dc60 <__lo0bits+0x52>
 800dc1c:	0798      	lsls	r0, r3, #30
 800dc1e:	bf49      	itett	mi
 800dc20:	085b      	lsrmi	r3, r3, #1
 800dc22:	089b      	lsrpl	r3, r3, #2
 800dc24:	2001      	movmi	r0, #1
 800dc26:	6013      	strmi	r3, [r2, #0]
 800dc28:	bf5c      	itt	pl
 800dc2a:	6013      	strpl	r3, [r2, #0]
 800dc2c:	2002      	movpl	r0, #2
 800dc2e:	4770      	bx	lr
 800dc30:	b299      	uxth	r1, r3
 800dc32:	b909      	cbnz	r1, 800dc38 <__lo0bits+0x2a>
 800dc34:	0c1b      	lsrs	r3, r3, #16
 800dc36:	2010      	movs	r0, #16
 800dc38:	b2d9      	uxtb	r1, r3
 800dc3a:	b909      	cbnz	r1, 800dc40 <__lo0bits+0x32>
 800dc3c:	3008      	adds	r0, #8
 800dc3e:	0a1b      	lsrs	r3, r3, #8
 800dc40:	0719      	lsls	r1, r3, #28
 800dc42:	bf04      	itt	eq
 800dc44:	091b      	lsreq	r3, r3, #4
 800dc46:	3004      	addeq	r0, #4
 800dc48:	0799      	lsls	r1, r3, #30
 800dc4a:	bf04      	itt	eq
 800dc4c:	089b      	lsreq	r3, r3, #2
 800dc4e:	3002      	addeq	r0, #2
 800dc50:	07d9      	lsls	r1, r3, #31
 800dc52:	d403      	bmi.n	800dc5c <__lo0bits+0x4e>
 800dc54:	085b      	lsrs	r3, r3, #1
 800dc56:	f100 0001 	add.w	r0, r0, #1
 800dc5a:	d003      	beq.n	800dc64 <__lo0bits+0x56>
 800dc5c:	6013      	str	r3, [r2, #0]
 800dc5e:	4770      	bx	lr
 800dc60:	2000      	movs	r0, #0
 800dc62:	4770      	bx	lr
 800dc64:	2020      	movs	r0, #32
 800dc66:	4770      	bx	lr

0800dc68 <__i2b>:
 800dc68:	b510      	push	{r4, lr}
 800dc6a:	460c      	mov	r4, r1
 800dc6c:	2101      	movs	r1, #1
 800dc6e:	f7ff ff07 	bl	800da80 <_Balloc>
 800dc72:	4602      	mov	r2, r0
 800dc74:	b928      	cbnz	r0, 800dc82 <__i2b+0x1a>
 800dc76:	4b05      	ldr	r3, [pc, #20]	@ (800dc8c <__i2b+0x24>)
 800dc78:	4805      	ldr	r0, [pc, #20]	@ (800dc90 <__i2b+0x28>)
 800dc7a:	f240 1145 	movw	r1, #325	@ 0x145
 800dc7e:	f000 fe6d 	bl	800e95c <__assert_func>
 800dc82:	2301      	movs	r3, #1
 800dc84:	6144      	str	r4, [r0, #20]
 800dc86:	6103      	str	r3, [r0, #16]
 800dc88:	bd10      	pop	{r4, pc}
 800dc8a:	bf00      	nop
 800dc8c:	0800f022 	.word	0x0800f022
 800dc90:	0800f033 	.word	0x0800f033

0800dc94 <__multiply>:
 800dc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc98:	4617      	mov	r7, r2
 800dc9a:	690a      	ldr	r2, [r1, #16]
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	bfa8      	it	ge
 800dca2:	463b      	movge	r3, r7
 800dca4:	4689      	mov	r9, r1
 800dca6:	bfa4      	itt	ge
 800dca8:	460f      	movge	r7, r1
 800dcaa:	4699      	movge	r9, r3
 800dcac:	693d      	ldr	r5, [r7, #16]
 800dcae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	6879      	ldr	r1, [r7, #4]
 800dcb6:	eb05 060a 	add.w	r6, r5, sl
 800dcba:	42b3      	cmp	r3, r6
 800dcbc:	b085      	sub	sp, #20
 800dcbe:	bfb8      	it	lt
 800dcc0:	3101      	addlt	r1, #1
 800dcc2:	f7ff fedd 	bl	800da80 <_Balloc>
 800dcc6:	b930      	cbnz	r0, 800dcd6 <__multiply+0x42>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	4b41      	ldr	r3, [pc, #260]	@ (800ddd0 <__multiply+0x13c>)
 800dccc:	4841      	ldr	r0, [pc, #260]	@ (800ddd4 <__multiply+0x140>)
 800dcce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dcd2:	f000 fe43 	bl	800e95c <__assert_func>
 800dcd6:	f100 0414 	add.w	r4, r0, #20
 800dcda:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800dcde:	4623      	mov	r3, r4
 800dce0:	2200      	movs	r2, #0
 800dce2:	4573      	cmp	r3, lr
 800dce4:	d320      	bcc.n	800dd28 <__multiply+0x94>
 800dce6:	f107 0814 	add.w	r8, r7, #20
 800dcea:	f109 0114 	add.w	r1, r9, #20
 800dcee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800dcf2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800dcf6:	9302      	str	r3, [sp, #8]
 800dcf8:	1beb      	subs	r3, r5, r7
 800dcfa:	3b15      	subs	r3, #21
 800dcfc:	f023 0303 	bic.w	r3, r3, #3
 800dd00:	3304      	adds	r3, #4
 800dd02:	3715      	adds	r7, #21
 800dd04:	42bd      	cmp	r5, r7
 800dd06:	bf38      	it	cc
 800dd08:	2304      	movcc	r3, #4
 800dd0a:	9301      	str	r3, [sp, #4]
 800dd0c:	9b02      	ldr	r3, [sp, #8]
 800dd0e:	9103      	str	r1, [sp, #12]
 800dd10:	428b      	cmp	r3, r1
 800dd12:	d80c      	bhi.n	800dd2e <__multiply+0x9a>
 800dd14:	2e00      	cmp	r6, #0
 800dd16:	dd03      	ble.n	800dd20 <__multiply+0x8c>
 800dd18:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d055      	beq.n	800ddcc <__multiply+0x138>
 800dd20:	6106      	str	r6, [r0, #16]
 800dd22:	b005      	add	sp, #20
 800dd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd28:	f843 2b04 	str.w	r2, [r3], #4
 800dd2c:	e7d9      	b.n	800dce2 <__multiply+0x4e>
 800dd2e:	f8b1 a000 	ldrh.w	sl, [r1]
 800dd32:	f1ba 0f00 	cmp.w	sl, #0
 800dd36:	d01f      	beq.n	800dd78 <__multiply+0xe4>
 800dd38:	46c4      	mov	ip, r8
 800dd3a:	46a1      	mov	r9, r4
 800dd3c:	2700      	movs	r7, #0
 800dd3e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dd42:	f8d9 3000 	ldr.w	r3, [r9]
 800dd46:	fa1f fb82 	uxth.w	fp, r2
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	fb0a 330b 	mla	r3, sl, fp, r3
 800dd50:	443b      	add	r3, r7
 800dd52:	f8d9 7000 	ldr.w	r7, [r9]
 800dd56:	0c12      	lsrs	r2, r2, #16
 800dd58:	0c3f      	lsrs	r7, r7, #16
 800dd5a:	fb0a 7202 	mla	r2, sl, r2, r7
 800dd5e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd68:	4565      	cmp	r5, ip
 800dd6a:	f849 3b04 	str.w	r3, [r9], #4
 800dd6e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800dd72:	d8e4      	bhi.n	800dd3e <__multiply+0xaa>
 800dd74:	9b01      	ldr	r3, [sp, #4]
 800dd76:	50e7      	str	r7, [r4, r3]
 800dd78:	9b03      	ldr	r3, [sp, #12]
 800dd7a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dd7e:	3104      	adds	r1, #4
 800dd80:	f1b9 0f00 	cmp.w	r9, #0
 800dd84:	d020      	beq.n	800ddc8 <__multiply+0x134>
 800dd86:	6823      	ldr	r3, [r4, #0]
 800dd88:	4647      	mov	r7, r8
 800dd8a:	46a4      	mov	ip, r4
 800dd8c:	f04f 0a00 	mov.w	sl, #0
 800dd90:	f8b7 b000 	ldrh.w	fp, [r7]
 800dd94:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800dd98:	fb09 220b 	mla	r2, r9, fp, r2
 800dd9c:	4452      	add	r2, sl
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dda4:	f84c 3b04 	str.w	r3, [ip], #4
 800dda8:	f857 3b04 	ldr.w	r3, [r7], #4
 800ddac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ddb0:	f8bc 3000 	ldrh.w	r3, [ip]
 800ddb4:	fb09 330a 	mla	r3, r9, sl, r3
 800ddb8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ddbc:	42bd      	cmp	r5, r7
 800ddbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ddc2:	d8e5      	bhi.n	800dd90 <__multiply+0xfc>
 800ddc4:	9a01      	ldr	r2, [sp, #4]
 800ddc6:	50a3      	str	r3, [r4, r2]
 800ddc8:	3404      	adds	r4, #4
 800ddca:	e79f      	b.n	800dd0c <__multiply+0x78>
 800ddcc:	3e01      	subs	r6, #1
 800ddce:	e7a1      	b.n	800dd14 <__multiply+0x80>
 800ddd0:	0800f022 	.word	0x0800f022
 800ddd4:	0800f033 	.word	0x0800f033

0800ddd8 <__pow5mult>:
 800ddd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dddc:	4615      	mov	r5, r2
 800ddde:	f012 0203 	ands.w	r2, r2, #3
 800dde2:	4607      	mov	r7, r0
 800dde4:	460e      	mov	r6, r1
 800dde6:	d007      	beq.n	800ddf8 <__pow5mult+0x20>
 800dde8:	4c25      	ldr	r4, [pc, #148]	@ (800de80 <__pow5mult+0xa8>)
 800ddea:	3a01      	subs	r2, #1
 800ddec:	2300      	movs	r3, #0
 800ddee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddf2:	f7ff fea7 	bl	800db44 <__multadd>
 800ddf6:	4606      	mov	r6, r0
 800ddf8:	10ad      	asrs	r5, r5, #2
 800ddfa:	d03d      	beq.n	800de78 <__pow5mult+0xa0>
 800ddfc:	69fc      	ldr	r4, [r7, #28]
 800ddfe:	b97c      	cbnz	r4, 800de20 <__pow5mult+0x48>
 800de00:	2010      	movs	r0, #16
 800de02:	f7ff fd87 	bl	800d914 <malloc>
 800de06:	4602      	mov	r2, r0
 800de08:	61f8      	str	r0, [r7, #28]
 800de0a:	b928      	cbnz	r0, 800de18 <__pow5mult+0x40>
 800de0c:	4b1d      	ldr	r3, [pc, #116]	@ (800de84 <__pow5mult+0xac>)
 800de0e:	481e      	ldr	r0, [pc, #120]	@ (800de88 <__pow5mult+0xb0>)
 800de10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800de14:	f000 fda2 	bl	800e95c <__assert_func>
 800de18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de1c:	6004      	str	r4, [r0, #0]
 800de1e:	60c4      	str	r4, [r0, #12]
 800de20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800de24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800de28:	b94c      	cbnz	r4, 800de3e <__pow5mult+0x66>
 800de2a:	f240 2171 	movw	r1, #625	@ 0x271
 800de2e:	4638      	mov	r0, r7
 800de30:	f7ff ff1a 	bl	800dc68 <__i2b>
 800de34:	2300      	movs	r3, #0
 800de36:	f8c8 0008 	str.w	r0, [r8, #8]
 800de3a:	4604      	mov	r4, r0
 800de3c:	6003      	str	r3, [r0, #0]
 800de3e:	f04f 0900 	mov.w	r9, #0
 800de42:	07eb      	lsls	r3, r5, #31
 800de44:	d50a      	bpl.n	800de5c <__pow5mult+0x84>
 800de46:	4631      	mov	r1, r6
 800de48:	4622      	mov	r2, r4
 800de4a:	4638      	mov	r0, r7
 800de4c:	f7ff ff22 	bl	800dc94 <__multiply>
 800de50:	4631      	mov	r1, r6
 800de52:	4680      	mov	r8, r0
 800de54:	4638      	mov	r0, r7
 800de56:	f7ff fe53 	bl	800db00 <_Bfree>
 800de5a:	4646      	mov	r6, r8
 800de5c:	106d      	asrs	r5, r5, #1
 800de5e:	d00b      	beq.n	800de78 <__pow5mult+0xa0>
 800de60:	6820      	ldr	r0, [r4, #0]
 800de62:	b938      	cbnz	r0, 800de74 <__pow5mult+0x9c>
 800de64:	4622      	mov	r2, r4
 800de66:	4621      	mov	r1, r4
 800de68:	4638      	mov	r0, r7
 800de6a:	f7ff ff13 	bl	800dc94 <__multiply>
 800de6e:	6020      	str	r0, [r4, #0]
 800de70:	f8c0 9000 	str.w	r9, [r0]
 800de74:	4604      	mov	r4, r0
 800de76:	e7e4      	b.n	800de42 <__pow5mult+0x6a>
 800de78:	4630      	mov	r0, r6
 800de7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de7e:	bf00      	nop
 800de80:	0800f0e4 	.word	0x0800f0e4
 800de84:	0800efb3 	.word	0x0800efb3
 800de88:	0800f033 	.word	0x0800f033

0800de8c <__lshift>:
 800de8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de90:	460c      	mov	r4, r1
 800de92:	6849      	ldr	r1, [r1, #4]
 800de94:	6923      	ldr	r3, [r4, #16]
 800de96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de9a:	68a3      	ldr	r3, [r4, #8]
 800de9c:	4607      	mov	r7, r0
 800de9e:	4691      	mov	r9, r2
 800dea0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dea4:	f108 0601 	add.w	r6, r8, #1
 800dea8:	42b3      	cmp	r3, r6
 800deaa:	db0b      	blt.n	800dec4 <__lshift+0x38>
 800deac:	4638      	mov	r0, r7
 800deae:	f7ff fde7 	bl	800da80 <_Balloc>
 800deb2:	4605      	mov	r5, r0
 800deb4:	b948      	cbnz	r0, 800deca <__lshift+0x3e>
 800deb6:	4602      	mov	r2, r0
 800deb8:	4b28      	ldr	r3, [pc, #160]	@ (800df5c <__lshift+0xd0>)
 800deba:	4829      	ldr	r0, [pc, #164]	@ (800df60 <__lshift+0xd4>)
 800debc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dec0:	f000 fd4c 	bl	800e95c <__assert_func>
 800dec4:	3101      	adds	r1, #1
 800dec6:	005b      	lsls	r3, r3, #1
 800dec8:	e7ee      	b.n	800dea8 <__lshift+0x1c>
 800deca:	2300      	movs	r3, #0
 800decc:	f100 0114 	add.w	r1, r0, #20
 800ded0:	f100 0210 	add.w	r2, r0, #16
 800ded4:	4618      	mov	r0, r3
 800ded6:	4553      	cmp	r3, sl
 800ded8:	db33      	blt.n	800df42 <__lshift+0xb6>
 800deda:	6920      	ldr	r0, [r4, #16]
 800dedc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dee0:	f104 0314 	add.w	r3, r4, #20
 800dee4:	f019 091f 	ands.w	r9, r9, #31
 800dee8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800deec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800def0:	d02b      	beq.n	800df4a <__lshift+0xbe>
 800def2:	f1c9 0e20 	rsb	lr, r9, #32
 800def6:	468a      	mov	sl, r1
 800def8:	2200      	movs	r2, #0
 800defa:	6818      	ldr	r0, [r3, #0]
 800defc:	fa00 f009 	lsl.w	r0, r0, r9
 800df00:	4310      	orrs	r0, r2
 800df02:	f84a 0b04 	str.w	r0, [sl], #4
 800df06:	f853 2b04 	ldr.w	r2, [r3], #4
 800df0a:	459c      	cmp	ip, r3
 800df0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800df10:	d8f3      	bhi.n	800defa <__lshift+0x6e>
 800df12:	ebac 0304 	sub.w	r3, ip, r4
 800df16:	3b15      	subs	r3, #21
 800df18:	f023 0303 	bic.w	r3, r3, #3
 800df1c:	3304      	adds	r3, #4
 800df1e:	f104 0015 	add.w	r0, r4, #21
 800df22:	4560      	cmp	r0, ip
 800df24:	bf88      	it	hi
 800df26:	2304      	movhi	r3, #4
 800df28:	50ca      	str	r2, [r1, r3]
 800df2a:	b10a      	cbz	r2, 800df30 <__lshift+0xa4>
 800df2c:	f108 0602 	add.w	r6, r8, #2
 800df30:	3e01      	subs	r6, #1
 800df32:	4638      	mov	r0, r7
 800df34:	612e      	str	r6, [r5, #16]
 800df36:	4621      	mov	r1, r4
 800df38:	f7ff fde2 	bl	800db00 <_Bfree>
 800df3c:	4628      	mov	r0, r5
 800df3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df42:	f842 0f04 	str.w	r0, [r2, #4]!
 800df46:	3301      	adds	r3, #1
 800df48:	e7c5      	b.n	800ded6 <__lshift+0x4a>
 800df4a:	3904      	subs	r1, #4
 800df4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800df50:	f841 2f04 	str.w	r2, [r1, #4]!
 800df54:	459c      	cmp	ip, r3
 800df56:	d8f9      	bhi.n	800df4c <__lshift+0xc0>
 800df58:	e7ea      	b.n	800df30 <__lshift+0xa4>
 800df5a:	bf00      	nop
 800df5c:	0800f022 	.word	0x0800f022
 800df60:	0800f033 	.word	0x0800f033

0800df64 <__mcmp>:
 800df64:	690a      	ldr	r2, [r1, #16]
 800df66:	4603      	mov	r3, r0
 800df68:	6900      	ldr	r0, [r0, #16]
 800df6a:	1a80      	subs	r0, r0, r2
 800df6c:	b530      	push	{r4, r5, lr}
 800df6e:	d10e      	bne.n	800df8e <__mcmp+0x2a>
 800df70:	3314      	adds	r3, #20
 800df72:	3114      	adds	r1, #20
 800df74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800df78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800df7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800df80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800df84:	4295      	cmp	r5, r2
 800df86:	d003      	beq.n	800df90 <__mcmp+0x2c>
 800df88:	d205      	bcs.n	800df96 <__mcmp+0x32>
 800df8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800df8e:	bd30      	pop	{r4, r5, pc}
 800df90:	42a3      	cmp	r3, r4
 800df92:	d3f3      	bcc.n	800df7c <__mcmp+0x18>
 800df94:	e7fb      	b.n	800df8e <__mcmp+0x2a>
 800df96:	2001      	movs	r0, #1
 800df98:	e7f9      	b.n	800df8e <__mcmp+0x2a>
	...

0800df9c <__mdiff>:
 800df9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa0:	4689      	mov	r9, r1
 800dfa2:	4606      	mov	r6, r0
 800dfa4:	4611      	mov	r1, r2
 800dfa6:	4648      	mov	r0, r9
 800dfa8:	4614      	mov	r4, r2
 800dfaa:	f7ff ffdb 	bl	800df64 <__mcmp>
 800dfae:	1e05      	subs	r5, r0, #0
 800dfb0:	d112      	bne.n	800dfd8 <__mdiff+0x3c>
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	f7ff fd63 	bl	800da80 <_Balloc>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	b928      	cbnz	r0, 800dfca <__mdiff+0x2e>
 800dfbe:	4b3f      	ldr	r3, [pc, #252]	@ (800e0bc <__mdiff+0x120>)
 800dfc0:	f240 2137 	movw	r1, #567	@ 0x237
 800dfc4:	483e      	ldr	r0, [pc, #248]	@ (800e0c0 <__mdiff+0x124>)
 800dfc6:	f000 fcc9 	bl	800e95c <__assert_func>
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dfd0:	4610      	mov	r0, r2
 800dfd2:	b003      	add	sp, #12
 800dfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd8:	bfbc      	itt	lt
 800dfda:	464b      	movlt	r3, r9
 800dfdc:	46a1      	movlt	r9, r4
 800dfde:	4630      	mov	r0, r6
 800dfe0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dfe4:	bfba      	itte	lt
 800dfe6:	461c      	movlt	r4, r3
 800dfe8:	2501      	movlt	r5, #1
 800dfea:	2500      	movge	r5, #0
 800dfec:	f7ff fd48 	bl	800da80 <_Balloc>
 800dff0:	4602      	mov	r2, r0
 800dff2:	b918      	cbnz	r0, 800dffc <__mdiff+0x60>
 800dff4:	4b31      	ldr	r3, [pc, #196]	@ (800e0bc <__mdiff+0x120>)
 800dff6:	f240 2145 	movw	r1, #581	@ 0x245
 800dffa:	e7e3      	b.n	800dfc4 <__mdiff+0x28>
 800dffc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e000:	6926      	ldr	r6, [r4, #16]
 800e002:	60c5      	str	r5, [r0, #12]
 800e004:	f109 0310 	add.w	r3, r9, #16
 800e008:	f109 0514 	add.w	r5, r9, #20
 800e00c:	f104 0e14 	add.w	lr, r4, #20
 800e010:	f100 0b14 	add.w	fp, r0, #20
 800e014:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e018:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e01c:	9301      	str	r3, [sp, #4]
 800e01e:	46d9      	mov	r9, fp
 800e020:	f04f 0c00 	mov.w	ip, #0
 800e024:	9b01      	ldr	r3, [sp, #4]
 800e026:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e02a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e02e:	9301      	str	r3, [sp, #4]
 800e030:	fa1f f38a 	uxth.w	r3, sl
 800e034:	4619      	mov	r1, r3
 800e036:	b283      	uxth	r3, r0
 800e038:	1acb      	subs	r3, r1, r3
 800e03a:	0c00      	lsrs	r0, r0, #16
 800e03c:	4463      	add	r3, ip
 800e03e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e042:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e046:	b29b      	uxth	r3, r3
 800e048:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e04c:	4576      	cmp	r6, lr
 800e04e:	f849 3b04 	str.w	r3, [r9], #4
 800e052:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e056:	d8e5      	bhi.n	800e024 <__mdiff+0x88>
 800e058:	1b33      	subs	r3, r6, r4
 800e05a:	3b15      	subs	r3, #21
 800e05c:	f023 0303 	bic.w	r3, r3, #3
 800e060:	3415      	adds	r4, #21
 800e062:	3304      	adds	r3, #4
 800e064:	42a6      	cmp	r6, r4
 800e066:	bf38      	it	cc
 800e068:	2304      	movcc	r3, #4
 800e06a:	441d      	add	r5, r3
 800e06c:	445b      	add	r3, fp
 800e06e:	461e      	mov	r6, r3
 800e070:	462c      	mov	r4, r5
 800e072:	4544      	cmp	r4, r8
 800e074:	d30e      	bcc.n	800e094 <__mdiff+0xf8>
 800e076:	f108 0103 	add.w	r1, r8, #3
 800e07a:	1b49      	subs	r1, r1, r5
 800e07c:	f021 0103 	bic.w	r1, r1, #3
 800e080:	3d03      	subs	r5, #3
 800e082:	45a8      	cmp	r8, r5
 800e084:	bf38      	it	cc
 800e086:	2100      	movcc	r1, #0
 800e088:	440b      	add	r3, r1
 800e08a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e08e:	b191      	cbz	r1, 800e0b6 <__mdiff+0x11a>
 800e090:	6117      	str	r7, [r2, #16]
 800e092:	e79d      	b.n	800dfd0 <__mdiff+0x34>
 800e094:	f854 1b04 	ldr.w	r1, [r4], #4
 800e098:	46e6      	mov	lr, ip
 800e09a:	0c08      	lsrs	r0, r1, #16
 800e09c:	fa1c fc81 	uxtah	ip, ip, r1
 800e0a0:	4471      	add	r1, lr
 800e0a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e0a6:	b289      	uxth	r1, r1
 800e0a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e0ac:	f846 1b04 	str.w	r1, [r6], #4
 800e0b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e0b4:	e7dd      	b.n	800e072 <__mdiff+0xd6>
 800e0b6:	3f01      	subs	r7, #1
 800e0b8:	e7e7      	b.n	800e08a <__mdiff+0xee>
 800e0ba:	bf00      	nop
 800e0bc:	0800f022 	.word	0x0800f022
 800e0c0:	0800f033 	.word	0x0800f033

0800e0c4 <__d2b>:
 800e0c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e0c8:	460f      	mov	r7, r1
 800e0ca:	2101      	movs	r1, #1
 800e0cc:	ec59 8b10 	vmov	r8, r9, d0
 800e0d0:	4616      	mov	r6, r2
 800e0d2:	f7ff fcd5 	bl	800da80 <_Balloc>
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	b930      	cbnz	r0, 800e0e8 <__d2b+0x24>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	4b23      	ldr	r3, [pc, #140]	@ (800e16c <__d2b+0xa8>)
 800e0de:	4824      	ldr	r0, [pc, #144]	@ (800e170 <__d2b+0xac>)
 800e0e0:	f240 310f 	movw	r1, #783	@ 0x30f
 800e0e4:	f000 fc3a 	bl	800e95c <__assert_func>
 800e0e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e0ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e0f0:	b10d      	cbz	r5, 800e0f6 <__d2b+0x32>
 800e0f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e0f6:	9301      	str	r3, [sp, #4]
 800e0f8:	f1b8 0300 	subs.w	r3, r8, #0
 800e0fc:	d023      	beq.n	800e146 <__d2b+0x82>
 800e0fe:	4668      	mov	r0, sp
 800e100:	9300      	str	r3, [sp, #0]
 800e102:	f7ff fd84 	bl	800dc0e <__lo0bits>
 800e106:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e10a:	b1d0      	cbz	r0, 800e142 <__d2b+0x7e>
 800e10c:	f1c0 0320 	rsb	r3, r0, #32
 800e110:	fa02 f303 	lsl.w	r3, r2, r3
 800e114:	430b      	orrs	r3, r1
 800e116:	40c2      	lsrs	r2, r0
 800e118:	6163      	str	r3, [r4, #20]
 800e11a:	9201      	str	r2, [sp, #4]
 800e11c:	9b01      	ldr	r3, [sp, #4]
 800e11e:	61a3      	str	r3, [r4, #24]
 800e120:	2b00      	cmp	r3, #0
 800e122:	bf0c      	ite	eq
 800e124:	2201      	moveq	r2, #1
 800e126:	2202      	movne	r2, #2
 800e128:	6122      	str	r2, [r4, #16]
 800e12a:	b1a5      	cbz	r5, 800e156 <__d2b+0x92>
 800e12c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e130:	4405      	add	r5, r0
 800e132:	603d      	str	r5, [r7, #0]
 800e134:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e138:	6030      	str	r0, [r6, #0]
 800e13a:	4620      	mov	r0, r4
 800e13c:	b003      	add	sp, #12
 800e13e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e142:	6161      	str	r1, [r4, #20]
 800e144:	e7ea      	b.n	800e11c <__d2b+0x58>
 800e146:	a801      	add	r0, sp, #4
 800e148:	f7ff fd61 	bl	800dc0e <__lo0bits>
 800e14c:	9b01      	ldr	r3, [sp, #4]
 800e14e:	6163      	str	r3, [r4, #20]
 800e150:	3020      	adds	r0, #32
 800e152:	2201      	movs	r2, #1
 800e154:	e7e8      	b.n	800e128 <__d2b+0x64>
 800e156:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e15a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e15e:	6038      	str	r0, [r7, #0]
 800e160:	6918      	ldr	r0, [r3, #16]
 800e162:	f7ff fd35 	bl	800dbd0 <__hi0bits>
 800e166:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e16a:	e7e5      	b.n	800e138 <__d2b+0x74>
 800e16c:	0800f022 	.word	0x0800f022
 800e170:	0800f033 	.word	0x0800f033

0800e174 <__ssputs_r>:
 800e174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e178:	688e      	ldr	r6, [r1, #8]
 800e17a:	461f      	mov	r7, r3
 800e17c:	42be      	cmp	r6, r7
 800e17e:	680b      	ldr	r3, [r1, #0]
 800e180:	4682      	mov	sl, r0
 800e182:	460c      	mov	r4, r1
 800e184:	4690      	mov	r8, r2
 800e186:	d82d      	bhi.n	800e1e4 <__ssputs_r+0x70>
 800e188:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e18c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e190:	d026      	beq.n	800e1e0 <__ssputs_r+0x6c>
 800e192:	6965      	ldr	r5, [r4, #20]
 800e194:	6909      	ldr	r1, [r1, #16]
 800e196:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e19a:	eba3 0901 	sub.w	r9, r3, r1
 800e19e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e1a2:	1c7b      	adds	r3, r7, #1
 800e1a4:	444b      	add	r3, r9
 800e1a6:	106d      	asrs	r5, r5, #1
 800e1a8:	429d      	cmp	r5, r3
 800e1aa:	bf38      	it	cc
 800e1ac:	461d      	movcc	r5, r3
 800e1ae:	0553      	lsls	r3, r2, #21
 800e1b0:	d527      	bpl.n	800e202 <__ssputs_r+0x8e>
 800e1b2:	4629      	mov	r1, r5
 800e1b4:	f7ff fbd8 	bl	800d968 <_malloc_r>
 800e1b8:	4606      	mov	r6, r0
 800e1ba:	b360      	cbz	r0, 800e216 <__ssputs_r+0xa2>
 800e1bc:	6921      	ldr	r1, [r4, #16]
 800e1be:	464a      	mov	r2, r9
 800e1c0:	f7fe fcf7 	bl	800cbb2 <memcpy>
 800e1c4:	89a3      	ldrh	r3, [r4, #12]
 800e1c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e1ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1ce:	81a3      	strh	r3, [r4, #12]
 800e1d0:	6126      	str	r6, [r4, #16]
 800e1d2:	6165      	str	r5, [r4, #20]
 800e1d4:	444e      	add	r6, r9
 800e1d6:	eba5 0509 	sub.w	r5, r5, r9
 800e1da:	6026      	str	r6, [r4, #0]
 800e1dc:	60a5      	str	r5, [r4, #8]
 800e1de:	463e      	mov	r6, r7
 800e1e0:	42be      	cmp	r6, r7
 800e1e2:	d900      	bls.n	800e1e6 <__ssputs_r+0x72>
 800e1e4:	463e      	mov	r6, r7
 800e1e6:	6820      	ldr	r0, [r4, #0]
 800e1e8:	4632      	mov	r2, r6
 800e1ea:	4641      	mov	r1, r8
 800e1ec:	f000 fb6a 	bl	800e8c4 <memmove>
 800e1f0:	68a3      	ldr	r3, [r4, #8]
 800e1f2:	1b9b      	subs	r3, r3, r6
 800e1f4:	60a3      	str	r3, [r4, #8]
 800e1f6:	6823      	ldr	r3, [r4, #0]
 800e1f8:	4433      	add	r3, r6
 800e1fa:	6023      	str	r3, [r4, #0]
 800e1fc:	2000      	movs	r0, #0
 800e1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e202:	462a      	mov	r2, r5
 800e204:	f000 fbee 	bl	800e9e4 <_realloc_r>
 800e208:	4606      	mov	r6, r0
 800e20a:	2800      	cmp	r0, #0
 800e20c:	d1e0      	bne.n	800e1d0 <__ssputs_r+0x5c>
 800e20e:	6921      	ldr	r1, [r4, #16]
 800e210:	4650      	mov	r0, sl
 800e212:	f7ff fb35 	bl	800d880 <_free_r>
 800e216:	230c      	movs	r3, #12
 800e218:	f8ca 3000 	str.w	r3, [sl]
 800e21c:	89a3      	ldrh	r3, [r4, #12]
 800e21e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e222:	81a3      	strh	r3, [r4, #12]
 800e224:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e228:	e7e9      	b.n	800e1fe <__ssputs_r+0x8a>
	...

0800e22c <_svfiprintf_r>:
 800e22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e230:	4698      	mov	r8, r3
 800e232:	898b      	ldrh	r3, [r1, #12]
 800e234:	061b      	lsls	r3, r3, #24
 800e236:	b09d      	sub	sp, #116	@ 0x74
 800e238:	4607      	mov	r7, r0
 800e23a:	460d      	mov	r5, r1
 800e23c:	4614      	mov	r4, r2
 800e23e:	d510      	bpl.n	800e262 <_svfiprintf_r+0x36>
 800e240:	690b      	ldr	r3, [r1, #16]
 800e242:	b973      	cbnz	r3, 800e262 <_svfiprintf_r+0x36>
 800e244:	2140      	movs	r1, #64	@ 0x40
 800e246:	f7ff fb8f 	bl	800d968 <_malloc_r>
 800e24a:	6028      	str	r0, [r5, #0]
 800e24c:	6128      	str	r0, [r5, #16]
 800e24e:	b930      	cbnz	r0, 800e25e <_svfiprintf_r+0x32>
 800e250:	230c      	movs	r3, #12
 800e252:	603b      	str	r3, [r7, #0]
 800e254:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e258:	b01d      	add	sp, #116	@ 0x74
 800e25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e25e:	2340      	movs	r3, #64	@ 0x40
 800e260:	616b      	str	r3, [r5, #20]
 800e262:	2300      	movs	r3, #0
 800e264:	9309      	str	r3, [sp, #36]	@ 0x24
 800e266:	2320      	movs	r3, #32
 800e268:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e26c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e270:	2330      	movs	r3, #48	@ 0x30
 800e272:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e410 <_svfiprintf_r+0x1e4>
 800e276:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e27a:	f04f 0901 	mov.w	r9, #1
 800e27e:	4623      	mov	r3, r4
 800e280:	469a      	mov	sl, r3
 800e282:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e286:	b10a      	cbz	r2, 800e28c <_svfiprintf_r+0x60>
 800e288:	2a25      	cmp	r2, #37	@ 0x25
 800e28a:	d1f9      	bne.n	800e280 <_svfiprintf_r+0x54>
 800e28c:	ebba 0b04 	subs.w	fp, sl, r4
 800e290:	d00b      	beq.n	800e2aa <_svfiprintf_r+0x7e>
 800e292:	465b      	mov	r3, fp
 800e294:	4622      	mov	r2, r4
 800e296:	4629      	mov	r1, r5
 800e298:	4638      	mov	r0, r7
 800e29a:	f7ff ff6b 	bl	800e174 <__ssputs_r>
 800e29e:	3001      	adds	r0, #1
 800e2a0:	f000 80a7 	beq.w	800e3f2 <_svfiprintf_r+0x1c6>
 800e2a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e2a6:	445a      	add	r2, fp
 800e2a8:	9209      	str	r2, [sp, #36]	@ 0x24
 800e2aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f000 809f 	beq.w	800e3f2 <_svfiprintf_r+0x1c6>
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e2ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2be:	f10a 0a01 	add.w	sl, sl, #1
 800e2c2:	9304      	str	r3, [sp, #16]
 800e2c4:	9307      	str	r3, [sp, #28]
 800e2c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e2ca:	931a      	str	r3, [sp, #104]	@ 0x68
 800e2cc:	4654      	mov	r4, sl
 800e2ce:	2205      	movs	r2, #5
 800e2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2d4:	484e      	ldr	r0, [pc, #312]	@ (800e410 <_svfiprintf_r+0x1e4>)
 800e2d6:	f7f1 ff83 	bl	80001e0 <memchr>
 800e2da:	9a04      	ldr	r2, [sp, #16]
 800e2dc:	b9d8      	cbnz	r0, 800e316 <_svfiprintf_r+0xea>
 800e2de:	06d0      	lsls	r0, r2, #27
 800e2e0:	bf44      	itt	mi
 800e2e2:	2320      	movmi	r3, #32
 800e2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2e8:	0711      	lsls	r1, r2, #28
 800e2ea:	bf44      	itt	mi
 800e2ec:	232b      	movmi	r3, #43	@ 0x2b
 800e2ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2f2:	f89a 3000 	ldrb.w	r3, [sl]
 800e2f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2f8:	d015      	beq.n	800e326 <_svfiprintf_r+0xfa>
 800e2fa:	9a07      	ldr	r2, [sp, #28]
 800e2fc:	4654      	mov	r4, sl
 800e2fe:	2000      	movs	r0, #0
 800e300:	f04f 0c0a 	mov.w	ip, #10
 800e304:	4621      	mov	r1, r4
 800e306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e30a:	3b30      	subs	r3, #48	@ 0x30
 800e30c:	2b09      	cmp	r3, #9
 800e30e:	d94b      	bls.n	800e3a8 <_svfiprintf_r+0x17c>
 800e310:	b1b0      	cbz	r0, 800e340 <_svfiprintf_r+0x114>
 800e312:	9207      	str	r2, [sp, #28]
 800e314:	e014      	b.n	800e340 <_svfiprintf_r+0x114>
 800e316:	eba0 0308 	sub.w	r3, r0, r8
 800e31a:	fa09 f303 	lsl.w	r3, r9, r3
 800e31e:	4313      	orrs	r3, r2
 800e320:	9304      	str	r3, [sp, #16]
 800e322:	46a2      	mov	sl, r4
 800e324:	e7d2      	b.n	800e2cc <_svfiprintf_r+0xa0>
 800e326:	9b03      	ldr	r3, [sp, #12]
 800e328:	1d19      	adds	r1, r3, #4
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	9103      	str	r1, [sp, #12]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	bfbb      	ittet	lt
 800e332:	425b      	neglt	r3, r3
 800e334:	f042 0202 	orrlt.w	r2, r2, #2
 800e338:	9307      	strge	r3, [sp, #28]
 800e33a:	9307      	strlt	r3, [sp, #28]
 800e33c:	bfb8      	it	lt
 800e33e:	9204      	strlt	r2, [sp, #16]
 800e340:	7823      	ldrb	r3, [r4, #0]
 800e342:	2b2e      	cmp	r3, #46	@ 0x2e
 800e344:	d10a      	bne.n	800e35c <_svfiprintf_r+0x130>
 800e346:	7863      	ldrb	r3, [r4, #1]
 800e348:	2b2a      	cmp	r3, #42	@ 0x2a
 800e34a:	d132      	bne.n	800e3b2 <_svfiprintf_r+0x186>
 800e34c:	9b03      	ldr	r3, [sp, #12]
 800e34e:	1d1a      	adds	r2, r3, #4
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	9203      	str	r2, [sp, #12]
 800e354:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e358:	3402      	adds	r4, #2
 800e35a:	9305      	str	r3, [sp, #20]
 800e35c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e420 <_svfiprintf_r+0x1f4>
 800e360:	7821      	ldrb	r1, [r4, #0]
 800e362:	2203      	movs	r2, #3
 800e364:	4650      	mov	r0, sl
 800e366:	f7f1 ff3b 	bl	80001e0 <memchr>
 800e36a:	b138      	cbz	r0, 800e37c <_svfiprintf_r+0x150>
 800e36c:	9b04      	ldr	r3, [sp, #16]
 800e36e:	eba0 000a 	sub.w	r0, r0, sl
 800e372:	2240      	movs	r2, #64	@ 0x40
 800e374:	4082      	lsls	r2, r0
 800e376:	4313      	orrs	r3, r2
 800e378:	3401      	adds	r4, #1
 800e37a:	9304      	str	r3, [sp, #16]
 800e37c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e380:	4824      	ldr	r0, [pc, #144]	@ (800e414 <_svfiprintf_r+0x1e8>)
 800e382:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e386:	2206      	movs	r2, #6
 800e388:	f7f1 ff2a 	bl	80001e0 <memchr>
 800e38c:	2800      	cmp	r0, #0
 800e38e:	d036      	beq.n	800e3fe <_svfiprintf_r+0x1d2>
 800e390:	4b21      	ldr	r3, [pc, #132]	@ (800e418 <_svfiprintf_r+0x1ec>)
 800e392:	bb1b      	cbnz	r3, 800e3dc <_svfiprintf_r+0x1b0>
 800e394:	9b03      	ldr	r3, [sp, #12]
 800e396:	3307      	adds	r3, #7
 800e398:	f023 0307 	bic.w	r3, r3, #7
 800e39c:	3308      	adds	r3, #8
 800e39e:	9303      	str	r3, [sp, #12]
 800e3a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3a2:	4433      	add	r3, r6
 800e3a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3a6:	e76a      	b.n	800e27e <_svfiprintf_r+0x52>
 800e3a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3ac:	460c      	mov	r4, r1
 800e3ae:	2001      	movs	r0, #1
 800e3b0:	e7a8      	b.n	800e304 <_svfiprintf_r+0xd8>
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	3401      	adds	r4, #1
 800e3b6:	9305      	str	r3, [sp, #20]
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	f04f 0c0a 	mov.w	ip, #10
 800e3be:	4620      	mov	r0, r4
 800e3c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3c4:	3a30      	subs	r2, #48	@ 0x30
 800e3c6:	2a09      	cmp	r2, #9
 800e3c8:	d903      	bls.n	800e3d2 <_svfiprintf_r+0x1a6>
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d0c6      	beq.n	800e35c <_svfiprintf_r+0x130>
 800e3ce:	9105      	str	r1, [sp, #20]
 800e3d0:	e7c4      	b.n	800e35c <_svfiprintf_r+0x130>
 800e3d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3d6:	4604      	mov	r4, r0
 800e3d8:	2301      	movs	r3, #1
 800e3da:	e7f0      	b.n	800e3be <_svfiprintf_r+0x192>
 800e3dc:	ab03      	add	r3, sp, #12
 800e3de:	9300      	str	r3, [sp, #0]
 800e3e0:	462a      	mov	r2, r5
 800e3e2:	4b0e      	ldr	r3, [pc, #56]	@ (800e41c <_svfiprintf_r+0x1f0>)
 800e3e4:	a904      	add	r1, sp, #16
 800e3e6:	4638      	mov	r0, r7
 800e3e8:	f7fd fd68 	bl	800bebc <_printf_float>
 800e3ec:	1c42      	adds	r2, r0, #1
 800e3ee:	4606      	mov	r6, r0
 800e3f0:	d1d6      	bne.n	800e3a0 <_svfiprintf_r+0x174>
 800e3f2:	89ab      	ldrh	r3, [r5, #12]
 800e3f4:	065b      	lsls	r3, r3, #25
 800e3f6:	f53f af2d 	bmi.w	800e254 <_svfiprintf_r+0x28>
 800e3fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3fc:	e72c      	b.n	800e258 <_svfiprintf_r+0x2c>
 800e3fe:	ab03      	add	r3, sp, #12
 800e400:	9300      	str	r3, [sp, #0]
 800e402:	462a      	mov	r2, r5
 800e404:	4b05      	ldr	r3, [pc, #20]	@ (800e41c <_svfiprintf_r+0x1f0>)
 800e406:	a904      	add	r1, sp, #16
 800e408:	4638      	mov	r0, r7
 800e40a:	f7fd ffef 	bl	800c3ec <_printf_i>
 800e40e:	e7ed      	b.n	800e3ec <_svfiprintf_r+0x1c0>
 800e410:	0800f08c 	.word	0x0800f08c
 800e414:	0800f096 	.word	0x0800f096
 800e418:	0800bebd 	.word	0x0800bebd
 800e41c:	0800e175 	.word	0x0800e175
 800e420:	0800f092 	.word	0x0800f092

0800e424 <__sfputc_r>:
 800e424:	6893      	ldr	r3, [r2, #8]
 800e426:	3b01      	subs	r3, #1
 800e428:	2b00      	cmp	r3, #0
 800e42a:	b410      	push	{r4}
 800e42c:	6093      	str	r3, [r2, #8]
 800e42e:	da08      	bge.n	800e442 <__sfputc_r+0x1e>
 800e430:	6994      	ldr	r4, [r2, #24]
 800e432:	42a3      	cmp	r3, r4
 800e434:	db01      	blt.n	800e43a <__sfputc_r+0x16>
 800e436:	290a      	cmp	r1, #10
 800e438:	d103      	bne.n	800e442 <__sfputc_r+0x1e>
 800e43a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e43e:	f7fe baa5 	b.w	800c98c <__swbuf_r>
 800e442:	6813      	ldr	r3, [r2, #0]
 800e444:	1c58      	adds	r0, r3, #1
 800e446:	6010      	str	r0, [r2, #0]
 800e448:	7019      	strb	r1, [r3, #0]
 800e44a:	4608      	mov	r0, r1
 800e44c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e450:	4770      	bx	lr

0800e452 <__sfputs_r>:
 800e452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e454:	4606      	mov	r6, r0
 800e456:	460f      	mov	r7, r1
 800e458:	4614      	mov	r4, r2
 800e45a:	18d5      	adds	r5, r2, r3
 800e45c:	42ac      	cmp	r4, r5
 800e45e:	d101      	bne.n	800e464 <__sfputs_r+0x12>
 800e460:	2000      	movs	r0, #0
 800e462:	e007      	b.n	800e474 <__sfputs_r+0x22>
 800e464:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e468:	463a      	mov	r2, r7
 800e46a:	4630      	mov	r0, r6
 800e46c:	f7ff ffda 	bl	800e424 <__sfputc_r>
 800e470:	1c43      	adds	r3, r0, #1
 800e472:	d1f3      	bne.n	800e45c <__sfputs_r+0xa>
 800e474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e478 <_vfiprintf_r>:
 800e478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47c:	460d      	mov	r5, r1
 800e47e:	b09d      	sub	sp, #116	@ 0x74
 800e480:	4614      	mov	r4, r2
 800e482:	4698      	mov	r8, r3
 800e484:	4606      	mov	r6, r0
 800e486:	b118      	cbz	r0, 800e490 <_vfiprintf_r+0x18>
 800e488:	6a03      	ldr	r3, [r0, #32]
 800e48a:	b90b      	cbnz	r3, 800e490 <_vfiprintf_r+0x18>
 800e48c:	f7fe f958 	bl	800c740 <__sinit>
 800e490:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e492:	07d9      	lsls	r1, r3, #31
 800e494:	d405      	bmi.n	800e4a2 <_vfiprintf_r+0x2a>
 800e496:	89ab      	ldrh	r3, [r5, #12]
 800e498:	059a      	lsls	r2, r3, #22
 800e49a:	d402      	bmi.n	800e4a2 <_vfiprintf_r+0x2a>
 800e49c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e49e:	f7fe fb86 	bl	800cbae <__retarget_lock_acquire_recursive>
 800e4a2:	89ab      	ldrh	r3, [r5, #12]
 800e4a4:	071b      	lsls	r3, r3, #28
 800e4a6:	d501      	bpl.n	800e4ac <_vfiprintf_r+0x34>
 800e4a8:	692b      	ldr	r3, [r5, #16]
 800e4aa:	b99b      	cbnz	r3, 800e4d4 <_vfiprintf_r+0x5c>
 800e4ac:	4629      	mov	r1, r5
 800e4ae:	4630      	mov	r0, r6
 800e4b0:	f7fe faaa 	bl	800ca08 <__swsetup_r>
 800e4b4:	b170      	cbz	r0, 800e4d4 <_vfiprintf_r+0x5c>
 800e4b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e4b8:	07dc      	lsls	r4, r3, #31
 800e4ba:	d504      	bpl.n	800e4c6 <_vfiprintf_r+0x4e>
 800e4bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e4c0:	b01d      	add	sp, #116	@ 0x74
 800e4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c6:	89ab      	ldrh	r3, [r5, #12]
 800e4c8:	0598      	lsls	r0, r3, #22
 800e4ca:	d4f7      	bmi.n	800e4bc <_vfiprintf_r+0x44>
 800e4cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e4ce:	f7fe fb6f 	bl	800cbb0 <__retarget_lock_release_recursive>
 800e4d2:	e7f3      	b.n	800e4bc <_vfiprintf_r+0x44>
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4d8:	2320      	movs	r3, #32
 800e4da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e4de:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4e2:	2330      	movs	r3, #48	@ 0x30
 800e4e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e694 <_vfiprintf_r+0x21c>
 800e4e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e4ec:	f04f 0901 	mov.w	r9, #1
 800e4f0:	4623      	mov	r3, r4
 800e4f2:	469a      	mov	sl, r3
 800e4f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4f8:	b10a      	cbz	r2, 800e4fe <_vfiprintf_r+0x86>
 800e4fa:	2a25      	cmp	r2, #37	@ 0x25
 800e4fc:	d1f9      	bne.n	800e4f2 <_vfiprintf_r+0x7a>
 800e4fe:	ebba 0b04 	subs.w	fp, sl, r4
 800e502:	d00b      	beq.n	800e51c <_vfiprintf_r+0xa4>
 800e504:	465b      	mov	r3, fp
 800e506:	4622      	mov	r2, r4
 800e508:	4629      	mov	r1, r5
 800e50a:	4630      	mov	r0, r6
 800e50c:	f7ff ffa1 	bl	800e452 <__sfputs_r>
 800e510:	3001      	adds	r0, #1
 800e512:	f000 80a7 	beq.w	800e664 <_vfiprintf_r+0x1ec>
 800e516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e518:	445a      	add	r2, fp
 800e51a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e51c:	f89a 3000 	ldrb.w	r3, [sl]
 800e520:	2b00      	cmp	r3, #0
 800e522:	f000 809f 	beq.w	800e664 <_vfiprintf_r+0x1ec>
 800e526:	2300      	movs	r3, #0
 800e528:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e52c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e530:	f10a 0a01 	add.w	sl, sl, #1
 800e534:	9304      	str	r3, [sp, #16]
 800e536:	9307      	str	r3, [sp, #28]
 800e538:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e53c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e53e:	4654      	mov	r4, sl
 800e540:	2205      	movs	r2, #5
 800e542:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e546:	4853      	ldr	r0, [pc, #332]	@ (800e694 <_vfiprintf_r+0x21c>)
 800e548:	f7f1 fe4a 	bl	80001e0 <memchr>
 800e54c:	9a04      	ldr	r2, [sp, #16]
 800e54e:	b9d8      	cbnz	r0, 800e588 <_vfiprintf_r+0x110>
 800e550:	06d1      	lsls	r1, r2, #27
 800e552:	bf44      	itt	mi
 800e554:	2320      	movmi	r3, #32
 800e556:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e55a:	0713      	lsls	r3, r2, #28
 800e55c:	bf44      	itt	mi
 800e55e:	232b      	movmi	r3, #43	@ 0x2b
 800e560:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e564:	f89a 3000 	ldrb.w	r3, [sl]
 800e568:	2b2a      	cmp	r3, #42	@ 0x2a
 800e56a:	d015      	beq.n	800e598 <_vfiprintf_r+0x120>
 800e56c:	9a07      	ldr	r2, [sp, #28]
 800e56e:	4654      	mov	r4, sl
 800e570:	2000      	movs	r0, #0
 800e572:	f04f 0c0a 	mov.w	ip, #10
 800e576:	4621      	mov	r1, r4
 800e578:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e57c:	3b30      	subs	r3, #48	@ 0x30
 800e57e:	2b09      	cmp	r3, #9
 800e580:	d94b      	bls.n	800e61a <_vfiprintf_r+0x1a2>
 800e582:	b1b0      	cbz	r0, 800e5b2 <_vfiprintf_r+0x13a>
 800e584:	9207      	str	r2, [sp, #28]
 800e586:	e014      	b.n	800e5b2 <_vfiprintf_r+0x13a>
 800e588:	eba0 0308 	sub.w	r3, r0, r8
 800e58c:	fa09 f303 	lsl.w	r3, r9, r3
 800e590:	4313      	orrs	r3, r2
 800e592:	9304      	str	r3, [sp, #16]
 800e594:	46a2      	mov	sl, r4
 800e596:	e7d2      	b.n	800e53e <_vfiprintf_r+0xc6>
 800e598:	9b03      	ldr	r3, [sp, #12]
 800e59a:	1d19      	adds	r1, r3, #4
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	9103      	str	r1, [sp, #12]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	bfbb      	ittet	lt
 800e5a4:	425b      	neglt	r3, r3
 800e5a6:	f042 0202 	orrlt.w	r2, r2, #2
 800e5aa:	9307      	strge	r3, [sp, #28]
 800e5ac:	9307      	strlt	r3, [sp, #28]
 800e5ae:	bfb8      	it	lt
 800e5b0:	9204      	strlt	r2, [sp, #16]
 800e5b2:	7823      	ldrb	r3, [r4, #0]
 800e5b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800e5b6:	d10a      	bne.n	800e5ce <_vfiprintf_r+0x156>
 800e5b8:	7863      	ldrb	r3, [r4, #1]
 800e5ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5bc:	d132      	bne.n	800e624 <_vfiprintf_r+0x1ac>
 800e5be:	9b03      	ldr	r3, [sp, #12]
 800e5c0:	1d1a      	adds	r2, r3, #4
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	9203      	str	r2, [sp, #12]
 800e5c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e5ca:	3402      	adds	r4, #2
 800e5cc:	9305      	str	r3, [sp, #20]
 800e5ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e6a4 <_vfiprintf_r+0x22c>
 800e5d2:	7821      	ldrb	r1, [r4, #0]
 800e5d4:	2203      	movs	r2, #3
 800e5d6:	4650      	mov	r0, sl
 800e5d8:	f7f1 fe02 	bl	80001e0 <memchr>
 800e5dc:	b138      	cbz	r0, 800e5ee <_vfiprintf_r+0x176>
 800e5de:	9b04      	ldr	r3, [sp, #16]
 800e5e0:	eba0 000a 	sub.w	r0, r0, sl
 800e5e4:	2240      	movs	r2, #64	@ 0x40
 800e5e6:	4082      	lsls	r2, r0
 800e5e8:	4313      	orrs	r3, r2
 800e5ea:	3401      	adds	r4, #1
 800e5ec:	9304      	str	r3, [sp, #16]
 800e5ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5f2:	4829      	ldr	r0, [pc, #164]	@ (800e698 <_vfiprintf_r+0x220>)
 800e5f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e5f8:	2206      	movs	r2, #6
 800e5fa:	f7f1 fdf1 	bl	80001e0 <memchr>
 800e5fe:	2800      	cmp	r0, #0
 800e600:	d03f      	beq.n	800e682 <_vfiprintf_r+0x20a>
 800e602:	4b26      	ldr	r3, [pc, #152]	@ (800e69c <_vfiprintf_r+0x224>)
 800e604:	bb1b      	cbnz	r3, 800e64e <_vfiprintf_r+0x1d6>
 800e606:	9b03      	ldr	r3, [sp, #12]
 800e608:	3307      	adds	r3, #7
 800e60a:	f023 0307 	bic.w	r3, r3, #7
 800e60e:	3308      	adds	r3, #8
 800e610:	9303      	str	r3, [sp, #12]
 800e612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e614:	443b      	add	r3, r7
 800e616:	9309      	str	r3, [sp, #36]	@ 0x24
 800e618:	e76a      	b.n	800e4f0 <_vfiprintf_r+0x78>
 800e61a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e61e:	460c      	mov	r4, r1
 800e620:	2001      	movs	r0, #1
 800e622:	e7a8      	b.n	800e576 <_vfiprintf_r+0xfe>
 800e624:	2300      	movs	r3, #0
 800e626:	3401      	adds	r4, #1
 800e628:	9305      	str	r3, [sp, #20]
 800e62a:	4619      	mov	r1, r3
 800e62c:	f04f 0c0a 	mov.w	ip, #10
 800e630:	4620      	mov	r0, r4
 800e632:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e636:	3a30      	subs	r2, #48	@ 0x30
 800e638:	2a09      	cmp	r2, #9
 800e63a:	d903      	bls.n	800e644 <_vfiprintf_r+0x1cc>
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d0c6      	beq.n	800e5ce <_vfiprintf_r+0x156>
 800e640:	9105      	str	r1, [sp, #20]
 800e642:	e7c4      	b.n	800e5ce <_vfiprintf_r+0x156>
 800e644:	fb0c 2101 	mla	r1, ip, r1, r2
 800e648:	4604      	mov	r4, r0
 800e64a:	2301      	movs	r3, #1
 800e64c:	e7f0      	b.n	800e630 <_vfiprintf_r+0x1b8>
 800e64e:	ab03      	add	r3, sp, #12
 800e650:	9300      	str	r3, [sp, #0]
 800e652:	462a      	mov	r2, r5
 800e654:	4b12      	ldr	r3, [pc, #72]	@ (800e6a0 <_vfiprintf_r+0x228>)
 800e656:	a904      	add	r1, sp, #16
 800e658:	4630      	mov	r0, r6
 800e65a:	f7fd fc2f 	bl	800bebc <_printf_float>
 800e65e:	4607      	mov	r7, r0
 800e660:	1c78      	adds	r0, r7, #1
 800e662:	d1d6      	bne.n	800e612 <_vfiprintf_r+0x19a>
 800e664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e666:	07d9      	lsls	r1, r3, #31
 800e668:	d405      	bmi.n	800e676 <_vfiprintf_r+0x1fe>
 800e66a:	89ab      	ldrh	r3, [r5, #12]
 800e66c:	059a      	lsls	r2, r3, #22
 800e66e:	d402      	bmi.n	800e676 <_vfiprintf_r+0x1fe>
 800e670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e672:	f7fe fa9d 	bl	800cbb0 <__retarget_lock_release_recursive>
 800e676:	89ab      	ldrh	r3, [r5, #12]
 800e678:	065b      	lsls	r3, r3, #25
 800e67a:	f53f af1f 	bmi.w	800e4bc <_vfiprintf_r+0x44>
 800e67e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e680:	e71e      	b.n	800e4c0 <_vfiprintf_r+0x48>
 800e682:	ab03      	add	r3, sp, #12
 800e684:	9300      	str	r3, [sp, #0]
 800e686:	462a      	mov	r2, r5
 800e688:	4b05      	ldr	r3, [pc, #20]	@ (800e6a0 <_vfiprintf_r+0x228>)
 800e68a:	a904      	add	r1, sp, #16
 800e68c:	4630      	mov	r0, r6
 800e68e:	f7fd fead 	bl	800c3ec <_printf_i>
 800e692:	e7e4      	b.n	800e65e <_vfiprintf_r+0x1e6>
 800e694:	0800f08c 	.word	0x0800f08c
 800e698:	0800f096 	.word	0x0800f096
 800e69c:	0800bebd 	.word	0x0800bebd
 800e6a0:	0800e453 	.word	0x0800e453
 800e6a4:	0800f092 	.word	0x0800f092

0800e6a8 <__sflush_r>:
 800e6a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b0:	0716      	lsls	r6, r2, #28
 800e6b2:	4605      	mov	r5, r0
 800e6b4:	460c      	mov	r4, r1
 800e6b6:	d454      	bmi.n	800e762 <__sflush_r+0xba>
 800e6b8:	684b      	ldr	r3, [r1, #4]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	dc02      	bgt.n	800e6c4 <__sflush_r+0x1c>
 800e6be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	dd48      	ble.n	800e756 <__sflush_r+0xae>
 800e6c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e6c6:	2e00      	cmp	r6, #0
 800e6c8:	d045      	beq.n	800e756 <__sflush_r+0xae>
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e6d0:	682f      	ldr	r7, [r5, #0]
 800e6d2:	6a21      	ldr	r1, [r4, #32]
 800e6d4:	602b      	str	r3, [r5, #0]
 800e6d6:	d030      	beq.n	800e73a <__sflush_r+0x92>
 800e6d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e6da:	89a3      	ldrh	r3, [r4, #12]
 800e6dc:	0759      	lsls	r1, r3, #29
 800e6de:	d505      	bpl.n	800e6ec <__sflush_r+0x44>
 800e6e0:	6863      	ldr	r3, [r4, #4]
 800e6e2:	1ad2      	subs	r2, r2, r3
 800e6e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e6e6:	b10b      	cbz	r3, 800e6ec <__sflush_r+0x44>
 800e6e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e6ea:	1ad2      	subs	r2, r2, r3
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e6f0:	6a21      	ldr	r1, [r4, #32]
 800e6f2:	4628      	mov	r0, r5
 800e6f4:	47b0      	blx	r6
 800e6f6:	1c43      	adds	r3, r0, #1
 800e6f8:	89a3      	ldrh	r3, [r4, #12]
 800e6fa:	d106      	bne.n	800e70a <__sflush_r+0x62>
 800e6fc:	6829      	ldr	r1, [r5, #0]
 800e6fe:	291d      	cmp	r1, #29
 800e700:	d82b      	bhi.n	800e75a <__sflush_r+0xb2>
 800e702:	4a2a      	ldr	r2, [pc, #168]	@ (800e7ac <__sflush_r+0x104>)
 800e704:	40ca      	lsrs	r2, r1
 800e706:	07d6      	lsls	r6, r2, #31
 800e708:	d527      	bpl.n	800e75a <__sflush_r+0xb2>
 800e70a:	2200      	movs	r2, #0
 800e70c:	6062      	str	r2, [r4, #4]
 800e70e:	04d9      	lsls	r1, r3, #19
 800e710:	6922      	ldr	r2, [r4, #16]
 800e712:	6022      	str	r2, [r4, #0]
 800e714:	d504      	bpl.n	800e720 <__sflush_r+0x78>
 800e716:	1c42      	adds	r2, r0, #1
 800e718:	d101      	bne.n	800e71e <__sflush_r+0x76>
 800e71a:	682b      	ldr	r3, [r5, #0]
 800e71c:	b903      	cbnz	r3, 800e720 <__sflush_r+0x78>
 800e71e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e720:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e722:	602f      	str	r7, [r5, #0]
 800e724:	b1b9      	cbz	r1, 800e756 <__sflush_r+0xae>
 800e726:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e72a:	4299      	cmp	r1, r3
 800e72c:	d002      	beq.n	800e734 <__sflush_r+0x8c>
 800e72e:	4628      	mov	r0, r5
 800e730:	f7ff f8a6 	bl	800d880 <_free_r>
 800e734:	2300      	movs	r3, #0
 800e736:	6363      	str	r3, [r4, #52]	@ 0x34
 800e738:	e00d      	b.n	800e756 <__sflush_r+0xae>
 800e73a:	2301      	movs	r3, #1
 800e73c:	4628      	mov	r0, r5
 800e73e:	47b0      	blx	r6
 800e740:	4602      	mov	r2, r0
 800e742:	1c50      	adds	r0, r2, #1
 800e744:	d1c9      	bne.n	800e6da <__sflush_r+0x32>
 800e746:	682b      	ldr	r3, [r5, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d0c6      	beq.n	800e6da <__sflush_r+0x32>
 800e74c:	2b1d      	cmp	r3, #29
 800e74e:	d001      	beq.n	800e754 <__sflush_r+0xac>
 800e750:	2b16      	cmp	r3, #22
 800e752:	d11e      	bne.n	800e792 <__sflush_r+0xea>
 800e754:	602f      	str	r7, [r5, #0]
 800e756:	2000      	movs	r0, #0
 800e758:	e022      	b.n	800e7a0 <__sflush_r+0xf8>
 800e75a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e75e:	b21b      	sxth	r3, r3
 800e760:	e01b      	b.n	800e79a <__sflush_r+0xf2>
 800e762:	690f      	ldr	r7, [r1, #16]
 800e764:	2f00      	cmp	r7, #0
 800e766:	d0f6      	beq.n	800e756 <__sflush_r+0xae>
 800e768:	0793      	lsls	r3, r2, #30
 800e76a:	680e      	ldr	r6, [r1, #0]
 800e76c:	bf08      	it	eq
 800e76e:	694b      	ldreq	r3, [r1, #20]
 800e770:	600f      	str	r7, [r1, #0]
 800e772:	bf18      	it	ne
 800e774:	2300      	movne	r3, #0
 800e776:	eba6 0807 	sub.w	r8, r6, r7
 800e77a:	608b      	str	r3, [r1, #8]
 800e77c:	f1b8 0f00 	cmp.w	r8, #0
 800e780:	dde9      	ble.n	800e756 <__sflush_r+0xae>
 800e782:	6a21      	ldr	r1, [r4, #32]
 800e784:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e786:	4643      	mov	r3, r8
 800e788:	463a      	mov	r2, r7
 800e78a:	4628      	mov	r0, r5
 800e78c:	47b0      	blx	r6
 800e78e:	2800      	cmp	r0, #0
 800e790:	dc08      	bgt.n	800e7a4 <__sflush_r+0xfc>
 800e792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e79a:	81a3      	strh	r3, [r4, #12]
 800e79c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7a4:	4407      	add	r7, r0
 800e7a6:	eba8 0800 	sub.w	r8, r8, r0
 800e7aa:	e7e7      	b.n	800e77c <__sflush_r+0xd4>
 800e7ac:	20400001 	.word	0x20400001

0800e7b0 <_fflush_r>:
 800e7b0:	b538      	push	{r3, r4, r5, lr}
 800e7b2:	690b      	ldr	r3, [r1, #16]
 800e7b4:	4605      	mov	r5, r0
 800e7b6:	460c      	mov	r4, r1
 800e7b8:	b913      	cbnz	r3, 800e7c0 <_fflush_r+0x10>
 800e7ba:	2500      	movs	r5, #0
 800e7bc:	4628      	mov	r0, r5
 800e7be:	bd38      	pop	{r3, r4, r5, pc}
 800e7c0:	b118      	cbz	r0, 800e7ca <_fflush_r+0x1a>
 800e7c2:	6a03      	ldr	r3, [r0, #32]
 800e7c4:	b90b      	cbnz	r3, 800e7ca <_fflush_r+0x1a>
 800e7c6:	f7fd ffbb 	bl	800c740 <__sinit>
 800e7ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d0f3      	beq.n	800e7ba <_fflush_r+0xa>
 800e7d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e7d4:	07d0      	lsls	r0, r2, #31
 800e7d6:	d404      	bmi.n	800e7e2 <_fflush_r+0x32>
 800e7d8:	0599      	lsls	r1, r3, #22
 800e7da:	d402      	bmi.n	800e7e2 <_fflush_r+0x32>
 800e7dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e7de:	f7fe f9e6 	bl	800cbae <__retarget_lock_acquire_recursive>
 800e7e2:	4628      	mov	r0, r5
 800e7e4:	4621      	mov	r1, r4
 800e7e6:	f7ff ff5f 	bl	800e6a8 <__sflush_r>
 800e7ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e7ec:	07da      	lsls	r2, r3, #31
 800e7ee:	4605      	mov	r5, r0
 800e7f0:	d4e4      	bmi.n	800e7bc <_fflush_r+0xc>
 800e7f2:	89a3      	ldrh	r3, [r4, #12]
 800e7f4:	059b      	lsls	r3, r3, #22
 800e7f6:	d4e1      	bmi.n	800e7bc <_fflush_r+0xc>
 800e7f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e7fa:	f7fe f9d9 	bl	800cbb0 <__retarget_lock_release_recursive>
 800e7fe:	e7dd      	b.n	800e7bc <_fflush_r+0xc>

0800e800 <__swhatbuf_r>:
 800e800:	b570      	push	{r4, r5, r6, lr}
 800e802:	460c      	mov	r4, r1
 800e804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e808:	2900      	cmp	r1, #0
 800e80a:	b096      	sub	sp, #88	@ 0x58
 800e80c:	4615      	mov	r5, r2
 800e80e:	461e      	mov	r6, r3
 800e810:	da0d      	bge.n	800e82e <__swhatbuf_r+0x2e>
 800e812:	89a3      	ldrh	r3, [r4, #12]
 800e814:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e818:	f04f 0100 	mov.w	r1, #0
 800e81c:	bf14      	ite	ne
 800e81e:	2340      	movne	r3, #64	@ 0x40
 800e820:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e824:	2000      	movs	r0, #0
 800e826:	6031      	str	r1, [r6, #0]
 800e828:	602b      	str	r3, [r5, #0]
 800e82a:	b016      	add	sp, #88	@ 0x58
 800e82c:	bd70      	pop	{r4, r5, r6, pc}
 800e82e:	466a      	mov	r2, sp
 800e830:	f000 f862 	bl	800e8f8 <_fstat_r>
 800e834:	2800      	cmp	r0, #0
 800e836:	dbec      	blt.n	800e812 <__swhatbuf_r+0x12>
 800e838:	9901      	ldr	r1, [sp, #4]
 800e83a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e83e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e842:	4259      	negs	r1, r3
 800e844:	4159      	adcs	r1, r3
 800e846:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e84a:	e7eb      	b.n	800e824 <__swhatbuf_r+0x24>

0800e84c <__smakebuf_r>:
 800e84c:	898b      	ldrh	r3, [r1, #12]
 800e84e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e850:	079d      	lsls	r5, r3, #30
 800e852:	4606      	mov	r6, r0
 800e854:	460c      	mov	r4, r1
 800e856:	d507      	bpl.n	800e868 <__smakebuf_r+0x1c>
 800e858:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e85c:	6023      	str	r3, [r4, #0]
 800e85e:	6123      	str	r3, [r4, #16]
 800e860:	2301      	movs	r3, #1
 800e862:	6163      	str	r3, [r4, #20]
 800e864:	b003      	add	sp, #12
 800e866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e868:	ab01      	add	r3, sp, #4
 800e86a:	466a      	mov	r2, sp
 800e86c:	f7ff ffc8 	bl	800e800 <__swhatbuf_r>
 800e870:	9f00      	ldr	r7, [sp, #0]
 800e872:	4605      	mov	r5, r0
 800e874:	4639      	mov	r1, r7
 800e876:	4630      	mov	r0, r6
 800e878:	f7ff f876 	bl	800d968 <_malloc_r>
 800e87c:	b948      	cbnz	r0, 800e892 <__smakebuf_r+0x46>
 800e87e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e882:	059a      	lsls	r2, r3, #22
 800e884:	d4ee      	bmi.n	800e864 <__smakebuf_r+0x18>
 800e886:	f023 0303 	bic.w	r3, r3, #3
 800e88a:	f043 0302 	orr.w	r3, r3, #2
 800e88e:	81a3      	strh	r3, [r4, #12]
 800e890:	e7e2      	b.n	800e858 <__smakebuf_r+0xc>
 800e892:	89a3      	ldrh	r3, [r4, #12]
 800e894:	6020      	str	r0, [r4, #0]
 800e896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e89a:	81a3      	strh	r3, [r4, #12]
 800e89c:	9b01      	ldr	r3, [sp, #4]
 800e89e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e8a2:	b15b      	cbz	r3, 800e8bc <__smakebuf_r+0x70>
 800e8a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8a8:	4630      	mov	r0, r6
 800e8aa:	f000 f837 	bl	800e91c <_isatty_r>
 800e8ae:	b128      	cbz	r0, 800e8bc <__smakebuf_r+0x70>
 800e8b0:	89a3      	ldrh	r3, [r4, #12]
 800e8b2:	f023 0303 	bic.w	r3, r3, #3
 800e8b6:	f043 0301 	orr.w	r3, r3, #1
 800e8ba:	81a3      	strh	r3, [r4, #12]
 800e8bc:	89a3      	ldrh	r3, [r4, #12]
 800e8be:	431d      	orrs	r5, r3
 800e8c0:	81a5      	strh	r5, [r4, #12]
 800e8c2:	e7cf      	b.n	800e864 <__smakebuf_r+0x18>

0800e8c4 <memmove>:
 800e8c4:	4288      	cmp	r0, r1
 800e8c6:	b510      	push	{r4, lr}
 800e8c8:	eb01 0402 	add.w	r4, r1, r2
 800e8cc:	d902      	bls.n	800e8d4 <memmove+0x10>
 800e8ce:	4284      	cmp	r4, r0
 800e8d0:	4623      	mov	r3, r4
 800e8d2:	d807      	bhi.n	800e8e4 <memmove+0x20>
 800e8d4:	1e43      	subs	r3, r0, #1
 800e8d6:	42a1      	cmp	r1, r4
 800e8d8:	d008      	beq.n	800e8ec <memmove+0x28>
 800e8da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8e2:	e7f8      	b.n	800e8d6 <memmove+0x12>
 800e8e4:	4402      	add	r2, r0
 800e8e6:	4601      	mov	r1, r0
 800e8e8:	428a      	cmp	r2, r1
 800e8ea:	d100      	bne.n	800e8ee <memmove+0x2a>
 800e8ec:	bd10      	pop	{r4, pc}
 800e8ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e8f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e8f6:	e7f7      	b.n	800e8e8 <memmove+0x24>

0800e8f8 <_fstat_r>:
 800e8f8:	b538      	push	{r3, r4, r5, lr}
 800e8fa:	4d07      	ldr	r5, [pc, #28]	@ (800e918 <_fstat_r+0x20>)
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	4604      	mov	r4, r0
 800e900:	4608      	mov	r0, r1
 800e902:	4611      	mov	r1, r2
 800e904:	602b      	str	r3, [r5, #0]
 800e906:	f7f3 f9af 	bl	8001c68 <_fstat>
 800e90a:	1c43      	adds	r3, r0, #1
 800e90c:	d102      	bne.n	800e914 <_fstat_r+0x1c>
 800e90e:	682b      	ldr	r3, [r5, #0]
 800e910:	b103      	cbz	r3, 800e914 <_fstat_r+0x1c>
 800e912:	6023      	str	r3, [r4, #0]
 800e914:	bd38      	pop	{r3, r4, r5, pc}
 800e916:	bf00      	nop
 800e918:	200021ec 	.word	0x200021ec

0800e91c <_isatty_r>:
 800e91c:	b538      	push	{r3, r4, r5, lr}
 800e91e:	4d06      	ldr	r5, [pc, #24]	@ (800e938 <_isatty_r+0x1c>)
 800e920:	2300      	movs	r3, #0
 800e922:	4604      	mov	r4, r0
 800e924:	4608      	mov	r0, r1
 800e926:	602b      	str	r3, [r5, #0]
 800e928:	f7f3 f9ae 	bl	8001c88 <_isatty>
 800e92c:	1c43      	adds	r3, r0, #1
 800e92e:	d102      	bne.n	800e936 <_isatty_r+0x1a>
 800e930:	682b      	ldr	r3, [r5, #0]
 800e932:	b103      	cbz	r3, 800e936 <_isatty_r+0x1a>
 800e934:	6023      	str	r3, [r4, #0]
 800e936:	bd38      	pop	{r3, r4, r5, pc}
 800e938:	200021ec 	.word	0x200021ec

0800e93c <_sbrk_r>:
 800e93c:	b538      	push	{r3, r4, r5, lr}
 800e93e:	4d06      	ldr	r5, [pc, #24]	@ (800e958 <_sbrk_r+0x1c>)
 800e940:	2300      	movs	r3, #0
 800e942:	4604      	mov	r4, r0
 800e944:	4608      	mov	r0, r1
 800e946:	602b      	str	r3, [r5, #0]
 800e948:	f7f3 f9b6 	bl	8001cb8 <_sbrk>
 800e94c:	1c43      	adds	r3, r0, #1
 800e94e:	d102      	bne.n	800e956 <_sbrk_r+0x1a>
 800e950:	682b      	ldr	r3, [r5, #0]
 800e952:	b103      	cbz	r3, 800e956 <_sbrk_r+0x1a>
 800e954:	6023      	str	r3, [r4, #0]
 800e956:	bd38      	pop	{r3, r4, r5, pc}
 800e958:	200021ec 	.word	0x200021ec

0800e95c <__assert_func>:
 800e95c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e95e:	4614      	mov	r4, r2
 800e960:	461a      	mov	r2, r3
 800e962:	4b09      	ldr	r3, [pc, #36]	@ (800e988 <__assert_func+0x2c>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	4605      	mov	r5, r0
 800e968:	68d8      	ldr	r0, [r3, #12]
 800e96a:	b14c      	cbz	r4, 800e980 <__assert_func+0x24>
 800e96c:	4b07      	ldr	r3, [pc, #28]	@ (800e98c <__assert_func+0x30>)
 800e96e:	9100      	str	r1, [sp, #0]
 800e970:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e974:	4906      	ldr	r1, [pc, #24]	@ (800e990 <__assert_func+0x34>)
 800e976:	462b      	mov	r3, r5
 800e978:	f000 f870 	bl	800ea5c <fiprintf>
 800e97c:	f000 f880 	bl	800ea80 <abort>
 800e980:	4b04      	ldr	r3, [pc, #16]	@ (800e994 <__assert_func+0x38>)
 800e982:	461c      	mov	r4, r3
 800e984:	e7f3      	b.n	800e96e <__assert_func+0x12>
 800e986:	bf00      	nop
 800e988:	20000110 	.word	0x20000110
 800e98c:	0800f0a7 	.word	0x0800f0a7
 800e990:	0800f0b4 	.word	0x0800f0b4
 800e994:	0800f0e2 	.word	0x0800f0e2

0800e998 <_calloc_r>:
 800e998:	b570      	push	{r4, r5, r6, lr}
 800e99a:	fba1 5402 	umull	r5, r4, r1, r2
 800e99e:	b934      	cbnz	r4, 800e9ae <_calloc_r+0x16>
 800e9a0:	4629      	mov	r1, r5
 800e9a2:	f7fe ffe1 	bl	800d968 <_malloc_r>
 800e9a6:	4606      	mov	r6, r0
 800e9a8:	b928      	cbnz	r0, 800e9b6 <_calloc_r+0x1e>
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	bd70      	pop	{r4, r5, r6, pc}
 800e9ae:	220c      	movs	r2, #12
 800e9b0:	6002      	str	r2, [r0, #0]
 800e9b2:	2600      	movs	r6, #0
 800e9b4:	e7f9      	b.n	800e9aa <_calloc_r+0x12>
 800e9b6:	462a      	mov	r2, r5
 800e9b8:	4621      	mov	r1, r4
 800e9ba:	f7fe f87b 	bl	800cab4 <memset>
 800e9be:	e7f4      	b.n	800e9aa <_calloc_r+0x12>

0800e9c0 <__ascii_mbtowc>:
 800e9c0:	b082      	sub	sp, #8
 800e9c2:	b901      	cbnz	r1, 800e9c6 <__ascii_mbtowc+0x6>
 800e9c4:	a901      	add	r1, sp, #4
 800e9c6:	b142      	cbz	r2, 800e9da <__ascii_mbtowc+0x1a>
 800e9c8:	b14b      	cbz	r3, 800e9de <__ascii_mbtowc+0x1e>
 800e9ca:	7813      	ldrb	r3, [r2, #0]
 800e9cc:	600b      	str	r3, [r1, #0]
 800e9ce:	7812      	ldrb	r2, [r2, #0]
 800e9d0:	1e10      	subs	r0, r2, #0
 800e9d2:	bf18      	it	ne
 800e9d4:	2001      	movne	r0, #1
 800e9d6:	b002      	add	sp, #8
 800e9d8:	4770      	bx	lr
 800e9da:	4610      	mov	r0, r2
 800e9dc:	e7fb      	b.n	800e9d6 <__ascii_mbtowc+0x16>
 800e9de:	f06f 0001 	mvn.w	r0, #1
 800e9e2:	e7f8      	b.n	800e9d6 <__ascii_mbtowc+0x16>

0800e9e4 <_realloc_r>:
 800e9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e8:	4607      	mov	r7, r0
 800e9ea:	4614      	mov	r4, r2
 800e9ec:	460d      	mov	r5, r1
 800e9ee:	b921      	cbnz	r1, 800e9fa <_realloc_r+0x16>
 800e9f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9f4:	4611      	mov	r1, r2
 800e9f6:	f7fe bfb7 	b.w	800d968 <_malloc_r>
 800e9fa:	b92a      	cbnz	r2, 800ea08 <_realloc_r+0x24>
 800e9fc:	f7fe ff40 	bl	800d880 <_free_r>
 800ea00:	4625      	mov	r5, r4
 800ea02:	4628      	mov	r0, r5
 800ea04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea08:	f000 f841 	bl	800ea8e <_malloc_usable_size_r>
 800ea0c:	4284      	cmp	r4, r0
 800ea0e:	4606      	mov	r6, r0
 800ea10:	d802      	bhi.n	800ea18 <_realloc_r+0x34>
 800ea12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea16:	d8f4      	bhi.n	800ea02 <_realloc_r+0x1e>
 800ea18:	4621      	mov	r1, r4
 800ea1a:	4638      	mov	r0, r7
 800ea1c:	f7fe ffa4 	bl	800d968 <_malloc_r>
 800ea20:	4680      	mov	r8, r0
 800ea22:	b908      	cbnz	r0, 800ea28 <_realloc_r+0x44>
 800ea24:	4645      	mov	r5, r8
 800ea26:	e7ec      	b.n	800ea02 <_realloc_r+0x1e>
 800ea28:	42b4      	cmp	r4, r6
 800ea2a:	4622      	mov	r2, r4
 800ea2c:	4629      	mov	r1, r5
 800ea2e:	bf28      	it	cs
 800ea30:	4632      	movcs	r2, r6
 800ea32:	f7fe f8be 	bl	800cbb2 <memcpy>
 800ea36:	4629      	mov	r1, r5
 800ea38:	4638      	mov	r0, r7
 800ea3a:	f7fe ff21 	bl	800d880 <_free_r>
 800ea3e:	e7f1      	b.n	800ea24 <_realloc_r+0x40>

0800ea40 <__ascii_wctomb>:
 800ea40:	4603      	mov	r3, r0
 800ea42:	4608      	mov	r0, r1
 800ea44:	b141      	cbz	r1, 800ea58 <__ascii_wctomb+0x18>
 800ea46:	2aff      	cmp	r2, #255	@ 0xff
 800ea48:	d904      	bls.n	800ea54 <__ascii_wctomb+0x14>
 800ea4a:	228a      	movs	r2, #138	@ 0x8a
 800ea4c:	601a      	str	r2, [r3, #0]
 800ea4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea52:	4770      	bx	lr
 800ea54:	700a      	strb	r2, [r1, #0]
 800ea56:	2001      	movs	r0, #1
 800ea58:	4770      	bx	lr
	...

0800ea5c <fiprintf>:
 800ea5c:	b40e      	push	{r1, r2, r3}
 800ea5e:	b503      	push	{r0, r1, lr}
 800ea60:	4601      	mov	r1, r0
 800ea62:	ab03      	add	r3, sp, #12
 800ea64:	4805      	ldr	r0, [pc, #20]	@ (800ea7c <fiprintf+0x20>)
 800ea66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea6a:	6800      	ldr	r0, [r0, #0]
 800ea6c:	9301      	str	r3, [sp, #4]
 800ea6e:	f7ff fd03 	bl	800e478 <_vfiprintf_r>
 800ea72:	b002      	add	sp, #8
 800ea74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea78:	b003      	add	sp, #12
 800ea7a:	4770      	bx	lr
 800ea7c:	20000110 	.word	0x20000110

0800ea80 <abort>:
 800ea80:	b508      	push	{r3, lr}
 800ea82:	2006      	movs	r0, #6
 800ea84:	f000 f834 	bl	800eaf0 <raise>
 800ea88:	2001      	movs	r0, #1
 800ea8a:	f7f3 f89d 	bl	8001bc8 <_exit>

0800ea8e <_malloc_usable_size_r>:
 800ea8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea92:	1f18      	subs	r0, r3, #4
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	bfbc      	itt	lt
 800ea98:	580b      	ldrlt	r3, [r1, r0]
 800ea9a:	18c0      	addlt	r0, r0, r3
 800ea9c:	4770      	bx	lr

0800ea9e <_raise_r>:
 800ea9e:	291f      	cmp	r1, #31
 800eaa0:	b538      	push	{r3, r4, r5, lr}
 800eaa2:	4605      	mov	r5, r0
 800eaa4:	460c      	mov	r4, r1
 800eaa6:	d904      	bls.n	800eab2 <_raise_r+0x14>
 800eaa8:	2316      	movs	r3, #22
 800eaaa:	6003      	str	r3, [r0, #0]
 800eaac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eab0:	bd38      	pop	{r3, r4, r5, pc}
 800eab2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eab4:	b112      	cbz	r2, 800eabc <_raise_r+0x1e>
 800eab6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eaba:	b94b      	cbnz	r3, 800ead0 <_raise_r+0x32>
 800eabc:	4628      	mov	r0, r5
 800eabe:	f000 f831 	bl	800eb24 <_getpid_r>
 800eac2:	4622      	mov	r2, r4
 800eac4:	4601      	mov	r1, r0
 800eac6:	4628      	mov	r0, r5
 800eac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eacc:	f000 b818 	b.w	800eb00 <_kill_r>
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d00a      	beq.n	800eaea <_raise_r+0x4c>
 800ead4:	1c59      	adds	r1, r3, #1
 800ead6:	d103      	bne.n	800eae0 <_raise_r+0x42>
 800ead8:	2316      	movs	r3, #22
 800eada:	6003      	str	r3, [r0, #0]
 800eadc:	2001      	movs	r0, #1
 800eade:	e7e7      	b.n	800eab0 <_raise_r+0x12>
 800eae0:	2100      	movs	r1, #0
 800eae2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eae6:	4620      	mov	r0, r4
 800eae8:	4798      	blx	r3
 800eaea:	2000      	movs	r0, #0
 800eaec:	e7e0      	b.n	800eab0 <_raise_r+0x12>
	...

0800eaf0 <raise>:
 800eaf0:	4b02      	ldr	r3, [pc, #8]	@ (800eafc <raise+0xc>)
 800eaf2:	4601      	mov	r1, r0
 800eaf4:	6818      	ldr	r0, [r3, #0]
 800eaf6:	f7ff bfd2 	b.w	800ea9e <_raise_r>
 800eafa:	bf00      	nop
 800eafc:	20000110 	.word	0x20000110

0800eb00 <_kill_r>:
 800eb00:	b538      	push	{r3, r4, r5, lr}
 800eb02:	4d07      	ldr	r5, [pc, #28]	@ (800eb20 <_kill_r+0x20>)
 800eb04:	2300      	movs	r3, #0
 800eb06:	4604      	mov	r4, r0
 800eb08:	4608      	mov	r0, r1
 800eb0a:	4611      	mov	r1, r2
 800eb0c:	602b      	str	r3, [r5, #0]
 800eb0e:	f7f3 f84b 	bl	8001ba8 <_kill>
 800eb12:	1c43      	adds	r3, r0, #1
 800eb14:	d102      	bne.n	800eb1c <_kill_r+0x1c>
 800eb16:	682b      	ldr	r3, [r5, #0]
 800eb18:	b103      	cbz	r3, 800eb1c <_kill_r+0x1c>
 800eb1a:	6023      	str	r3, [r4, #0]
 800eb1c:	bd38      	pop	{r3, r4, r5, pc}
 800eb1e:	bf00      	nop
 800eb20:	200021ec 	.word	0x200021ec

0800eb24 <_getpid_r>:
 800eb24:	f7f3 b838 	b.w	8001b98 <_getpid>

0800eb28 <_init>:
 800eb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb2a:	bf00      	nop
 800eb2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb2e:	bc08      	pop	{r3}
 800eb30:	469e      	mov	lr, r3
 800eb32:	4770      	bx	lr

0800eb34 <_fini>:
 800eb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb36:	bf00      	nop
 800eb38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb3a:	bc08      	pop	{r3}
 800eb3c:	469e      	mov	lr, r3
 800eb3e:	4770      	bx	lr
