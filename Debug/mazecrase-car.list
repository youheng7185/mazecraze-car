
mazecrase-car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008048  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  080081e8  080081e8  000091e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086dc  080086dc  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080086dc  080086dc  000096dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086e4  080086e4  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086e4  080086e4  000096e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086e8  080086e8  000096e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080086ec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  200001d4  080088c0  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  080088c0  0000a468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001688c  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226a  00000000  00000000  00020a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00022d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e4b  00000000  00000000  00023f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d6c  00000000  00000000  00024dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010922  00000000  00000000  0003cb3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000907ec  00000000  00000000  0004d461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ddc4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006040  00000000  00000000  000ddc90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e3cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080081d0 	.word	0x080081d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080081d0 	.word	0x080081d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <my_printf>:
#include <stdlib.h>

extern UART_HandleTypeDef huart1;

static inline void my_printf(const char *format, ...)
{
 8000ee4:	b40f      	push	{r0, r1, r2, r3}
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b0c2      	sub	sp, #264	@ 0x108
 8000eea:	af00      	add	r7, sp, #0
    char buffer[256];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8000eec:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ef4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ef8:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000f02:	f107 0008 	add.w	r0, r7, #8
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000f0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f10:	f005 f882 	bl	8006018 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff f9b1 	bl	8000280 <strlen>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	f107 0108 	add.w	r1, r7, #8
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f2a:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <my_printf+0x5c>)
 8000f2c:	f003 ff2e 	bl	8004d8c <HAL_UART_Transmit>
}
 8000f30:	bf00      	nop
 8000f32:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000f36:	46bd      	mov	sp, r7
 8000f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4770      	bx	lr
 8000f40:	200002c8 	.word	0x200002c8

08000f44 <lsm6dsl_read_data_polling>:
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len);
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len);
static void platform_delay(uint32_t ms);

void lsm6dsl_read_data_polling(void)
{
 8000f44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f48:	b08a      	sub	sp, #40	@ 0x28
 8000f4a:	af04      	add	r7, sp, #16
  /* Initialize mems driver interface */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8000f4c:	4b9c      	ldr	r3, [pc, #624]	@ (80011c0 <lsm6dsl_read_data_polling+0x27c>)
 8000f4e:	60bb      	str	r3, [r7, #8]
  dev_ctx.read_reg = platform_read;
 8000f50:	4b9c      	ldr	r3, [pc, #624]	@ (80011c4 <lsm6dsl_read_data_polling+0x280>)
 8000f52:	60fb      	str	r3, [r7, #12]
  dev_ctx.mdelay = platform_delay;
 8000f54:	4b9c      	ldr	r3, [pc, #624]	@ (80011c8 <lsm6dsl_read_data_polling+0x284>)
 8000f56:	613b      	str	r3, [r7, #16]
  dev_ctx.handle = &SENSOR_BUS;
 8000f58:	4b9c      	ldr	r3, [pc, #624]	@ (80011cc <lsm6dsl_read_data_polling+0x288>)
 8000f5a:	617b      	str	r3, [r7, #20]

  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 8000f5c:	200f      	movs	r0, #15
 8000f5e:	f000 f991 	bl	8001284 <platform_delay>
  /* Check device ID */
  whoamI = 0;
 8000f62:	4b9b      	ldr	r3, [pc, #620]	@ (80011d0 <lsm6dsl_read_data_polling+0x28c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
  lsm6dsl_device_id_get(&dev_ctx, &whoamI);
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	4998      	ldr	r1, [pc, #608]	@ (80011d0 <lsm6dsl_read_data_polling+0x28c>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fb9d 	bl	80016ae <lsm6dsl_device_id_get>

  if ( whoamI != LSM6DSL_ID ) {
 8000f74:	4b96      	ldr	r3, [pc, #600]	@ (80011d0 <lsm6dsl_read_data_polling+0x28c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b6a      	cmp	r3, #106	@ 0x6a
 8000f7a:	d007      	beq.n	8000f8c <lsm6dsl_read_data_polling+0x48>
	  my_printf("device id is wrong: %d\r\n", whoamI);
 8000f7c:	4b94      	ldr	r3, [pc, #592]	@ (80011d0 <lsm6dsl_read_data_polling+0x28c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4894      	ldr	r0, [pc, #592]	@ (80011d4 <lsm6dsl_read_data_polling+0x290>)
 8000f84:	f7ff ffae 	bl	8000ee4 <my_printf>
	  while (1);
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <lsm6dsl_read_data_polling+0x44>
	  /*manage here device not found */
  } else {
	  my_printf("device id correct\r\n");
 8000f8c:	4892      	ldr	r0, [pc, #584]	@ (80011d8 <lsm6dsl_read_data_polling+0x294>)
 8000f8e:	f7ff ffa9 	bl	8000ee4 <my_printf>
  }


  /* Restore default configuration */
  lsm6dsl_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	2101      	movs	r1, #1
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 fb99 	bl	80016d0 <lsm6dsl_reset_set>
  my_printf("restore default config correct\r\n");
 8000f9e:	488f      	ldr	r0, [pc, #572]	@ (80011dc <lsm6dsl_read_data_polling+0x298>)
 8000fa0:	f7ff ffa0 	bl	8000ee4 <my_printf>
  do {
    lsm6dsl_reset_get(&dev_ctx, &rst);
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	498d      	ldr	r1, [pc, #564]	@ (80011e0 <lsm6dsl_read_data_polling+0x29c>)
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fbb6 	bl	800171c <lsm6dsl_reset_get>
  } while (rst);
 8000fb0:	4b8b      	ldr	r3, [pc, #556]	@ (80011e0 <lsm6dsl_read_data_polling+0x29c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1f5      	bne.n	8000fa4 <lsm6dsl_read_data_polling+0x60>
  my_printf("reset done\r\n");
 8000fb8:	488a      	ldr	r0, [pc, #552]	@ (80011e4 <lsm6dsl_read_data_polling+0x2a0>)
 8000fba:	f7ff ff93 	bl	8000ee4 <my_printf>
  /* Enable Block Data Update */
  lsm6dsl_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fa89 	bl	80014dc <lsm6dsl_block_data_update_set>
  /* Set Output Data Rate */
  lsm6dsl_xl_data_rate_set(&dev_ctx, LSM6DSL_XL_ODR_12Hz5);
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	2101      	movs	r1, #1
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 fa11 	bl	80013f8 <lsm6dsl_xl_data_rate_set>
  lsm6dsl_gy_data_rate_set(&dev_ctx, LSM6DSL_GY_ODR_12Hz5);
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	2101      	movs	r1, #1
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 fa57 	bl	8001490 <lsm6dsl_gy_data_rate_set>
  /* Set full scale */
  lsm6dsl_xl_full_scale_set(&dev_ctx, LSM6DSL_2g);
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f9df 	bl	80013ac <lsm6dsl_xl_full_scale_set>
  lsm6dsl_gy_full_scale_set(&dev_ctx, LSM6DSL_2000dps);
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	2106      	movs	r1, #6
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fa25 	bl	8001444 <lsm6dsl_gy_full_scale_set>
  /* Configure filtering chain(No aux interface) */
  /* Accelerometer - analog filter */
  lsm6dsl_xl_filter_analog_set(&dev_ctx, LSM6DSL_XL_ANA_BW_400Hz);
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2101      	movs	r1, #1
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fba4 	bl	800174e <lsm6dsl_xl_filter_analog_set>
  /* Accelerometer - LPF1 path ( LPF2 not used )*/
  //lsm6dsl_xl_lp1_bandwidth_set(&dev_ctx, LSM6DSL_XL_LP1_ODR_DIV_4);
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx,
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	2111      	movs	r1, #17
 800100c:	4618      	mov	r0, r3
 800100e:	f000 fbc4 	bl	800179a <lsm6dsl_xl_lp2_bandwidth_set>
                               LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
  /* Accelerometer - High Pass / Slope path */
  //lsm6dsl_xl_reference_mode_set(&dev_ctx, PROPERTY_DISABLE);
  //lsm6dsl_xl_hp_bandwidth_set(&dev_ctx, LSM6DSL_XL_HP_ODR_DIV_100);
  /* Gyroscope - filtering chain */
  lsm6dsl_gy_band_pass_set(&dev_ctx, LSM6DSL_HP_260mHz_LP1_STRONG);
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	21a8      	movs	r1, #168	@ 0xa8
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fbf5 	bl	8001808 <lsm6dsl_gy_band_pass_set>
  my_printf("setup parameter done\r\n");
 800101e:	4872      	ldr	r0, [pc, #456]	@ (80011e8 <lsm6dsl_read_data_polling+0x2a4>)
 8001020:	f7ff ff60 	bl	8000ee4 <my_printf>

  /* Read samples in polling mode (no int) */
  while (1) {
    /* Read output only if new value is available */
    lsm6dsl_reg_t reg;
    lsm6dsl_status_reg_get(&dev_ctx, &reg.status_reg);
 8001024:	1d3a      	adds	r2, r7, #4
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fa7b 	bl	8001528 <lsm6dsl_status_reg_get>

    if (reg.status_reg.xlda) {
 8001032:	793b      	ldrb	r3, [r7, #4]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d049      	beq.n	80010d2 <lsm6dsl_read_data_polling+0x18e>
      /* Read magnetic field data */
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800103e:	2206      	movs	r2, #6
 8001040:	2100      	movs	r1, #0
 8001042:	486a      	ldr	r0, [pc, #424]	@ (80011ec <lsm6dsl_read_data_polling+0x2a8>)
 8001044:	f004 fff6 	bl	8006034 <memset>
      lsm6dsl_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	4967      	ldr	r1, [pc, #412]	@ (80011ec <lsm6dsl_read_data_polling+0x2a8>)
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fae5 	bl	800161e <lsm6dsl_acceleration_raw_get>
      acceleration_mg[0] = lsm6dsl_from_fs2g_to_mg(
 8001054:	4b65      	ldr	r3, [pc, #404]	@ (80011ec <lsm6dsl_read_data_polling+0x2a8>)
 8001056:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f95a 	bl	8001314 <lsm6dsl_from_fs2g_to_mg>
 8001060:	eef0 7a40 	vmov.f32	s15, s0
 8001064:	4b62      	ldr	r3, [pc, #392]	@ (80011f0 <lsm6dsl_read_data_polling+0x2ac>)
 8001066:	edc3 7a00 	vstr	s15, [r3]
                             data_raw_acceleration[0]);
      acceleration_mg[1] = lsm6dsl_from_fs2g_to_mg(
 800106a:	4b60      	ldr	r3, [pc, #384]	@ (80011ec <lsm6dsl_read_data_polling+0x2a8>)
 800106c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f94f 	bl	8001314 <lsm6dsl_from_fs2g_to_mg>
 8001076:	eef0 7a40 	vmov.f32	s15, s0
 800107a:	4b5d      	ldr	r3, [pc, #372]	@ (80011f0 <lsm6dsl_read_data_polling+0x2ac>)
 800107c:	edc3 7a01 	vstr	s15, [r3, #4]
                             data_raw_acceleration[1]);
      acceleration_mg[2] = lsm6dsl_from_fs2g_to_mg(
 8001080:	4b5a      	ldr	r3, [pc, #360]	@ (80011ec <lsm6dsl_read_data_polling+0x2a8>)
 8001082:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f944 	bl	8001314 <lsm6dsl_from_fs2g_to_mg>
 800108c:	eef0 7a40 	vmov.f32	s15, s0
 8001090:	4b57      	ldr	r3, [pc, #348]	@ (80011f0 <lsm6dsl_read_data_polling+0x2ac>)
 8001092:	edc3 7a02 	vstr	s15, [r3, #8]
                             data_raw_acceleration[2]);
      my_printf( "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001096:	4b56      	ldr	r3, [pc, #344]	@ (80011f0 <lsm6dsl_read_data_polling+0x2ac>)
 8001098:	681b      	ldr	r3, [r3, #0]
      my_printf( "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa5c 	bl	8000558 <__aeabi_f2d>
 80010a0:	4680      	mov	r8, r0
 80010a2:	4689      	mov	r9, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80010a4:	4b52      	ldr	r3, [pc, #328]	@ (80011f0 <lsm6dsl_read_data_polling+0x2ac>)
 80010a6:	685b      	ldr	r3, [r3, #4]
      my_printf( "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fa55 	bl	8000558 <__aeabi_f2d>
 80010ae:	4604      	mov	r4, r0
 80010b0:	460d      	mov	r5, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80010b2:	4b4f      	ldr	r3, [pc, #316]	@ (80011f0 <lsm6dsl_read_data_polling+0x2ac>)
 80010b4:	689b      	ldr	r3, [r3, #8]
      my_printf( "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa4e 	bl	8000558 <__aeabi_f2d>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010c4:	e9cd 4500 	strd	r4, r5, [sp]
 80010c8:	4642      	mov	r2, r8
 80010ca:	464b      	mov	r3, r9
 80010cc:	4849      	ldr	r0, [pc, #292]	@ (80011f4 <lsm6dsl_read_data_polling+0x2b0>)
 80010ce:	f7ff ff09 	bl	8000ee4 <my_printf>
    }

    if (reg.status_reg.gda) {
 80010d2:	793b      	ldrb	r3, [r7, #4]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d049      	beq.n	8001172 <lsm6dsl_read_data_polling+0x22e>
      /* Read magnetic field data */
      memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80010de:	2206      	movs	r2, #6
 80010e0:	2100      	movs	r1, #0
 80010e2:	4845      	ldr	r0, [pc, #276]	@ (80011f8 <lsm6dsl_read_data_polling+0x2b4>)
 80010e4:	f004 ffa6 	bl	8006034 <memset>
      lsm6dsl_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	4942      	ldr	r1, [pc, #264]	@ (80011f8 <lsm6dsl_read_data_polling+0x2b4>)
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fa4d 	bl	800158e <lsm6dsl_angular_rate_raw_get>
      angular_rate_mdps[0] = lsm6dsl_from_fs2000dps_to_mdps(
 80010f4:	4b40      	ldr	r3, [pc, #256]	@ (80011f8 <lsm6dsl_read_data_polling+0x2b4>)
 80010f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f922 	bl	8001344 <lsm6dsl_from_fs2000dps_to_mdps>
 8001100:	eef0 7a40 	vmov.f32	s15, s0
 8001104:	4b3d      	ldr	r3, [pc, #244]	@ (80011fc <lsm6dsl_read_data_polling+0x2b8>)
 8001106:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_angular_rate[0]);
      angular_rate_mdps[1] = lsm6dsl_from_fs2000dps_to_mdps(
 800110a:	4b3b      	ldr	r3, [pc, #236]	@ (80011f8 <lsm6dsl_read_data_polling+0x2b4>)
 800110c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001110:	4618      	mov	r0, r3
 8001112:	f000 f917 	bl	8001344 <lsm6dsl_from_fs2000dps_to_mdps>
 8001116:	eef0 7a40 	vmov.f32	s15, s0
 800111a:	4b38      	ldr	r3, [pc, #224]	@ (80011fc <lsm6dsl_read_data_polling+0x2b8>)
 800111c:	edc3 7a01 	vstr	s15, [r3, #4]
                               data_raw_angular_rate[1]);
      angular_rate_mdps[2] = lsm6dsl_from_fs2000dps_to_mdps(
 8001120:	4b35      	ldr	r3, [pc, #212]	@ (80011f8 <lsm6dsl_read_data_polling+0x2b4>)
 8001122:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f90c 	bl	8001344 <lsm6dsl_from_fs2000dps_to_mdps>
 800112c:	eef0 7a40 	vmov.f32	s15, s0
 8001130:	4b32      	ldr	r3, [pc, #200]	@ (80011fc <lsm6dsl_read_data_polling+0x2b8>)
 8001132:	edc3 7a02 	vstr	s15, [r3, #8]
                               data_raw_angular_rate[2]);
      my_printf("Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001136:	4b31      	ldr	r3, [pc, #196]	@ (80011fc <lsm6dsl_read_data_polling+0x2b8>)
 8001138:	681b      	ldr	r3, [r3, #0]
      my_printf("Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fa0c 	bl	8000558 <__aeabi_f2d>
 8001140:	4680      	mov	r8, r0
 8001142:	4689      	mov	r9, r1
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001144:	4b2d      	ldr	r3, [pc, #180]	@ (80011fc <lsm6dsl_read_data_polling+0x2b8>)
 8001146:	685b      	ldr	r3, [r3, #4]
      my_printf("Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fa05 	bl	8000558 <__aeabi_f2d>
 800114e:	4604      	mov	r4, r0
 8001150:	460d      	mov	r5, r1
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001152:	4b2a      	ldr	r3, [pc, #168]	@ (80011fc <lsm6dsl_read_data_polling+0x2b8>)
 8001154:	689b      	ldr	r3, [r3, #8]
      my_printf("Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9fe 	bl	8000558 <__aeabi_f2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001164:	e9cd 4500 	strd	r4, r5, [sp]
 8001168:	4642      	mov	r2, r8
 800116a:	464b      	mov	r3, r9
 800116c:	4824      	ldr	r0, [pc, #144]	@ (8001200 <lsm6dsl_read_data_polling+0x2bc>)
 800116e:	f7ff feb9 	bl	8000ee4 <my_printf>
    }

    if (reg.status_reg.tda) {
 8001172:	793b      	ldrb	r3, [r7, #4]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	f43f af52 	beq.w	8001024 <lsm6dsl_read_data_polling+0xe0>
      /* Read temperature data */
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8001180:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <lsm6dsl_read_data_polling+0x2c0>)
 8001182:	2200      	movs	r2, #0
 8001184:	801a      	strh	r2, [r3, #0]
      lsm6dsl_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	491e      	ldr	r1, [pc, #120]	@ (8001204 <lsm6dsl_read_data_polling+0x2c0>)
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f9dc 	bl	800154a <lsm6dsl_temperature_raw_get>
      temperature_degC = lsm6dsl_from_lsb_to_celsius(
 8001192:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <lsm6dsl_read_data_polling+0x2c0>)
 8001194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001198:	4618      	mov	r0, r3
 800119a:	f000 f8eb 	bl	8001374 <lsm6dsl_from_lsb_to_celsius>
 800119e:	eef0 7a40 	vmov.f32	s15, s0
 80011a2:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <lsm6dsl_read_data_polling+0x2c4>)
 80011a4:	edc3 7a00 	vstr	s15, [r3]
                           data_raw_temperature );
      my_printf("Temperature [degC]:%6.2f\r\n", temperature_degC );
 80011a8:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <lsm6dsl_read_data_polling+0x2c4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9d3 	bl	8000558 <__aeabi_f2d>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4815      	ldr	r0, [pc, #84]	@ (800120c <lsm6dsl_read_data_polling+0x2c8>)
 80011b8:	f7ff fe94 	bl	8000ee4 <my_printf>
  while (1) {
 80011bc:	e732      	b.n	8001024 <lsm6dsl_read_data_polling+0xe0>
 80011be:	bf00      	nop
 80011c0:	08001211 	.word	0x08001211
 80011c4:	0800124b 	.word	0x0800124b
 80011c8:	08001285 	.word	0x08001285
 80011cc:	20000274 	.word	0x20000274
 80011d0:	2000021c 	.word	0x2000021c
 80011d4:	080081e8 	.word	0x080081e8
 80011d8:	08008204 	.word	0x08008204
 80011dc:	08008218 	.word	0x08008218
 80011e0:	2000021d 	.word	0x2000021d
 80011e4:	0800823c 	.word	0x0800823c
 80011e8:	0800824c 	.word	0x0800824c
 80011ec:	200001f0 	.word	0x200001f0
 80011f0:	20000200 	.word	0x20000200
 80011f4:	08008264 	.word	0x08008264
 80011f8:	200001f8 	.word	0x200001f8
 80011fc:	2000020c 	.word	0x2000020c
 8001200:	0800828c 	.word	0x0800828c
 8001204:	200001fe 	.word	0x200001fe
 8001208:	20000218 	.word	0x20000218
 800120c:	080082b4 	.word	0x080082b4

08001210 <platform_write>:
    }
  }
}

static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af04      	add	r7, sp, #16
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	461a      	mov	r2, r3
 800121c:	460b      	mov	r3, r1
 800121e:	72fb      	strb	r3, [r7, #11]
 8001220:	4613      	mov	r3, r2
 8001222:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_H, reg,
 8001224:	7afb      	ldrb	r3, [r7, #11]
 8001226:	b29a      	uxth	r2, r3
 8001228:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	893b      	ldrh	r3, [r7, #8]
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	21d7      	movs	r1, #215	@ 0xd7
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f002 f8ce 	bl	80033dc <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b088      	sub	sp, #32
 800124e:	af04      	add	r7, sp, #16
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	461a      	mov	r2, r3
 8001256:	460b      	mov	r3, r1
 8001258:	72fb      	strb	r3, [r7, #11]
 800125a:	4613      	mov	r3, r2
 800125c:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_H, reg,
 800125e:	7afb      	ldrb	r3, [r7, #11]
 8001260:	b29a      	uxth	r2, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001266:	9302      	str	r3, [sp, #8]
 8001268:	893b      	ldrh	r3, [r7, #8]
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2301      	movs	r3, #1
 8001272:	21d7      	movs	r1, #215	@ 0xd7
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f002 f9ab 	bl	80035d0 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <platform_delay>:

static void platform_delay(uint32_t ms)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f001 f9a3 	bl	80025d8 <HAL_Delay>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <lsm6dsl_read_reg>:
  *
  */
int32_t __weak lsm6dsl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800129a:	b590      	push	{r4, r7, lr}
 800129c:	b087      	sub	sp, #28
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	461a      	mov	r2, r3
 80012a6:	460b      	mov	r3, r1
 80012a8:	72fb      	strb	r3, [r7, #11]
 80012aa:	4613      	mov	r3, r2
 80012ac:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <lsm6dsl_read_reg+0x20>
  {
    return -1;
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012b8:	e009      	b.n	80012ce <lsm6dsl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	685c      	ldr	r4, [r3, #4]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	68d8      	ldr	r0, [r3, #12]
 80012c2:	893b      	ldrh	r3, [r7, #8]
 80012c4:	7af9      	ldrb	r1, [r7, #11]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	47a0      	blx	r4
 80012ca:	6178      	str	r0, [r7, #20]

  return ret;
 80012cc:	697b      	ldr	r3, [r7, #20]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	371c      	adds	r7, #28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd90      	pop	{r4, r7, pc}

080012d6 <lsm6dsl_write_reg>:
  *
  */
int32_t __weak lsm6dsl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80012d6:	b590      	push	{r4, r7, lr}
 80012d8:	b087      	sub	sp, #28
 80012da:	af00      	add	r7, sp, #0
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	461a      	mov	r2, r3
 80012e2:	460b      	mov	r3, r1
 80012e4:	72fb      	strb	r3, [r7, #11]
 80012e6:	4613      	mov	r3, r2
 80012e8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <lsm6dsl_write_reg+0x20>
  {
    return -1;
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012f4:	e009      	b.n	800130a <lsm6dsl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681c      	ldr	r4, [r3, #0]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	68d8      	ldr	r0, [r3, #12]
 80012fe:	893b      	ldrh	r3, [r7, #8]
 8001300:	7af9      	ldrb	r1, [r7, #11]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	47a0      	blx	r4
 8001306:	6178      	str	r0, [r7, #20]

  return ret;
 8001308:	697b      	ldr	r3, [r7, #20]
}
 800130a:	4618      	mov	r0, r3
 800130c:	371c      	adds	r7, #28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd90      	pop	{r4, r7, pc}
	...

08001314 <lsm6dsl_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsl_from_fs2g_to_mg(int16_t lsb)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 800131e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001340 <lsm6dsl_from_fs2g_to_mg+0x2c>
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001332:	eeb0 0a67 	vmov.f32	s0, s15
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	3d79db23 	.word	0x3d79db23

08001344 <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 800134e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001370 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 800135e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001362:	eeb0 0a67 	vmov.f32	s0, s15
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	428c0000 	.word	0x428c0000

08001374 <lsm6dsl_from_lsb_to_celsius>:

float_t lsm6dsl_from_lsb_to_celsius(int16_t lsb)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 800137e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800138a:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80013a8 <lsm6dsl_from_lsb_to_celsius+0x34>
 800138e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001392:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001396:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800139a:	eeb0 0a67 	vmov.f32	s0, s15
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	43800000 	.word	0x43800000

080013ac <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80013b8:	f107 0208 	add.w	r2, r7, #8
 80013bc:	2301      	movs	r3, #1
 80013be:	2110      	movs	r1, #16
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff6a 	bl	800129a <lsm6dsl_read_reg>
 80013c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10f      	bne.n	80013ee <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	7a3b      	ldrb	r3, [r7, #8]
 80013d8:	f362 0383 	bfi	r3, r2, #2, #2
 80013dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80013de:	f107 0208 	add.w	r2, r7, #8
 80013e2:	2301      	movs	r3, #1
 80013e4:	2110      	movs	r1, #16
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ff75 	bl	80012d6 <lsm6dsl_write_reg>
 80013ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001404:	f107 0208 	add.w	r2, r7, #8
 8001408:	2301      	movs	r3, #1
 800140a:	2110      	movs	r1, #16
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff44 	bl	800129a <lsm6dsl_read_reg>
 8001412:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10f      	bne.n	800143a <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	f003 030f 	and.w	r3, r3, #15
 8001420:	b2da      	uxtb	r2, r3
 8001422:	7a3b      	ldrb	r3, [r7, #8]
 8001424:	f362 1307 	bfi	r3, r2, #4, #4
 8001428:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800142a:	f107 0208 	add.w	r2, r7, #8
 800142e:	2301      	movs	r3, #1
 8001430:	2110      	movs	r1, #16
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ff4f 	bl	80012d6 <lsm6dsl_write_reg>
 8001438:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001450:	f107 0208 	add.w	r2, r7, #8
 8001454:	2301      	movs	r3, #1
 8001456:	2111      	movs	r1, #17
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff1e 	bl	800129a <lsm6dsl_read_reg>
 800145e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10f      	bne.n	8001486 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	b2da      	uxtb	r2, r3
 800146e:	7a3b      	ldrb	r3, [r7, #8]
 8001470:	f362 0343 	bfi	r3, r2, #1, #3
 8001474:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001476:	f107 0208 	add.w	r2, r7, #8
 800147a:	2301      	movs	r3, #1
 800147c:	2111      	movs	r1, #17
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ff29 	bl	80012d6 <lsm6dsl_write_reg>
 8001484:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001486:	68fb      	ldr	r3, [r7, #12]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800149c:	f107 0208 	add.w	r2, r7, #8
 80014a0:	2301      	movs	r3, #1
 80014a2:	2111      	movs	r1, #17
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fef8 	bl	800129a <lsm6dsl_read_reg>
 80014aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10f      	bne.n	80014d2 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	f003 030f 	and.w	r3, r3, #15
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	7a3b      	ldrb	r3, [r7, #8]
 80014bc:	f362 1307 	bfi	r3, r2, #4, #4
 80014c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80014c2:	f107 0208 	add.w	r2, r7, #8
 80014c6:	2301      	movs	r3, #1
 80014c8:	2111      	movs	r1, #17
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ff03 	bl	80012d6 <lsm6dsl_write_reg>
 80014d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80014e8:	f107 0208 	add.w	r2, r7, #8
 80014ec:	2301      	movs	r3, #1
 80014ee:	2112      	movs	r1, #18
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fed2 	bl	800129a <lsm6dsl_read_reg>
 80014f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10f      	bne.n	800151e <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	b2da      	uxtb	r2, r3
 8001506:	7a3b      	ldrb	r3, [r7, #8]
 8001508:	f362 1386 	bfi	r3, r2, #6, #1
 800150c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800150e:	f107 0208 	add.w	r2, r7, #8
 8001512:	2301      	movs	r3, #1
 8001514:	2112      	movs	r1, #18
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fedd 	bl	80012d6 <lsm6dsl_write_reg>
 800151c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <lsm6dsl_status_reg_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_status_reg_get(const stmdev_ctx_t *ctx,
                               lsm6dsl_status_reg_t *val)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t *) val, 1);
 8001532:	2301      	movs	r3, #1
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	211e      	movs	r1, #30
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff feae 	bl	800129a <lsm6dsl_read_reg>
 800153e:	60f8      	str	r0, [r7, #12]

  return ret;
 8001540:	68fb      	ldr	r3, [r7, #12]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <lsm6dsl_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUT_TEMP_L, buff, 2);
 8001554:	f107 0208 	add.w	r2, r7, #8
 8001558:	2302      	movs	r3, #2
 800155a:	2120      	movs	r1, #32
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fe9c 	bl	800129a <lsm6dsl_read_reg>
 8001562:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8001564:	7a7b      	ldrb	r3, [r7, #9]
 8001566:	b21a      	sxth	r2, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001572:	b29b      	uxth	r3, r3
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b29b      	uxth	r3, r3
 8001578:	7a3a      	ldrb	r2, [r7, #8]
 800157a:	4413      	add	r3, r2
 800157c:	b29b      	uxth	r3, r3
 800157e:	b21a      	sxth	r2, r3
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	801a      	strh	r2, [r3, #0]

  return ret;
 8001584:	68fb      	ldr	r3, [r7, #12]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8001598:	f107 020c 	add.w	r2, r7, #12
 800159c:	2306      	movs	r3, #6
 800159e:	2122      	movs	r1, #34	@ 0x22
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff fe7a 	bl	800129a <lsm6dsl_read_reg>
 80015a6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80015a8:	7b7b      	ldrb	r3, [r7, #13]
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	7b3a      	ldrb	r2, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	3302      	adds	r3, #2
 80015ce:	b212      	sxth	r2, r2
 80015d0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	3302      	adds	r3, #2
 80015d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	b29b      	uxth	r3, r3
 80015e0:	7bba      	ldrb	r2, [r7, #14]
 80015e2:	4413      	add	r3, r2
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	3302      	adds	r3, #2
 80015ea:	b212      	sxth	r2, r2
 80015ec:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80015ee:	7c7a      	ldrb	r2, [r7, #17]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	3304      	adds	r3, #4
 80015f4:	b212      	sxth	r2, r2
 80015f6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	3304      	adds	r3, #4
 80015fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001600:	b29b      	uxth	r3, r3
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	b29b      	uxth	r3, r3
 8001606:	7c3a      	ldrb	r2, [r7, #16]
 8001608:	4413      	add	r3, r2
 800160a:	b29a      	uxth	r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	3304      	adds	r3, #4
 8001610:	b212      	sxth	r2, r2
 8001612:	801a      	strh	r2, [r3, #0]

  return ret;
 8001614:	697b      	ldr	r3, [r7, #20]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001628:	f107 020c 	add.w	r2, r7, #12
 800162c:	2306      	movs	r3, #6
 800162e:	2128      	movs	r1, #40	@ 0x28
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff fe32 	bl	800129a <lsm6dsl_read_reg>
 8001636:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001638:	7b7b      	ldrb	r3, [r7, #13]
 800163a:	b21a      	sxth	r2, r3
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001646:	b29b      	uxth	r3, r3
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	b29b      	uxth	r3, r3
 800164c:	7b3a      	ldrb	r2, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	b29b      	uxth	r3, r3
 8001652:	b21a      	sxth	r2, r3
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	3302      	adds	r3, #2
 800165e:	b212      	sxth	r2, r2
 8001660:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	3302      	adds	r3, #2
 8001666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166a:	b29b      	uxth	r3, r3
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	b29b      	uxth	r3, r3
 8001670:	7bba      	ldrb	r2, [r7, #14]
 8001672:	4413      	add	r3, r2
 8001674:	b29a      	uxth	r2, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	3302      	adds	r3, #2
 800167a:	b212      	sxth	r2, r2
 800167c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800167e:	7c7a      	ldrb	r2, [r7, #17]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	3304      	adds	r3, #4
 8001684:	b212      	sxth	r2, r2
 8001686:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	3304      	adds	r3, #4
 800168c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001690:	b29b      	uxth	r3, r3
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	b29b      	uxth	r3, r3
 8001696:	7c3a      	ldrb	r2, [r7, #16]
 8001698:	4413      	add	r3, r2
 800169a:	b29a      	uxth	r2, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	3304      	adds	r3, #4
 80016a0:	b212      	sxth	r2, r2
 80016a2:	801a      	strh	r2, [r3, #0]

  return ret;
 80016a4:	697b      	ldr	r3, [r7, #20]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80016b8:	2301      	movs	r3, #1
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	210f      	movs	r1, #15
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fdeb 	bl	800129a <lsm6dsl_read_reg>
 80016c4:	60f8      	str	r0, [r7, #12]

  return ret;
 80016c6:	68fb      	ldr	r3, [r7, #12]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80016dc:	f107 0208 	add.w	r2, r7, #8
 80016e0:	2301      	movs	r3, #1
 80016e2:	2112      	movs	r1, #18
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fdd8 	bl	800129a <lsm6dsl_read_reg>
 80016ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10f      	bne.n	8001712 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	7a3b      	ldrb	r3, [r7, #8]
 80016fc:	f362 0300 	bfi	r3, r2, #0, #1
 8001700:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001702:	f107 0208 	add.w	r2, r7, #8
 8001706:	2301      	movs	r3, #1
 8001708:	2112      	movs	r1, #18
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fde3 	bl	80012d6 <lsm6dsl_write_reg>
 8001710:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001726:	f107 0208 	add.w	r2, r7, #8
 800172a:	2301      	movs	r3, #1
 800172c:	2112      	movs	r1, #18
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fdb3 	bl	800129a <lsm6dsl_read_reg>
 8001734:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8001736:	7a3b      	ldrb	r3, [r7, #8]
 8001738:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	701a      	strb	r2, [r3, #0]

  return ret;
 8001744:	68fb      	ldr	r3, [r7, #12]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <lsm6dsl_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_filter_analog_set(const stmdev_ctx_t *ctx,
                                     lsm6dsl_bw0_xl_t val)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b084      	sub	sp, #16
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800175a:	f107 0208 	add.w	r2, r7, #8
 800175e:	2301      	movs	r3, #1
 8001760:	2110      	movs	r1, #16
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fd99 	bl	800129a <lsm6dsl_read_reg>
 8001768:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10f      	bne.n	8001790 <lsm6dsl_xl_filter_analog_set+0x42>
  {
    ctrl1_xl.bw0_xl = (uint8_t) val;
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	b2da      	uxtb	r2, r3
 8001778:	7a3b      	ldrb	r3, [r7, #8]
 800177a:	f362 0300 	bfi	r3, r2, #0, #1
 800177e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001780:	f107 0208 	add.w	r2, r7, #8
 8001784:	2301      	movs	r3, #1
 8001786:	2110      	movs	r1, #16
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff fda4 	bl	80012d6 <lsm6dsl_write_reg>
 800178e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001790:	68fb      	ldr	r3, [r7, #12]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(const stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b084      	sub	sp, #16
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	460b      	mov	r3, r1
 80017a4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 80017a6:	f107 0208 	add.w	r2, r7, #8
 80017aa:	2301      	movs	r3, #1
 80017ac:	2117      	movs	r1, #23
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fd73 	bl	800129a <lsm6dsl_read_reg>
 80017b4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d120      	bne.n	80017fe <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	7a3b      	ldrb	r3, [r7, #8]
 80017c8:	f362 03c3 	bfi	r3, r2, #3, #1
 80017cc:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	7a3b      	ldrb	r3, [r7, #8]
 80017d8:	f362 1346 	bfi	r3, r2, #5, #2
 80017dc:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 80017de:	7a3b      	ldrb	r3, [r7, #8]
 80017e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017e4:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 80017e6:	7a3b      	ldrb	r3, [r7, #8]
 80017e8:	f023 0304 	bic.w	r3, r3, #4
 80017ec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 80017ee:	f107 0208 	add.w	r2, r7, #8
 80017f2:	2301      	movs	r3, #1
 80017f4:	2117      	movs	r1, #23
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fd6d 	bl	80012d6 <lsm6dsl_write_reg>
 80017fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(const stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001814:	f107 0208 	add.w	r2, r7, #8
 8001818:	2301      	movs	r3, #1
 800181a:	2116      	movs	r1, #22
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff fd3c 	bl	800129a <lsm6dsl_read_reg>
 8001822:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d157      	bne.n	80018da <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	b2da      	uxtb	r2, r3
 8001834:	7a3b      	ldrb	r3, [r7, #8]
 8001836:	f362 1305 	bfi	r3, r2, #4, #2
 800183a:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	09db      	lsrs	r3, r3, #7
 8001840:	b2db      	uxtb	r3, r3
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	b2da      	uxtb	r2, r3
 8001848:	7a3b      	ldrb	r3, [r7, #8]
 800184a:	f362 1386 	bfi	r3, r2, #6, #1
 800184e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001850:	f107 0208 	add.w	r2, r7, #8
 8001854:	2301      	movs	r3, #1
 8001856:	2116      	movs	r1, #22
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fd3c 	bl	80012d6 <lsm6dsl_write_reg>
 800185e:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d139      	bne.n	80018da <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001866:	f107 020c 	add.w	r2, r7, #12
 800186a:	2301      	movs	r3, #1
 800186c:	2115      	movs	r1, #21
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fd13 	bl	800129a <lsm6dsl_read_reg>
 8001874:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d12e      	bne.n	80018da <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	b2da      	uxtb	r2, r3
 8001884:	7b3b      	ldrb	r3, [r7, #12]
 8001886:	f362 0301 	bfi	r3, r2, #0, #2
 800188a:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800188c:	f107 020c 	add.w	r2, r7, #12
 8001890:	2301      	movs	r3, #1
 8001892:	2115      	movs	r1, #21
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff fd1e 	bl	80012d6 <lsm6dsl_write_reg>
 800189a:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d11b      	bne.n	80018da <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 80018a2:	f107 0210 	add.w	r2, r7, #16
 80018a6:	2301      	movs	r3, #1
 80018a8:	2113      	movs	r1, #19
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fcf5 	bl	800129a <lsm6dsl_read_reg>
 80018b0:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d110      	bne.n	80018da <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	08db      	lsrs	r3, r3, #3
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	7c3b      	ldrb	r3, [r7, #16]
 80018c4:	f362 0341 	bfi	r3, r2, #1, #1
 80018c8:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 80018ca:	f107 0210 	add.w	r2, r7, #16
 80018ce:	2301      	movs	r3, #1
 80018d0:	2113      	movs	r1, #19
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff fcff 	bl	80012d6 <lsm6dsl_write_reg>
 80018d8:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 80018da:	697b      	ldr	r3, [r7, #20]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <my_printf>:
{
 80018e4:	b40f      	push	{r0, r1, r2, r3}
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b0c2      	sub	sp, #264	@ 0x108
 80018ea:	af00      	add	r7, sp, #0
    va_start(args, format);
 80018ec:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80018f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80018f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018f8:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80018fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80018fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001902:	f107 0008 	add.w	r0, r7, #8
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800190c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001910:	f004 fb82 	bl	8006018 <vsniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fcb1 	bl	8000280 <strlen>
 800191e:	4603      	mov	r3, r0
 8001920:	b29a      	uxth	r2, r3
 8001922:	f107 0108 	add.w	r1, r7, #8
 8001926:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800192a:	4805      	ldr	r0, [pc, #20]	@ (8001940 <my_printf+0x5c>)
 800192c:	f003 fa2e 	bl	8004d8c <HAL_UART_Transmit>
}
 8001930:	bf00      	nop
 8001932:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001936:	46bd      	mov	sp, r7
 8001938:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800193c:	b004      	add	sp, #16
 800193e:	4770      	bx	lr
 8001940:	200002c8 	.word	0x200002c8

08001944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	@ 0x28
 8001948:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800194a:	f000 fdd3 	bl	80024f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800194e:	f000 f88d 	bl	8001a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001952:	f000 f979 	bl	8001c48 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001956:	f000 f8f1 	bl	8001b3c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800195a:	f000 f94b 	bl	8001bf4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800195e:	f000 f91b 	bl	8001b98 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  selectTCAChannel(0);
 8001962:	2000      	movs	r0, #0
 8001964:	f000 fbb0 	bl	80020c8 <selectTCAChannel>
  TCS34725_t tcs34725_sensor;
  tcs32725_begin(&tcs34725_sensor, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8001968:	f107 0318 	add.w	r3, r7, #24
 800196c:	2200      	movs	r2, #0
 800196e:	21f6      	movs	r1, #246	@ 0xf6
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fc77 	bl	8002264 <tcs32725_begin>
  selectTCAChannel(1);
 8001976:	2001      	movs	r0, #1
 8001978:	f000 fba6 	bl	80020c8 <selectTCAChannel>
  TCS34725_t tcs34725_sensor1;
  tcs32725_begin(&tcs34725_sensor1, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	21f6      	movs	r1, #246	@ 0xf6
 8001984:	4618      	mov	r0, r3
 8001986:	f000 fc6d 	bl	8002264 <tcs32725_begin>
  selectTCAChannel(2);
 800198a:	2002      	movs	r0, #2
 800198c:	f000 fb9c 	bl	80020c8 <selectTCAChannel>
  TCS34725_t tcs34725_sensor2;
  tcs32725_begin(&tcs34725_sensor2, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	2200      	movs	r2, #0
 8001996:	21f6      	movs	r1, #246	@ 0xf6
 8001998:	4618      	mov	r0, r3
 800199a:	f000 fc63 	bl	8002264 <tcs32725_begin>
  float r, g, b;
  uint32_t count = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]


  uint8_t dev_id = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	70fb      	strb	r3, [r7, #3]
  uint8_t whoami = 0x0F;
 80019a6:	230f      	movs	r3, #15
 80019a8:	70bb      	strb	r3, [r7, #2]
  HAL_I2C_Master_Transmit(&hi2c2, 0x6B << 1, &whoami, 1, 100);
 80019aa:	1cba      	adds	r2, r7, #2
 80019ac:	2364      	movs	r3, #100	@ 0x64
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2301      	movs	r3, #1
 80019b2:	21d6      	movs	r1, #214	@ 0xd6
 80019b4:	4828      	ldr	r0, [pc, #160]	@ (8001a58 <main+0x114>)
 80019b6:	f001 f9e1 	bl	8002d7c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c2, 0x6B << 1, &dev_id, 1, 100);
 80019ba:	1cfa      	adds	r2, r7, #3
 80019bc:	2364      	movs	r3, #100	@ 0x64
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2301      	movs	r3, #1
 80019c2:	21d6      	movs	r1, #214	@ 0xd6
 80019c4:	4824      	ldr	r0, [pc, #144]	@ (8001a58 <main+0x114>)
 80019c6:	f001 fad7 	bl	8002f78 <HAL_I2C_Master_Receive>
  my_printf("my id: %d", dev_id);
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	4619      	mov	r1, r3
 80019ce:	4823      	ldr	r0, [pc, #140]	@ (8001a5c <main+0x118>)
 80019d0:	f7ff ff88 	bl	80018e4 <my_printf>

  lsm6dsl_read_data_polling();
 80019d4:	f7ff fab6 	bl	8000f44 <lsm6dsl_read_data_polling>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  selectTCAChannel(count % 3);
 80019d8:	69f9      	ldr	r1, [r7, #28]
 80019da:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <main+0x11c>)
 80019dc:	fba3 2301 	umull	r2, r3, r3, r1
 80019e0:	085a      	lsrs	r2, r3, #1
 80019e2:	4613      	mov	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	1aca      	subs	r2, r1, r3
 80019ea:	b2d3      	uxtb	r3, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fb6b 	bl	80020c8 <selectTCAChannel>
	  getRGB(&r, &g, &b);
 80019f2:	1d3a      	adds	r2, r7, #4
 80019f4:	f107 0108 	add.w	r1, r7, #8
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fcef 	bl	80023e0 <getRGB>
	  my_printf("RGB Values from %d: R = %d, G = %d, B = %d\r\n", count%3, (int)(r), (int)(g), (int)(b));
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <main+0x11c>)
 8001a06:	fba3 1302 	umull	r1, r3, r3, r2
 8001a0a:	0859      	lsrs	r1, r3, #1
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	440b      	add	r3, r1
 8001a12:	1ad1      	subs	r1, r2, r3
 8001a14:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a18:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001a1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a20:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001a24:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a2c:	ee17 3a90 	vmov	r3, s15
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	ee16 3a90 	vmov	r3, s13
 8001a36:	ee17 2a10 	vmov	r2, s14
 8001a3a:	480a      	ldr	r0, [pc, #40]	@ (8001a64 <main+0x120>)
 8001a3c:	f7ff ff52 	bl	80018e4 <my_printf>
	  my_printf("hello world\r\n");
 8001a40:	4809      	ldr	r0, [pc, #36]	@ (8001a68 <main+0x124>)
 8001a42:	f7ff ff4f 	bl	80018e4 <my_printf>
	  count++;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	61fb      	str	r3, [r7, #28]
	  HAL_Delay(1000);
 8001a4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a50:	f000 fdc2 	bl	80025d8 <HAL_Delay>
	  selectTCAChannel(count % 3);
 8001a54:	bf00      	nop
 8001a56:	e7bf      	b.n	80019d8 <main+0x94>
 8001a58:	20000274 	.word	0x20000274
 8001a5c:	080082d0 	.word	0x080082d0
 8001a60:	aaaaaaab 	.word	0xaaaaaaab
 8001a64:	080082dc 	.word	0x080082dc
 8001a68:	0800830c 	.word	0x0800830c

08001a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b094      	sub	sp, #80	@ 0x50
 8001a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a72:	f107 0320 	add.w	r3, r7, #32
 8001a76:	2230      	movs	r2, #48	@ 0x30
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 fada 	bl	8006034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	4b27      	ldr	r3, [pc, #156]	@ (8001b34 <SystemClock_Config+0xc8>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	4a26      	ldr	r2, [pc, #152]	@ (8001b34 <SystemClock_Config+0xc8>)
 8001a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa0:	4b24      	ldr	r3, [pc, #144]	@ (8001b34 <SystemClock_Config+0xc8>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aac:	2300      	movs	r3, #0
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	4b21      	ldr	r3, [pc, #132]	@ (8001b38 <SystemClock_Config+0xcc>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a20      	ldr	r2, [pc, #128]	@ (8001b38 <SystemClock_Config+0xcc>)
 8001ab6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b38 <SystemClock_Config+0xcc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001acc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ad6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001adc:	230c      	movs	r3, #12
 8001ade:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001ae0:	2360      	movs	r3, #96	@ 0x60
 8001ae2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aec:	f107 0320 	add.w	r3, r7, #32
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 fca3 	bl	800443c <HAL_RCC_OscConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001afc:	f000 f8da 	bl	8001cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b00:	230f      	movs	r3, #15
 8001b02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b04:	2302      	movs	r3, #2
 8001b06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	2103      	movs	r1, #3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f002 ff05 	bl	800492c <HAL_RCC_ClockConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b28:	f000 f8c4 	bl	8001cb4 <Error_Handler>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3750      	adds	r7, #80	@ 0x50
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40007000 	.word	0x40007000

08001b3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <MX_I2C1_Init+0x50>)
 8001b42:	4a13      	ldr	r2, [pc, #76]	@ (8001b90 <MX_I2C1_Init+0x54>)
 8001b44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b46:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <MX_I2C1_Init+0x50>)
 8001b48:	4a12      	ldr	r2, [pc, #72]	@ (8001b94 <MX_I2C1_Init+0x58>)
 8001b4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <MX_I2C1_Init+0x50>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	@ (8001b8c <MX_I2C1_Init+0x50>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <MX_I2C1_Init+0x50>)
 8001b5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b60:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <MX_I2C1_Init+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b66:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <MX_I2C1_Init+0x50>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b6c:	4b07      	ldr	r3, [pc, #28]	@ (8001b8c <MX_I2C1_Init+0x50>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b72:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <MX_I2C1_Init+0x50>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b78:	4804      	ldr	r0, [pc, #16]	@ (8001b8c <MX_I2C1_Init+0x50>)
 8001b7a:	f000 ffbb 	bl	8002af4 <HAL_I2C_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b84:	f000 f896 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000220 	.word	0x20000220
 8001b90:	40005400 	.word	0x40005400
 8001b94:	000186a0 	.word	0x000186a0

08001b98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <MX_I2C2_Init+0x50>)
 8001b9e:	4a13      	ldr	r2, [pc, #76]	@ (8001bec <MX_I2C2_Init+0x54>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <MX_I2C2_Init+0x50>)
 8001ba4:	4a12      	ldr	r2, [pc, #72]	@ (8001bf0 <MX_I2C2_Init+0x58>)
 8001ba6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <MX_I2C2_Init+0x50>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <MX_I2C2_Init+0x50>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <MX_I2C2_Init+0x50>)
 8001bb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <MX_I2C2_Init+0x50>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <MX_I2C2_Init+0x50>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc8:	4b07      	ldr	r3, [pc, #28]	@ (8001be8 <MX_I2C2_Init+0x50>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <MX_I2C2_Init+0x50>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bd4:	4804      	ldr	r0, [pc, #16]	@ (8001be8 <MX_I2C2_Init+0x50>)
 8001bd6:	f000 ff8d 	bl	8002af4 <HAL_I2C_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001be0:	f000 f868 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000274 	.word	0x20000274
 8001bec:	40005800 	.word	0x40005800
 8001bf0:	000186a0 	.word	0x000186a0

08001bf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001bfa:	4a12      	ldr	r2, [pc, #72]	@ (8001c44 <MX_USART1_UART_Init+0x50>)
 8001bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	@ (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c18:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	@ (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c2a:	4805      	ldr	r0, [pc, #20]	@ (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c2c:	f003 f85e 	bl	8004cec <HAL_UART_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c36:	f000 f83d 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200002c8 	.word	0x200002c8
 8001c44:	40011000 	.word	0x40011000

08001c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <MX_GPIO_Init+0x68>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	4a16      	ldr	r2, [pc, #88]	@ (8001cb0 <MX_GPIO_Init+0x68>)
 8001c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5e:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <MX_GPIO_Init+0x68>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <MX_GPIO_Init+0x68>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb0 <MX_GPIO_Init+0x68>)
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb0 <MX_GPIO_Init+0x68>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <MX_GPIO_Init+0x68>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	4a08      	ldr	r2, [pc, #32]	@ (8001cb0 <MX_GPIO_Init+0x68>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <MX_GPIO_Init+0x68>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800

08001cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb8:	b672      	cpsid	i
}
 8001cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <Error_Handler+0x8>

08001cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <HAL_MspInit+0x4c>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	4a0f      	ldr	r2, [pc, #60]	@ (8001d0c <HAL_MspInit+0x4c>)
 8001cd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <HAL_MspInit+0x4c>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <HAL_MspInit+0x4c>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	4a08      	ldr	r2, [pc, #32]	@ (8001d0c <HAL_MspInit+0x4c>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf2:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_MspInit+0x4c>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800

08001d10 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	@ 0x30
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a3a      	ldr	r2, [pc, #232]	@ (8001e18 <HAL_I2C_MspInit+0x108>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d12c      	bne.n	8001d8c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	4b39      	ldr	r3, [pc, #228]	@ (8001e1c <HAL_I2C_MspInit+0x10c>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a38      	ldr	r2, [pc, #224]	@ (8001e1c <HAL_I2C_MspInit+0x10c>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b36      	ldr	r3, [pc, #216]	@ (8001e1c <HAL_I2C_MspInit+0x10c>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	61bb      	str	r3, [r7, #24]
 8001d4c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d4e:	23c0      	movs	r3, #192	@ 0xc0
 8001d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d52:	2312      	movs	r3, #18
 8001d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d5e:	2304      	movs	r3, #4
 8001d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d62:	f107 031c 	add.w	r3, r7, #28
 8001d66:	4619      	mov	r1, r3
 8001d68:	482d      	ldr	r0, [pc, #180]	@ (8001e20 <HAL_I2C_MspInit+0x110>)
 8001d6a:	f000 fd3f 	bl	80027ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	4b2a      	ldr	r3, [pc, #168]	@ (8001e1c <HAL_I2C_MspInit+0x10c>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	4a29      	ldr	r2, [pc, #164]	@ (8001e1c <HAL_I2C_MspInit+0x10c>)
 8001d78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d7e:	4b27      	ldr	r3, [pc, #156]	@ (8001e1c <HAL_I2C_MspInit+0x10c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d8a:	e041      	b.n	8001e10 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a24      	ldr	r2, [pc, #144]	@ (8001e24 <HAL_I2C_MspInit+0x114>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d13c      	bne.n	8001e10 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	4b20      	ldr	r3, [pc, #128]	@ (8001e1c <HAL_I2C_MspInit+0x10c>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8001e1c <HAL_I2C_MspInit+0x10c>)
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <HAL_I2C_MspInit+0x10c>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001db2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db8:	2312      	movs	r3, #18
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4814      	ldr	r0, [pc, #80]	@ (8001e20 <HAL_I2C_MspInit+0x110>)
 8001dd0:	f000 fd0c 	bl	80027ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dd4:	2308      	movs	r3, #8
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd8:	2312      	movs	r3, #18
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001de4:	2309      	movs	r3, #9
 8001de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	480c      	ldr	r0, [pc, #48]	@ (8001e20 <HAL_I2C_MspInit+0x110>)
 8001df0:	f000 fcfc 	bl	80027ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <HAL_I2C_MspInit+0x10c>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfc:	4a07      	ldr	r2, [pc, #28]	@ (8001e1c <HAL_I2C_MspInit+0x10c>)
 8001dfe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <HAL_I2C_MspInit+0x10c>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3730      	adds	r7, #48	@ 0x30
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40005400 	.word	0x40005400
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40020400 	.word	0x40020400
 8001e24:	40005800 	.word	0x40005800

08001e28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	@ 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a19      	ldr	r2, [pc, #100]	@ (8001eac <HAL_UART_MspInit+0x84>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d12c      	bne.n	8001ea4 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <HAL_UART_MspInit+0x88>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e52:	4a17      	ldr	r2, [pc, #92]	@ (8001eb0 <HAL_UART_MspInit+0x88>)
 8001e54:	f043 0310 	orr.w	r3, r3, #16
 8001e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <HAL_UART_MspInit+0x88>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <HAL_UART_MspInit+0x88>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	4a10      	ldr	r2, [pc, #64]	@ (8001eb0 <HAL_UART_MspInit+0x88>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e76:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_UART_MspInit+0x88>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e82:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e94:	2307      	movs	r3, #7
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4805      	ldr	r0, [pc, #20]	@ (8001eb4 <HAL_UART_MspInit+0x8c>)
 8001ea0:	f000 fca4 	bl	80027ec <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ea4:	bf00      	nop
 8001ea6:	3728      	adds	r7, #40	@ 0x28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40011000 	.word	0x40011000
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020000 	.word	0x40020000

08001eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <NMI_Handler+0x4>

08001ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <HardFault_Handler+0x4>

08001ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <MemManage_Handler+0x4>

08001ed0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <BusFault_Handler+0x4>

08001ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <UsageFault_Handler+0x4>

08001ee0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f0e:	f000 fb43 	bl	8002598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  return 1;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <_kill>:

int _kill(int pid, int sig)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f30:	f004 f8d2 	bl	80060d8 <__errno>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2216      	movs	r2, #22
 8001f38:	601a      	str	r2, [r3, #0]
  return -1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_exit>:

void _exit (int status)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f4e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ffe7 	bl	8001f26 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <_exit+0x12>

08001f5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e00a      	b.n	8001f84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f6e:	f3af 8000 	nop.w
 8001f72:	4601      	mov	r1, r0
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	60ba      	str	r2, [r7, #8]
 8001f7a:	b2ca      	uxtb	r2, r1
 8001f7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	dbf0      	blt.n	8001f6e <_read+0x12>
  }

  return len;
 8001f8c:	687b      	ldr	r3, [r7, #4]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e009      	b.n	8001fbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	60ba      	str	r2, [r7, #8]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	dbf1      	blt.n	8001fa8 <_write+0x12>
  }
  return len;
 8001fc4:	687b      	ldr	r3, [r7, #4]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <_close>:

int _close(int file)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ff6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <_isatty>:

int _isatty(int file)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800200e:	2301      	movs	r3, #1
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002040:	4a14      	ldr	r2, [pc, #80]	@ (8002094 <_sbrk+0x5c>)
 8002042:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <_sbrk+0x60>)
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800204c:	4b13      	ldr	r3, [pc, #76]	@ (800209c <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <_sbrk+0x64>)
 8002056:	4a12      	ldr	r2, [pc, #72]	@ (80020a0 <_sbrk+0x68>)
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205a:	4b10      	ldr	r3, [pc, #64]	@ (800209c <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	429a      	cmp	r2, r3
 8002066:	d207      	bcs.n	8002078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002068:	f004 f836 	bl	80060d8 <__errno>
 800206c:	4603      	mov	r3, r0
 800206e:	220c      	movs	r2, #12
 8002070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002076:	e009      	b.n	800208c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002078:	4b08      	ldr	r3, [pc, #32]	@ (800209c <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207e:	4b07      	ldr	r3, [pc, #28]	@ (800209c <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	4a05      	ldr	r2, [pc, #20]	@ (800209c <_sbrk+0x64>)
 8002088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20020000 	.word	0x20020000
 8002098:	00000400 	.word	0x00000400
 800209c:	20000310 	.word	0x20000310
 80020a0:	20000468 	.word	0x20000468

080020a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <SystemInit+0x20>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ae:	4a05      	ldr	r2, [pc, #20]	@ (80020c4 <SystemInit+0x20>)
 80020b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <selectTCAChannel>:
 */
#include "stm32f4xx_hal.h"
#include "main.h"
#include "tca9548.h"

void selectTCAChannel(uint8_t channel) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = (1 << channel);  // Enable only the selected channel
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	2201      	movs	r2, #1
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, 0x77 << 1, &cmd, 1, HAL_MAX_DELAY);
 80020de:	f107 020f 	add.w	r2, r7, #15
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2301      	movs	r3, #1
 80020ea:	21ee      	movs	r1, #238	@ 0xee
 80020ec:	4803      	ldr	r0, [pc, #12]	@ (80020fc <selectTCAChannel+0x34>)
 80020ee:	f000 fe45 	bl	8002d7c <HAL_I2C_Master_Transmit>
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000220 	.word	0x20000220

08002100 <my_printf>:
{
 8002100:	b40f      	push	{r0, r1, r2, r3}
 8002102:	b580      	push	{r7, lr}
 8002104:	b0c2      	sub	sp, #264	@ 0x108
 8002106:	af00      	add	r7, sp, #0
    va_start(args, format);
 8002108:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800210c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002114:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8002116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800211a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800211e:	f107 0008 	add.w	r0, r7, #8
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002128:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800212c:	f003 ff74 	bl	8006018 <vsniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002130:	f107 0308 	add.w	r3, r7, #8
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe f8a3 	bl	8000280 <strlen>
 800213a:	4603      	mov	r3, r0
 800213c:	b29a      	uxth	r2, r3
 800213e:	f107 0108 	add.w	r1, r7, #8
 8002142:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002146:	4805      	ldr	r0, [pc, #20]	@ (800215c <my_printf+0x5c>)
 8002148:	f002 fe20 	bl	8004d8c <HAL_UART_Transmit>
}
 800214c:	bf00      	nop
 800214e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002152:	46bd      	mov	sp, r7
 8002154:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002158:	b004      	add	sp, #16
 800215a:	4770      	bx	lr
 800215c:	200002c8 	.word	0x200002c8

08002160 <tcs34725_write8>:
/**************************************************************************/
/*!
    @brief  Writes a register and an 8 bit value over I2C
*/
/**************************************************************************/
void tcs34725_write8(uint8_t reg, uint8_t value) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af02      	add	r7, sp, #8
 8002166:	4603      	mov	r3, r0
 8002168:	460a      	mov	r2, r1
 800216a:	71fb      	strb	r3, [r7, #7]
 800216c:	4613      	mov	r3, r2
 800216e:	71bb      	strb	r3, [r7, #6]
    Wire.send(TCS34725_COMMAND_BIT | reg);
    Wire.send(value & 0xFF);
    #endif
    Wire.endTransmission();
    */
    uint8_t buffer[2] = {TCS34725_COMMAND_BIT | reg, value};
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002176:	b2db      	uxtb	r3, r3
 8002178:	733b      	strb	r3, [r7, #12]
 800217a:	79bb      	ldrb	r3, [r7, #6]
 800217c:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 800217e:	f107 020c 	add.w	r2, r7, #12
 8002182:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	2302      	movs	r3, #2
 800218a:	2152      	movs	r1, #82	@ 0x52
 800218c:	4803      	ldr	r0, [pc, #12]	@ (800219c <tcs34725_write8+0x3c>)
 800218e:	f000 fdf5 	bl	8002d7c <HAL_I2C_Master_Transmit>
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000220 	.word	0x20000220

080021a0 <read8>:
/**************************************************************************/
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
uint8_t read8(uint8_t reg) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
    return Wire.read();
    #else
    return Wire.receive();
    #endif
    */
    uint8_t cmd = TCS34725_COMMAND_BIT | reg;
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	73fb      	strb	r3, [r7, #15]
    uint8_t value = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 80021b8:	f107 020f 	add.w	r2, r7, #15
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	2301      	movs	r3, #1
 80021c4:	2152      	movs	r1, #82	@ 0x52
 80021c6:	4809      	ldr	r0, [pc, #36]	@ (80021ec <read8+0x4c>)
 80021c8:	f000 fdd8 	bl	8002d7c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, &value, 1, HAL_MAX_DELAY);
 80021cc:	f107 020e 	add.w	r2, r7, #14
 80021d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2301      	movs	r3, #1
 80021d8:	2152      	movs	r1, #82	@ 0x52
 80021da:	4804      	ldr	r0, [pc, #16]	@ (80021ec <read8+0x4c>)
 80021dc:	f000 fecc 	bl	8002f78 <HAL_I2C_Master_Receive>
    return value;
 80021e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000220 	.word	0x20000220

080021f0 <read16>:
/**************************************************************************/
/*!
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
uint16_t read16(uint8_t reg) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
    #endif
    x <<= 8;
    x |= t;
    return x;
    */
	uint8_t cmd = TCS34725_COMMAND_BIT | reg;
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002200:	b2db      	uxtb	r3, r3
 8002202:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[2];
	HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 8002204:	f107 020f 	add.w	r2, r7, #15
 8002208:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2301      	movs	r3, #1
 8002210:	2152      	movs	r1, #82	@ 0x52
 8002212:	480b      	ldr	r0, [pc, #44]	@ (8002240 <read16+0x50>)
 8002214:	f000 fdb2 	bl	8002d7c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8002218:	f107 020c 	add.w	r2, r7, #12
 800221c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	2302      	movs	r3, #2
 8002224:	2152      	movs	r1, #82	@ 0x52
 8002226:	4806      	ldr	r0, [pc, #24]	@ (8002240 <read16+0x50>)
 8002228:	f000 fea6 	bl	8002f78 <HAL_I2C_Master_Receive>
	return (uint16_t)(buffer[1] << 8) | buffer[0];
 800222c:	7b7b      	ldrb	r3, [r7, #13]
 800222e:	021b      	lsls	r3, r3, #8
 8002230:	b29b      	uxth	r3, r3
 8002232:	7b3a      	ldrb	r2, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	b29b      	uxth	r3, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000220 	.word	0x20000220

08002244 <enable>:
/**************************************************************************/
/*!
    Enables the device
*/
/**************************************************************************/
void enable(void) {
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
    tcs34725_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 8002248:	2101      	movs	r1, #1
 800224a:	2000      	movs	r0, #0
 800224c:	f7ff ff88 	bl	8002160 <tcs34725_write8>
    HAL_Delay(3);
 8002250:	2003      	movs	r0, #3
 8002252:	f000 f9c1 	bl	80025d8 <HAL_Delay>
    tcs34725_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 8002256:	2103      	movs	r1, #3
 8002258:	2000      	movs	r0, #0
 800225a:	f7ff ff81 	bl	8002160 <tcs34725_write8>
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <tcs32725_begin>:
    doing anything else)
*/
/**************************************************************************/


bool tcs32725_begin(TCS34725_t *sensor, tcs34725IntegrationTime_t it, tcs34725Gain_t gain) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	70fb      	strb	r3, [r7, #3]
 8002270:	4613      	mov	r3, r2
 8002272:	70bb      	strb	r3, [r7, #2]
    //Wire.begin();

    /* Make sure we're actually connected */
    uint8_t x = read8(TCS34725_ID);
 8002274:	2012      	movs	r0, #18
 8002276:	f7ff ff93 	bl	80021a0 <read8>
 800227a:	4603      	mov	r3, r0
 800227c:	73fb      	strb	r3, [r7, #15]
    my_printf("device id: %d", x);
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	4619      	mov	r1, r3
 8002282:	480d      	ldr	r0, [pc, #52]	@ (80022b8 <tcs32725_begin+0x54>)
 8002284:	f7ff ff3c 	bl	8002100 <my_printf>
    if (x != 0x4D) {
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	2b4d      	cmp	r3, #77	@ 0x4d
 800228c:	d001      	beq.n	8002292 <tcs32725_begin+0x2e>
        return false;
 800228e:	2300      	movs	r3, #0
 8002290:	e00d      	b.n	80022ae <tcs32725_begin+0x4a>
    }
    _tcs34725Initialised = true;
 8002292:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <tcs32725_begin+0x58>)
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]

    /* Set default integration time and gain */
    setIntegrationTime(it);
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f810 	bl	80022c0 <setIntegrationTime>
    setGain(gain);
 80022a0:	78bb      	ldrb	r3, [r7, #2]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f82e 	bl	8002304 <setGain>

    /* Note: by default, the device is in power down mode on bootup */
    enable();
 80022a8:	f7ff ffcc 	bl	8002244 <enable>

    return true;
 80022ac:	2301      	movs	r3, #1
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	0800831c 	.word	0x0800831c
 80022bc:	20000314 	.word	0x20000314

080022c0 <setIntegrationTime>:
/**************************************************************************/
/*!
    Sets the integration time for the TC34725
*/
/**************************************************************************/
void setIntegrationTime(tcs34725IntegrationTime_t it) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
    if (!_tcs34725Initialised) {
 80022ca:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <setIntegrationTime+0x38>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	f083 0301 	eor.w	r3, r3, #1
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <setIntegrationTime+0x1e>
        //begin();
    	my_printf("set integration time go wrong\r\n");
 80022d8:	4808      	ldr	r0, [pc, #32]	@ (80022fc <setIntegrationTime+0x3c>)
 80022da:	f7ff ff11 	bl	8002100 <my_printf>
    }

    /* Update the timing register */
    tcs34725_write8(TCS34725_ATIME, it);
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	4619      	mov	r1, r3
 80022e2:	2001      	movs	r0, #1
 80022e4:	f7ff ff3c 	bl	8002160 <tcs34725_write8>

    /* Update value placeholder */
    _tcs34725IntegrationTime = it;
 80022e8:	4a05      	ldr	r2, [pc, #20]	@ (8002300 <setIntegrationTime+0x40>)
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	7013      	strb	r3, [r2, #0]
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000314 	.word	0x20000314
 80022fc:	0800832c 	.word	0x0800832c
 8002300:	20000316 	.word	0x20000316

08002304 <setGain>:
/**************************************************************************/
/*!
    Adjusts the gain on the TCS34725 (adjusts the sensitivity to light)
*/
/**************************************************************************/
void setGain(tcs34725Gain_t gain) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
        begin();
    }
    */

    /* Update the timing register */
    tcs34725_write8(TCS34725_CONTROL, gain);
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	4619      	mov	r1, r3
 8002312:	200f      	movs	r0, #15
 8002314:	f7ff ff24 	bl	8002160 <tcs34725_write8>

    /* Update value placeholders */
    _tcs34725Gain = gain;
 8002318:	4a03      	ldr	r2, [pc, #12]	@ (8002328 <setGain+0x24>)
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	7013      	strb	r3, [r2, #0]
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000315 	.word	0x20000315

0800232c <getRawData>:
/**************************************************************************/
/*!
    @brief  Reads the raw red, green, blue and clear channel values
*/
/**************************************************************************/
void getRawData(uint16_t* r, uint16_t* g, uint16_t* b, uint16_t* c) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
	/*
    if (!_tcs34725Initialised) {
        begin();
    }
	*/
    *c = read16(TCS34725_CDATAL);
 800233a:	2014      	movs	r0, #20
 800233c:	f7ff ff58 	bl	80021f0 <read16>
 8002340:	4603      	mov	r3, r0
 8002342:	461a      	mov	r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	801a      	strh	r2, [r3, #0]
    *r = read16(TCS34725_RDATAL);
 8002348:	2016      	movs	r0, #22
 800234a:	f7ff ff51 	bl	80021f0 <read16>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	801a      	strh	r2, [r3, #0]
    *g = read16(TCS34725_GDATAL);
 8002356:	2018      	movs	r0, #24
 8002358:	f7ff ff4a 	bl	80021f0 <read16>
 800235c:	4603      	mov	r3, r0
 800235e:	461a      	mov	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	801a      	strh	r2, [r3, #0]
    *b = read16(TCS34725_BDATAL);
 8002364:	201a      	movs	r0, #26
 8002366:	f7ff ff43 	bl	80021f0 <read16>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	801a      	strh	r2, [r3, #0]

    /* Set a delay for the integration time */
    switch (_tcs34725IntegrationTime) {
 8002372:	4b1a      	ldr	r3, [pc, #104]	@ (80023dc <getRawData+0xb0>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2bff      	cmp	r3, #255	@ 0xff
 8002378:	d012      	beq.n	80023a0 <getRawData+0x74>
 800237a:	2bff      	cmp	r3, #255	@ 0xff
 800237c:	dc29      	bgt.n	80023d2 <getRawData+0xa6>
 800237e:	2bf6      	cmp	r3, #246	@ 0xf6
 8002380:	d012      	beq.n	80023a8 <getRawData+0x7c>
 8002382:	2bf6      	cmp	r3, #246	@ 0xf6
 8002384:	dc25      	bgt.n	80023d2 <getRawData+0xa6>
 8002386:	2beb      	cmp	r3, #235	@ 0xeb
 8002388:	d012      	beq.n	80023b0 <getRawData+0x84>
 800238a:	2beb      	cmp	r3, #235	@ 0xeb
 800238c:	dc21      	bgt.n	80023d2 <getRawData+0xa6>
 800238e:	2bd5      	cmp	r3, #213	@ 0xd5
 8002390:	d012      	beq.n	80023b8 <getRawData+0x8c>
 8002392:	2bd5      	cmp	r3, #213	@ 0xd5
 8002394:	dc1d      	bgt.n	80023d2 <getRawData+0xa6>
 8002396:	2b00      	cmp	r3, #0
 8002398:	d016      	beq.n	80023c8 <getRawData+0x9c>
 800239a:	2bc0      	cmp	r3, #192	@ 0xc0
 800239c:	d010      	beq.n	80023c0 <getRawData+0x94>
            break;
        case TCS34725_INTEGRATIONTIME_700MS:
        	HAL_Delay(700);
            break;
    }
}
 800239e:	e018      	b.n	80023d2 <getRawData+0xa6>
            HAL_Delay(3);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f000 f919 	bl	80025d8 <HAL_Delay>
            break;
 80023a6:	e014      	b.n	80023d2 <getRawData+0xa6>
        	HAL_Delay(24);
 80023a8:	2018      	movs	r0, #24
 80023aa:	f000 f915 	bl	80025d8 <HAL_Delay>
            break;
 80023ae:	e010      	b.n	80023d2 <getRawData+0xa6>
        	HAL_Delay(50);
 80023b0:	2032      	movs	r0, #50	@ 0x32
 80023b2:	f000 f911 	bl	80025d8 <HAL_Delay>
            break;
 80023b6:	e00c      	b.n	80023d2 <getRawData+0xa6>
        	HAL_Delay(101);
 80023b8:	2065      	movs	r0, #101	@ 0x65
 80023ba:	f000 f90d 	bl	80025d8 <HAL_Delay>
            break;
 80023be:	e008      	b.n	80023d2 <getRawData+0xa6>
        	HAL_Delay(154);
 80023c0:	209a      	movs	r0, #154	@ 0x9a
 80023c2:	f000 f909 	bl	80025d8 <HAL_Delay>
            break;
 80023c6:	e004      	b.n	80023d2 <getRawData+0xa6>
        	HAL_Delay(700);
 80023c8:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80023cc:	f000 f904 	bl	80025d8 <HAL_Delay>
            break;
 80023d0:	bf00      	nop
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000316 	.word	0x20000316

080023e0 <getRGB>:

void getRGB(float *r, float *g, float *b) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint16_t red, green, blue, clear;
  getRawData(&red, &green, &blue, &clear);
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	f107 0216 	add.w	r2, r7, #22
 80023f4:	f107 0118 	add.w	r1, r7, #24
 80023f8:	f107 001a 	add.w	r0, r7, #26
 80023fc:	f7ff ff96 	bl	800232c <getRawData>
  uint32_t sum = clear;
 8002400:	8abb      	ldrh	r3, [r7, #20]
 8002402:	61fb      	str	r3, [r7, #28]

  // Avoid divide by zero errors ... if clear = 0 return black
  if (clear == 0) {
 8002404:	8abb      	ldrh	r3, [r7, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10c      	bne.n	8002424 <getRGB+0x44>
    *r = *g = *b = 0;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	e038      	b.n	8002496 <getRGB+0xb6>
    return;
  }

  *r = (float)red / sum * 255.0;
 8002424:	8b7b      	ldrh	r3, [r7, #26]
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	ee07 3a90 	vmov	s15, r3
 8002434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800243c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800249c <getRGB+0xbc>
 8002440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	edc3 7a00 	vstr	s15, [r3]
  *g = (float)green / sum * 255.0;
 800244a:	8b3b      	ldrh	r3, [r7, #24]
 800244c:	ee07 3a90 	vmov	s15, r3
 8002450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800245e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002462:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800249c <getRGB+0xbc>
 8002466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	edc3 7a00 	vstr	s15, [r3]
  *b = (float)blue / sum * 255.0;
 8002470:	8afb      	ldrh	r3, [r7, #22]
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	ee07 3a90 	vmov	s15, r3
 8002480:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002488:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 800249c <getRGB+0xbc>
 800248c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	edc3 7a00 	vstr	s15, [r3]
}
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	437f0000 	.word	0x437f0000

080024a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024a4:	f7ff fdfe 	bl	80020a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024a8:	480c      	ldr	r0, [pc, #48]	@ (80024dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024aa:	490d      	ldr	r1, [pc, #52]	@ (80024e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024ac:	4a0d      	ldr	r2, [pc, #52]	@ (80024e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b0:	e002      	b.n	80024b8 <LoopCopyDataInit>

080024b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b6:	3304      	adds	r3, #4

080024b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024bc:	d3f9      	bcc.n	80024b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024be:	4a0a      	ldr	r2, [pc, #40]	@ (80024e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024c0:	4c0a      	ldr	r4, [pc, #40]	@ (80024ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c4:	e001      	b.n	80024ca <LoopFillZerobss>

080024c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c8:	3204      	adds	r2, #4

080024ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024cc:	d3fb      	bcc.n	80024c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ce:	f003 fe09 	bl	80060e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024d2:	f7ff fa37 	bl	8001944 <main>
  bx  lr    
 80024d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80024e4:	080086ec 	.word	0x080086ec
  ldr r2, =_sbss
 80024e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80024ec:	20000468 	.word	0x20000468

080024f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024f0:	e7fe      	b.n	80024f0 <ADC_IRQHandler>
	...

080024f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <HAL_Init+0x40>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002534 <HAL_Init+0x40>)
 80024fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002504:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <HAL_Init+0x40>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <HAL_Init+0x40>)
 800250a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800250e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002510:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <HAL_Init+0x40>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a07      	ldr	r2, [pc, #28]	@ (8002534 <HAL_Init+0x40>)
 8002516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800251a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800251c:	2003      	movs	r0, #3
 800251e:	f000 f931 	bl	8002784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002522:	200f      	movs	r0, #15
 8002524:	f000 f808 	bl	8002538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002528:	f7ff fbca 	bl	8001cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023c00 	.word	0x40023c00

08002538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002540:	4b12      	ldr	r3, [pc, #72]	@ (800258c <HAL_InitTick+0x54>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_InitTick+0x58>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800254e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f93b 	bl	80027d2 <HAL_SYSTICK_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e00e      	b.n	8002584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b0f      	cmp	r3, #15
 800256a:	d80a      	bhi.n	8002582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800256c:	2200      	movs	r2, #0
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002574:	f000 f911 	bl	800279a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002578:	4a06      	ldr	r2, [pc, #24]	@ (8002594 <HAL_InitTick+0x5c>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000000 	.word	0x20000000
 8002590:	20000008 	.word	0x20000008
 8002594:	20000004 	.word	0x20000004

08002598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800259c:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <HAL_IncTick+0x20>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <HAL_IncTick+0x24>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	4a04      	ldr	r2, [pc, #16]	@ (80025bc <HAL_IncTick+0x24>)
 80025aa:	6013      	str	r3, [r2, #0]
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000008 	.word	0x20000008
 80025bc:	20000318 	.word	0x20000318

080025c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return uwTick;
 80025c4:	4b03      	ldr	r3, [pc, #12]	@ (80025d4 <HAL_GetTick+0x14>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000318 	.word	0x20000318

080025d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e0:	f7ff ffee 	bl	80025c0 <HAL_GetTick>
 80025e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025f0:	d005      	beq.n	80025fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025f2:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <HAL_Delay+0x44>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4413      	add	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025fe:	bf00      	nop
 8002600:	f7ff ffde 	bl	80025c0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	429a      	cmp	r2, r3
 800260e:	d8f7      	bhi.n	8002600 <HAL_Delay+0x28>
  {
  }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000008 	.word	0x20000008

08002620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002630:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <__NVIC_SetPriorityGrouping+0x44>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800263c:	4013      	ands	r3, r2
 800263e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800264c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002652:	4a04      	ldr	r2, [pc, #16]	@ (8002664 <__NVIC_SetPriorityGrouping+0x44>)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	60d3      	str	r3, [r2, #12]
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800266c:	4b04      	ldr	r3, [pc, #16]	@ (8002680 <__NVIC_GetPriorityGrouping+0x18>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	0a1b      	lsrs	r3, r3, #8
 8002672:	f003 0307 	and.w	r3, r3, #7
}
 8002676:	4618      	mov	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002694:	2b00      	cmp	r3, #0
 8002696:	db0a      	blt.n	80026ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	b2da      	uxtb	r2, r3
 800269c:	490c      	ldr	r1, [pc, #48]	@ (80026d0 <__NVIC_SetPriority+0x4c>)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	0112      	lsls	r2, r2, #4
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	440b      	add	r3, r1
 80026a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ac:	e00a      	b.n	80026c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4908      	ldr	r1, [pc, #32]	@ (80026d4 <__NVIC_SetPriority+0x50>)
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	3b04      	subs	r3, #4
 80026bc:	0112      	lsls	r2, r2, #4
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	440b      	add	r3, r1
 80026c2:	761a      	strb	r2, [r3, #24]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000e100 	.word	0xe000e100
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	@ 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f1c3 0307 	rsb	r3, r3, #7
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	bf28      	it	cs
 80026f6:	2304      	movcs	r3, #4
 80026f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3304      	adds	r3, #4
 80026fe:	2b06      	cmp	r3, #6
 8002700:	d902      	bls.n	8002708 <NVIC_EncodePriority+0x30>
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3b03      	subs	r3, #3
 8002706:	e000      	b.n	800270a <NVIC_EncodePriority+0x32>
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43da      	mvns	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	401a      	ands	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002720:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	43d9      	mvns	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	4313      	orrs	r3, r2
         );
}
 8002732:	4618      	mov	r0, r3
 8002734:	3724      	adds	r7, #36	@ 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002750:	d301      	bcc.n	8002756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002752:	2301      	movs	r3, #1
 8002754:	e00f      	b.n	8002776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002756:	4a0a      	ldr	r2, [pc, #40]	@ (8002780 <SysTick_Config+0x40>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275e:	210f      	movs	r1, #15
 8002760:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002764:	f7ff ff8e 	bl	8002684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002768:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <SysTick_Config+0x40>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276e:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <SysTick_Config+0x40>)
 8002770:	2207      	movs	r2, #7
 8002772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	e000e010 	.word	0xe000e010

08002784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff47 	bl	8002620 <__NVIC_SetPriorityGrouping>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ac:	f7ff ff5c 	bl	8002668 <__NVIC_GetPriorityGrouping>
 80027b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	6978      	ldr	r0, [r7, #20]
 80027b8:	f7ff ff8e 	bl	80026d8 <NVIC_EncodePriority>
 80027bc:	4602      	mov	r2, r0
 80027be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff5d 	bl	8002684 <__NVIC_SetPriority>
}
 80027ca:	bf00      	nop
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ffb0 	bl	8002740 <SysTick_Config>
 80027e0:	4603      	mov	r3, r0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	@ 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	e159      	b.n	8002abc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002808:	2201      	movs	r2, #1
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	429a      	cmp	r2, r3
 8002822:	f040 8148 	bne.w	8002ab6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d005      	beq.n	800283e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283a:	2b02      	cmp	r3, #2
 800283c:	d130      	bne.n	80028a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002874:	2201      	movs	r2, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 0201 	and.w	r2, r3, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d017      	beq.n	80028dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d123      	bne.n	8002930 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	08da      	lsrs	r2, r3, #3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3208      	adds	r2, #8
 80028f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	220f      	movs	r2, #15
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	08da      	lsrs	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3208      	adds	r2, #8
 800292a:	69b9      	ldr	r1, [r7, #24]
 800292c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0203 	and.w	r2, r3, #3
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a2 	beq.w	8002ab6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	4b57      	ldr	r3, [pc, #348]	@ (8002ad4 <HAL_GPIO_Init+0x2e8>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297a:	4a56      	ldr	r2, [pc, #344]	@ (8002ad4 <HAL_GPIO_Init+0x2e8>)
 800297c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002980:	6453      	str	r3, [r2, #68]	@ 0x44
 8002982:	4b54      	ldr	r3, [pc, #336]	@ (8002ad4 <HAL_GPIO_Init+0x2e8>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800298e:	4a52      	ldr	r2, [pc, #328]	@ (8002ad8 <HAL_GPIO_Init+0x2ec>)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	3302      	adds	r3, #2
 8002996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	220f      	movs	r2, #15
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a49      	ldr	r2, [pc, #292]	@ (8002adc <HAL_GPIO_Init+0x2f0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d019      	beq.n	80029ee <HAL_GPIO_Init+0x202>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a48      	ldr	r2, [pc, #288]	@ (8002ae0 <HAL_GPIO_Init+0x2f4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_GPIO_Init+0x1fe>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a47      	ldr	r2, [pc, #284]	@ (8002ae4 <HAL_GPIO_Init+0x2f8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00d      	beq.n	80029e6 <HAL_GPIO_Init+0x1fa>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a46      	ldr	r2, [pc, #280]	@ (8002ae8 <HAL_GPIO_Init+0x2fc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d007      	beq.n	80029e2 <HAL_GPIO_Init+0x1f6>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a45      	ldr	r2, [pc, #276]	@ (8002aec <HAL_GPIO_Init+0x300>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_GPIO_Init+0x1f2>
 80029da:	2304      	movs	r3, #4
 80029dc:	e008      	b.n	80029f0 <HAL_GPIO_Init+0x204>
 80029de:	2307      	movs	r3, #7
 80029e0:	e006      	b.n	80029f0 <HAL_GPIO_Init+0x204>
 80029e2:	2303      	movs	r3, #3
 80029e4:	e004      	b.n	80029f0 <HAL_GPIO_Init+0x204>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e002      	b.n	80029f0 <HAL_GPIO_Init+0x204>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_GPIO_Init+0x204>
 80029ee:	2300      	movs	r3, #0
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	f002 0203 	and.w	r2, r2, #3
 80029f6:	0092      	lsls	r2, r2, #2
 80029f8:	4093      	lsls	r3, r2
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a00:	4935      	ldr	r1, [pc, #212]	@ (8002ad8 <HAL_GPIO_Init+0x2ec>)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a0e:	4b38      	ldr	r3, [pc, #224]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a32:	4a2f      	ldr	r2, [pc, #188]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a38:	4b2d      	ldr	r3, [pc, #180]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a5c:	4a24      	ldr	r2, [pc, #144]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a62:	4b23      	ldr	r3, [pc, #140]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a86:	4a1a      	ldr	r2, [pc, #104]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a8c:	4b18      	ldr	r3, [pc, #96]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2b0f      	cmp	r3, #15
 8002ac0:	f67f aea2 	bls.w	8002808 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	3724      	adds	r7, #36	@ 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40013800 	.word	0x40013800
 8002adc:	40020000 	.word	0x40020000
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	40020800 	.word	0x40020800
 8002ae8:	40020c00 	.word	0x40020c00
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40013c00 	.word	0x40013c00

08002af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e12b      	b.n	8002d5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff f8f8 	bl	8001d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2224      	movs	r2, #36	@ 0x24
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b58:	f002 f8a0 	bl	8004c9c <HAL_RCC_GetPCLK1Freq>
 8002b5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4a81      	ldr	r2, [pc, #516]	@ (8002d68 <HAL_I2C_Init+0x274>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d807      	bhi.n	8002b78 <HAL_I2C_Init+0x84>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a80      	ldr	r2, [pc, #512]	@ (8002d6c <HAL_I2C_Init+0x278>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	bf94      	ite	ls
 8002b70:	2301      	movls	r3, #1
 8002b72:	2300      	movhi	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	e006      	b.n	8002b86 <HAL_I2C_Init+0x92>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4a7d      	ldr	r2, [pc, #500]	@ (8002d70 <HAL_I2C_Init+0x27c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	bf94      	ite	ls
 8002b80:	2301      	movls	r3, #1
 8002b82:	2300      	movhi	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0e7      	b.n	8002d5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a78      	ldr	r2, [pc, #480]	@ (8002d74 <HAL_I2C_Init+0x280>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	0c9b      	lsrs	r3, r3, #18
 8002b98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4a6a      	ldr	r2, [pc, #424]	@ (8002d68 <HAL_I2C_Init+0x274>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d802      	bhi.n	8002bc8 <HAL_I2C_Init+0xd4>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	e009      	b.n	8002bdc <HAL_I2C_Init+0xe8>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	4a69      	ldr	r2, [pc, #420]	@ (8002d78 <HAL_I2C_Init+0x284>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	099b      	lsrs	r3, r3, #6
 8002bda:	3301      	adds	r3, #1
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002bee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	495c      	ldr	r1, [pc, #368]	@ (8002d68 <HAL_I2C_Init+0x274>)
 8002bf8:	428b      	cmp	r3, r1
 8002bfa:	d819      	bhi.n	8002c30 <HAL_I2C_Init+0x13c>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1e59      	subs	r1, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c0a:	1c59      	adds	r1, r3, #1
 8002c0c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c10:	400b      	ands	r3, r1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_I2C_Init+0x138>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1e59      	subs	r1, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c24:	3301      	adds	r3, #1
 8002c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2a:	e051      	b.n	8002cd0 <HAL_I2C_Init+0x1dc>
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	e04f      	b.n	8002cd0 <HAL_I2C_Init+0x1dc>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d111      	bne.n	8002c5c <HAL_I2C_Init+0x168>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	1e58      	subs	r0, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	440b      	add	r3, r1
 8002c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e012      	b.n	8002c82 <HAL_I2C_Init+0x18e>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1e58      	subs	r0, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6859      	ldr	r1, [r3, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	0099      	lsls	r1, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c72:	3301      	adds	r3, #1
 8002c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_I2C_Init+0x196>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e022      	b.n	8002cd0 <HAL_I2C_Init+0x1dc>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10e      	bne.n	8002cb0 <HAL_I2C_Init+0x1bc>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1e58      	subs	r0, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6859      	ldr	r1, [r3, #4]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	440b      	add	r3, r1
 8002ca0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002caa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cae:	e00f      	b.n	8002cd0 <HAL_I2C_Init+0x1dc>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1e58      	subs	r0, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6859      	ldr	r1, [r3, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	0099      	lsls	r1, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ccc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	6809      	ldr	r1, [r1, #0]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69da      	ldr	r2, [r3, #28]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002cfe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6911      	ldr	r1, [r2, #16]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68d2      	ldr	r2, [r2, #12]
 8002d0a:	4311      	orrs	r1, r2
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	430b      	orrs	r3, r1
 8002d12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	000186a0 	.word	0x000186a0
 8002d6c:	001e847f 	.word	0x001e847f
 8002d70:	003d08ff 	.word	0x003d08ff
 8002d74:	431bde83 	.word	0x431bde83
 8002d78:	10624dd3 	.word	0x10624dd3

08002d7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	461a      	mov	r2, r3
 8002d88:	460b      	mov	r3, r1
 8002d8a:	817b      	strh	r3, [r7, #10]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d90:	f7ff fc16 	bl	80025c0 <HAL_GetTick>
 8002d94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	f040 80e0 	bne.w	8002f64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	2319      	movs	r3, #25
 8002daa:	2201      	movs	r2, #1
 8002dac:	4970      	ldr	r1, [pc, #448]	@ (8002f70 <HAL_I2C_Master_Transmit+0x1f4>)
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f001 f90e 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e0d3      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_I2C_Master_Transmit+0x50>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e0cc      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x1ea>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d007      	beq.n	8002df2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0201 	orr.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2221      	movs	r2, #33	@ 0x21
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2210      	movs	r2, #16
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	893a      	ldrh	r2, [r7, #8]
 8002e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4a50      	ldr	r2, [pc, #320]	@ (8002f74 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e34:	8979      	ldrh	r1, [r7, #10]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	6a3a      	ldr	r2, [r7, #32]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fdfa 	bl	8003a34 <I2C_MasterRequestWrite>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e08d      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e60:	e066      	b.n	8002f30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	6a39      	ldr	r1, [r7, #32]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f001 f9cc 	bl	8004204 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00d      	beq.n	8002e8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d107      	bne.n	8002e8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e06b      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	781a      	ldrb	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d11b      	bne.n	8002f04 <HAL_I2C_Master_Transmit+0x188>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d017      	beq.n	8002f04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	781a      	ldrb	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	6a39      	ldr	r1, [r7, #32]
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f001 f9c3 	bl	8004294 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00d      	beq.n	8002f30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d107      	bne.n	8002f2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e01a      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d194      	bne.n	8002e62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e000      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f64:	2302      	movs	r3, #2
  }
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	00100002 	.word	0x00100002
 8002f74:	ffff0000 	.word	0xffff0000

08002f78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08c      	sub	sp, #48	@ 0x30
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	461a      	mov	r2, r3
 8002f84:	460b      	mov	r3, r1
 8002f86:	817b      	strh	r3, [r7, #10]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f8c:	f7ff fb18 	bl	80025c0 <HAL_GetTick>
 8002f90:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	f040 8217 	bne.w	80033ce <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2319      	movs	r3, #25
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	497c      	ldr	r1, [pc, #496]	@ (800319c <HAL_I2C_Master_Receive+0x224>)
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f001 f810 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e20a      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_I2C_Master_Receive+0x50>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e203      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d007      	beq.n	8002fee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ffc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2222      	movs	r2, #34	@ 0x22
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2210      	movs	r2, #16
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	893a      	ldrh	r2, [r7, #8]
 800301e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4a5c      	ldr	r2, [pc, #368]	@ (80031a0 <HAL_I2C_Master_Receive+0x228>)
 800302e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003030:	8979      	ldrh	r1, [r7, #10]
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fd7e 	bl	8003b38 <I2C_MasterRequestRead>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e1c4      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304a:	2b00      	cmp	r3, #0
 800304c:	d113      	bne.n	8003076 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304e:	2300      	movs	r3, #0
 8003050:	623b      	str	r3, [r7, #32]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	623b      	str	r3, [r7, #32]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	623b      	str	r3, [r7, #32]
 8003062:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	e198      	b.n	80033a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307a:	2b01      	cmp	r3, #1
 800307c:	d11b      	bne.n	80030b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800308c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	e178      	b.n	80033a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d11b      	bne.n	80030f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	61bb      	str	r3, [r7, #24]
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	e158      	b.n	80033a8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003104:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800311c:	e144      	b.n	80033a8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003122:	2b03      	cmp	r3, #3
 8003124:	f200 80f1 	bhi.w	800330a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312c:	2b01      	cmp	r3, #1
 800312e:	d123      	bne.n	8003178 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003132:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f001 f8f5 	bl	8004324 <I2C_WaitOnRXNEFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e145      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003176:	e117      	b.n	80033a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800317c:	2b02      	cmp	r3, #2
 800317e:	d14e      	bne.n	800321e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003186:	2200      	movs	r2, #0
 8003188:	4906      	ldr	r1, [pc, #24]	@ (80031a4 <HAL_I2C_Master_Receive+0x22c>)
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 ff20 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e11a      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
 800319a:	bf00      	nop
 800319c:	00100002 	.word	0x00100002
 80031a0:	ffff0000 	.word	0xffff0000
 80031a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800321c:	e0c4      	b.n	80033a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003224:	2200      	movs	r2, #0
 8003226:	496c      	ldr	r1, [pc, #432]	@ (80033d8 <HAL_I2C_Master_Receive+0x460>)
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fed1 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0cb      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003280:	2200      	movs	r2, #0
 8003282:	4955      	ldr	r1, [pc, #340]	@ (80033d8 <HAL_I2C_Master_Receive+0x460>)
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 fea3 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e09d      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003308:	e04e      	b.n	80033a8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800330c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f001 f808 	bl	8004324 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e058      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b04      	cmp	r3, #4
 800335c:	d124      	bne.n	80033a8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003362:	2b03      	cmp	r3, #3
 8003364:	d107      	bne.n	8003376 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003374:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f47f aeb6 	bne.w	800311e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e000      	b.n	80033d0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80033ce:	2302      	movs	r3, #2
  }
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3728      	adds	r7, #40	@ 0x28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	00010004 	.word	0x00010004

080033dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	4608      	mov	r0, r1
 80033e6:	4611      	mov	r1, r2
 80033e8:	461a      	mov	r2, r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	817b      	strh	r3, [r7, #10]
 80033ee:	460b      	mov	r3, r1
 80033f0:	813b      	strh	r3, [r7, #8]
 80033f2:	4613      	mov	r3, r2
 80033f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033f6:	f7ff f8e3 	bl	80025c0 <HAL_GetTick>
 80033fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b20      	cmp	r3, #32
 8003406:	f040 80d9 	bne.w	80035bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	2319      	movs	r3, #25
 8003410:	2201      	movs	r2, #1
 8003412:	496d      	ldr	r1, [pc, #436]	@ (80035c8 <HAL_I2C_Mem_Write+0x1ec>)
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fddb 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
 8003422:	e0cc      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_I2C_Mem_Write+0x56>
 800342e:	2302      	movs	r3, #2
 8003430:	e0c5      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d007      	beq.n	8003458 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003466:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2221      	movs	r2, #33	@ 0x21
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2240      	movs	r2, #64	@ 0x40
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a3a      	ldr	r2, [r7, #32]
 8003482:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003488:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a4d      	ldr	r2, [pc, #308]	@ (80035cc <HAL_I2C_Mem_Write+0x1f0>)
 8003498:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800349a:	88f8      	ldrh	r0, [r7, #6]
 800349c:	893a      	ldrh	r2, [r7, #8]
 800349e:	8979      	ldrh	r1, [r7, #10]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	4603      	mov	r3, r0
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fc12 	bl	8003cd4 <I2C_RequestMemoryWrite>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d052      	beq.n	800355c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e081      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fea0 	bl	8004204 <I2C_WaitOnTXEFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00d      	beq.n	80034e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d107      	bne.n	80034e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e06b      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	781a      	ldrb	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b04      	cmp	r3, #4
 8003522:	d11b      	bne.n	800355c <HAL_I2C_Mem_Write+0x180>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003528:	2b00      	cmp	r3, #0
 800352a:	d017      	beq.n	800355c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	781a      	ldrb	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1aa      	bne.n	80034ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fe93 	bl	8004294 <I2C_WaitOnBTFFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00d      	beq.n	8003590 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	2b04      	cmp	r3, #4
 800357a:	d107      	bne.n	800358c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800358a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e016      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800359e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80035bc:	2302      	movs	r3, #2
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	00100002 	.word	0x00100002
 80035cc:	ffff0000 	.word	0xffff0000

080035d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08c      	sub	sp, #48	@ 0x30
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	4608      	mov	r0, r1
 80035da:	4611      	mov	r1, r2
 80035dc:	461a      	mov	r2, r3
 80035de:	4603      	mov	r3, r0
 80035e0:	817b      	strh	r3, [r7, #10]
 80035e2:	460b      	mov	r3, r1
 80035e4:	813b      	strh	r3, [r7, #8]
 80035e6:	4613      	mov	r3, r2
 80035e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035ea:	f7fe ffe9 	bl	80025c0 <HAL_GetTick>
 80035ee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	f040 8214 	bne.w	8003a26 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	2319      	movs	r3, #25
 8003604:	2201      	movs	r2, #1
 8003606:	497b      	ldr	r1, [pc, #492]	@ (80037f4 <HAL_I2C_Mem_Read+0x224>)
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fce1 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003614:	2302      	movs	r3, #2
 8003616:	e207      	b.n	8003a28 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_I2C_Mem_Read+0x56>
 8003622:	2302      	movs	r3, #2
 8003624:	e200      	b.n	8003a28 <HAL_I2C_Mem_Read+0x458>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b01      	cmp	r3, #1
 800363a:	d007      	beq.n	800364c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800365a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2222      	movs	r2, #34	@ 0x22
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2240      	movs	r2, #64	@ 0x40
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003676:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800367c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4a5b      	ldr	r2, [pc, #364]	@ (80037f8 <HAL_I2C_Mem_Read+0x228>)
 800368c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800368e:	88f8      	ldrh	r0, [r7, #6]
 8003690:	893a      	ldrh	r2, [r7, #8]
 8003692:	8979      	ldrh	r1, [r7, #10]
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	4603      	mov	r3, r0
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fbae 	bl	8003e00 <I2C_RequestMemoryRead>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e1bc      	b.n	8003a28 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d113      	bne.n	80036de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b6:	2300      	movs	r3, #0
 80036b8:	623b      	str	r3, [r7, #32]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	623b      	str	r3, [r7, #32]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	623b      	str	r3, [r7, #32]
 80036ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	e190      	b.n	8003a00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d11b      	bne.n	800371e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	61fb      	str	r3, [r7, #28]
 800370a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	e170      	b.n	8003a00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003722:	2b02      	cmp	r3, #2
 8003724:	d11b      	bne.n	800375e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003734:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003744:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	e150      	b.n	8003a00 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003774:	e144      	b.n	8003a00 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377a:	2b03      	cmp	r3, #3
 800377c:	f200 80f1 	bhi.w	8003962 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003784:	2b01      	cmp	r3, #1
 8003786:	d123      	bne.n	80037d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 fdc9 	bl	8004324 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e145      	b.n	8003a28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037ce:	e117      	b.n	8003a00 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d14e      	bne.n	8003876 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037de:	2200      	movs	r2, #0
 80037e0:	4906      	ldr	r1, [pc, #24]	@ (80037fc <HAL_I2C_Mem_Read+0x22c>)
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fbf4 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e11a      	b.n	8003a28 <HAL_I2C_Mem_Read+0x458>
 80037f2:	bf00      	nop
 80037f4:	00100002 	.word	0x00100002
 80037f8:	ffff0000 	.word	0xffff0000
 80037fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800380e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003874:	e0c4      	b.n	8003a00 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800387c:	2200      	movs	r2, #0
 800387e:	496c      	ldr	r1, [pc, #432]	@ (8003a30 <HAL_I2C_Mem_Read+0x460>)
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 fba5 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0cb      	b.n	8003a28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800389e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d8:	2200      	movs	r2, #0
 80038da:	4955      	ldr	r1, [pc, #340]	@ (8003a30 <HAL_I2C_Mem_Read+0x460>)
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fb77 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e09d      	b.n	8003a28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003960:	e04e      	b.n	8003a00 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003964:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fcdc 	bl	8004324 <I2C_WaitOnRXNEFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e058      	b.n	8003a28 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d124      	bne.n	8003a00 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d107      	bne.n	80039ce <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039cc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f47f aeb6 	bne.w	8003776 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e000      	b.n	8003a28 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
  }
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3728      	adds	r7, #40	@ 0x28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	00010004 	.word	0x00010004

08003a34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	460b      	mov	r3, r1
 8003a42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d006      	beq.n	8003a5e <I2C_MasterRequestWrite+0x2a>
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d003      	beq.n	8003a5e <I2C_MasterRequestWrite+0x2a>
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a5c:	d108      	bne.n	8003a70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e00b      	b.n	8003a88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a74:	2b12      	cmp	r3, #18
 8003a76:	d107      	bne.n	8003a88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 fa9b 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00d      	beq.n	8003abc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aae:	d103      	bne.n	8003ab8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ab6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e035      	b.n	8003b28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ac4:	d108      	bne.n	8003ad8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ac6:	897b      	ldrh	r3, [r7, #10]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ad4:	611a      	str	r2, [r3, #16]
 8003ad6:	e01b      	b.n	8003b10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ad8:	897b      	ldrh	r3, [r7, #10]
 8003ada:	11db      	asrs	r3, r3, #7
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f003 0306 	and.w	r3, r3, #6
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f063 030f 	orn	r3, r3, #15
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	490e      	ldr	r1, [pc, #56]	@ (8003b30 <I2C_MasterRequestWrite+0xfc>)
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 fae4 	bl	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e010      	b.n	8003b28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b06:	897b      	ldrh	r3, [r7, #10]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4907      	ldr	r1, [pc, #28]	@ (8003b34 <I2C_MasterRequestWrite+0x100>)
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fad4 	bl	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	00010008 	.word	0x00010008
 8003b34:	00010002 	.word	0x00010002

08003b38 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	607a      	str	r2, [r7, #4]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	460b      	mov	r3, r1
 8003b46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b5c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d006      	beq.n	8003b72 <I2C_MasterRequestRead+0x3a>
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d003      	beq.n	8003b72 <I2C_MasterRequestRead+0x3a>
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b70:	d108      	bne.n	8003b84 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	e00b      	b.n	8003b9c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b88:	2b11      	cmp	r3, #17
 8003b8a:	d107      	bne.n	8003b9c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fa11 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00d      	beq.n	8003bd0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bc2:	d103      	bne.n	8003bcc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e079      	b.n	8003cc4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bd8:	d108      	bne.n	8003bec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bda:	897b      	ldrh	r3, [r7, #10]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	611a      	str	r2, [r3, #16]
 8003bea:	e05f      	b.n	8003cac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bec:	897b      	ldrh	r3, [r7, #10]
 8003bee:	11db      	asrs	r3, r3, #7
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	f003 0306 	and.w	r3, r3, #6
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	f063 030f 	orn	r3, r3, #15
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	4930      	ldr	r1, [pc, #192]	@ (8003ccc <I2C_MasterRequestRead+0x194>)
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fa5a 	bl	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e054      	b.n	8003cc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c1a:	897b      	ldrh	r3, [r7, #10]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4929      	ldr	r1, [pc, #164]	@ (8003cd0 <I2C_MasterRequestRead+0x198>)
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 fa4a 	bl	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e044      	b.n	8003cc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c5e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f9af 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00d      	beq.n	8003c94 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c86:	d103      	bne.n	8003c90 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c8e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e017      	b.n	8003cc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003c94:	897b      	ldrh	r3, [r7, #10]
 8003c96:	11db      	asrs	r3, r3, #7
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f003 0306 	and.w	r3, r3, #6
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	f063 030e 	orn	r3, r3, #14
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4907      	ldr	r1, [pc, #28]	@ (8003cd0 <I2C_MasterRequestRead+0x198>)
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fa06 	bl	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	00010008 	.word	0x00010008
 8003cd0:	00010002 	.word	0x00010002

08003cd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	4608      	mov	r0, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	817b      	strh	r3, [r7, #10]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	813b      	strh	r3, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f960 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00d      	beq.n	8003d32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d24:	d103      	bne.n	8003d2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e05f      	b.n	8003df2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d32:	897b      	ldrh	r3, [r7, #10]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	6a3a      	ldr	r2, [r7, #32]
 8003d46:	492d      	ldr	r1, [pc, #180]	@ (8003dfc <I2C_RequestMemoryWrite+0x128>)
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f9bb 	bl	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e04c      	b.n	8003df2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d70:	6a39      	ldr	r1, [r7, #32]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 fa46 	bl	8004204 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00d      	beq.n	8003d9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d107      	bne.n	8003d96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e02b      	b.n	8003df2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d105      	bne.n	8003dac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003da0:	893b      	ldrh	r3, [r7, #8]
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	611a      	str	r2, [r3, #16]
 8003daa:	e021      	b.n	8003df0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dac:	893b      	ldrh	r3, [r7, #8]
 8003dae:	0a1b      	lsrs	r3, r3, #8
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dbc:	6a39      	ldr	r1, [r7, #32]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 fa20 	bl	8004204 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d107      	bne.n	8003de2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e005      	b.n	8003df2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003de6:	893b      	ldrh	r3, [r7, #8]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	00010002 	.word	0x00010002

08003e00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	4608      	mov	r0, r1
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4603      	mov	r3, r0
 8003e10:	817b      	strh	r3, [r7, #10]
 8003e12:	460b      	mov	r3, r1
 8003e14:	813b      	strh	r3, [r7, #8]
 8003e16:	4613      	mov	r3, r2
 8003e18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f8c2 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00d      	beq.n	8003e6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e60:	d103      	bne.n	8003e6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e0aa      	b.n	8003fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e6e:	897b      	ldrh	r3, [r7, #10]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e80:	6a3a      	ldr	r2, [r7, #32]
 8003e82:	4952      	ldr	r1, [pc, #328]	@ (8003fcc <I2C_RequestMemoryRead+0x1cc>)
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f91d 	bl	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e097      	b.n	8003fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eac:	6a39      	ldr	r1, [r7, #32]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f9a8 	bl	8004204 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00d      	beq.n	8003ed6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d107      	bne.n	8003ed2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ed0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e076      	b.n	8003fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ed6:	88fb      	ldrh	r3, [r7, #6]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d105      	bne.n	8003ee8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003edc:	893b      	ldrh	r3, [r7, #8]
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	611a      	str	r2, [r3, #16]
 8003ee6:	e021      	b.n	8003f2c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ee8:	893b      	ldrh	r3, [r7, #8]
 8003eea:	0a1b      	lsrs	r3, r3, #8
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef8:	6a39      	ldr	r1, [r7, #32]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f982 	bl	8004204 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00d      	beq.n	8003f22 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d107      	bne.n	8003f1e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e050      	b.n	8003fc4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f22:	893b      	ldrh	r3, [r7, #8]
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f2e:	6a39      	ldr	r1, [r7, #32]
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 f967 	bl	8004204 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00d      	beq.n	8003f58 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d107      	bne.n	8003f54 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e035      	b.n	8003fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f82b 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00d      	beq.n	8003f9c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f8e:	d103      	bne.n	8003f98 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f96:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e013      	b.n	8003fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f9c:	897b      	ldrh	r3, [r7, #10]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	6a3a      	ldr	r2, [r7, #32]
 8003fb0:	4906      	ldr	r1, [pc, #24]	@ (8003fcc <I2C_RequestMemoryRead+0x1cc>)
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f886 	bl	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	00010002 	.word	0x00010002

08003fd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fe0:	e048      	b.n	8004074 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fe8:	d044      	beq.n	8004074 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fea:	f7fe fae9 	bl	80025c0 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d302      	bcc.n	8004000 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d139      	bne.n	8004074 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	0c1b      	lsrs	r3, r3, #16
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d10d      	bne.n	8004026 <I2C_WaitOnFlagUntilTimeout+0x56>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	43da      	mvns	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	4013      	ands	r3, r2
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf0c      	ite	eq
 800401c:	2301      	moveq	r3, #1
 800401e:	2300      	movne	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	e00c      	b.n	8004040 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	43da      	mvns	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4013      	ands	r3, r2
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	429a      	cmp	r2, r3
 8004044:	d116      	bne.n	8004074 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004060:	f043 0220 	orr.w	r2, r3, #32
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e023      	b.n	80040bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	0c1b      	lsrs	r3, r3, #16
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b01      	cmp	r3, #1
 800407c:	d10d      	bne.n	800409a <I2C_WaitOnFlagUntilTimeout+0xca>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	43da      	mvns	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	4013      	ands	r3, r2
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf0c      	ite	eq
 8004090:	2301      	moveq	r3, #1
 8004092:	2300      	movne	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	e00c      	b.n	80040b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	43da      	mvns	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4013      	ands	r3, r2
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d093      	beq.n	8003fe2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040d2:	e071      	b.n	80041b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e2:	d123      	bne.n	800412c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004118:	f043 0204 	orr.w	r2, r3, #4
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e067      	b.n	80041fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004132:	d041      	beq.n	80041b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004134:	f7fe fa44 	bl	80025c0 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	429a      	cmp	r2, r3
 8004142:	d302      	bcc.n	800414a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d136      	bne.n	80041b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	d10c      	bne.n	800416e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	43da      	mvns	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4013      	ands	r3, r2
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	bf14      	ite	ne
 8004166:	2301      	movne	r3, #1
 8004168:	2300      	moveq	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	e00b      	b.n	8004186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	43da      	mvns	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	4013      	ands	r3, r2
 800417a:	b29b      	uxth	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf14      	ite	ne
 8004180:	2301      	movne	r3, #1
 8004182:	2300      	moveq	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d016      	beq.n	80041b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a4:	f043 0220 	orr.w	r2, r3, #32
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e021      	b.n	80041fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	0c1b      	lsrs	r3, r3, #16
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d10c      	bne.n	80041dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	43da      	mvns	r2, r3
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	4013      	ands	r3, r2
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	bf14      	ite	ne
 80041d4:	2301      	movne	r3, #1
 80041d6:	2300      	moveq	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	e00b      	b.n	80041f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	43da      	mvns	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4013      	ands	r3, r2
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bf14      	ite	ne
 80041ee:	2301      	movne	r3, #1
 80041f0:	2300      	moveq	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f47f af6d 	bne.w	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004210:	e034      	b.n	800427c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f8e3 	bl	80043de <I2C_IsAcknowledgeFailed>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e034      	b.n	800428c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004228:	d028      	beq.n	800427c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7fe f9c9 	bl	80025c0 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d11d      	bne.n	800427c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424a:	2b80      	cmp	r3, #128	@ 0x80
 800424c:	d016      	beq.n	800427c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004268:	f043 0220 	orr.w	r2, r3, #32
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e007      	b.n	800428c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004286:	2b80      	cmp	r3, #128	@ 0x80
 8004288:	d1c3      	bne.n	8004212 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042a0:	e034      	b.n	800430c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f89b 	bl	80043de <I2C_IsAcknowledgeFailed>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e034      	b.n	800431c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042b8:	d028      	beq.n	800430c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ba:	f7fe f981 	bl	80025c0 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d302      	bcc.n	80042d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d11d      	bne.n	800430c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d016      	beq.n	800430c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f8:	f043 0220 	orr.w	r2, r3, #32
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e007      	b.n	800431c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b04      	cmp	r3, #4
 8004318:	d1c3      	bne.n	80042a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004330:	e049      	b.n	80043c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	2b10      	cmp	r3, #16
 800433e:	d119      	bne.n	8004374 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0210 	mvn.w	r2, #16
 8004348:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e030      	b.n	80043d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004374:	f7fe f924 	bl	80025c0 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	429a      	cmp	r2, r3
 8004382:	d302      	bcc.n	800438a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d11d      	bne.n	80043c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004394:	2b40      	cmp	r3, #64	@ 0x40
 8004396:	d016      	beq.n	80043c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	f043 0220 	orr.w	r2, r3, #32
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e007      	b.n	80043d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d0:	2b40      	cmp	r3, #64	@ 0x40
 80043d2:	d1ae      	bne.n	8004332 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f4:	d11b      	bne.n	800442e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441a:	f043 0204 	orr.w	r2, r3, #4
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e267      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d075      	beq.n	8004546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800445a:	4b88      	ldr	r3, [pc, #544]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	2b04      	cmp	r3, #4
 8004464:	d00c      	beq.n	8004480 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004466:	4b85      	ldr	r3, [pc, #532]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800446e:	2b08      	cmp	r3, #8
 8004470:	d112      	bne.n	8004498 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004472:	4b82      	ldr	r3, [pc, #520]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800447a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800447e:	d10b      	bne.n	8004498 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004480:	4b7e      	ldr	r3, [pc, #504]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d05b      	beq.n	8004544 <HAL_RCC_OscConfig+0x108>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d157      	bne.n	8004544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e242      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a0:	d106      	bne.n	80044b0 <HAL_RCC_OscConfig+0x74>
 80044a2:	4b76      	ldr	r3, [pc, #472]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a75      	ldr	r2, [pc, #468]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	e01d      	b.n	80044ec <HAL_RCC_OscConfig+0xb0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCC_OscConfig+0x98>
 80044ba:	4b70      	ldr	r3, [pc, #448]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a6f      	ldr	r2, [pc, #444]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	4b6d      	ldr	r3, [pc, #436]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a6c      	ldr	r2, [pc, #432]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	e00b      	b.n	80044ec <HAL_RCC_OscConfig+0xb0>
 80044d4:	4b69      	ldr	r3, [pc, #420]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a68      	ldr	r2, [pc, #416]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4b66      	ldr	r3, [pc, #408]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a65      	ldr	r2, [pc, #404]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d013      	beq.n	800451c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f4:	f7fe f864 	bl	80025c0 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fc:	f7fe f860 	bl	80025c0 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	@ 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e207      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450e:	4b5b      	ldr	r3, [pc, #364]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0xc0>
 800451a:	e014      	b.n	8004546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451c:	f7fe f850 	bl	80025c0 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004524:	f7fe f84c 	bl	80025c0 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	@ 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e1f3      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004536:	4b51      	ldr	r3, [pc, #324]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0xe8>
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d063      	beq.n	800461a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004552:	4b4a      	ldr	r3, [pc, #296]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 030c 	and.w	r3, r3, #12
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800455e:	4b47      	ldr	r3, [pc, #284]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004566:	2b08      	cmp	r3, #8
 8004568:	d11c      	bne.n	80045a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800456a:	4b44      	ldr	r3, [pc, #272]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d116      	bne.n	80045a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004576:	4b41      	ldr	r3, [pc, #260]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <HAL_RCC_OscConfig+0x152>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d001      	beq.n	800458e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e1c7      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458e:	4b3b      	ldr	r3, [pc, #236]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4937      	ldr	r1, [pc, #220]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a2:	e03a      	b.n	800461a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d020      	beq.n	80045ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ac:	4b34      	ldr	r3, [pc, #208]	@ (8004680 <HAL_RCC_OscConfig+0x244>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b2:	f7fe f805 	bl	80025c0 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b8:	e008      	b.n	80045cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ba:	f7fe f801 	bl	80025c0 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e1a8      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045cc:	4b2b      	ldr	r3, [pc, #172]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0f0      	beq.n	80045ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d8:	4b28      	ldr	r3, [pc, #160]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4925      	ldr	r1, [pc, #148]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	600b      	str	r3, [r1, #0]
 80045ec:	e015      	b.n	800461a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ee:	4b24      	ldr	r3, [pc, #144]	@ (8004680 <HAL_RCC_OscConfig+0x244>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fd ffe4 	bl	80025c0 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fc:	f7fd ffe0 	bl	80025c0 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e187      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460e:	4b1b      	ldr	r3, [pc, #108]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d036      	beq.n	8004694 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d016      	beq.n	800465c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800462e:	4b15      	ldr	r3, [pc, #84]	@ (8004684 <HAL_RCC_OscConfig+0x248>)
 8004630:	2201      	movs	r2, #1
 8004632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004634:	f7fd ffc4 	bl	80025c0 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800463c:	f7fd ffc0 	bl	80025c0 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e167      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800464e:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f0      	beq.n	800463c <HAL_RCC_OscConfig+0x200>
 800465a:	e01b      	b.n	8004694 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800465c:	4b09      	ldr	r3, [pc, #36]	@ (8004684 <HAL_RCC_OscConfig+0x248>)
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004662:	f7fd ffad 	bl	80025c0 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004668:	e00e      	b.n	8004688 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800466a:	f7fd ffa9 	bl	80025c0 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d907      	bls.n	8004688 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e150      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
 800467c:	40023800 	.word	0x40023800
 8004680:	42470000 	.word	0x42470000
 8004684:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004688:	4b88      	ldr	r3, [pc, #544]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 800468a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1ea      	bne.n	800466a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8097 	beq.w	80047d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a2:	2300      	movs	r3, #0
 80046a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a6:	4b81      	ldr	r3, [pc, #516]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10f      	bne.n	80046d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	4b7d      	ldr	r3, [pc, #500]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ba:	4a7c      	ldr	r2, [pc, #496]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 80046bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046c2:	4b7a      	ldr	r3, [pc, #488]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ca:	60bb      	str	r3, [r7, #8]
 80046cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ce:	2301      	movs	r3, #1
 80046d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d2:	4b77      	ldr	r3, [pc, #476]	@ (80048b0 <HAL_RCC_OscConfig+0x474>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d118      	bne.n	8004710 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046de:	4b74      	ldr	r3, [pc, #464]	@ (80048b0 <HAL_RCC_OscConfig+0x474>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a73      	ldr	r2, [pc, #460]	@ (80048b0 <HAL_RCC_OscConfig+0x474>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ea:	f7fd ff69 	bl	80025c0 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f2:	f7fd ff65 	bl	80025c0 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e10c      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004704:	4b6a      	ldr	r3, [pc, #424]	@ (80048b0 <HAL_RCC_OscConfig+0x474>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d106      	bne.n	8004726 <HAL_RCC_OscConfig+0x2ea>
 8004718:	4b64      	ldr	r3, [pc, #400]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471c:	4a63      	ldr	r2, [pc, #396]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 800471e:	f043 0301 	orr.w	r3, r3, #1
 8004722:	6713      	str	r3, [r2, #112]	@ 0x70
 8004724:	e01c      	b.n	8004760 <HAL_RCC_OscConfig+0x324>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b05      	cmp	r3, #5
 800472c:	d10c      	bne.n	8004748 <HAL_RCC_OscConfig+0x30c>
 800472e:	4b5f      	ldr	r3, [pc, #380]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004732:	4a5e      	ldr	r2, [pc, #376]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004734:	f043 0304 	orr.w	r3, r3, #4
 8004738:	6713      	str	r3, [r2, #112]	@ 0x70
 800473a:	4b5c      	ldr	r3, [pc, #368]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 800473c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473e:	4a5b      	ldr	r2, [pc, #364]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	6713      	str	r3, [r2, #112]	@ 0x70
 8004746:	e00b      	b.n	8004760 <HAL_RCC_OscConfig+0x324>
 8004748:	4b58      	ldr	r3, [pc, #352]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474c:	4a57      	ldr	r2, [pc, #348]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 800474e:	f023 0301 	bic.w	r3, r3, #1
 8004752:	6713      	str	r3, [r2, #112]	@ 0x70
 8004754:	4b55      	ldr	r3, [pc, #340]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004758:	4a54      	ldr	r2, [pc, #336]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 800475a:	f023 0304 	bic.w	r3, r3, #4
 800475e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d015      	beq.n	8004794 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004768:	f7fd ff2a 	bl	80025c0 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476e:	e00a      	b.n	8004786 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004770:	f7fd ff26 	bl	80025c0 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800477e:	4293      	cmp	r3, r2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e0cb      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004786:	4b49      	ldr	r3, [pc, #292]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0ee      	beq.n	8004770 <HAL_RCC_OscConfig+0x334>
 8004792:	e014      	b.n	80047be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004794:	f7fd ff14 	bl	80025c0 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800479a:	e00a      	b.n	80047b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479c:	f7fd ff10 	bl	80025c0 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e0b5      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b2:	4b3e      	ldr	r3, [pc, #248]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1ee      	bne.n	800479c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047be:	7dfb      	ldrb	r3, [r7, #23]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d105      	bne.n	80047d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c4:	4b39      	ldr	r3, [pc, #228]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 80047c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c8:	4a38      	ldr	r2, [pc, #224]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 80047ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80a1 	beq.w	800491c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047da:	4b34      	ldr	r3, [pc, #208]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d05c      	beq.n	80048a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d141      	bne.n	8004872 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ee:	4b31      	ldr	r3, [pc, #196]	@ (80048b4 <HAL_RCC_OscConfig+0x478>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f4:	f7fd fee4 	bl	80025c0 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fc:	f7fd fee0 	bl	80025c0 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e087      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480e:	4b27      	ldr	r3, [pc, #156]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69da      	ldr	r2, [r3, #28]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	019b      	lsls	r3, r3, #6
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	3b01      	subs	r3, #1
 8004834:	041b      	lsls	r3, r3, #16
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483c:	061b      	lsls	r3, r3, #24
 800483e:	491b      	ldr	r1, [pc, #108]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004844:	4b1b      	ldr	r3, [pc, #108]	@ (80048b4 <HAL_RCC_OscConfig+0x478>)
 8004846:	2201      	movs	r2, #1
 8004848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484a:	f7fd feb9 	bl	80025c0 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004852:	f7fd feb5 	bl	80025c0 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e05c      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004864:	4b11      	ldr	r3, [pc, #68]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x416>
 8004870:	e054      	b.n	800491c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004872:	4b10      	ldr	r3, [pc, #64]	@ (80048b4 <HAL_RCC_OscConfig+0x478>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004878:	f7fd fea2 	bl	80025c0 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004880:	f7fd fe9e 	bl	80025c0 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e045      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004892:	4b06      	ldr	r3, [pc, #24]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x444>
 800489e:	e03d      	b.n	800491c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d107      	bne.n	80048b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e038      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
 80048ac:	40023800 	.word	0x40023800
 80048b0:	40007000 	.word	0x40007000
 80048b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004928 <HAL_RCC_OscConfig+0x4ec>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d028      	beq.n	8004918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d121      	bne.n	8004918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048de:	429a      	cmp	r2, r3
 80048e0:	d11a      	bne.n	8004918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048e8:	4013      	ands	r3, r2
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d111      	bne.n	8004918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fe:	085b      	lsrs	r3, r3, #1
 8004900:	3b01      	subs	r3, #1
 8004902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004904:	429a      	cmp	r2, r3
 8004906:	d107      	bne.n	8004918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004914:	429a      	cmp	r2, r3
 8004916:	d001      	beq.n	800491c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40023800 	.word	0x40023800

0800492c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e0cc      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004940:	4b68      	ldr	r3, [pc, #416]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d90c      	bls.n	8004968 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494e:	4b65      	ldr	r3, [pc, #404]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004956:	4b63      	ldr	r3, [pc, #396]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d001      	beq.n	8004968 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0b8      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d020      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004980:	4b59      	ldr	r3, [pc, #356]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	4a58      	ldr	r2, [pc, #352]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800498a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004998:	4b53      	ldr	r3, [pc, #332]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	4a52      	ldr	r2, [pc, #328]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a4:	4b50      	ldr	r3, [pc, #320]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	494d      	ldr	r1, [pc, #308]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d044      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ca:	4b47      	ldr	r3, [pc, #284]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d119      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e07f      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d003      	beq.n	80049ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d107      	bne.n	80049fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ea:	4b3f      	ldr	r3, [pc, #252]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d109      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e06f      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049fa:	4b3b      	ldr	r3, [pc, #236]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e067      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a0a:	4b37      	ldr	r3, [pc, #220]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f023 0203 	bic.w	r2, r3, #3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	4934      	ldr	r1, [pc, #208]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a1c:	f7fd fdd0 	bl	80025c0 <HAL_GetTick>
 8004a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a22:	e00a      	b.n	8004a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a24:	f7fd fdcc 	bl	80025c0 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e04f      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 020c 	and.w	r2, r3, #12
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d1eb      	bne.n	8004a24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a4c:	4b25      	ldr	r3, [pc, #148]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d20c      	bcs.n	8004a74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5a:	4b22      	ldr	r3, [pc, #136]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a62:	4b20      	ldr	r3, [pc, #128]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d001      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e032      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a80:	4b19      	ldr	r3, [pc, #100]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	4916      	ldr	r1, [pc, #88]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a9e:	4b12      	ldr	r3, [pc, #72]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	490e      	ldr	r1, [pc, #56]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ab2:	f000 f821 	bl	8004af8 <HAL_RCC_GetSysClockFreq>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	091b      	lsrs	r3, r3, #4
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	490a      	ldr	r1, [pc, #40]	@ (8004aec <HAL_RCC_ClockConfig+0x1c0>)
 8004ac4:	5ccb      	ldrb	r3, [r1, r3]
 8004ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aca:	4a09      	ldr	r2, [pc, #36]	@ (8004af0 <HAL_RCC_ClockConfig+0x1c4>)
 8004acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004ace:	4b09      	ldr	r3, [pc, #36]	@ (8004af4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fd fd30 	bl	8002538 <HAL_InitTick>

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023c00 	.word	0x40023c00
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	0800834c 	.word	0x0800834c
 8004af0:	20000000 	.word	0x20000000
 8004af4:	20000004 	.word	0x20000004

08004af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004afc:	b090      	sub	sp, #64	@ 0x40
 8004afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b10:	4b59      	ldr	r3, [pc, #356]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 030c 	and.w	r3, r3, #12
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d00d      	beq.n	8004b38 <HAL_RCC_GetSysClockFreq+0x40>
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	f200 80a1 	bhi.w	8004c64 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_RCC_GetSysClockFreq+0x34>
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d003      	beq.n	8004b32 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b2a:	e09b      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b2c:	4b53      	ldr	r3, [pc, #332]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x184>)
 8004b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b30:	e09b      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b32:	4b53      	ldr	r3, [pc, #332]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b36:	e098      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b38:	4b4f      	ldr	r3, [pc, #316]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b42:	4b4d      	ldr	r3, [pc, #308]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d028      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	099b      	lsrs	r3, r3, #6
 8004b54:	2200      	movs	r2, #0
 8004b56:	623b      	str	r3, [r7, #32]
 8004b58:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b60:	2100      	movs	r1, #0
 8004b62:	4b47      	ldr	r3, [pc, #284]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b64:	fb03 f201 	mul.w	r2, r3, r1
 8004b68:	2300      	movs	r3, #0
 8004b6a:	fb00 f303 	mul.w	r3, r0, r3
 8004b6e:	4413      	add	r3, r2
 8004b70:	4a43      	ldr	r2, [pc, #268]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b72:	fba0 1202 	umull	r1, r2, r0, r2
 8004b76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b78:	460a      	mov	r2, r1
 8004b7a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b7e:	4413      	add	r3, r2
 8004b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b84:	2200      	movs	r2, #0
 8004b86:	61bb      	str	r3, [r7, #24]
 8004b88:	61fa      	str	r2, [r7, #28]
 8004b8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004b92:	f7fc f811 	bl	8000bb8 <__aeabi_uldivmod>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b9e:	e053      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba0:	4b35      	ldr	r3, [pc, #212]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	099b      	lsrs	r3, r3, #6
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	617a      	str	r2, [r7, #20]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004bb2:	f04f 0b00 	mov.w	fp, #0
 8004bb6:	4652      	mov	r2, sl
 8004bb8:	465b      	mov	r3, fp
 8004bba:	f04f 0000 	mov.w	r0, #0
 8004bbe:	f04f 0100 	mov.w	r1, #0
 8004bc2:	0159      	lsls	r1, r3, #5
 8004bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bc8:	0150      	lsls	r0, r2, #5
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	ebb2 080a 	subs.w	r8, r2, sl
 8004bd2:	eb63 090b 	sbc.w	r9, r3, fp
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004be2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004be6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004bea:	ebb2 0408 	subs.w	r4, r2, r8
 8004bee:	eb63 0509 	sbc.w	r5, r3, r9
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	00eb      	lsls	r3, r5, #3
 8004bfc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c00:	00e2      	lsls	r2, r4, #3
 8004c02:	4614      	mov	r4, r2
 8004c04:	461d      	mov	r5, r3
 8004c06:	eb14 030a 	adds.w	r3, r4, sl
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	eb45 030b 	adc.w	r3, r5, fp
 8004c10:	607b      	str	r3, [r7, #4]
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c1e:	4629      	mov	r1, r5
 8004c20:	028b      	lsls	r3, r1, #10
 8004c22:	4621      	mov	r1, r4
 8004c24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c28:	4621      	mov	r1, r4
 8004c2a:	028a      	lsls	r2, r1, #10
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c32:	2200      	movs	r2, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	60fa      	str	r2, [r7, #12]
 8004c38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c3c:	f7fb ffbc 	bl	8000bb8 <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4613      	mov	r3, r2
 8004c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c48:	4b0b      	ldr	r3, [pc, #44]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	0c1b      	lsrs	r3, r3, #16
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	3301      	adds	r3, #1
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004c58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c62:	e002      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c64:	4b05      	ldr	r3, [pc, #20]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x184>)
 8004c66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3740      	adds	r7, #64	@ 0x40
 8004c70:	46bd      	mov	sp, r7
 8004c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	00f42400 	.word	0x00f42400
 8004c80:	017d7840 	.word	0x017d7840

08004c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c88:	4b03      	ldr	r3, [pc, #12]	@ (8004c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	20000000 	.word	0x20000000

08004c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ca0:	f7ff fff0 	bl	8004c84 <HAL_RCC_GetHCLKFreq>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	4b05      	ldr	r3, [pc, #20]	@ (8004cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	0a9b      	lsrs	r3, r3, #10
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	4903      	ldr	r1, [pc, #12]	@ (8004cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cb2:	5ccb      	ldrb	r3, [r1, r3]
 8004cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	0800835c 	.word	0x0800835c

08004cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cc8:	f7ff ffdc 	bl	8004c84 <HAL_RCC_GetHCLKFreq>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	4b05      	ldr	r3, [pc, #20]	@ (8004ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	0b5b      	lsrs	r3, r3, #13
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	4903      	ldr	r1, [pc, #12]	@ (8004ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cda:	5ccb      	ldrb	r3, [r1, r3]
 8004cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	0800835c 	.word	0x0800835c

08004cec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e042      	b.n	8004d84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d106      	bne.n	8004d18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fd f888 	bl	8001e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2224      	movs	r2, #36	@ 0x24
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f973 	bl	800501c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695a      	ldr	r2, [r3, #20]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08a      	sub	sp, #40	@ 0x28
 8004d90:	af02      	add	r7, sp, #8
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d175      	bne.n	8004e98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <HAL_UART_Transmit+0x2c>
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e06e      	b.n	8004e9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2221      	movs	r2, #33	@ 0x21
 8004dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dca:	f7fd fbf9 	bl	80025c0 <HAL_GetTick>
 8004dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	88fa      	ldrh	r2, [r7, #6]
 8004dd4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	88fa      	ldrh	r2, [r7, #6]
 8004dda:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de4:	d108      	bne.n	8004df8 <HAL_UART_Transmit+0x6c>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d104      	bne.n	8004df8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	e003      	b.n	8004e00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e00:	e02e      	b.n	8004e60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2180      	movs	r1, #128	@ 0x80
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 f848 	bl	8004ea2 <UART_WaitOnFlagUntilTimeout>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e03a      	b.n	8004e9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10b      	bne.n	8004e42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	3302      	adds	r3, #2
 8004e3e:	61bb      	str	r3, [r7, #24]
 8004e40:	e007      	b.n	8004e52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	781a      	ldrb	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1cb      	bne.n	8004e02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2200      	movs	r2, #0
 8004e72:	2140      	movs	r1, #64	@ 0x40
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f814 	bl	8004ea2 <UART_WaitOnFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d005      	beq.n	8004e8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e006      	b.n	8004e9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	e000      	b.n	8004e9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e98:	2302      	movs	r3, #2
  }
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3720      	adds	r7, #32
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b086      	sub	sp, #24
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	603b      	str	r3, [r7, #0]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb2:	e03b      	b.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004eba:	d037      	beq.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ebc:	f7fd fb80 	bl	80025c0 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	6a3a      	ldr	r2, [r7, #32]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d302      	bcc.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e03a      	b.n	8004f4c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d023      	beq.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b80      	cmp	r3, #128	@ 0x80
 8004ee8:	d020      	beq.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2b40      	cmp	r3, #64	@ 0x40
 8004eee:	d01d      	beq.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d116      	bne.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f81d 	bl	8004f54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e00f      	b.n	8004f4c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	4013      	ands	r3, r2
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	bf0c      	ite	eq
 8004f3c:	2301      	moveq	r3, #1
 8004f3e:	2300      	movne	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d0b4      	beq.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b095      	sub	sp, #84	@ 0x54
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	330c      	adds	r3, #12
 8004f62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	330c      	adds	r3, #12
 8004f7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f7c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e5      	bne.n	8004f5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3314      	adds	r3, #20
 8004f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3314      	adds	r3, #20
 8004fae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e5      	bne.n	8004f90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d119      	bne.n	8005000 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f023 0310 	bic.w	r3, r3, #16
 8004fe2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	330c      	adds	r3, #12
 8004fea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fec:	61ba      	str	r2, [r7, #24]
 8004fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6979      	ldr	r1, [r7, #20]
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e5      	bne.n	8004fcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800500e:	bf00      	nop
 8005010:	3754      	adds	r7, #84	@ 0x54
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800501c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005020:	b0c0      	sub	sp, #256	@ 0x100
 8005022:	af00      	add	r7, sp, #0
 8005024:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005038:	68d9      	ldr	r1, [r3, #12]
 800503a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	ea40 0301 	orr.w	r3, r0, r1
 8005044:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	431a      	orrs	r2, r3
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	431a      	orrs	r2, r3
 800505c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005074:	f021 010c 	bic.w	r1, r1, #12
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005082:	430b      	orrs	r3, r1
 8005084:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005096:	6999      	ldr	r1, [r3, #24]
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	ea40 0301 	orr.w	r3, r0, r1
 80050a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	4b8f      	ldr	r3, [pc, #572]	@ (80052e8 <UART_SetConfig+0x2cc>)
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d005      	beq.n	80050bc <UART_SetConfig+0xa0>
 80050b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b8d      	ldr	r3, [pc, #564]	@ (80052ec <UART_SetConfig+0x2d0>)
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d104      	bne.n	80050c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050bc:	f7ff fe02 	bl	8004cc4 <HAL_RCC_GetPCLK2Freq>
 80050c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80050c4:	e003      	b.n	80050ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050c6:	f7ff fde9 	bl	8004c9c <HAL_RCC_GetPCLK1Freq>
 80050ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050d8:	f040 810c 	bne.w	80052f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050e0:	2200      	movs	r2, #0
 80050e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050ee:	4622      	mov	r2, r4
 80050f0:	462b      	mov	r3, r5
 80050f2:	1891      	adds	r1, r2, r2
 80050f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050f6:	415b      	adcs	r3, r3
 80050f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050fe:	4621      	mov	r1, r4
 8005100:	eb12 0801 	adds.w	r8, r2, r1
 8005104:	4629      	mov	r1, r5
 8005106:	eb43 0901 	adc.w	r9, r3, r1
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800511a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800511e:	4690      	mov	r8, r2
 8005120:	4699      	mov	r9, r3
 8005122:	4623      	mov	r3, r4
 8005124:	eb18 0303 	adds.w	r3, r8, r3
 8005128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800512c:	462b      	mov	r3, r5
 800512e:	eb49 0303 	adc.w	r3, r9, r3
 8005132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005142:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005146:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800514a:	460b      	mov	r3, r1
 800514c:	18db      	adds	r3, r3, r3
 800514e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005150:	4613      	mov	r3, r2
 8005152:	eb42 0303 	adc.w	r3, r2, r3
 8005156:	657b      	str	r3, [r7, #84]	@ 0x54
 8005158:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800515c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005160:	f7fb fd2a 	bl	8000bb8 <__aeabi_uldivmod>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4b61      	ldr	r3, [pc, #388]	@ (80052f0 <UART_SetConfig+0x2d4>)
 800516a:	fba3 2302 	umull	r2, r3, r3, r2
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	011c      	lsls	r4, r3, #4
 8005172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005176:	2200      	movs	r2, #0
 8005178:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800517c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005180:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005184:	4642      	mov	r2, r8
 8005186:	464b      	mov	r3, r9
 8005188:	1891      	adds	r1, r2, r2
 800518a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800518c:	415b      	adcs	r3, r3
 800518e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005190:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005194:	4641      	mov	r1, r8
 8005196:	eb12 0a01 	adds.w	sl, r2, r1
 800519a:	4649      	mov	r1, r9
 800519c:	eb43 0b01 	adc.w	fp, r3, r1
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051b4:	4692      	mov	sl, r2
 80051b6:	469b      	mov	fp, r3
 80051b8:	4643      	mov	r3, r8
 80051ba:	eb1a 0303 	adds.w	r3, sl, r3
 80051be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051c2:	464b      	mov	r3, r9
 80051c4:	eb4b 0303 	adc.w	r3, fp, r3
 80051c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051e0:	460b      	mov	r3, r1
 80051e2:	18db      	adds	r3, r3, r3
 80051e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80051e6:	4613      	mov	r3, r2
 80051e8:	eb42 0303 	adc.w	r3, r2, r3
 80051ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80051ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051f6:	f7fb fcdf 	bl	8000bb8 <__aeabi_uldivmod>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4611      	mov	r1, r2
 8005200:	4b3b      	ldr	r3, [pc, #236]	@ (80052f0 <UART_SetConfig+0x2d4>)
 8005202:	fba3 2301 	umull	r2, r3, r3, r1
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	2264      	movs	r2, #100	@ 0x64
 800520a:	fb02 f303 	mul.w	r3, r2, r3
 800520e:	1acb      	subs	r3, r1, r3
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005216:	4b36      	ldr	r3, [pc, #216]	@ (80052f0 <UART_SetConfig+0x2d4>)
 8005218:	fba3 2302 	umull	r2, r3, r3, r2
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005224:	441c      	add	r4, r3
 8005226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800522a:	2200      	movs	r2, #0
 800522c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005230:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005234:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005238:	4642      	mov	r2, r8
 800523a:	464b      	mov	r3, r9
 800523c:	1891      	adds	r1, r2, r2
 800523e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005240:	415b      	adcs	r3, r3
 8005242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005244:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005248:	4641      	mov	r1, r8
 800524a:	1851      	adds	r1, r2, r1
 800524c:	6339      	str	r1, [r7, #48]	@ 0x30
 800524e:	4649      	mov	r1, r9
 8005250:	414b      	adcs	r3, r1
 8005252:	637b      	str	r3, [r7, #52]	@ 0x34
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	f04f 0300 	mov.w	r3, #0
 800525c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005260:	4659      	mov	r1, fp
 8005262:	00cb      	lsls	r3, r1, #3
 8005264:	4651      	mov	r1, sl
 8005266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800526a:	4651      	mov	r1, sl
 800526c:	00ca      	lsls	r2, r1, #3
 800526e:	4610      	mov	r0, r2
 8005270:	4619      	mov	r1, r3
 8005272:	4603      	mov	r3, r0
 8005274:	4642      	mov	r2, r8
 8005276:	189b      	adds	r3, r3, r2
 8005278:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800527c:	464b      	mov	r3, r9
 800527e:	460a      	mov	r2, r1
 8005280:	eb42 0303 	adc.w	r3, r2, r3
 8005284:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005294:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005298:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800529c:	460b      	mov	r3, r1
 800529e:	18db      	adds	r3, r3, r3
 80052a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052a2:	4613      	mov	r3, r2
 80052a4:	eb42 0303 	adc.w	r3, r2, r3
 80052a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80052b2:	f7fb fc81 	bl	8000bb8 <__aeabi_uldivmod>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4b0d      	ldr	r3, [pc, #52]	@ (80052f0 <UART_SetConfig+0x2d4>)
 80052bc:	fba3 1302 	umull	r1, r3, r3, r2
 80052c0:	095b      	lsrs	r3, r3, #5
 80052c2:	2164      	movs	r1, #100	@ 0x64
 80052c4:	fb01 f303 	mul.w	r3, r1, r3
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	3332      	adds	r3, #50	@ 0x32
 80052ce:	4a08      	ldr	r2, [pc, #32]	@ (80052f0 <UART_SetConfig+0x2d4>)
 80052d0:	fba2 2303 	umull	r2, r3, r2, r3
 80052d4:	095b      	lsrs	r3, r3, #5
 80052d6:	f003 0207 	and.w	r2, r3, #7
 80052da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4422      	add	r2, r4
 80052e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052e4:	e106      	b.n	80054f4 <UART_SetConfig+0x4d8>
 80052e6:	bf00      	nop
 80052e8:	40011000 	.word	0x40011000
 80052ec:	40011400 	.word	0x40011400
 80052f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052f8:	2200      	movs	r2, #0
 80052fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005302:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005306:	4642      	mov	r2, r8
 8005308:	464b      	mov	r3, r9
 800530a:	1891      	adds	r1, r2, r2
 800530c:	6239      	str	r1, [r7, #32]
 800530e:	415b      	adcs	r3, r3
 8005310:	627b      	str	r3, [r7, #36]	@ 0x24
 8005312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005316:	4641      	mov	r1, r8
 8005318:	1854      	adds	r4, r2, r1
 800531a:	4649      	mov	r1, r9
 800531c:	eb43 0501 	adc.w	r5, r3, r1
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	00eb      	lsls	r3, r5, #3
 800532a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800532e:	00e2      	lsls	r2, r4, #3
 8005330:	4614      	mov	r4, r2
 8005332:	461d      	mov	r5, r3
 8005334:	4643      	mov	r3, r8
 8005336:	18e3      	adds	r3, r4, r3
 8005338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800533c:	464b      	mov	r3, r9
 800533e:	eb45 0303 	adc.w	r3, r5, r3
 8005342:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005352:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005362:	4629      	mov	r1, r5
 8005364:	008b      	lsls	r3, r1, #2
 8005366:	4621      	mov	r1, r4
 8005368:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800536c:	4621      	mov	r1, r4
 800536e:	008a      	lsls	r2, r1, #2
 8005370:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005374:	f7fb fc20 	bl	8000bb8 <__aeabi_uldivmod>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4b60      	ldr	r3, [pc, #384]	@ (8005500 <UART_SetConfig+0x4e4>)
 800537e:	fba3 2302 	umull	r2, r3, r3, r2
 8005382:	095b      	lsrs	r3, r3, #5
 8005384:	011c      	lsls	r4, r3, #4
 8005386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800538a:	2200      	movs	r2, #0
 800538c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005390:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005394:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005398:	4642      	mov	r2, r8
 800539a:	464b      	mov	r3, r9
 800539c:	1891      	adds	r1, r2, r2
 800539e:	61b9      	str	r1, [r7, #24]
 80053a0:	415b      	adcs	r3, r3
 80053a2:	61fb      	str	r3, [r7, #28]
 80053a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053a8:	4641      	mov	r1, r8
 80053aa:	1851      	adds	r1, r2, r1
 80053ac:	6139      	str	r1, [r7, #16]
 80053ae:	4649      	mov	r1, r9
 80053b0:	414b      	adcs	r3, r1
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053c0:	4659      	mov	r1, fp
 80053c2:	00cb      	lsls	r3, r1, #3
 80053c4:	4651      	mov	r1, sl
 80053c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ca:	4651      	mov	r1, sl
 80053cc:	00ca      	lsls	r2, r1, #3
 80053ce:	4610      	mov	r0, r2
 80053d0:	4619      	mov	r1, r3
 80053d2:	4603      	mov	r3, r0
 80053d4:	4642      	mov	r2, r8
 80053d6:	189b      	adds	r3, r3, r2
 80053d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053dc:	464b      	mov	r3, r9
 80053de:	460a      	mov	r2, r1
 80053e0:	eb42 0303 	adc.w	r3, r2, r3
 80053e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005400:	4649      	mov	r1, r9
 8005402:	008b      	lsls	r3, r1, #2
 8005404:	4641      	mov	r1, r8
 8005406:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800540a:	4641      	mov	r1, r8
 800540c:	008a      	lsls	r2, r1, #2
 800540e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005412:	f7fb fbd1 	bl	8000bb8 <__aeabi_uldivmod>
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	4611      	mov	r1, r2
 800541c:	4b38      	ldr	r3, [pc, #224]	@ (8005500 <UART_SetConfig+0x4e4>)
 800541e:	fba3 2301 	umull	r2, r3, r3, r1
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	2264      	movs	r2, #100	@ 0x64
 8005426:	fb02 f303 	mul.w	r3, r2, r3
 800542a:	1acb      	subs	r3, r1, r3
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	3332      	adds	r3, #50	@ 0x32
 8005430:	4a33      	ldr	r2, [pc, #204]	@ (8005500 <UART_SetConfig+0x4e4>)
 8005432:	fba2 2303 	umull	r2, r3, r2, r3
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800543c:	441c      	add	r4, r3
 800543e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005442:	2200      	movs	r2, #0
 8005444:	673b      	str	r3, [r7, #112]	@ 0x70
 8005446:	677a      	str	r2, [r7, #116]	@ 0x74
 8005448:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800544c:	4642      	mov	r2, r8
 800544e:	464b      	mov	r3, r9
 8005450:	1891      	adds	r1, r2, r2
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	415b      	adcs	r3, r3
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800545c:	4641      	mov	r1, r8
 800545e:	1851      	adds	r1, r2, r1
 8005460:	6039      	str	r1, [r7, #0]
 8005462:	4649      	mov	r1, r9
 8005464:	414b      	adcs	r3, r1
 8005466:	607b      	str	r3, [r7, #4]
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005474:	4659      	mov	r1, fp
 8005476:	00cb      	lsls	r3, r1, #3
 8005478:	4651      	mov	r1, sl
 800547a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800547e:	4651      	mov	r1, sl
 8005480:	00ca      	lsls	r2, r1, #3
 8005482:	4610      	mov	r0, r2
 8005484:	4619      	mov	r1, r3
 8005486:	4603      	mov	r3, r0
 8005488:	4642      	mov	r2, r8
 800548a:	189b      	adds	r3, r3, r2
 800548c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800548e:	464b      	mov	r3, r9
 8005490:	460a      	mov	r2, r1
 8005492:	eb42 0303 	adc.w	r3, r2, r3
 8005496:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80054a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80054b0:	4649      	mov	r1, r9
 80054b2:	008b      	lsls	r3, r1, #2
 80054b4:	4641      	mov	r1, r8
 80054b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054ba:	4641      	mov	r1, r8
 80054bc:	008a      	lsls	r2, r1, #2
 80054be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80054c2:	f7fb fb79 	bl	8000bb8 <__aeabi_uldivmod>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005500 <UART_SetConfig+0x4e4>)
 80054cc:	fba3 1302 	umull	r1, r3, r3, r2
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	2164      	movs	r1, #100	@ 0x64
 80054d4:	fb01 f303 	mul.w	r3, r1, r3
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	3332      	adds	r3, #50	@ 0x32
 80054de:	4a08      	ldr	r2, [pc, #32]	@ (8005500 <UART_SetConfig+0x4e4>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	f003 020f 	and.w	r2, r3, #15
 80054ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4422      	add	r2, r4
 80054f2:	609a      	str	r2, [r3, #8]
}
 80054f4:	bf00      	nop
 80054f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054fa:	46bd      	mov	sp, r7
 80054fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005500:	51eb851f 	.word	0x51eb851f

08005504 <__cvt>:
 8005504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005508:	ec57 6b10 	vmov	r6, r7, d0
 800550c:	2f00      	cmp	r7, #0
 800550e:	460c      	mov	r4, r1
 8005510:	4619      	mov	r1, r3
 8005512:	463b      	mov	r3, r7
 8005514:	bfbb      	ittet	lt
 8005516:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800551a:	461f      	movlt	r7, r3
 800551c:	2300      	movge	r3, #0
 800551e:	232d      	movlt	r3, #45	@ 0x2d
 8005520:	700b      	strb	r3, [r1, #0]
 8005522:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005524:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005528:	4691      	mov	r9, r2
 800552a:	f023 0820 	bic.w	r8, r3, #32
 800552e:	bfbc      	itt	lt
 8005530:	4632      	movlt	r2, r6
 8005532:	4616      	movlt	r6, r2
 8005534:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005538:	d005      	beq.n	8005546 <__cvt+0x42>
 800553a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800553e:	d100      	bne.n	8005542 <__cvt+0x3e>
 8005540:	3401      	adds	r4, #1
 8005542:	2102      	movs	r1, #2
 8005544:	e000      	b.n	8005548 <__cvt+0x44>
 8005546:	2103      	movs	r1, #3
 8005548:	ab03      	add	r3, sp, #12
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	ab02      	add	r3, sp, #8
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	ec47 6b10 	vmov	d0, r6, r7
 8005554:	4653      	mov	r3, sl
 8005556:	4622      	mov	r2, r4
 8005558:	f000 fe76 	bl	8006248 <_dtoa_r>
 800555c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005560:	4605      	mov	r5, r0
 8005562:	d119      	bne.n	8005598 <__cvt+0x94>
 8005564:	f019 0f01 	tst.w	r9, #1
 8005568:	d00e      	beq.n	8005588 <__cvt+0x84>
 800556a:	eb00 0904 	add.w	r9, r0, r4
 800556e:	2200      	movs	r2, #0
 8005570:	2300      	movs	r3, #0
 8005572:	4630      	mov	r0, r6
 8005574:	4639      	mov	r1, r7
 8005576:	f7fb faaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800557a:	b108      	cbz	r0, 8005580 <__cvt+0x7c>
 800557c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005580:	2230      	movs	r2, #48	@ 0x30
 8005582:	9b03      	ldr	r3, [sp, #12]
 8005584:	454b      	cmp	r3, r9
 8005586:	d31e      	bcc.n	80055c6 <__cvt+0xc2>
 8005588:	9b03      	ldr	r3, [sp, #12]
 800558a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800558c:	1b5b      	subs	r3, r3, r5
 800558e:	4628      	mov	r0, r5
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	b004      	add	sp, #16
 8005594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005598:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800559c:	eb00 0904 	add.w	r9, r0, r4
 80055a0:	d1e5      	bne.n	800556e <__cvt+0x6a>
 80055a2:	7803      	ldrb	r3, [r0, #0]
 80055a4:	2b30      	cmp	r3, #48	@ 0x30
 80055a6:	d10a      	bne.n	80055be <__cvt+0xba>
 80055a8:	2200      	movs	r2, #0
 80055aa:	2300      	movs	r3, #0
 80055ac:	4630      	mov	r0, r6
 80055ae:	4639      	mov	r1, r7
 80055b0:	f7fb fa92 	bl	8000ad8 <__aeabi_dcmpeq>
 80055b4:	b918      	cbnz	r0, 80055be <__cvt+0xba>
 80055b6:	f1c4 0401 	rsb	r4, r4, #1
 80055ba:	f8ca 4000 	str.w	r4, [sl]
 80055be:	f8da 3000 	ldr.w	r3, [sl]
 80055c2:	4499      	add	r9, r3
 80055c4:	e7d3      	b.n	800556e <__cvt+0x6a>
 80055c6:	1c59      	adds	r1, r3, #1
 80055c8:	9103      	str	r1, [sp, #12]
 80055ca:	701a      	strb	r2, [r3, #0]
 80055cc:	e7d9      	b.n	8005582 <__cvt+0x7e>

080055ce <__exponent>:
 80055ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055d0:	2900      	cmp	r1, #0
 80055d2:	bfba      	itte	lt
 80055d4:	4249      	neglt	r1, r1
 80055d6:	232d      	movlt	r3, #45	@ 0x2d
 80055d8:	232b      	movge	r3, #43	@ 0x2b
 80055da:	2909      	cmp	r1, #9
 80055dc:	7002      	strb	r2, [r0, #0]
 80055de:	7043      	strb	r3, [r0, #1]
 80055e0:	dd29      	ble.n	8005636 <__exponent+0x68>
 80055e2:	f10d 0307 	add.w	r3, sp, #7
 80055e6:	461d      	mov	r5, r3
 80055e8:	270a      	movs	r7, #10
 80055ea:	461a      	mov	r2, r3
 80055ec:	fbb1 f6f7 	udiv	r6, r1, r7
 80055f0:	fb07 1416 	mls	r4, r7, r6, r1
 80055f4:	3430      	adds	r4, #48	@ 0x30
 80055f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80055fa:	460c      	mov	r4, r1
 80055fc:	2c63      	cmp	r4, #99	@ 0x63
 80055fe:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005602:	4631      	mov	r1, r6
 8005604:	dcf1      	bgt.n	80055ea <__exponent+0x1c>
 8005606:	3130      	adds	r1, #48	@ 0x30
 8005608:	1e94      	subs	r4, r2, #2
 800560a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800560e:	1c41      	adds	r1, r0, #1
 8005610:	4623      	mov	r3, r4
 8005612:	42ab      	cmp	r3, r5
 8005614:	d30a      	bcc.n	800562c <__exponent+0x5e>
 8005616:	f10d 0309 	add.w	r3, sp, #9
 800561a:	1a9b      	subs	r3, r3, r2
 800561c:	42ac      	cmp	r4, r5
 800561e:	bf88      	it	hi
 8005620:	2300      	movhi	r3, #0
 8005622:	3302      	adds	r3, #2
 8005624:	4403      	add	r3, r0
 8005626:	1a18      	subs	r0, r3, r0
 8005628:	b003      	add	sp, #12
 800562a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800562c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005630:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005634:	e7ed      	b.n	8005612 <__exponent+0x44>
 8005636:	2330      	movs	r3, #48	@ 0x30
 8005638:	3130      	adds	r1, #48	@ 0x30
 800563a:	7083      	strb	r3, [r0, #2]
 800563c:	70c1      	strb	r1, [r0, #3]
 800563e:	1d03      	adds	r3, r0, #4
 8005640:	e7f1      	b.n	8005626 <__exponent+0x58>
	...

08005644 <_printf_float>:
 8005644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005648:	b08d      	sub	sp, #52	@ 0x34
 800564a:	460c      	mov	r4, r1
 800564c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005650:	4616      	mov	r6, r2
 8005652:	461f      	mov	r7, r3
 8005654:	4605      	mov	r5, r0
 8005656:	f000 fcf5 	bl	8006044 <_localeconv_r>
 800565a:	6803      	ldr	r3, [r0, #0]
 800565c:	9304      	str	r3, [sp, #16]
 800565e:	4618      	mov	r0, r3
 8005660:	f7fa fe0e 	bl	8000280 <strlen>
 8005664:	2300      	movs	r3, #0
 8005666:	930a      	str	r3, [sp, #40]	@ 0x28
 8005668:	f8d8 3000 	ldr.w	r3, [r8]
 800566c:	9005      	str	r0, [sp, #20]
 800566e:	3307      	adds	r3, #7
 8005670:	f023 0307 	bic.w	r3, r3, #7
 8005674:	f103 0208 	add.w	r2, r3, #8
 8005678:	f894 a018 	ldrb.w	sl, [r4, #24]
 800567c:	f8d4 b000 	ldr.w	fp, [r4]
 8005680:	f8c8 2000 	str.w	r2, [r8]
 8005684:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005688:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800568c:	9307      	str	r3, [sp, #28]
 800568e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005692:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800569a:	4b9c      	ldr	r3, [pc, #624]	@ (800590c <_printf_float+0x2c8>)
 800569c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056a0:	f7fb fa4c 	bl	8000b3c <__aeabi_dcmpun>
 80056a4:	bb70      	cbnz	r0, 8005704 <_printf_float+0xc0>
 80056a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056aa:	4b98      	ldr	r3, [pc, #608]	@ (800590c <_printf_float+0x2c8>)
 80056ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056b0:	f7fb fa26 	bl	8000b00 <__aeabi_dcmple>
 80056b4:	bb30      	cbnz	r0, 8005704 <_printf_float+0xc0>
 80056b6:	2200      	movs	r2, #0
 80056b8:	2300      	movs	r3, #0
 80056ba:	4640      	mov	r0, r8
 80056bc:	4649      	mov	r1, r9
 80056be:	f7fb fa15 	bl	8000aec <__aeabi_dcmplt>
 80056c2:	b110      	cbz	r0, 80056ca <_printf_float+0x86>
 80056c4:	232d      	movs	r3, #45	@ 0x2d
 80056c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056ca:	4a91      	ldr	r2, [pc, #580]	@ (8005910 <_printf_float+0x2cc>)
 80056cc:	4b91      	ldr	r3, [pc, #580]	@ (8005914 <_printf_float+0x2d0>)
 80056ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80056d2:	bf8c      	ite	hi
 80056d4:	4690      	movhi	r8, r2
 80056d6:	4698      	movls	r8, r3
 80056d8:	2303      	movs	r3, #3
 80056da:	6123      	str	r3, [r4, #16]
 80056dc:	f02b 0304 	bic.w	r3, fp, #4
 80056e0:	6023      	str	r3, [r4, #0]
 80056e2:	f04f 0900 	mov.w	r9, #0
 80056e6:	9700      	str	r7, [sp, #0]
 80056e8:	4633      	mov	r3, r6
 80056ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80056ec:	4621      	mov	r1, r4
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 f9d2 	bl	8005a98 <_printf_common>
 80056f4:	3001      	adds	r0, #1
 80056f6:	f040 808d 	bne.w	8005814 <_printf_float+0x1d0>
 80056fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056fe:	b00d      	add	sp, #52	@ 0x34
 8005700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005704:	4642      	mov	r2, r8
 8005706:	464b      	mov	r3, r9
 8005708:	4640      	mov	r0, r8
 800570a:	4649      	mov	r1, r9
 800570c:	f7fb fa16 	bl	8000b3c <__aeabi_dcmpun>
 8005710:	b140      	cbz	r0, 8005724 <_printf_float+0xe0>
 8005712:	464b      	mov	r3, r9
 8005714:	2b00      	cmp	r3, #0
 8005716:	bfbc      	itt	lt
 8005718:	232d      	movlt	r3, #45	@ 0x2d
 800571a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800571e:	4a7e      	ldr	r2, [pc, #504]	@ (8005918 <_printf_float+0x2d4>)
 8005720:	4b7e      	ldr	r3, [pc, #504]	@ (800591c <_printf_float+0x2d8>)
 8005722:	e7d4      	b.n	80056ce <_printf_float+0x8a>
 8005724:	6863      	ldr	r3, [r4, #4]
 8005726:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800572a:	9206      	str	r2, [sp, #24]
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	d13b      	bne.n	80057a8 <_printf_float+0x164>
 8005730:	2306      	movs	r3, #6
 8005732:	6063      	str	r3, [r4, #4]
 8005734:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005738:	2300      	movs	r3, #0
 800573a:	6022      	str	r2, [r4, #0]
 800573c:	9303      	str	r3, [sp, #12]
 800573e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005740:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005744:	ab09      	add	r3, sp, #36	@ 0x24
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	6861      	ldr	r1, [r4, #4]
 800574a:	ec49 8b10 	vmov	d0, r8, r9
 800574e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005752:	4628      	mov	r0, r5
 8005754:	f7ff fed6 	bl	8005504 <__cvt>
 8005758:	9b06      	ldr	r3, [sp, #24]
 800575a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800575c:	2b47      	cmp	r3, #71	@ 0x47
 800575e:	4680      	mov	r8, r0
 8005760:	d129      	bne.n	80057b6 <_printf_float+0x172>
 8005762:	1cc8      	adds	r0, r1, #3
 8005764:	db02      	blt.n	800576c <_printf_float+0x128>
 8005766:	6863      	ldr	r3, [r4, #4]
 8005768:	4299      	cmp	r1, r3
 800576a:	dd41      	ble.n	80057f0 <_printf_float+0x1ac>
 800576c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005770:	fa5f fa8a 	uxtb.w	sl, sl
 8005774:	3901      	subs	r1, #1
 8005776:	4652      	mov	r2, sl
 8005778:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800577c:	9109      	str	r1, [sp, #36]	@ 0x24
 800577e:	f7ff ff26 	bl	80055ce <__exponent>
 8005782:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005784:	1813      	adds	r3, r2, r0
 8005786:	2a01      	cmp	r2, #1
 8005788:	4681      	mov	r9, r0
 800578a:	6123      	str	r3, [r4, #16]
 800578c:	dc02      	bgt.n	8005794 <_printf_float+0x150>
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	07d2      	lsls	r2, r2, #31
 8005792:	d501      	bpl.n	8005798 <_printf_float+0x154>
 8005794:	3301      	adds	r3, #1
 8005796:	6123      	str	r3, [r4, #16]
 8005798:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0a2      	beq.n	80056e6 <_printf_float+0xa2>
 80057a0:	232d      	movs	r3, #45	@ 0x2d
 80057a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057a6:	e79e      	b.n	80056e6 <_printf_float+0xa2>
 80057a8:	9a06      	ldr	r2, [sp, #24]
 80057aa:	2a47      	cmp	r2, #71	@ 0x47
 80057ac:	d1c2      	bne.n	8005734 <_printf_float+0xf0>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1c0      	bne.n	8005734 <_printf_float+0xf0>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e7bd      	b.n	8005732 <_printf_float+0xee>
 80057b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80057ba:	d9db      	bls.n	8005774 <_printf_float+0x130>
 80057bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80057c0:	d118      	bne.n	80057f4 <_printf_float+0x1b0>
 80057c2:	2900      	cmp	r1, #0
 80057c4:	6863      	ldr	r3, [r4, #4]
 80057c6:	dd0b      	ble.n	80057e0 <_printf_float+0x19c>
 80057c8:	6121      	str	r1, [r4, #16]
 80057ca:	b913      	cbnz	r3, 80057d2 <_printf_float+0x18e>
 80057cc:	6822      	ldr	r2, [r4, #0]
 80057ce:	07d0      	lsls	r0, r2, #31
 80057d0:	d502      	bpl.n	80057d8 <_printf_float+0x194>
 80057d2:	3301      	adds	r3, #1
 80057d4:	440b      	add	r3, r1
 80057d6:	6123      	str	r3, [r4, #16]
 80057d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80057da:	f04f 0900 	mov.w	r9, #0
 80057de:	e7db      	b.n	8005798 <_printf_float+0x154>
 80057e0:	b913      	cbnz	r3, 80057e8 <_printf_float+0x1a4>
 80057e2:	6822      	ldr	r2, [r4, #0]
 80057e4:	07d2      	lsls	r2, r2, #31
 80057e6:	d501      	bpl.n	80057ec <_printf_float+0x1a8>
 80057e8:	3302      	adds	r3, #2
 80057ea:	e7f4      	b.n	80057d6 <_printf_float+0x192>
 80057ec:	2301      	movs	r3, #1
 80057ee:	e7f2      	b.n	80057d6 <_printf_float+0x192>
 80057f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80057f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057f6:	4299      	cmp	r1, r3
 80057f8:	db05      	blt.n	8005806 <_printf_float+0x1c2>
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	6121      	str	r1, [r4, #16]
 80057fe:	07d8      	lsls	r0, r3, #31
 8005800:	d5ea      	bpl.n	80057d8 <_printf_float+0x194>
 8005802:	1c4b      	adds	r3, r1, #1
 8005804:	e7e7      	b.n	80057d6 <_printf_float+0x192>
 8005806:	2900      	cmp	r1, #0
 8005808:	bfd4      	ite	le
 800580a:	f1c1 0202 	rsble	r2, r1, #2
 800580e:	2201      	movgt	r2, #1
 8005810:	4413      	add	r3, r2
 8005812:	e7e0      	b.n	80057d6 <_printf_float+0x192>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	055a      	lsls	r2, r3, #21
 8005818:	d407      	bmi.n	800582a <_printf_float+0x1e6>
 800581a:	6923      	ldr	r3, [r4, #16]
 800581c:	4642      	mov	r2, r8
 800581e:	4631      	mov	r1, r6
 8005820:	4628      	mov	r0, r5
 8005822:	47b8      	blx	r7
 8005824:	3001      	adds	r0, #1
 8005826:	d12b      	bne.n	8005880 <_printf_float+0x23c>
 8005828:	e767      	b.n	80056fa <_printf_float+0xb6>
 800582a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800582e:	f240 80dd 	bls.w	80059ec <_printf_float+0x3a8>
 8005832:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005836:	2200      	movs	r2, #0
 8005838:	2300      	movs	r3, #0
 800583a:	f7fb f94d 	bl	8000ad8 <__aeabi_dcmpeq>
 800583e:	2800      	cmp	r0, #0
 8005840:	d033      	beq.n	80058aa <_printf_float+0x266>
 8005842:	4a37      	ldr	r2, [pc, #220]	@ (8005920 <_printf_float+0x2dc>)
 8005844:	2301      	movs	r3, #1
 8005846:	4631      	mov	r1, r6
 8005848:	4628      	mov	r0, r5
 800584a:	47b8      	blx	r7
 800584c:	3001      	adds	r0, #1
 800584e:	f43f af54 	beq.w	80056fa <_printf_float+0xb6>
 8005852:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005856:	4543      	cmp	r3, r8
 8005858:	db02      	blt.n	8005860 <_printf_float+0x21c>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	07d8      	lsls	r0, r3, #31
 800585e:	d50f      	bpl.n	8005880 <_printf_float+0x23c>
 8005860:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005864:	4631      	mov	r1, r6
 8005866:	4628      	mov	r0, r5
 8005868:	47b8      	blx	r7
 800586a:	3001      	adds	r0, #1
 800586c:	f43f af45 	beq.w	80056fa <_printf_float+0xb6>
 8005870:	f04f 0900 	mov.w	r9, #0
 8005874:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005878:	f104 0a1a 	add.w	sl, r4, #26
 800587c:	45c8      	cmp	r8, r9
 800587e:	dc09      	bgt.n	8005894 <_printf_float+0x250>
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	079b      	lsls	r3, r3, #30
 8005884:	f100 8103 	bmi.w	8005a8e <_printf_float+0x44a>
 8005888:	68e0      	ldr	r0, [r4, #12]
 800588a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800588c:	4298      	cmp	r0, r3
 800588e:	bfb8      	it	lt
 8005890:	4618      	movlt	r0, r3
 8005892:	e734      	b.n	80056fe <_printf_float+0xba>
 8005894:	2301      	movs	r3, #1
 8005896:	4652      	mov	r2, sl
 8005898:	4631      	mov	r1, r6
 800589a:	4628      	mov	r0, r5
 800589c:	47b8      	blx	r7
 800589e:	3001      	adds	r0, #1
 80058a0:	f43f af2b 	beq.w	80056fa <_printf_float+0xb6>
 80058a4:	f109 0901 	add.w	r9, r9, #1
 80058a8:	e7e8      	b.n	800587c <_printf_float+0x238>
 80058aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	dc39      	bgt.n	8005924 <_printf_float+0x2e0>
 80058b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005920 <_printf_float+0x2dc>)
 80058b2:	2301      	movs	r3, #1
 80058b4:	4631      	mov	r1, r6
 80058b6:	4628      	mov	r0, r5
 80058b8:	47b8      	blx	r7
 80058ba:	3001      	adds	r0, #1
 80058bc:	f43f af1d 	beq.w	80056fa <_printf_float+0xb6>
 80058c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80058c4:	ea59 0303 	orrs.w	r3, r9, r3
 80058c8:	d102      	bne.n	80058d0 <_printf_float+0x28c>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	07d9      	lsls	r1, r3, #31
 80058ce:	d5d7      	bpl.n	8005880 <_printf_float+0x23c>
 80058d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058d4:	4631      	mov	r1, r6
 80058d6:	4628      	mov	r0, r5
 80058d8:	47b8      	blx	r7
 80058da:	3001      	adds	r0, #1
 80058dc:	f43f af0d 	beq.w	80056fa <_printf_float+0xb6>
 80058e0:	f04f 0a00 	mov.w	sl, #0
 80058e4:	f104 0b1a 	add.w	fp, r4, #26
 80058e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058ea:	425b      	negs	r3, r3
 80058ec:	4553      	cmp	r3, sl
 80058ee:	dc01      	bgt.n	80058f4 <_printf_float+0x2b0>
 80058f0:	464b      	mov	r3, r9
 80058f2:	e793      	b.n	800581c <_printf_float+0x1d8>
 80058f4:	2301      	movs	r3, #1
 80058f6:	465a      	mov	r2, fp
 80058f8:	4631      	mov	r1, r6
 80058fa:	4628      	mov	r0, r5
 80058fc:	47b8      	blx	r7
 80058fe:	3001      	adds	r0, #1
 8005900:	f43f aefb 	beq.w	80056fa <_printf_float+0xb6>
 8005904:	f10a 0a01 	add.w	sl, sl, #1
 8005908:	e7ee      	b.n	80058e8 <_printf_float+0x2a4>
 800590a:	bf00      	nop
 800590c:	7fefffff 	.word	0x7fefffff
 8005910:	08008368 	.word	0x08008368
 8005914:	08008364 	.word	0x08008364
 8005918:	08008370 	.word	0x08008370
 800591c:	0800836c 	.word	0x0800836c
 8005920:	08008374 	.word	0x08008374
 8005924:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005926:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800592a:	4553      	cmp	r3, sl
 800592c:	bfa8      	it	ge
 800592e:	4653      	movge	r3, sl
 8005930:	2b00      	cmp	r3, #0
 8005932:	4699      	mov	r9, r3
 8005934:	dc36      	bgt.n	80059a4 <_printf_float+0x360>
 8005936:	f04f 0b00 	mov.w	fp, #0
 800593a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800593e:	f104 021a 	add.w	r2, r4, #26
 8005942:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005944:	9306      	str	r3, [sp, #24]
 8005946:	eba3 0309 	sub.w	r3, r3, r9
 800594a:	455b      	cmp	r3, fp
 800594c:	dc31      	bgt.n	80059b2 <_printf_float+0x36e>
 800594e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005950:	459a      	cmp	sl, r3
 8005952:	dc3a      	bgt.n	80059ca <_printf_float+0x386>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	07da      	lsls	r2, r3, #31
 8005958:	d437      	bmi.n	80059ca <_printf_float+0x386>
 800595a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800595c:	ebaa 0903 	sub.w	r9, sl, r3
 8005960:	9b06      	ldr	r3, [sp, #24]
 8005962:	ebaa 0303 	sub.w	r3, sl, r3
 8005966:	4599      	cmp	r9, r3
 8005968:	bfa8      	it	ge
 800596a:	4699      	movge	r9, r3
 800596c:	f1b9 0f00 	cmp.w	r9, #0
 8005970:	dc33      	bgt.n	80059da <_printf_float+0x396>
 8005972:	f04f 0800 	mov.w	r8, #0
 8005976:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800597a:	f104 0b1a 	add.w	fp, r4, #26
 800597e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005980:	ebaa 0303 	sub.w	r3, sl, r3
 8005984:	eba3 0309 	sub.w	r3, r3, r9
 8005988:	4543      	cmp	r3, r8
 800598a:	f77f af79 	ble.w	8005880 <_printf_float+0x23c>
 800598e:	2301      	movs	r3, #1
 8005990:	465a      	mov	r2, fp
 8005992:	4631      	mov	r1, r6
 8005994:	4628      	mov	r0, r5
 8005996:	47b8      	blx	r7
 8005998:	3001      	adds	r0, #1
 800599a:	f43f aeae 	beq.w	80056fa <_printf_float+0xb6>
 800599e:	f108 0801 	add.w	r8, r8, #1
 80059a2:	e7ec      	b.n	800597e <_printf_float+0x33a>
 80059a4:	4642      	mov	r2, r8
 80059a6:	4631      	mov	r1, r6
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	d1c2      	bne.n	8005936 <_printf_float+0x2f2>
 80059b0:	e6a3      	b.n	80056fa <_printf_float+0xb6>
 80059b2:	2301      	movs	r3, #1
 80059b4:	4631      	mov	r1, r6
 80059b6:	4628      	mov	r0, r5
 80059b8:	9206      	str	r2, [sp, #24]
 80059ba:	47b8      	blx	r7
 80059bc:	3001      	adds	r0, #1
 80059be:	f43f ae9c 	beq.w	80056fa <_printf_float+0xb6>
 80059c2:	9a06      	ldr	r2, [sp, #24]
 80059c4:	f10b 0b01 	add.w	fp, fp, #1
 80059c8:	e7bb      	b.n	8005942 <_printf_float+0x2fe>
 80059ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059ce:	4631      	mov	r1, r6
 80059d0:	4628      	mov	r0, r5
 80059d2:	47b8      	blx	r7
 80059d4:	3001      	adds	r0, #1
 80059d6:	d1c0      	bne.n	800595a <_printf_float+0x316>
 80059d8:	e68f      	b.n	80056fa <_printf_float+0xb6>
 80059da:	9a06      	ldr	r2, [sp, #24]
 80059dc:	464b      	mov	r3, r9
 80059de:	4442      	add	r2, r8
 80059e0:	4631      	mov	r1, r6
 80059e2:	4628      	mov	r0, r5
 80059e4:	47b8      	blx	r7
 80059e6:	3001      	adds	r0, #1
 80059e8:	d1c3      	bne.n	8005972 <_printf_float+0x32e>
 80059ea:	e686      	b.n	80056fa <_printf_float+0xb6>
 80059ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80059f0:	f1ba 0f01 	cmp.w	sl, #1
 80059f4:	dc01      	bgt.n	80059fa <_printf_float+0x3b6>
 80059f6:	07db      	lsls	r3, r3, #31
 80059f8:	d536      	bpl.n	8005a68 <_printf_float+0x424>
 80059fa:	2301      	movs	r3, #1
 80059fc:	4642      	mov	r2, r8
 80059fe:	4631      	mov	r1, r6
 8005a00:	4628      	mov	r0, r5
 8005a02:	47b8      	blx	r7
 8005a04:	3001      	adds	r0, #1
 8005a06:	f43f ae78 	beq.w	80056fa <_printf_float+0xb6>
 8005a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a0e:	4631      	mov	r1, r6
 8005a10:	4628      	mov	r0, r5
 8005a12:	47b8      	blx	r7
 8005a14:	3001      	adds	r0, #1
 8005a16:	f43f ae70 	beq.w	80056fa <_printf_float+0xb6>
 8005a1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2300      	movs	r3, #0
 8005a22:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005a26:	f7fb f857 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a2a:	b9c0      	cbnz	r0, 8005a5e <_printf_float+0x41a>
 8005a2c:	4653      	mov	r3, sl
 8005a2e:	f108 0201 	add.w	r2, r8, #1
 8005a32:	4631      	mov	r1, r6
 8005a34:	4628      	mov	r0, r5
 8005a36:	47b8      	blx	r7
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d10c      	bne.n	8005a56 <_printf_float+0x412>
 8005a3c:	e65d      	b.n	80056fa <_printf_float+0xb6>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	465a      	mov	r2, fp
 8005a42:	4631      	mov	r1, r6
 8005a44:	4628      	mov	r0, r5
 8005a46:	47b8      	blx	r7
 8005a48:	3001      	adds	r0, #1
 8005a4a:	f43f ae56 	beq.w	80056fa <_printf_float+0xb6>
 8005a4e:	f108 0801 	add.w	r8, r8, #1
 8005a52:	45d0      	cmp	r8, sl
 8005a54:	dbf3      	blt.n	8005a3e <_printf_float+0x3fa>
 8005a56:	464b      	mov	r3, r9
 8005a58:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005a5c:	e6df      	b.n	800581e <_printf_float+0x1da>
 8005a5e:	f04f 0800 	mov.w	r8, #0
 8005a62:	f104 0b1a 	add.w	fp, r4, #26
 8005a66:	e7f4      	b.n	8005a52 <_printf_float+0x40e>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	4642      	mov	r2, r8
 8005a6c:	e7e1      	b.n	8005a32 <_printf_float+0x3ee>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	464a      	mov	r2, r9
 8005a72:	4631      	mov	r1, r6
 8005a74:	4628      	mov	r0, r5
 8005a76:	47b8      	blx	r7
 8005a78:	3001      	adds	r0, #1
 8005a7a:	f43f ae3e 	beq.w	80056fa <_printf_float+0xb6>
 8005a7e:	f108 0801 	add.w	r8, r8, #1
 8005a82:	68e3      	ldr	r3, [r4, #12]
 8005a84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005a86:	1a5b      	subs	r3, r3, r1
 8005a88:	4543      	cmp	r3, r8
 8005a8a:	dcf0      	bgt.n	8005a6e <_printf_float+0x42a>
 8005a8c:	e6fc      	b.n	8005888 <_printf_float+0x244>
 8005a8e:	f04f 0800 	mov.w	r8, #0
 8005a92:	f104 0919 	add.w	r9, r4, #25
 8005a96:	e7f4      	b.n	8005a82 <_printf_float+0x43e>

08005a98 <_printf_common>:
 8005a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a9c:	4616      	mov	r6, r2
 8005a9e:	4698      	mov	r8, r3
 8005aa0:	688a      	ldr	r2, [r1, #8]
 8005aa2:	690b      	ldr	r3, [r1, #16]
 8005aa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	bfb8      	it	lt
 8005aac:	4613      	movlt	r3, r2
 8005aae:	6033      	str	r3, [r6, #0]
 8005ab0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	b10a      	cbz	r2, 8005abe <_printf_common+0x26>
 8005aba:	3301      	adds	r3, #1
 8005abc:	6033      	str	r3, [r6, #0]
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	0699      	lsls	r1, r3, #26
 8005ac2:	bf42      	ittt	mi
 8005ac4:	6833      	ldrmi	r3, [r6, #0]
 8005ac6:	3302      	addmi	r3, #2
 8005ac8:	6033      	strmi	r3, [r6, #0]
 8005aca:	6825      	ldr	r5, [r4, #0]
 8005acc:	f015 0506 	ands.w	r5, r5, #6
 8005ad0:	d106      	bne.n	8005ae0 <_printf_common+0x48>
 8005ad2:	f104 0a19 	add.w	sl, r4, #25
 8005ad6:	68e3      	ldr	r3, [r4, #12]
 8005ad8:	6832      	ldr	r2, [r6, #0]
 8005ada:	1a9b      	subs	r3, r3, r2
 8005adc:	42ab      	cmp	r3, r5
 8005ade:	dc26      	bgt.n	8005b2e <_printf_common+0x96>
 8005ae0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ae4:	6822      	ldr	r2, [r4, #0]
 8005ae6:	3b00      	subs	r3, #0
 8005ae8:	bf18      	it	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	0692      	lsls	r2, r2, #26
 8005aee:	d42b      	bmi.n	8005b48 <_printf_common+0xb0>
 8005af0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005af4:	4641      	mov	r1, r8
 8005af6:	4638      	mov	r0, r7
 8005af8:	47c8      	blx	r9
 8005afa:	3001      	adds	r0, #1
 8005afc:	d01e      	beq.n	8005b3c <_printf_common+0xa4>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	6922      	ldr	r2, [r4, #16]
 8005b02:	f003 0306 	and.w	r3, r3, #6
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	bf02      	ittt	eq
 8005b0a:	68e5      	ldreq	r5, [r4, #12]
 8005b0c:	6833      	ldreq	r3, [r6, #0]
 8005b0e:	1aed      	subeq	r5, r5, r3
 8005b10:	68a3      	ldr	r3, [r4, #8]
 8005b12:	bf0c      	ite	eq
 8005b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b18:	2500      	movne	r5, #0
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	bfc4      	itt	gt
 8005b1e:	1a9b      	subgt	r3, r3, r2
 8005b20:	18ed      	addgt	r5, r5, r3
 8005b22:	2600      	movs	r6, #0
 8005b24:	341a      	adds	r4, #26
 8005b26:	42b5      	cmp	r5, r6
 8005b28:	d11a      	bne.n	8005b60 <_printf_common+0xc8>
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	e008      	b.n	8005b40 <_printf_common+0xa8>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	4652      	mov	r2, sl
 8005b32:	4641      	mov	r1, r8
 8005b34:	4638      	mov	r0, r7
 8005b36:	47c8      	blx	r9
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d103      	bne.n	8005b44 <_printf_common+0xac>
 8005b3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b44:	3501      	adds	r5, #1
 8005b46:	e7c6      	b.n	8005ad6 <_printf_common+0x3e>
 8005b48:	18e1      	adds	r1, r4, r3
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	2030      	movs	r0, #48	@ 0x30
 8005b4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b52:	4422      	add	r2, r4
 8005b54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b5c:	3302      	adds	r3, #2
 8005b5e:	e7c7      	b.n	8005af0 <_printf_common+0x58>
 8005b60:	2301      	movs	r3, #1
 8005b62:	4622      	mov	r2, r4
 8005b64:	4641      	mov	r1, r8
 8005b66:	4638      	mov	r0, r7
 8005b68:	47c8      	blx	r9
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	d0e6      	beq.n	8005b3c <_printf_common+0xa4>
 8005b6e:	3601      	adds	r6, #1
 8005b70:	e7d9      	b.n	8005b26 <_printf_common+0x8e>
	...

08005b74 <_printf_i>:
 8005b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b78:	7e0f      	ldrb	r7, [r1, #24]
 8005b7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b7c:	2f78      	cmp	r7, #120	@ 0x78
 8005b7e:	4691      	mov	r9, r2
 8005b80:	4680      	mov	r8, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	469a      	mov	sl, r3
 8005b86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b8a:	d807      	bhi.n	8005b9c <_printf_i+0x28>
 8005b8c:	2f62      	cmp	r7, #98	@ 0x62
 8005b8e:	d80a      	bhi.n	8005ba6 <_printf_i+0x32>
 8005b90:	2f00      	cmp	r7, #0
 8005b92:	f000 80d1 	beq.w	8005d38 <_printf_i+0x1c4>
 8005b96:	2f58      	cmp	r7, #88	@ 0x58
 8005b98:	f000 80b8 	beq.w	8005d0c <_printf_i+0x198>
 8005b9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ba0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ba4:	e03a      	b.n	8005c1c <_printf_i+0xa8>
 8005ba6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005baa:	2b15      	cmp	r3, #21
 8005bac:	d8f6      	bhi.n	8005b9c <_printf_i+0x28>
 8005bae:	a101      	add	r1, pc, #4	@ (adr r1, 8005bb4 <_printf_i+0x40>)
 8005bb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bb4:	08005c0d 	.word	0x08005c0d
 8005bb8:	08005c21 	.word	0x08005c21
 8005bbc:	08005b9d 	.word	0x08005b9d
 8005bc0:	08005b9d 	.word	0x08005b9d
 8005bc4:	08005b9d 	.word	0x08005b9d
 8005bc8:	08005b9d 	.word	0x08005b9d
 8005bcc:	08005c21 	.word	0x08005c21
 8005bd0:	08005b9d 	.word	0x08005b9d
 8005bd4:	08005b9d 	.word	0x08005b9d
 8005bd8:	08005b9d 	.word	0x08005b9d
 8005bdc:	08005b9d 	.word	0x08005b9d
 8005be0:	08005d1f 	.word	0x08005d1f
 8005be4:	08005c4b 	.word	0x08005c4b
 8005be8:	08005cd9 	.word	0x08005cd9
 8005bec:	08005b9d 	.word	0x08005b9d
 8005bf0:	08005b9d 	.word	0x08005b9d
 8005bf4:	08005d41 	.word	0x08005d41
 8005bf8:	08005b9d 	.word	0x08005b9d
 8005bfc:	08005c4b 	.word	0x08005c4b
 8005c00:	08005b9d 	.word	0x08005b9d
 8005c04:	08005b9d 	.word	0x08005b9d
 8005c08:	08005ce1 	.word	0x08005ce1
 8005c0c:	6833      	ldr	r3, [r6, #0]
 8005c0e:	1d1a      	adds	r2, r3, #4
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6032      	str	r2, [r6, #0]
 8005c14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e09c      	b.n	8005d5a <_printf_i+0x1e6>
 8005c20:	6833      	ldr	r3, [r6, #0]
 8005c22:	6820      	ldr	r0, [r4, #0]
 8005c24:	1d19      	adds	r1, r3, #4
 8005c26:	6031      	str	r1, [r6, #0]
 8005c28:	0606      	lsls	r6, r0, #24
 8005c2a:	d501      	bpl.n	8005c30 <_printf_i+0xbc>
 8005c2c:	681d      	ldr	r5, [r3, #0]
 8005c2e:	e003      	b.n	8005c38 <_printf_i+0xc4>
 8005c30:	0645      	lsls	r5, r0, #25
 8005c32:	d5fb      	bpl.n	8005c2c <_printf_i+0xb8>
 8005c34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c38:	2d00      	cmp	r5, #0
 8005c3a:	da03      	bge.n	8005c44 <_printf_i+0xd0>
 8005c3c:	232d      	movs	r3, #45	@ 0x2d
 8005c3e:	426d      	negs	r5, r5
 8005c40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c44:	4858      	ldr	r0, [pc, #352]	@ (8005da8 <_printf_i+0x234>)
 8005c46:	230a      	movs	r3, #10
 8005c48:	e011      	b.n	8005c6e <_printf_i+0xfa>
 8005c4a:	6821      	ldr	r1, [r4, #0]
 8005c4c:	6833      	ldr	r3, [r6, #0]
 8005c4e:	0608      	lsls	r0, r1, #24
 8005c50:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c54:	d402      	bmi.n	8005c5c <_printf_i+0xe8>
 8005c56:	0649      	lsls	r1, r1, #25
 8005c58:	bf48      	it	mi
 8005c5a:	b2ad      	uxthmi	r5, r5
 8005c5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c5e:	4852      	ldr	r0, [pc, #328]	@ (8005da8 <_printf_i+0x234>)
 8005c60:	6033      	str	r3, [r6, #0]
 8005c62:	bf14      	ite	ne
 8005c64:	230a      	movne	r3, #10
 8005c66:	2308      	moveq	r3, #8
 8005c68:	2100      	movs	r1, #0
 8005c6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c6e:	6866      	ldr	r6, [r4, #4]
 8005c70:	60a6      	str	r6, [r4, #8]
 8005c72:	2e00      	cmp	r6, #0
 8005c74:	db05      	blt.n	8005c82 <_printf_i+0x10e>
 8005c76:	6821      	ldr	r1, [r4, #0]
 8005c78:	432e      	orrs	r6, r5
 8005c7a:	f021 0104 	bic.w	r1, r1, #4
 8005c7e:	6021      	str	r1, [r4, #0]
 8005c80:	d04b      	beq.n	8005d1a <_printf_i+0x1a6>
 8005c82:	4616      	mov	r6, r2
 8005c84:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c88:	fb03 5711 	mls	r7, r3, r1, r5
 8005c8c:	5dc7      	ldrb	r7, [r0, r7]
 8005c8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c92:	462f      	mov	r7, r5
 8005c94:	42bb      	cmp	r3, r7
 8005c96:	460d      	mov	r5, r1
 8005c98:	d9f4      	bls.n	8005c84 <_printf_i+0x110>
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d10b      	bne.n	8005cb6 <_printf_i+0x142>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	07df      	lsls	r7, r3, #31
 8005ca2:	d508      	bpl.n	8005cb6 <_printf_i+0x142>
 8005ca4:	6923      	ldr	r3, [r4, #16]
 8005ca6:	6861      	ldr	r1, [r4, #4]
 8005ca8:	4299      	cmp	r1, r3
 8005caa:	bfde      	ittt	le
 8005cac:	2330      	movle	r3, #48	@ 0x30
 8005cae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cb2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005cb6:	1b92      	subs	r2, r2, r6
 8005cb8:	6122      	str	r2, [r4, #16]
 8005cba:	f8cd a000 	str.w	sl, [sp]
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	aa03      	add	r2, sp, #12
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	4640      	mov	r0, r8
 8005cc6:	f7ff fee7 	bl	8005a98 <_printf_common>
 8005cca:	3001      	adds	r0, #1
 8005ccc:	d14a      	bne.n	8005d64 <_printf_i+0x1f0>
 8005cce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cd2:	b004      	add	sp, #16
 8005cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	f043 0320 	orr.w	r3, r3, #32
 8005cde:	6023      	str	r3, [r4, #0]
 8005ce0:	4832      	ldr	r0, [pc, #200]	@ (8005dac <_printf_i+0x238>)
 8005ce2:	2778      	movs	r7, #120	@ 0x78
 8005ce4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	6831      	ldr	r1, [r6, #0]
 8005cec:	061f      	lsls	r7, r3, #24
 8005cee:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cf2:	d402      	bmi.n	8005cfa <_printf_i+0x186>
 8005cf4:	065f      	lsls	r7, r3, #25
 8005cf6:	bf48      	it	mi
 8005cf8:	b2ad      	uxthmi	r5, r5
 8005cfa:	6031      	str	r1, [r6, #0]
 8005cfc:	07d9      	lsls	r1, r3, #31
 8005cfe:	bf44      	itt	mi
 8005d00:	f043 0320 	orrmi.w	r3, r3, #32
 8005d04:	6023      	strmi	r3, [r4, #0]
 8005d06:	b11d      	cbz	r5, 8005d10 <_printf_i+0x19c>
 8005d08:	2310      	movs	r3, #16
 8005d0a:	e7ad      	b.n	8005c68 <_printf_i+0xf4>
 8005d0c:	4826      	ldr	r0, [pc, #152]	@ (8005da8 <_printf_i+0x234>)
 8005d0e:	e7e9      	b.n	8005ce4 <_printf_i+0x170>
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	f023 0320 	bic.w	r3, r3, #32
 8005d16:	6023      	str	r3, [r4, #0]
 8005d18:	e7f6      	b.n	8005d08 <_printf_i+0x194>
 8005d1a:	4616      	mov	r6, r2
 8005d1c:	e7bd      	b.n	8005c9a <_printf_i+0x126>
 8005d1e:	6833      	ldr	r3, [r6, #0]
 8005d20:	6825      	ldr	r5, [r4, #0]
 8005d22:	6961      	ldr	r1, [r4, #20]
 8005d24:	1d18      	adds	r0, r3, #4
 8005d26:	6030      	str	r0, [r6, #0]
 8005d28:	062e      	lsls	r6, r5, #24
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	d501      	bpl.n	8005d32 <_printf_i+0x1be>
 8005d2e:	6019      	str	r1, [r3, #0]
 8005d30:	e002      	b.n	8005d38 <_printf_i+0x1c4>
 8005d32:	0668      	lsls	r0, r5, #25
 8005d34:	d5fb      	bpl.n	8005d2e <_printf_i+0x1ba>
 8005d36:	8019      	strh	r1, [r3, #0]
 8005d38:	2300      	movs	r3, #0
 8005d3a:	6123      	str	r3, [r4, #16]
 8005d3c:	4616      	mov	r6, r2
 8005d3e:	e7bc      	b.n	8005cba <_printf_i+0x146>
 8005d40:	6833      	ldr	r3, [r6, #0]
 8005d42:	1d1a      	adds	r2, r3, #4
 8005d44:	6032      	str	r2, [r6, #0]
 8005d46:	681e      	ldr	r6, [r3, #0]
 8005d48:	6862      	ldr	r2, [r4, #4]
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	f7fa fa47 	bl	80001e0 <memchr>
 8005d52:	b108      	cbz	r0, 8005d58 <_printf_i+0x1e4>
 8005d54:	1b80      	subs	r0, r0, r6
 8005d56:	6060      	str	r0, [r4, #4]
 8005d58:	6863      	ldr	r3, [r4, #4]
 8005d5a:	6123      	str	r3, [r4, #16]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d62:	e7aa      	b.n	8005cba <_printf_i+0x146>
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	4632      	mov	r2, r6
 8005d68:	4649      	mov	r1, r9
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	47d0      	blx	sl
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d0ad      	beq.n	8005cce <_printf_i+0x15a>
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	079b      	lsls	r3, r3, #30
 8005d76:	d413      	bmi.n	8005da0 <_printf_i+0x22c>
 8005d78:	68e0      	ldr	r0, [r4, #12]
 8005d7a:	9b03      	ldr	r3, [sp, #12]
 8005d7c:	4298      	cmp	r0, r3
 8005d7e:	bfb8      	it	lt
 8005d80:	4618      	movlt	r0, r3
 8005d82:	e7a6      	b.n	8005cd2 <_printf_i+0x15e>
 8005d84:	2301      	movs	r3, #1
 8005d86:	4632      	mov	r2, r6
 8005d88:	4649      	mov	r1, r9
 8005d8a:	4640      	mov	r0, r8
 8005d8c:	47d0      	blx	sl
 8005d8e:	3001      	adds	r0, #1
 8005d90:	d09d      	beq.n	8005cce <_printf_i+0x15a>
 8005d92:	3501      	adds	r5, #1
 8005d94:	68e3      	ldr	r3, [r4, #12]
 8005d96:	9903      	ldr	r1, [sp, #12]
 8005d98:	1a5b      	subs	r3, r3, r1
 8005d9a:	42ab      	cmp	r3, r5
 8005d9c:	dcf2      	bgt.n	8005d84 <_printf_i+0x210>
 8005d9e:	e7eb      	b.n	8005d78 <_printf_i+0x204>
 8005da0:	2500      	movs	r5, #0
 8005da2:	f104 0619 	add.w	r6, r4, #25
 8005da6:	e7f5      	b.n	8005d94 <_printf_i+0x220>
 8005da8:	08008376 	.word	0x08008376
 8005dac:	08008387 	.word	0x08008387

08005db0 <std>:
 8005db0:	2300      	movs	r3, #0
 8005db2:	b510      	push	{r4, lr}
 8005db4:	4604      	mov	r4, r0
 8005db6:	e9c0 3300 	strd	r3, r3, [r0]
 8005dba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dbe:	6083      	str	r3, [r0, #8]
 8005dc0:	8181      	strh	r1, [r0, #12]
 8005dc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005dc4:	81c2      	strh	r2, [r0, #14]
 8005dc6:	6183      	str	r3, [r0, #24]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	2208      	movs	r2, #8
 8005dcc:	305c      	adds	r0, #92	@ 0x5c
 8005dce:	f000 f931 	bl	8006034 <memset>
 8005dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005e08 <std+0x58>)
 8005dd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005e0c <std+0x5c>)
 8005dd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005dda:	4b0d      	ldr	r3, [pc, #52]	@ (8005e10 <std+0x60>)
 8005ddc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005dde:	4b0d      	ldr	r3, [pc, #52]	@ (8005e14 <std+0x64>)
 8005de0:	6323      	str	r3, [r4, #48]	@ 0x30
 8005de2:	4b0d      	ldr	r3, [pc, #52]	@ (8005e18 <std+0x68>)
 8005de4:	6224      	str	r4, [r4, #32]
 8005de6:	429c      	cmp	r4, r3
 8005de8:	d006      	beq.n	8005df8 <std+0x48>
 8005dea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005dee:	4294      	cmp	r4, r2
 8005df0:	d002      	beq.n	8005df8 <std+0x48>
 8005df2:	33d0      	adds	r3, #208	@ 0xd0
 8005df4:	429c      	cmp	r4, r3
 8005df6:	d105      	bne.n	8005e04 <std+0x54>
 8005df8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e00:	f000 b994 	b.w	800612c <__retarget_lock_init_recursive>
 8005e04:	bd10      	pop	{r4, pc}
 8005e06:	bf00      	nop
 8005e08:	08005f35 	.word	0x08005f35
 8005e0c:	08005f57 	.word	0x08005f57
 8005e10:	08005f8f 	.word	0x08005f8f
 8005e14:	08005fb3 	.word	0x08005fb3
 8005e18:	2000031c 	.word	0x2000031c

08005e1c <stdio_exit_handler>:
 8005e1c:	4a02      	ldr	r2, [pc, #8]	@ (8005e28 <stdio_exit_handler+0xc>)
 8005e1e:	4903      	ldr	r1, [pc, #12]	@ (8005e2c <stdio_exit_handler+0x10>)
 8005e20:	4803      	ldr	r0, [pc, #12]	@ (8005e30 <stdio_exit_handler+0x14>)
 8005e22:	f000 b869 	b.w	8005ef8 <_fwalk_sglue>
 8005e26:	bf00      	nop
 8005e28:	2000000c 	.word	0x2000000c
 8005e2c:	08007a95 	.word	0x08007a95
 8005e30:	2000001c 	.word	0x2000001c

08005e34 <cleanup_stdio>:
 8005e34:	6841      	ldr	r1, [r0, #4]
 8005e36:	4b0c      	ldr	r3, [pc, #48]	@ (8005e68 <cleanup_stdio+0x34>)
 8005e38:	4299      	cmp	r1, r3
 8005e3a:	b510      	push	{r4, lr}
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	d001      	beq.n	8005e44 <cleanup_stdio+0x10>
 8005e40:	f001 fe28 	bl	8007a94 <_fflush_r>
 8005e44:	68a1      	ldr	r1, [r4, #8]
 8005e46:	4b09      	ldr	r3, [pc, #36]	@ (8005e6c <cleanup_stdio+0x38>)
 8005e48:	4299      	cmp	r1, r3
 8005e4a:	d002      	beq.n	8005e52 <cleanup_stdio+0x1e>
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f001 fe21 	bl	8007a94 <_fflush_r>
 8005e52:	68e1      	ldr	r1, [r4, #12]
 8005e54:	4b06      	ldr	r3, [pc, #24]	@ (8005e70 <cleanup_stdio+0x3c>)
 8005e56:	4299      	cmp	r1, r3
 8005e58:	d004      	beq.n	8005e64 <cleanup_stdio+0x30>
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e60:	f001 be18 	b.w	8007a94 <_fflush_r>
 8005e64:	bd10      	pop	{r4, pc}
 8005e66:	bf00      	nop
 8005e68:	2000031c 	.word	0x2000031c
 8005e6c:	20000384 	.word	0x20000384
 8005e70:	200003ec 	.word	0x200003ec

08005e74 <global_stdio_init.part.0>:
 8005e74:	b510      	push	{r4, lr}
 8005e76:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea4 <global_stdio_init.part.0+0x30>)
 8005e78:	4c0b      	ldr	r4, [pc, #44]	@ (8005ea8 <global_stdio_init.part.0+0x34>)
 8005e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8005eac <global_stdio_init.part.0+0x38>)
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	4620      	mov	r0, r4
 8005e80:	2200      	movs	r2, #0
 8005e82:	2104      	movs	r1, #4
 8005e84:	f7ff ff94 	bl	8005db0 <std>
 8005e88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	2109      	movs	r1, #9
 8005e90:	f7ff ff8e 	bl	8005db0 <std>
 8005e94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e98:	2202      	movs	r2, #2
 8005e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e9e:	2112      	movs	r1, #18
 8005ea0:	f7ff bf86 	b.w	8005db0 <std>
 8005ea4:	20000454 	.word	0x20000454
 8005ea8:	2000031c 	.word	0x2000031c
 8005eac:	08005e1d 	.word	0x08005e1d

08005eb0 <__sfp_lock_acquire>:
 8005eb0:	4801      	ldr	r0, [pc, #4]	@ (8005eb8 <__sfp_lock_acquire+0x8>)
 8005eb2:	f000 b93c 	b.w	800612e <__retarget_lock_acquire_recursive>
 8005eb6:	bf00      	nop
 8005eb8:	2000045d 	.word	0x2000045d

08005ebc <__sfp_lock_release>:
 8005ebc:	4801      	ldr	r0, [pc, #4]	@ (8005ec4 <__sfp_lock_release+0x8>)
 8005ebe:	f000 b937 	b.w	8006130 <__retarget_lock_release_recursive>
 8005ec2:	bf00      	nop
 8005ec4:	2000045d 	.word	0x2000045d

08005ec8 <__sinit>:
 8005ec8:	b510      	push	{r4, lr}
 8005eca:	4604      	mov	r4, r0
 8005ecc:	f7ff fff0 	bl	8005eb0 <__sfp_lock_acquire>
 8005ed0:	6a23      	ldr	r3, [r4, #32]
 8005ed2:	b11b      	cbz	r3, 8005edc <__sinit+0x14>
 8005ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ed8:	f7ff bff0 	b.w	8005ebc <__sfp_lock_release>
 8005edc:	4b04      	ldr	r3, [pc, #16]	@ (8005ef0 <__sinit+0x28>)
 8005ede:	6223      	str	r3, [r4, #32]
 8005ee0:	4b04      	ldr	r3, [pc, #16]	@ (8005ef4 <__sinit+0x2c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1f5      	bne.n	8005ed4 <__sinit+0xc>
 8005ee8:	f7ff ffc4 	bl	8005e74 <global_stdio_init.part.0>
 8005eec:	e7f2      	b.n	8005ed4 <__sinit+0xc>
 8005eee:	bf00      	nop
 8005ef0:	08005e35 	.word	0x08005e35
 8005ef4:	20000454 	.word	0x20000454

08005ef8 <_fwalk_sglue>:
 8005ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005efc:	4607      	mov	r7, r0
 8005efe:	4688      	mov	r8, r1
 8005f00:	4614      	mov	r4, r2
 8005f02:	2600      	movs	r6, #0
 8005f04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f08:	f1b9 0901 	subs.w	r9, r9, #1
 8005f0c:	d505      	bpl.n	8005f1a <_fwalk_sglue+0x22>
 8005f0e:	6824      	ldr	r4, [r4, #0]
 8005f10:	2c00      	cmp	r4, #0
 8005f12:	d1f7      	bne.n	8005f04 <_fwalk_sglue+0xc>
 8005f14:	4630      	mov	r0, r6
 8005f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f1a:	89ab      	ldrh	r3, [r5, #12]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d907      	bls.n	8005f30 <_fwalk_sglue+0x38>
 8005f20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f24:	3301      	adds	r3, #1
 8005f26:	d003      	beq.n	8005f30 <_fwalk_sglue+0x38>
 8005f28:	4629      	mov	r1, r5
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	47c0      	blx	r8
 8005f2e:	4306      	orrs	r6, r0
 8005f30:	3568      	adds	r5, #104	@ 0x68
 8005f32:	e7e9      	b.n	8005f08 <_fwalk_sglue+0x10>

08005f34 <__sread>:
 8005f34:	b510      	push	{r4, lr}
 8005f36:	460c      	mov	r4, r1
 8005f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3c:	f000 f8a8 	bl	8006090 <_read_r>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	bfab      	itete	ge
 8005f44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f46:	89a3      	ldrhlt	r3, [r4, #12]
 8005f48:	181b      	addge	r3, r3, r0
 8005f4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f4e:	bfac      	ite	ge
 8005f50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f52:	81a3      	strhlt	r3, [r4, #12]
 8005f54:	bd10      	pop	{r4, pc}

08005f56 <__swrite>:
 8005f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5a:	461f      	mov	r7, r3
 8005f5c:	898b      	ldrh	r3, [r1, #12]
 8005f5e:	05db      	lsls	r3, r3, #23
 8005f60:	4605      	mov	r5, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	4616      	mov	r6, r2
 8005f66:	d505      	bpl.n	8005f74 <__swrite+0x1e>
 8005f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f000 f87c 	bl	800606c <_lseek_r>
 8005f74:	89a3      	ldrh	r3, [r4, #12]
 8005f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f7e:	81a3      	strh	r3, [r4, #12]
 8005f80:	4632      	mov	r2, r6
 8005f82:	463b      	mov	r3, r7
 8005f84:	4628      	mov	r0, r5
 8005f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f8a:	f000 b893 	b.w	80060b4 <_write_r>

08005f8e <__sseek>:
 8005f8e:	b510      	push	{r4, lr}
 8005f90:	460c      	mov	r4, r1
 8005f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f96:	f000 f869 	bl	800606c <_lseek_r>
 8005f9a:	1c43      	adds	r3, r0, #1
 8005f9c:	89a3      	ldrh	r3, [r4, #12]
 8005f9e:	bf15      	itete	ne
 8005fa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005fa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005fa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005faa:	81a3      	strheq	r3, [r4, #12]
 8005fac:	bf18      	it	ne
 8005fae:	81a3      	strhne	r3, [r4, #12]
 8005fb0:	bd10      	pop	{r4, pc}

08005fb2 <__sclose>:
 8005fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb6:	f000 b849 	b.w	800604c <_close_r>

08005fba <_vsniprintf_r>:
 8005fba:	b530      	push	{r4, r5, lr}
 8005fbc:	4614      	mov	r4, r2
 8005fbe:	2c00      	cmp	r4, #0
 8005fc0:	b09b      	sub	sp, #108	@ 0x6c
 8005fc2:	4605      	mov	r5, r0
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	da05      	bge.n	8005fd4 <_vsniprintf_r+0x1a>
 8005fc8:	238b      	movs	r3, #139	@ 0x8b
 8005fca:	6003      	str	r3, [r0, #0]
 8005fcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fd0:	b01b      	add	sp, #108	@ 0x6c
 8005fd2:	bd30      	pop	{r4, r5, pc}
 8005fd4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005fd8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	9319      	str	r3, [sp, #100]	@ 0x64
 8005fe2:	bf14      	ite	ne
 8005fe4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8005fe8:	4623      	moveq	r3, r4
 8005fea:	9302      	str	r3, [sp, #8]
 8005fec:	9305      	str	r3, [sp, #20]
 8005fee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ff2:	9100      	str	r1, [sp, #0]
 8005ff4:	9104      	str	r1, [sp, #16]
 8005ff6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005ffa:	4669      	mov	r1, sp
 8005ffc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005ffe:	f001 fbc9 	bl	8007794 <_svfiprintf_r>
 8006002:	1c43      	adds	r3, r0, #1
 8006004:	bfbc      	itt	lt
 8006006:	238b      	movlt	r3, #139	@ 0x8b
 8006008:	602b      	strlt	r3, [r5, #0]
 800600a:	2c00      	cmp	r4, #0
 800600c:	d0e0      	beq.n	8005fd0 <_vsniprintf_r+0x16>
 800600e:	9b00      	ldr	r3, [sp, #0]
 8006010:	2200      	movs	r2, #0
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	e7dc      	b.n	8005fd0 <_vsniprintf_r+0x16>
	...

08006018 <vsniprintf>:
 8006018:	b507      	push	{r0, r1, r2, lr}
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	4613      	mov	r3, r2
 800601e:	460a      	mov	r2, r1
 8006020:	4601      	mov	r1, r0
 8006022:	4803      	ldr	r0, [pc, #12]	@ (8006030 <vsniprintf+0x18>)
 8006024:	6800      	ldr	r0, [r0, #0]
 8006026:	f7ff ffc8 	bl	8005fba <_vsniprintf_r>
 800602a:	b003      	add	sp, #12
 800602c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006030:	20000018 	.word	0x20000018

08006034 <memset>:
 8006034:	4402      	add	r2, r0
 8006036:	4603      	mov	r3, r0
 8006038:	4293      	cmp	r3, r2
 800603a:	d100      	bne.n	800603e <memset+0xa>
 800603c:	4770      	bx	lr
 800603e:	f803 1b01 	strb.w	r1, [r3], #1
 8006042:	e7f9      	b.n	8006038 <memset+0x4>

08006044 <_localeconv_r>:
 8006044:	4800      	ldr	r0, [pc, #0]	@ (8006048 <_localeconv_r+0x4>)
 8006046:	4770      	bx	lr
 8006048:	20000158 	.word	0x20000158

0800604c <_close_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4d06      	ldr	r5, [pc, #24]	@ (8006068 <_close_r+0x1c>)
 8006050:	2300      	movs	r3, #0
 8006052:	4604      	mov	r4, r0
 8006054:	4608      	mov	r0, r1
 8006056:	602b      	str	r3, [r5, #0]
 8006058:	f7fb ffb9 	bl	8001fce <_close>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d102      	bne.n	8006066 <_close_r+0x1a>
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	b103      	cbz	r3, 8006066 <_close_r+0x1a>
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	20000458 	.word	0x20000458

0800606c <_lseek_r>:
 800606c:	b538      	push	{r3, r4, r5, lr}
 800606e:	4d07      	ldr	r5, [pc, #28]	@ (800608c <_lseek_r+0x20>)
 8006070:	4604      	mov	r4, r0
 8006072:	4608      	mov	r0, r1
 8006074:	4611      	mov	r1, r2
 8006076:	2200      	movs	r2, #0
 8006078:	602a      	str	r2, [r5, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	f7fb ffce 	bl	800201c <_lseek>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d102      	bne.n	800608a <_lseek_r+0x1e>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	b103      	cbz	r3, 800608a <_lseek_r+0x1e>
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	20000458 	.word	0x20000458

08006090 <_read_r>:
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	4d07      	ldr	r5, [pc, #28]	@ (80060b0 <_read_r+0x20>)
 8006094:	4604      	mov	r4, r0
 8006096:	4608      	mov	r0, r1
 8006098:	4611      	mov	r1, r2
 800609a:	2200      	movs	r2, #0
 800609c:	602a      	str	r2, [r5, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	f7fb ff5c 	bl	8001f5c <_read>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	d102      	bne.n	80060ae <_read_r+0x1e>
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	b103      	cbz	r3, 80060ae <_read_r+0x1e>
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	20000458 	.word	0x20000458

080060b4 <_write_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	4d07      	ldr	r5, [pc, #28]	@ (80060d4 <_write_r+0x20>)
 80060b8:	4604      	mov	r4, r0
 80060ba:	4608      	mov	r0, r1
 80060bc:	4611      	mov	r1, r2
 80060be:	2200      	movs	r2, #0
 80060c0:	602a      	str	r2, [r5, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	f7fb ff67 	bl	8001f96 <_write>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_write_r+0x1e>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_write_r+0x1e>
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	20000458 	.word	0x20000458

080060d8 <__errno>:
 80060d8:	4b01      	ldr	r3, [pc, #4]	@ (80060e0 <__errno+0x8>)
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	20000018 	.word	0x20000018

080060e4 <__libc_init_array>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	4d0d      	ldr	r5, [pc, #52]	@ (800611c <__libc_init_array+0x38>)
 80060e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006120 <__libc_init_array+0x3c>)
 80060ea:	1b64      	subs	r4, r4, r5
 80060ec:	10a4      	asrs	r4, r4, #2
 80060ee:	2600      	movs	r6, #0
 80060f0:	42a6      	cmp	r6, r4
 80060f2:	d109      	bne.n	8006108 <__libc_init_array+0x24>
 80060f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006124 <__libc_init_array+0x40>)
 80060f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006128 <__libc_init_array+0x44>)
 80060f8:	f002 f86a 	bl	80081d0 <_init>
 80060fc:	1b64      	subs	r4, r4, r5
 80060fe:	10a4      	asrs	r4, r4, #2
 8006100:	2600      	movs	r6, #0
 8006102:	42a6      	cmp	r6, r4
 8006104:	d105      	bne.n	8006112 <__libc_init_array+0x2e>
 8006106:	bd70      	pop	{r4, r5, r6, pc}
 8006108:	f855 3b04 	ldr.w	r3, [r5], #4
 800610c:	4798      	blx	r3
 800610e:	3601      	adds	r6, #1
 8006110:	e7ee      	b.n	80060f0 <__libc_init_array+0xc>
 8006112:	f855 3b04 	ldr.w	r3, [r5], #4
 8006116:	4798      	blx	r3
 8006118:	3601      	adds	r6, #1
 800611a:	e7f2      	b.n	8006102 <__libc_init_array+0x1e>
 800611c:	080086e4 	.word	0x080086e4
 8006120:	080086e4 	.word	0x080086e4
 8006124:	080086e4 	.word	0x080086e4
 8006128:	080086e8 	.word	0x080086e8

0800612c <__retarget_lock_init_recursive>:
 800612c:	4770      	bx	lr

0800612e <__retarget_lock_acquire_recursive>:
 800612e:	4770      	bx	lr

08006130 <__retarget_lock_release_recursive>:
 8006130:	4770      	bx	lr

08006132 <quorem>:
 8006132:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006136:	6903      	ldr	r3, [r0, #16]
 8006138:	690c      	ldr	r4, [r1, #16]
 800613a:	42a3      	cmp	r3, r4
 800613c:	4607      	mov	r7, r0
 800613e:	db7e      	blt.n	800623e <quorem+0x10c>
 8006140:	3c01      	subs	r4, #1
 8006142:	f101 0814 	add.w	r8, r1, #20
 8006146:	00a3      	lsls	r3, r4, #2
 8006148:	f100 0514 	add.w	r5, r0, #20
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006152:	9301      	str	r3, [sp, #4]
 8006154:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006158:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800615c:	3301      	adds	r3, #1
 800615e:	429a      	cmp	r2, r3
 8006160:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006164:	fbb2 f6f3 	udiv	r6, r2, r3
 8006168:	d32e      	bcc.n	80061c8 <quorem+0x96>
 800616a:	f04f 0a00 	mov.w	sl, #0
 800616e:	46c4      	mov	ip, r8
 8006170:	46ae      	mov	lr, r5
 8006172:	46d3      	mov	fp, sl
 8006174:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006178:	b298      	uxth	r0, r3
 800617a:	fb06 a000 	mla	r0, r6, r0, sl
 800617e:	0c02      	lsrs	r2, r0, #16
 8006180:	0c1b      	lsrs	r3, r3, #16
 8006182:	fb06 2303 	mla	r3, r6, r3, r2
 8006186:	f8de 2000 	ldr.w	r2, [lr]
 800618a:	b280      	uxth	r0, r0
 800618c:	b292      	uxth	r2, r2
 800618e:	1a12      	subs	r2, r2, r0
 8006190:	445a      	add	r2, fp
 8006192:	f8de 0000 	ldr.w	r0, [lr]
 8006196:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800619a:	b29b      	uxth	r3, r3
 800619c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80061a0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80061a4:	b292      	uxth	r2, r2
 80061a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80061aa:	45e1      	cmp	r9, ip
 80061ac:	f84e 2b04 	str.w	r2, [lr], #4
 80061b0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80061b4:	d2de      	bcs.n	8006174 <quorem+0x42>
 80061b6:	9b00      	ldr	r3, [sp, #0]
 80061b8:	58eb      	ldr	r3, [r5, r3]
 80061ba:	b92b      	cbnz	r3, 80061c8 <quorem+0x96>
 80061bc:	9b01      	ldr	r3, [sp, #4]
 80061be:	3b04      	subs	r3, #4
 80061c0:	429d      	cmp	r5, r3
 80061c2:	461a      	mov	r2, r3
 80061c4:	d32f      	bcc.n	8006226 <quorem+0xf4>
 80061c6:	613c      	str	r4, [r7, #16]
 80061c8:	4638      	mov	r0, r7
 80061ca:	f001 f97f 	bl	80074cc <__mcmp>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	db25      	blt.n	800621e <quorem+0xec>
 80061d2:	4629      	mov	r1, r5
 80061d4:	2000      	movs	r0, #0
 80061d6:	f858 2b04 	ldr.w	r2, [r8], #4
 80061da:	f8d1 c000 	ldr.w	ip, [r1]
 80061de:	fa1f fe82 	uxth.w	lr, r2
 80061e2:	fa1f f38c 	uxth.w	r3, ip
 80061e6:	eba3 030e 	sub.w	r3, r3, lr
 80061ea:	4403      	add	r3, r0
 80061ec:	0c12      	lsrs	r2, r2, #16
 80061ee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80061f2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061fc:	45c1      	cmp	r9, r8
 80061fe:	f841 3b04 	str.w	r3, [r1], #4
 8006202:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006206:	d2e6      	bcs.n	80061d6 <quorem+0xa4>
 8006208:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800620c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006210:	b922      	cbnz	r2, 800621c <quorem+0xea>
 8006212:	3b04      	subs	r3, #4
 8006214:	429d      	cmp	r5, r3
 8006216:	461a      	mov	r2, r3
 8006218:	d30b      	bcc.n	8006232 <quorem+0x100>
 800621a:	613c      	str	r4, [r7, #16]
 800621c:	3601      	adds	r6, #1
 800621e:	4630      	mov	r0, r6
 8006220:	b003      	add	sp, #12
 8006222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006226:	6812      	ldr	r2, [r2, #0]
 8006228:	3b04      	subs	r3, #4
 800622a:	2a00      	cmp	r2, #0
 800622c:	d1cb      	bne.n	80061c6 <quorem+0x94>
 800622e:	3c01      	subs	r4, #1
 8006230:	e7c6      	b.n	80061c0 <quorem+0x8e>
 8006232:	6812      	ldr	r2, [r2, #0]
 8006234:	3b04      	subs	r3, #4
 8006236:	2a00      	cmp	r2, #0
 8006238:	d1ef      	bne.n	800621a <quorem+0xe8>
 800623a:	3c01      	subs	r4, #1
 800623c:	e7ea      	b.n	8006214 <quorem+0xe2>
 800623e:	2000      	movs	r0, #0
 8006240:	e7ee      	b.n	8006220 <quorem+0xee>
 8006242:	0000      	movs	r0, r0
 8006244:	0000      	movs	r0, r0
	...

08006248 <_dtoa_r>:
 8006248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624c:	69c7      	ldr	r7, [r0, #28]
 800624e:	b097      	sub	sp, #92	@ 0x5c
 8006250:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006254:	ec55 4b10 	vmov	r4, r5, d0
 8006258:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800625a:	9107      	str	r1, [sp, #28]
 800625c:	4681      	mov	r9, r0
 800625e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006260:	9311      	str	r3, [sp, #68]	@ 0x44
 8006262:	b97f      	cbnz	r7, 8006284 <_dtoa_r+0x3c>
 8006264:	2010      	movs	r0, #16
 8006266:	f000 fe09 	bl	8006e7c <malloc>
 800626a:	4602      	mov	r2, r0
 800626c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006270:	b920      	cbnz	r0, 800627c <_dtoa_r+0x34>
 8006272:	4ba9      	ldr	r3, [pc, #676]	@ (8006518 <_dtoa_r+0x2d0>)
 8006274:	21ef      	movs	r1, #239	@ 0xef
 8006276:	48a9      	ldr	r0, [pc, #676]	@ (800651c <_dtoa_r+0x2d4>)
 8006278:	f001 fc6c 	bl	8007b54 <__assert_func>
 800627c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006280:	6007      	str	r7, [r0, #0]
 8006282:	60c7      	str	r7, [r0, #12]
 8006284:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006288:	6819      	ldr	r1, [r3, #0]
 800628a:	b159      	cbz	r1, 80062a4 <_dtoa_r+0x5c>
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	604a      	str	r2, [r1, #4]
 8006290:	2301      	movs	r3, #1
 8006292:	4093      	lsls	r3, r2
 8006294:	608b      	str	r3, [r1, #8]
 8006296:	4648      	mov	r0, r9
 8006298:	f000 fee6 	bl	8007068 <_Bfree>
 800629c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	1e2b      	subs	r3, r5, #0
 80062a6:	bfb9      	ittee	lt
 80062a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80062ac:	9305      	strlt	r3, [sp, #20]
 80062ae:	2300      	movge	r3, #0
 80062b0:	6033      	strge	r3, [r6, #0]
 80062b2:	9f05      	ldr	r7, [sp, #20]
 80062b4:	4b9a      	ldr	r3, [pc, #616]	@ (8006520 <_dtoa_r+0x2d8>)
 80062b6:	bfbc      	itt	lt
 80062b8:	2201      	movlt	r2, #1
 80062ba:	6032      	strlt	r2, [r6, #0]
 80062bc:	43bb      	bics	r3, r7
 80062be:	d112      	bne.n	80062e6 <_dtoa_r+0x9e>
 80062c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80062c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80062cc:	4323      	orrs	r3, r4
 80062ce:	f000 855a 	beq.w	8006d86 <_dtoa_r+0xb3e>
 80062d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006534 <_dtoa_r+0x2ec>
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 855c 	beq.w	8006d96 <_dtoa_r+0xb4e>
 80062de:	f10a 0303 	add.w	r3, sl, #3
 80062e2:	f000 bd56 	b.w	8006d92 <_dtoa_r+0xb4a>
 80062e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80062ea:	2200      	movs	r2, #0
 80062ec:	ec51 0b17 	vmov	r0, r1, d7
 80062f0:	2300      	movs	r3, #0
 80062f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80062f6:	f7fa fbef 	bl	8000ad8 <__aeabi_dcmpeq>
 80062fa:	4680      	mov	r8, r0
 80062fc:	b158      	cbz	r0, 8006316 <_dtoa_r+0xce>
 80062fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006300:	2301      	movs	r3, #1
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006306:	b113      	cbz	r3, 800630e <_dtoa_r+0xc6>
 8006308:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800630a:	4b86      	ldr	r3, [pc, #536]	@ (8006524 <_dtoa_r+0x2dc>)
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006538 <_dtoa_r+0x2f0>
 8006312:	f000 bd40 	b.w	8006d96 <_dtoa_r+0xb4e>
 8006316:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800631a:	aa14      	add	r2, sp, #80	@ 0x50
 800631c:	a915      	add	r1, sp, #84	@ 0x54
 800631e:	4648      	mov	r0, r9
 8006320:	f001 f984 	bl	800762c <__d2b>
 8006324:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006328:	9002      	str	r0, [sp, #8]
 800632a:	2e00      	cmp	r6, #0
 800632c:	d078      	beq.n	8006420 <_dtoa_r+0x1d8>
 800632e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006330:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006338:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800633c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006340:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006344:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006348:	4619      	mov	r1, r3
 800634a:	2200      	movs	r2, #0
 800634c:	4b76      	ldr	r3, [pc, #472]	@ (8006528 <_dtoa_r+0x2e0>)
 800634e:	f7f9 ffa3 	bl	8000298 <__aeabi_dsub>
 8006352:	a36b      	add	r3, pc, #428	@ (adr r3, 8006500 <_dtoa_r+0x2b8>)
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f7fa f956 	bl	8000608 <__aeabi_dmul>
 800635c:	a36a      	add	r3, pc, #424	@ (adr r3, 8006508 <_dtoa_r+0x2c0>)
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	f7f9 ff9b 	bl	800029c <__adddf3>
 8006366:	4604      	mov	r4, r0
 8006368:	4630      	mov	r0, r6
 800636a:	460d      	mov	r5, r1
 800636c:	f7fa f8e2 	bl	8000534 <__aeabi_i2d>
 8006370:	a367      	add	r3, pc, #412	@ (adr r3, 8006510 <_dtoa_r+0x2c8>)
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	f7fa f947 	bl	8000608 <__aeabi_dmul>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4620      	mov	r0, r4
 8006380:	4629      	mov	r1, r5
 8006382:	f7f9 ff8b 	bl	800029c <__adddf3>
 8006386:	4604      	mov	r4, r0
 8006388:	460d      	mov	r5, r1
 800638a:	f7fa fbed 	bl	8000b68 <__aeabi_d2iz>
 800638e:	2200      	movs	r2, #0
 8006390:	4607      	mov	r7, r0
 8006392:	2300      	movs	r3, #0
 8006394:	4620      	mov	r0, r4
 8006396:	4629      	mov	r1, r5
 8006398:	f7fa fba8 	bl	8000aec <__aeabi_dcmplt>
 800639c:	b140      	cbz	r0, 80063b0 <_dtoa_r+0x168>
 800639e:	4638      	mov	r0, r7
 80063a0:	f7fa f8c8 	bl	8000534 <__aeabi_i2d>
 80063a4:	4622      	mov	r2, r4
 80063a6:	462b      	mov	r3, r5
 80063a8:	f7fa fb96 	bl	8000ad8 <__aeabi_dcmpeq>
 80063ac:	b900      	cbnz	r0, 80063b0 <_dtoa_r+0x168>
 80063ae:	3f01      	subs	r7, #1
 80063b0:	2f16      	cmp	r7, #22
 80063b2:	d852      	bhi.n	800645a <_dtoa_r+0x212>
 80063b4:	4b5d      	ldr	r3, [pc, #372]	@ (800652c <_dtoa_r+0x2e4>)
 80063b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80063c2:	f7fa fb93 	bl	8000aec <__aeabi_dcmplt>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d049      	beq.n	800645e <_dtoa_r+0x216>
 80063ca:	3f01      	subs	r7, #1
 80063cc:	2300      	movs	r3, #0
 80063ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80063d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80063d2:	1b9b      	subs	r3, r3, r6
 80063d4:	1e5a      	subs	r2, r3, #1
 80063d6:	bf45      	ittet	mi
 80063d8:	f1c3 0301 	rsbmi	r3, r3, #1
 80063dc:	9300      	strmi	r3, [sp, #0]
 80063de:	2300      	movpl	r3, #0
 80063e0:	2300      	movmi	r3, #0
 80063e2:	9206      	str	r2, [sp, #24]
 80063e4:	bf54      	ite	pl
 80063e6:	9300      	strpl	r3, [sp, #0]
 80063e8:	9306      	strmi	r3, [sp, #24]
 80063ea:	2f00      	cmp	r7, #0
 80063ec:	db39      	blt.n	8006462 <_dtoa_r+0x21a>
 80063ee:	9b06      	ldr	r3, [sp, #24]
 80063f0:	970d      	str	r7, [sp, #52]	@ 0x34
 80063f2:	443b      	add	r3, r7
 80063f4:	9306      	str	r3, [sp, #24]
 80063f6:	2300      	movs	r3, #0
 80063f8:	9308      	str	r3, [sp, #32]
 80063fa:	9b07      	ldr	r3, [sp, #28]
 80063fc:	2b09      	cmp	r3, #9
 80063fe:	d863      	bhi.n	80064c8 <_dtoa_r+0x280>
 8006400:	2b05      	cmp	r3, #5
 8006402:	bfc4      	itt	gt
 8006404:	3b04      	subgt	r3, #4
 8006406:	9307      	strgt	r3, [sp, #28]
 8006408:	9b07      	ldr	r3, [sp, #28]
 800640a:	f1a3 0302 	sub.w	r3, r3, #2
 800640e:	bfcc      	ite	gt
 8006410:	2400      	movgt	r4, #0
 8006412:	2401      	movle	r4, #1
 8006414:	2b03      	cmp	r3, #3
 8006416:	d863      	bhi.n	80064e0 <_dtoa_r+0x298>
 8006418:	e8df f003 	tbb	[pc, r3]
 800641c:	2b375452 	.word	0x2b375452
 8006420:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006424:	441e      	add	r6, r3
 8006426:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800642a:	2b20      	cmp	r3, #32
 800642c:	bfc1      	itttt	gt
 800642e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006432:	409f      	lslgt	r7, r3
 8006434:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006438:	fa24 f303 	lsrgt.w	r3, r4, r3
 800643c:	bfd6      	itet	le
 800643e:	f1c3 0320 	rsble	r3, r3, #32
 8006442:	ea47 0003 	orrgt.w	r0, r7, r3
 8006446:	fa04 f003 	lslle.w	r0, r4, r3
 800644a:	f7fa f863 	bl	8000514 <__aeabi_ui2d>
 800644e:	2201      	movs	r2, #1
 8006450:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006454:	3e01      	subs	r6, #1
 8006456:	9212      	str	r2, [sp, #72]	@ 0x48
 8006458:	e776      	b.n	8006348 <_dtoa_r+0x100>
 800645a:	2301      	movs	r3, #1
 800645c:	e7b7      	b.n	80063ce <_dtoa_r+0x186>
 800645e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006460:	e7b6      	b.n	80063d0 <_dtoa_r+0x188>
 8006462:	9b00      	ldr	r3, [sp, #0]
 8006464:	1bdb      	subs	r3, r3, r7
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	427b      	negs	r3, r7
 800646a:	9308      	str	r3, [sp, #32]
 800646c:	2300      	movs	r3, #0
 800646e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006470:	e7c3      	b.n	80063fa <_dtoa_r+0x1b2>
 8006472:	2301      	movs	r3, #1
 8006474:	9309      	str	r3, [sp, #36]	@ 0x24
 8006476:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006478:	eb07 0b03 	add.w	fp, r7, r3
 800647c:	f10b 0301 	add.w	r3, fp, #1
 8006480:	2b01      	cmp	r3, #1
 8006482:	9303      	str	r3, [sp, #12]
 8006484:	bfb8      	it	lt
 8006486:	2301      	movlt	r3, #1
 8006488:	e006      	b.n	8006498 <_dtoa_r+0x250>
 800648a:	2301      	movs	r3, #1
 800648c:	9309      	str	r3, [sp, #36]	@ 0x24
 800648e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006490:	2b00      	cmp	r3, #0
 8006492:	dd28      	ble.n	80064e6 <_dtoa_r+0x29e>
 8006494:	469b      	mov	fp, r3
 8006496:	9303      	str	r3, [sp, #12]
 8006498:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800649c:	2100      	movs	r1, #0
 800649e:	2204      	movs	r2, #4
 80064a0:	f102 0514 	add.w	r5, r2, #20
 80064a4:	429d      	cmp	r5, r3
 80064a6:	d926      	bls.n	80064f6 <_dtoa_r+0x2ae>
 80064a8:	6041      	str	r1, [r0, #4]
 80064aa:	4648      	mov	r0, r9
 80064ac:	f000 fd9c 	bl	8006fe8 <_Balloc>
 80064b0:	4682      	mov	sl, r0
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d142      	bne.n	800653c <_dtoa_r+0x2f4>
 80064b6:	4b1e      	ldr	r3, [pc, #120]	@ (8006530 <_dtoa_r+0x2e8>)
 80064b8:	4602      	mov	r2, r0
 80064ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80064be:	e6da      	b.n	8006276 <_dtoa_r+0x2e>
 80064c0:	2300      	movs	r3, #0
 80064c2:	e7e3      	b.n	800648c <_dtoa_r+0x244>
 80064c4:	2300      	movs	r3, #0
 80064c6:	e7d5      	b.n	8006474 <_dtoa_r+0x22c>
 80064c8:	2401      	movs	r4, #1
 80064ca:	2300      	movs	r3, #0
 80064cc:	9307      	str	r3, [sp, #28]
 80064ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80064d0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80064d4:	2200      	movs	r2, #0
 80064d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80064da:	2312      	movs	r3, #18
 80064dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80064de:	e7db      	b.n	8006498 <_dtoa_r+0x250>
 80064e0:	2301      	movs	r3, #1
 80064e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80064e4:	e7f4      	b.n	80064d0 <_dtoa_r+0x288>
 80064e6:	f04f 0b01 	mov.w	fp, #1
 80064ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80064ee:	465b      	mov	r3, fp
 80064f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80064f4:	e7d0      	b.n	8006498 <_dtoa_r+0x250>
 80064f6:	3101      	adds	r1, #1
 80064f8:	0052      	lsls	r2, r2, #1
 80064fa:	e7d1      	b.n	80064a0 <_dtoa_r+0x258>
 80064fc:	f3af 8000 	nop.w
 8006500:	636f4361 	.word	0x636f4361
 8006504:	3fd287a7 	.word	0x3fd287a7
 8006508:	8b60c8b3 	.word	0x8b60c8b3
 800650c:	3fc68a28 	.word	0x3fc68a28
 8006510:	509f79fb 	.word	0x509f79fb
 8006514:	3fd34413 	.word	0x3fd34413
 8006518:	080083a5 	.word	0x080083a5
 800651c:	080083bc 	.word	0x080083bc
 8006520:	7ff00000 	.word	0x7ff00000
 8006524:	08008375 	.word	0x08008375
 8006528:	3ff80000 	.word	0x3ff80000
 800652c:	08008510 	.word	0x08008510
 8006530:	08008414 	.word	0x08008414
 8006534:	080083a1 	.word	0x080083a1
 8006538:	08008374 	.word	0x08008374
 800653c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006540:	6018      	str	r0, [r3, #0]
 8006542:	9b03      	ldr	r3, [sp, #12]
 8006544:	2b0e      	cmp	r3, #14
 8006546:	f200 80a1 	bhi.w	800668c <_dtoa_r+0x444>
 800654a:	2c00      	cmp	r4, #0
 800654c:	f000 809e 	beq.w	800668c <_dtoa_r+0x444>
 8006550:	2f00      	cmp	r7, #0
 8006552:	dd33      	ble.n	80065bc <_dtoa_r+0x374>
 8006554:	4b9c      	ldr	r3, [pc, #624]	@ (80067c8 <_dtoa_r+0x580>)
 8006556:	f007 020f 	and.w	r2, r7, #15
 800655a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800655e:	ed93 7b00 	vldr	d7, [r3]
 8006562:	05f8      	lsls	r0, r7, #23
 8006564:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006568:	ea4f 1427 	mov.w	r4, r7, asr #4
 800656c:	d516      	bpl.n	800659c <_dtoa_r+0x354>
 800656e:	4b97      	ldr	r3, [pc, #604]	@ (80067cc <_dtoa_r+0x584>)
 8006570:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006574:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006578:	f7fa f970 	bl	800085c <__aeabi_ddiv>
 800657c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006580:	f004 040f 	and.w	r4, r4, #15
 8006584:	2603      	movs	r6, #3
 8006586:	4d91      	ldr	r5, [pc, #580]	@ (80067cc <_dtoa_r+0x584>)
 8006588:	b954      	cbnz	r4, 80065a0 <_dtoa_r+0x358>
 800658a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800658e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006592:	f7fa f963 	bl	800085c <__aeabi_ddiv>
 8006596:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800659a:	e028      	b.n	80065ee <_dtoa_r+0x3a6>
 800659c:	2602      	movs	r6, #2
 800659e:	e7f2      	b.n	8006586 <_dtoa_r+0x33e>
 80065a0:	07e1      	lsls	r1, r4, #31
 80065a2:	d508      	bpl.n	80065b6 <_dtoa_r+0x36e>
 80065a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80065a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065ac:	f7fa f82c 	bl	8000608 <__aeabi_dmul>
 80065b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80065b4:	3601      	adds	r6, #1
 80065b6:	1064      	asrs	r4, r4, #1
 80065b8:	3508      	adds	r5, #8
 80065ba:	e7e5      	b.n	8006588 <_dtoa_r+0x340>
 80065bc:	f000 80af 	beq.w	800671e <_dtoa_r+0x4d6>
 80065c0:	427c      	negs	r4, r7
 80065c2:	4b81      	ldr	r3, [pc, #516]	@ (80067c8 <_dtoa_r+0x580>)
 80065c4:	4d81      	ldr	r5, [pc, #516]	@ (80067cc <_dtoa_r+0x584>)
 80065c6:	f004 020f 	and.w	r2, r4, #15
 80065ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80065d6:	f7fa f817 	bl	8000608 <__aeabi_dmul>
 80065da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065de:	1124      	asrs	r4, r4, #4
 80065e0:	2300      	movs	r3, #0
 80065e2:	2602      	movs	r6, #2
 80065e4:	2c00      	cmp	r4, #0
 80065e6:	f040 808f 	bne.w	8006708 <_dtoa_r+0x4c0>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1d3      	bne.n	8006596 <_dtoa_r+0x34e>
 80065ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80065f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 8094 	beq.w	8006722 <_dtoa_r+0x4da>
 80065fa:	4b75      	ldr	r3, [pc, #468]	@ (80067d0 <_dtoa_r+0x588>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	4620      	mov	r0, r4
 8006600:	4629      	mov	r1, r5
 8006602:	f7fa fa73 	bl	8000aec <__aeabi_dcmplt>
 8006606:	2800      	cmp	r0, #0
 8006608:	f000 808b 	beq.w	8006722 <_dtoa_r+0x4da>
 800660c:	9b03      	ldr	r3, [sp, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 8087 	beq.w	8006722 <_dtoa_r+0x4da>
 8006614:	f1bb 0f00 	cmp.w	fp, #0
 8006618:	dd34      	ble.n	8006684 <_dtoa_r+0x43c>
 800661a:	4620      	mov	r0, r4
 800661c:	4b6d      	ldr	r3, [pc, #436]	@ (80067d4 <_dtoa_r+0x58c>)
 800661e:	2200      	movs	r2, #0
 8006620:	4629      	mov	r1, r5
 8006622:	f7f9 fff1 	bl	8000608 <__aeabi_dmul>
 8006626:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800662a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800662e:	3601      	adds	r6, #1
 8006630:	465c      	mov	r4, fp
 8006632:	4630      	mov	r0, r6
 8006634:	f7f9 ff7e 	bl	8000534 <__aeabi_i2d>
 8006638:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800663c:	f7f9 ffe4 	bl	8000608 <__aeabi_dmul>
 8006640:	4b65      	ldr	r3, [pc, #404]	@ (80067d8 <_dtoa_r+0x590>)
 8006642:	2200      	movs	r2, #0
 8006644:	f7f9 fe2a 	bl	800029c <__adddf3>
 8006648:	4605      	mov	r5, r0
 800664a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800664e:	2c00      	cmp	r4, #0
 8006650:	d16a      	bne.n	8006728 <_dtoa_r+0x4e0>
 8006652:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006656:	4b61      	ldr	r3, [pc, #388]	@ (80067dc <_dtoa_r+0x594>)
 8006658:	2200      	movs	r2, #0
 800665a:	f7f9 fe1d 	bl	8000298 <__aeabi_dsub>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006666:	462a      	mov	r2, r5
 8006668:	4633      	mov	r3, r6
 800666a:	f7fa fa5d 	bl	8000b28 <__aeabi_dcmpgt>
 800666e:	2800      	cmp	r0, #0
 8006670:	f040 8298 	bne.w	8006ba4 <_dtoa_r+0x95c>
 8006674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006678:	462a      	mov	r2, r5
 800667a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800667e:	f7fa fa35 	bl	8000aec <__aeabi_dcmplt>
 8006682:	bb38      	cbnz	r0, 80066d4 <_dtoa_r+0x48c>
 8006684:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006688:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800668c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800668e:	2b00      	cmp	r3, #0
 8006690:	f2c0 8157 	blt.w	8006942 <_dtoa_r+0x6fa>
 8006694:	2f0e      	cmp	r7, #14
 8006696:	f300 8154 	bgt.w	8006942 <_dtoa_r+0x6fa>
 800669a:	4b4b      	ldr	r3, [pc, #300]	@ (80067c8 <_dtoa_r+0x580>)
 800669c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80066a0:	ed93 7b00 	vldr	d7, [r3]
 80066a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	ed8d 7b00 	vstr	d7, [sp]
 80066ac:	f280 80e5 	bge.w	800687a <_dtoa_r+0x632>
 80066b0:	9b03      	ldr	r3, [sp, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f300 80e1 	bgt.w	800687a <_dtoa_r+0x632>
 80066b8:	d10c      	bne.n	80066d4 <_dtoa_r+0x48c>
 80066ba:	4b48      	ldr	r3, [pc, #288]	@ (80067dc <_dtoa_r+0x594>)
 80066bc:	2200      	movs	r2, #0
 80066be:	ec51 0b17 	vmov	r0, r1, d7
 80066c2:	f7f9 ffa1 	bl	8000608 <__aeabi_dmul>
 80066c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066ca:	f7fa fa23 	bl	8000b14 <__aeabi_dcmpge>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	f000 8266 	beq.w	8006ba0 <_dtoa_r+0x958>
 80066d4:	2400      	movs	r4, #0
 80066d6:	4625      	mov	r5, r4
 80066d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066da:	4656      	mov	r6, sl
 80066dc:	ea6f 0803 	mvn.w	r8, r3
 80066e0:	2700      	movs	r7, #0
 80066e2:	4621      	mov	r1, r4
 80066e4:	4648      	mov	r0, r9
 80066e6:	f000 fcbf 	bl	8007068 <_Bfree>
 80066ea:	2d00      	cmp	r5, #0
 80066ec:	f000 80bd 	beq.w	800686a <_dtoa_r+0x622>
 80066f0:	b12f      	cbz	r7, 80066fe <_dtoa_r+0x4b6>
 80066f2:	42af      	cmp	r7, r5
 80066f4:	d003      	beq.n	80066fe <_dtoa_r+0x4b6>
 80066f6:	4639      	mov	r1, r7
 80066f8:	4648      	mov	r0, r9
 80066fa:	f000 fcb5 	bl	8007068 <_Bfree>
 80066fe:	4629      	mov	r1, r5
 8006700:	4648      	mov	r0, r9
 8006702:	f000 fcb1 	bl	8007068 <_Bfree>
 8006706:	e0b0      	b.n	800686a <_dtoa_r+0x622>
 8006708:	07e2      	lsls	r2, r4, #31
 800670a:	d505      	bpl.n	8006718 <_dtoa_r+0x4d0>
 800670c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006710:	f7f9 ff7a 	bl	8000608 <__aeabi_dmul>
 8006714:	3601      	adds	r6, #1
 8006716:	2301      	movs	r3, #1
 8006718:	1064      	asrs	r4, r4, #1
 800671a:	3508      	adds	r5, #8
 800671c:	e762      	b.n	80065e4 <_dtoa_r+0x39c>
 800671e:	2602      	movs	r6, #2
 8006720:	e765      	b.n	80065ee <_dtoa_r+0x3a6>
 8006722:	9c03      	ldr	r4, [sp, #12]
 8006724:	46b8      	mov	r8, r7
 8006726:	e784      	b.n	8006632 <_dtoa_r+0x3ea>
 8006728:	4b27      	ldr	r3, [pc, #156]	@ (80067c8 <_dtoa_r+0x580>)
 800672a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800672c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006730:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006734:	4454      	add	r4, sl
 8006736:	2900      	cmp	r1, #0
 8006738:	d054      	beq.n	80067e4 <_dtoa_r+0x59c>
 800673a:	4929      	ldr	r1, [pc, #164]	@ (80067e0 <_dtoa_r+0x598>)
 800673c:	2000      	movs	r0, #0
 800673e:	f7fa f88d 	bl	800085c <__aeabi_ddiv>
 8006742:	4633      	mov	r3, r6
 8006744:	462a      	mov	r2, r5
 8006746:	f7f9 fda7 	bl	8000298 <__aeabi_dsub>
 800674a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800674e:	4656      	mov	r6, sl
 8006750:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006754:	f7fa fa08 	bl	8000b68 <__aeabi_d2iz>
 8006758:	4605      	mov	r5, r0
 800675a:	f7f9 feeb 	bl	8000534 <__aeabi_i2d>
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006766:	f7f9 fd97 	bl	8000298 <__aeabi_dsub>
 800676a:	3530      	adds	r5, #48	@ 0x30
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006774:	f806 5b01 	strb.w	r5, [r6], #1
 8006778:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800677c:	f7fa f9b6 	bl	8000aec <__aeabi_dcmplt>
 8006780:	2800      	cmp	r0, #0
 8006782:	d172      	bne.n	800686a <_dtoa_r+0x622>
 8006784:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006788:	4911      	ldr	r1, [pc, #68]	@ (80067d0 <_dtoa_r+0x588>)
 800678a:	2000      	movs	r0, #0
 800678c:	f7f9 fd84 	bl	8000298 <__aeabi_dsub>
 8006790:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006794:	f7fa f9aa 	bl	8000aec <__aeabi_dcmplt>
 8006798:	2800      	cmp	r0, #0
 800679a:	f040 80b4 	bne.w	8006906 <_dtoa_r+0x6be>
 800679e:	42a6      	cmp	r6, r4
 80067a0:	f43f af70 	beq.w	8006684 <_dtoa_r+0x43c>
 80067a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80067a8:	4b0a      	ldr	r3, [pc, #40]	@ (80067d4 <_dtoa_r+0x58c>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	f7f9 ff2c 	bl	8000608 <__aeabi_dmul>
 80067b0:	4b08      	ldr	r3, [pc, #32]	@ (80067d4 <_dtoa_r+0x58c>)
 80067b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80067b6:	2200      	movs	r2, #0
 80067b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067bc:	f7f9 ff24 	bl	8000608 <__aeabi_dmul>
 80067c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067c4:	e7c4      	b.n	8006750 <_dtoa_r+0x508>
 80067c6:	bf00      	nop
 80067c8:	08008510 	.word	0x08008510
 80067cc:	080084e8 	.word	0x080084e8
 80067d0:	3ff00000 	.word	0x3ff00000
 80067d4:	40240000 	.word	0x40240000
 80067d8:	401c0000 	.word	0x401c0000
 80067dc:	40140000 	.word	0x40140000
 80067e0:	3fe00000 	.word	0x3fe00000
 80067e4:	4631      	mov	r1, r6
 80067e6:	4628      	mov	r0, r5
 80067e8:	f7f9 ff0e 	bl	8000608 <__aeabi_dmul>
 80067ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80067f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80067f2:	4656      	mov	r6, sl
 80067f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067f8:	f7fa f9b6 	bl	8000b68 <__aeabi_d2iz>
 80067fc:	4605      	mov	r5, r0
 80067fe:	f7f9 fe99 	bl	8000534 <__aeabi_i2d>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800680a:	f7f9 fd45 	bl	8000298 <__aeabi_dsub>
 800680e:	3530      	adds	r5, #48	@ 0x30
 8006810:	f806 5b01 	strb.w	r5, [r6], #1
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	42a6      	cmp	r6, r4
 800681a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800681e:	f04f 0200 	mov.w	r2, #0
 8006822:	d124      	bne.n	800686e <_dtoa_r+0x626>
 8006824:	4baf      	ldr	r3, [pc, #700]	@ (8006ae4 <_dtoa_r+0x89c>)
 8006826:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800682a:	f7f9 fd37 	bl	800029c <__adddf3>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006836:	f7fa f977 	bl	8000b28 <__aeabi_dcmpgt>
 800683a:	2800      	cmp	r0, #0
 800683c:	d163      	bne.n	8006906 <_dtoa_r+0x6be>
 800683e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006842:	49a8      	ldr	r1, [pc, #672]	@ (8006ae4 <_dtoa_r+0x89c>)
 8006844:	2000      	movs	r0, #0
 8006846:	f7f9 fd27 	bl	8000298 <__aeabi_dsub>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006852:	f7fa f94b 	bl	8000aec <__aeabi_dcmplt>
 8006856:	2800      	cmp	r0, #0
 8006858:	f43f af14 	beq.w	8006684 <_dtoa_r+0x43c>
 800685c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800685e:	1e73      	subs	r3, r6, #1
 8006860:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006862:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006866:	2b30      	cmp	r3, #48	@ 0x30
 8006868:	d0f8      	beq.n	800685c <_dtoa_r+0x614>
 800686a:	4647      	mov	r7, r8
 800686c:	e03b      	b.n	80068e6 <_dtoa_r+0x69e>
 800686e:	4b9e      	ldr	r3, [pc, #632]	@ (8006ae8 <_dtoa_r+0x8a0>)
 8006870:	f7f9 feca 	bl	8000608 <__aeabi_dmul>
 8006874:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006878:	e7bc      	b.n	80067f4 <_dtoa_r+0x5ac>
 800687a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800687e:	4656      	mov	r6, sl
 8006880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006884:	4620      	mov	r0, r4
 8006886:	4629      	mov	r1, r5
 8006888:	f7f9 ffe8 	bl	800085c <__aeabi_ddiv>
 800688c:	f7fa f96c 	bl	8000b68 <__aeabi_d2iz>
 8006890:	4680      	mov	r8, r0
 8006892:	f7f9 fe4f 	bl	8000534 <__aeabi_i2d>
 8006896:	e9dd 2300 	ldrd	r2, r3, [sp]
 800689a:	f7f9 feb5 	bl	8000608 <__aeabi_dmul>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4620      	mov	r0, r4
 80068a4:	4629      	mov	r1, r5
 80068a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80068aa:	f7f9 fcf5 	bl	8000298 <__aeabi_dsub>
 80068ae:	f806 4b01 	strb.w	r4, [r6], #1
 80068b2:	9d03      	ldr	r5, [sp, #12]
 80068b4:	eba6 040a 	sub.w	r4, r6, sl
 80068b8:	42a5      	cmp	r5, r4
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	d133      	bne.n	8006928 <_dtoa_r+0x6e0>
 80068c0:	f7f9 fcec 	bl	800029c <__adddf3>
 80068c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068c8:	4604      	mov	r4, r0
 80068ca:	460d      	mov	r5, r1
 80068cc:	f7fa f92c 	bl	8000b28 <__aeabi_dcmpgt>
 80068d0:	b9c0      	cbnz	r0, 8006904 <_dtoa_r+0x6bc>
 80068d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068d6:	4620      	mov	r0, r4
 80068d8:	4629      	mov	r1, r5
 80068da:	f7fa f8fd 	bl	8000ad8 <__aeabi_dcmpeq>
 80068de:	b110      	cbz	r0, 80068e6 <_dtoa_r+0x69e>
 80068e0:	f018 0f01 	tst.w	r8, #1
 80068e4:	d10e      	bne.n	8006904 <_dtoa_r+0x6bc>
 80068e6:	9902      	ldr	r1, [sp, #8]
 80068e8:	4648      	mov	r0, r9
 80068ea:	f000 fbbd 	bl	8007068 <_Bfree>
 80068ee:	2300      	movs	r3, #0
 80068f0:	7033      	strb	r3, [r6, #0]
 80068f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80068f4:	3701      	adds	r7, #1
 80068f6:	601f      	str	r7, [r3, #0]
 80068f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 824b 	beq.w	8006d96 <_dtoa_r+0xb4e>
 8006900:	601e      	str	r6, [r3, #0]
 8006902:	e248      	b.n	8006d96 <_dtoa_r+0xb4e>
 8006904:	46b8      	mov	r8, r7
 8006906:	4633      	mov	r3, r6
 8006908:	461e      	mov	r6, r3
 800690a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800690e:	2a39      	cmp	r2, #57	@ 0x39
 8006910:	d106      	bne.n	8006920 <_dtoa_r+0x6d8>
 8006912:	459a      	cmp	sl, r3
 8006914:	d1f8      	bne.n	8006908 <_dtoa_r+0x6c0>
 8006916:	2230      	movs	r2, #48	@ 0x30
 8006918:	f108 0801 	add.w	r8, r8, #1
 800691c:	f88a 2000 	strb.w	r2, [sl]
 8006920:	781a      	ldrb	r2, [r3, #0]
 8006922:	3201      	adds	r2, #1
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	e7a0      	b.n	800686a <_dtoa_r+0x622>
 8006928:	4b6f      	ldr	r3, [pc, #444]	@ (8006ae8 <_dtoa_r+0x8a0>)
 800692a:	2200      	movs	r2, #0
 800692c:	f7f9 fe6c 	bl	8000608 <__aeabi_dmul>
 8006930:	2200      	movs	r2, #0
 8006932:	2300      	movs	r3, #0
 8006934:	4604      	mov	r4, r0
 8006936:	460d      	mov	r5, r1
 8006938:	f7fa f8ce 	bl	8000ad8 <__aeabi_dcmpeq>
 800693c:	2800      	cmp	r0, #0
 800693e:	d09f      	beq.n	8006880 <_dtoa_r+0x638>
 8006940:	e7d1      	b.n	80068e6 <_dtoa_r+0x69e>
 8006942:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006944:	2a00      	cmp	r2, #0
 8006946:	f000 80ea 	beq.w	8006b1e <_dtoa_r+0x8d6>
 800694a:	9a07      	ldr	r2, [sp, #28]
 800694c:	2a01      	cmp	r2, #1
 800694e:	f300 80cd 	bgt.w	8006aec <_dtoa_r+0x8a4>
 8006952:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006954:	2a00      	cmp	r2, #0
 8006956:	f000 80c1 	beq.w	8006adc <_dtoa_r+0x894>
 800695a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800695e:	9c08      	ldr	r4, [sp, #32]
 8006960:	9e00      	ldr	r6, [sp, #0]
 8006962:	9a00      	ldr	r2, [sp, #0]
 8006964:	441a      	add	r2, r3
 8006966:	9200      	str	r2, [sp, #0]
 8006968:	9a06      	ldr	r2, [sp, #24]
 800696a:	2101      	movs	r1, #1
 800696c:	441a      	add	r2, r3
 800696e:	4648      	mov	r0, r9
 8006970:	9206      	str	r2, [sp, #24]
 8006972:	f000 fc2d 	bl	80071d0 <__i2b>
 8006976:	4605      	mov	r5, r0
 8006978:	b166      	cbz	r6, 8006994 <_dtoa_r+0x74c>
 800697a:	9b06      	ldr	r3, [sp, #24]
 800697c:	2b00      	cmp	r3, #0
 800697e:	dd09      	ble.n	8006994 <_dtoa_r+0x74c>
 8006980:	42b3      	cmp	r3, r6
 8006982:	9a00      	ldr	r2, [sp, #0]
 8006984:	bfa8      	it	ge
 8006986:	4633      	movge	r3, r6
 8006988:	1ad2      	subs	r2, r2, r3
 800698a:	9200      	str	r2, [sp, #0]
 800698c:	9a06      	ldr	r2, [sp, #24]
 800698e:	1af6      	subs	r6, r6, r3
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	9306      	str	r3, [sp, #24]
 8006994:	9b08      	ldr	r3, [sp, #32]
 8006996:	b30b      	cbz	r3, 80069dc <_dtoa_r+0x794>
 8006998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 80c6 	beq.w	8006b2c <_dtoa_r+0x8e4>
 80069a0:	2c00      	cmp	r4, #0
 80069a2:	f000 80c0 	beq.w	8006b26 <_dtoa_r+0x8de>
 80069a6:	4629      	mov	r1, r5
 80069a8:	4622      	mov	r2, r4
 80069aa:	4648      	mov	r0, r9
 80069ac:	f000 fcc8 	bl	8007340 <__pow5mult>
 80069b0:	9a02      	ldr	r2, [sp, #8]
 80069b2:	4601      	mov	r1, r0
 80069b4:	4605      	mov	r5, r0
 80069b6:	4648      	mov	r0, r9
 80069b8:	f000 fc20 	bl	80071fc <__multiply>
 80069bc:	9902      	ldr	r1, [sp, #8]
 80069be:	4680      	mov	r8, r0
 80069c0:	4648      	mov	r0, r9
 80069c2:	f000 fb51 	bl	8007068 <_Bfree>
 80069c6:	9b08      	ldr	r3, [sp, #32]
 80069c8:	1b1b      	subs	r3, r3, r4
 80069ca:	9308      	str	r3, [sp, #32]
 80069cc:	f000 80b1 	beq.w	8006b32 <_dtoa_r+0x8ea>
 80069d0:	9a08      	ldr	r2, [sp, #32]
 80069d2:	4641      	mov	r1, r8
 80069d4:	4648      	mov	r0, r9
 80069d6:	f000 fcb3 	bl	8007340 <__pow5mult>
 80069da:	9002      	str	r0, [sp, #8]
 80069dc:	2101      	movs	r1, #1
 80069de:	4648      	mov	r0, r9
 80069e0:	f000 fbf6 	bl	80071d0 <__i2b>
 80069e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069e6:	4604      	mov	r4, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 81d8 	beq.w	8006d9e <_dtoa_r+0xb56>
 80069ee:	461a      	mov	r2, r3
 80069f0:	4601      	mov	r1, r0
 80069f2:	4648      	mov	r0, r9
 80069f4:	f000 fca4 	bl	8007340 <__pow5mult>
 80069f8:	9b07      	ldr	r3, [sp, #28]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	4604      	mov	r4, r0
 80069fe:	f300 809f 	bgt.w	8006b40 <_dtoa_r+0x8f8>
 8006a02:	9b04      	ldr	r3, [sp, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f040 8097 	bne.w	8006b38 <_dtoa_r+0x8f0>
 8006a0a:	9b05      	ldr	r3, [sp, #20]
 8006a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f040 8093 	bne.w	8006b3c <_dtoa_r+0x8f4>
 8006a16:	9b05      	ldr	r3, [sp, #20]
 8006a18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a1c:	0d1b      	lsrs	r3, r3, #20
 8006a1e:	051b      	lsls	r3, r3, #20
 8006a20:	b133      	cbz	r3, 8006a30 <_dtoa_r+0x7e8>
 8006a22:	9b00      	ldr	r3, [sp, #0]
 8006a24:	3301      	adds	r3, #1
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	9b06      	ldr	r3, [sp, #24]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	9306      	str	r3, [sp, #24]
 8006a2e:	2301      	movs	r3, #1
 8006a30:	9308      	str	r3, [sp, #32]
 8006a32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 81b8 	beq.w	8006daa <_dtoa_r+0xb62>
 8006a3a:	6923      	ldr	r3, [r4, #16]
 8006a3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a40:	6918      	ldr	r0, [r3, #16]
 8006a42:	f000 fb79 	bl	8007138 <__hi0bits>
 8006a46:	f1c0 0020 	rsb	r0, r0, #32
 8006a4a:	9b06      	ldr	r3, [sp, #24]
 8006a4c:	4418      	add	r0, r3
 8006a4e:	f010 001f 	ands.w	r0, r0, #31
 8006a52:	f000 8082 	beq.w	8006b5a <_dtoa_r+0x912>
 8006a56:	f1c0 0320 	rsb	r3, r0, #32
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	dd73      	ble.n	8006b46 <_dtoa_r+0x8fe>
 8006a5e:	9b00      	ldr	r3, [sp, #0]
 8006a60:	f1c0 001c 	rsb	r0, r0, #28
 8006a64:	4403      	add	r3, r0
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	9b06      	ldr	r3, [sp, #24]
 8006a6a:	4403      	add	r3, r0
 8006a6c:	4406      	add	r6, r0
 8006a6e:	9306      	str	r3, [sp, #24]
 8006a70:	9b00      	ldr	r3, [sp, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	dd05      	ble.n	8006a82 <_dtoa_r+0x83a>
 8006a76:	9902      	ldr	r1, [sp, #8]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4648      	mov	r0, r9
 8006a7c:	f000 fcba 	bl	80073f4 <__lshift>
 8006a80:	9002      	str	r0, [sp, #8]
 8006a82:	9b06      	ldr	r3, [sp, #24]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	dd05      	ble.n	8006a94 <_dtoa_r+0x84c>
 8006a88:	4621      	mov	r1, r4
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	4648      	mov	r0, r9
 8006a8e:	f000 fcb1 	bl	80073f4 <__lshift>
 8006a92:	4604      	mov	r4, r0
 8006a94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d061      	beq.n	8006b5e <_dtoa_r+0x916>
 8006a9a:	9802      	ldr	r0, [sp, #8]
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	f000 fd15 	bl	80074cc <__mcmp>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	da5b      	bge.n	8006b5e <_dtoa_r+0x916>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	9902      	ldr	r1, [sp, #8]
 8006aaa:	220a      	movs	r2, #10
 8006aac:	4648      	mov	r0, r9
 8006aae:	f000 fafd 	bl	80070ac <__multadd>
 8006ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab4:	9002      	str	r0, [sp, #8]
 8006ab6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 8177 	beq.w	8006dae <_dtoa_r+0xb66>
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	220a      	movs	r2, #10
 8006ac6:	4648      	mov	r0, r9
 8006ac8:	f000 faf0 	bl	80070ac <__multadd>
 8006acc:	f1bb 0f00 	cmp.w	fp, #0
 8006ad0:	4605      	mov	r5, r0
 8006ad2:	dc6f      	bgt.n	8006bb4 <_dtoa_r+0x96c>
 8006ad4:	9b07      	ldr	r3, [sp, #28]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	dc49      	bgt.n	8006b6e <_dtoa_r+0x926>
 8006ada:	e06b      	b.n	8006bb4 <_dtoa_r+0x96c>
 8006adc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006ade:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006ae2:	e73c      	b.n	800695e <_dtoa_r+0x716>
 8006ae4:	3fe00000 	.word	0x3fe00000
 8006ae8:	40240000 	.word	0x40240000
 8006aec:	9b03      	ldr	r3, [sp, #12]
 8006aee:	1e5c      	subs	r4, r3, #1
 8006af0:	9b08      	ldr	r3, [sp, #32]
 8006af2:	42a3      	cmp	r3, r4
 8006af4:	db09      	blt.n	8006b0a <_dtoa_r+0x8c2>
 8006af6:	1b1c      	subs	r4, r3, r4
 8006af8:	9b03      	ldr	r3, [sp, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f6bf af30 	bge.w	8006960 <_dtoa_r+0x718>
 8006b00:	9b00      	ldr	r3, [sp, #0]
 8006b02:	9a03      	ldr	r2, [sp, #12]
 8006b04:	1a9e      	subs	r6, r3, r2
 8006b06:	2300      	movs	r3, #0
 8006b08:	e72b      	b.n	8006962 <_dtoa_r+0x71a>
 8006b0a:	9b08      	ldr	r3, [sp, #32]
 8006b0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006b0e:	9408      	str	r4, [sp, #32]
 8006b10:	1ae3      	subs	r3, r4, r3
 8006b12:	441a      	add	r2, r3
 8006b14:	9e00      	ldr	r6, [sp, #0]
 8006b16:	9b03      	ldr	r3, [sp, #12]
 8006b18:	920d      	str	r2, [sp, #52]	@ 0x34
 8006b1a:	2400      	movs	r4, #0
 8006b1c:	e721      	b.n	8006962 <_dtoa_r+0x71a>
 8006b1e:	9c08      	ldr	r4, [sp, #32]
 8006b20:	9e00      	ldr	r6, [sp, #0]
 8006b22:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006b24:	e728      	b.n	8006978 <_dtoa_r+0x730>
 8006b26:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006b2a:	e751      	b.n	80069d0 <_dtoa_r+0x788>
 8006b2c:	9a08      	ldr	r2, [sp, #32]
 8006b2e:	9902      	ldr	r1, [sp, #8]
 8006b30:	e750      	b.n	80069d4 <_dtoa_r+0x78c>
 8006b32:	f8cd 8008 	str.w	r8, [sp, #8]
 8006b36:	e751      	b.n	80069dc <_dtoa_r+0x794>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	e779      	b.n	8006a30 <_dtoa_r+0x7e8>
 8006b3c:	9b04      	ldr	r3, [sp, #16]
 8006b3e:	e777      	b.n	8006a30 <_dtoa_r+0x7e8>
 8006b40:	2300      	movs	r3, #0
 8006b42:	9308      	str	r3, [sp, #32]
 8006b44:	e779      	b.n	8006a3a <_dtoa_r+0x7f2>
 8006b46:	d093      	beq.n	8006a70 <_dtoa_r+0x828>
 8006b48:	9a00      	ldr	r2, [sp, #0]
 8006b4a:	331c      	adds	r3, #28
 8006b4c:	441a      	add	r2, r3
 8006b4e:	9200      	str	r2, [sp, #0]
 8006b50:	9a06      	ldr	r2, [sp, #24]
 8006b52:	441a      	add	r2, r3
 8006b54:	441e      	add	r6, r3
 8006b56:	9206      	str	r2, [sp, #24]
 8006b58:	e78a      	b.n	8006a70 <_dtoa_r+0x828>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	e7f4      	b.n	8006b48 <_dtoa_r+0x900>
 8006b5e:	9b03      	ldr	r3, [sp, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	46b8      	mov	r8, r7
 8006b64:	dc20      	bgt.n	8006ba8 <_dtoa_r+0x960>
 8006b66:	469b      	mov	fp, r3
 8006b68:	9b07      	ldr	r3, [sp, #28]
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	dd1e      	ble.n	8006bac <_dtoa_r+0x964>
 8006b6e:	f1bb 0f00 	cmp.w	fp, #0
 8006b72:	f47f adb1 	bne.w	80066d8 <_dtoa_r+0x490>
 8006b76:	4621      	mov	r1, r4
 8006b78:	465b      	mov	r3, fp
 8006b7a:	2205      	movs	r2, #5
 8006b7c:	4648      	mov	r0, r9
 8006b7e:	f000 fa95 	bl	80070ac <__multadd>
 8006b82:	4601      	mov	r1, r0
 8006b84:	4604      	mov	r4, r0
 8006b86:	9802      	ldr	r0, [sp, #8]
 8006b88:	f000 fca0 	bl	80074cc <__mcmp>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	f77f ada3 	ble.w	80066d8 <_dtoa_r+0x490>
 8006b92:	4656      	mov	r6, sl
 8006b94:	2331      	movs	r3, #49	@ 0x31
 8006b96:	f806 3b01 	strb.w	r3, [r6], #1
 8006b9a:	f108 0801 	add.w	r8, r8, #1
 8006b9e:	e59f      	b.n	80066e0 <_dtoa_r+0x498>
 8006ba0:	9c03      	ldr	r4, [sp, #12]
 8006ba2:	46b8      	mov	r8, r7
 8006ba4:	4625      	mov	r5, r4
 8006ba6:	e7f4      	b.n	8006b92 <_dtoa_r+0x94a>
 8006ba8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 8101 	beq.w	8006db6 <_dtoa_r+0xb6e>
 8006bb4:	2e00      	cmp	r6, #0
 8006bb6:	dd05      	ble.n	8006bc4 <_dtoa_r+0x97c>
 8006bb8:	4629      	mov	r1, r5
 8006bba:	4632      	mov	r2, r6
 8006bbc:	4648      	mov	r0, r9
 8006bbe:	f000 fc19 	bl	80073f4 <__lshift>
 8006bc2:	4605      	mov	r5, r0
 8006bc4:	9b08      	ldr	r3, [sp, #32]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d05c      	beq.n	8006c84 <_dtoa_r+0xa3c>
 8006bca:	6869      	ldr	r1, [r5, #4]
 8006bcc:	4648      	mov	r0, r9
 8006bce:	f000 fa0b 	bl	8006fe8 <_Balloc>
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	b928      	cbnz	r0, 8006be2 <_dtoa_r+0x99a>
 8006bd6:	4b82      	ldr	r3, [pc, #520]	@ (8006de0 <_dtoa_r+0xb98>)
 8006bd8:	4602      	mov	r2, r0
 8006bda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006bde:	f7ff bb4a 	b.w	8006276 <_dtoa_r+0x2e>
 8006be2:	692a      	ldr	r2, [r5, #16]
 8006be4:	3202      	adds	r2, #2
 8006be6:	0092      	lsls	r2, r2, #2
 8006be8:	f105 010c 	add.w	r1, r5, #12
 8006bec:	300c      	adds	r0, #12
 8006bee:	f000 ffa3 	bl	8007b38 <memcpy>
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	4648      	mov	r0, r9
 8006bf8:	f000 fbfc 	bl	80073f4 <__lshift>
 8006bfc:	f10a 0301 	add.w	r3, sl, #1
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	eb0a 030b 	add.w	r3, sl, fp
 8006c06:	9308      	str	r3, [sp, #32]
 8006c08:	9b04      	ldr	r3, [sp, #16]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	462f      	mov	r7, r5
 8006c10:	9306      	str	r3, [sp, #24]
 8006c12:	4605      	mov	r5, r0
 8006c14:	9b00      	ldr	r3, [sp, #0]
 8006c16:	9802      	ldr	r0, [sp, #8]
 8006c18:	4621      	mov	r1, r4
 8006c1a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8006c1e:	f7ff fa88 	bl	8006132 <quorem>
 8006c22:	4603      	mov	r3, r0
 8006c24:	3330      	adds	r3, #48	@ 0x30
 8006c26:	9003      	str	r0, [sp, #12]
 8006c28:	4639      	mov	r1, r7
 8006c2a:	9802      	ldr	r0, [sp, #8]
 8006c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c2e:	f000 fc4d 	bl	80074cc <__mcmp>
 8006c32:	462a      	mov	r2, r5
 8006c34:	9004      	str	r0, [sp, #16]
 8006c36:	4621      	mov	r1, r4
 8006c38:	4648      	mov	r0, r9
 8006c3a:	f000 fc63 	bl	8007504 <__mdiff>
 8006c3e:	68c2      	ldr	r2, [r0, #12]
 8006c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c42:	4606      	mov	r6, r0
 8006c44:	bb02      	cbnz	r2, 8006c88 <_dtoa_r+0xa40>
 8006c46:	4601      	mov	r1, r0
 8006c48:	9802      	ldr	r0, [sp, #8]
 8006c4a:	f000 fc3f 	bl	80074cc <__mcmp>
 8006c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c50:	4602      	mov	r2, r0
 8006c52:	4631      	mov	r1, r6
 8006c54:	4648      	mov	r0, r9
 8006c56:	920c      	str	r2, [sp, #48]	@ 0x30
 8006c58:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c5a:	f000 fa05 	bl	8007068 <_Bfree>
 8006c5e:	9b07      	ldr	r3, [sp, #28]
 8006c60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006c62:	9e00      	ldr	r6, [sp, #0]
 8006c64:	ea42 0103 	orr.w	r1, r2, r3
 8006c68:	9b06      	ldr	r3, [sp, #24]
 8006c6a:	4319      	orrs	r1, r3
 8006c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c6e:	d10d      	bne.n	8006c8c <_dtoa_r+0xa44>
 8006c70:	2b39      	cmp	r3, #57	@ 0x39
 8006c72:	d027      	beq.n	8006cc4 <_dtoa_r+0xa7c>
 8006c74:	9a04      	ldr	r2, [sp, #16]
 8006c76:	2a00      	cmp	r2, #0
 8006c78:	dd01      	ble.n	8006c7e <_dtoa_r+0xa36>
 8006c7a:	9b03      	ldr	r3, [sp, #12]
 8006c7c:	3331      	adds	r3, #49	@ 0x31
 8006c7e:	f88b 3000 	strb.w	r3, [fp]
 8006c82:	e52e      	b.n	80066e2 <_dtoa_r+0x49a>
 8006c84:	4628      	mov	r0, r5
 8006c86:	e7b9      	b.n	8006bfc <_dtoa_r+0x9b4>
 8006c88:	2201      	movs	r2, #1
 8006c8a:	e7e2      	b.n	8006c52 <_dtoa_r+0xa0a>
 8006c8c:	9904      	ldr	r1, [sp, #16]
 8006c8e:	2900      	cmp	r1, #0
 8006c90:	db04      	blt.n	8006c9c <_dtoa_r+0xa54>
 8006c92:	9807      	ldr	r0, [sp, #28]
 8006c94:	4301      	orrs	r1, r0
 8006c96:	9806      	ldr	r0, [sp, #24]
 8006c98:	4301      	orrs	r1, r0
 8006c9a:	d120      	bne.n	8006cde <_dtoa_r+0xa96>
 8006c9c:	2a00      	cmp	r2, #0
 8006c9e:	ddee      	ble.n	8006c7e <_dtoa_r+0xa36>
 8006ca0:	9902      	ldr	r1, [sp, #8]
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	4648      	mov	r0, r9
 8006ca8:	f000 fba4 	bl	80073f4 <__lshift>
 8006cac:	4621      	mov	r1, r4
 8006cae:	9002      	str	r0, [sp, #8]
 8006cb0:	f000 fc0c 	bl	80074cc <__mcmp>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	9b00      	ldr	r3, [sp, #0]
 8006cb8:	dc02      	bgt.n	8006cc0 <_dtoa_r+0xa78>
 8006cba:	d1e0      	bne.n	8006c7e <_dtoa_r+0xa36>
 8006cbc:	07da      	lsls	r2, r3, #31
 8006cbe:	d5de      	bpl.n	8006c7e <_dtoa_r+0xa36>
 8006cc0:	2b39      	cmp	r3, #57	@ 0x39
 8006cc2:	d1da      	bne.n	8006c7a <_dtoa_r+0xa32>
 8006cc4:	2339      	movs	r3, #57	@ 0x39
 8006cc6:	f88b 3000 	strb.w	r3, [fp]
 8006cca:	4633      	mov	r3, r6
 8006ccc:	461e      	mov	r6, r3
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006cd4:	2a39      	cmp	r2, #57	@ 0x39
 8006cd6:	d04e      	beq.n	8006d76 <_dtoa_r+0xb2e>
 8006cd8:	3201      	adds	r2, #1
 8006cda:	701a      	strb	r2, [r3, #0]
 8006cdc:	e501      	b.n	80066e2 <_dtoa_r+0x49a>
 8006cde:	2a00      	cmp	r2, #0
 8006ce0:	dd03      	ble.n	8006cea <_dtoa_r+0xaa2>
 8006ce2:	2b39      	cmp	r3, #57	@ 0x39
 8006ce4:	d0ee      	beq.n	8006cc4 <_dtoa_r+0xa7c>
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	e7c9      	b.n	8006c7e <_dtoa_r+0xa36>
 8006cea:	9a00      	ldr	r2, [sp, #0]
 8006cec:	9908      	ldr	r1, [sp, #32]
 8006cee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006cf2:	428a      	cmp	r2, r1
 8006cf4:	d028      	beq.n	8006d48 <_dtoa_r+0xb00>
 8006cf6:	9902      	ldr	r1, [sp, #8]
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	220a      	movs	r2, #10
 8006cfc:	4648      	mov	r0, r9
 8006cfe:	f000 f9d5 	bl	80070ac <__multadd>
 8006d02:	42af      	cmp	r7, r5
 8006d04:	9002      	str	r0, [sp, #8]
 8006d06:	f04f 0300 	mov.w	r3, #0
 8006d0a:	f04f 020a 	mov.w	r2, #10
 8006d0e:	4639      	mov	r1, r7
 8006d10:	4648      	mov	r0, r9
 8006d12:	d107      	bne.n	8006d24 <_dtoa_r+0xadc>
 8006d14:	f000 f9ca 	bl	80070ac <__multadd>
 8006d18:	4607      	mov	r7, r0
 8006d1a:	4605      	mov	r5, r0
 8006d1c:	9b00      	ldr	r3, [sp, #0]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	e777      	b.n	8006c14 <_dtoa_r+0x9cc>
 8006d24:	f000 f9c2 	bl	80070ac <__multadd>
 8006d28:	4629      	mov	r1, r5
 8006d2a:	4607      	mov	r7, r0
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	220a      	movs	r2, #10
 8006d30:	4648      	mov	r0, r9
 8006d32:	f000 f9bb 	bl	80070ac <__multadd>
 8006d36:	4605      	mov	r5, r0
 8006d38:	e7f0      	b.n	8006d1c <_dtoa_r+0xad4>
 8006d3a:	f1bb 0f00 	cmp.w	fp, #0
 8006d3e:	bfcc      	ite	gt
 8006d40:	465e      	movgt	r6, fp
 8006d42:	2601      	movle	r6, #1
 8006d44:	4456      	add	r6, sl
 8006d46:	2700      	movs	r7, #0
 8006d48:	9902      	ldr	r1, [sp, #8]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	4648      	mov	r0, r9
 8006d50:	f000 fb50 	bl	80073f4 <__lshift>
 8006d54:	4621      	mov	r1, r4
 8006d56:	9002      	str	r0, [sp, #8]
 8006d58:	f000 fbb8 	bl	80074cc <__mcmp>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	dcb4      	bgt.n	8006cca <_dtoa_r+0xa82>
 8006d60:	d102      	bne.n	8006d68 <_dtoa_r+0xb20>
 8006d62:	9b00      	ldr	r3, [sp, #0]
 8006d64:	07db      	lsls	r3, r3, #31
 8006d66:	d4b0      	bmi.n	8006cca <_dtoa_r+0xa82>
 8006d68:	4633      	mov	r3, r6
 8006d6a:	461e      	mov	r6, r3
 8006d6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d70:	2a30      	cmp	r2, #48	@ 0x30
 8006d72:	d0fa      	beq.n	8006d6a <_dtoa_r+0xb22>
 8006d74:	e4b5      	b.n	80066e2 <_dtoa_r+0x49a>
 8006d76:	459a      	cmp	sl, r3
 8006d78:	d1a8      	bne.n	8006ccc <_dtoa_r+0xa84>
 8006d7a:	2331      	movs	r3, #49	@ 0x31
 8006d7c:	f108 0801 	add.w	r8, r8, #1
 8006d80:	f88a 3000 	strb.w	r3, [sl]
 8006d84:	e4ad      	b.n	80066e2 <_dtoa_r+0x49a>
 8006d86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006de4 <_dtoa_r+0xb9c>
 8006d8c:	b11b      	cbz	r3, 8006d96 <_dtoa_r+0xb4e>
 8006d8e:	f10a 0308 	add.w	r3, sl, #8
 8006d92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	4650      	mov	r0, sl
 8006d98:	b017      	add	sp, #92	@ 0x5c
 8006d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d9e:	9b07      	ldr	r3, [sp, #28]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	f77f ae2e 	ble.w	8006a02 <_dtoa_r+0x7ba>
 8006da6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006da8:	9308      	str	r3, [sp, #32]
 8006daa:	2001      	movs	r0, #1
 8006dac:	e64d      	b.n	8006a4a <_dtoa_r+0x802>
 8006dae:	f1bb 0f00 	cmp.w	fp, #0
 8006db2:	f77f aed9 	ble.w	8006b68 <_dtoa_r+0x920>
 8006db6:	4656      	mov	r6, sl
 8006db8:	9802      	ldr	r0, [sp, #8]
 8006dba:	4621      	mov	r1, r4
 8006dbc:	f7ff f9b9 	bl	8006132 <quorem>
 8006dc0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006dc4:	f806 3b01 	strb.w	r3, [r6], #1
 8006dc8:	eba6 020a 	sub.w	r2, r6, sl
 8006dcc:	4593      	cmp	fp, r2
 8006dce:	ddb4      	ble.n	8006d3a <_dtoa_r+0xaf2>
 8006dd0:	9902      	ldr	r1, [sp, #8]
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	220a      	movs	r2, #10
 8006dd6:	4648      	mov	r0, r9
 8006dd8:	f000 f968 	bl	80070ac <__multadd>
 8006ddc:	9002      	str	r0, [sp, #8]
 8006dde:	e7eb      	b.n	8006db8 <_dtoa_r+0xb70>
 8006de0:	08008414 	.word	0x08008414
 8006de4:	08008398 	.word	0x08008398

08006de8 <_free_r>:
 8006de8:	b538      	push	{r3, r4, r5, lr}
 8006dea:	4605      	mov	r5, r0
 8006dec:	2900      	cmp	r1, #0
 8006dee:	d041      	beq.n	8006e74 <_free_r+0x8c>
 8006df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006df4:	1f0c      	subs	r4, r1, #4
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	bfb8      	it	lt
 8006dfa:	18e4      	addlt	r4, r4, r3
 8006dfc:	f000 f8e8 	bl	8006fd0 <__malloc_lock>
 8006e00:	4a1d      	ldr	r2, [pc, #116]	@ (8006e78 <_free_r+0x90>)
 8006e02:	6813      	ldr	r3, [r2, #0]
 8006e04:	b933      	cbnz	r3, 8006e14 <_free_r+0x2c>
 8006e06:	6063      	str	r3, [r4, #4]
 8006e08:	6014      	str	r4, [r2, #0]
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e10:	f000 b8e4 	b.w	8006fdc <__malloc_unlock>
 8006e14:	42a3      	cmp	r3, r4
 8006e16:	d908      	bls.n	8006e2a <_free_r+0x42>
 8006e18:	6820      	ldr	r0, [r4, #0]
 8006e1a:	1821      	adds	r1, r4, r0
 8006e1c:	428b      	cmp	r3, r1
 8006e1e:	bf01      	itttt	eq
 8006e20:	6819      	ldreq	r1, [r3, #0]
 8006e22:	685b      	ldreq	r3, [r3, #4]
 8006e24:	1809      	addeq	r1, r1, r0
 8006e26:	6021      	streq	r1, [r4, #0]
 8006e28:	e7ed      	b.n	8006e06 <_free_r+0x1e>
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	b10b      	cbz	r3, 8006e34 <_free_r+0x4c>
 8006e30:	42a3      	cmp	r3, r4
 8006e32:	d9fa      	bls.n	8006e2a <_free_r+0x42>
 8006e34:	6811      	ldr	r1, [r2, #0]
 8006e36:	1850      	adds	r0, r2, r1
 8006e38:	42a0      	cmp	r0, r4
 8006e3a:	d10b      	bne.n	8006e54 <_free_r+0x6c>
 8006e3c:	6820      	ldr	r0, [r4, #0]
 8006e3e:	4401      	add	r1, r0
 8006e40:	1850      	adds	r0, r2, r1
 8006e42:	4283      	cmp	r3, r0
 8006e44:	6011      	str	r1, [r2, #0]
 8006e46:	d1e0      	bne.n	8006e0a <_free_r+0x22>
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	6053      	str	r3, [r2, #4]
 8006e4e:	4408      	add	r0, r1
 8006e50:	6010      	str	r0, [r2, #0]
 8006e52:	e7da      	b.n	8006e0a <_free_r+0x22>
 8006e54:	d902      	bls.n	8006e5c <_free_r+0x74>
 8006e56:	230c      	movs	r3, #12
 8006e58:	602b      	str	r3, [r5, #0]
 8006e5a:	e7d6      	b.n	8006e0a <_free_r+0x22>
 8006e5c:	6820      	ldr	r0, [r4, #0]
 8006e5e:	1821      	adds	r1, r4, r0
 8006e60:	428b      	cmp	r3, r1
 8006e62:	bf04      	itt	eq
 8006e64:	6819      	ldreq	r1, [r3, #0]
 8006e66:	685b      	ldreq	r3, [r3, #4]
 8006e68:	6063      	str	r3, [r4, #4]
 8006e6a:	bf04      	itt	eq
 8006e6c:	1809      	addeq	r1, r1, r0
 8006e6e:	6021      	streq	r1, [r4, #0]
 8006e70:	6054      	str	r4, [r2, #4]
 8006e72:	e7ca      	b.n	8006e0a <_free_r+0x22>
 8006e74:	bd38      	pop	{r3, r4, r5, pc}
 8006e76:	bf00      	nop
 8006e78:	20000464 	.word	0x20000464

08006e7c <malloc>:
 8006e7c:	4b02      	ldr	r3, [pc, #8]	@ (8006e88 <malloc+0xc>)
 8006e7e:	4601      	mov	r1, r0
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	f000 b825 	b.w	8006ed0 <_malloc_r>
 8006e86:	bf00      	nop
 8006e88:	20000018 	.word	0x20000018

08006e8c <sbrk_aligned>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	4e0f      	ldr	r6, [pc, #60]	@ (8006ecc <sbrk_aligned+0x40>)
 8006e90:	460c      	mov	r4, r1
 8006e92:	6831      	ldr	r1, [r6, #0]
 8006e94:	4605      	mov	r5, r0
 8006e96:	b911      	cbnz	r1, 8006e9e <sbrk_aligned+0x12>
 8006e98:	f000 fe3e 	bl	8007b18 <_sbrk_r>
 8006e9c:	6030      	str	r0, [r6, #0]
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	f000 fe39 	bl	8007b18 <_sbrk_r>
 8006ea6:	1c43      	adds	r3, r0, #1
 8006ea8:	d103      	bne.n	8006eb2 <sbrk_aligned+0x26>
 8006eaa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006eae:	4620      	mov	r0, r4
 8006eb0:	bd70      	pop	{r4, r5, r6, pc}
 8006eb2:	1cc4      	adds	r4, r0, #3
 8006eb4:	f024 0403 	bic.w	r4, r4, #3
 8006eb8:	42a0      	cmp	r0, r4
 8006eba:	d0f8      	beq.n	8006eae <sbrk_aligned+0x22>
 8006ebc:	1a21      	subs	r1, r4, r0
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f000 fe2a 	bl	8007b18 <_sbrk_r>
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d1f2      	bne.n	8006eae <sbrk_aligned+0x22>
 8006ec8:	e7ef      	b.n	8006eaa <sbrk_aligned+0x1e>
 8006eca:	bf00      	nop
 8006ecc:	20000460 	.word	0x20000460

08006ed0 <_malloc_r>:
 8006ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ed4:	1ccd      	adds	r5, r1, #3
 8006ed6:	f025 0503 	bic.w	r5, r5, #3
 8006eda:	3508      	adds	r5, #8
 8006edc:	2d0c      	cmp	r5, #12
 8006ede:	bf38      	it	cc
 8006ee0:	250c      	movcc	r5, #12
 8006ee2:	2d00      	cmp	r5, #0
 8006ee4:	4606      	mov	r6, r0
 8006ee6:	db01      	blt.n	8006eec <_malloc_r+0x1c>
 8006ee8:	42a9      	cmp	r1, r5
 8006eea:	d904      	bls.n	8006ef6 <_malloc_r+0x26>
 8006eec:	230c      	movs	r3, #12
 8006eee:	6033      	str	r3, [r6, #0]
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ef6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006fcc <_malloc_r+0xfc>
 8006efa:	f000 f869 	bl	8006fd0 <__malloc_lock>
 8006efe:	f8d8 3000 	ldr.w	r3, [r8]
 8006f02:	461c      	mov	r4, r3
 8006f04:	bb44      	cbnz	r4, 8006f58 <_malloc_r+0x88>
 8006f06:	4629      	mov	r1, r5
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f7ff ffbf 	bl	8006e8c <sbrk_aligned>
 8006f0e:	1c43      	adds	r3, r0, #1
 8006f10:	4604      	mov	r4, r0
 8006f12:	d158      	bne.n	8006fc6 <_malloc_r+0xf6>
 8006f14:	f8d8 4000 	ldr.w	r4, [r8]
 8006f18:	4627      	mov	r7, r4
 8006f1a:	2f00      	cmp	r7, #0
 8006f1c:	d143      	bne.n	8006fa6 <_malloc_r+0xd6>
 8006f1e:	2c00      	cmp	r4, #0
 8006f20:	d04b      	beq.n	8006fba <_malloc_r+0xea>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	4639      	mov	r1, r7
 8006f26:	4630      	mov	r0, r6
 8006f28:	eb04 0903 	add.w	r9, r4, r3
 8006f2c:	f000 fdf4 	bl	8007b18 <_sbrk_r>
 8006f30:	4581      	cmp	r9, r0
 8006f32:	d142      	bne.n	8006fba <_malloc_r+0xea>
 8006f34:	6821      	ldr	r1, [r4, #0]
 8006f36:	1a6d      	subs	r5, r5, r1
 8006f38:	4629      	mov	r1, r5
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f7ff ffa6 	bl	8006e8c <sbrk_aligned>
 8006f40:	3001      	adds	r0, #1
 8006f42:	d03a      	beq.n	8006fba <_malloc_r+0xea>
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	442b      	add	r3, r5
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	f8d8 3000 	ldr.w	r3, [r8]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	bb62      	cbnz	r2, 8006fac <_malloc_r+0xdc>
 8006f52:	f8c8 7000 	str.w	r7, [r8]
 8006f56:	e00f      	b.n	8006f78 <_malloc_r+0xa8>
 8006f58:	6822      	ldr	r2, [r4, #0]
 8006f5a:	1b52      	subs	r2, r2, r5
 8006f5c:	d420      	bmi.n	8006fa0 <_malloc_r+0xd0>
 8006f5e:	2a0b      	cmp	r2, #11
 8006f60:	d917      	bls.n	8006f92 <_malloc_r+0xc2>
 8006f62:	1961      	adds	r1, r4, r5
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	6025      	str	r5, [r4, #0]
 8006f68:	bf18      	it	ne
 8006f6a:	6059      	strne	r1, [r3, #4]
 8006f6c:	6863      	ldr	r3, [r4, #4]
 8006f6e:	bf08      	it	eq
 8006f70:	f8c8 1000 	streq.w	r1, [r8]
 8006f74:	5162      	str	r2, [r4, r5]
 8006f76:	604b      	str	r3, [r1, #4]
 8006f78:	4630      	mov	r0, r6
 8006f7a:	f000 f82f 	bl	8006fdc <__malloc_unlock>
 8006f7e:	f104 000b 	add.w	r0, r4, #11
 8006f82:	1d23      	adds	r3, r4, #4
 8006f84:	f020 0007 	bic.w	r0, r0, #7
 8006f88:	1ac2      	subs	r2, r0, r3
 8006f8a:	bf1c      	itt	ne
 8006f8c:	1a1b      	subne	r3, r3, r0
 8006f8e:	50a3      	strne	r3, [r4, r2]
 8006f90:	e7af      	b.n	8006ef2 <_malloc_r+0x22>
 8006f92:	6862      	ldr	r2, [r4, #4]
 8006f94:	42a3      	cmp	r3, r4
 8006f96:	bf0c      	ite	eq
 8006f98:	f8c8 2000 	streq.w	r2, [r8]
 8006f9c:	605a      	strne	r2, [r3, #4]
 8006f9e:	e7eb      	b.n	8006f78 <_malloc_r+0xa8>
 8006fa0:	4623      	mov	r3, r4
 8006fa2:	6864      	ldr	r4, [r4, #4]
 8006fa4:	e7ae      	b.n	8006f04 <_malloc_r+0x34>
 8006fa6:	463c      	mov	r4, r7
 8006fa8:	687f      	ldr	r7, [r7, #4]
 8006faa:	e7b6      	b.n	8006f1a <_malloc_r+0x4a>
 8006fac:	461a      	mov	r2, r3
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	42a3      	cmp	r3, r4
 8006fb2:	d1fb      	bne.n	8006fac <_malloc_r+0xdc>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	6053      	str	r3, [r2, #4]
 8006fb8:	e7de      	b.n	8006f78 <_malloc_r+0xa8>
 8006fba:	230c      	movs	r3, #12
 8006fbc:	6033      	str	r3, [r6, #0]
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	f000 f80c 	bl	8006fdc <__malloc_unlock>
 8006fc4:	e794      	b.n	8006ef0 <_malloc_r+0x20>
 8006fc6:	6005      	str	r5, [r0, #0]
 8006fc8:	e7d6      	b.n	8006f78 <_malloc_r+0xa8>
 8006fca:	bf00      	nop
 8006fcc:	20000464 	.word	0x20000464

08006fd0 <__malloc_lock>:
 8006fd0:	4801      	ldr	r0, [pc, #4]	@ (8006fd8 <__malloc_lock+0x8>)
 8006fd2:	f7ff b8ac 	b.w	800612e <__retarget_lock_acquire_recursive>
 8006fd6:	bf00      	nop
 8006fd8:	2000045c 	.word	0x2000045c

08006fdc <__malloc_unlock>:
 8006fdc:	4801      	ldr	r0, [pc, #4]	@ (8006fe4 <__malloc_unlock+0x8>)
 8006fde:	f7ff b8a7 	b.w	8006130 <__retarget_lock_release_recursive>
 8006fe2:	bf00      	nop
 8006fe4:	2000045c 	.word	0x2000045c

08006fe8 <_Balloc>:
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	69c6      	ldr	r6, [r0, #28]
 8006fec:	4604      	mov	r4, r0
 8006fee:	460d      	mov	r5, r1
 8006ff0:	b976      	cbnz	r6, 8007010 <_Balloc+0x28>
 8006ff2:	2010      	movs	r0, #16
 8006ff4:	f7ff ff42 	bl	8006e7c <malloc>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	61e0      	str	r0, [r4, #28]
 8006ffc:	b920      	cbnz	r0, 8007008 <_Balloc+0x20>
 8006ffe:	4b18      	ldr	r3, [pc, #96]	@ (8007060 <_Balloc+0x78>)
 8007000:	4818      	ldr	r0, [pc, #96]	@ (8007064 <_Balloc+0x7c>)
 8007002:	216b      	movs	r1, #107	@ 0x6b
 8007004:	f000 fda6 	bl	8007b54 <__assert_func>
 8007008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800700c:	6006      	str	r6, [r0, #0]
 800700e:	60c6      	str	r6, [r0, #12]
 8007010:	69e6      	ldr	r6, [r4, #28]
 8007012:	68f3      	ldr	r3, [r6, #12]
 8007014:	b183      	cbz	r3, 8007038 <_Balloc+0x50>
 8007016:	69e3      	ldr	r3, [r4, #28]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800701e:	b9b8      	cbnz	r0, 8007050 <_Balloc+0x68>
 8007020:	2101      	movs	r1, #1
 8007022:	fa01 f605 	lsl.w	r6, r1, r5
 8007026:	1d72      	adds	r2, r6, #5
 8007028:	0092      	lsls	r2, r2, #2
 800702a:	4620      	mov	r0, r4
 800702c:	f000 fdb0 	bl	8007b90 <_calloc_r>
 8007030:	b160      	cbz	r0, 800704c <_Balloc+0x64>
 8007032:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007036:	e00e      	b.n	8007056 <_Balloc+0x6e>
 8007038:	2221      	movs	r2, #33	@ 0x21
 800703a:	2104      	movs	r1, #4
 800703c:	4620      	mov	r0, r4
 800703e:	f000 fda7 	bl	8007b90 <_calloc_r>
 8007042:	69e3      	ldr	r3, [r4, #28]
 8007044:	60f0      	str	r0, [r6, #12]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e4      	bne.n	8007016 <_Balloc+0x2e>
 800704c:	2000      	movs	r0, #0
 800704e:	bd70      	pop	{r4, r5, r6, pc}
 8007050:	6802      	ldr	r2, [r0, #0]
 8007052:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007056:	2300      	movs	r3, #0
 8007058:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800705c:	e7f7      	b.n	800704e <_Balloc+0x66>
 800705e:	bf00      	nop
 8007060:	080083a5 	.word	0x080083a5
 8007064:	08008425 	.word	0x08008425

08007068 <_Bfree>:
 8007068:	b570      	push	{r4, r5, r6, lr}
 800706a:	69c6      	ldr	r6, [r0, #28]
 800706c:	4605      	mov	r5, r0
 800706e:	460c      	mov	r4, r1
 8007070:	b976      	cbnz	r6, 8007090 <_Bfree+0x28>
 8007072:	2010      	movs	r0, #16
 8007074:	f7ff ff02 	bl	8006e7c <malloc>
 8007078:	4602      	mov	r2, r0
 800707a:	61e8      	str	r0, [r5, #28]
 800707c:	b920      	cbnz	r0, 8007088 <_Bfree+0x20>
 800707e:	4b09      	ldr	r3, [pc, #36]	@ (80070a4 <_Bfree+0x3c>)
 8007080:	4809      	ldr	r0, [pc, #36]	@ (80070a8 <_Bfree+0x40>)
 8007082:	218f      	movs	r1, #143	@ 0x8f
 8007084:	f000 fd66 	bl	8007b54 <__assert_func>
 8007088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800708c:	6006      	str	r6, [r0, #0]
 800708e:	60c6      	str	r6, [r0, #12]
 8007090:	b13c      	cbz	r4, 80070a2 <_Bfree+0x3a>
 8007092:	69eb      	ldr	r3, [r5, #28]
 8007094:	6862      	ldr	r2, [r4, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800709c:	6021      	str	r1, [r4, #0]
 800709e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070a2:	bd70      	pop	{r4, r5, r6, pc}
 80070a4:	080083a5 	.word	0x080083a5
 80070a8:	08008425 	.word	0x08008425

080070ac <__multadd>:
 80070ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070b0:	690d      	ldr	r5, [r1, #16]
 80070b2:	4607      	mov	r7, r0
 80070b4:	460c      	mov	r4, r1
 80070b6:	461e      	mov	r6, r3
 80070b8:	f101 0c14 	add.w	ip, r1, #20
 80070bc:	2000      	movs	r0, #0
 80070be:	f8dc 3000 	ldr.w	r3, [ip]
 80070c2:	b299      	uxth	r1, r3
 80070c4:	fb02 6101 	mla	r1, r2, r1, r6
 80070c8:	0c1e      	lsrs	r6, r3, #16
 80070ca:	0c0b      	lsrs	r3, r1, #16
 80070cc:	fb02 3306 	mla	r3, r2, r6, r3
 80070d0:	b289      	uxth	r1, r1
 80070d2:	3001      	adds	r0, #1
 80070d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070d8:	4285      	cmp	r5, r0
 80070da:	f84c 1b04 	str.w	r1, [ip], #4
 80070de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070e2:	dcec      	bgt.n	80070be <__multadd+0x12>
 80070e4:	b30e      	cbz	r6, 800712a <__multadd+0x7e>
 80070e6:	68a3      	ldr	r3, [r4, #8]
 80070e8:	42ab      	cmp	r3, r5
 80070ea:	dc19      	bgt.n	8007120 <__multadd+0x74>
 80070ec:	6861      	ldr	r1, [r4, #4]
 80070ee:	4638      	mov	r0, r7
 80070f0:	3101      	adds	r1, #1
 80070f2:	f7ff ff79 	bl	8006fe8 <_Balloc>
 80070f6:	4680      	mov	r8, r0
 80070f8:	b928      	cbnz	r0, 8007106 <__multadd+0x5a>
 80070fa:	4602      	mov	r2, r0
 80070fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007130 <__multadd+0x84>)
 80070fe:	480d      	ldr	r0, [pc, #52]	@ (8007134 <__multadd+0x88>)
 8007100:	21ba      	movs	r1, #186	@ 0xba
 8007102:	f000 fd27 	bl	8007b54 <__assert_func>
 8007106:	6922      	ldr	r2, [r4, #16]
 8007108:	3202      	adds	r2, #2
 800710a:	f104 010c 	add.w	r1, r4, #12
 800710e:	0092      	lsls	r2, r2, #2
 8007110:	300c      	adds	r0, #12
 8007112:	f000 fd11 	bl	8007b38 <memcpy>
 8007116:	4621      	mov	r1, r4
 8007118:	4638      	mov	r0, r7
 800711a:	f7ff ffa5 	bl	8007068 <_Bfree>
 800711e:	4644      	mov	r4, r8
 8007120:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007124:	3501      	adds	r5, #1
 8007126:	615e      	str	r6, [r3, #20]
 8007128:	6125      	str	r5, [r4, #16]
 800712a:	4620      	mov	r0, r4
 800712c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007130:	08008414 	.word	0x08008414
 8007134:	08008425 	.word	0x08008425

08007138 <__hi0bits>:
 8007138:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800713c:	4603      	mov	r3, r0
 800713e:	bf36      	itet	cc
 8007140:	0403      	lslcc	r3, r0, #16
 8007142:	2000      	movcs	r0, #0
 8007144:	2010      	movcc	r0, #16
 8007146:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800714a:	bf3c      	itt	cc
 800714c:	021b      	lslcc	r3, r3, #8
 800714e:	3008      	addcc	r0, #8
 8007150:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007154:	bf3c      	itt	cc
 8007156:	011b      	lslcc	r3, r3, #4
 8007158:	3004      	addcc	r0, #4
 800715a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800715e:	bf3c      	itt	cc
 8007160:	009b      	lslcc	r3, r3, #2
 8007162:	3002      	addcc	r0, #2
 8007164:	2b00      	cmp	r3, #0
 8007166:	db05      	blt.n	8007174 <__hi0bits+0x3c>
 8007168:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800716c:	f100 0001 	add.w	r0, r0, #1
 8007170:	bf08      	it	eq
 8007172:	2020      	moveq	r0, #32
 8007174:	4770      	bx	lr

08007176 <__lo0bits>:
 8007176:	6803      	ldr	r3, [r0, #0]
 8007178:	4602      	mov	r2, r0
 800717a:	f013 0007 	ands.w	r0, r3, #7
 800717e:	d00b      	beq.n	8007198 <__lo0bits+0x22>
 8007180:	07d9      	lsls	r1, r3, #31
 8007182:	d421      	bmi.n	80071c8 <__lo0bits+0x52>
 8007184:	0798      	lsls	r0, r3, #30
 8007186:	bf49      	itett	mi
 8007188:	085b      	lsrmi	r3, r3, #1
 800718a:	089b      	lsrpl	r3, r3, #2
 800718c:	2001      	movmi	r0, #1
 800718e:	6013      	strmi	r3, [r2, #0]
 8007190:	bf5c      	itt	pl
 8007192:	6013      	strpl	r3, [r2, #0]
 8007194:	2002      	movpl	r0, #2
 8007196:	4770      	bx	lr
 8007198:	b299      	uxth	r1, r3
 800719a:	b909      	cbnz	r1, 80071a0 <__lo0bits+0x2a>
 800719c:	0c1b      	lsrs	r3, r3, #16
 800719e:	2010      	movs	r0, #16
 80071a0:	b2d9      	uxtb	r1, r3
 80071a2:	b909      	cbnz	r1, 80071a8 <__lo0bits+0x32>
 80071a4:	3008      	adds	r0, #8
 80071a6:	0a1b      	lsrs	r3, r3, #8
 80071a8:	0719      	lsls	r1, r3, #28
 80071aa:	bf04      	itt	eq
 80071ac:	091b      	lsreq	r3, r3, #4
 80071ae:	3004      	addeq	r0, #4
 80071b0:	0799      	lsls	r1, r3, #30
 80071b2:	bf04      	itt	eq
 80071b4:	089b      	lsreq	r3, r3, #2
 80071b6:	3002      	addeq	r0, #2
 80071b8:	07d9      	lsls	r1, r3, #31
 80071ba:	d403      	bmi.n	80071c4 <__lo0bits+0x4e>
 80071bc:	085b      	lsrs	r3, r3, #1
 80071be:	f100 0001 	add.w	r0, r0, #1
 80071c2:	d003      	beq.n	80071cc <__lo0bits+0x56>
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	4770      	bx	lr
 80071c8:	2000      	movs	r0, #0
 80071ca:	4770      	bx	lr
 80071cc:	2020      	movs	r0, #32
 80071ce:	4770      	bx	lr

080071d0 <__i2b>:
 80071d0:	b510      	push	{r4, lr}
 80071d2:	460c      	mov	r4, r1
 80071d4:	2101      	movs	r1, #1
 80071d6:	f7ff ff07 	bl	8006fe8 <_Balloc>
 80071da:	4602      	mov	r2, r0
 80071dc:	b928      	cbnz	r0, 80071ea <__i2b+0x1a>
 80071de:	4b05      	ldr	r3, [pc, #20]	@ (80071f4 <__i2b+0x24>)
 80071e0:	4805      	ldr	r0, [pc, #20]	@ (80071f8 <__i2b+0x28>)
 80071e2:	f240 1145 	movw	r1, #325	@ 0x145
 80071e6:	f000 fcb5 	bl	8007b54 <__assert_func>
 80071ea:	2301      	movs	r3, #1
 80071ec:	6144      	str	r4, [r0, #20]
 80071ee:	6103      	str	r3, [r0, #16]
 80071f0:	bd10      	pop	{r4, pc}
 80071f2:	bf00      	nop
 80071f4:	08008414 	.word	0x08008414
 80071f8:	08008425 	.word	0x08008425

080071fc <__multiply>:
 80071fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007200:	4617      	mov	r7, r2
 8007202:	690a      	ldr	r2, [r1, #16]
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	429a      	cmp	r2, r3
 8007208:	bfa8      	it	ge
 800720a:	463b      	movge	r3, r7
 800720c:	4689      	mov	r9, r1
 800720e:	bfa4      	itt	ge
 8007210:	460f      	movge	r7, r1
 8007212:	4699      	movge	r9, r3
 8007214:	693d      	ldr	r5, [r7, #16]
 8007216:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	6879      	ldr	r1, [r7, #4]
 800721e:	eb05 060a 	add.w	r6, r5, sl
 8007222:	42b3      	cmp	r3, r6
 8007224:	b085      	sub	sp, #20
 8007226:	bfb8      	it	lt
 8007228:	3101      	addlt	r1, #1
 800722a:	f7ff fedd 	bl	8006fe8 <_Balloc>
 800722e:	b930      	cbnz	r0, 800723e <__multiply+0x42>
 8007230:	4602      	mov	r2, r0
 8007232:	4b41      	ldr	r3, [pc, #260]	@ (8007338 <__multiply+0x13c>)
 8007234:	4841      	ldr	r0, [pc, #260]	@ (800733c <__multiply+0x140>)
 8007236:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800723a:	f000 fc8b 	bl	8007b54 <__assert_func>
 800723e:	f100 0414 	add.w	r4, r0, #20
 8007242:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007246:	4623      	mov	r3, r4
 8007248:	2200      	movs	r2, #0
 800724a:	4573      	cmp	r3, lr
 800724c:	d320      	bcc.n	8007290 <__multiply+0x94>
 800724e:	f107 0814 	add.w	r8, r7, #20
 8007252:	f109 0114 	add.w	r1, r9, #20
 8007256:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800725a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800725e:	9302      	str	r3, [sp, #8]
 8007260:	1beb      	subs	r3, r5, r7
 8007262:	3b15      	subs	r3, #21
 8007264:	f023 0303 	bic.w	r3, r3, #3
 8007268:	3304      	adds	r3, #4
 800726a:	3715      	adds	r7, #21
 800726c:	42bd      	cmp	r5, r7
 800726e:	bf38      	it	cc
 8007270:	2304      	movcc	r3, #4
 8007272:	9301      	str	r3, [sp, #4]
 8007274:	9b02      	ldr	r3, [sp, #8]
 8007276:	9103      	str	r1, [sp, #12]
 8007278:	428b      	cmp	r3, r1
 800727a:	d80c      	bhi.n	8007296 <__multiply+0x9a>
 800727c:	2e00      	cmp	r6, #0
 800727e:	dd03      	ble.n	8007288 <__multiply+0x8c>
 8007280:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007284:	2b00      	cmp	r3, #0
 8007286:	d055      	beq.n	8007334 <__multiply+0x138>
 8007288:	6106      	str	r6, [r0, #16]
 800728a:	b005      	add	sp, #20
 800728c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007290:	f843 2b04 	str.w	r2, [r3], #4
 8007294:	e7d9      	b.n	800724a <__multiply+0x4e>
 8007296:	f8b1 a000 	ldrh.w	sl, [r1]
 800729a:	f1ba 0f00 	cmp.w	sl, #0
 800729e:	d01f      	beq.n	80072e0 <__multiply+0xe4>
 80072a0:	46c4      	mov	ip, r8
 80072a2:	46a1      	mov	r9, r4
 80072a4:	2700      	movs	r7, #0
 80072a6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80072aa:	f8d9 3000 	ldr.w	r3, [r9]
 80072ae:	fa1f fb82 	uxth.w	fp, r2
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80072b8:	443b      	add	r3, r7
 80072ba:	f8d9 7000 	ldr.w	r7, [r9]
 80072be:	0c12      	lsrs	r2, r2, #16
 80072c0:	0c3f      	lsrs	r7, r7, #16
 80072c2:	fb0a 7202 	mla	r2, sl, r2, r7
 80072c6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072d0:	4565      	cmp	r5, ip
 80072d2:	f849 3b04 	str.w	r3, [r9], #4
 80072d6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80072da:	d8e4      	bhi.n	80072a6 <__multiply+0xaa>
 80072dc:	9b01      	ldr	r3, [sp, #4]
 80072de:	50e7      	str	r7, [r4, r3]
 80072e0:	9b03      	ldr	r3, [sp, #12]
 80072e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80072e6:	3104      	adds	r1, #4
 80072e8:	f1b9 0f00 	cmp.w	r9, #0
 80072ec:	d020      	beq.n	8007330 <__multiply+0x134>
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	4647      	mov	r7, r8
 80072f2:	46a4      	mov	ip, r4
 80072f4:	f04f 0a00 	mov.w	sl, #0
 80072f8:	f8b7 b000 	ldrh.w	fp, [r7]
 80072fc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007300:	fb09 220b 	mla	r2, r9, fp, r2
 8007304:	4452      	add	r2, sl
 8007306:	b29b      	uxth	r3, r3
 8007308:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800730c:	f84c 3b04 	str.w	r3, [ip], #4
 8007310:	f857 3b04 	ldr.w	r3, [r7], #4
 8007314:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007318:	f8bc 3000 	ldrh.w	r3, [ip]
 800731c:	fb09 330a 	mla	r3, r9, sl, r3
 8007320:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007324:	42bd      	cmp	r5, r7
 8007326:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800732a:	d8e5      	bhi.n	80072f8 <__multiply+0xfc>
 800732c:	9a01      	ldr	r2, [sp, #4]
 800732e:	50a3      	str	r3, [r4, r2]
 8007330:	3404      	adds	r4, #4
 8007332:	e79f      	b.n	8007274 <__multiply+0x78>
 8007334:	3e01      	subs	r6, #1
 8007336:	e7a1      	b.n	800727c <__multiply+0x80>
 8007338:	08008414 	.word	0x08008414
 800733c:	08008425 	.word	0x08008425

08007340 <__pow5mult>:
 8007340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007344:	4615      	mov	r5, r2
 8007346:	f012 0203 	ands.w	r2, r2, #3
 800734a:	4607      	mov	r7, r0
 800734c:	460e      	mov	r6, r1
 800734e:	d007      	beq.n	8007360 <__pow5mult+0x20>
 8007350:	4c25      	ldr	r4, [pc, #148]	@ (80073e8 <__pow5mult+0xa8>)
 8007352:	3a01      	subs	r2, #1
 8007354:	2300      	movs	r3, #0
 8007356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800735a:	f7ff fea7 	bl	80070ac <__multadd>
 800735e:	4606      	mov	r6, r0
 8007360:	10ad      	asrs	r5, r5, #2
 8007362:	d03d      	beq.n	80073e0 <__pow5mult+0xa0>
 8007364:	69fc      	ldr	r4, [r7, #28]
 8007366:	b97c      	cbnz	r4, 8007388 <__pow5mult+0x48>
 8007368:	2010      	movs	r0, #16
 800736a:	f7ff fd87 	bl	8006e7c <malloc>
 800736e:	4602      	mov	r2, r0
 8007370:	61f8      	str	r0, [r7, #28]
 8007372:	b928      	cbnz	r0, 8007380 <__pow5mult+0x40>
 8007374:	4b1d      	ldr	r3, [pc, #116]	@ (80073ec <__pow5mult+0xac>)
 8007376:	481e      	ldr	r0, [pc, #120]	@ (80073f0 <__pow5mult+0xb0>)
 8007378:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800737c:	f000 fbea 	bl	8007b54 <__assert_func>
 8007380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007384:	6004      	str	r4, [r0, #0]
 8007386:	60c4      	str	r4, [r0, #12]
 8007388:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800738c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007390:	b94c      	cbnz	r4, 80073a6 <__pow5mult+0x66>
 8007392:	f240 2171 	movw	r1, #625	@ 0x271
 8007396:	4638      	mov	r0, r7
 8007398:	f7ff ff1a 	bl	80071d0 <__i2b>
 800739c:	2300      	movs	r3, #0
 800739e:	f8c8 0008 	str.w	r0, [r8, #8]
 80073a2:	4604      	mov	r4, r0
 80073a4:	6003      	str	r3, [r0, #0]
 80073a6:	f04f 0900 	mov.w	r9, #0
 80073aa:	07eb      	lsls	r3, r5, #31
 80073ac:	d50a      	bpl.n	80073c4 <__pow5mult+0x84>
 80073ae:	4631      	mov	r1, r6
 80073b0:	4622      	mov	r2, r4
 80073b2:	4638      	mov	r0, r7
 80073b4:	f7ff ff22 	bl	80071fc <__multiply>
 80073b8:	4631      	mov	r1, r6
 80073ba:	4680      	mov	r8, r0
 80073bc:	4638      	mov	r0, r7
 80073be:	f7ff fe53 	bl	8007068 <_Bfree>
 80073c2:	4646      	mov	r6, r8
 80073c4:	106d      	asrs	r5, r5, #1
 80073c6:	d00b      	beq.n	80073e0 <__pow5mult+0xa0>
 80073c8:	6820      	ldr	r0, [r4, #0]
 80073ca:	b938      	cbnz	r0, 80073dc <__pow5mult+0x9c>
 80073cc:	4622      	mov	r2, r4
 80073ce:	4621      	mov	r1, r4
 80073d0:	4638      	mov	r0, r7
 80073d2:	f7ff ff13 	bl	80071fc <__multiply>
 80073d6:	6020      	str	r0, [r4, #0]
 80073d8:	f8c0 9000 	str.w	r9, [r0]
 80073dc:	4604      	mov	r4, r0
 80073de:	e7e4      	b.n	80073aa <__pow5mult+0x6a>
 80073e0:	4630      	mov	r0, r6
 80073e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e6:	bf00      	nop
 80073e8:	080084d8 	.word	0x080084d8
 80073ec:	080083a5 	.word	0x080083a5
 80073f0:	08008425 	.word	0x08008425

080073f4 <__lshift>:
 80073f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	460c      	mov	r4, r1
 80073fa:	6849      	ldr	r1, [r1, #4]
 80073fc:	6923      	ldr	r3, [r4, #16]
 80073fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007402:	68a3      	ldr	r3, [r4, #8]
 8007404:	4607      	mov	r7, r0
 8007406:	4691      	mov	r9, r2
 8007408:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800740c:	f108 0601 	add.w	r6, r8, #1
 8007410:	42b3      	cmp	r3, r6
 8007412:	db0b      	blt.n	800742c <__lshift+0x38>
 8007414:	4638      	mov	r0, r7
 8007416:	f7ff fde7 	bl	8006fe8 <_Balloc>
 800741a:	4605      	mov	r5, r0
 800741c:	b948      	cbnz	r0, 8007432 <__lshift+0x3e>
 800741e:	4602      	mov	r2, r0
 8007420:	4b28      	ldr	r3, [pc, #160]	@ (80074c4 <__lshift+0xd0>)
 8007422:	4829      	ldr	r0, [pc, #164]	@ (80074c8 <__lshift+0xd4>)
 8007424:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007428:	f000 fb94 	bl	8007b54 <__assert_func>
 800742c:	3101      	adds	r1, #1
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	e7ee      	b.n	8007410 <__lshift+0x1c>
 8007432:	2300      	movs	r3, #0
 8007434:	f100 0114 	add.w	r1, r0, #20
 8007438:	f100 0210 	add.w	r2, r0, #16
 800743c:	4618      	mov	r0, r3
 800743e:	4553      	cmp	r3, sl
 8007440:	db33      	blt.n	80074aa <__lshift+0xb6>
 8007442:	6920      	ldr	r0, [r4, #16]
 8007444:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007448:	f104 0314 	add.w	r3, r4, #20
 800744c:	f019 091f 	ands.w	r9, r9, #31
 8007450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007454:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007458:	d02b      	beq.n	80074b2 <__lshift+0xbe>
 800745a:	f1c9 0e20 	rsb	lr, r9, #32
 800745e:	468a      	mov	sl, r1
 8007460:	2200      	movs	r2, #0
 8007462:	6818      	ldr	r0, [r3, #0]
 8007464:	fa00 f009 	lsl.w	r0, r0, r9
 8007468:	4310      	orrs	r0, r2
 800746a:	f84a 0b04 	str.w	r0, [sl], #4
 800746e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007472:	459c      	cmp	ip, r3
 8007474:	fa22 f20e 	lsr.w	r2, r2, lr
 8007478:	d8f3      	bhi.n	8007462 <__lshift+0x6e>
 800747a:	ebac 0304 	sub.w	r3, ip, r4
 800747e:	3b15      	subs	r3, #21
 8007480:	f023 0303 	bic.w	r3, r3, #3
 8007484:	3304      	adds	r3, #4
 8007486:	f104 0015 	add.w	r0, r4, #21
 800748a:	4560      	cmp	r0, ip
 800748c:	bf88      	it	hi
 800748e:	2304      	movhi	r3, #4
 8007490:	50ca      	str	r2, [r1, r3]
 8007492:	b10a      	cbz	r2, 8007498 <__lshift+0xa4>
 8007494:	f108 0602 	add.w	r6, r8, #2
 8007498:	3e01      	subs	r6, #1
 800749a:	4638      	mov	r0, r7
 800749c:	612e      	str	r6, [r5, #16]
 800749e:	4621      	mov	r1, r4
 80074a0:	f7ff fde2 	bl	8007068 <_Bfree>
 80074a4:	4628      	mov	r0, r5
 80074a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80074ae:	3301      	adds	r3, #1
 80074b0:	e7c5      	b.n	800743e <__lshift+0x4a>
 80074b2:	3904      	subs	r1, #4
 80074b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80074bc:	459c      	cmp	ip, r3
 80074be:	d8f9      	bhi.n	80074b4 <__lshift+0xc0>
 80074c0:	e7ea      	b.n	8007498 <__lshift+0xa4>
 80074c2:	bf00      	nop
 80074c4:	08008414 	.word	0x08008414
 80074c8:	08008425 	.word	0x08008425

080074cc <__mcmp>:
 80074cc:	690a      	ldr	r2, [r1, #16]
 80074ce:	4603      	mov	r3, r0
 80074d0:	6900      	ldr	r0, [r0, #16]
 80074d2:	1a80      	subs	r0, r0, r2
 80074d4:	b530      	push	{r4, r5, lr}
 80074d6:	d10e      	bne.n	80074f6 <__mcmp+0x2a>
 80074d8:	3314      	adds	r3, #20
 80074da:	3114      	adds	r1, #20
 80074dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80074e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80074e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80074e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80074ec:	4295      	cmp	r5, r2
 80074ee:	d003      	beq.n	80074f8 <__mcmp+0x2c>
 80074f0:	d205      	bcs.n	80074fe <__mcmp+0x32>
 80074f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074f6:	bd30      	pop	{r4, r5, pc}
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	d3f3      	bcc.n	80074e4 <__mcmp+0x18>
 80074fc:	e7fb      	b.n	80074f6 <__mcmp+0x2a>
 80074fe:	2001      	movs	r0, #1
 8007500:	e7f9      	b.n	80074f6 <__mcmp+0x2a>
	...

08007504 <__mdiff>:
 8007504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	4689      	mov	r9, r1
 800750a:	4606      	mov	r6, r0
 800750c:	4611      	mov	r1, r2
 800750e:	4648      	mov	r0, r9
 8007510:	4614      	mov	r4, r2
 8007512:	f7ff ffdb 	bl	80074cc <__mcmp>
 8007516:	1e05      	subs	r5, r0, #0
 8007518:	d112      	bne.n	8007540 <__mdiff+0x3c>
 800751a:	4629      	mov	r1, r5
 800751c:	4630      	mov	r0, r6
 800751e:	f7ff fd63 	bl	8006fe8 <_Balloc>
 8007522:	4602      	mov	r2, r0
 8007524:	b928      	cbnz	r0, 8007532 <__mdiff+0x2e>
 8007526:	4b3f      	ldr	r3, [pc, #252]	@ (8007624 <__mdiff+0x120>)
 8007528:	f240 2137 	movw	r1, #567	@ 0x237
 800752c:	483e      	ldr	r0, [pc, #248]	@ (8007628 <__mdiff+0x124>)
 800752e:	f000 fb11 	bl	8007b54 <__assert_func>
 8007532:	2301      	movs	r3, #1
 8007534:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007538:	4610      	mov	r0, r2
 800753a:	b003      	add	sp, #12
 800753c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007540:	bfbc      	itt	lt
 8007542:	464b      	movlt	r3, r9
 8007544:	46a1      	movlt	r9, r4
 8007546:	4630      	mov	r0, r6
 8007548:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800754c:	bfba      	itte	lt
 800754e:	461c      	movlt	r4, r3
 8007550:	2501      	movlt	r5, #1
 8007552:	2500      	movge	r5, #0
 8007554:	f7ff fd48 	bl	8006fe8 <_Balloc>
 8007558:	4602      	mov	r2, r0
 800755a:	b918      	cbnz	r0, 8007564 <__mdiff+0x60>
 800755c:	4b31      	ldr	r3, [pc, #196]	@ (8007624 <__mdiff+0x120>)
 800755e:	f240 2145 	movw	r1, #581	@ 0x245
 8007562:	e7e3      	b.n	800752c <__mdiff+0x28>
 8007564:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007568:	6926      	ldr	r6, [r4, #16]
 800756a:	60c5      	str	r5, [r0, #12]
 800756c:	f109 0310 	add.w	r3, r9, #16
 8007570:	f109 0514 	add.w	r5, r9, #20
 8007574:	f104 0e14 	add.w	lr, r4, #20
 8007578:	f100 0b14 	add.w	fp, r0, #20
 800757c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007580:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	46d9      	mov	r9, fp
 8007588:	f04f 0c00 	mov.w	ip, #0
 800758c:	9b01      	ldr	r3, [sp, #4]
 800758e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007592:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007596:	9301      	str	r3, [sp, #4]
 8007598:	fa1f f38a 	uxth.w	r3, sl
 800759c:	4619      	mov	r1, r3
 800759e:	b283      	uxth	r3, r0
 80075a0:	1acb      	subs	r3, r1, r3
 80075a2:	0c00      	lsrs	r0, r0, #16
 80075a4:	4463      	add	r3, ip
 80075a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80075aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80075b4:	4576      	cmp	r6, lr
 80075b6:	f849 3b04 	str.w	r3, [r9], #4
 80075ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075be:	d8e5      	bhi.n	800758c <__mdiff+0x88>
 80075c0:	1b33      	subs	r3, r6, r4
 80075c2:	3b15      	subs	r3, #21
 80075c4:	f023 0303 	bic.w	r3, r3, #3
 80075c8:	3415      	adds	r4, #21
 80075ca:	3304      	adds	r3, #4
 80075cc:	42a6      	cmp	r6, r4
 80075ce:	bf38      	it	cc
 80075d0:	2304      	movcc	r3, #4
 80075d2:	441d      	add	r5, r3
 80075d4:	445b      	add	r3, fp
 80075d6:	461e      	mov	r6, r3
 80075d8:	462c      	mov	r4, r5
 80075da:	4544      	cmp	r4, r8
 80075dc:	d30e      	bcc.n	80075fc <__mdiff+0xf8>
 80075de:	f108 0103 	add.w	r1, r8, #3
 80075e2:	1b49      	subs	r1, r1, r5
 80075e4:	f021 0103 	bic.w	r1, r1, #3
 80075e8:	3d03      	subs	r5, #3
 80075ea:	45a8      	cmp	r8, r5
 80075ec:	bf38      	it	cc
 80075ee:	2100      	movcc	r1, #0
 80075f0:	440b      	add	r3, r1
 80075f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075f6:	b191      	cbz	r1, 800761e <__mdiff+0x11a>
 80075f8:	6117      	str	r7, [r2, #16]
 80075fa:	e79d      	b.n	8007538 <__mdiff+0x34>
 80075fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007600:	46e6      	mov	lr, ip
 8007602:	0c08      	lsrs	r0, r1, #16
 8007604:	fa1c fc81 	uxtah	ip, ip, r1
 8007608:	4471      	add	r1, lr
 800760a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800760e:	b289      	uxth	r1, r1
 8007610:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007614:	f846 1b04 	str.w	r1, [r6], #4
 8007618:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800761c:	e7dd      	b.n	80075da <__mdiff+0xd6>
 800761e:	3f01      	subs	r7, #1
 8007620:	e7e7      	b.n	80075f2 <__mdiff+0xee>
 8007622:	bf00      	nop
 8007624:	08008414 	.word	0x08008414
 8007628:	08008425 	.word	0x08008425

0800762c <__d2b>:
 800762c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007630:	460f      	mov	r7, r1
 8007632:	2101      	movs	r1, #1
 8007634:	ec59 8b10 	vmov	r8, r9, d0
 8007638:	4616      	mov	r6, r2
 800763a:	f7ff fcd5 	bl	8006fe8 <_Balloc>
 800763e:	4604      	mov	r4, r0
 8007640:	b930      	cbnz	r0, 8007650 <__d2b+0x24>
 8007642:	4602      	mov	r2, r0
 8007644:	4b23      	ldr	r3, [pc, #140]	@ (80076d4 <__d2b+0xa8>)
 8007646:	4824      	ldr	r0, [pc, #144]	@ (80076d8 <__d2b+0xac>)
 8007648:	f240 310f 	movw	r1, #783	@ 0x30f
 800764c:	f000 fa82 	bl	8007b54 <__assert_func>
 8007650:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007654:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007658:	b10d      	cbz	r5, 800765e <__d2b+0x32>
 800765a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800765e:	9301      	str	r3, [sp, #4]
 8007660:	f1b8 0300 	subs.w	r3, r8, #0
 8007664:	d023      	beq.n	80076ae <__d2b+0x82>
 8007666:	4668      	mov	r0, sp
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	f7ff fd84 	bl	8007176 <__lo0bits>
 800766e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007672:	b1d0      	cbz	r0, 80076aa <__d2b+0x7e>
 8007674:	f1c0 0320 	rsb	r3, r0, #32
 8007678:	fa02 f303 	lsl.w	r3, r2, r3
 800767c:	430b      	orrs	r3, r1
 800767e:	40c2      	lsrs	r2, r0
 8007680:	6163      	str	r3, [r4, #20]
 8007682:	9201      	str	r2, [sp, #4]
 8007684:	9b01      	ldr	r3, [sp, #4]
 8007686:	61a3      	str	r3, [r4, #24]
 8007688:	2b00      	cmp	r3, #0
 800768a:	bf0c      	ite	eq
 800768c:	2201      	moveq	r2, #1
 800768e:	2202      	movne	r2, #2
 8007690:	6122      	str	r2, [r4, #16]
 8007692:	b1a5      	cbz	r5, 80076be <__d2b+0x92>
 8007694:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007698:	4405      	add	r5, r0
 800769a:	603d      	str	r5, [r7, #0]
 800769c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80076a0:	6030      	str	r0, [r6, #0]
 80076a2:	4620      	mov	r0, r4
 80076a4:	b003      	add	sp, #12
 80076a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076aa:	6161      	str	r1, [r4, #20]
 80076ac:	e7ea      	b.n	8007684 <__d2b+0x58>
 80076ae:	a801      	add	r0, sp, #4
 80076b0:	f7ff fd61 	bl	8007176 <__lo0bits>
 80076b4:	9b01      	ldr	r3, [sp, #4]
 80076b6:	6163      	str	r3, [r4, #20]
 80076b8:	3020      	adds	r0, #32
 80076ba:	2201      	movs	r2, #1
 80076bc:	e7e8      	b.n	8007690 <__d2b+0x64>
 80076be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80076c6:	6038      	str	r0, [r7, #0]
 80076c8:	6918      	ldr	r0, [r3, #16]
 80076ca:	f7ff fd35 	bl	8007138 <__hi0bits>
 80076ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076d2:	e7e5      	b.n	80076a0 <__d2b+0x74>
 80076d4:	08008414 	.word	0x08008414
 80076d8:	08008425 	.word	0x08008425

080076dc <__ssputs_r>:
 80076dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e0:	688e      	ldr	r6, [r1, #8]
 80076e2:	461f      	mov	r7, r3
 80076e4:	42be      	cmp	r6, r7
 80076e6:	680b      	ldr	r3, [r1, #0]
 80076e8:	4682      	mov	sl, r0
 80076ea:	460c      	mov	r4, r1
 80076ec:	4690      	mov	r8, r2
 80076ee:	d82d      	bhi.n	800774c <__ssputs_r+0x70>
 80076f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80076f8:	d026      	beq.n	8007748 <__ssputs_r+0x6c>
 80076fa:	6965      	ldr	r5, [r4, #20]
 80076fc:	6909      	ldr	r1, [r1, #16]
 80076fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007702:	eba3 0901 	sub.w	r9, r3, r1
 8007706:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800770a:	1c7b      	adds	r3, r7, #1
 800770c:	444b      	add	r3, r9
 800770e:	106d      	asrs	r5, r5, #1
 8007710:	429d      	cmp	r5, r3
 8007712:	bf38      	it	cc
 8007714:	461d      	movcc	r5, r3
 8007716:	0553      	lsls	r3, r2, #21
 8007718:	d527      	bpl.n	800776a <__ssputs_r+0x8e>
 800771a:	4629      	mov	r1, r5
 800771c:	f7ff fbd8 	bl	8006ed0 <_malloc_r>
 8007720:	4606      	mov	r6, r0
 8007722:	b360      	cbz	r0, 800777e <__ssputs_r+0xa2>
 8007724:	6921      	ldr	r1, [r4, #16]
 8007726:	464a      	mov	r2, r9
 8007728:	f000 fa06 	bl	8007b38 <memcpy>
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007736:	81a3      	strh	r3, [r4, #12]
 8007738:	6126      	str	r6, [r4, #16]
 800773a:	6165      	str	r5, [r4, #20]
 800773c:	444e      	add	r6, r9
 800773e:	eba5 0509 	sub.w	r5, r5, r9
 8007742:	6026      	str	r6, [r4, #0]
 8007744:	60a5      	str	r5, [r4, #8]
 8007746:	463e      	mov	r6, r7
 8007748:	42be      	cmp	r6, r7
 800774a:	d900      	bls.n	800774e <__ssputs_r+0x72>
 800774c:	463e      	mov	r6, r7
 800774e:	6820      	ldr	r0, [r4, #0]
 8007750:	4632      	mov	r2, r6
 8007752:	4641      	mov	r1, r8
 8007754:	f000 f9c6 	bl	8007ae4 <memmove>
 8007758:	68a3      	ldr	r3, [r4, #8]
 800775a:	1b9b      	subs	r3, r3, r6
 800775c:	60a3      	str	r3, [r4, #8]
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	4433      	add	r3, r6
 8007762:	6023      	str	r3, [r4, #0]
 8007764:	2000      	movs	r0, #0
 8007766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800776a:	462a      	mov	r2, r5
 800776c:	f000 fa36 	bl	8007bdc <_realloc_r>
 8007770:	4606      	mov	r6, r0
 8007772:	2800      	cmp	r0, #0
 8007774:	d1e0      	bne.n	8007738 <__ssputs_r+0x5c>
 8007776:	6921      	ldr	r1, [r4, #16]
 8007778:	4650      	mov	r0, sl
 800777a:	f7ff fb35 	bl	8006de8 <_free_r>
 800777e:	230c      	movs	r3, #12
 8007780:	f8ca 3000 	str.w	r3, [sl]
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800778a:	81a3      	strh	r3, [r4, #12]
 800778c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007790:	e7e9      	b.n	8007766 <__ssputs_r+0x8a>
	...

08007794 <_svfiprintf_r>:
 8007794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007798:	4698      	mov	r8, r3
 800779a:	898b      	ldrh	r3, [r1, #12]
 800779c:	061b      	lsls	r3, r3, #24
 800779e:	b09d      	sub	sp, #116	@ 0x74
 80077a0:	4607      	mov	r7, r0
 80077a2:	460d      	mov	r5, r1
 80077a4:	4614      	mov	r4, r2
 80077a6:	d510      	bpl.n	80077ca <_svfiprintf_r+0x36>
 80077a8:	690b      	ldr	r3, [r1, #16]
 80077aa:	b973      	cbnz	r3, 80077ca <_svfiprintf_r+0x36>
 80077ac:	2140      	movs	r1, #64	@ 0x40
 80077ae:	f7ff fb8f 	bl	8006ed0 <_malloc_r>
 80077b2:	6028      	str	r0, [r5, #0]
 80077b4:	6128      	str	r0, [r5, #16]
 80077b6:	b930      	cbnz	r0, 80077c6 <_svfiprintf_r+0x32>
 80077b8:	230c      	movs	r3, #12
 80077ba:	603b      	str	r3, [r7, #0]
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077c0:	b01d      	add	sp, #116	@ 0x74
 80077c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c6:	2340      	movs	r3, #64	@ 0x40
 80077c8:	616b      	str	r3, [r5, #20]
 80077ca:	2300      	movs	r3, #0
 80077cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80077ce:	2320      	movs	r3, #32
 80077d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80077d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80077d8:	2330      	movs	r3, #48	@ 0x30
 80077da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007978 <_svfiprintf_r+0x1e4>
 80077de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80077e2:	f04f 0901 	mov.w	r9, #1
 80077e6:	4623      	mov	r3, r4
 80077e8:	469a      	mov	sl, r3
 80077ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077ee:	b10a      	cbz	r2, 80077f4 <_svfiprintf_r+0x60>
 80077f0:	2a25      	cmp	r2, #37	@ 0x25
 80077f2:	d1f9      	bne.n	80077e8 <_svfiprintf_r+0x54>
 80077f4:	ebba 0b04 	subs.w	fp, sl, r4
 80077f8:	d00b      	beq.n	8007812 <_svfiprintf_r+0x7e>
 80077fa:	465b      	mov	r3, fp
 80077fc:	4622      	mov	r2, r4
 80077fe:	4629      	mov	r1, r5
 8007800:	4638      	mov	r0, r7
 8007802:	f7ff ff6b 	bl	80076dc <__ssputs_r>
 8007806:	3001      	adds	r0, #1
 8007808:	f000 80a7 	beq.w	800795a <_svfiprintf_r+0x1c6>
 800780c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800780e:	445a      	add	r2, fp
 8007810:	9209      	str	r2, [sp, #36]	@ 0x24
 8007812:	f89a 3000 	ldrb.w	r3, [sl]
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 809f 	beq.w	800795a <_svfiprintf_r+0x1c6>
 800781c:	2300      	movs	r3, #0
 800781e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007826:	f10a 0a01 	add.w	sl, sl, #1
 800782a:	9304      	str	r3, [sp, #16]
 800782c:	9307      	str	r3, [sp, #28]
 800782e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007832:	931a      	str	r3, [sp, #104]	@ 0x68
 8007834:	4654      	mov	r4, sl
 8007836:	2205      	movs	r2, #5
 8007838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800783c:	484e      	ldr	r0, [pc, #312]	@ (8007978 <_svfiprintf_r+0x1e4>)
 800783e:	f7f8 fccf 	bl	80001e0 <memchr>
 8007842:	9a04      	ldr	r2, [sp, #16]
 8007844:	b9d8      	cbnz	r0, 800787e <_svfiprintf_r+0xea>
 8007846:	06d0      	lsls	r0, r2, #27
 8007848:	bf44      	itt	mi
 800784a:	2320      	movmi	r3, #32
 800784c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007850:	0711      	lsls	r1, r2, #28
 8007852:	bf44      	itt	mi
 8007854:	232b      	movmi	r3, #43	@ 0x2b
 8007856:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800785a:	f89a 3000 	ldrb.w	r3, [sl]
 800785e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007860:	d015      	beq.n	800788e <_svfiprintf_r+0xfa>
 8007862:	9a07      	ldr	r2, [sp, #28]
 8007864:	4654      	mov	r4, sl
 8007866:	2000      	movs	r0, #0
 8007868:	f04f 0c0a 	mov.w	ip, #10
 800786c:	4621      	mov	r1, r4
 800786e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007872:	3b30      	subs	r3, #48	@ 0x30
 8007874:	2b09      	cmp	r3, #9
 8007876:	d94b      	bls.n	8007910 <_svfiprintf_r+0x17c>
 8007878:	b1b0      	cbz	r0, 80078a8 <_svfiprintf_r+0x114>
 800787a:	9207      	str	r2, [sp, #28]
 800787c:	e014      	b.n	80078a8 <_svfiprintf_r+0x114>
 800787e:	eba0 0308 	sub.w	r3, r0, r8
 8007882:	fa09 f303 	lsl.w	r3, r9, r3
 8007886:	4313      	orrs	r3, r2
 8007888:	9304      	str	r3, [sp, #16]
 800788a:	46a2      	mov	sl, r4
 800788c:	e7d2      	b.n	8007834 <_svfiprintf_r+0xa0>
 800788e:	9b03      	ldr	r3, [sp, #12]
 8007890:	1d19      	adds	r1, r3, #4
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	9103      	str	r1, [sp, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	bfbb      	ittet	lt
 800789a:	425b      	neglt	r3, r3
 800789c:	f042 0202 	orrlt.w	r2, r2, #2
 80078a0:	9307      	strge	r3, [sp, #28]
 80078a2:	9307      	strlt	r3, [sp, #28]
 80078a4:	bfb8      	it	lt
 80078a6:	9204      	strlt	r2, [sp, #16]
 80078a8:	7823      	ldrb	r3, [r4, #0]
 80078aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80078ac:	d10a      	bne.n	80078c4 <_svfiprintf_r+0x130>
 80078ae:	7863      	ldrb	r3, [r4, #1]
 80078b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80078b2:	d132      	bne.n	800791a <_svfiprintf_r+0x186>
 80078b4:	9b03      	ldr	r3, [sp, #12]
 80078b6:	1d1a      	adds	r2, r3, #4
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	9203      	str	r2, [sp, #12]
 80078bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80078c0:	3402      	adds	r4, #2
 80078c2:	9305      	str	r3, [sp, #20]
 80078c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007988 <_svfiprintf_r+0x1f4>
 80078c8:	7821      	ldrb	r1, [r4, #0]
 80078ca:	2203      	movs	r2, #3
 80078cc:	4650      	mov	r0, sl
 80078ce:	f7f8 fc87 	bl	80001e0 <memchr>
 80078d2:	b138      	cbz	r0, 80078e4 <_svfiprintf_r+0x150>
 80078d4:	9b04      	ldr	r3, [sp, #16]
 80078d6:	eba0 000a 	sub.w	r0, r0, sl
 80078da:	2240      	movs	r2, #64	@ 0x40
 80078dc:	4082      	lsls	r2, r0
 80078de:	4313      	orrs	r3, r2
 80078e0:	3401      	adds	r4, #1
 80078e2:	9304      	str	r3, [sp, #16]
 80078e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e8:	4824      	ldr	r0, [pc, #144]	@ (800797c <_svfiprintf_r+0x1e8>)
 80078ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80078ee:	2206      	movs	r2, #6
 80078f0:	f7f8 fc76 	bl	80001e0 <memchr>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	d036      	beq.n	8007966 <_svfiprintf_r+0x1d2>
 80078f8:	4b21      	ldr	r3, [pc, #132]	@ (8007980 <_svfiprintf_r+0x1ec>)
 80078fa:	bb1b      	cbnz	r3, 8007944 <_svfiprintf_r+0x1b0>
 80078fc:	9b03      	ldr	r3, [sp, #12]
 80078fe:	3307      	adds	r3, #7
 8007900:	f023 0307 	bic.w	r3, r3, #7
 8007904:	3308      	adds	r3, #8
 8007906:	9303      	str	r3, [sp, #12]
 8007908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800790a:	4433      	add	r3, r6
 800790c:	9309      	str	r3, [sp, #36]	@ 0x24
 800790e:	e76a      	b.n	80077e6 <_svfiprintf_r+0x52>
 8007910:	fb0c 3202 	mla	r2, ip, r2, r3
 8007914:	460c      	mov	r4, r1
 8007916:	2001      	movs	r0, #1
 8007918:	e7a8      	b.n	800786c <_svfiprintf_r+0xd8>
 800791a:	2300      	movs	r3, #0
 800791c:	3401      	adds	r4, #1
 800791e:	9305      	str	r3, [sp, #20]
 8007920:	4619      	mov	r1, r3
 8007922:	f04f 0c0a 	mov.w	ip, #10
 8007926:	4620      	mov	r0, r4
 8007928:	f810 2b01 	ldrb.w	r2, [r0], #1
 800792c:	3a30      	subs	r2, #48	@ 0x30
 800792e:	2a09      	cmp	r2, #9
 8007930:	d903      	bls.n	800793a <_svfiprintf_r+0x1a6>
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0c6      	beq.n	80078c4 <_svfiprintf_r+0x130>
 8007936:	9105      	str	r1, [sp, #20]
 8007938:	e7c4      	b.n	80078c4 <_svfiprintf_r+0x130>
 800793a:	fb0c 2101 	mla	r1, ip, r1, r2
 800793e:	4604      	mov	r4, r0
 8007940:	2301      	movs	r3, #1
 8007942:	e7f0      	b.n	8007926 <_svfiprintf_r+0x192>
 8007944:	ab03      	add	r3, sp, #12
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	462a      	mov	r2, r5
 800794a:	4b0e      	ldr	r3, [pc, #56]	@ (8007984 <_svfiprintf_r+0x1f0>)
 800794c:	a904      	add	r1, sp, #16
 800794e:	4638      	mov	r0, r7
 8007950:	f7fd fe78 	bl	8005644 <_printf_float>
 8007954:	1c42      	adds	r2, r0, #1
 8007956:	4606      	mov	r6, r0
 8007958:	d1d6      	bne.n	8007908 <_svfiprintf_r+0x174>
 800795a:	89ab      	ldrh	r3, [r5, #12]
 800795c:	065b      	lsls	r3, r3, #25
 800795e:	f53f af2d 	bmi.w	80077bc <_svfiprintf_r+0x28>
 8007962:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007964:	e72c      	b.n	80077c0 <_svfiprintf_r+0x2c>
 8007966:	ab03      	add	r3, sp, #12
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	462a      	mov	r2, r5
 800796c:	4b05      	ldr	r3, [pc, #20]	@ (8007984 <_svfiprintf_r+0x1f0>)
 800796e:	a904      	add	r1, sp, #16
 8007970:	4638      	mov	r0, r7
 8007972:	f7fe f8ff 	bl	8005b74 <_printf_i>
 8007976:	e7ed      	b.n	8007954 <_svfiprintf_r+0x1c0>
 8007978:	0800847e 	.word	0x0800847e
 800797c:	08008488 	.word	0x08008488
 8007980:	08005645 	.word	0x08005645
 8007984:	080076dd 	.word	0x080076dd
 8007988:	08008484 	.word	0x08008484

0800798c <__sflush_r>:
 800798c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007994:	0716      	lsls	r6, r2, #28
 8007996:	4605      	mov	r5, r0
 8007998:	460c      	mov	r4, r1
 800799a:	d454      	bmi.n	8007a46 <__sflush_r+0xba>
 800799c:	684b      	ldr	r3, [r1, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	dc02      	bgt.n	80079a8 <__sflush_r+0x1c>
 80079a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	dd48      	ble.n	8007a3a <__sflush_r+0xae>
 80079a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079aa:	2e00      	cmp	r6, #0
 80079ac:	d045      	beq.n	8007a3a <__sflush_r+0xae>
 80079ae:	2300      	movs	r3, #0
 80079b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80079b4:	682f      	ldr	r7, [r5, #0]
 80079b6:	6a21      	ldr	r1, [r4, #32]
 80079b8:	602b      	str	r3, [r5, #0]
 80079ba:	d030      	beq.n	8007a1e <__sflush_r+0x92>
 80079bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80079be:	89a3      	ldrh	r3, [r4, #12]
 80079c0:	0759      	lsls	r1, r3, #29
 80079c2:	d505      	bpl.n	80079d0 <__sflush_r+0x44>
 80079c4:	6863      	ldr	r3, [r4, #4]
 80079c6:	1ad2      	subs	r2, r2, r3
 80079c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80079ca:	b10b      	cbz	r3, 80079d0 <__sflush_r+0x44>
 80079cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80079ce:	1ad2      	subs	r2, r2, r3
 80079d0:	2300      	movs	r3, #0
 80079d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079d4:	6a21      	ldr	r1, [r4, #32]
 80079d6:	4628      	mov	r0, r5
 80079d8:	47b0      	blx	r6
 80079da:	1c43      	adds	r3, r0, #1
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	d106      	bne.n	80079ee <__sflush_r+0x62>
 80079e0:	6829      	ldr	r1, [r5, #0]
 80079e2:	291d      	cmp	r1, #29
 80079e4:	d82b      	bhi.n	8007a3e <__sflush_r+0xb2>
 80079e6:	4a2a      	ldr	r2, [pc, #168]	@ (8007a90 <__sflush_r+0x104>)
 80079e8:	40ca      	lsrs	r2, r1
 80079ea:	07d6      	lsls	r6, r2, #31
 80079ec:	d527      	bpl.n	8007a3e <__sflush_r+0xb2>
 80079ee:	2200      	movs	r2, #0
 80079f0:	6062      	str	r2, [r4, #4]
 80079f2:	04d9      	lsls	r1, r3, #19
 80079f4:	6922      	ldr	r2, [r4, #16]
 80079f6:	6022      	str	r2, [r4, #0]
 80079f8:	d504      	bpl.n	8007a04 <__sflush_r+0x78>
 80079fa:	1c42      	adds	r2, r0, #1
 80079fc:	d101      	bne.n	8007a02 <__sflush_r+0x76>
 80079fe:	682b      	ldr	r3, [r5, #0]
 8007a00:	b903      	cbnz	r3, 8007a04 <__sflush_r+0x78>
 8007a02:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a06:	602f      	str	r7, [r5, #0]
 8007a08:	b1b9      	cbz	r1, 8007a3a <__sflush_r+0xae>
 8007a0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a0e:	4299      	cmp	r1, r3
 8007a10:	d002      	beq.n	8007a18 <__sflush_r+0x8c>
 8007a12:	4628      	mov	r0, r5
 8007a14:	f7ff f9e8 	bl	8006de8 <_free_r>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a1c:	e00d      	b.n	8007a3a <__sflush_r+0xae>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	4628      	mov	r0, r5
 8007a22:	47b0      	blx	r6
 8007a24:	4602      	mov	r2, r0
 8007a26:	1c50      	adds	r0, r2, #1
 8007a28:	d1c9      	bne.n	80079be <__sflush_r+0x32>
 8007a2a:	682b      	ldr	r3, [r5, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0c6      	beq.n	80079be <__sflush_r+0x32>
 8007a30:	2b1d      	cmp	r3, #29
 8007a32:	d001      	beq.n	8007a38 <__sflush_r+0xac>
 8007a34:	2b16      	cmp	r3, #22
 8007a36:	d11e      	bne.n	8007a76 <__sflush_r+0xea>
 8007a38:	602f      	str	r7, [r5, #0]
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	e022      	b.n	8007a84 <__sflush_r+0xf8>
 8007a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a42:	b21b      	sxth	r3, r3
 8007a44:	e01b      	b.n	8007a7e <__sflush_r+0xf2>
 8007a46:	690f      	ldr	r7, [r1, #16]
 8007a48:	2f00      	cmp	r7, #0
 8007a4a:	d0f6      	beq.n	8007a3a <__sflush_r+0xae>
 8007a4c:	0793      	lsls	r3, r2, #30
 8007a4e:	680e      	ldr	r6, [r1, #0]
 8007a50:	bf08      	it	eq
 8007a52:	694b      	ldreq	r3, [r1, #20]
 8007a54:	600f      	str	r7, [r1, #0]
 8007a56:	bf18      	it	ne
 8007a58:	2300      	movne	r3, #0
 8007a5a:	eba6 0807 	sub.w	r8, r6, r7
 8007a5e:	608b      	str	r3, [r1, #8]
 8007a60:	f1b8 0f00 	cmp.w	r8, #0
 8007a64:	dde9      	ble.n	8007a3a <__sflush_r+0xae>
 8007a66:	6a21      	ldr	r1, [r4, #32]
 8007a68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a6a:	4643      	mov	r3, r8
 8007a6c:	463a      	mov	r2, r7
 8007a6e:	4628      	mov	r0, r5
 8007a70:	47b0      	blx	r6
 8007a72:	2800      	cmp	r0, #0
 8007a74:	dc08      	bgt.n	8007a88 <__sflush_r+0xfc>
 8007a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a7e:	81a3      	strh	r3, [r4, #12]
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a88:	4407      	add	r7, r0
 8007a8a:	eba8 0800 	sub.w	r8, r8, r0
 8007a8e:	e7e7      	b.n	8007a60 <__sflush_r+0xd4>
 8007a90:	20400001 	.word	0x20400001

08007a94 <_fflush_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	690b      	ldr	r3, [r1, #16]
 8007a98:	4605      	mov	r5, r0
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	b913      	cbnz	r3, 8007aa4 <_fflush_r+0x10>
 8007a9e:	2500      	movs	r5, #0
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	b118      	cbz	r0, 8007aae <_fflush_r+0x1a>
 8007aa6:	6a03      	ldr	r3, [r0, #32]
 8007aa8:	b90b      	cbnz	r3, 8007aae <_fflush_r+0x1a>
 8007aaa:	f7fe fa0d 	bl	8005ec8 <__sinit>
 8007aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0f3      	beq.n	8007a9e <_fflush_r+0xa>
 8007ab6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ab8:	07d0      	lsls	r0, r2, #31
 8007aba:	d404      	bmi.n	8007ac6 <_fflush_r+0x32>
 8007abc:	0599      	lsls	r1, r3, #22
 8007abe:	d402      	bmi.n	8007ac6 <_fflush_r+0x32>
 8007ac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ac2:	f7fe fb34 	bl	800612e <__retarget_lock_acquire_recursive>
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	4621      	mov	r1, r4
 8007aca:	f7ff ff5f 	bl	800798c <__sflush_r>
 8007ace:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ad0:	07da      	lsls	r2, r3, #31
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	d4e4      	bmi.n	8007aa0 <_fflush_r+0xc>
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	059b      	lsls	r3, r3, #22
 8007ada:	d4e1      	bmi.n	8007aa0 <_fflush_r+0xc>
 8007adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ade:	f7fe fb27 	bl	8006130 <__retarget_lock_release_recursive>
 8007ae2:	e7dd      	b.n	8007aa0 <_fflush_r+0xc>

08007ae4 <memmove>:
 8007ae4:	4288      	cmp	r0, r1
 8007ae6:	b510      	push	{r4, lr}
 8007ae8:	eb01 0402 	add.w	r4, r1, r2
 8007aec:	d902      	bls.n	8007af4 <memmove+0x10>
 8007aee:	4284      	cmp	r4, r0
 8007af0:	4623      	mov	r3, r4
 8007af2:	d807      	bhi.n	8007b04 <memmove+0x20>
 8007af4:	1e43      	subs	r3, r0, #1
 8007af6:	42a1      	cmp	r1, r4
 8007af8:	d008      	beq.n	8007b0c <memmove+0x28>
 8007afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007afe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b02:	e7f8      	b.n	8007af6 <memmove+0x12>
 8007b04:	4402      	add	r2, r0
 8007b06:	4601      	mov	r1, r0
 8007b08:	428a      	cmp	r2, r1
 8007b0a:	d100      	bne.n	8007b0e <memmove+0x2a>
 8007b0c:	bd10      	pop	{r4, pc}
 8007b0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b16:	e7f7      	b.n	8007b08 <memmove+0x24>

08007b18 <_sbrk_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4d06      	ldr	r5, [pc, #24]	@ (8007b34 <_sbrk_r+0x1c>)
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	4604      	mov	r4, r0
 8007b20:	4608      	mov	r0, r1
 8007b22:	602b      	str	r3, [r5, #0]
 8007b24:	f7fa fa88 	bl	8002038 <_sbrk>
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	d102      	bne.n	8007b32 <_sbrk_r+0x1a>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	b103      	cbz	r3, 8007b32 <_sbrk_r+0x1a>
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	20000458 	.word	0x20000458

08007b38 <memcpy>:
 8007b38:	440a      	add	r2, r1
 8007b3a:	4291      	cmp	r1, r2
 8007b3c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007b40:	d100      	bne.n	8007b44 <memcpy+0xc>
 8007b42:	4770      	bx	lr
 8007b44:	b510      	push	{r4, lr}
 8007b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b4e:	4291      	cmp	r1, r2
 8007b50:	d1f9      	bne.n	8007b46 <memcpy+0xe>
 8007b52:	bd10      	pop	{r4, pc}

08007b54 <__assert_func>:
 8007b54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b56:	4614      	mov	r4, r2
 8007b58:	461a      	mov	r2, r3
 8007b5a:	4b09      	ldr	r3, [pc, #36]	@ (8007b80 <__assert_func+0x2c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4605      	mov	r5, r0
 8007b60:	68d8      	ldr	r0, [r3, #12]
 8007b62:	b14c      	cbz	r4, 8007b78 <__assert_func+0x24>
 8007b64:	4b07      	ldr	r3, [pc, #28]	@ (8007b84 <__assert_func+0x30>)
 8007b66:	9100      	str	r1, [sp, #0]
 8007b68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b6c:	4906      	ldr	r1, [pc, #24]	@ (8007b88 <__assert_func+0x34>)
 8007b6e:	462b      	mov	r3, r5
 8007b70:	f000 f870 	bl	8007c54 <fiprintf>
 8007b74:	f000 f880 	bl	8007c78 <abort>
 8007b78:	4b04      	ldr	r3, [pc, #16]	@ (8007b8c <__assert_func+0x38>)
 8007b7a:	461c      	mov	r4, r3
 8007b7c:	e7f3      	b.n	8007b66 <__assert_func+0x12>
 8007b7e:	bf00      	nop
 8007b80:	20000018 	.word	0x20000018
 8007b84:	08008499 	.word	0x08008499
 8007b88:	080084a6 	.word	0x080084a6
 8007b8c:	080084d4 	.word	0x080084d4

08007b90 <_calloc_r>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	fba1 5402 	umull	r5, r4, r1, r2
 8007b96:	b934      	cbnz	r4, 8007ba6 <_calloc_r+0x16>
 8007b98:	4629      	mov	r1, r5
 8007b9a:	f7ff f999 	bl	8006ed0 <_malloc_r>
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	b928      	cbnz	r0, 8007bae <_calloc_r+0x1e>
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	bd70      	pop	{r4, r5, r6, pc}
 8007ba6:	220c      	movs	r2, #12
 8007ba8:	6002      	str	r2, [r0, #0]
 8007baa:	2600      	movs	r6, #0
 8007bac:	e7f9      	b.n	8007ba2 <_calloc_r+0x12>
 8007bae:	462a      	mov	r2, r5
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	f7fe fa3f 	bl	8006034 <memset>
 8007bb6:	e7f4      	b.n	8007ba2 <_calloc_r+0x12>

08007bb8 <__ascii_mbtowc>:
 8007bb8:	b082      	sub	sp, #8
 8007bba:	b901      	cbnz	r1, 8007bbe <__ascii_mbtowc+0x6>
 8007bbc:	a901      	add	r1, sp, #4
 8007bbe:	b142      	cbz	r2, 8007bd2 <__ascii_mbtowc+0x1a>
 8007bc0:	b14b      	cbz	r3, 8007bd6 <__ascii_mbtowc+0x1e>
 8007bc2:	7813      	ldrb	r3, [r2, #0]
 8007bc4:	600b      	str	r3, [r1, #0]
 8007bc6:	7812      	ldrb	r2, [r2, #0]
 8007bc8:	1e10      	subs	r0, r2, #0
 8007bca:	bf18      	it	ne
 8007bcc:	2001      	movne	r0, #1
 8007bce:	b002      	add	sp, #8
 8007bd0:	4770      	bx	lr
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	e7fb      	b.n	8007bce <__ascii_mbtowc+0x16>
 8007bd6:	f06f 0001 	mvn.w	r0, #1
 8007bda:	e7f8      	b.n	8007bce <__ascii_mbtowc+0x16>

08007bdc <_realloc_r>:
 8007bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be0:	4607      	mov	r7, r0
 8007be2:	4614      	mov	r4, r2
 8007be4:	460d      	mov	r5, r1
 8007be6:	b921      	cbnz	r1, 8007bf2 <_realloc_r+0x16>
 8007be8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bec:	4611      	mov	r1, r2
 8007bee:	f7ff b96f 	b.w	8006ed0 <_malloc_r>
 8007bf2:	b92a      	cbnz	r2, 8007c00 <_realloc_r+0x24>
 8007bf4:	f7ff f8f8 	bl	8006de8 <_free_r>
 8007bf8:	4625      	mov	r5, r4
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c00:	f000 f841 	bl	8007c86 <_malloc_usable_size_r>
 8007c04:	4284      	cmp	r4, r0
 8007c06:	4606      	mov	r6, r0
 8007c08:	d802      	bhi.n	8007c10 <_realloc_r+0x34>
 8007c0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c0e:	d8f4      	bhi.n	8007bfa <_realloc_r+0x1e>
 8007c10:	4621      	mov	r1, r4
 8007c12:	4638      	mov	r0, r7
 8007c14:	f7ff f95c 	bl	8006ed0 <_malloc_r>
 8007c18:	4680      	mov	r8, r0
 8007c1a:	b908      	cbnz	r0, 8007c20 <_realloc_r+0x44>
 8007c1c:	4645      	mov	r5, r8
 8007c1e:	e7ec      	b.n	8007bfa <_realloc_r+0x1e>
 8007c20:	42b4      	cmp	r4, r6
 8007c22:	4622      	mov	r2, r4
 8007c24:	4629      	mov	r1, r5
 8007c26:	bf28      	it	cs
 8007c28:	4632      	movcs	r2, r6
 8007c2a:	f7ff ff85 	bl	8007b38 <memcpy>
 8007c2e:	4629      	mov	r1, r5
 8007c30:	4638      	mov	r0, r7
 8007c32:	f7ff f8d9 	bl	8006de8 <_free_r>
 8007c36:	e7f1      	b.n	8007c1c <_realloc_r+0x40>

08007c38 <__ascii_wctomb>:
 8007c38:	4603      	mov	r3, r0
 8007c3a:	4608      	mov	r0, r1
 8007c3c:	b141      	cbz	r1, 8007c50 <__ascii_wctomb+0x18>
 8007c3e:	2aff      	cmp	r2, #255	@ 0xff
 8007c40:	d904      	bls.n	8007c4c <__ascii_wctomb+0x14>
 8007c42:	228a      	movs	r2, #138	@ 0x8a
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c4a:	4770      	bx	lr
 8007c4c:	700a      	strb	r2, [r1, #0]
 8007c4e:	2001      	movs	r0, #1
 8007c50:	4770      	bx	lr
	...

08007c54 <fiprintf>:
 8007c54:	b40e      	push	{r1, r2, r3}
 8007c56:	b503      	push	{r0, r1, lr}
 8007c58:	4601      	mov	r1, r0
 8007c5a:	ab03      	add	r3, sp, #12
 8007c5c:	4805      	ldr	r0, [pc, #20]	@ (8007c74 <fiprintf+0x20>)
 8007c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c62:	6800      	ldr	r0, [r0, #0]
 8007c64:	9301      	str	r3, [sp, #4]
 8007c66:	f000 f83f 	bl	8007ce8 <_vfiprintf_r>
 8007c6a:	b002      	add	sp, #8
 8007c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c70:	b003      	add	sp, #12
 8007c72:	4770      	bx	lr
 8007c74:	20000018 	.word	0x20000018

08007c78 <abort>:
 8007c78:	b508      	push	{r3, lr}
 8007c7a:	2006      	movs	r0, #6
 8007c7c:	f000 fa08 	bl	8008090 <raise>
 8007c80:	2001      	movs	r0, #1
 8007c82:	f7fa f960 	bl	8001f46 <_exit>

08007c86 <_malloc_usable_size_r>:
 8007c86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c8a:	1f18      	subs	r0, r3, #4
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	bfbc      	itt	lt
 8007c90:	580b      	ldrlt	r3, [r1, r0]
 8007c92:	18c0      	addlt	r0, r0, r3
 8007c94:	4770      	bx	lr

08007c96 <__sfputc_r>:
 8007c96:	6893      	ldr	r3, [r2, #8]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	b410      	push	{r4}
 8007c9e:	6093      	str	r3, [r2, #8]
 8007ca0:	da08      	bge.n	8007cb4 <__sfputc_r+0x1e>
 8007ca2:	6994      	ldr	r4, [r2, #24]
 8007ca4:	42a3      	cmp	r3, r4
 8007ca6:	db01      	blt.n	8007cac <__sfputc_r+0x16>
 8007ca8:	290a      	cmp	r1, #10
 8007caa:	d103      	bne.n	8007cb4 <__sfputc_r+0x1e>
 8007cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cb0:	f000 b932 	b.w	8007f18 <__swbuf_r>
 8007cb4:	6813      	ldr	r3, [r2, #0]
 8007cb6:	1c58      	adds	r0, r3, #1
 8007cb8:	6010      	str	r0, [r2, #0]
 8007cba:	7019      	strb	r1, [r3, #0]
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <__sfputs_r>:
 8007cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	460f      	mov	r7, r1
 8007cca:	4614      	mov	r4, r2
 8007ccc:	18d5      	adds	r5, r2, r3
 8007cce:	42ac      	cmp	r4, r5
 8007cd0:	d101      	bne.n	8007cd6 <__sfputs_r+0x12>
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	e007      	b.n	8007ce6 <__sfputs_r+0x22>
 8007cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cda:	463a      	mov	r2, r7
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f7ff ffda 	bl	8007c96 <__sfputc_r>
 8007ce2:	1c43      	adds	r3, r0, #1
 8007ce4:	d1f3      	bne.n	8007cce <__sfputs_r+0xa>
 8007ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ce8 <_vfiprintf_r>:
 8007ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	460d      	mov	r5, r1
 8007cee:	b09d      	sub	sp, #116	@ 0x74
 8007cf0:	4614      	mov	r4, r2
 8007cf2:	4698      	mov	r8, r3
 8007cf4:	4606      	mov	r6, r0
 8007cf6:	b118      	cbz	r0, 8007d00 <_vfiprintf_r+0x18>
 8007cf8:	6a03      	ldr	r3, [r0, #32]
 8007cfa:	b90b      	cbnz	r3, 8007d00 <_vfiprintf_r+0x18>
 8007cfc:	f7fe f8e4 	bl	8005ec8 <__sinit>
 8007d00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d02:	07d9      	lsls	r1, r3, #31
 8007d04:	d405      	bmi.n	8007d12 <_vfiprintf_r+0x2a>
 8007d06:	89ab      	ldrh	r3, [r5, #12]
 8007d08:	059a      	lsls	r2, r3, #22
 8007d0a:	d402      	bmi.n	8007d12 <_vfiprintf_r+0x2a>
 8007d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d0e:	f7fe fa0e 	bl	800612e <__retarget_lock_acquire_recursive>
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	071b      	lsls	r3, r3, #28
 8007d16:	d501      	bpl.n	8007d1c <_vfiprintf_r+0x34>
 8007d18:	692b      	ldr	r3, [r5, #16]
 8007d1a:	b99b      	cbnz	r3, 8007d44 <_vfiprintf_r+0x5c>
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	4630      	mov	r0, r6
 8007d20:	f000 f938 	bl	8007f94 <__swsetup_r>
 8007d24:	b170      	cbz	r0, 8007d44 <_vfiprintf_r+0x5c>
 8007d26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d28:	07dc      	lsls	r4, r3, #31
 8007d2a:	d504      	bpl.n	8007d36 <_vfiprintf_r+0x4e>
 8007d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d30:	b01d      	add	sp, #116	@ 0x74
 8007d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d36:	89ab      	ldrh	r3, [r5, #12]
 8007d38:	0598      	lsls	r0, r3, #22
 8007d3a:	d4f7      	bmi.n	8007d2c <_vfiprintf_r+0x44>
 8007d3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d3e:	f7fe f9f7 	bl	8006130 <__retarget_lock_release_recursive>
 8007d42:	e7f3      	b.n	8007d2c <_vfiprintf_r+0x44>
 8007d44:	2300      	movs	r3, #0
 8007d46:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d48:	2320      	movs	r3, #32
 8007d4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d52:	2330      	movs	r3, #48	@ 0x30
 8007d54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007f04 <_vfiprintf_r+0x21c>
 8007d58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d5c:	f04f 0901 	mov.w	r9, #1
 8007d60:	4623      	mov	r3, r4
 8007d62:	469a      	mov	sl, r3
 8007d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d68:	b10a      	cbz	r2, 8007d6e <_vfiprintf_r+0x86>
 8007d6a:	2a25      	cmp	r2, #37	@ 0x25
 8007d6c:	d1f9      	bne.n	8007d62 <_vfiprintf_r+0x7a>
 8007d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d72:	d00b      	beq.n	8007d8c <_vfiprintf_r+0xa4>
 8007d74:	465b      	mov	r3, fp
 8007d76:	4622      	mov	r2, r4
 8007d78:	4629      	mov	r1, r5
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	f7ff ffa2 	bl	8007cc4 <__sfputs_r>
 8007d80:	3001      	adds	r0, #1
 8007d82:	f000 80a7 	beq.w	8007ed4 <_vfiprintf_r+0x1ec>
 8007d86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d88:	445a      	add	r2, fp
 8007d8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f000 809f 	beq.w	8007ed4 <_vfiprintf_r+0x1ec>
 8007d96:	2300      	movs	r3, #0
 8007d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007da0:	f10a 0a01 	add.w	sl, sl, #1
 8007da4:	9304      	str	r3, [sp, #16]
 8007da6:	9307      	str	r3, [sp, #28]
 8007da8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dac:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dae:	4654      	mov	r4, sl
 8007db0:	2205      	movs	r2, #5
 8007db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007db6:	4853      	ldr	r0, [pc, #332]	@ (8007f04 <_vfiprintf_r+0x21c>)
 8007db8:	f7f8 fa12 	bl	80001e0 <memchr>
 8007dbc:	9a04      	ldr	r2, [sp, #16]
 8007dbe:	b9d8      	cbnz	r0, 8007df8 <_vfiprintf_r+0x110>
 8007dc0:	06d1      	lsls	r1, r2, #27
 8007dc2:	bf44      	itt	mi
 8007dc4:	2320      	movmi	r3, #32
 8007dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dca:	0713      	lsls	r3, r2, #28
 8007dcc:	bf44      	itt	mi
 8007dce:	232b      	movmi	r3, #43	@ 0x2b
 8007dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8007dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dda:	d015      	beq.n	8007e08 <_vfiprintf_r+0x120>
 8007ddc:	9a07      	ldr	r2, [sp, #28]
 8007dde:	4654      	mov	r4, sl
 8007de0:	2000      	movs	r0, #0
 8007de2:	f04f 0c0a 	mov.w	ip, #10
 8007de6:	4621      	mov	r1, r4
 8007de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dec:	3b30      	subs	r3, #48	@ 0x30
 8007dee:	2b09      	cmp	r3, #9
 8007df0:	d94b      	bls.n	8007e8a <_vfiprintf_r+0x1a2>
 8007df2:	b1b0      	cbz	r0, 8007e22 <_vfiprintf_r+0x13a>
 8007df4:	9207      	str	r2, [sp, #28]
 8007df6:	e014      	b.n	8007e22 <_vfiprintf_r+0x13a>
 8007df8:	eba0 0308 	sub.w	r3, r0, r8
 8007dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8007e00:	4313      	orrs	r3, r2
 8007e02:	9304      	str	r3, [sp, #16]
 8007e04:	46a2      	mov	sl, r4
 8007e06:	e7d2      	b.n	8007dae <_vfiprintf_r+0xc6>
 8007e08:	9b03      	ldr	r3, [sp, #12]
 8007e0a:	1d19      	adds	r1, r3, #4
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	9103      	str	r1, [sp, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	bfbb      	ittet	lt
 8007e14:	425b      	neglt	r3, r3
 8007e16:	f042 0202 	orrlt.w	r2, r2, #2
 8007e1a:	9307      	strge	r3, [sp, #28]
 8007e1c:	9307      	strlt	r3, [sp, #28]
 8007e1e:	bfb8      	it	lt
 8007e20:	9204      	strlt	r2, [sp, #16]
 8007e22:	7823      	ldrb	r3, [r4, #0]
 8007e24:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e26:	d10a      	bne.n	8007e3e <_vfiprintf_r+0x156>
 8007e28:	7863      	ldrb	r3, [r4, #1]
 8007e2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e2c:	d132      	bne.n	8007e94 <_vfiprintf_r+0x1ac>
 8007e2e:	9b03      	ldr	r3, [sp, #12]
 8007e30:	1d1a      	adds	r2, r3, #4
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	9203      	str	r2, [sp, #12]
 8007e36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e3a:	3402      	adds	r4, #2
 8007e3c:	9305      	str	r3, [sp, #20]
 8007e3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007f14 <_vfiprintf_r+0x22c>
 8007e42:	7821      	ldrb	r1, [r4, #0]
 8007e44:	2203      	movs	r2, #3
 8007e46:	4650      	mov	r0, sl
 8007e48:	f7f8 f9ca 	bl	80001e0 <memchr>
 8007e4c:	b138      	cbz	r0, 8007e5e <_vfiprintf_r+0x176>
 8007e4e:	9b04      	ldr	r3, [sp, #16]
 8007e50:	eba0 000a 	sub.w	r0, r0, sl
 8007e54:	2240      	movs	r2, #64	@ 0x40
 8007e56:	4082      	lsls	r2, r0
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	3401      	adds	r4, #1
 8007e5c:	9304      	str	r3, [sp, #16]
 8007e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e62:	4829      	ldr	r0, [pc, #164]	@ (8007f08 <_vfiprintf_r+0x220>)
 8007e64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e68:	2206      	movs	r2, #6
 8007e6a:	f7f8 f9b9 	bl	80001e0 <memchr>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d03f      	beq.n	8007ef2 <_vfiprintf_r+0x20a>
 8007e72:	4b26      	ldr	r3, [pc, #152]	@ (8007f0c <_vfiprintf_r+0x224>)
 8007e74:	bb1b      	cbnz	r3, 8007ebe <_vfiprintf_r+0x1d6>
 8007e76:	9b03      	ldr	r3, [sp, #12]
 8007e78:	3307      	adds	r3, #7
 8007e7a:	f023 0307 	bic.w	r3, r3, #7
 8007e7e:	3308      	adds	r3, #8
 8007e80:	9303      	str	r3, [sp, #12]
 8007e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e84:	443b      	add	r3, r7
 8007e86:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e88:	e76a      	b.n	8007d60 <_vfiprintf_r+0x78>
 8007e8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e8e:	460c      	mov	r4, r1
 8007e90:	2001      	movs	r0, #1
 8007e92:	e7a8      	b.n	8007de6 <_vfiprintf_r+0xfe>
 8007e94:	2300      	movs	r3, #0
 8007e96:	3401      	adds	r4, #1
 8007e98:	9305      	str	r3, [sp, #20]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	f04f 0c0a 	mov.w	ip, #10
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ea6:	3a30      	subs	r2, #48	@ 0x30
 8007ea8:	2a09      	cmp	r2, #9
 8007eaa:	d903      	bls.n	8007eb4 <_vfiprintf_r+0x1cc>
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0c6      	beq.n	8007e3e <_vfiprintf_r+0x156>
 8007eb0:	9105      	str	r1, [sp, #20]
 8007eb2:	e7c4      	b.n	8007e3e <_vfiprintf_r+0x156>
 8007eb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eb8:	4604      	mov	r4, r0
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e7f0      	b.n	8007ea0 <_vfiprintf_r+0x1b8>
 8007ebe:	ab03      	add	r3, sp, #12
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	462a      	mov	r2, r5
 8007ec4:	4b12      	ldr	r3, [pc, #72]	@ (8007f10 <_vfiprintf_r+0x228>)
 8007ec6:	a904      	add	r1, sp, #16
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f7fd fbbb 	bl	8005644 <_printf_float>
 8007ece:	4607      	mov	r7, r0
 8007ed0:	1c78      	adds	r0, r7, #1
 8007ed2:	d1d6      	bne.n	8007e82 <_vfiprintf_r+0x19a>
 8007ed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ed6:	07d9      	lsls	r1, r3, #31
 8007ed8:	d405      	bmi.n	8007ee6 <_vfiprintf_r+0x1fe>
 8007eda:	89ab      	ldrh	r3, [r5, #12]
 8007edc:	059a      	lsls	r2, r3, #22
 8007ede:	d402      	bmi.n	8007ee6 <_vfiprintf_r+0x1fe>
 8007ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ee2:	f7fe f925 	bl	8006130 <__retarget_lock_release_recursive>
 8007ee6:	89ab      	ldrh	r3, [r5, #12]
 8007ee8:	065b      	lsls	r3, r3, #25
 8007eea:	f53f af1f 	bmi.w	8007d2c <_vfiprintf_r+0x44>
 8007eee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ef0:	e71e      	b.n	8007d30 <_vfiprintf_r+0x48>
 8007ef2:	ab03      	add	r3, sp, #12
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	462a      	mov	r2, r5
 8007ef8:	4b05      	ldr	r3, [pc, #20]	@ (8007f10 <_vfiprintf_r+0x228>)
 8007efa:	a904      	add	r1, sp, #16
 8007efc:	4630      	mov	r0, r6
 8007efe:	f7fd fe39 	bl	8005b74 <_printf_i>
 8007f02:	e7e4      	b.n	8007ece <_vfiprintf_r+0x1e6>
 8007f04:	0800847e 	.word	0x0800847e
 8007f08:	08008488 	.word	0x08008488
 8007f0c:	08005645 	.word	0x08005645
 8007f10:	08007cc5 	.word	0x08007cc5
 8007f14:	08008484 	.word	0x08008484

08007f18 <__swbuf_r>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	460e      	mov	r6, r1
 8007f1c:	4614      	mov	r4, r2
 8007f1e:	4605      	mov	r5, r0
 8007f20:	b118      	cbz	r0, 8007f2a <__swbuf_r+0x12>
 8007f22:	6a03      	ldr	r3, [r0, #32]
 8007f24:	b90b      	cbnz	r3, 8007f2a <__swbuf_r+0x12>
 8007f26:	f7fd ffcf 	bl	8005ec8 <__sinit>
 8007f2a:	69a3      	ldr	r3, [r4, #24]
 8007f2c:	60a3      	str	r3, [r4, #8]
 8007f2e:	89a3      	ldrh	r3, [r4, #12]
 8007f30:	071a      	lsls	r2, r3, #28
 8007f32:	d501      	bpl.n	8007f38 <__swbuf_r+0x20>
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	b943      	cbnz	r3, 8007f4a <__swbuf_r+0x32>
 8007f38:	4621      	mov	r1, r4
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	f000 f82a 	bl	8007f94 <__swsetup_r>
 8007f40:	b118      	cbz	r0, 8007f4a <__swbuf_r+0x32>
 8007f42:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007f46:	4638      	mov	r0, r7
 8007f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	6922      	ldr	r2, [r4, #16]
 8007f4e:	1a98      	subs	r0, r3, r2
 8007f50:	6963      	ldr	r3, [r4, #20]
 8007f52:	b2f6      	uxtb	r6, r6
 8007f54:	4283      	cmp	r3, r0
 8007f56:	4637      	mov	r7, r6
 8007f58:	dc05      	bgt.n	8007f66 <__swbuf_r+0x4e>
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	f7ff fd99 	bl	8007a94 <_fflush_r>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d1ed      	bne.n	8007f42 <__swbuf_r+0x2a>
 8007f66:	68a3      	ldr	r3, [r4, #8]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	60a3      	str	r3, [r4, #8]
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	6022      	str	r2, [r4, #0]
 8007f72:	701e      	strb	r6, [r3, #0]
 8007f74:	6962      	ldr	r2, [r4, #20]
 8007f76:	1c43      	adds	r3, r0, #1
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d004      	beq.n	8007f86 <__swbuf_r+0x6e>
 8007f7c:	89a3      	ldrh	r3, [r4, #12]
 8007f7e:	07db      	lsls	r3, r3, #31
 8007f80:	d5e1      	bpl.n	8007f46 <__swbuf_r+0x2e>
 8007f82:	2e0a      	cmp	r6, #10
 8007f84:	d1df      	bne.n	8007f46 <__swbuf_r+0x2e>
 8007f86:	4621      	mov	r1, r4
 8007f88:	4628      	mov	r0, r5
 8007f8a:	f7ff fd83 	bl	8007a94 <_fflush_r>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d0d9      	beq.n	8007f46 <__swbuf_r+0x2e>
 8007f92:	e7d6      	b.n	8007f42 <__swbuf_r+0x2a>

08007f94 <__swsetup_r>:
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	4b29      	ldr	r3, [pc, #164]	@ (800803c <__swsetup_r+0xa8>)
 8007f98:	4605      	mov	r5, r0
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	460c      	mov	r4, r1
 8007f9e:	b118      	cbz	r0, 8007fa8 <__swsetup_r+0x14>
 8007fa0:	6a03      	ldr	r3, [r0, #32]
 8007fa2:	b90b      	cbnz	r3, 8007fa8 <__swsetup_r+0x14>
 8007fa4:	f7fd ff90 	bl	8005ec8 <__sinit>
 8007fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fac:	0719      	lsls	r1, r3, #28
 8007fae:	d422      	bmi.n	8007ff6 <__swsetup_r+0x62>
 8007fb0:	06da      	lsls	r2, r3, #27
 8007fb2:	d407      	bmi.n	8007fc4 <__swsetup_r+0x30>
 8007fb4:	2209      	movs	r2, #9
 8007fb6:	602a      	str	r2, [r5, #0]
 8007fb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fbc:	81a3      	strh	r3, [r4, #12]
 8007fbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fc2:	e033      	b.n	800802c <__swsetup_r+0x98>
 8007fc4:	0758      	lsls	r0, r3, #29
 8007fc6:	d512      	bpl.n	8007fee <__swsetup_r+0x5a>
 8007fc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fca:	b141      	cbz	r1, 8007fde <__swsetup_r+0x4a>
 8007fcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fd0:	4299      	cmp	r1, r3
 8007fd2:	d002      	beq.n	8007fda <__swsetup_r+0x46>
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f7fe ff07 	bl	8006de8 <_free_r>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fde:	89a3      	ldrh	r3, [r4, #12]
 8007fe0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007fe4:	81a3      	strh	r3, [r4, #12]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	6063      	str	r3, [r4, #4]
 8007fea:	6923      	ldr	r3, [r4, #16]
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	f043 0308 	orr.w	r3, r3, #8
 8007ff4:	81a3      	strh	r3, [r4, #12]
 8007ff6:	6923      	ldr	r3, [r4, #16]
 8007ff8:	b94b      	cbnz	r3, 800800e <__swsetup_r+0x7a>
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008004:	d003      	beq.n	800800e <__swsetup_r+0x7a>
 8008006:	4621      	mov	r1, r4
 8008008:	4628      	mov	r0, r5
 800800a:	f000 f883 	bl	8008114 <__smakebuf_r>
 800800e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008012:	f013 0201 	ands.w	r2, r3, #1
 8008016:	d00a      	beq.n	800802e <__swsetup_r+0x9a>
 8008018:	2200      	movs	r2, #0
 800801a:	60a2      	str	r2, [r4, #8]
 800801c:	6962      	ldr	r2, [r4, #20]
 800801e:	4252      	negs	r2, r2
 8008020:	61a2      	str	r2, [r4, #24]
 8008022:	6922      	ldr	r2, [r4, #16]
 8008024:	b942      	cbnz	r2, 8008038 <__swsetup_r+0xa4>
 8008026:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800802a:	d1c5      	bne.n	8007fb8 <__swsetup_r+0x24>
 800802c:	bd38      	pop	{r3, r4, r5, pc}
 800802e:	0799      	lsls	r1, r3, #30
 8008030:	bf58      	it	pl
 8008032:	6962      	ldrpl	r2, [r4, #20]
 8008034:	60a2      	str	r2, [r4, #8]
 8008036:	e7f4      	b.n	8008022 <__swsetup_r+0x8e>
 8008038:	2000      	movs	r0, #0
 800803a:	e7f7      	b.n	800802c <__swsetup_r+0x98>
 800803c:	20000018 	.word	0x20000018

08008040 <_raise_r>:
 8008040:	291f      	cmp	r1, #31
 8008042:	b538      	push	{r3, r4, r5, lr}
 8008044:	4605      	mov	r5, r0
 8008046:	460c      	mov	r4, r1
 8008048:	d904      	bls.n	8008054 <_raise_r+0x14>
 800804a:	2316      	movs	r3, #22
 800804c:	6003      	str	r3, [r0, #0]
 800804e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008052:	bd38      	pop	{r3, r4, r5, pc}
 8008054:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008056:	b112      	cbz	r2, 800805e <_raise_r+0x1e>
 8008058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800805c:	b94b      	cbnz	r3, 8008072 <_raise_r+0x32>
 800805e:	4628      	mov	r0, r5
 8008060:	f000 f830 	bl	80080c4 <_getpid_r>
 8008064:	4622      	mov	r2, r4
 8008066:	4601      	mov	r1, r0
 8008068:	4628      	mov	r0, r5
 800806a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800806e:	f000 b817 	b.w	80080a0 <_kill_r>
 8008072:	2b01      	cmp	r3, #1
 8008074:	d00a      	beq.n	800808c <_raise_r+0x4c>
 8008076:	1c59      	adds	r1, r3, #1
 8008078:	d103      	bne.n	8008082 <_raise_r+0x42>
 800807a:	2316      	movs	r3, #22
 800807c:	6003      	str	r3, [r0, #0]
 800807e:	2001      	movs	r0, #1
 8008080:	e7e7      	b.n	8008052 <_raise_r+0x12>
 8008082:	2100      	movs	r1, #0
 8008084:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008088:	4620      	mov	r0, r4
 800808a:	4798      	blx	r3
 800808c:	2000      	movs	r0, #0
 800808e:	e7e0      	b.n	8008052 <_raise_r+0x12>

08008090 <raise>:
 8008090:	4b02      	ldr	r3, [pc, #8]	@ (800809c <raise+0xc>)
 8008092:	4601      	mov	r1, r0
 8008094:	6818      	ldr	r0, [r3, #0]
 8008096:	f7ff bfd3 	b.w	8008040 <_raise_r>
 800809a:	bf00      	nop
 800809c:	20000018 	.word	0x20000018

080080a0 <_kill_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	4d07      	ldr	r5, [pc, #28]	@ (80080c0 <_kill_r+0x20>)
 80080a4:	2300      	movs	r3, #0
 80080a6:	4604      	mov	r4, r0
 80080a8:	4608      	mov	r0, r1
 80080aa:	4611      	mov	r1, r2
 80080ac:	602b      	str	r3, [r5, #0]
 80080ae:	f7f9 ff3a 	bl	8001f26 <_kill>
 80080b2:	1c43      	adds	r3, r0, #1
 80080b4:	d102      	bne.n	80080bc <_kill_r+0x1c>
 80080b6:	682b      	ldr	r3, [r5, #0]
 80080b8:	b103      	cbz	r3, 80080bc <_kill_r+0x1c>
 80080ba:	6023      	str	r3, [r4, #0]
 80080bc:	bd38      	pop	{r3, r4, r5, pc}
 80080be:	bf00      	nop
 80080c0:	20000458 	.word	0x20000458

080080c4 <_getpid_r>:
 80080c4:	f7f9 bf27 	b.w	8001f16 <_getpid>

080080c8 <__swhatbuf_r>:
 80080c8:	b570      	push	{r4, r5, r6, lr}
 80080ca:	460c      	mov	r4, r1
 80080cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d0:	2900      	cmp	r1, #0
 80080d2:	b096      	sub	sp, #88	@ 0x58
 80080d4:	4615      	mov	r5, r2
 80080d6:	461e      	mov	r6, r3
 80080d8:	da0d      	bge.n	80080f6 <__swhatbuf_r+0x2e>
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80080e0:	f04f 0100 	mov.w	r1, #0
 80080e4:	bf14      	ite	ne
 80080e6:	2340      	movne	r3, #64	@ 0x40
 80080e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80080ec:	2000      	movs	r0, #0
 80080ee:	6031      	str	r1, [r6, #0]
 80080f0:	602b      	str	r3, [r5, #0]
 80080f2:	b016      	add	sp, #88	@ 0x58
 80080f4:	bd70      	pop	{r4, r5, r6, pc}
 80080f6:	466a      	mov	r2, sp
 80080f8:	f000 f848 	bl	800818c <_fstat_r>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	dbec      	blt.n	80080da <__swhatbuf_r+0x12>
 8008100:	9901      	ldr	r1, [sp, #4]
 8008102:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008106:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800810a:	4259      	negs	r1, r3
 800810c:	4159      	adcs	r1, r3
 800810e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008112:	e7eb      	b.n	80080ec <__swhatbuf_r+0x24>

08008114 <__smakebuf_r>:
 8008114:	898b      	ldrh	r3, [r1, #12]
 8008116:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008118:	079d      	lsls	r5, r3, #30
 800811a:	4606      	mov	r6, r0
 800811c:	460c      	mov	r4, r1
 800811e:	d507      	bpl.n	8008130 <__smakebuf_r+0x1c>
 8008120:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	6123      	str	r3, [r4, #16]
 8008128:	2301      	movs	r3, #1
 800812a:	6163      	str	r3, [r4, #20]
 800812c:	b003      	add	sp, #12
 800812e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008130:	ab01      	add	r3, sp, #4
 8008132:	466a      	mov	r2, sp
 8008134:	f7ff ffc8 	bl	80080c8 <__swhatbuf_r>
 8008138:	9f00      	ldr	r7, [sp, #0]
 800813a:	4605      	mov	r5, r0
 800813c:	4639      	mov	r1, r7
 800813e:	4630      	mov	r0, r6
 8008140:	f7fe fec6 	bl	8006ed0 <_malloc_r>
 8008144:	b948      	cbnz	r0, 800815a <__smakebuf_r+0x46>
 8008146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800814a:	059a      	lsls	r2, r3, #22
 800814c:	d4ee      	bmi.n	800812c <__smakebuf_r+0x18>
 800814e:	f023 0303 	bic.w	r3, r3, #3
 8008152:	f043 0302 	orr.w	r3, r3, #2
 8008156:	81a3      	strh	r3, [r4, #12]
 8008158:	e7e2      	b.n	8008120 <__smakebuf_r+0xc>
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	6020      	str	r0, [r4, #0]
 800815e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008162:	81a3      	strh	r3, [r4, #12]
 8008164:	9b01      	ldr	r3, [sp, #4]
 8008166:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800816a:	b15b      	cbz	r3, 8008184 <__smakebuf_r+0x70>
 800816c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008170:	4630      	mov	r0, r6
 8008172:	f000 f81d 	bl	80081b0 <_isatty_r>
 8008176:	b128      	cbz	r0, 8008184 <__smakebuf_r+0x70>
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	f023 0303 	bic.w	r3, r3, #3
 800817e:	f043 0301 	orr.w	r3, r3, #1
 8008182:	81a3      	strh	r3, [r4, #12]
 8008184:	89a3      	ldrh	r3, [r4, #12]
 8008186:	431d      	orrs	r5, r3
 8008188:	81a5      	strh	r5, [r4, #12]
 800818a:	e7cf      	b.n	800812c <__smakebuf_r+0x18>

0800818c <_fstat_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	4d07      	ldr	r5, [pc, #28]	@ (80081ac <_fstat_r+0x20>)
 8008190:	2300      	movs	r3, #0
 8008192:	4604      	mov	r4, r0
 8008194:	4608      	mov	r0, r1
 8008196:	4611      	mov	r1, r2
 8008198:	602b      	str	r3, [r5, #0]
 800819a:	f7f9 ff24 	bl	8001fe6 <_fstat>
 800819e:	1c43      	adds	r3, r0, #1
 80081a0:	d102      	bne.n	80081a8 <_fstat_r+0x1c>
 80081a2:	682b      	ldr	r3, [r5, #0]
 80081a4:	b103      	cbz	r3, 80081a8 <_fstat_r+0x1c>
 80081a6:	6023      	str	r3, [r4, #0]
 80081a8:	bd38      	pop	{r3, r4, r5, pc}
 80081aa:	bf00      	nop
 80081ac:	20000458 	.word	0x20000458

080081b0 <_isatty_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	4d06      	ldr	r5, [pc, #24]	@ (80081cc <_isatty_r+0x1c>)
 80081b4:	2300      	movs	r3, #0
 80081b6:	4604      	mov	r4, r0
 80081b8:	4608      	mov	r0, r1
 80081ba:	602b      	str	r3, [r5, #0]
 80081bc:	f7f9 ff23 	bl	8002006 <_isatty>
 80081c0:	1c43      	adds	r3, r0, #1
 80081c2:	d102      	bne.n	80081ca <_isatty_r+0x1a>
 80081c4:	682b      	ldr	r3, [r5, #0]
 80081c6:	b103      	cbz	r3, 80081ca <_isatty_r+0x1a>
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	bd38      	pop	{r3, r4, r5, pc}
 80081cc:	20000458 	.word	0x20000458

080081d0 <_init>:
 80081d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d2:	bf00      	nop
 80081d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d6:	bc08      	pop	{r3}
 80081d8:	469e      	mov	lr, r3
 80081da:	4770      	bx	lr

080081dc <_fini>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	bf00      	nop
 80081e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e2:	bc08      	pop	{r3}
 80081e4:	469e      	mov	lr, r3
 80081e6:	4770      	bx	lr
