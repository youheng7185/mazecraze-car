
mazecrase-car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  0800fa48  0800fa48  00010a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101dc  080101dc  000122cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080101dc  080101dc  000111dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080101e4  080101e4  000122cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080101e4  080101e4  000111e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080101e8  080101e8  000111e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  080101ec  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f78  200002cc  080104b8  000122cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002244  080104b8  00013244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000122cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab81  00000000  00000000  000122fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044ba  00000000  00000000  0002ce7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  00031338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012e4  00000000  00000000  00032bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000682b  00000000  00000000  00033e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e139  00000000  00000000  0003a6c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097b38  00000000  00000000  00058800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0338  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078d4  00000000  00000000  000f037c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f7c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fa30 	.word	0x0800fa30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800fa30 	.word	0x0800fa30

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <my_printf>:
#define BUFFER_LEN 128
//uint8_t tx_buffer[BUFFER_LEN];
//uint16_t usbTxLength;

static inline void my_printf(const char *format, ...)
{
 8000ee4:	b40f      	push	{r0, r1, r2, r3}
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b0a2      	sub	sp, #136	@ 0x88
 8000eea:	af00      	add	r7, sp, #0
    char tx_buffer[BUFFER_LEN];
    va_list args;
    va_start(args, format);
 8000eec:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ef0:	603b      	str	r3, [r7, #0]
    int usbTxLength = vsnprintf(tx_buffer, BUFFER_LEN, format, args);
 8000ef2:	1d38      	adds	r0, r7, #4
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000efa:	2180      	movs	r1, #128	@ 0x80
 8000efc:	f00c fcba 	bl	800d874 <vsniprintf>
 8000f00:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    va_end(args);

    if (usbTxLength > 0 && usbTxLength < BUFFER_LEN)
 8000f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	dd0b      	ble.n	8000f24 <my_printf+0x40>
 8000f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f10:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f12:	dc07      	bgt.n	8000f24 <my_printf+0x40>
    {
        CDC_Transmit_FS((uint8_t *)tx_buffer, usbTxLength);
 8000f14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f00b fa5c 	bl	800c3dc <CDC_Transmit_FS>
    }
}
 8000f24:	bf00      	nop
 8000f26:	3788      	adds	r7, #136	@ 0x88
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f2e:	b004      	add	sp, #16
 8000f30:	4770      	bx	lr
	...

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08e      	sub	sp, #56	@ 0x38
 8000f38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f002 fcbd 	bl	80038b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f885 	bl	800104c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 fb4f 	bl	80015e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f46:	f000 f8e9 	bl	800111c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f4a:	f000 f915 	bl	8001178 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000f4e:	f000 f977 	bl	8001240 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000f52:	f000 fa9f 	bl	8001494 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000f56:	f000 faf1 	bl	800153c <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8000f5a:	f00b f931 	bl	800c1c0 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000f5e:	f000 fa1b 	bl	8001398 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000f62:	f000 f937 	bl	80011d4 <MX_SPI1_Init>
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // PB13 HIGH
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // PB12 LOW
//  HAL_GPIO_WritePin(GPIOA, motor_stdby_Pin, GPIO_PIN_SET); // make standby pin high, activate the motor driver


  selectTCAChannel(0);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f001 f910 	bl	800218c <selectTCAChannel>
  TCS34725_t tcs34725_sensor;
  tcs32725_begin(&tcs34725_sensor, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	21f6      	movs	r1, #246	@ 0xf6
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 f9a5 	bl	80022c4 <tcs32725_begin>
  selectTCAChannel(1);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f001 f906 	bl	800218c <selectTCAChannel>
  TCS34725_t tcs34725_sensor1;
  tcs32725_begin(&tcs34725_sensor1, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	2200      	movs	r2, #0
 8000f86:	21f6      	movs	r1, #246	@ 0xf6
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 f99b 	bl	80022c4 <tcs32725_begin>
  selectTCAChannel(2);
 8000f8e:	2002      	movs	r0, #2
 8000f90:	f001 f8fc 	bl	800218c <selectTCAChannel>
  TCS34725_t tcs34725_sensor2;
  tcs32725_begin(&tcs34725_sensor2, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2200      	movs	r2, #0
 8000f9a:	21f6      	movs	r1, #246	@ 0xf6
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f001 f991 	bl	80022c4 <tcs32725_begin>
  float r, g, b;
  uint32_t count = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c


  uint8_t dev_id = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	72fb      	strb	r3, [r7, #11]
  uint8_t whoami = 0x0F;
 8000faa:	230f      	movs	r3, #15
 8000fac:	72bb      	strb	r3, [r7, #10]
  HAL_I2C_Master_Transmit(&hi2c2, 0x6B << 1, &whoami, 1, 100);
 8000fae:	f107 020a 	add.w	r2, r7, #10
 8000fb2:	2364      	movs	r3, #100	@ 0x64
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	21d6      	movs	r1, #214	@ 0xd6
 8000fba:	4821      	ldr	r0, [pc, #132]	@ (8001040 <main+0x10c>)
 8000fbc:	f003 f906 	bl	80041cc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c2, 0x6B << 1, &dev_id, 1, 100);
 8000fc0:	f107 020b 	add.w	r2, r7, #11
 8000fc4:	2364      	movs	r3, #100	@ 0x64
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	21d6      	movs	r1, #214	@ 0xd6
 8000fcc:	481c      	ldr	r0, [pc, #112]	@ (8001040 <main+0x10c>)
 8000fce:	f003 f9fb 	bl	80043c8 <HAL_I2C_Master_Receive>
  my_printf("my id: %d", dev_id);
 8000fd2:	7afb      	ldrb	r3, [r7, #11]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481b      	ldr	r0, [pc, #108]	@ (8001044 <main+0x110>)
 8000fd8:	f7ff ff84 	bl	8000ee4 <my_printf>

  motor_init();
 8000fdc:	f000 fb72 	bl	80016c4 <motor_init>
  uint8_t speed = 25;
 8000fe0:	2319      	movs	r3, #25
 8000fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  motor_direction_t dir_A = REVERSE;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  motor_direction_t dir_B = FORWARD;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  int32_t tick_m_a = 0, tick_m_b = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  int16_t tick_m_a_short = 0, tick_m_b_short = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	83fb      	strh	r3, [r7, #30]
 8000ffe:	2300      	movs	r3, #0
 8001000:	83bb      	strh	r3, [r7, #28]

  vl53l0x_init();
 8001002:	f002 fbff 	bl	8003804 <vl53l0x_init>
  uint16_t range_a = 0, range_b = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	837b      	strh	r3, [r7, #26]
 800100a:	2300      	movs	r3, #0
 800100c:	833b      	strh	r3, [r7, #24]

  bool pmw3901_init_flag = pmw3901_begin();
 800100e:	f000 fb83 	bl	8001718 <pmw3901_begin>
 8001012:	4603      	mov	r3, r0
 8001014:	75fb      	strb	r3, [r7, #23]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  readMotionCount(&delta_x, &delta_y);
 8001016:	1dba      	adds	r2, r7, #6
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	4611      	mov	r1, r2
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fc38 	bl	8001894 <readMotionCount>
	  my_printf("delta x: %d, delta y: %d\r\n", delta_x, delta_y);
 8001024:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001028:	4619      	mov	r1, r3
 800102a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102e:	461a      	mov	r2, r3
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <main+0x114>)
 8001032:	f7ff ff57 	bl	8000ee4 <my_printf>
	  HAL_Delay(100);
 8001036:	2064      	movs	r0, #100	@ 0x64
 8001038:	f002 fcb0 	bl	800399c <HAL_Delay>
	  readMotionCount(&delta_x, &delta_y);
 800103c:	bf00      	nop
 800103e:	e7ea      	b.n	8001016 <main+0xe2>
 8001040:	2000033c 	.word	0x2000033c
 8001044:	0800fa48 	.word	0x0800fa48
 8001048:	0800fa54 	.word	0x0800fa54

0800104c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b094      	sub	sp, #80	@ 0x50
 8001050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001052:	f107 0320 	add.w	r3, r7, #32
 8001056:	2230      	movs	r2, #48	@ 0x30
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00c fcac 	bl	800d9b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	4b27      	ldr	r3, [pc, #156]	@ (8001114 <SystemClock_Config+0xc8>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	4a26      	ldr	r2, [pc, #152]	@ (8001114 <SystemClock_Config+0xc8>)
 800107a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800107e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001080:	4b24      	ldr	r3, [pc, #144]	@ (8001114 <SystemClock_Config+0xc8>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <SystemClock_Config+0xcc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a20      	ldr	r2, [pc, #128]	@ (8001118 <SystemClock_Config+0xcc>)
 8001096:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b1e      	ldr	r3, [pc, #120]	@ (8001118 <SystemClock_Config+0xcc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a8:	2301      	movs	r3, #1
 80010aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b2:	2302      	movs	r3, #2
 80010b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010bc:	2319      	movs	r3, #25
 80010be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010c0:	23c0      	movs	r3, #192	@ 0xc0
 80010c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010c8:	2304      	movs	r3, #4
 80010ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010cc:	f107 0320 	add.w	r3, r7, #32
 80010d0:	4618      	mov	r0, r3
 80010d2:	f005 f983 	bl	80063dc <HAL_RCC_OscConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010dc:	f000 faec 	bl	80016b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e0:	230f      	movs	r3, #15
 80010e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e4:	2302      	movs	r3, #2
 80010e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	2103      	movs	r1, #3
 80010fc:	4618      	mov	r0, r3
 80010fe:	f005 fbe5 	bl	80068cc <HAL_RCC_ClockConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001108:	f000 fad6 	bl	80016b8 <Error_Handler>
  }
}
 800110c:	bf00      	nop
 800110e:	3750      	adds	r7, #80	@ 0x50
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40023800 	.word	0x40023800
 8001118:	40007000 	.word	0x40007000

0800111c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <MX_I2C1_Init+0x50>)
 8001122:	4a13      	ldr	r2, [pc, #76]	@ (8001170 <MX_I2C1_Init+0x54>)
 8001124:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <MX_I2C1_Init+0x50>)
 8001128:	4a12      	ldr	r2, [pc, #72]	@ (8001174 <MX_I2C1_Init+0x58>)
 800112a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <MX_I2C1_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <MX_I2C1_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001138:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <MX_I2C1_Init+0x50>)
 800113a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800113e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001140:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <MX_I2C1_Init+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001146:	4b09      	ldr	r3, [pc, #36]	@ (800116c <MX_I2C1_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <MX_I2C1_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <MX_I2C1_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	@ (800116c <MX_I2C1_Init+0x50>)
 800115a:	f002 fef3 	bl	8003f44 <HAL_I2C_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001164:	f000 faa8 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200002e8 	.word	0x200002e8
 8001170:	40005400 	.word	0x40005400
 8001174:	000186a0 	.word	0x000186a0

08001178 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <MX_I2C2_Init+0x50>)
 800117e:	4a13      	ldr	r2, [pc, #76]	@ (80011cc <MX_I2C2_Init+0x54>)
 8001180:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001182:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <MX_I2C2_Init+0x50>)
 8001184:	4a12      	ldr	r2, [pc, #72]	@ (80011d0 <MX_I2C2_Init+0x58>)
 8001186:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001188:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <MX_I2C2_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800118e:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <MX_I2C2_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <MX_I2C2_Init+0x50>)
 8001196:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800119a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800119c:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <MX_I2C2_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <MX_I2C2_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a8:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <MX_I2C2_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ae:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <MX_I2C2_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <MX_I2C2_Init+0x50>)
 80011b6:	f002 fec5 	bl	8003f44 <HAL_I2C_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011c0:	f000 fa7a 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000033c 	.word	0x2000033c
 80011cc:	40005800 	.word	0x40005800
 80011d0:	000186a0 	.word	0x000186a0

080011d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011d8:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011da:	4a18      	ldr	r2, [pc, #96]	@ (800123c <MX_SPI1_Init+0x68>)
 80011dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011de:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001200:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001204:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001206:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001208:	2238      	movs	r2, #56	@ 0x38
 800120a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120c:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <MX_SPI1_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001218:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <MX_SPI1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001220:	220a      	movs	r2, #10
 8001222:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001224:	4804      	ldr	r0, [pc, #16]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001226:	f005 fd1d 	bl	8006c64 <HAL_SPI_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001230:	f000 fa42 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000390 	.word	0x20000390
 800123c:	40013000 	.word	0x40013000

08001240 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b096      	sub	sp, #88	@ 0x58
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001246:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
 800126e:	615a      	str	r2, [r3, #20]
 8001270:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2220      	movs	r2, #32
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f00c fb9d 	bl	800d9b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800127e:	4b44      	ldr	r3, [pc, #272]	@ (8001390 <MX_TIM1_Init+0x150>)
 8001280:	4a44      	ldr	r2, [pc, #272]	@ (8001394 <MX_TIM1_Init+0x154>)
 8001282:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8001284:	4b42      	ldr	r3, [pc, #264]	@ (8001390 <MX_TIM1_Init+0x150>)
 8001286:	225f      	movs	r2, #95	@ 0x5f
 8001288:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128a:	4b41      	ldr	r3, [pc, #260]	@ (8001390 <MX_TIM1_Init+0x150>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 8001290:	4b3f      	ldr	r3, [pc, #252]	@ (8001390 <MX_TIM1_Init+0x150>)
 8001292:	2231      	movs	r2, #49	@ 0x31
 8001294:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001296:	4b3e      	ldr	r3, [pc, #248]	@ (8001390 <MX_TIM1_Init+0x150>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800129c:	4b3c      	ldr	r3, [pc, #240]	@ (8001390 <MX_TIM1_Init+0x150>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001390 <MX_TIM1_Init+0x150>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012a8:	4839      	ldr	r0, [pc, #228]	@ (8001390 <MX_TIM1_Init+0x150>)
 80012aa:	f006 faad 	bl	8007808 <HAL_TIM_Base_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80012b4:	f000 fa00 	bl	80016b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012be:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012c2:	4619      	mov	r1, r3
 80012c4:	4832      	ldr	r0, [pc, #200]	@ (8001390 <MX_TIM1_Init+0x150>)
 80012c6:	f006 fee3 	bl	8008090 <HAL_TIM_ConfigClockSource>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80012d0:	f000 f9f2 	bl	80016b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012d4:	482e      	ldr	r0, [pc, #184]	@ (8001390 <MX_TIM1_Init+0x150>)
 80012d6:	f006 fae6 	bl	80078a6 <HAL_TIM_PWM_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80012e0:	f000 f9ea 	bl	80016b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012f0:	4619      	mov	r1, r3
 80012f2:	4827      	ldr	r0, [pc, #156]	@ (8001390 <MX_TIM1_Init+0x150>)
 80012f4:	f007 fb8a 	bl	8008a0c <HAL_TIMEx_MasterConfigSynchronization>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80012fe:	f000 f9db 	bl	80016b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001302:	2360      	movs	r3, #96	@ 0x60
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130a:	2300      	movs	r3, #0
 800130c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800130e:	2300      	movs	r3, #0
 8001310:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800131e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001322:	2200      	movs	r2, #0
 8001324:	4619      	mov	r1, r3
 8001326:	481a      	ldr	r0, [pc, #104]	@ (8001390 <MX_TIM1_Init+0x150>)
 8001328:	f006 fdf0 	bl	8007f0c <HAL_TIM_PWM_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001332:	f000 f9c1 	bl	80016b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133a:	2204      	movs	r2, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4814      	ldr	r0, [pc, #80]	@ (8001390 <MX_TIM1_Init+0x150>)
 8001340:	f006 fde4 	bl	8007f0c <HAL_TIM_PWM_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800134a:	f000 f9b5 	bl	80016b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001362:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001366:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4619      	mov	r1, r3
 8001370:	4807      	ldr	r0, [pc, #28]	@ (8001390 <MX_TIM1_Init+0x150>)
 8001372:	f007 fbb9 	bl	8008ae8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800137c:	f000 f99c 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001380:	4803      	ldr	r0, [pc, #12]	@ (8001390 <MX_TIM1_Init+0x150>)
 8001382:	f000 fdb7 	bl	8001ef4 <HAL_TIM_MspPostInit>

}
 8001386:	bf00      	nop
 8001388:	3758      	adds	r7, #88	@ 0x58
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200003e8 	.word	0x200003e8
 8001394:	40010000 	.word	0x40010000

08001398 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	@ 0x28
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139e:	f107 0318 	add.w	r3, r7, #24
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013b6:	463b      	mov	r3, r7
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013c2:	4b33      	ldr	r3, [pc, #204]	@ (8001490 <MX_TIM2_Init+0xf8>)
 80013c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 80013ca:	4b31      	ldr	r3, [pc, #196]	@ (8001490 <MX_TIM2_Init+0xf8>)
 80013cc:	225f      	movs	r2, #95	@ 0x5f
 80013ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001490 <MX_TIM2_Init+0xf8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001490 <MX_TIM2_Init+0xf8>)
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013de:	4b2c      	ldr	r3, [pc, #176]	@ (8001490 <MX_TIM2_Init+0xf8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <MX_TIM2_Init+0xf8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013ea:	4829      	ldr	r0, [pc, #164]	@ (8001490 <MX_TIM2_Init+0xf8>)
 80013ec:	f006 fa0c 	bl	8007808 <HAL_TIM_Base_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80013f6:	f000 f95f 	bl	80016b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013fe:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001400:	f107 0318 	add.w	r3, r7, #24
 8001404:	4619      	mov	r1, r3
 8001406:	4822      	ldr	r0, [pc, #136]	@ (8001490 <MX_TIM2_Init+0xf8>)
 8001408:	f006 fe42 	bl	8008090 <HAL_TIM_ConfigClockSource>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001412:	f000 f951 	bl	80016b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001416:	481e      	ldr	r0, [pc, #120]	@ (8001490 <MX_TIM2_Init+0xf8>)
 8001418:	f006 fb4e 	bl	8007ab8 <HAL_TIM_IC_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001422:	f000 f949 	bl	80016b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	4619      	mov	r1, r3
 8001434:	4816      	ldr	r0, [pc, #88]	@ (8001490 <MX_TIM2_Init+0xf8>)
 8001436:	f007 fae9 	bl	8008a0c <HAL_TIMEx_MasterConfigSynchronization>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001440:	f000 f93a 	bl	80016b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001444:	2300      	movs	r3, #0
 8001446:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001448:	2301      	movs	r3, #1
 800144a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001454:	463b      	mov	r3, r7
 8001456:	2208      	movs	r2, #8
 8001458:	4619      	mov	r1, r3
 800145a:	480d      	ldr	r0, [pc, #52]	@ (8001490 <MX_TIM2_Init+0xf8>)
 800145c:	f006 fcb9 	bl	8007dd2 <HAL_TIM_IC_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001466:	f000 f927 	bl	80016b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800146a:	2302      	movs	r3, #2
 800146c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800146e:	2302      	movs	r3, #2
 8001470:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001472:	463b      	mov	r3, r7
 8001474:	220c      	movs	r2, #12
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	@ (8001490 <MX_TIM2_Init+0xf8>)
 800147a:	f006 fcaa 	bl	8007dd2 <HAL_TIM_IC_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001484:	f000 f918 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	@ 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000430 	.word	0x20000430

08001494 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08c      	sub	sp, #48	@ 0x30
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	2224      	movs	r2, #36	@ 0x24
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00c fa88 	bl	800d9b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014b0:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <MX_TIM4_Init+0xa0>)
 80014b2:	4a21      	ldr	r2, [pc, #132]	@ (8001538 <MX_TIM4_Init+0xa4>)
 80014b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <MX_TIM4_Init+0xa0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001534 <MX_TIM4_Init+0xa0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <MX_TIM4_Init+0xa0>)
 80014c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <MX_TIM4_Init+0xa0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d0:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <MX_TIM4_Init+0xa0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014de:	2301      	movs	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014ee:	2301      	movs	r3, #1
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	4619      	mov	r1, r3
 8001500:	480c      	ldr	r0, [pc, #48]	@ (8001534 <MX_TIM4_Init+0xa0>)
 8001502:	f006 fb32 	bl	8007b6a <HAL_TIM_Encoder_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800150c:	f000 f8d4 	bl	80016b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	@ (8001534 <MX_TIM4_Init+0xa0>)
 800151e:	f007 fa75 	bl	8008a0c <HAL_TIMEx_MasterConfigSynchronization>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001528:	f000 f8c6 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	3730      	adds	r7, #48	@ 0x30
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000478 	.word	0x20000478
 8001538:	40000800 	.word	0x40000800

0800153c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	2224      	movs	r2, #36	@ 0x24
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f00c fa34 	bl	800d9b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001558:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <MX_TIM5_Init+0xa0>)
 800155a:	4a21      	ldr	r2, [pc, #132]	@ (80015e0 <MX_TIM5_Init+0xa4>)
 800155c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800155e:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <MX_TIM5_Init+0xa0>)
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <MX_TIM5_Init+0xa0>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800156a:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <MX_TIM5_Init+0xa0>)
 800156c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001570:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <MX_TIM5_Init+0xa0>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <MX_TIM5_Init+0xa0>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800157e:	2301      	movs	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001586:	2301      	movs	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001596:	2301      	movs	r3, #1
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	4619      	mov	r1, r3
 80015a8:	480c      	ldr	r0, [pc, #48]	@ (80015dc <MX_TIM5_Init+0xa0>)
 80015aa:	f006 fade 	bl	8007b6a <HAL_TIM_Encoder_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80015b4:	f000 f880 	bl	80016b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	@ (80015dc <MX_TIM5_Init+0xa0>)
 80015c6:	f007 fa21 	bl	8008a0c <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80015d0:	f000 f872 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	3730      	adds	r7, #48	@ 0x30
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200004c0 	.word	0x200004c0
 80015e0:	40000c00 	.word	0x40000c00

080015e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	4b2b      	ldr	r3, [pc, #172]	@ (80016ac <MX_GPIO_Init+0xc8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a2a      	ldr	r2, [pc, #168]	@ (80016ac <MX_GPIO_Init+0xc8>)
 8001604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b28      	ldr	r3, [pc, #160]	@ (80016ac <MX_GPIO_Init+0xc8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	4b24      	ldr	r3, [pc, #144]	@ (80016ac <MX_GPIO_Init+0xc8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a23      	ldr	r2, [pc, #140]	@ (80016ac <MX_GPIO_Init+0xc8>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b21      	ldr	r3, [pc, #132]	@ (80016ac <MX_GPIO_Init+0xc8>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <MX_GPIO_Init+0xc8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a1c      	ldr	r2, [pc, #112]	@ (80016ac <MX_GPIO_Init+0xc8>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <MX_GPIO_Init+0xc8>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, flow_rst_Pin|flow_cs_Pin|motor_stdby_Pin, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	f44f 6183 	mov.w	r1, #1048	@ 0x418
 8001654:	4816      	ldr	r0, [pc, #88]	@ (80016b0 <MX_GPIO_Init+0xcc>)
 8001656:	f002 fc5b 	bl	8003f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_h2_Pin|a_h1_Pin|b_h2_Pin|b_h1_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001660:	4814      	ldr	r0, [pc, #80]	@ (80016b4 <MX_GPIO_Init+0xd0>)
 8001662:	f002 fc55 	bl	8003f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : flow_rst_Pin flow_cs_Pin motor_stdby_Pin */
  GPIO_InitStruct.Pin = flow_rst_Pin|flow_cs_Pin|motor_stdby_Pin;
 8001666:	f44f 6383 	mov.w	r3, #1048	@ 0x418
 800166a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	4619      	mov	r1, r3
 800167e:	480c      	ldr	r0, [pc, #48]	@ (80016b0 <MX_GPIO_Init+0xcc>)
 8001680:	f002 fac2 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_h2_Pin a_h1_Pin b_h2_Pin b_h1_Pin */
  GPIO_InitStruct.Pin = a_h2_Pin|a_h1_Pin|b_h2_Pin|b_h1_Pin;
 8001684:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <MX_GPIO_Init+0xd0>)
 800169e:	f002 fab3 	bl	8003c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016a2:	bf00      	nop
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020400 	.word	0x40020400

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <Error_Handler+0x8>

080016c4 <motor_init>:
#include "main.h"
#include "stm32f4xx_hal.h"
#include "motor_ll.h"

void motor_init()
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016c8:	2100      	movs	r1, #0
 80016ca:	480f      	ldr	r0, [pc, #60]	@ (8001708 <motor_init+0x44>)
 80016cc:	f006 f944 	bl	8007958 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80016d0:	2104      	movs	r1, #4
 80016d2:	480d      	ldr	r0, [pc, #52]	@ (8001708 <motor_init+0x44>)
 80016d4:	f006 f940 	bl	8007958 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <motor_init+0x44>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2200      	movs	r2, #0
 80016de:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0); // make it stop
 80016e0:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <motor_init+0x44>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2200      	movs	r2, #0
 80016e6:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_GPIO_WritePin(GPIOA, motor_stdby_Pin, GPIO_PIN_SET); // make standby pin high, activate the motor driver
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016ee:	4807      	ldr	r0, [pc, #28]	@ (800170c <motor_init+0x48>)
 80016f0:	f002 fc0e 	bl	8003f10 <HAL_GPIO_WritePin>
	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80016f4:	213c      	movs	r1, #60	@ 0x3c
 80016f6:	4806      	ldr	r0, [pc, #24]	@ (8001710 <motor_init+0x4c>)
 80016f8:	f006 fadd 	bl	8007cb6 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80016fc:	213c      	movs	r1, #60	@ 0x3c
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <motor_init+0x50>)
 8001700:	f006 fad9 	bl	8007cb6 <HAL_TIM_Encoder_Start>
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200003e8 	.word	0x200003e8
 800170c:	40020000 	.word	0x40020000
 8001710:	20000478 	.word	0x20000478
 8001714:	200004c0 	.word	0x200004c0

08001718 <pmw3901_begin>:
#define CS_PORT GPIOA  // Change to your CS GPIO port
#define CS_PIN  GPIO_PIN_4  // Change to your CS GPIO pin
#define RST_PORT GPIOA
#define RST_PIN GPIO_PIN_3

bool pmw3901_begin(void) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800171e:	2201      	movs	r2, #1
 8001720:	2108      	movs	r1, #8
 8001722:	482e      	ldr	r0, [pc, #184]	@ (80017dc <pmw3901_begin+0xc4>)
 8001724:	f002 fbf4 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001728:	2001      	movs	r0, #1
 800172a:	f002 f937 	bl	800399c <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	2108      	movs	r1, #8
 8001732:	482a      	ldr	r0, [pc, #168]	@ (80017dc <pmw3901_begin+0xc4>)
 8001734:	f002 fbec 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001738:	2001      	movs	r0, #1
 800173a:	f002 f92f 	bl	800399c <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800173e:	2201      	movs	r2, #1
 8001740:	2108      	movs	r1, #8
 8001742:	4826      	ldr	r0, [pc, #152]	@ (80017dc <pmw3901_begin+0xc4>)
 8001744:	f002 fbe4 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	2110      	movs	r1, #16
 800174c:	4823      	ldr	r0, [pc, #140]	@ (80017dc <pmw3901_begin+0xc4>)
 800174e:	f002 fbdf 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001752:	2001      	movs	r0, #1
 8001754:	f002 f922 	bl	800399c <HAL_Delay>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	2110      	movs	r1, #16
 800175c:	481f      	ldr	r0, [pc, #124]	@ (80017dc <pmw3901_begin+0xc4>)
 800175e:	f002 fbd7 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001762:	2001      	movs	r0, #1
 8001764:	f002 f91a 	bl	800399c <HAL_Delay>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001768:	2201      	movs	r2, #1
 800176a:	2110      	movs	r1, #16
 800176c:	481b      	ldr	r0, [pc, #108]	@ (80017dc <pmw3901_begin+0xc4>)
 800176e:	f002 fbcf 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001772:	2001      	movs	r0, #1
 8001774:	f002 f912 	bl	800399c <HAL_Delay>

	pmw3901_register_write(0x3A, 0x5A);
 8001778:	215a      	movs	r1, #90	@ 0x5a
 800177a:	203a      	movs	r0, #58	@ 0x3a
 800177c:	f000 f830 	bl	80017e0 <pmw3901_register_write>
	HAL_Delay(5);
 8001780:	2005      	movs	r0, #5
 8001782:	f002 f90b 	bl	800399c <HAL_Delay>

	uint8_t chipId = pmw3901_register_read(0x00);
 8001786:	2000      	movs	r0, #0
 8001788:	f000 f854 	bl	8001834 <pmw3901_register_read>
 800178c:	4603      	mov	r3, r0
 800178e:	71fb      	strb	r3, [r7, #7]
	uint8_t dIpihc = pmw3901_register_read(0x5F);
 8001790:	205f      	movs	r0, #95	@ 0x5f
 8001792:	f000 f84f 	bl	8001834 <pmw3901_register_read>
 8001796:	4603      	mov	r3, r0
 8001798:	71bb      	strb	r3, [r7, #6]

	if (chipId != CHIP_ID || dIpihc != CHIP_ID_INVERSE) {
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b49      	cmp	r3, #73	@ 0x49
 800179e:	d102      	bne.n	80017a6 <pmw3901_begin+0x8e>
 80017a0:	79bb      	ldrb	r3, [r7, #6]
 80017a2:	2bb6      	cmp	r3, #182	@ 0xb6
 80017a4:	d001      	beq.n	80017aa <pmw3901_begin+0x92>
	return false;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e014      	b.n	80017d4 <pmw3901_begin+0xbc>
	}

	pmw3901_register_read(0x02);
 80017aa:	2002      	movs	r0, #2
 80017ac:	f000 f842 	bl	8001834 <pmw3901_register_read>
	pmw3901_register_read(0x03);
 80017b0:	2003      	movs	r0, #3
 80017b2:	f000 f83f 	bl	8001834 <pmw3901_register_read>
	pmw3901_register_read(0x04);
 80017b6:	2004      	movs	r0, #4
 80017b8:	f000 f83c 	bl	8001834 <pmw3901_register_read>
	pmw3901_register_read(0x05);
 80017bc:	2005      	movs	r0, #5
 80017be:	f000 f839 	bl	8001834 <pmw3901_register_read>
	pmw3901_register_read(0x06);
 80017c2:	2006      	movs	r0, #6
 80017c4:	f000 f836 	bl	8001834 <pmw3901_register_read>
	HAL_Delay(1);
 80017c8:	2001      	movs	r0, #1
 80017ca:	f002 f8e7 	bl	800399c <HAL_Delay>

	initRegisters();
 80017ce:	f000 f88d 	bl	80018ec <initRegisters>
	return true;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40020000 	.word	0x40020000

080017e0 <pmw3901_register_write>:

void pmw3901_register_write(uint8_t reg, uint8_t value) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	460a      	mov	r2, r1
 80017ea:	71fb      	strb	r3, [r7, #7]
 80017ec:	4613      	mov	r3, r2
 80017ee:	71bb      	strb	r3, [r7, #6]
  reg |= 0x80;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017f6:	71fb      	strb	r3, [r7, #7]
  uint8_t data[2] = {reg, value};
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	733b      	strb	r3, [r7, #12]
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	737b      	strb	r3, [r7, #13]

  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	2110      	movs	r1, #16
 8001804:	4809      	ldr	r0, [pc, #36]	@ (800182c <pmw3901_register_write+0x4c>)
 8001806:	f002 fb83 	bl	8003f10 <HAL_GPIO_WritePin>
  //HAL_Delay(1);
  HAL_SPI_Transmit(&hspi1, data, 2, HAL_MAX_DELAY);
 800180a:	f107 010c 	add.w	r1, r7, #12
 800180e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001812:	2202      	movs	r2, #2
 8001814:	4806      	ldr	r0, [pc, #24]	@ (8001830 <pmw3901_register_write+0x50>)
 8001816:	f005 faae 	bl	8006d76 <HAL_SPI_Transmit>
  //HAL_Delay(1);
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800181a:	2201      	movs	r2, #1
 800181c:	2110      	movs	r1, #16
 800181e:	4803      	ldr	r0, [pc, #12]	@ (800182c <pmw3901_register_write+0x4c>)
 8001820:	f002 fb76 	bl	8003f10 <HAL_GPIO_WritePin>
  //HAL_Delay(2);
}
 8001824:	bf00      	nop
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40020000 	.word	0x40020000
 8001830:	20000390 	.word	0x20000390

08001834 <pmw3901_register_read>:

uint8_t pmw3901_register_read(uint8_t reg) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
  reg &= ~0x80;
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001844:	71fb      	strb	r3, [r7, #7]
  uint8_t value = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	73fb      	strb	r3, [r7, #15]
  uint8_t txData = reg;
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	73bb      	strb	r3, [r7, #14]

  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	2110      	movs	r1, #16
 8001852:	480e      	ldr	r0, [pc, #56]	@ (800188c <pmw3901_register_read+0x58>)
 8001854:	f002 fb5c 	bl	8003f10 <HAL_GPIO_WritePin>
  //HAL_Delay(1);
  HAL_SPI_Transmit(&hspi1, &txData, 1, HAL_MAX_DELAY);
 8001858:	f107 010e 	add.w	r1, r7, #14
 800185c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001860:	2201      	movs	r2, #1
 8001862:	480b      	ldr	r0, [pc, #44]	@ (8001890 <pmw3901_register_read+0x5c>)
 8001864:	f005 fa87 	bl	8006d76 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &value, 1, HAL_MAX_DELAY);
 8001868:	f107 010f 	add.w	r1, r7, #15
 800186c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001870:	2201      	movs	r2, #1
 8001872:	4807      	ldr	r0, [pc, #28]	@ (8001890 <pmw3901_register_read+0x5c>)
 8001874:	f005 fbc3 	bl	8006ffe <HAL_SPI_Receive>
  //HAL_Delay(1);
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001878:	2201      	movs	r2, #1
 800187a:	2110      	movs	r1, #16
 800187c:	4803      	ldr	r0, [pc, #12]	@ (800188c <pmw3901_register_read+0x58>)
 800187e:	f002 fb47 	bl	8003f10 <HAL_GPIO_WritePin>

  return value;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40020000 	.word	0x40020000
 8001890:	20000390 	.word	0x20000390

08001894 <readMotionCount>:

void readMotionCount(int16_t *deltaX, int16_t *deltaY)
{
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  pmw3901_register_read(0x02);
 800189e:	2002      	movs	r0, #2
 80018a0:	f7ff ffc8 	bl	8001834 <pmw3901_register_read>
  *deltaX = ((int16_t)pmw3901_register_read(0x04) << 8) | pmw3901_register_read(0x03);
 80018a4:	2004      	movs	r0, #4
 80018a6:	f7ff ffc5 	bl	8001834 <pmw3901_register_read>
 80018aa:	4603      	mov	r3, r0
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	b21c      	sxth	r4, r3
 80018b2:	2003      	movs	r0, #3
 80018b4:	f7ff ffbe 	bl	8001834 <pmw3901_register_read>
 80018b8:	4603      	mov	r3, r0
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	4323      	orrs	r3, r4
 80018be:	b21a      	sxth	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	801a      	strh	r2, [r3, #0]
  *deltaY = ((int16_t)pmw3901_register_read(0x06) << 8) | pmw3901_register_read(0x05);
 80018c4:	2006      	movs	r0, #6
 80018c6:	f7ff ffb5 	bl	8001834 <pmw3901_register_read>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	b21c      	sxth	r4, r3
 80018d2:	2005      	movs	r0, #5
 80018d4:	f7ff ffae 	bl	8001834 <pmw3901_register_read>
 80018d8:	4603      	mov	r3, r0
 80018da:	b21b      	sxth	r3, r3
 80018dc:	4323      	orrs	r3, r4
 80018de:	b21a      	sxth	r2, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	801a      	strh	r2, [r3, #0]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd90      	pop	{r4, r7, pc}

080018ec <initRegisters>:
    check = temp>>6; //rightshift 6 bits so only top two stay
  } while(check == 0x03); //while bits aren't set denoting ready state
}

void initRegisters()
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  pmw3901_register_write(0x7F, 0x00);
 80018f0:	2100      	movs	r1, #0
 80018f2:	207f      	movs	r0, #127	@ 0x7f
 80018f4:	f7ff ff74 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x61, 0xAD);
 80018f8:	21ad      	movs	r1, #173	@ 0xad
 80018fa:	2061      	movs	r0, #97	@ 0x61
 80018fc:	f7ff ff70 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x7F, 0x03);
 8001900:	2103      	movs	r1, #3
 8001902:	207f      	movs	r0, #127	@ 0x7f
 8001904:	f7ff ff6c 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x40, 0x00);
 8001908:	2100      	movs	r1, #0
 800190a:	2040      	movs	r0, #64	@ 0x40
 800190c:	f7ff ff68 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x7F, 0x05);
 8001910:	2105      	movs	r1, #5
 8001912:	207f      	movs	r0, #127	@ 0x7f
 8001914:	f7ff ff64 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x41, 0xB3);
 8001918:	21b3      	movs	r1, #179	@ 0xb3
 800191a:	2041      	movs	r0, #65	@ 0x41
 800191c:	f7ff ff60 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x43, 0xF1);
 8001920:	21f1      	movs	r1, #241	@ 0xf1
 8001922:	2043      	movs	r0, #67	@ 0x43
 8001924:	f7ff ff5c 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x45, 0x14);
 8001928:	2114      	movs	r1, #20
 800192a:	2045      	movs	r0, #69	@ 0x45
 800192c:	f7ff ff58 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x5B, 0x32);
 8001930:	2132      	movs	r1, #50	@ 0x32
 8001932:	205b      	movs	r0, #91	@ 0x5b
 8001934:	f7ff ff54 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x5F, 0x34);
 8001938:	2134      	movs	r1, #52	@ 0x34
 800193a:	205f      	movs	r0, #95	@ 0x5f
 800193c:	f7ff ff50 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x7B, 0x08);
 8001940:	2108      	movs	r1, #8
 8001942:	207b      	movs	r0, #123	@ 0x7b
 8001944:	f7ff ff4c 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x7F, 0x06);
 8001948:	2106      	movs	r1, #6
 800194a:	207f      	movs	r0, #127	@ 0x7f
 800194c:	f7ff ff48 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x44, 0x1B);
 8001950:	211b      	movs	r1, #27
 8001952:	2044      	movs	r0, #68	@ 0x44
 8001954:	f7ff ff44 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x40, 0xBF);
 8001958:	21bf      	movs	r1, #191	@ 0xbf
 800195a:	2040      	movs	r0, #64	@ 0x40
 800195c:	f7ff ff40 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x4E, 0x3F);
 8001960:	213f      	movs	r1, #63	@ 0x3f
 8001962:	204e      	movs	r0, #78	@ 0x4e
 8001964:	f7ff ff3c 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x7F, 0x08);
 8001968:	2108      	movs	r1, #8
 800196a:	207f      	movs	r0, #127	@ 0x7f
 800196c:	f7ff ff38 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x65, 0x20);
 8001970:	2120      	movs	r1, #32
 8001972:	2065      	movs	r0, #101	@ 0x65
 8001974:	f7ff ff34 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x6A, 0x18);
 8001978:	2118      	movs	r1, #24
 800197a:	206a      	movs	r0, #106	@ 0x6a
 800197c:	f7ff ff30 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x7F, 0x09);
 8001980:	2109      	movs	r1, #9
 8001982:	207f      	movs	r0, #127	@ 0x7f
 8001984:	f7ff ff2c 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x4F, 0xAF);
 8001988:	21af      	movs	r1, #175	@ 0xaf
 800198a:	204f      	movs	r0, #79	@ 0x4f
 800198c:	f7ff ff28 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x5F, 0x40);
 8001990:	2140      	movs	r1, #64	@ 0x40
 8001992:	205f      	movs	r0, #95	@ 0x5f
 8001994:	f7ff ff24 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x48, 0x80);
 8001998:	2180      	movs	r1, #128	@ 0x80
 800199a:	2048      	movs	r0, #72	@ 0x48
 800199c:	f7ff ff20 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x49, 0x80);
 80019a0:	2180      	movs	r1, #128	@ 0x80
 80019a2:	2049      	movs	r0, #73	@ 0x49
 80019a4:	f7ff ff1c 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x57, 0x77);
 80019a8:	2177      	movs	r1, #119	@ 0x77
 80019aa:	2057      	movs	r0, #87	@ 0x57
 80019ac:	f7ff ff18 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x60, 0x78);
 80019b0:	2178      	movs	r1, #120	@ 0x78
 80019b2:	2060      	movs	r0, #96	@ 0x60
 80019b4:	f7ff ff14 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x61, 0x78);
 80019b8:	2178      	movs	r1, #120	@ 0x78
 80019ba:	2061      	movs	r0, #97	@ 0x61
 80019bc:	f7ff ff10 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x62, 0x08);
 80019c0:	2108      	movs	r1, #8
 80019c2:	2062      	movs	r0, #98	@ 0x62
 80019c4:	f7ff ff0c 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x63, 0x50);
 80019c8:	2150      	movs	r1, #80	@ 0x50
 80019ca:	2063      	movs	r0, #99	@ 0x63
 80019cc:	f7ff ff08 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x7F, 0x0A);
 80019d0:	210a      	movs	r1, #10
 80019d2:	207f      	movs	r0, #127	@ 0x7f
 80019d4:	f7ff ff04 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x45, 0x60);
 80019d8:	2160      	movs	r1, #96	@ 0x60
 80019da:	2045      	movs	r0, #69	@ 0x45
 80019dc:	f7ff ff00 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x7F, 0x00);
 80019e0:	2100      	movs	r1, #0
 80019e2:	207f      	movs	r0, #127	@ 0x7f
 80019e4:	f7ff fefc 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x4D, 0x11);
 80019e8:	2111      	movs	r1, #17
 80019ea:	204d      	movs	r0, #77	@ 0x4d
 80019ec:	f7ff fef8 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x55, 0x80);
 80019f0:	2180      	movs	r1, #128	@ 0x80
 80019f2:	2055      	movs	r0, #85	@ 0x55
 80019f4:	f7ff fef4 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x74, 0x1F);
 80019f8:	211f      	movs	r1, #31
 80019fa:	2074      	movs	r0, #116	@ 0x74
 80019fc:	f7ff fef0 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x75, 0x1F);
 8001a00:	211f      	movs	r1, #31
 8001a02:	2075      	movs	r0, #117	@ 0x75
 8001a04:	f7ff feec 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x4A, 0x78);
 8001a08:	2178      	movs	r1, #120	@ 0x78
 8001a0a:	204a      	movs	r0, #74	@ 0x4a
 8001a0c:	f7ff fee8 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x4B, 0x78);
 8001a10:	2178      	movs	r1, #120	@ 0x78
 8001a12:	204b      	movs	r0, #75	@ 0x4b
 8001a14:	f7ff fee4 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x44, 0x08);
 8001a18:	2108      	movs	r1, #8
 8001a1a:	2044      	movs	r0, #68	@ 0x44
 8001a1c:	f7ff fee0 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x45, 0x50);
 8001a20:	2150      	movs	r1, #80	@ 0x50
 8001a22:	2045      	movs	r0, #69	@ 0x45
 8001a24:	f7ff fedc 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x64, 0xFF);
 8001a28:	21ff      	movs	r1, #255	@ 0xff
 8001a2a:	2064      	movs	r0, #100	@ 0x64
 8001a2c:	f7ff fed8 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x65, 0x1F);
 8001a30:	211f      	movs	r1, #31
 8001a32:	2065      	movs	r0, #101	@ 0x65
 8001a34:	f7ff fed4 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x7F, 0x14);
 8001a38:	2114      	movs	r1, #20
 8001a3a:	207f      	movs	r0, #127	@ 0x7f
 8001a3c:	f7ff fed0 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x65, 0x60);
 8001a40:	2160      	movs	r1, #96	@ 0x60
 8001a42:	2065      	movs	r0, #101	@ 0x65
 8001a44:	f7ff fecc 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x66, 0x08);
 8001a48:	2108      	movs	r1, #8
 8001a4a:	2066      	movs	r0, #102	@ 0x66
 8001a4c:	f7ff fec8 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x63, 0x78);
 8001a50:	2178      	movs	r1, #120	@ 0x78
 8001a52:	2063      	movs	r0, #99	@ 0x63
 8001a54:	f7ff fec4 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x7F, 0x15);
 8001a58:	2115      	movs	r1, #21
 8001a5a:	207f      	movs	r0, #127	@ 0x7f
 8001a5c:	f7ff fec0 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x48, 0x58);
 8001a60:	2158      	movs	r1, #88	@ 0x58
 8001a62:	2048      	movs	r0, #72	@ 0x48
 8001a64:	f7ff febc 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x7F, 0x07);
 8001a68:	2107      	movs	r1, #7
 8001a6a:	207f      	movs	r0, #127	@ 0x7f
 8001a6c:	f7ff feb8 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x41, 0x0D);
 8001a70:	210d      	movs	r1, #13
 8001a72:	2041      	movs	r0, #65	@ 0x41
 8001a74:	f7ff feb4 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x43, 0x14);
 8001a78:	2114      	movs	r1, #20
 8001a7a:	2043      	movs	r0, #67	@ 0x43
 8001a7c:	f7ff feb0 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x4B, 0x0E);
 8001a80:	210e      	movs	r1, #14
 8001a82:	204b      	movs	r0, #75	@ 0x4b
 8001a84:	f7ff feac 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x45, 0x0F);
 8001a88:	210f      	movs	r1, #15
 8001a8a:	2045      	movs	r0, #69	@ 0x45
 8001a8c:	f7ff fea8 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x44, 0x42);
 8001a90:	2142      	movs	r1, #66	@ 0x42
 8001a92:	2044      	movs	r0, #68	@ 0x44
 8001a94:	f7ff fea4 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x4C, 0x80);
 8001a98:	2180      	movs	r1, #128	@ 0x80
 8001a9a:	204c      	movs	r0, #76	@ 0x4c
 8001a9c:	f7ff fea0 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x7F, 0x10);
 8001aa0:	2110      	movs	r1, #16
 8001aa2:	207f      	movs	r0, #127	@ 0x7f
 8001aa4:	f7ff fe9c 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x5B, 0x02);
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	205b      	movs	r0, #91	@ 0x5b
 8001aac:	f7ff fe98 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x7F, 0x07);
 8001ab0:	2107      	movs	r1, #7
 8001ab2:	207f      	movs	r0, #127	@ 0x7f
 8001ab4:	f7ff fe94 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x40, 0x41);
 8001ab8:	2141      	movs	r1, #65	@ 0x41
 8001aba:	2040      	movs	r0, #64	@ 0x40
 8001abc:	f7ff fe90 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x70, 0x00);
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2070      	movs	r0, #112	@ 0x70
 8001ac4:	f7ff fe8c 	bl	80017e0 <pmw3901_register_write>

  HAL_Delay(100);
 8001ac8:	2064      	movs	r0, #100	@ 0x64
 8001aca:	f001 ff67 	bl	800399c <HAL_Delay>
  pmw3901_register_write(0x32, 0x44);
 8001ace:	2144      	movs	r1, #68	@ 0x44
 8001ad0:	2032      	movs	r0, #50	@ 0x32
 8001ad2:	f7ff fe85 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x7F, 0x07);
 8001ad6:	2107      	movs	r1, #7
 8001ad8:	207f      	movs	r0, #127	@ 0x7f
 8001ada:	f7ff fe81 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x40, 0x40);
 8001ade:	2140      	movs	r1, #64	@ 0x40
 8001ae0:	2040      	movs	r0, #64	@ 0x40
 8001ae2:	f7ff fe7d 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x7F, 0x06);
 8001ae6:	2106      	movs	r1, #6
 8001ae8:	207f      	movs	r0, #127	@ 0x7f
 8001aea:	f7ff fe79 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x62, 0xf0);
 8001aee:	21f0      	movs	r1, #240	@ 0xf0
 8001af0:	2062      	movs	r0, #98	@ 0x62
 8001af2:	f7ff fe75 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x63, 0x00);
 8001af6:	2100      	movs	r1, #0
 8001af8:	2063      	movs	r0, #99	@ 0x63
 8001afa:	f7ff fe71 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x7F, 0x0D);
 8001afe:	210d      	movs	r1, #13
 8001b00:	207f      	movs	r0, #127	@ 0x7f
 8001b02:	f7ff fe6d 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x48, 0xC0);
 8001b06:	21c0      	movs	r1, #192	@ 0xc0
 8001b08:	2048      	movs	r0, #72	@ 0x48
 8001b0a:	f7ff fe69 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x6F, 0xd5);
 8001b0e:	21d5      	movs	r1, #213	@ 0xd5
 8001b10:	206f      	movs	r0, #111	@ 0x6f
 8001b12:	f7ff fe65 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x7F, 0x00);
 8001b16:	2100      	movs	r1, #0
 8001b18:	207f      	movs	r0, #127	@ 0x7f
 8001b1a:	f7ff fe61 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x5B, 0xa0);
 8001b1e:	21a0      	movs	r1, #160	@ 0xa0
 8001b20:	205b      	movs	r0, #91	@ 0x5b
 8001b22:	f7ff fe5d 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x4E, 0xA8);
 8001b26:	21a8      	movs	r1, #168	@ 0xa8
 8001b28:	204e      	movs	r0, #78	@ 0x4e
 8001b2a:	f7ff fe59 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x5A, 0x50);
 8001b2e:	2150      	movs	r1, #80	@ 0x50
 8001b30:	205a      	movs	r0, #90	@ 0x5a
 8001b32:	f7ff fe55 	bl	80017e0 <pmw3901_register_write>
  pmw3901_register_write(0x40, 0x80);
 8001b36:	2180      	movs	r1, #128	@ 0x80
 8001b38:	2040      	movs	r0, #64	@ 0x40
 8001b3a:	f7ff fe51 	bl	80017e0 <pmw3901_register_write>
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	4a0f      	ldr	r2, [pc, #60]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	4a08      	ldr	r2, [pc, #32]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800

08001b94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08c      	sub	sp, #48	@ 0x30
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ca0 <HAL_I2C_MspInit+0x10c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d12d      	bne.n	8001c12 <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca4 <HAL_I2C_MspInit+0x110>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbe:	4a39      	ldr	r2, [pc, #228]	@ (8001ca4 <HAL_I2C_MspInit+0x110>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc6:	4b37      	ldr	r3, [pc, #220]	@ (8001ca4 <HAL_I2C_MspInit+0x110>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	61bb      	str	r3, [r7, #24]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bd2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd8:	2312      	movs	r3, #18
 8001bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be4:	2304      	movs	r3, #4
 8001be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	4619      	mov	r1, r3
 8001bee:	482e      	ldr	r0, [pc, #184]	@ (8001ca8 <HAL_I2C_MspInit+0x114>)
 8001bf0:	f002 f80a 	bl	8003c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca4 <HAL_I2C_MspInit+0x110>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	4a29      	ldr	r2, [pc, #164]	@ (8001ca4 <HAL_I2C_MspInit+0x110>)
 8001bfe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c04:	4b27      	ldr	r3, [pc, #156]	@ (8001ca4 <HAL_I2C_MspInit+0x110>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c10:	e041      	b.n	8001c96 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a25      	ldr	r2, [pc, #148]	@ (8001cac <HAL_I2C_MspInit+0x118>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d13c      	bne.n	8001c96 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	4b20      	ldr	r3, [pc, #128]	@ (8001ca4 <HAL_I2C_MspInit+0x110>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c24:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca4 <HAL_I2C_MspInit+0x110>)
 8001c26:	f043 0302 	orr.w	r3, r3, #2
 8001c2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <HAL_I2C_MspInit+0x110>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3e:	2312      	movs	r3, #18
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	f107 031c 	add.w	r3, r7, #28
 8001c52:	4619      	mov	r1, r3
 8001c54:	4814      	ldr	r0, [pc, #80]	@ (8001ca8 <HAL_I2C_MspInit+0x114>)
 8001c56:	f001 ffd7 	bl	8003c08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5e:	2312      	movs	r3, #18
 8001c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001c6a:	2309      	movs	r3, #9
 8001c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	4619      	mov	r1, r3
 8001c74:	480c      	ldr	r0, [pc, #48]	@ (8001ca8 <HAL_I2C_MspInit+0x114>)
 8001c76:	f001 ffc7 	bl	8003c08 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_I2C_MspInit+0x110>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	4a08      	ldr	r2, [pc, #32]	@ (8001ca4 <HAL_I2C_MspInit+0x110>)
 8001c84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_I2C_MspInit+0x110>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
}
 8001c96:	bf00      	nop
 8001c98:	3730      	adds	r7, #48	@ 0x30
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40005400 	.word	0x40005400
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40005800 	.word	0x40005800

08001cb0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	@ 0x28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a19      	ldr	r2, [pc, #100]	@ (8001d34 <HAL_SPI_MspInit+0x84>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d12b      	bne.n	8001d2a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	4b18      	ldr	r3, [pc, #96]	@ (8001d38 <HAL_SPI_MspInit+0x88>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	4a17      	ldr	r2, [pc, #92]	@ (8001d38 <HAL_SPI_MspInit+0x88>)
 8001cdc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce2:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <HAL_SPI_MspInit+0x88>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <HAL_SPI_MspInit+0x88>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	4a10      	ldr	r2, [pc, #64]	@ (8001d38 <HAL_SPI_MspInit+0x88>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001d38 <HAL_SPI_MspInit+0x88>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d0a:	23e0      	movs	r3, #224	@ 0xe0
 8001d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <HAL_SPI_MspInit+0x8c>)
 8001d26:	f001 ff6f 	bl	8003c08 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d2a:	bf00      	nop
 8001d2c:	3728      	adds	r7, #40	@ 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40013000 	.word	0x40013000
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40020000 	.word	0x40020000

08001d40 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	@ 0x28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a23      	ldr	r2, [pc, #140]	@ (8001dec <HAL_TIM_Base_MspInit+0xac>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d10e      	bne.n	8001d80 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	4b22      	ldr	r3, [pc, #136]	@ (8001df0 <HAL_TIM_Base_MspInit+0xb0>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	4a21      	ldr	r2, [pc, #132]	@ (8001df0 <HAL_TIM_Base_MspInit+0xb0>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d72:	4b1f      	ldr	r3, [pc, #124]	@ (8001df0 <HAL_TIM_Base_MspInit+0xb0>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d7e:	e030      	b.n	8001de2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d88:	d12b      	bne.n	8001de2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <HAL_TIM_Base_MspInit+0xb0>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	4a17      	ldr	r2, [pc, #92]	@ (8001df0 <HAL_TIM_Base_MspInit+0xb0>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <HAL_TIM_Base_MspInit+0xb0>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <HAL_TIM_Base_MspInit+0xb0>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	4a10      	ldr	r2, [pc, #64]	@ (8001df0 <HAL_TIM_Base_MspInit+0xb0>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db6:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <HAL_TIM_Base_MspInit+0xb0>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4805      	ldr	r0, [pc, #20]	@ (8001df4 <HAL_TIM_Base_MspInit+0xb4>)
 8001dde:	f001 ff13 	bl	8003c08 <HAL_GPIO_Init>
}
 8001de2:	bf00      	nop
 8001de4:	3728      	adds	r7, #40	@ 0x28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40010000 	.word	0x40010000
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020000 	.word	0x40020000

08001df8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	@ 0x30
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a32      	ldr	r2, [pc, #200]	@ (8001ee0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d12c      	bne.n	8001e74 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
 8001e1e:	4b31      	ldr	r3, [pc, #196]	@ (8001ee4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	4a30      	ldr	r2, [pc, #192]	@ (8001ee4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	61bb      	str	r3, [r7, #24]
 8001e34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a29      	ldr	r2, [pc, #164]	@ (8001ee4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b27      	ldr	r3, [pc, #156]	@ (8001ee4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e52:	23c0      	movs	r3, #192	@ 0xc0
 8001e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e62:	2302      	movs	r3, #2
 8001e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e66:	f107 031c 	add.w	r3, r7, #28
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	481e      	ldr	r0, [pc, #120]	@ (8001ee8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e6e:	f001 fecb 	bl	8003c08 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001e72:	e030      	b.n	8001ed6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a1c      	ldr	r2, [pc, #112]	@ (8001eec <HAL_TIM_Encoder_MspInit+0xf4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d12b      	bne.n	8001ed6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	4a17      	ldr	r2, [pc, #92]	@ (8001ee4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e88:	f043 0308 	orr.w	r3, r3, #8
 8001e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4807      	ldr	r0, [pc, #28]	@ (8001ef0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001ed2:	f001 fe99 	bl	8003c08 <HAL_GPIO_Init>
}
 8001ed6:	bf00      	nop
 8001ed8:	3730      	adds	r7, #48	@ 0x30
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40000800 	.word	0x40000800
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40000c00 	.word	0x40000c00
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 030c 	add.w	r3, r7, #12
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a12      	ldr	r2, [pc, #72]	@ (8001f5c <HAL_TIM_MspPostInit+0x68>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d11e      	bne.n	8001f54 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <HAL_TIM_MspPostInit+0x6c>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	4a10      	ldr	r2, [pc, #64]	@ (8001f60 <HAL_TIM_MspPostInit+0x6c>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f26:	4b0e      	ldr	r3, [pc, #56]	@ (8001f60 <HAL_TIM_MspPostInit+0x6c>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f44:	2301      	movs	r3, #1
 8001f46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <HAL_TIM_MspPostInit+0x70>)
 8001f50:	f001 fe5a 	bl	8003c08 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f54:	bf00      	nop
 8001f56:	3720      	adds	r7, #32
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40010000 	.word	0x40010000
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020000 	.word	0x40020000

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <NMI_Handler+0x4>

08001f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <MemManage_Handler+0x4>

08001f80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <BusFault_Handler+0x4>

08001f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <UsageFault_Handler+0x4>

08001f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fbe:	f001 fccd 	bl	800395c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <OTG_FS_IRQHandler+0x10>)
 8001fce:	f003 f8f7 	bl	80051c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200019f4 	.word	0x200019f4

08001fdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return 1;
 8001fe0:	2301      	movs	r3, #1
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <_kill>:

int _kill(int pid, int sig)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ff6:	f00b fd31 	bl	800da5c <__errno>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2216      	movs	r2, #22
 8001ffe:	601a      	str	r2, [r3, #0]
  return -1;
 8002000:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <_exit>:

void _exit (int status)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002014:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ffe7 	bl	8001fec <_kill>
  while (1) {}    /* Make sure we hang here */
 800201e:	bf00      	nop
 8002020:	e7fd      	b.n	800201e <_exit+0x12>

08002022 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e00a      	b.n	800204a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002034:	f3af 8000 	nop.w
 8002038:	4601      	mov	r1, r0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	60ba      	str	r2, [r7, #8]
 8002040:	b2ca      	uxtb	r2, r1
 8002042:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3301      	adds	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	429a      	cmp	r2, r3
 8002050:	dbf0      	blt.n	8002034 <_read+0x12>
  }

  return len;
 8002052:	687b      	ldr	r3, [r7, #4]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e009      	b.n	8002082 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	60ba      	str	r2, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	dbf1      	blt.n	800206e <_write+0x12>
  }
  return len;
 800208a:	687b      	ldr	r3, [r7, #4]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_close>:

int _close(int file)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800209c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020bc:	605a      	str	r2, [r3, #4]
  return 0;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <_isatty>:

int _isatty(int file)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020d4:	2301      	movs	r3, #1
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b085      	sub	sp, #20
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002104:	4a14      	ldr	r2, [pc, #80]	@ (8002158 <_sbrk+0x5c>)
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <_sbrk+0x60>)
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002110:	4b13      	ldr	r3, [pc, #76]	@ (8002160 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002118:	4b11      	ldr	r3, [pc, #68]	@ (8002160 <_sbrk+0x64>)
 800211a:	4a12      	ldr	r2, [pc, #72]	@ (8002164 <_sbrk+0x68>)
 800211c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211e:	4b10      	ldr	r3, [pc, #64]	@ (8002160 <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	429a      	cmp	r2, r3
 800212a:	d207      	bcs.n	800213c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800212c:	f00b fc96 	bl	800da5c <__errno>
 8002130:	4603      	mov	r3, r0
 8002132:	220c      	movs	r2, #12
 8002134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800213a:	e009      	b.n	8002150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800213c:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <_sbrk+0x64>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002142:	4b07      	ldr	r3, [pc, #28]	@ (8002160 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	4a05      	ldr	r2, [pc, #20]	@ (8002160 <_sbrk+0x64>)
 800214c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214e:	68fb      	ldr	r3, [r7, #12]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20020000 	.word	0x20020000
 800215c:	00000400 	.word	0x00000400
 8002160:	20000508 	.word	0x20000508
 8002164:	20002248 	.word	0x20002248

08002168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <SystemInit+0x20>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	4a05      	ldr	r2, [pc, #20]	@ (8002188 <SystemInit+0x20>)
 8002174:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002178:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <selectTCAChannel>:
 */
#include "stm32f4xx_hal.h"
#include "main.h"
#include "tca9548.h"

void selectTCAChannel(uint8_t channel) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af02      	add	r7, sp, #8
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = (1 << channel);  // Enable only the selected channel
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	2201      	movs	r2, #1
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, 0x77 << 1, &cmd, 1, HAL_MAX_DELAY);
 80021a2:	f107 020f 	add.w	r2, r7, #15
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2301      	movs	r3, #1
 80021ae:	21ee      	movs	r1, #238	@ 0xee
 80021b0:	4803      	ldr	r0, [pc, #12]	@ (80021c0 <selectTCAChannel+0x34>)
 80021b2:	f002 f80b 	bl	80041cc <HAL_I2C_Master_Transmit>
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200002e8 	.word	0x200002e8

080021c4 <my_printf>:
{
 80021c4:	b40f      	push	{r0, r1, r2, r3}
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b0a2      	sub	sp, #136	@ 0x88
 80021ca:	af00      	add	r7, sp, #0
    va_start(args, format);
 80021cc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80021d0:	603b      	str	r3, [r7, #0]
    int usbTxLength = vsnprintf(tx_buffer, BUFFER_LEN, format, args);
 80021d2:	1d38      	adds	r0, r7, #4
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80021da:	2180      	movs	r1, #128	@ 0x80
 80021dc:	f00b fb4a 	bl	800d874 <vsniprintf>
 80021e0:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (usbTxLength > 0 && usbTxLength < BUFFER_LEN)
 80021e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	dd0b      	ble.n	8002204 <my_printf+0x40>
 80021ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80021f2:	dc07      	bgt.n	8002204 <my_printf+0x40>
        CDC_Transmit_FS((uint8_t *)tx_buffer, usbTxLength);
 80021f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f00a f8ec 	bl	800c3dc <CDC_Transmit_FS>
}
 8002204:	bf00      	nop
 8002206:	3788      	adds	r7, #136	@ 0x88
 8002208:	46bd      	mov	sp, r7
 800220a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800220e:	b004      	add	sp, #16
 8002210:	4770      	bx	lr
	...

08002214 <tcs34725_write8>:
/**************************************************************************/
/*!
    @brief  Writes a register and an 8 bit value over I2C
*/
/**************************************************************************/
void tcs34725_write8(uint8_t reg, uint8_t value) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af02      	add	r7, sp, #8
 800221a:	4603      	mov	r3, r0
 800221c:	460a      	mov	r2, r1
 800221e:	71fb      	strb	r3, [r7, #7]
 8002220:	4613      	mov	r3, r2
 8002222:	71bb      	strb	r3, [r7, #6]
    Wire.send(TCS34725_COMMAND_BIT | reg);
    Wire.send(value & 0xFF);
    #endif
    Wire.endTransmission();
    */
    uint8_t buffer[2] = {TCS34725_COMMAND_BIT | reg, value};
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800222a:	b2db      	uxtb	r3, r3
 800222c:	733b      	strb	r3, [r7, #12]
 800222e:	79bb      	ldrb	r3, [r7, #6]
 8002230:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8002232:	f107 020c 	add.w	r2, r7, #12
 8002236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	2302      	movs	r3, #2
 800223e:	2152      	movs	r1, #82	@ 0x52
 8002240:	4803      	ldr	r0, [pc, #12]	@ (8002250 <tcs34725_write8+0x3c>)
 8002242:	f001 ffc3 	bl	80041cc <HAL_I2C_Master_Transmit>
}
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200002e8 	.word	0x200002e8

08002254 <read8>:
/**************************************************************************/
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
uint8_t read8(uint8_t reg) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af02      	add	r7, sp, #8
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
    return Wire.read();
    #else
    return Wire.receive();
    #endif
    */
    uint8_t cmd = TCS34725_COMMAND_BIT | reg;
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002264:	b2db      	uxtb	r3, r3
 8002266:	73fb      	strb	r3, [r7, #15]
    uint8_t value = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 800226c:	f107 020f 	add.w	r2, r7, #15
 8002270:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2301      	movs	r3, #1
 8002278:	2152      	movs	r1, #82	@ 0x52
 800227a:	4809      	ldr	r0, [pc, #36]	@ (80022a0 <read8+0x4c>)
 800227c:	f001 ffa6 	bl	80041cc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, &value, 1, HAL_MAX_DELAY);
 8002280:	f107 020e 	add.w	r2, r7, #14
 8002284:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	2301      	movs	r3, #1
 800228c:	2152      	movs	r1, #82	@ 0x52
 800228e:	4804      	ldr	r0, [pc, #16]	@ (80022a0 <read8+0x4c>)
 8002290:	f002 f89a 	bl	80043c8 <HAL_I2C_Master_Receive>
    return value;
 8002294:	7bbb      	ldrb	r3, [r7, #14]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200002e8 	.word	0x200002e8

080022a4 <enable>:
/**************************************************************************/
/*!
    Enables the device
*/
/**************************************************************************/
void enable(void) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
    tcs34725_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 80022a8:	2101      	movs	r1, #1
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7ff ffb2 	bl	8002214 <tcs34725_write8>
    HAL_Delay(3);
 80022b0:	2003      	movs	r0, #3
 80022b2:	f001 fb73 	bl	800399c <HAL_Delay>
    tcs34725_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 80022b6:	2103      	movs	r1, #3
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7ff ffab 	bl	8002214 <tcs34725_write8>
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <tcs32725_begin>:
    doing anything else)
*/
/**************************************************************************/


bool tcs32725_begin(TCS34725_t *sensor, tcs34725IntegrationTime_t it, tcs34725Gain_t gain) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
 80022d0:	4613      	mov	r3, r2
 80022d2:	70bb      	strb	r3, [r7, #2]
    //Wire.begin();

    /* Make sure we're actually connected */
    uint8_t x = read8(TCS34725_ID);
 80022d4:	2012      	movs	r0, #18
 80022d6:	f7ff ffbd 	bl	8002254 <read8>
 80022da:	4603      	mov	r3, r0
 80022dc:	73fb      	strb	r3, [r7, #15]
    my_printf("device id: %d", x);
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	4619      	mov	r1, r3
 80022e2:	480d      	ldr	r0, [pc, #52]	@ (8002318 <tcs32725_begin+0x54>)
 80022e4:	f7ff ff6e 	bl	80021c4 <my_printf>
    if (x != 0x4D) {
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	2b4d      	cmp	r3, #77	@ 0x4d
 80022ec:	d001      	beq.n	80022f2 <tcs32725_begin+0x2e>
        return false;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e00d      	b.n	800230e <tcs32725_begin+0x4a>
    }
    _tcs34725Initialised = true;
 80022f2:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <tcs32725_begin+0x58>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]

    /* Set default integration time and gain */
    setIntegrationTime(it);
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 f810 	bl	8002320 <setIntegrationTime>
    setGain(gain);
 8002300:	78bb      	ldrb	r3, [r7, #2]
 8002302:	4618      	mov	r0, r3
 8002304:	f000 f82e 	bl	8002364 <setGain>

    /* Note: by default, the device is in power down mode on bootup */
    enable();
 8002308:	f7ff ffcc 	bl	80022a4 <enable>

    return true;
 800230c:	2301      	movs	r3, #1
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	0800fa70 	.word	0x0800fa70
 800231c:	2000050c 	.word	0x2000050c

08002320 <setIntegrationTime>:
/**************************************************************************/
/*!
    Sets the integration time for the TC34725
*/
/**************************************************************************/
void setIntegrationTime(tcs34725IntegrationTime_t it) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
    if (!_tcs34725Initialised) {
 800232a:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <setIntegrationTime+0x38>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	f083 0301 	eor.w	r3, r3, #1
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <setIntegrationTime+0x1e>
        //begin();
    	my_printf("set integration time go wrong\r\n");
 8002338:	4808      	ldr	r0, [pc, #32]	@ (800235c <setIntegrationTime+0x3c>)
 800233a:	f7ff ff43 	bl	80021c4 <my_printf>
    }

    /* Update the timing register */
    tcs34725_write8(TCS34725_ATIME, it);
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	4619      	mov	r1, r3
 8002342:	2001      	movs	r0, #1
 8002344:	f7ff ff66 	bl	8002214 <tcs34725_write8>

    /* Update value placeholder */
    _tcs34725IntegrationTime = it;
 8002348:	4a05      	ldr	r2, [pc, #20]	@ (8002360 <setIntegrationTime+0x40>)
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	7013      	strb	r3, [r2, #0]
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	2000050c 	.word	0x2000050c
 800235c:	0800fa80 	.word	0x0800fa80
 8002360:	2000050e 	.word	0x2000050e

08002364 <setGain>:
/**************************************************************************/
/*!
    Adjusts the gain on the TCS34725 (adjusts the sensitivity to light)
*/
/**************************************************************************/
void setGain(tcs34725Gain_t gain) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
        begin();
    }
    */

    /* Update the timing register */
    tcs34725_write8(TCS34725_CONTROL, gain);
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	4619      	mov	r1, r3
 8002372:	200f      	movs	r0, #15
 8002374:	f7ff ff4e 	bl	8002214 <tcs34725_write8>

    /* Update value placeholders */
    _tcs34725Gain = gain;
 8002378:	4a03      	ldr	r2, [pc, #12]	@ (8002388 <setGain+0x24>)
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	7013      	strb	r3, [r2, #0]
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	2000050d 	.word	0x2000050d

0800238c <my_printf>:
{
 800238c:	b40f      	push	{r0, r1, r2, r3}
 800238e:	b580      	push	{r7, lr}
 8002390:	b0a2      	sub	sp, #136	@ 0x88
 8002392:	af00      	add	r7, sp, #0
    va_start(args, format);
 8002394:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002398:	603b      	str	r3, [r7, #0]
    int usbTxLength = vsnprintf(tx_buffer, BUFFER_LEN, format, args);
 800239a:	1d38      	adds	r0, r7, #4
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80023a2:	2180      	movs	r1, #128	@ 0x80
 80023a4:	f00b fa66 	bl	800d874 <vsniprintf>
 80023a8:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (usbTxLength > 0 && usbTxLength < BUFFER_LEN)
 80023ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	dd0b      	ble.n	80023cc <my_printf+0x40>
 80023b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80023ba:	dc07      	bgt.n	80023cc <my_printf+0x40>
        CDC_Transmit_FS((uint8_t *)tx_buffer, usbTxLength);
 80023bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	4611      	mov	r1, r2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f00a f808 	bl	800c3dc <CDC_Transmit_FS>
}
 80023cc:	bf00      	nop
 80023ce:	3788      	adds	r7, #136	@ 0x88
 80023d0:	46bd      	mov	sp, r7
 80023d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023d6:	b004      	add	sp, #16
 80023d8:	4770      	bx	lr
	...

080023dc <i2c_read_addr8_data8>:
 * moved from i2c.h, these are all i2c function needed
 **/

extern I2C_HandleTypeDef hi2c1;

bool i2c_read_addr8_data8(uint8_t addr, uint8_t *data) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	4603      	mov	r3, r0
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 80023e8:	1dfa      	adds	r2, r7, #7
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2301      	movs	r3, #1
 80023f2:	2152      	movs	r1, #82	@ 0x52
 80023f4:	4812      	ldr	r0, [pc, #72]	@ (8002440 <i2c_read_addr8_data8+0x64>)
 80023f6:	f001 fee9 	bl	80041cc <HAL_I2C_Master_Transmit>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d006      	beq.n	800240e <i2c_read_addr8_data8+0x32>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_data8 (register 0x%X)\r\n", addr);
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	4619      	mov	r1, r3
 8002404:	480f      	ldr	r0, [pc, #60]	@ (8002444 <i2c_read_addr8_data8+0x68>)
 8002406:	f7ff ffc1 	bl	800238c <my_printf>
        return false;
 800240a:	2300      	movs	r3, #0
 800240c:	e013      	b.n	8002436 <i2c_read_addr8_data8+0x5a>
    }
    if (HAL_I2C_Master_Receive(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, data, 1, HAL_MAX_DELAY) != HAL_OK) {
 800240e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2301      	movs	r3, #1
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	2152      	movs	r1, #82	@ 0x52
 800241a:	4809      	ldr	r0, [pc, #36]	@ (8002440 <i2c_read_addr8_data8+0x64>)
 800241c:	f001 ffd4 	bl	80043c8 <HAL_I2C_Master_Receive>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d006      	beq.n	8002434 <i2c_read_addr8_data8+0x58>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_data8 (register 0x%X)\r\n", addr);
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	4619      	mov	r1, r3
 800242a:	4807      	ldr	r0, [pc, #28]	@ (8002448 <i2c_read_addr8_data8+0x6c>)
 800242c:	f7ff ffae 	bl	800238c <my_printf>
        return false;
 8002430:	2300      	movs	r3, #0
 8002432:	e000      	b.n	8002436 <i2c_read_addr8_data8+0x5a>
    }
    return true;
 8002434:	2301      	movs	r3, #1
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200002e8 	.word	0x200002e8
 8002444:	0800faa0 	.word	0x0800faa0
 8002448:	0800fae4 	.word	0x0800fae4

0800244c <i2c_write_addr8_data8>:
    }
    *data = (buf[0] << 8) | buf[1];
    return true;
}

bool i2c_write_addr8_data8(uint8_t addr, uint8_t data) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af02      	add	r7, sp, #8
 8002452:	4603      	mov	r3, r0
 8002454:	460a      	mov	r2, r1
 8002456:	71fb      	strb	r3, [r7, #7]
 8002458:	4613      	mov	r3, r2
 800245a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {addr, data};
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	733b      	strb	r3, [r7, #12]
 8002460:	79bb      	ldrb	r3, [r7, #6]
 8002462:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, buf, 2, HAL_MAX_DELAY) != HAL_OK) {
 8002464:	f107 020c 	add.w	r2, r7, #12
 8002468:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2302      	movs	r3, #2
 8002470:	2152      	movs	r1, #82	@ 0x52
 8002472:	4809      	ldr	r0, [pc, #36]	@ (8002498 <i2c_write_addr8_data8+0x4c>)
 8002474:	f001 feaa 	bl	80041cc <HAL_I2C_Master_Transmit>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <i2c_write_addr8_data8+0x42>
        my_printf("[I2C] ERROR: Write failed i2c_write_addr8_data8 (register 0x%X) on device 0x%X\r\n", addr, VL53L0X_DEFAULT_ADDRESS);
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	2229      	movs	r2, #41	@ 0x29
 8002482:	4619      	mov	r1, r3
 8002484:	4805      	ldr	r0, [pc, #20]	@ (800249c <i2c_write_addr8_data8+0x50>)
 8002486:	f7ff ff81 	bl	800238c <my_printf>
        return false;
 800248a:	2300      	movs	r3, #0
 800248c:	e000      	b.n	8002490 <i2c_write_addr8_data8+0x44>
    }
    return true;
 800248e:	2301      	movs	r3, #1
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	200002e8 	.word	0x200002e8
 800249c:	0800fbb4 	.word	0x0800fbb4

080024a0 <i2c_read_addr8_data32>:

bool i2c_read_addr8_data32(uint8_t addr, uint32_t *data) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	4603      	mov	r3, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 80024ac:	1dfa      	adds	r2, r7, #7
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2301      	movs	r3, #1
 80024b6:	2152      	movs	r1, #82	@ 0x52
 80024b8:	4819      	ldr	r0, [pc, #100]	@ (8002520 <i2c_read_addr8_data32+0x80>)
 80024ba:	f001 fe87 	bl	80041cc <HAL_I2C_Master_Transmit>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <i2c_read_addr8_data32+0x32>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_data32 (register 0x%X)\r\n", addr);
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	4619      	mov	r1, r3
 80024c8:	4816      	ldr	r0, [pc, #88]	@ (8002524 <i2c_read_addr8_data32+0x84>)
 80024ca:	f7ff ff5f 	bl	800238c <my_printf>
        return false;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e021      	b.n	8002516 <i2c_read_addr8_data32+0x76>
    }
    uint8_t buf[4];
    if (HAL_I2C_Master_Receive(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, buf, 4, HAL_MAX_DELAY) != HAL_OK) {
 80024d2:	f107 020c 	add.w	r2, r7, #12
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2304      	movs	r3, #4
 80024de:	2152      	movs	r1, #82	@ 0x52
 80024e0:	480f      	ldr	r0, [pc, #60]	@ (8002520 <i2c_read_addr8_data32+0x80>)
 80024e2:	f001 ff71 	bl	80043c8 <HAL_I2C_Master_Receive>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <i2c_read_addr8_data32+0x5a>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_data32 (register 0x%X)\r\n", addr);
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	4619      	mov	r1, r3
 80024f0:	480d      	ldr	r0, [pc, #52]	@ (8002528 <i2c_read_addr8_data32+0x88>)
 80024f2:	f7ff ff4b 	bl	800238c <my_printf>
        return false;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e00d      	b.n	8002516 <i2c_read_addr8_data32+0x76>
    }
    *data = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 80024fa:	7b3b      	ldrb	r3, [r7, #12]
 80024fc:	061a      	lsls	r2, r3, #24
 80024fe:	7b7b      	ldrb	r3, [r7, #13]
 8002500:	041b      	lsls	r3, r3, #16
 8002502:	431a      	orrs	r2, r3
 8002504:	7bbb      	ldrb	r3, [r7, #14]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	4313      	orrs	r3, r2
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	4313      	orrs	r3, r2
 800250e:	461a      	mov	r2, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	601a      	str	r2, [r3, #0]
    return true;
 8002514:	2301      	movs	r3, #1
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200002e8 	.word	0x200002e8
 8002524:	0800fc08 	.word	0x0800fc08
 8002528:	0800fc50 	.word	0x0800fc50

0800252c <i2c_write_addr8_bytes>:

bool i2c_write_addr8_bytes(uint8_t addr, const uint8_t *data, uint8_t length) {
 800252c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002530:	b087      	sub	sp, #28
 8002532:	af02      	add	r7, sp, #8
 8002534:	4603      	mov	r3, r0
 8002536:	6039      	str	r1, [r7, #0]
 8002538:	71fb      	strb	r3, [r7, #7]
 800253a:	4613      	mov	r3, r2
 800253c:	71bb      	strb	r3, [r7, #6]
 800253e:	466b      	mov	r3, sp
 8002540:	461e      	mov	r6, r3
    uint8_t buf[1 + length];
 8002542:	79bb      	ldrb	r3, [r7, #6]
 8002544:	1c59      	adds	r1, r3, #1
 8002546:	1e4b      	subs	r3, r1, #1
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	460a      	mov	r2, r1
 800254c:	2300      	movs	r3, #0
 800254e:	4690      	mov	r8, r2
 8002550:	4699      	mov	r9, r3
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800255e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002566:	460a      	mov	r2, r1
 8002568:	2300      	movs	r3, #0
 800256a:	4614      	mov	r4, r2
 800256c:	461d      	mov	r5, r3
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	00eb      	lsls	r3, r5, #3
 8002578:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800257c:	00e2      	lsls	r2, r4, #3
 800257e:	460b      	mov	r3, r1
 8002580:	3307      	adds	r3, #7
 8002582:	08db      	lsrs	r3, r3, #3
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	ebad 0d03 	sub.w	sp, sp, r3
 800258a:	ab02      	add	r3, sp, #8
 800258c:	3300      	adds	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
    buf[0] = addr;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	79fa      	ldrb	r2, [r7, #7]
 8002594:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[1], data, length);
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	3301      	adds	r3, #1
 800259a:	79ba      	ldrb	r2, [r7, #6]
 800259c:	6839      	ldr	r1, [r7, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f00b fa89 	bl	800dab6 <memcpy>

    if (HAL_I2C_Master_Transmit(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, buf, length + 1, HAL_MAX_DELAY) != HAL_OK) {
 80025a4:	79bb      	ldrb	r3, [r7, #6]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3301      	adds	r3, #1
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025b0:	9200      	str	r2, [sp, #0]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	2152      	movs	r1, #82	@ 0x52
 80025b6:	480a      	ldr	r0, [pc, #40]	@ (80025e0 <i2c_write_addr8_bytes+0xb4>)
 80025b8:	f001 fe08 	bl	80041cc <HAL_I2C_Master_Transmit>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d006      	beq.n	80025d0 <i2c_write_addr8_bytes+0xa4>
        my_printf("[I2C] ERROR: Write failed i2c_write_addr8_bytes (register 0x%X)\r\n", addr);
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	4619      	mov	r1, r3
 80025c6:	4807      	ldr	r0, [pc, #28]	@ (80025e4 <i2c_write_addr8_bytes+0xb8>)
 80025c8:	f7ff fee0 	bl	800238c <my_printf>
        return false;
 80025cc:	2300      	movs	r3, #0
 80025ce:	e000      	b.n	80025d2 <i2c_write_addr8_bytes+0xa6>
    }
    return true;
 80025d0:	2301      	movs	r3, #1
 80025d2:	46b5      	mov	sp, r6
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025de:	bf00      	nop
 80025e0:	200002e8 	.word	0x200002e8
 80025e4:	0800fc94 	.word	0x0800fc94

080025e8 <i2c_read_addr8_bytes>:

bool i2c_read_addr8_bytes(uint8_t addr, uint8_t *data, uint8_t length) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	4603      	mov	r3, r0
 80025f0:	6039      	str	r1, [r7, #0]
 80025f2:	71fb      	strb	r3, [r7, #7]
 80025f4:	4613      	mov	r3, r2
 80025f6:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Master_Transmit(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 80025f8:	1dfa      	adds	r2, r7, #7
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	2152      	movs	r1, #82	@ 0x52
 8002604:	4812      	ldr	r0, [pc, #72]	@ (8002650 <i2c_read_addr8_bytes+0x68>)
 8002606:	f001 fde1 	bl	80041cc <HAL_I2C_Master_Transmit>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d006      	beq.n	800261e <i2c_read_addr8_bytes+0x36>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_bytes (register 0x%X)\r\n", addr);
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	4619      	mov	r1, r3
 8002614:	480f      	ldr	r0, [pc, #60]	@ (8002654 <i2c_read_addr8_bytes+0x6c>)
 8002616:	f7ff feb9 	bl	800238c <my_printf>
        return false;
 800261a:	2300      	movs	r3, #0
 800261c:	e014      	b.n	8002648 <i2c_read_addr8_bytes+0x60>
    }
    if (HAL_I2C_Master_Receive(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, data, length, HAL_MAX_DELAY) != HAL_OK) {
 800261e:	79bb      	ldrb	r3, [r7, #6]
 8002620:	b29b      	uxth	r3, r3
 8002622:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002626:	9200      	str	r2, [sp, #0]
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	2152      	movs	r1, #82	@ 0x52
 800262c:	4808      	ldr	r0, [pc, #32]	@ (8002650 <i2c_read_addr8_bytes+0x68>)
 800262e:	f001 fecb 	bl	80043c8 <HAL_I2C_Master_Receive>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d006      	beq.n	8002646 <i2c_read_addr8_bytes+0x5e>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_bytes (register 0x%X)\r\n", addr);
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	4619      	mov	r1, r3
 800263c:	4806      	ldr	r0, [pc, #24]	@ (8002658 <i2c_read_addr8_bytes+0x70>)
 800263e:	f7ff fea5 	bl	800238c <my_printf>
        return false;
 8002642:	2300      	movs	r3, #0
 8002644:	e000      	b.n	8002648 <i2c_read_addr8_bytes+0x60>
    }
    return true;
 8002646:	2301      	movs	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	200002e8 	.word	0x200002e8
 8002654:	0800fcd8 	.word	0x0800fcd8
 8002658:	0800fd1c 	.word	0x0800fd1c

0800265c <device_is_booted>:
/**
 * We can read the model id to confirm that the device is booted.
 * (There is no fresh_out_of_reset as on the vl6180x)
 */
static bool device_is_booted()
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
    printf("check device is booted\r\n");
 8002662:	4813      	ldr	r0, [pc, #76]	@ (80026b0 <device_is_booted+0x54>)
 8002664:	f00b f88c 	bl	800d780 <puts>
    uint8_t device_id = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	71fb      	strb	r3, [r7, #7]
    if (!i2c_read_addr8_data8(REG_IDENTIFICATION_MODEL_ID, &device_id)) {
 800266c:	1dfb      	adds	r3, r7, #7
 800266e:	4619      	mov	r1, r3
 8002670:	20c0      	movs	r0, #192	@ 0xc0
 8002672:	f7ff feb3 	bl	80023dc <i2c_read_addr8_data8>
 8002676:	4603      	mov	r3, r0
 8002678:	f083 0301 	eor.w	r3, r3, #1
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d006      	beq.n	8002690 <device_is_booted+0x34>
        printf("current device id: %d", device_id);
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	4619      	mov	r1, r3
 8002686:	480b      	ldr	r0, [pc, #44]	@ (80026b4 <device_is_booted+0x58>)
 8002688:	f00b f812 	bl	800d6b0 <iprintf>
        return false;
 800268c:	2300      	movs	r3, #0
 800268e:	e00a      	b.n	80026a6 <device_is_booted+0x4a>
    } else {
        printf("device id: %d", device_id);
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	4619      	mov	r1, r3
 8002694:	4808      	ldr	r0, [pc, #32]	@ (80026b8 <device_is_booted+0x5c>)
 8002696:	f00b f80b 	bl	800d6b0 <iprintf>
    }
    return device_id == VL53L0X_EXPECTED_DEVICE_ID;
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	2bee      	cmp	r3, #238	@ 0xee
 800269e:	bf0c      	ite	eq
 80026a0:	2301      	moveq	r3, #1
 80026a2:	2300      	movne	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	0800fd60 	.word	0x0800fd60
 80026b4:	0800fd78 	.word	0x0800fd78
 80026b8:	0800fd90 	.word	0x0800fd90

080026bc <data_init>:

/**
 * One time device initialization
 */
static bool data_init()
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
    bool success = false;
 80026c2:	2300      	movs	r3, #0
 80026c4:	71fb      	strb	r3, [r7, #7]

    /* Set 2v8 mode */
    uint8_t vhv_config_scl_sda = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	71bb      	strb	r3, [r7, #6]
    if (!i2c_read_addr8_data8(REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, &vhv_config_scl_sda)) {
 80026ca:	1dbb      	adds	r3, r7, #6
 80026cc:	4619      	mov	r1, r3
 80026ce:	2089      	movs	r0, #137	@ 0x89
 80026d0:	f7ff fe84 	bl	80023dc <i2c_read_addr8_data8>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <data_init+0x28>
        return false;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e073      	b.n	80027cc <data_init+0x110>
    }
    vhv_config_scl_sda |= 0x01;
 80026e4:	79bb      	ldrb	r3, [r7, #6]
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	71bb      	strb	r3, [r7, #6]
    if (!i2c_write_addr8_data8(REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, vhv_config_scl_sda)) {
 80026ee:	79bb      	ldrb	r3, [r7, #6]
 80026f0:	4619      	mov	r1, r3
 80026f2:	2089      	movs	r0, #137	@ 0x89
 80026f4:	f7ff feaa 	bl	800244c <i2c_write_addr8_data8>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f083 0301 	eor.w	r3, r3, #1
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <data_init+0x4c>
        return false;
 8002704:	2300      	movs	r3, #0
 8002706:	e061      	b.n	80027cc <data_init+0x110>
    }

    /* Set I2C standard mode */
    success = i2c_write_addr8_data8(0x88, 0x00);
 8002708:	2100      	movs	r1, #0
 800270a:	2088      	movs	r0, #136	@ 0x88
 800270c:	f7ff fe9e 	bl	800244c <i2c_write_addr8_data8>
 8002710:	4603      	mov	r3, r0
 8002712:	71fb      	strb	r3, [r7, #7]

    success &= i2c_write_addr8_data8(0x80, 0x01);
 8002714:	2101      	movs	r1, #1
 8002716:	2080      	movs	r0, #128	@ 0x80
 8002718:	f7ff fe98 	bl	800244c <i2c_write_addr8_data8>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf14      	ite	ne
 8002728:	2301      	movne	r3, #1
 800272a:	2300      	moveq	r3, #0
 800272c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 800272e:	2101      	movs	r1, #1
 8002730:	20ff      	movs	r0, #255	@ 0xff
 8002732:	f7ff fe8b 	bl	800244c <i2c_write_addr8_data8>
 8002736:	4603      	mov	r3, r0
 8002738:	461a      	mov	r2, r3
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	bf14      	ite	ne
 8002742:	2301      	movne	r3, #1
 8002744:	2300      	moveq	r3, #0
 8002746:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8002748:	2100      	movs	r1, #0
 800274a:	2000      	movs	r0, #0
 800274c:	f7ff fe7e 	bl	800244c <i2c_write_addr8_data8>
 8002750:	4603      	mov	r3, r0
 8002752:	461a      	mov	r2, r3
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf14      	ite	ne
 800275c:	2301      	movne	r3, #1
 800275e:	2300      	moveq	r3, #0
 8002760:	71fb      	strb	r3, [r7, #7]
    /* It may be unnecessary to retrieve the stop variable for each sensor */
    success &= i2c_read_addr8_data8(0x91, &stop_variable);
 8002762:	491c      	ldr	r1, [pc, #112]	@ (80027d4 <data_init+0x118>)
 8002764:	2091      	movs	r0, #145	@ 0x91
 8002766:	f7ff fe39 	bl	80023dc <i2c_read_addr8_data8>
 800276a:	4603      	mov	r3, r0
 800276c:	461a      	mov	r2, r3
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	bf14      	ite	ne
 8002776:	2301      	movne	r3, #1
 8002778:	2300      	moveq	r3, #0
 800277a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x01);
 800277c:	2101      	movs	r1, #1
 800277e:	2000      	movs	r0, #0
 8002780:	f7ff fe64 	bl	800244c <i2c_write_addr8_data8>
 8002784:	4603      	mov	r3, r0
 8002786:	461a      	mov	r2, r3
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf14      	ite	ne
 8002790:	2301      	movne	r3, #1
 8002792:	2300      	moveq	r3, #0
 8002794:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002796:	2100      	movs	r1, #0
 8002798:	20ff      	movs	r0, #255	@ 0xff
 800279a:	f7ff fe57 	bl	800244c <i2c_write_addr8_data8>
 800279e:	4603      	mov	r3, r0
 80027a0:	461a      	mov	r2, r3
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bf14      	ite	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	2300      	moveq	r3, #0
 80027ae:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x00);
 80027b0:	2100      	movs	r1, #0
 80027b2:	2080      	movs	r0, #128	@ 0x80
 80027b4:	f7ff fe4a 	bl	800244c <i2c_write_addr8_data8>
 80027b8:	4603      	mov	r3, r0
 80027ba:	461a      	mov	r2, r3
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf14      	ite	ne
 80027c4:	2301      	movne	r3, #1
 80027c6:	2300      	moveq	r3, #0
 80027c8:	71fb      	strb	r3, [r7, #7]

    return success;
 80027ca:	79fb      	ldrb	r3, [r7, #7]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	2000050f 	.word	0x2000050f

080027d8 <read_strobe>:
/**
 * Wait for strobe value to be set. This is used when we read values
 * from NVM (non volatile memory).
 */
static bool read_strobe()
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
    bool success = false;
 80027de:	2300      	movs	r3, #0
 80027e0:	71fb      	strb	r3, [r7, #7]
    uint8_t strobe = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	71bb      	strb	r3, [r7, #6]
    if (!i2c_write_addr8_data8(0x83, 0x00)) {
 80027e6:	2100      	movs	r1, #0
 80027e8:	2083      	movs	r0, #131	@ 0x83
 80027ea:	f7ff fe2f 	bl	800244c <i2c_write_addr8_data8>
 80027ee:	4603      	mov	r3, r0
 80027f0:	f083 0301 	eor.w	r3, r3, #1
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <read_strobe+0x26>
        return false;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e021      	b.n	8002842 <read_strobe+0x6a>
    }
    do {
        success = i2c_read_addr8_data8(0x83, &strobe);
 80027fe:	1dbb      	adds	r3, r7, #6
 8002800:	4619      	mov	r1, r3
 8002802:	2083      	movs	r0, #131	@ 0x83
 8002804:	f7ff fdea 	bl	80023dc <i2c_read_addr8_data8>
 8002808:	4603      	mov	r3, r0
 800280a:	71fb      	strb	r3, [r7, #7]
    } while (success && (strobe == 0));
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <read_strobe+0x40>
 8002812:	79bb      	ldrb	r3, [r7, #6]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f2      	beq.n	80027fe <read_strobe+0x26>
    if (!success) {
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	f083 0301 	eor.w	r3, r3, #1
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <read_strobe+0x50>
        return false;
 8002824:	2300      	movs	r3, #0
 8002826:	e00c      	b.n	8002842 <read_strobe+0x6a>
    }
    if (!i2c_write_addr8_data8(0x83, 0x01)) {
 8002828:	2101      	movs	r1, #1
 800282a:	2083      	movs	r0, #131	@ 0x83
 800282c:	f7ff fe0e 	bl	800244c <i2c_write_addr8_data8>
 8002830:	4603      	mov	r3, r0
 8002832:	f083 0301 	eor.w	r3, r3, #1
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <read_strobe+0x68>
        return false;
 800283c:	2300      	movs	r3, #0
 800283e:	e000      	b.n	8002842 <read_strobe+0x6a>
    }
    return true;
 8002840:	2301      	movs	r3, #1
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <get_spad_info_from_nvm>:
 * or only non-aperture SPADs. The number of SPADs to enable and which type
 * are also saved during the calibration step at ST factory and can be retrieved
 * from NVM.
 */
static bool get_spad_info_from_nvm(uint8_t *spad_count, uint8_t *spad_type, uint8_t good_spad_map[6])
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b086      	sub	sp, #24
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
    bool success = false;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]
    uint8_t tmp_data8 = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	75bb      	strb	r3, [r7, #22]
    uint32_t tmp_data32 = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]

    /* Setup to read from NVM */
    success  = i2c_write_addr8_data8(0x80, 0x01);
 8002862:	2101      	movs	r1, #1
 8002864:	2080      	movs	r0, #128	@ 0x80
 8002866:	f7ff fdf1 	bl	800244c <i2c_write_addr8_data8>
 800286a:	4603      	mov	r3, r0
 800286c:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 800286e:	2101      	movs	r1, #1
 8002870:	20ff      	movs	r0, #255	@ 0xff
 8002872:	f7ff fdeb 	bl	800244c <i2c_write_addr8_data8>
 8002876:	4603      	mov	r3, r0
 8002878:	461a      	mov	r2, r3
 800287a:	7dfb      	ldrb	r3, [r7, #23]
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	bf14      	ite	ne
 8002882:	2301      	movne	r3, #1
 8002884:	2300      	moveq	r3, #0
 8002886:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8002888:	2100      	movs	r1, #0
 800288a:	2000      	movs	r0, #0
 800288c:	f7ff fdde 	bl	800244c <i2c_write_addr8_data8>
 8002890:	4603      	mov	r3, r0
 8002892:	461a      	mov	r2, r3
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf14      	ite	ne
 800289c:	2301      	movne	r3, #1
 800289e:	2300      	moveq	r3, #0
 80028a0:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x06);
 80028a2:	2106      	movs	r1, #6
 80028a4:	20ff      	movs	r0, #255	@ 0xff
 80028a6:	f7ff fdd1 	bl	800244c <i2c_write_addr8_data8>
 80028aa:	4603      	mov	r3, r0
 80028ac:	461a      	mov	r2, r3
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	bf14      	ite	ne
 80028b6:	2301      	movne	r3, #1
 80028b8:	2300      	moveq	r3, #0
 80028ba:	75fb      	strb	r3, [r7, #23]
    success &= i2c_read_addr8_data8(0x83, &tmp_data8);
 80028bc:	f107 0316 	add.w	r3, r7, #22
 80028c0:	4619      	mov	r1, r3
 80028c2:	2083      	movs	r0, #131	@ 0x83
 80028c4:	f7ff fd8a 	bl	80023dc <i2c_read_addr8_data8>
 80028c8:	4603      	mov	r3, r0
 80028ca:	461a      	mov	r2, r3
 80028cc:	7dfb      	ldrb	r3, [r7, #23]
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf14      	ite	ne
 80028d4:	2301      	movne	r3, #1
 80028d6:	2300      	moveq	r3, #0
 80028d8:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x83, tmp_data8 | 0x04);
 80028da:	7dbb      	ldrb	r3, [r7, #22]
 80028dc:	f043 0304 	orr.w	r3, r3, #4
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	4619      	mov	r1, r3
 80028e4:	2083      	movs	r0, #131	@ 0x83
 80028e6:	f7ff fdb1 	bl	800244c <i2c_write_addr8_data8>
 80028ea:	4603      	mov	r3, r0
 80028ec:	461a      	mov	r2, r3
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bf14      	ite	ne
 80028f6:	2301      	movne	r3, #1
 80028f8:	2300      	moveq	r3, #0
 80028fa:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x07);
 80028fc:	2107      	movs	r1, #7
 80028fe:	20ff      	movs	r0, #255	@ 0xff
 8002900:	f7ff fda4 	bl	800244c <i2c_write_addr8_data8>
 8002904:	4603      	mov	r3, r0
 8002906:	461a      	mov	r2, r3
 8002908:	7dfb      	ldrb	r3, [r7, #23]
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf14      	ite	ne
 8002910:	2301      	movne	r3, #1
 8002912:	2300      	moveq	r3, #0
 8002914:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x81, 0x01);
 8002916:	2101      	movs	r1, #1
 8002918:	2081      	movs	r0, #129	@ 0x81
 800291a:	f7ff fd97 	bl	800244c <i2c_write_addr8_data8>
 800291e:	4603      	mov	r3, r0
 8002920:	461a      	mov	r2, r3
 8002922:	7dfb      	ldrb	r3, [r7, #23]
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	bf14      	ite	ne
 800292a:	2301      	movne	r3, #1
 800292c:	2300      	moveq	r3, #0
 800292e:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x80, 0x01);
 8002930:	2101      	movs	r1, #1
 8002932:	2080      	movs	r0, #128	@ 0x80
 8002934:	f7ff fd8a 	bl	800244c <i2c_write_addr8_data8>
 8002938:	4603      	mov	r3, r0
 800293a:	461a      	mov	r2, r3
 800293c:	7dfb      	ldrb	r3, [r7, #23]
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	bf14      	ite	ne
 8002944:	2301      	movne	r3, #1
 8002946:	2300      	moveq	r3, #0
 8002948:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	f083 0301 	eor.w	r3, r3, #1
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <get_spad_info_from_nvm+0x110>
      return false;
 8002956:	2300      	movs	r3, #0
 8002958:	e0c1      	b.n	8002ade <get_spad_info_from_nvm+0x294>
    }

    /* Get the SPAD count and type */
    success &= i2c_write_addr8_data8(0x94, 0x6b);
 800295a:	216b      	movs	r1, #107	@ 0x6b
 800295c:	2094      	movs	r0, #148	@ 0x94
 800295e:	f7ff fd75 	bl	800244c <i2c_write_addr8_data8>
 8002962:	4603      	mov	r3, r0
 8002964:	461a      	mov	r2, r3
 8002966:	7dfb      	ldrb	r3, [r7, #23]
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	bf14      	ite	ne
 800296e:	2301      	movne	r3, #1
 8002970:	2300      	moveq	r3, #0
 8002972:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	f083 0301 	eor.w	r3, r3, #1
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <get_spad_info_from_nvm+0x13a>
        return false;
 8002980:	2300      	movs	r3, #0
 8002982:	e0ac      	b.n	8002ade <get_spad_info_from_nvm+0x294>
    }
    if (!read_strobe()) {
 8002984:	f7ff ff28 	bl	80027d8 <read_strobe>
 8002988:	4603      	mov	r3, r0
 800298a:	f083 0301 	eor.w	r3, r3, #1
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <get_spad_info_from_nvm+0x14e>
        return false;
 8002994:	2300      	movs	r3, #0
 8002996:	e0a2      	b.n	8002ade <get_spad_info_from_nvm+0x294>
    }
    success &= i2c_read_addr8_data32(0x90, &tmp_data32);
 8002998:	f107 0310 	add.w	r3, r7, #16
 800299c:	4619      	mov	r1, r3
 800299e:	2090      	movs	r0, #144	@ 0x90
 80029a0:	f7ff fd7e 	bl	80024a0 <i2c_read_addr8_data32>
 80029a4:	4603      	mov	r3, r0
 80029a6:	461a      	mov	r2, r3
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf14      	ite	ne
 80029b0:	2301      	movne	r3, #1
 80029b2:	2300      	moveq	r3, #0
 80029b4:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	f083 0301 	eor.w	r3, r3, #1
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <get_spad_info_from_nvm+0x17c>
        return false;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e08b      	b.n	8002ade <get_spad_info_from_nvm+0x294>
    }
    *spad_count = (tmp_data32 >> 8) & 0x7f;
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	701a      	strb	r2, [r3, #0]
    *spad_type = (tmp_data32 >> 15) & 0x01;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	0bdb      	lsrs	r3, r3, #15
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	701a      	strb	r2, [r3, #0]
    good_spad_map[5] = (uint8_t)((tmp_data32 >> 16) & 0xFF);

#endif

    /* Restore after reading from NVM */
    success &=i2c_write_addr8_data8(0x81, 0x00);
 80029e6:	2100      	movs	r1, #0
 80029e8:	2081      	movs	r0, #129	@ 0x81
 80029ea:	f7ff fd2f 	bl	800244c <i2c_write_addr8_data8>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461a      	mov	r2, r3
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	bf14      	ite	ne
 80029fa:	2301      	movne	r3, #1
 80029fc:	2300      	moveq	r3, #0
 80029fe:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x06);
 8002a00:	2106      	movs	r1, #6
 8002a02:	20ff      	movs	r0, #255	@ 0xff
 8002a04:	f7ff fd22 	bl	800244c <i2c_write_addr8_data8>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf14      	ite	ne
 8002a14:	2301      	movne	r3, #1
 8002a16:	2300      	moveq	r3, #0
 8002a18:	75fb      	strb	r3, [r7, #23]
    success &=i2c_read_addr8_data8(0x83, &tmp_data8);
 8002a1a:	f107 0316 	add.w	r3, r7, #22
 8002a1e:	4619      	mov	r1, r3
 8002a20:	2083      	movs	r0, #131	@ 0x83
 8002a22:	f7ff fcdb 	bl	80023dc <i2c_read_addr8_data8>
 8002a26:	4603      	mov	r3, r0
 8002a28:	461a      	mov	r2, r3
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	bf14      	ite	ne
 8002a32:	2301      	movne	r3, #1
 8002a34:	2300      	moveq	r3, #0
 8002a36:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x83, tmp_data8 & 0xfb);
 8002a38:	7dbb      	ldrb	r3, [r7, #22]
 8002a3a:	f023 0304 	bic.w	r3, r3, #4
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	4619      	mov	r1, r3
 8002a42:	2083      	movs	r0, #131	@ 0x83
 8002a44:	f7ff fd02 	bl	800244c <i2c_write_addr8_data8>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf14      	ite	ne
 8002a54:	2301      	movne	r3, #1
 8002a56:	2300      	moveq	r3, #0
 8002a58:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x01);
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	20ff      	movs	r0, #255	@ 0xff
 8002a5e:	f7ff fcf5 	bl	800244c <i2c_write_addr8_data8>
 8002a62:	4603      	mov	r3, r0
 8002a64:	461a      	mov	r2, r3
 8002a66:	7dfb      	ldrb	r3, [r7, #23]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bf14      	ite	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	2300      	moveq	r3, #0
 8002a72:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x00, 0x01);
 8002a74:	2101      	movs	r1, #1
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7ff fce8 	bl	800244c <i2c_write_addr8_data8>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x00);
 8002a8e:	2100      	movs	r1, #0
 8002a90:	20ff      	movs	r0, #255	@ 0xff
 8002a92:	f7ff fcdb 	bl	800244c <i2c_write_addr8_data8>
 8002a96:	4603      	mov	r3, r0
 8002a98:	461a      	mov	r2, r3
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	bf14      	ite	ne
 8002aa2:	2301      	movne	r3, #1
 8002aa4:	2300      	moveq	r3, #0
 8002aa6:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x80, 0x00);
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	2080      	movs	r0, #128	@ 0x80
 8002aac:	f7ff fcce 	bl	800244c <i2c_write_addr8_data8>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	75fb      	strb	r3, [r7, #23]

    /* When we haven't configured the SPAD map yet, the SPAD map register actually
     * contains the good SPAD map, so we can retrieve it straight from this register
     * instead of reading it from the NVM. */
    if (!i2c_read_addr8_bytes(REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, good_spad_map, 6)) {
 8002ac2:	2206      	movs	r2, #6
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	20b0      	movs	r0, #176	@ 0xb0
 8002ac8:	f7ff fd8e 	bl	80025e8 <i2c_read_addr8_bytes>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f083 0301 	eor.w	r3, r3, #1
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <get_spad_info_from_nvm+0x292>
        return false;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e000      	b.n	8002ade <get_spad_info_from_nvm+0x294>
    }
    return success;
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <set_spads_from_nvm>:
 * Sets the SPADs according to the value saved to NVM by ST during production. Assuming
 * similar conditions (e.g. no cover glass), this should give reasonable readings and we
 * can avoid running ref spad management (tedious code).
 */
static bool set_spads_from_nvm()
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b08c      	sub	sp, #48	@ 0x30
 8002aea:	af00      	add	r7, sp, #0
    uint8_t spad_map[SPAD_MAP_ROW_COUNT] = { 0 };
 8002aec:	f107 0310 	add.w	r3, r7, #16
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	809a      	strh	r2, [r3, #4]
    uint8_t good_spad_map[SPAD_MAP_ROW_COUNT] = { 0 };
 8002af6:	f107 0308 	add.w	r3, r7, #8
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	809a      	strh	r2, [r3, #4]
    uint8_t spads_enabled_count = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t spads_to_enable_count = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	71fb      	strb	r3, [r7, #7]
    uint8_t spad_type = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	71bb      	strb	r3, [r7, #6]
    volatile uint32_t total_val = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	603b      	str	r3, [r7, #0]

    if (!get_spad_info_from_nvm(&spads_to_enable_count, &spad_type, good_spad_map)) {
 8002b12:	f107 0208 	add.w	r2, r7, #8
 8002b16:	1db9      	adds	r1, r7, #6
 8002b18:	1dfb      	adds	r3, r7, #7
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fe95 	bl	800284a <get_spad_info_from_nvm>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f083 0301 	eor.w	r3, r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <set_spads_from_nvm+0x4a>
        return false;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e0c7      	b.n	8002cc0 <set_spads_from_nvm+0x1da>
    }

    for (int i = 0; i < 6; i++) {
 8002b30:	2300      	movs	r3, #0
 8002b32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b34:	e00b      	b.n	8002b4e <set_spads_from_nvm+0x68>
        total_val += good_spad_map[i];
 8002b36:	f107 0208 	add.w	r2, r7, #8
 8002b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3c:	4413      	add	r3, r2
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	4413      	add	r3, r2
 8002b46:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 6; i++) {
 8002b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b50:	2b05      	cmp	r3, #5
 8002b52:	ddf0      	ble.n	8002b36 <set_spads_from_nvm+0x50>
    }

    bool success = i2c_write_addr8_data8(0xFF, 0x01);
 8002b54:	2101      	movs	r1, #1
 8002b56:	20ff      	movs	r0, #255	@ 0xff
 8002b58:	f7ff fc78 	bl	800244c <i2c_write_addr8_data8>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8002b60:	2100      	movs	r1, #0
 8002b62:	204f      	movs	r0, #79	@ 0x4f
 8002b64:	f7ff fc72 	bl	800244c <i2c_write_addr8_data8>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	7ffb      	ldrb	r3, [r7, #31]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8002b7a:	212c      	movs	r1, #44	@ 0x2c
 8002b7c:	204e      	movs	r0, #78	@ 0x4e
 8002b7e:	f7ff fc65 	bl	800244c <i2c_write_addr8_data8>
 8002b82:	4603      	mov	r3, r0
 8002b84:	461a      	mov	r2, r3
 8002b86:	7ffb      	ldrb	r3, [r7, #31]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bf14      	ite	ne
 8002b8e:	2301      	movne	r3, #1
 8002b90:	2300      	moveq	r3, #0
 8002b92:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002b94:	2100      	movs	r1, #0
 8002b96:	20ff      	movs	r0, #255	@ 0xff
 8002b98:	f7ff fc58 	bl	800244c <i2c_write_addr8_data8>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	7ffb      	ldrb	r3, [r7, #31]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	bf14      	ite	ne
 8002ba8:	2301      	movne	r3, #1
 8002baa:	2300      	moveq	r3, #0
 8002bac:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_GLOBAL_CONFIG_REF_EN_START_SELECT, SPAD_START_SELECT);
 8002bae:	21b4      	movs	r1, #180	@ 0xb4
 8002bb0:	20b6      	movs	r0, #182	@ 0xb6
 8002bb2:	f7ff fc4b 	bl	800244c <i2c_write_addr8_data8>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	7ffb      	ldrb	r3, [r7, #31]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bf14      	ite	ne
 8002bc2:	2301      	movne	r3, #1
 8002bc4:	2300      	moveq	r3, #0
 8002bc6:	77fb      	strb	r3, [r7, #31]
    if (!success) {
 8002bc8:	7ffb      	ldrb	r3, [r7, #31]
 8002bca:	f083 0301 	eor.w	r3, r3, #1
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <set_spads_from_nvm+0xf2>
        return false;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e073      	b.n	8002cc0 <set_spads_from_nvm+0x1da>
    }

    uint8_t offset = (spad_type == SPAD_TYPE_APERTURE) ? SPAD_APERTURE_START_INDEX : 0;
 8002bd8:	79bb      	ldrb	r3, [r7, #6]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <set_spads_from_nvm+0xfc>
 8002bde:	230c      	movs	r3, #12
 8002be0:	e000      	b.n	8002be4 <set_spads_from_nvm+0xfe>
 8002be2:	2300      	movs	r3, #0
 8002be4:	77bb      	strb	r3, [r7, #30]

    /* Create a new SPAD array by selecting a subset of the SPADs suggested by the good SPAD map.
     * The subset should only have the number of type enabled as suggested by the reading from
     * the NVM (spads_to_enable_count and spad_type). */
    for (int row = 0; row < SPAD_MAP_ROW_COUNT; row++) {
 8002be6:	2300      	movs	r3, #0
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bea:	e04d      	b.n	8002c88 <set_spads_from_nvm+0x1a2>
        for (int column = 0; column < SPAD_ROW_SIZE; column++) {
 8002bec:	2300      	movs	r3, #0
 8002bee:	623b      	str	r3, [r7, #32]
 8002bf0:	e03d      	b.n	8002c6e <set_spads_from_nvm+0x188>
            int index = (row * SPAD_ROW_SIZE) + column;
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	6a3a      	ldr	r2, [r7, #32]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
            if (index >= SPAD_MAX_COUNT) {
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	2b2b      	cmp	r3, #43	@ 0x2b
 8002c00:	dd01      	ble.n	8002c06 <set_spads_from_nvm+0x120>
                return false;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e05c      	b.n	8002cc0 <set_spads_from_nvm+0x1da>
            }
            if (spads_enabled_count == spads_to_enable_count) {
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d032      	beq.n	8002c76 <set_spads_from_nvm+0x190>
                /* We are done */
                break;
            }
            if (index < offset) {
 8002c10:	7fbb      	ldrb	r3, [r7, #30]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	db26      	blt.n	8002c66 <set_spads_from_nvm+0x180>
                continue;
            }
            if ((good_spad_map[row] >> column) & 0x1) {
 8002c18:	f107 0208 	add.w	r2, r7, #8
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	4413      	add	r3, r2
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	fa42 f303 	asr.w	r3, r2, r3
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01a      	beq.n	8002c68 <set_spads_from_nvm+0x182>
                spad_map[row] |= (1 << column);
 8002c32:	f107 0210 	add.w	r2, r7, #16
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	4413      	add	r3, r2
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	b25a      	sxtb	r2, r3
 8002c3e:	2101      	movs	r1, #1
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	b25b      	sxtb	r3, r3
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	b25b      	sxtb	r3, r3
 8002c4c:	b2d9      	uxtb	r1, r3
 8002c4e:	f107 0210 	add.w	r2, r7, #16
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	4413      	add	r3, r2
 8002c56:	460a      	mov	r2, r1
 8002c58:	701a      	strb	r2, [r3, #0]
                spads_enabled_count++;
 8002c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002c64:	e000      	b.n	8002c68 <set_spads_from_nvm+0x182>
                continue;
 8002c66:	bf00      	nop
        for (int column = 0; column < SPAD_ROW_SIZE; column++) {
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	623b      	str	r3, [r7, #32]
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	2b07      	cmp	r3, #7
 8002c72:	ddbe      	ble.n	8002bf2 <set_spads_from_nvm+0x10c>
 8002c74:	e000      	b.n	8002c78 <set_spads_from_nvm+0x192>
                break;
 8002c76:	bf00      	nop
            }
        }
        if (spads_enabled_count == spads_to_enable_count) {
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d006      	beq.n	8002c90 <set_spads_from_nvm+0x1aa>
    for (int row = 0; row < SPAD_MAP_ROW_COUNT; row++) {
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	3301      	adds	r3, #1
 8002c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8a:	2b05      	cmp	r3, #5
 8002c8c:	ddae      	ble.n	8002bec <set_spads_from_nvm+0x106>
 8002c8e:	e000      	b.n	8002c92 <set_spads_from_nvm+0x1ac>
            /* To avoid looping unnecessarily when we are already done. */
            break;
 8002c90:	bf00      	nop
        }
    }

    if (spads_enabled_count != spads_to_enable_count) {
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <set_spads_from_nvm+0x1ba>
        return false;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e00f      	b.n	8002cc0 <set_spads_from_nvm+0x1da>
    }

    /* Write the new SPAD configuration */
    if (!i2c_write_addr8_bytes(REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, spad_map, SPAD_MAP_ROW_COUNT)) {
 8002ca0:	f107 0310 	add.w	r3, r7, #16
 8002ca4:	2206      	movs	r2, #6
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	20b0      	movs	r0, #176	@ 0xb0
 8002caa:	f7ff fc3f 	bl	800252c <i2c_write_addr8_bytes>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	f083 0301 	eor.w	r3, r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <set_spads_from_nvm+0x1d8>
        return false;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e000      	b.n	8002cc0 <set_spads_from_nvm+0x1da>
    }

    return true;
 8002cbe:	2301      	movs	r3, #1
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3730      	adds	r7, #48	@ 0x30
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <load_default_tuning_settings>:

/**
 * Load tuning settings (same as default tuning settings provided by ST api code)
 */
static bool load_default_tuning_settings()
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
    bool success = i2c_write_addr8_data8(0xFF, 0x01);
 8002cce:	2101      	movs	r1, #1
 8002cd0:	20ff      	movs	r0, #255	@ 0xff
 8002cd2:	f7ff fbbb 	bl	800244c <i2c_write_addr8_data8>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8002cda:	2100      	movs	r1, #0
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f7ff fbb5 	bl	800244c <i2c_write_addr8_data8>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf14      	ite	ne
 8002cee:	2301      	movne	r3, #1
 8002cf0:	2300      	moveq	r3, #0
 8002cf2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	20ff      	movs	r0, #255	@ 0xff
 8002cf8:	f7ff fba8 	bl	800244c <i2c_write_addr8_data8>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	461a      	mov	r2, r3
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf14      	ite	ne
 8002d08:	2301      	movne	r3, #1
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x09, 0x00);
 8002d0e:	2100      	movs	r1, #0
 8002d10:	2009      	movs	r0, #9
 8002d12:	f7ff fb9b 	bl	800244c <i2c_write_addr8_data8>
 8002d16:	4603      	mov	r3, r0
 8002d18:	461a      	mov	r2, r3
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	bf14      	ite	ne
 8002d22:	2301      	movne	r3, #1
 8002d24:	2300      	moveq	r3, #0
 8002d26:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x10, 0x00);
 8002d28:	2100      	movs	r1, #0
 8002d2a:	2010      	movs	r0, #16
 8002d2c:	f7ff fb8e 	bl	800244c <i2c_write_addr8_data8>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf14      	ite	ne
 8002d3c:	2301      	movne	r3, #1
 8002d3e:	2300      	moveq	r3, #0
 8002d40:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x11, 0x00);
 8002d42:	2100      	movs	r1, #0
 8002d44:	2011      	movs	r0, #17
 8002d46:	f7ff fb81 	bl	800244c <i2c_write_addr8_data8>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	bf14      	ite	ne
 8002d56:	2301      	movne	r3, #1
 8002d58:	2300      	moveq	r3, #0
 8002d5a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x24, 0x01);
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	2024      	movs	r0, #36	@ 0x24
 8002d60:	f7ff fb74 	bl	800244c <i2c_write_addr8_data8>
 8002d64:	4603      	mov	r3, r0
 8002d66:	461a      	mov	r2, r3
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x25, 0xFF);
 8002d76:	21ff      	movs	r1, #255	@ 0xff
 8002d78:	2025      	movs	r0, #37	@ 0x25
 8002d7a:	f7ff fb67 	bl	800244c <i2c_write_addr8_data8>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bf14      	ite	ne
 8002d8a:	2301      	movne	r3, #1
 8002d8c:	2300      	moveq	r3, #0
 8002d8e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x75, 0x00);
 8002d90:	2100      	movs	r1, #0
 8002d92:	2075      	movs	r0, #117	@ 0x75
 8002d94:	f7ff fb5a 	bl	800244c <i2c_write_addr8_data8>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8002daa:	2101      	movs	r1, #1
 8002dac:	20ff      	movs	r0, #255	@ 0xff
 8002dae:	f7ff fb4d 	bl	800244c <i2c_write_addr8_data8>
 8002db2:	4603      	mov	r3, r0
 8002db4:	461a      	mov	r2, r3
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	bf14      	ite	ne
 8002dbe:	2301      	movne	r3, #1
 8002dc0:	2300      	moveq	r3, #0
 8002dc2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4E, 0x2C);
 8002dc4:	212c      	movs	r1, #44	@ 0x2c
 8002dc6:	204e      	movs	r0, #78	@ 0x4e
 8002dc8:	f7ff fb40 	bl	800244c <i2c_write_addr8_data8>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461a      	mov	r2, r3
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf14      	ite	ne
 8002dd8:	2301      	movne	r3, #1
 8002dda:	2300      	moveq	r3, #0
 8002ddc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x48, 0x00);
 8002dde:	2100      	movs	r1, #0
 8002de0:	2048      	movs	r0, #72	@ 0x48
 8002de2:	f7ff fb33 	bl	800244c <i2c_write_addr8_data8>
 8002de6:	4603      	mov	r3, r0
 8002de8:	461a      	mov	r2, r3
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bf14      	ite	ne
 8002df2:	2301      	movne	r3, #1
 8002df4:	2300      	moveq	r3, #0
 8002df6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x30, 0x20);
 8002df8:	2120      	movs	r1, #32
 8002dfa:	2030      	movs	r0, #48	@ 0x30
 8002dfc:	f7ff fb26 	bl	800244c <i2c_write_addr8_data8>
 8002e00:	4603      	mov	r3, r0
 8002e02:	461a      	mov	r2, r3
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	bf14      	ite	ne
 8002e0c:	2301      	movne	r3, #1
 8002e0e:	2300      	moveq	r3, #0
 8002e10:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002e12:	2100      	movs	r1, #0
 8002e14:	20ff      	movs	r0, #255	@ 0xff
 8002e16:	f7ff fb19 	bl	800244c <i2c_write_addr8_data8>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	bf14      	ite	ne
 8002e26:	2301      	movne	r3, #1
 8002e28:	2300      	moveq	r3, #0
 8002e2a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x30, 0x09);
 8002e2c:	2109      	movs	r1, #9
 8002e2e:	2030      	movs	r0, #48	@ 0x30
 8002e30:	f7ff fb0c 	bl	800244c <i2c_write_addr8_data8>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x54, 0x00);
 8002e46:	2100      	movs	r1, #0
 8002e48:	2054      	movs	r0, #84	@ 0x54
 8002e4a:	f7ff faff 	bl	800244c <i2c_write_addr8_data8>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	461a      	mov	r2, r3
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	bf14      	ite	ne
 8002e5a:	2301      	movne	r3, #1
 8002e5c:	2300      	moveq	r3, #0
 8002e5e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x31, 0x04);
 8002e60:	2104      	movs	r1, #4
 8002e62:	2031      	movs	r0, #49	@ 0x31
 8002e64:	f7ff faf2 	bl	800244c <i2c_write_addr8_data8>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf14      	ite	ne
 8002e74:	2301      	movne	r3, #1
 8002e76:	2300      	moveq	r3, #0
 8002e78:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x32, 0x03);
 8002e7a:	2103      	movs	r1, #3
 8002e7c:	2032      	movs	r0, #50	@ 0x32
 8002e7e:	f7ff fae5 	bl	800244c <i2c_write_addr8_data8>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461a      	mov	r2, r3
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bf14      	ite	ne
 8002e8e:	2301      	movne	r3, #1
 8002e90:	2300      	moveq	r3, #0
 8002e92:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x40, 0x83);
 8002e94:	2183      	movs	r1, #131	@ 0x83
 8002e96:	2040      	movs	r0, #64	@ 0x40
 8002e98:	f7ff fad8 	bl	800244c <i2c_write_addr8_data8>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x46, 0x25);
 8002eae:	2125      	movs	r1, #37	@ 0x25
 8002eb0:	2046      	movs	r0, #70	@ 0x46
 8002eb2:	f7ff facb 	bl	800244c <i2c_write_addr8_data8>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	461a      	mov	r2, r3
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	bf14      	ite	ne
 8002ec2:	2301      	movne	r3, #1
 8002ec4:	2300      	moveq	r3, #0
 8002ec6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x60, 0x00);
 8002ec8:	2100      	movs	r1, #0
 8002eca:	2060      	movs	r0, #96	@ 0x60
 8002ecc:	f7ff fabe 	bl	800244c <i2c_write_addr8_data8>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf14      	ite	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x27, 0x00);
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	2027      	movs	r0, #39	@ 0x27
 8002ee6:	f7ff fab1 	bl	800244c <i2c_write_addr8_data8>
 8002eea:	4603      	mov	r3, r0
 8002eec:	461a      	mov	r2, r3
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bf14      	ite	ne
 8002ef6:	2301      	movne	r3, #1
 8002ef8:	2300      	moveq	r3, #0
 8002efa:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x50, 0x06);
 8002efc:	2106      	movs	r1, #6
 8002efe:	2050      	movs	r0, #80	@ 0x50
 8002f00:	f7ff faa4 	bl	800244c <i2c_write_addr8_data8>
 8002f04:	4603      	mov	r3, r0
 8002f06:	461a      	mov	r2, r3
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf14      	ite	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	2300      	moveq	r3, #0
 8002f14:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x51, 0x00);
 8002f16:	2100      	movs	r1, #0
 8002f18:	2051      	movs	r0, #81	@ 0x51
 8002f1a:	f7ff fa97 	bl	800244c <i2c_write_addr8_data8>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	461a      	mov	r2, r3
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bf14      	ite	ne
 8002f2a:	2301      	movne	r3, #1
 8002f2c:	2300      	moveq	r3, #0
 8002f2e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x52, 0x96);
 8002f30:	2196      	movs	r1, #150	@ 0x96
 8002f32:	2052      	movs	r0, #82	@ 0x52
 8002f34:	f7ff fa8a 	bl	800244c <i2c_write_addr8_data8>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf14      	ite	ne
 8002f44:	2301      	movne	r3, #1
 8002f46:	2300      	moveq	r3, #0
 8002f48:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x56, 0x08);
 8002f4a:	2108      	movs	r1, #8
 8002f4c:	2056      	movs	r0, #86	@ 0x56
 8002f4e:	f7ff fa7d 	bl	800244c <i2c_write_addr8_data8>
 8002f52:	4603      	mov	r3, r0
 8002f54:	461a      	mov	r2, r3
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x57, 0x30);
 8002f64:	2130      	movs	r1, #48	@ 0x30
 8002f66:	2057      	movs	r0, #87	@ 0x57
 8002f68:	f7ff fa70 	bl	800244c <i2c_write_addr8_data8>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	461a      	mov	r2, r3
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x61, 0x00);
 8002f7e:	2100      	movs	r1, #0
 8002f80:	2061      	movs	r0, #97	@ 0x61
 8002f82:	f7ff fa63 	bl	800244c <i2c_write_addr8_data8>
 8002f86:	4603      	mov	r3, r0
 8002f88:	461a      	mov	r2, r3
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bf14      	ite	ne
 8002f92:	2301      	movne	r3, #1
 8002f94:	2300      	moveq	r3, #0
 8002f96:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x62, 0x00);
 8002f98:	2100      	movs	r1, #0
 8002f9a:	2062      	movs	r0, #98	@ 0x62
 8002f9c:	f7ff fa56 	bl	800244c <i2c_write_addr8_data8>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf14      	ite	ne
 8002fac:	2301      	movne	r3, #1
 8002fae:	2300      	moveq	r3, #0
 8002fb0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x64, 0x00);
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	2064      	movs	r0, #100	@ 0x64
 8002fb6:	f7ff fa49 	bl	800244c <i2c_write_addr8_data8>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	bf14      	ite	ne
 8002fc6:	2301      	movne	r3, #1
 8002fc8:	2300      	moveq	r3, #0
 8002fca:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x65, 0x00);
 8002fcc:	2100      	movs	r1, #0
 8002fce:	2065      	movs	r0, #101	@ 0x65
 8002fd0:	f7ff fa3c 	bl	800244c <i2c_write_addr8_data8>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x66, 0xA0);
 8002fe6:	21a0      	movs	r1, #160	@ 0xa0
 8002fe8:	2066      	movs	r0, #102	@ 0x66
 8002fea:	f7ff fa2f 	bl	800244c <i2c_write_addr8_data8>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003000:	2101      	movs	r1, #1
 8003002:	20ff      	movs	r0, #255	@ 0xff
 8003004:	f7ff fa22 	bl	800244c <i2c_write_addr8_data8>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf14      	ite	ne
 8003014:	2301      	movne	r3, #1
 8003016:	2300      	moveq	r3, #0
 8003018:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x22, 0x32);
 800301a:	2132      	movs	r1, #50	@ 0x32
 800301c:	2022      	movs	r0, #34	@ 0x22
 800301e:	f7ff fa15 	bl	800244c <i2c_write_addr8_data8>
 8003022:	4603      	mov	r3, r0
 8003024:	461a      	mov	r2, r3
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	bf14      	ite	ne
 800302e:	2301      	movne	r3, #1
 8003030:	2300      	moveq	r3, #0
 8003032:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x47, 0x14);
 8003034:	2114      	movs	r1, #20
 8003036:	2047      	movs	r0, #71	@ 0x47
 8003038:	f7ff fa08 	bl	800244c <i2c_write_addr8_data8>
 800303c:	4603      	mov	r3, r0
 800303e:	461a      	mov	r2, r3
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf14      	ite	ne
 8003048:	2301      	movne	r3, #1
 800304a:	2300      	moveq	r3, #0
 800304c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x49, 0xFF);
 800304e:	21ff      	movs	r1, #255	@ 0xff
 8003050:	2049      	movs	r0, #73	@ 0x49
 8003052:	f7ff f9fb 	bl	800244c <i2c_write_addr8_data8>
 8003056:	4603      	mov	r3, r0
 8003058:	461a      	mov	r2, r3
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	4013      	ands	r3, r2
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4A, 0x00);
 8003068:	2100      	movs	r1, #0
 800306a:	204a      	movs	r0, #74	@ 0x4a
 800306c:	f7ff f9ee 	bl	800244c <i2c_write_addr8_data8>
 8003070:	4603      	mov	r3, r0
 8003072:	461a      	mov	r2, r3
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf14      	ite	ne
 800307c:	2301      	movne	r3, #1
 800307e:	2300      	moveq	r3, #0
 8003080:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003082:	2100      	movs	r1, #0
 8003084:	20ff      	movs	r0, #255	@ 0xff
 8003086:	f7ff f9e1 	bl	800244c <i2c_write_addr8_data8>
 800308a:	4603      	mov	r3, r0
 800308c:	461a      	mov	r2, r3
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	bf14      	ite	ne
 8003096:	2301      	movne	r3, #1
 8003098:	2300      	moveq	r3, #0
 800309a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x7A, 0x0A);
 800309c:	210a      	movs	r1, #10
 800309e:	207a      	movs	r0, #122	@ 0x7a
 80030a0:	f7ff f9d4 	bl	800244c <i2c_write_addr8_data8>
 80030a4:	4603      	mov	r3, r0
 80030a6:	461a      	mov	r2, r3
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf14      	ite	ne
 80030b0:	2301      	movne	r3, #1
 80030b2:	2300      	moveq	r3, #0
 80030b4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x7B, 0x00);
 80030b6:	2100      	movs	r1, #0
 80030b8:	207b      	movs	r0, #123	@ 0x7b
 80030ba:	f7ff f9c7 	bl	800244c <i2c_write_addr8_data8>
 80030be:	4603      	mov	r3, r0
 80030c0:	461a      	mov	r2, r3
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	bf14      	ite	ne
 80030ca:	2301      	movne	r3, #1
 80030cc:	2300      	moveq	r3, #0
 80030ce:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x78, 0x21);
 80030d0:	2121      	movs	r1, #33	@ 0x21
 80030d2:	2078      	movs	r0, #120	@ 0x78
 80030d4:	f7ff f9ba 	bl	800244c <i2c_write_addr8_data8>
 80030d8:	4603      	mov	r3, r0
 80030da:	461a      	mov	r2, r3
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf14      	ite	ne
 80030e4:	2301      	movne	r3, #1
 80030e6:	2300      	moveq	r3, #0
 80030e8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 80030ea:	2101      	movs	r1, #1
 80030ec:	20ff      	movs	r0, #255	@ 0xff
 80030ee:	f7ff f9ad 	bl	800244c <i2c_write_addr8_data8>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461a      	mov	r2, r3
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	bf14      	ite	ne
 80030fe:	2301      	movne	r3, #1
 8003100:	2300      	moveq	r3, #0
 8003102:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x23, 0x34);
 8003104:	2134      	movs	r1, #52	@ 0x34
 8003106:	2023      	movs	r0, #35	@ 0x23
 8003108:	f7ff f9a0 	bl	800244c <i2c_write_addr8_data8>
 800310c:	4603      	mov	r3, r0
 800310e:	461a      	mov	r2, r3
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf14      	ite	ne
 8003118:	2301      	movne	r3, #1
 800311a:	2300      	moveq	r3, #0
 800311c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x42, 0x00);
 800311e:	2100      	movs	r1, #0
 8003120:	2042      	movs	r0, #66	@ 0x42
 8003122:	f7ff f993 	bl	800244c <i2c_write_addr8_data8>
 8003126:	4603      	mov	r3, r0
 8003128:	461a      	mov	r2, r3
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	4013      	ands	r3, r2
 800312e:	2b00      	cmp	r3, #0
 8003130:	bf14      	ite	ne
 8003132:	2301      	movne	r3, #1
 8003134:	2300      	moveq	r3, #0
 8003136:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x44, 0xFF);
 8003138:	21ff      	movs	r1, #255	@ 0xff
 800313a:	2044      	movs	r0, #68	@ 0x44
 800313c:	f7ff f986 	bl	800244c <i2c_write_addr8_data8>
 8003140:	4603      	mov	r3, r0
 8003142:	461a      	mov	r2, r3
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf14      	ite	ne
 800314c:	2301      	movne	r3, #1
 800314e:	2300      	moveq	r3, #0
 8003150:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x45, 0x26);
 8003152:	2126      	movs	r1, #38	@ 0x26
 8003154:	2045      	movs	r0, #69	@ 0x45
 8003156:	f7ff f979 	bl	800244c <i2c_write_addr8_data8>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	4013      	ands	r3, r2
 8003162:	2b00      	cmp	r3, #0
 8003164:	bf14      	ite	ne
 8003166:	2301      	movne	r3, #1
 8003168:	2300      	moveq	r3, #0
 800316a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x46, 0x05);
 800316c:	2105      	movs	r1, #5
 800316e:	2046      	movs	r0, #70	@ 0x46
 8003170:	f7ff f96c 	bl	800244c <i2c_write_addr8_data8>
 8003174:	4603      	mov	r3, r0
 8003176:	461a      	mov	r2, r3
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf14      	ite	ne
 8003180:	2301      	movne	r3, #1
 8003182:	2300      	moveq	r3, #0
 8003184:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x40, 0x40);
 8003186:	2140      	movs	r1, #64	@ 0x40
 8003188:	2040      	movs	r0, #64	@ 0x40
 800318a:	f7ff f95f 	bl	800244c <i2c_write_addr8_data8>
 800318e:	4603      	mov	r3, r0
 8003190:	461a      	mov	r2, r3
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	bf14      	ite	ne
 800319a:	2301      	movne	r3, #1
 800319c:	2300      	moveq	r3, #0
 800319e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x0E, 0x06);
 80031a0:	2106      	movs	r1, #6
 80031a2:	200e      	movs	r0, #14
 80031a4:	f7ff f952 	bl	800244c <i2c_write_addr8_data8>
 80031a8:	4603      	mov	r3, r0
 80031aa:	461a      	mov	r2, r3
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf14      	ite	ne
 80031b4:	2301      	movne	r3, #1
 80031b6:	2300      	moveq	r3, #0
 80031b8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x20, 0x1A);
 80031ba:	211a      	movs	r1, #26
 80031bc:	2020      	movs	r0, #32
 80031be:	f7ff f945 	bl	800244c <i2c_write_addr8_data8>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bf14      	ite	ne
 80031ce:	2301      	movne	r3, #1
 80031d0:	2300      	moveq	r3, #0
 80031d2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x43, 0x40);
 80031d4:	2140      	movs	r1, #64	@ 0x40
 80031d6:	2043      	movs	r0, #67	@ 0x43
 80031d8:	f7ff f938 	bl	800244c <i2c_write_addr8_data8>
 80031dc:	4603      	mov	r3, r0
 80031de:	461a      	mov	r2, r3
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf14      	ite	ne
 80031e8:	2301      	movne	r3, #1
 80031ea:	2300      	moveq	r3, #0
 80031ec:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80031ee:	2100      	movs	r1, #0
 80031f0:	20ff      	movs	r0, #255	@ 0xff
 80031f2:	f7ff f92b 	bl	800244c <i2c_write_addr8_data8>
 80031f6:	4603      	mov	r3, r0
 80031f8:	461a      	mov	r2, r3
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bf14      	ite	ne
 8003202:	2301      	movne	r3, #1
 8003204:	2300      	moveq	r3, #0
 8003206:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x34, 0x03);
 8003208:	2103      	movs	r1, #3
 800320a:	2034      	movs	r0, #52	@ 0x34
 800320c:	f7ff f91e 	bl	800244c <i2c_write_addr8_data8>
 8003210:	4603      	mov	r3, r0
 8003212:	461a      	mov	r2, r3
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf14      	ite	ne
 800321c:	2301      	movne	r3, #1
 800321e:	2300      	moveq	r3, #0
 8003220:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x35, 0x44);
 8003222:	2144      	movs	r1, #68	@ 0x44
 8003224:	2035      	movs	r0, #53	@ 0x35
 8003226:	f7ff f911 	bl	800244c <i2c_write_addr8_data8>
 800322a:	4603      	mov	r3, r0
 800322c:	461a      	mov	r2, r3
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	bf14      	ite	ne
 8003236:	2301      	movne	r3, #1
 8003238:	2300      	moveq	r3, #0
 800323a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 800323c:	2101      	movs	r1, #1
 800323e:	20ff      	movs	r0, #255	@ 0xff
 8003240:	f7ff f904 	bl	800244c <i2c_write_addr8_data8>
 8003244:	4603      	mov	r3, r0
 8003246:	461a      	mov	r2, r3
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x31, 0x04);
 8003256:	2104      	movs	r1, #4
 8003258:	2031      	movs	r0, #49	@ 0x31
 800325a:	f7ff f8f7 	bl	800244c <i2c_write_addr8_data8>
 800325e:	4603      	mov	r3, r0
 8003260:	461a      	mov	r2, r3
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	4013      	ands	r3, r2
 8003266:	2b00      	cmp	r3, #0
 8003268:	bf14      	ite	ne
 800326a:	2301      	movne	r3, #1
 800326c:	2300      	moveq	r3, #0
 800326e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4B, 0x09);
 8003270:	2109      	movs	r1, #9
 8003272:	204b      	movs	r0, #75	@ 0x4b
 8003274:	f7ff f8ea 	bl	800244c <i2c_write_addr8_data8>
 8003278:	4603      	mov	r3, r0
 800327a:	461a      	mov	r2, r3
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf14      	ite	ne
 8003284:	2301      	movne	r3, #1
 8003286:	2300      	moveq	r3, #0
 8003288:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4C, 0x05);
 800328a:	2105      	movs	r1, #5
 800328c:	204c      	movs	r0, #76	@ 0x4c
 800328e:	f7ff f8dd 	bl	800244c <i2c_write_addr8_data8>
 8003292:	4603      	mov	r3, r0
 8003294:	461a      	mov	r2, r3
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	bf14      	ite	ne
 800329e:	2301      	movne	r3, #1
 80032a0:	2300      	moveq	r3, #0
 80032a2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4D, 0x04);
 80032a4:	2104      	movs	r1, #4
 80032a6:	204d      	movs	r0, #77	@ 0x4d
 80032a8:	f7ff f8d0 	bl	800244c <i2c_write_addr8_data8>
 80032ac:	4603      	mov	r3, r0
 80032ae:	461a      	mov	r2, r3
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80032be:	2100      	movs	r1, #0
 80032c0:	20ff      	movs	r0, #255	@ 0xff
 80032c2:	f7ff f8c3 	bl	800244c <i2c_write_addr8_data8>
 80032c6:	4603      	mov	r3, r0
 80032c8:	461a      	mov	r2, r3
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	bf14      	ite	ne
 80032d2:	2301      	movne	r3, #1
 80032d4:	2300      	moveq	r3, #0
 80032d6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x44, 0x00);
 80032d8:	2100      	movs	r1, #0
 80032da:	2044      	movs	r0, #68	@ 0x44
 80032dc:	f7ff f8b6 	bl	800244c <i2c_write_addr8_data8>
 80032e0:	4603      	mov	r3, r0
 80032e2:	461a      	mov	r2, r3
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bf14      	ite	ne
 80032ec:	2301      	movne	r3, #1
 80032ee:	2300      	moveq	r3, #0
 80032f0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x45, 0x20);
 80032f2:	2120      	movs	r1, #32
 80032f4:	2045      	movs	r0, #69	@ 0x45
 80032f6:	f7ff f8a9 	bl	800244c <i2c_write_addr8_data8>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461a      	mov	r2, r3
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	4013      	ands	r3, r2
 8003302:	2b00      	cmp	r3, #0
 8003304:	bf14      	ite	ne
 8003306:	2301      	movne	r3, #1
 8003308:	2300      	moveq	r3, #0
 800330a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x47, 0x08);
 800330c:	2108      	movs	r1, #8
 800330e:	2047      	movs	r0, #71	@ 0x47
 8003310:	f7ff f89c 	bl	800244c <i2c_write_addr8_data8>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	bf14      	ite	ne
 8003320:	2301      	movne	r3, #1
 8003322:	2300      	moveq	r3, #0
 8003324:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x48, 0x28);
 8003326:	2128      	movs	r1, #40	@ 0x28
 8003328:	2048      	movs	r0, #72	@ 0x48
 800332a:	f7ff f88f 	bl	800244c <i2c_write_addr8_data8>
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	bf14      	ite	ne
 800333a:	2301      	movne	r3, #1
 800333c:	2300      	moveq	r3, #0
 800333e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x67, 0x00);
 8003340:	2100      	movs	r1, #0
 8003342:	2067      	movs	r0, #103	@ 0x67
 8003344:	f7ff f882 	bl	800244c <i2c_write_addr8_data8>
 8003348:	4603      	mov	r3, r0
 800334a:	461a      	mov	r2, r3
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf14      	ite	ne
 8003354:	2301      	movne	r3, #1
 8003356:	2300      	moveq	r3, #0
 8003358:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x70, 0x04);
 800335a:	2104      	movs	r1, #4
 800335c:	2070      	movs	r0, #112	@ 0x70
 800335e:	f7ff f875 	bl	800244c <i2c_write_addr8_data8>
 8003362:	4603      	mov	r3, r0
 8003364:	461a      	mov	r2, r3
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	4013      	ands	r3, r2
 800336a:	2b00      	cmp	r3, #0
 800336c:	bf14      	ite	ne
 800336e:	2301      	movne	r3, #1
 8003370:	2300      	moveq	r3, #0
 8003372:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x71, 0x01);
 8003374:	2101      	movs	r1, #1
 8003376:	2071      	movs	r0, #113	@ 0x71
 8003378:	f7ff f868 	bl	800244c <i2c_write_addr8_data8>
 800337c:	4603      	mov	r3, r0
 800337e:	461a      	mov	r2, r3
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf14      	ite	ne
 8003388:	2301      	movne	r3, #1
 800338a:	2300      	moveq	r3, #0
 800338c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x72, 0xFE);
 800338e:	21fe      	movs	r1, #254	@ 0xfe
 8003390:	2072      	movs	r0, #114	@ 0x72
 8003392:	f7ff f85b 	bl	800244c <i2c_write_addr8_data8>
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	bf14      	ite	ne
 80033a2:	2301      	movne	r3, #1
 80033a4:	2300      	moveq	r3, #0
 80033a6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x76, 0x00);
 80033a8:	2100      	movs	r1, #0
 80033aa:	2076      	movs	r0, #118	@ 0x76
 80033ac:	f7ff f84e 	bl	800244c <i2c_write_addr8_data8>
 80033b0:	4603      	mov	r3, r0
 80033b2:	461a      	mov	r2, r3
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bf14      	ite	ne
 80033bc:	2301      	movne	r3, #1
 80033be:	2300      	moveq	r3, #0
 80033c0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x77, 0x00);
 80033c2:	2100      	movs	r1, #0
 80033c4:	2077      	movs	r0, #119	@ 0x77
 80033c6:	f7ff f841 	bl	800244c <i2c_write_addr8_data8>
 80033ca:	4603      	mov	r3, r0
 80033cc:	461a      	mov	r2, r3
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	bf14      	ite	ne
 80033d6:	2301      	movne	r3, #1
 80033d8:	2300      	moveq	r3, #0
 80033da:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 80033dc:	2101      	movs	r1, #1
 80033de:	20ff      	movs	r0, #255	@ 0xff
 80033e0:	f7ff f834 	bl	800244c <i2c_write_addr8_data8>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2300      	moveq	r3, #0
 80033f4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x0D, 0x01);
 80033f6:	2101      	movs	r1, #1
 80033f8:	200d      	movs	r0, #13
 80033fa:	f7ff f827 	bl	800244c <i2c_write_addr8_data8>
 80033fe:	4603      	mov	r3, r0
 8003400:	461a      	mov	r2, r3
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	bf14      	ite	ne
 800340a:	2301      	movne	r3, #1
 800340c:	2300      	moveq	r3, #0
 800340e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003410:	2100      	movs	r1, #0
 8003412:	20ff      	movs	r0, #255	@ 0xff
 8003414:	f7ff f81a 	bl	800244c <i2c_write_addr8_data8>
 8003418:	4603      	mov	r3, r0
 800341a:	461a      	mov	r2, r3
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x01);
 800342a:	2101      	movs	r1, #1
 800342c:	2080      	movs	r0, #128	@ 0x80
 800342e:	f7ff f80d 	bl	800244c <i2c_write_addr8_data8>
 8003432:	4603      	mov	r3, r0
 8003434:	461a      	mov	r2, r3
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	bf14      	ite	ne
 800343e:	2301      	movne	r3, #1
 8003440:	2300      	moveq	r3, #0
 8003442:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x01, 0xF8);
 8003444:	21f8      	movs	r1, #248	@ 0xf8
 8003446:	2001      	movs	r0, #1
 8003448:	f7ff f800 	bl	800244c <i2c_write_addr8_data8>
 800344c:	4603      	mov	r3, r0
 800344e:	461a      	mov	r2, r3
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf14      	ite	ne
 8003458:	2301      	movne	r3, #1
 800345a:	2300      	moveq	r3, #0
 800345c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 800345e:	2101      	movs	r1, #1
 8003460:	20ff      	movs	r0, #255	@ 0xff
 8003462:	f7fe fff3 	bl	800244c <i2c_write_addr8_data8>
 8003466:	4603      	mov	r3, r0
 8003468:	461a      	mov	r2, r3
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	4013      	ands	r3, r2
 800346e:	2b00      	cmp	r3, #0
 8003470:	bf14      	ite	ne
 8003472:	2301      	movne	r3, #1
 8003474:	2300      	moveq	r3, #0
 8003476:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x8E, 0x01);
 8003478:	2101      	movs	r1, #1
 800347a:	208e      	movs	r0, #142	@ 0x8e
 800347c:	f7fe ffe6 	bl	800244c <i2c_write_addr8_data8>
 8003480:	4603      	mov	r3, r0
 8003482:	461a      	mov	r2, r3
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x01);
 8003492:	2101      	movs	r1, #1
 8003494:	2000      	movs	r0, #0
 8003496:	f7fe ffd9 	bl	800244c <i2c_write_addr8_data8>
 800349a:	4603      	mov	r3, r0
 800349c:	461a      	mov	r2, r3
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bf14      	ite	ne
 80034a6:	2301      	movne	r3, #1
 80034a8:	2300      	moveq	r3, #0
 80034aa:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80034ac:	2100      	movs	r1, #0
 80034ae:	20ff      	movs	r0, #255	@ 0xff
 80034b0:	f7fe ffcc 	bl	800244c <i2c_write_addr8_data8>
 80034b4:	4603      	mov	r3, r0
 80034b6:	461a      	mov	r2, r3
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bf14      	ite	ne
 80034c0:	2301      	movne	r3, #1
 80034c2:	2300      	moveq	r3, #0
 80034c4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x00);
 80034c6:	2100      	movs	r1, #0
 80034c8:	2080      	movs	r0, #128	@ 0x80
 80034ca:	f7fe ffbf 	bl	800244c <i2c_write_addr8_data8>
 80034ce:	4603      	mov	r3, r0
 80034d0:	461a      	mov	r2, r3
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bf14      	ite	ne
 80034da:	2301      	movne	r3, #1
 80034dc:	2300      	moveq	r3, #0
 80034de:	71fb      	strb	r3, [r7, #7]
    return success;
 80034e0:	79fb      	ldrb	r3, [r7, #7]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <configure_interrupt>:

static bool configure_interrupt()
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
    /* Interrupt on new sample ready */
    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04)) {
 80034f0:	2104      	movs	r1, #4
 80034f2:	200a      	movs	r0, #10
 80034f4:	f7fe ffaa 	bl	800244c <i2c_write_addr8_data8>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f083 0301 	eor.w	r3, r3, #1
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <configure_interrupt+0x1e>
        return false;
 8003504:	2300      	movs	r3, #0
 8003506:	e02d      	b.n	8003564 <configure_interrupt+0x7a>
    }

    /* Configure active low since the pin is pulled-up on most breakout boards */
    uint8_t gpio_hv_mux_active_high = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	71fb      	strb	r3, [r7, #7]
    if (!i2c_read_addr8_data8(REG_GPIO_HV_MUX_ACTIVE_HIGH, &gpio_hv_mux_active_high)) {
 800350c:	1dfb      	adds	r3, r7, #7
 800350e:	4619      	mov	r1, r3
 8003510:	2084      	movs	r0, #132	@ 0x84
 8003512:	f7fe ff63 	bl	80023dc <i2c_read_addr8_data8>
 8003516:	4603      	mov	r3, r0
 8003518:	f083 0301 	eor.w	r3, r3, #1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <configure_interrupt+0x3c>
        return false;
 8003522:	2300      	movs	r3, #0
 8003524:	e01e      	b.n	8003564 <configure_interrupt+0x7a>
    }
    gpio_hv_mux_active_high &= ~0x10;
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	f023 0310 	bic.w	r3, r3, #16
 800352c:	b2db      	uxtb	r3, r3
 800352e:	71fb      	strb	r3, [r7, #7]
    if (!i2c_write_addr8_data8(REG_GPIO_HV_MUX_ACTIVE_HIGH, gpio_hv_mux_active_high)) {
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	4619      	mov	r1, r3
 8003534:	2084      	movs	r0, #132	@ 0x84
 8003536:	f7fe ff89 	bl	800244c <i2c_write_addr8_data8>
 800353a:	4603      	mov	r3, r0
 800353c:	f083 0301 	eor.w	r3, r3, #1
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <configure_interrupt+0x60>
        return false;
 8003546:	2300      	movs	r3, #0
 8003548:	e00c      	b.n	8003564 <configure_interrupt+0x7a>
    }

    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CLEAR, 0x01)) {
 800354a:	2101      	movs	r1, #1
 800354c:	200b      	movs	r0, #11
 800354e:	f7fe ff7d 	bl	800244c <i2c_write_addr8_data8>
 8003552:	4603      	mov	r3, r0
 8003554:	f083 0301 	eor.w	r3, r3, #1
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <configure_interrupt+0x78>
        return false;
 800355e:	2300      	movs	r3, #0
 8003560:	e000      	b.n	8003564 <configure_interrupt+0x7a>
    }
    return true;
 8003562:	2301      	movs	r3, #1
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <set_sequence_steps_enabled>:

/**
 * Enable (or disable) specific steps in the sequence
 */
static bool set_sequence_steps_enabled(uint8_t sequence_step)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
    return i2c_write_addr8_data8(REG_SYSTEM_SEQUENCE_CONFIG, sequence_step);
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	4619      	mov	r1, r3
 800357a:	2001      	movs	r0, #1
 800357c:	f7fe ff66 	bl	800244c <i2c_write_addr8_data8>
 8003580:	4603      	mov	r3, r0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <static_init>:

/**
 * Basic device initialization
 */
static bool static_init()
{
 800358a:	b580      	push	{r7, lr}
 800358c:	af00      	add	r7, sp, #0
    if (!set_spads_from_nvm()) {
 800358e:	f7ff faaa 	bl	8002ae6 <set_spads_from_nvm>
 8003592:	4603      	mov	r3, r0
 8003594:	f083 0301 	eor.w	r3, r3, #1
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <static_init+0x18>
        return false;
 800359e:	2300      	movs	r3, #0
 80035a0:	e01f      	b.n	80035e2 <static_init+0x58>
    }

    if (!load_default_tuning_settings()) {
 80035a2:	f7ff fb91 	bl	8002cc8 <load_default_tuning_settings>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f083 0301 	eor.w	r3, r3, #1
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <static_init+0x2c>
        return false;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e015      	b.n	80035e2 <static_init+0x58>
    }

    if (!configure_interrupt()) {
 80035b6:	f7ff ff98 	bl	80034ea <configure_interrupt>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f083 0301 	eor.w	r3, r3, #1
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <static_init+0x40>
        return false;
 80035c6:	2300      	movs	r3, #0
 80035c8:	e00b      	b.n	80035e2 <static_init+0x58>
    }

    if (!set_sequence_steps_enabled(RANGE_SEQUENCE_STEP_DSS +
 80035ca:	20e8      	movs	r0, #232	@ 0xe8
 80035cc:	f7ff ffce 	bl	800356c <set_sequence_steps_enabled>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f083 0301 	eor.w	r3, r3, #1
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <static_init+0x56>
                                    RANGE_SEQUENCE_STEP_PRE_RANGE +
                                    RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
        return false;
 80035dc:	2300      	movs	r3, #0
 80035de:	e000      	b.n	80035e2 <static_init+0x58>
    }

    return true;
 80035e0:	2301      	movs	r3, #1
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <perform_single_ref_calibration>:

static bool perform_single_ref_calibration(calibration_type_t calib_type)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	4603      	mov	r3, r0
 80035ee:	71fb      	strb	r3, [r7, #7]
    uint8_t sysrange_start = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	73fb      	strb	r3, [r7, #15]
    uint8_t sequence_config = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	73bb      	strb	r3, [r7, #14]
    switch (calib_type)
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <perform_single_ref_calibration+0x1e>
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d005      	beq.n	800360e <perform_single_ref_calibration+0x28>
 8003602:	e009      	b.n	8003618 <perform_single_ref_calibration+0x32>
    {
    case CALIBRATION_TYPE_VHV:
        sequence_config = 0x01;
 8003604:	2301      	movs	r3, #1
 8003606:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x40;
 8003608:	2341      	movs	r3, #65	@ 0x41
 800360a:	73fb      	strb	r3, [r7, #15]
        break;
 800360c:	e004      	b.n	8003618 <perform_single_ref_calibration+0x32>
    case CALIBRATION_TYPE_PHASE:
        sequence_config = 0x02;
 800360e:	2302      	movs	r3, #2
 8003610:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x00;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
        break;
 8003616:	bf00      	nop
    }
    if (!i2c_write_addr8_data8(REG_SYSTEM_SEQUENCE_CONFIG, sequence_config)) {
 8003618:	7bbb      	ldrb	r3, [r7, #14]
 800361a:	4619      	mov	r1, r3
 800361c:	2001      	movs	r0, #1
 800361e:	f7fe ff15 	bl	800244c <i2c_write_addr8_data8>
 8003622:	4603      	mov	r3, r0
 8003624:	f083 0301 	eor.w	r3, r3, #1
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <perform_single_ref_calibration+0x4c>
        return false;
 800362e:	2300      	movs	r3, #0
 8003630:	e041      	b.n	80036b6 <perform_single_ref_calibration+0xd0>
    }
    if (!i2c_write_addr8_data8(REG_SYSRANGE_START, sysrange_start)) {
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	4619      	mov	r1, r3
 8003636:	2000      	movs	r0, #0
 8003638:	f7fe ff08 	bl	800244c <i2c_write_addr8_data8>
 800363c:	4603      	mov	r3, r0
 800363e:	f083 0301 	eor.w	r3, r3, #1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <perform_single_ref_calibration+0x66>
        return false;
 8003648:	2300      	movs	r3, #0
 800364a:	e034      	b.n	80036b6 <perform_single_ref_calibration+0xd0>
    }
    /* Wait for interrupt */
    uint8_t interrupt_status = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	733b      	strb	r3, [r7, #12]
    bool success = false;
 8003650:	2300      	movs	r3, #0
 8003652:	737b      	strb	r3, [r7, #13]
    do {
        success = i2c_read_addr8_data8(REG_RESULT_INTERRUPT_STATUS, &interrupt_status);
 8003654:	f107 030c 	add.w	r3, r7, #12
 8003658:	4619      	mov	r1, r3
 800365a:	2013      	movs	r0, #19
 800365c:	f7fe febe 	bl	80023dc <i2c_read_addr8_data8>
 8003660:	4603      	mov	r3, r0
 8003662:	737b      	strb	r3, [r7, #13]
    } while (success && ((interrupt_status & 0x07) == 0));
 8003664:	7b7b      	ldrb	r3, [r7, #13]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d004      	beq.n	8003674 <perform_single_ref_calibration+0x8e>
 800366a:	7b3b      	ldrb	r3, [r7, #12]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ef      	beq.n	8003654 <perform_single_ref_calibration+0x6e>
    if (!success) {
 8003674:	7b7b      	ldrb	r3, [r7, #13]
 8003676:	f083 0301 	eor.w	r3, r3, #1
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <perform_single_ref_calibration+0x9e>
        return false;
 8003680:	2300      	movs	r3, #0
 8003682:	e018      	b.n	80036b6 <perform_single_ref_calibration+0xd0>
    }
    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CLEAR, 0x01)) {
 8003684:	2101      	movs	r1, #1
 8003686:	200b      	movs	r0, #11
 8003688:	f7fe fee0 	bl	800244c <i2c_write_addr8_data8>
 800368c:	4603      	mov	r3, r0
 800368e:	f083 0301 	eor.w	r3, r3, #1
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <perform_single_ref_calibration+0xb6>
        return false;
 8003698:	2300      	movs	r3, #0
 800369a:	e00c      	b.n	80036b6 <perform_single_ref_calibration+0xd0>
    }

    if (!i2c_write_addr8_data8(REG_SYSRANGE_START, 0x00)) {
 800369c:	2100      	movs	r1, #0
 800369e:	2000      	movs	r0, #0
 80036a0:	f7fe fed4 	bl	800244c <i2c_write_addr8_data8>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f083 0301 	eor.w	r3, r3, #1
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <perform_single_ref_calibration+0xce>
        return false;
 80036b0:	2300      	movs	r3, #0
 80036b2:	e000      	b.n	80036b6 <perform_single_ref_calibration+0xd0>
    }
    return true;
 80036b4:	2301      	movs	r3, #1
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <perform_ref_calibration>:
/**
 * Temperature calibration needs to be run again if the temperature changes by
 * more than 8 degrees according to the datasheet.
 */
static bool perform_ref_calibration()
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	af00      	add	r7, sp, #0
    if (!perform_single_ref_calibration(CALIBRATION_TYPE_VHV)) {
 80036c2:	2000      	movs	r0, #0
 80036c4:	f7ff ff8f 	bl	80035e6 <perform_single_ref_calibration>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f083 0301 	eor.w	r3, r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <perform_ref_calibration+0x1a>
        return false;
 80036d4:	2300      	movs	r3, #0
 80036d6:	e016      	b.n	8003706 <perform_ref_calibration+0x48>
    }
    if (!perform_single_ref_calibration(CALIBRATION_TYPE_PHASE)) {
 80036d8:	2001      	movs	r0, #1
 80036da:	f7ff ff84 	bl	80035e6 <perform_single_ref_calibration>
 80036de:	4603      	mov	r3, r0
 80036e0:	f083 0301 	eor.w	r3, r3, #1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <perform_ref_calibration+0x30>
        return false;
 80036ea:	2300      	movs	r3, #0
 80036ec:	e00b      	b.n	8003706 <perform_ref_calibration+0x48>
    }
    /* Restore sequence steps enabled */
    if (!set_sequence_steps_enabled(RANGE_SEQUENCE_STEP_DSS +
 80036ee:	20e8      	movs	r0, #232	@ 0xe8
 80036f0:	f7ff ff3c 	bl	800356c <set_sequence_steps_enabled>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f083 0301 	eor.w	r3, r3, #1
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <perform_ref_calibration+0x46>
                                    RANGE_SEQUENCE_STEP_PRE_RANGE +
                                    RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
        return false;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <perform_ref_calibration+0x48>
    }
    return true;
 8003704:	2301      	movs	r3, #1
}
 8003706:	4618      	mov	r0, r3
 8003708:	bd80      	pop	{r7, pc}

0800370a <configure_gpio>:
 * hardware standby after this function is called.
 *
 * NOTE: The pins are hard-coded to P1.0, P1.1, and P1.2.
 **/
static void configure_gpio()
{
 800370a:	b480      	push	{r7}
 800370c:	af00      	add	r7, sp, #0

}
 800370e:	bf00      	nop
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <init_address>:

/* Sets the address of a single VL53L0X sensor.
 * This functions assumes that all non-configured VL53L0X are still
 * in hardware standby. */
static bool init_address(vl53l0x_idx_t idx)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	71fb      	strb	r3, [r7, #7]
    //set_hardware_standby(idx, false);
    selectTCAChannel(vl53l0x_infos[idx].mux_channel);
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	4a0c      	ldr	r2, [pc, #48]	@ (8003758 <init_address+0x40>)
 8003726:	5cd3      	ldrb	r3, [r2, r3]
 8003728:	4618      	mov	r0, r3
 800372a:	f7fe fd2f 	bl	800218c <selectTCAChannel>
    /* The datasheet doesn't say how long we must wait to leave hw standby,
     * but using the same delay as vl6180x seems to work fine. */
    HAL_Delay(1);
 800372e:	2001      	movs	r0, #1
 8003730:	f000 f934 	bl	800399c <HAL_Delay>

    if (!device_is_booted()) {
 8003734:	f7fe ff92 	bl	800265c <device_is_booted>
 8003738:	4603      	mov	r3, r0
 800373a:	f083 0301 	eor.w	r3, r3, #1
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d004      	beq.n	800374e <init_address+0x36>
        my_printf("device is not booted\n");
 8003744:	4805      	ldr	r0, [pc, #20]	@ (800375c <init_address+0x44>)
 8003746:	f7fe fe21 	bl	800238c <my_printf>
        return false;
 800374a:	2300      	movs	r3, #0
 800374c:	e000      	b.n	8003750 <init_address+0x38>
    }

    return true;
 800374e:	2301      	movs	r3, #1
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	0800fe64 	.word	0x0800fe64
 800375c:	0800fda0 	.word	0x0800fda0

08003760 <init_addresses>:
/**
 * Initializes the sensors by putting them in hw standby and then
 * waking them up one-by-one as described in AN4846.
 */
static bool init_addresses()
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
    /* Puts all sensors in hardware standby */
    configure_gpio();
 8003764:	f7ff ffd1 	bl	800370a <configure_gpio>

    /* Wake each sensor up one by one and set a unique address for each one */
    if (!init_address(VL53L0X_IDX_FIRST)) {
 8003768:	2000      	movs	r0, #0
 800376a:	f7ff ffd5 	bl	8003718 <init_address>
 800376e:	4603      	mov	r3, r0
 8003770:	f083 0301 	eor.w	r3, r3, #1
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <init_addresses+0x24>
        my_printf("fail init address first sensor\r\n");
 800377a:	4809      	ldr	r0, [pc, #36]	@ (80037a0 <init_addresses+0x40>)
 800377c:	f7fe fe06 	bl	800238c <my_printf>
        return false;
 8003780:	2300      	movs	r3, #0
 8003782:	e00b      	b.n	800379c <init_addresses+0x3c>
    }
    if (!init_address(VL53L0X_IDX_SECOND)) {
 8003784:	2001      	movs	r0, #1
 8003786:	f7ff ffc7 	bl	8003718 <init_address>
 800378a:	4603      	mov	r3, r0
 800378c:	f083 0301 	eor.w	r3, r3, #1
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <init_addresses+0x3a>
        return false;
 8003796:	2300      	movs	r3, #0
 8003798:	e000      	b.n	800379c <init_addresses+0x3c>
    }
    return true;
 800379a:	2301      	movs	r3, #1
}
 800379c:	4618      	mov	r0, r3
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	0800fdb8 	.word	0x0800fdb8

080037a4 <init_config>:

static bool init_config(vl53l0x_idx_t idx)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
    //i2c_set_slave_address(vl53l0x_infos[idx].addr);
	selectTCAChannel(vl53l0x_infos[idx].mux_channel);
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	4a13      	ldr	r2, [pc, #76]	@ (8003800 <init_config+0x5c>)
 80037b2:	5cd3      	ldrb	r3, [r2, r3]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe fce9 	bl	800218c <selectTCAChannel>

    if (!data_init()) {
 80037ba:	f7fe ff7f 	bl	80026bc <data_init>
 80037be:	4603      	mov	r3, r0
 80037c0:	f083 0301 	eor.w	r3, r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <init_config+0x2a>
        return false;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e014      	b.n	80037f8 <init_config+0x54>
    }
    if (!static_init()) {
 80037ce:	f7ff fedc 	bl	800358a <static_init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f083 0301 	eor.w	r3, r3, #1
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <init_config+0x3e>
        return false;
 80037de:	2300      	movs	r3, #0
 80037e0:	e00a      	b.n	80037f8 <init_config+0x54>
    }
    if (!perform_ref_calibration()) {
 80037e2:	f7ff ff6c 	bl	80036be <perform_ref_calibration>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f083 0301 	eor.w	r3, r3, #1
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <init_config+0x52>
        return false;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e000      	b.n	80037f8 <init_config+0x54>
    }
    return true;
 80037f6:	2301      	movs	r3, #1
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	0800fe64 	.word	0x0800fe64

08003804 <vl53l0x_init>:

bool vl53l0x_init()
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
    if (!init_addresses()) {
 8003808:	f7ff ffaa 	bl	8003760 <init_addresses>
 800380c:	4603      	mov	r3, r0
 800380e:	f083 0301 	eor.w	r3, r3, #1
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d004      	beq.n	8003822 <vl53l0x_init+0x1e>
        my_printf("fail init address\r\n");
 8003818:	4810      	ldr	r0, [pc, #64]	@ (800385c <vl53l0x_init+0x58>)
 800381a:	f7fe fdb7 	bl	800238c <my_printf>
        return false;
 800381e:	2300      	movs	r3, #0
 8003820:	e019      	b.n	8003856 <vl53l0x_init+0x52>
    }
    if (!init_config(VL53L0X_IDX_FIRST)) {
 8003822:	2000      	movs	r0, #0
 8003824:	f7ff ffbe 	bl	80037a4 <init_config>
 8003828:	4603      	mov	r3, r0
 800382a:	f083 0301 	eor.w	r3, r3, #1
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d004      	beq.n	800383e <vl53l0x_init+0x3a>
        my_printf("fail init first\r\n");
 8003834:	480a      	ldr	r0, [pc, #40]	@ (8003860 <vl53l0x_init+0x5c>)
 8003836:	f7fe fda9 	bl	800238c <my_printf>
        return false;
 800383a:	2300      	movs	r3, #0
 800383c:	e00b      	b.n	8003856 <vl53l0x_init+0x52>
    }
    if (!init_config(VL53L0X_IDX_SECOND)) {
 800383e:	2001      	movs	r0, #1
 8003840:	f7ff ffb0 	bl	80037a4 <init_config>
 8003844:	4603      	mov	r3, r0
 8003846:	f083 0301 	eor.w	r3, r3, #1
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <vl53l0x_init+0x50>
        return false;
 8003850:	2300      	movs	r3, #0
 8003852:	e000      	b.n	8003856 <vl53l0x_init+0x52>
    }
    return true;
 8003854:	2301      	movs	r3, #1
}
 8003856:	4618      	mov	r0, r3
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	0800fddc 	.word	0x0800fddc
 8003860:	0800fdf0 	.word	0x0800fdf0

08003864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003864:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800389c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003868:	f7fe fc7e 	bl	8002168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800386c:	480c      	ldr	r0, [pc, #48]	@ (80038a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800386e:	490d      	ldr	r1, [pc, #52]	@ (80038a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003870:	4a0d      	ldr	r2, [pc, #52]	@ (80038a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003874:	e002      	b.n	800387c <LoopCopyDataInit>

08003876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800387a:	3304      	adds	r3, #4

0800387c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800387c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800387e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003880:	d3f9      	bcc.n	8003876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003882:	4a0a      	ldr	r2, [pc, #40]	@ (80038ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003884:	4c0a      	ldr	r4, [pc, #40]	@ (80038b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003888:	e001      	b.n	800388e <LoopFillZerobss>

0800388a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800388a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800388c:	3204      	adds	r2, #4

0800388e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800388e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003890:	d3fb      	bcc.n	800388a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003892:	f00a f8e9 	bl	800da68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003896:	f7fd fb4d 	bl	8000f34 <main>
  bx  lr    
 800389a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800389c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80038a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038a4:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 80038a8:	080101ec 	.word	0x080101ec
  ldr r2, =_sbss
 80038ac:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 80038b0:	20002244 	.word	0x20002244

080038b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038b4:	e7fe      	b.n	80038b4 <ADC_IRQHandler>
	...

080038b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038bc:	4b0e      	ldr	r3, [pc, #56]	@ (80038f8 <HAL_Init+0x40>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0d      	ldr	r2, [pc, #52]	@ (80038f8 <HAL_Init+0x40>)
 80038c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038c8:	4b0b      	ldr	r3, [pc, #44]	@ (80038f8 <HAL_Init+0x40>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a0a      	ldr	r2, [pc, #40]	@ (80038f8 <HAL_Init+0x40>)
 80038ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038d4:	4b08      	ldr	r3, [pc, #32]	@ (80038f8 <HAL_Init+0x40>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a07      	ldr	r2, [pc, #28]	@ (80038f8 <HAL_Init+0x40>)
 80038da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038e0:	2003      	movs	r0, #3
 80038e2:	f000 f94f 	bl	8003b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038e6:	200f      	movs	r0, #15
 80038e8:	f000 f808 	bl	80038fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038ec:	f7fe f92a 	bl	8001b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40023c00 	.word	0x40023c00

080038fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003904:	4b12      	ldr	r3, [pc, #72]	@ (8003950 <HAL_InitTick+0x54>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b12      	ldr	r3, [pc, #72]	@ (8003954 <HAL_InitTick+0x58>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	4619      	mov	r1, r3
 800390e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003912:	fbb3 f3f1 	udiv	r3, r3, r1
 8003916:	fbb2 f3f3 	udiv	r3, r2, r3
 800391a:	4618      	mov	r0, r3
 800391c:	f000 f967 	bl	8003bee <HAL_SYSTICK_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e00e      	b.n	8003948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b0f      	cmp	r3, #15
 800392e:	d80a      	bhi.n	8003946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003930:	2200      	movs	r2, #0
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003938:	f000 f92f 	bl	8003b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800393c:	4a06      	ldr	r2, [pc, #24]	@ (8003958 <HAL_InitTick+0x5c>)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e000      	b.n	8003948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
}
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	20000000 	.word	0x20000000
 8003954:	20000008 	.word	0x20000008
 8003958:	20000004 	.word	0x20000004

0800395c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003960:	4b06      	ldr	r3, [pc, #24]	@ (800397c <HAL_IncTick+0x20>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	4b06      	ldr	r3, [pc, #24]	@ (8003980 <HAL_IncTick+0x24>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4413      	add	r3, r2
 800396c:	4a04      	ldr	r2, [pc, #16]	@ (8003980 <HAL_IncTick+0x24>)
 800396e:	6013      	str	r3, [r2, #0]
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000008 	.word	0x20000008
 8003980:	20000510 	.word	0x20000510

08003984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return uwTick;
 8003988:	4b03      	ldr	r3, [pc, #12]	@ (8003998 <HAL_GetTick+0x14>)
 800398a:	681b      	ldr	r3, [r3, #0]
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000510 	.word	0x20000510

0800399c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039a4:	f7ff ffee 	bl	8003984 <HAL_GetTick>
 80039a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039b4:	d005      	beq.n	80039c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039b6:	4b0a      	ldr	r3, [pc, #40]	@ (80039e0 <HAL_Delay+0x44>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4413      	add	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039c2:	bf00      	nop
 80039c4:	f7ff ffde 	bl	8003984 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d8f7      	bhi.n	80039c4 <HAL_Delay+0x28>
  {
  }
}
 80039d4:	bf00      	nop
 80039d6:	bf00      	nop
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000008 	.word	0x20000008

080039e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a28 <__NVIC_SetPriorityGrouping+0x44>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a00:	4013      	ands	r3, r2
 8003a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a16:	4a04      	ldr	r2, [pc, #16]	@ (8003a28 <__NVIC_SetPriorityGrouping+0x44>)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	60d3      	str	r3, [r2, #12]
}
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	e000ed00 	.word	0xe000ed00

08003a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a30:	4b04      	ldr	r3, [pc, #16]	@ (8003a44 <__NVIC_GetPriorityGrouping+0x18>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	0a1b      	lsrs	r3, r3, #8
 8003a36:	f003 0307 	and.w	r3, r3, #7
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	db0b      	blt.n	8003a72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	f003 021f 	and.w	r2, r3, #31
 8003a60:	4907      	ldr	r1, [pc, #28]	@ (8003a80 <__NVIC_EnableIRQ+0x38>)
 8003a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	2001      	movs	r0, #1
 8003a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	e000e100 	.word	0xe000e100

08003a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	6039      	str	r1, [r7, #0]
 8003a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	db0a      	blt.n	8003aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	490c      	ldr	r1, [pc, #48]	@ (8003ad0 <__NVIC_SetPriority+0x4c>)
 8003a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa2:	0112      	lsls	r2, r2, #4
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aac:	e00a      	b.n	8003ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	4908      	ldr	r1, [pc, #32]	@ (8003ad4 <__NVIC_SetPriority+0x50>)
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	3b04      	subs	r3, #4
 8003abc:	0112      	lsls	r2, r2, #4
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	761a      	strb	r2, [r3, #24]
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	e000e100 	.word	0xe000e100
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b089      	sub	sp, #36	@ 0x24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f1c3 0307 	rsb	r3, r3, #7
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	bf28      	it	cs
 8003af6:	2304      	movcs	r3, #4
 8003af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	3304      	adds	r3, #4
 8003afe:	2b06      	cmp	r3, #6
 8003b00:	d902      	bls.n	8003b08 <NVIC_EncodePriority+0x30>
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	3b03      	subs	r3, #3
 8003b06:	e000      	b.n	8003b0a <NVIC_EncodePriority+0x32>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43da      	mvns	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2a:	43d9      	mvns	r1, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b30:	4313      	orrs	r3, r2
         );
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3724      	adds	r7, #36	@ 0x24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b50:	d301      	bcc.n	8003b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b52:	2301      	movs	r3, #1
 8003b54:	e00f      	b.n	8003b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b56:	4a0a      	ldr	r2, [pc, #40]	@ (8003b80 <SysTick_Config+0x40>)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b5e:	210f      	movs	r1, #15
 8003b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b64:	f7ff ff8e 	bl	8003a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b68:	4b05      	ldr	r3, [pc, #20]	@ (8003b80 <SysTick_Config+0x40>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b6e:	4b04      	ldr	r3, [pc, #16]	@ (8003b80 <SysTick_Config+0x40>)
 8003b70:	2207      	movs	r2, #7
 8003b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	e000e010 	.word	0xe000e010

08003b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ff29 	bl	80039e4 <__NVIC_SetPriorityGrouping>
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b086      	sub	sp, #24
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bac:	f7ff ff3e 	bl	8003a2c <__NVIC_GetPriorityGrouping>
 8003bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	6978      	ldr	r0, [r7, #20]
 8003bb8:	f7ff ff8e 	bl	8003ad8 <NVIC_EncodePriority>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff ff5d 	bl	8003a84 <__NVIC_SetPriority>
}
 8003bca:	bf00      	nop
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	4603      	mov	r3, r0
 8003bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff ff31 	bl	8003a48 <__NVIC_EnableIRQ>
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7ff ffa2 	bl	8003b40 <SysTick_Config>
 8003bfc:	4603      	mov	r3, r0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b089      	sub	sp, #36	@ 0x24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	e159      	b.n	8003ed8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c24:	2201      	movs	r2, #1
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4013      	ands	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	f040 8148 	bne.w	8003ed2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d005      	beq.n	8003c5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d130      	bne.n	8003cbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	2203      	movs	r2, #3
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c90:	2201      	movs	r2, #1
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	091b      	lsrs	r3, r3, #4
 8003ca6:	f003 0201 	and.w	r2, r3, #1
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d017      	beq.n	8003cf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	2203      	movs	r2, #3
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d123      	bne.n	8003d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	08da      	lsrs	r2, r3, #3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3208      	adds	r2, #8
 8003d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	220f      	movs	r2, #15
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	08da      	lsrs	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3208      	adds	r2, #8
 8003d46:	69b9      	ldr	r1, [r7, #24]
 8003d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	2203      	movs	r2, #3
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 0203 	and.w	r2, r3, #3
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80a2 	beq.w	8003ed2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	4b57      	ldr	r3, [pc, #348]	@ (8003ef0 <HAL_GPIO_Init+0x2e8>)
 8003d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d96:	4a56      	ldr	r2, [pc, #344]	@ (8003ef0 <HAL_GPIO_Init+0x2e8>)
 8003d98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d9e:	4b54      	ldr	r3, [pc, #336]	@ (8003ef0 <HAL_GPIO_Init+0x2e8>)
 8003da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003daa:	4a52      	ldr	r2, [pc, #328]	@ (8003ef4 <HAL_GPIO_Init+0x2ec>)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	089b      	lsrs	r3, r3, #2
 8003db0:	3302      	adds	r3, #2
 8003db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	220f      	movs	r2, #15
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a49      	ldr	r2, [pc, #292]	@ (8003ef8 <HAL_GPIO_Init+0x2f0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d019      	beq.n	8003e0a <HAL_GPIO_Init+0x202>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a48      	ldr	r2, [pc, #288]	@ (8003efc <HAL_GPIO_Init+0x2f4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <HAL_GPIO_Init+0x1fe>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a47      	ldr	r2, [pc, #284]	@ (8003f00 <HAL_GPIO_Init+0x2f8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00d      	beq.n	8003e02 <HAL_GPIO_Init+0x1fa>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a46      	ldr	r2, [pc, #280]	@ (8003f04 <HAL_GPIO_Init+0x2fc>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d007      	beq.n	8003dfe <HAL_GPIO_Init+0x1f6>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a45      	ldr	r2, [pc, #276]	@ (8003f08 <HAL_GPIO_Init+0x300>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d101      	bne.n	8003dfa <HAL_GPIO_Init+0x1f2>
 8003df6:	2304      	movs	r3, #4
 8003df8:	e008      	b.n	8003e0c <HAL_GPIO_Init+0x204>
 8003dfa:	2307      	movs	r3, #7
 8003dfc:	e006      	b.n	8003e0c <HAL_GPIO_Init+0x204>
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e004      	b.n	8003e0c <HAL_GPIO_Init+0x204>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e002      	b.n	8003e0c <HAL_GPIO_Init+0x204>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_GPIO_Init+0x204>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	f002 0203 	and.w	r2, r2, #3
 8003e12:	0092      	lsls	r2, r2, #2
 8003e14:	4093      	lsls	r3, r2
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e1c:	4935      	ldr	r1, [pc, #212]	@ (8003ef4 <HAL_GPIO_Init+0x2ec>)
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	089b      	lsrs	r3, r3, #2
 8003e22:	3302      	adds	r3, #2
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e2a:	4b38      	ldr	r3, [pc, #224]	@ (8003f0c <HAL_GPIO_Init+0x304>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e4e:	4a2f      	ldr	r2, [pc, #188]	@ (8003f0c <HAL_GPIO_Init+0x304>)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e54:	4b2d      	ldr	r3, [pc, #180]	@ (8003f0c <HAL_GPIO_Init+0x304>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4013      	ands	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e78:	4a24      	ldr	r2, [pc, #144]	@ (8003f0c <HAL_GPIO_Init+0x304>)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e7e:	4b23      	ldr	r3, [pc, #140]	@ (8003f0c <HAL_GPIO_Init+0x304>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ea2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f0c <HAL_GPIO_Init+0x304>)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ea8:	4b18      	ldr	r3, [pc, #96]	@ (8003f0c <HAL_GPIO_Init+0x304>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ecc:	4a0f      	ldr	r2, [pc, #60]	@ (8003f0c <HAL_GPIO_Init+0x304>)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	2b0f      	cmp	r3, #15
 8003edc:	f67f aea2 	bls.w	8003c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	3724      	adds	r7, #36	@ 0x24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40013800 	.word	0x40013800
 8003ef8:	40020000 	.word	0x40020000
 8003efc:	40020400 	.word	0x40020400
 8003f00:	40020800 	.word	0x40020800
 8003f04:	40020c00 	.word	0x40020c00
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40013c00 	.word	0x40013c00

08003f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	807b      	strh	r3, [r7, #2]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f20:	787b      	ldrb	r3, [r7, #1]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f26:	887a      	ldrh	r2, [r7, #2]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f2c:	e003      	b.n	8003f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f2e:	887b      	ldrh	r3, [r7, #2]
 8003f30:	041a      	lsls	r2, r3, #16
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	619a      	str	r2, [r3, #24]
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e12b      	b.n	80041ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fd fe12 	bl	8001b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	@ 0x24
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0201 	bic.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fa8:	f002 fe48 	bl	8006c3c <HAL_RCC_GetPCLK1Freq>
 8003fac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4a81      	ldr	r2, [pc, #516]	@ (80041b8 <HAL_I2C_Init+0x274>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d807      	bhi.n	8003fc8 <HAL_I2C_Init+0x84>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4a80      	ldr	r2, [pc, #512]	@ (80041bc <HAL_I2C_Init+0x278>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	bf94      	ite	ls
 8003fc0:	2301      	movls	r3, #1
 8003fc2:	2300      	movhi	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	e006      	b.n	8003fd6 <HAL_I2C_Init+0x92>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4a7d      	ldr	r2, [pc, #500]	@ (80041c0 <HAL_I2C_Init+0x27c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	bf94      	ite	ls
 8003fd0:	2301      	movls	r3, #1
 8003fd2:	2300      	movhi	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e0e7      	b.n	80041ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4a78      	ldr	r2, [pc, #480]	@ (80041c4 <HAL_I2C_Init+0x280>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	0c9b      	lsrs	r3, r3, #18
 8003fe8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	4a6a      	ldr	r2, [pc, #424]	@ (80041b8 <HAL_I2C_Init+0x274>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d802      	bhi.n	8004018 <HAL_I2C_Init+0xd4>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3301      	adds	r3, #1
 8004016:	e009      	b.n	800402c <HAL_I2C_Init+0xe8>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	4a69      	ldr	r2, [pc, #420]	@ (80041c8 <HAL_I2C_Init+0x284>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	099b      	lsrs	r3, r3, #6
 800402a:	3301      	adds	r3, #1
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	430b      	orrs	r3, r1
 8004032:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800403e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	495c      	ldr	r1, [pc, #368]	@ (80041b8 <HAL_I2C_Init+0x274>)
 8004048:	428b      	cmp	r3, r1
 800404a:	d819      	bhi.n	8004080 <HAL_I2C_Init+0x13c>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1e59      	subs	r1, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	fbb1 f3f3 	udiv	r3, r1, r3
 800405a:	1c59      	adds	r1, r3, #1
 800405c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004060:	400b      	ands	r3, r1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_I2C_Init+0x138>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1e59      	subs	r1, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	fbb1 f3f3 	udiv	r3, r1, r3
 8004074:	3301      	adds	r3, #1
 8004076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407a:	e051      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 800407c:	2304      	movs	r3, #4
 800407e:	e04f      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d111      	bne.n	80040ac <HAL_I2C_Init+0x168>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1e58      	subs	r0, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6859      	ldr	r1, [r3, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	440b      	add	r3, r1
 8004096:	fbb0 f3f3 	udiv	r3, r0, r3
 800409a:	3301      	adds	r3, #1
 800409c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e012      	b.n	80040d2 <HAL_I2C_Init+0x18e>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1e58      	subs	r0, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6859      	ldr	r1, [r3, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	0099      	lsls	r1, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	fbb0 f3f3 	udiv	r3, r0, r3
 80040c2:	3301      	adds	r3, #1
 80040c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf0c      	ite	eq
 80040cc:	2301      	moveq	r3, #1
 80040ce:	2300      	movne	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_I2C_Init+0x196>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e022      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10e      	bne.n	8004100 <HAL_I2C_Init+0x1bc>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1e58      	subs	r0, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	440b      	add	r3, r1
 80040f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80040f4:	3301      	adds	r3, #1
 80040f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040fe:	e00f      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1e58      	subs	r0, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	0099      	lsls	r1, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	fbb0 f3f3 	udiv	r3, r0, r3
 8004116:	3301      	adds	r3, #1
 8004118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	6809      	ldr	r1, [r1, #0]
 8004124:	4313      	orrs	r3, r2
 8004126:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69da      	ldr	r2, [r3, #28]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800414e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6911      	ldr	r1, [r2, #16]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68d2      	ldr	r2, [r2, #12]
 800415a:	4311      	orrs	r1, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	430b      	orrs	r3, r1
 8004162:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	000186a0 	.word	0x000186a0
 80041bc:	001e847f 	.word	0x001e847f
 80041c0:	003d08ff 	.word	0x003d08ff
 80041c4:	431bde83 	.word	0x431bde83
 80041c8:	10624dd3 	.word	0x10624dd3

080041cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	607a      	str	r2, [r7, #4]
 80041d6:	461a      	mov	r2, r3
 80041d8:	460b      	mov	r3, r1
 80041da:	817b      	strh	r3, [r7, #10]
 80041dc:	4613      	mov	r3, r2
 80041de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041e0:	f7ff fbd0 	bl	8003984 <HAL_GetTick>
 80041e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	f040 80e0 	bne.w	80043b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2319      	movs	r3, #25
 80041fa:	2201      	movs	r2, #1
 80041fc:	4970      	ldr	r1, [pc, #448]	@ (80043c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fc64 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800420a:	2302      	movs	r3, #2
 800420c:	e0d3      	b.n	80043b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_I2C_Master_Transmit+0x50>
 8004218:	2302      	movs	r3, #2
 800421a:	e0cc      	b.n	80043b6 <HAL_I2C_Master_Transmit+0x1ea>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b01      	cmp	r3, #1
 8004230:	d007      	beq.n	8004242 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004250:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2221      	movs	r2, #33	@ 0x21
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2210      	movs	r2, #16
 800425e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	893a      	ldrh	r2, [r7, #8]
 8004272:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4a50      	ldr	r2, [pc, #320]	@ (80043c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004282:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004284:	8979      	ldrh	r1, [r7, #10]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	6a3a      	ldr	r2, [r7, #32]
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 face 	bl	800482c <I2C_MasterRequestWrite>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e08d      	b.n	80043b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429a:	2300      	movs	r3, #0
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80042b0:	e066      	b.n	8004380 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	6a39      	ldr	r1, [r7, #32]
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 fd22 	bl	8004d00 <I2C_WaitOnTXEFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00d      	beq.n	80042de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d107      	bne.n	80042da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e06b      	b.n	80043b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	781a      	ldrb	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b04      	cmp	r3, #4
 800431a:	d11b      	bne.n	8004354 <HAL_I2C_Master_Transmit+0x188>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004320:	2b00      	cmp	r3, #0
 8004322:	d017      	beq.n	8004354 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004328:	781a      	ldrb	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	6a39      	ldr	r1, [r7, #32]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fd19 	bl	8004d90 <I2C_WaitOnBTFFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00d      	beq.n	8004380 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	2b04      	cmp	r3, #4
 800436a:	d107      	bne.n	800437c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800437a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e01a      	b.n	80043b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004384:	2b00      	cmp	r3, #0
 8004386:	d194      	bne.n	80042b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043b0:	2300      	movs	r3, #0
 80043b2:	e000      	b.n	80043b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80043b4:	2302      	movs	r3, #2
  }
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	00100002 	.word	0x00100002
 80043c4:	ffff0000 	.word	0xffff0000

080043c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08c      	sub	sp, #48	@ 0x30
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	607a      	str	r2, [r7, #4]
 80043d2:	461a      	mov	r2, r3
 80043d4:	460b      	mov	r3, r1
 80043d6:	817b      	strh	r3, [r7, #10]
 80043d8:	4613      	mov	r3, r2
 80043da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043dc:	f7ff fad2 	bl	8003984 <HAL_GetTick>
 80043e0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	f040 8217 	bne.w	800481e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	2319      	movs	r3, #25
 80043f6:	2201      	movs	r2, #1
 80043f8:	497c      	ldr	r1, [pc, #496]	@ (80045ec <HAL_I2C_Master_Receive+0x224>)
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fb66 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004406:	2302      	movs	r3, #2
 8004408:	e20a      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_I2C_Master_Receive+0x50>
 8004414:	2302      	movs	r3, #2
 8004416:	e203      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b01      	cmp	r3, #1
 800442c:	d007      	beq.n	800443e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0201 	orr.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800444c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2222      	movs	r2, #34	@ 0x22
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2210      	movs	r2, #16
 800445a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	893a      	ldrh	r2, [r7, #8]
 800446e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4a5c      	ldr	r2, [pc, #368]	@ (80045f0 <HAL_I2C_Master_Receive+0x228>)
 800447e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004480:	8979      	ldrh	r1, [r7, #10]
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fa52 	bl	8004930 <I2C_MasterRequestRead>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e1c4      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449a:	2b00      	cmp	r3, #0
 800449c:	d113      	bne.n	80044c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449e:	2300      	movs	r3, #0
 80044a0:	623b      	str	r3, [r7, #32]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	623b      	str	r3, [r7, #32]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	623b      	str	r3, [r7, #32]
 80044b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e198      	b.n	80047f8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d11b      	bne.n	8004506 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e178      	b.n	80047f8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450a:	2b02      	cmp	r3, #2
 800450c:	d11b      	bne.n	8004546 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800451c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800452c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452e:	2300      	movs	r3, #0
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	e158      	b.n	80047f8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004554:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800456c:	e144      	b.n	80047f8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004572:	2b03      	cmp	r3, #3
 8004574:	f200 80f1 	bhi.w	800475a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457c:	2b01      	cmp	r3, #1
 800457e:	d123      	bne.n	80045c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004582:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fc4b 	bl	8004e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e145      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045c6:	e117      	b.n	80047f8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d14e      	bne.n	800466e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d6:	2200      	movs	r2, #0
 80045d8:	4906      	ldr	r1, [pc, #24]	@ (80045f4 <HAL_I2C_Master_Receive+0x22c>)
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fa76 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e11a      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
 80045ea:	bf00      	nop
 80045ec:	00100002 	.word	0x00100002
 80045f0:	ffff0000 	.word	0xffff0000
 80045f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004606:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800466c:	e0c4      	b.n	80047f8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004674:	2200      	movs	r2, #0
 8004676:	496c      	ldr	r1, [pc, #432]	@ (8004828 <HAL_I2C_Master_Receive+0x460>)
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fa27 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0cb      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004696:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d0:	2200      	movs	r2, #0
 80046d2:	4955      	ldr	r1, [pc, #340]	@ (8004828 <HAL_I2C_Master_Receive+0x460>)
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f9f9 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e09d      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004742:	3b01      	subs	r3, #1
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004758:	e04e      	b.n	80047f8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800475a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800475c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 fb5e 	bl	8004e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e058      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d124      	bne.n	80047f8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d107      	bne.n	80047c6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f47f aeb6 	bne.w	800456e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	e000      	b.n	8004820 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800481e:	2302      	movs	r3, #2
  }
}
 8004820:	4618      	mov	r0, r3
 8004822:	3728      	adds	r7, #40	@ 0x28
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	00010004 	.word	0x00010004

0800482c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af02      	add	r7, sp, #8
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	460b      	mov	r3, r1
 800483a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b08      	cmp	r3, #8
 8004846:	d006      	beq.n	8004856 <I2C_MasterRequestWrite+0x2a>
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d003      	beq.n	8004856 <I2C_MasterRequestWrite+0x2a>
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004854:	d108      	bne.n	8004868 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	e00b      	b.n	8004880 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800486c:	2b12      	cmp	r3, #18
 800486e:	d107      	bne.n	8004880 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800487e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f91d 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00d      	beq.n	80048b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048a6:	d103      	bne.n	80048b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e035      	b.n	8004920 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048bc:	d108      	bne.n	80048d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048be:	897b      	ldrh	r3, [r7, #10]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048cc:	611a      	str	r2, [r3, #16]
 80048ce:	e01b      	b.n	8004908 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048d0:	897b      	ldrh	r3, [r7, #10]
 80048d2:	11db      	asrs	r3, r3, #7
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	f003 0306 	and.w	r3, r3, #6
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	f063 030f 	orn	r3, r3, #15
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	490e      	ldr	r1, [pc, #56]	@ (8004928 <I2C_MasterRequestWrite+0xfc>)
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f966 	bl	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e010      	b.n	8004920 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048fe:	897b      	ldrh	r3, [r7, #10]
 8004900:	b2da      	uxtb	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	4907      	ldr	r1, [pc, #28]	@ (800492c <I2C_MasterRequestWrite+0x100>)
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 f956 	bl	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	00010008 	.word	0x00010008
 800492c:	00010002 	.word	0x00010002

08004930 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	607a      	str	r2, [r7, #4]
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	460b      	mov	r3, r1
 800493e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004944:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004954:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b08      	cmp	r3, #8
 800495a:	d006      	beq.n	800496a <I2C_MasterRequestRead+0x3a>
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d003      	beq.n	800496a <I2C_MasterRequestRead+0x3a>
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004968:	d108      	bne.n	800497c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e00b      	b.n	8004994 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004980:	2b11      	cmp	r3, #17
 8004982:	d107      	bne.n	8004994 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004992:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f893 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00d      	beq.n	80049c8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ba:	d103      	bne.n	80049c4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e079      	b.n	8004abc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049d0:	d108      	bne.n	80049e4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049d2:	897b      	ldrh	r3, [r7, #10]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	611a      	str	r2, [r3, #16]
 80049e2:	e05f      	b.n	8004aa4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049e4:	897b      	ldrh	r3, [r7, #10]
 80049e6:	11db      	asrs	r3, r3, #7
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	f003 0306 	and.w	r3, r3, #6
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	f063 030f 	orn	r3, r3, #15
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4930      	ldr	r1, [pc, #192]	@ (8004ac4 <I2C_MasterRequestRead+0x194>)
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f8dc 	bl	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e054      	b.n	8004abc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a12:	897b      	ldrh	r3, [r7, #10]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	4929      	ldr	r1, [pc, #164]	@ (8004ac8 <I2C_MasterRequestRead+0x198>)
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f8cc 	bl	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e044      	b.n	8004abc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a32:	2300      	movs	r3, #0
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f831 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00d      	beq.n	8004a8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a7e:	d103      	bne.n	8004a88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a86:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e017      	b.n	8004abc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a8c:	897b      	ldrh	r3, [r7, #10]
 8004a8e:	11db      	asrs	r3, r3, #7
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	f003 0306 	and.w	r3, r3, #6
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	f063 030e 	orn	r3, r3, #14
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	4907      	ldr	r1, [pc, #28]	@ (8004ac8 <I2C_MasterRequestRead+0x198>)
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f888 	bl	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	00010008 	.word	0x00010008
 8004ac8:	00010002 	.word	0x00010002

08004acc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004adc:	e048      	b.n	8004b70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ae4:	d044      	beq.n	8004b70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae6:	f7fe ff4d 	bl	8003984 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d302      	bcc.n	8004afc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d139      	bne.n	8004b70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	0c1b      	lsrs	r3, r3, #16
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d10d      	bne.n	8004b22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	43da      	mvns	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4013      	ands	r3, r2
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	bf0c      	ite	eq
 8004b18:	2301      	moveq	r3, #1
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	e00c      	b.n	8004b3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	43da      	mvns	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bf0c      	ite	eq
 8004b34:	2301      	moveq	r3, #1
 8004b36:	2300      	movne	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d116      	bne.n	8004b70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5c:	f043 0220 	orr.w	r2, r3, #32
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e023      	b.n	8004bb8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	0c1b      	lsrs	r3, r3, #16
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d10d      	bne.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	43da      	mvns	r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	4013      	ands	r3, r2
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	e00c      	b.n	8004bb0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	43da      	mvns	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf0c      	ite	eq
 8004ba8:	2301      	moveq	r3, #1
 8004baa:	2300      	movne	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d093      	beq.n	8004ade <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bce:	e071      	b.n	8004cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bde:	d123      	bne.n	8004c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bf8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c14:	f043 0204 	orr.w	r2, r3, #4
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e067      	b.n	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c2e:	d041      	beq.n	8004cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c30:	f7fe fea8 	bl	8003984 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d302      	bcc.n	8004c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d136      	bne.n	8004cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d10c      	bne.n	8004c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	43da      	mvns	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bf14      	ite	ne
 8004c62:	2301      	movne	r3, #1
 8004c64:	2300      	moveq	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	e00b      	b.n	8004c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	43da      	mvns	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4013      	ands	r3, r2
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bf14      	ite	ne
 8004c7c:	2301      	movne	r3, #1
 8004c7e:	2300      	moveq	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d016      	beq.n	8004cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca0:	f043 0220 	orr.w	r2, r3, #32
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e021      	b.n	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	0c1b      	lsrs	r3, r3, #16
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d10c      	bne.n	8004cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	43da      	mvns	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bf14      	ite	ne
 8004cd0:	2301      	movne	r3, #1
 8004cd2:	2300      	moveq	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	e00b      	b.n	8004cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	43da      	mvns	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bf14      	ite	ne
 8004cea:	2301      	movne	r3, #1
 8004cec:	2300      	moveq	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f47f af6d 	bne.w	8004bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d0c:	e034      	b.n	8004d78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f8e3 	bl	8004eda <I2C_IsAcknowledgeFailed>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e034      	b.n	8004d88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d24:	d028      	beq.n	8004d78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d26:	f7fe fe2d 	bl	8003984 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d302      	bcc.n	8004d3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d11d      	bne.n	8004d78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d46:	2b80      	cmp	r3, #128	@ 0x80
 8004d48:	d016      	beq.n	8004d78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d64:	f043 0220 	orr.w	r2, r3, #32
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e007      	b.n	8004d88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d82:	2b80      	cmp	r3, #128	@ 0x80
 8004d84:	d1c3      	bne.n	8004d0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d9c:	e034      	b.n	8004e08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f89b 	bl	8004eda <I2C_IsAcknowledgeFailed>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e034      	b.n	8004e18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004db4:	d028      	beq.n	8004e08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db6:	f7fe fde5 	bl	8003984 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d302      	bcc.n	8004dcc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d11d      	bne.n	8004e08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d016      	beq.n	8004e08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df4:	f043 0220 	orr.w	r2, r3, #32
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e007      	b.n	8004e18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d1c3      	bne.n	8004d9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e2c:	e049      	b.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d119      	bne.n	8004e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0210 	mvn.w	r2, #16
 8004e44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e030      	b.n	8004ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e70:	f7fe fd88 	bl	8003984 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d302      	bcc.n	8004e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d11d      	bne.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e90:	2b40      	cmp	r3, #64	@ 0x40
 8004e92:	d016      	beq.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eae:	f043 0220 	orr.w	r2, r3, #32
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e007      	b.n	8004ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ecc:	2b40      	cmp	r3, #64	@ 0x40
 8004ece:	d1ae      	bne.n	8004e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ef0:	d11b      	bne.n	8004f2a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004efa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	f043 0204 	orr.w	r2, r3, #4
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e101      	b.n	800514e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d106      	bne.n	8004f6a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f007 fb81 	bl	800c66c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f78:	d102      	bne.n	8004f80 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f003 ff18 	bl	8008dba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	7c1a      	ldrb	r2, [r3, #16]
 8004f92:	f88d 2000 	strb.w	r2, [sp]
 8004f96:	3304      	adds	r3, #4
 8004f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f9a:	f003 fdf7 	bl	8008b8c <USB_CoreInit>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0ce      	b.n	800514e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f003 ff10 	bl	8008ddc <USB_SetCurrentMode>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e0bf      	b.n	800514e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fce:	2300      	movs	r3, #0
 8004fd0:	73fb      	strb	r3, [r7, #15]
 8004fd2:	e04a      	b.n	800506a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fd4:	7bfa      	ldrb	r2, [r7, #15]
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	3315      	adds	r3, #21
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004fe8:	7bfa      	ldrb	r2, [r7, #15]
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	4613      	mov	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	3314      	adds	r3, #20
 8004ff8:	7bfa      	ldrb	r2, [r7, #15]
 8004ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ffc:	7bfa      	ldrb	r2, [r7, #15]
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
 8005000:	b298      	uxth	r0, r3
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	332e      	adds	r3, #46	@ 0x2e
 8005010:	4602      	mov	r2, r0
 8005012:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005014:	7bfa      	ldrb	r2, [r7, #15]
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	4613      	mov	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	3318      	adds	r3, #24
 8005024:	2200      	movs	r2, #0
 8005026:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005028:	7bfa      	ldrb	r2, [r7, #15]
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	4613      	mov	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	331c      	adds	r3, #28
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800503c:	7bfa      	ldrb	r2, [r7, #15]
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	3320      	adds	r3, #32
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005050:	7bfa      	ldrb	r2, [r7, #15]
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	4613      	mov	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	3324      	adds	r3, #36	@ 0x24
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	3301      	adds	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	791b      	ldrb	r3, [r3, #4]
 800506e:	7bfa      	ldrb	r2, [r7, #15]
 8005070:	429a      	cmp	r2, r3
 8005072:	d3af      	bcc.n	8004fd4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005074:	2300      	movs	r3, #0
 8005076:	73fb      	strb	r3, [r7, #15]
 8005078:	e044      	b.n	8005104 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800507a:	7bfa      	ldrb	r2, [r7, #15]
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005090:	7bfa      	ldrb	r2, [r7, #15]
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80050a2:	7bfa      	ldrb	r2, [r7, #15]
 80050a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050a6:	7bfa      	ldrb	r2, [r7, #15]
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050bc:	7bfa      	ldrb	r2, [r7, #15]
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050d2:	7bfa      	ldrb	r2, [r7, #15]
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	4613      	mov	r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050e8:	7bfa      	ldrb	r2, [r7, #15]
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	3301      	adds	r3, #1
 8005102:	73fb      	strb	r3, [r7, #15]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	791b      	ldrb	r3, [r3, #4]
 8005108:	7bfa      	ldrb	r2, [r7, #15]
 800510a:	429a      	cmp	r2, r3
 800510c:	d3b5      	bcc.n	800507a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	7c1a      	ldrb	r2, [r3, #16]
 8005116:	f88d 2000 	strb.w	r2, [sp]
 800511a:	3304      	adds	r3, #4
 800511c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800511e:	f003 fea9 	bl	8008e74 <USB_DevInit>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e00c      	b.n	800514e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f004 fef3 	bl	8009f32 <USB_DevDisconnect>

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800516a:	2b01      	cmp	r3, #1
 800516c:	d101      	bne.n	8005172 <HAL_PCD_Start+0x1c>
 800516e:	2302      	movs	r3, #2
 8005170:	e022      	b.n	80051b8 <HAL_PCD_Start+0x62>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800518a:	2b01      	cmp	r3, #1
 800518c:	d105      	bne.n	800519a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005192:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f003 fdfa 	bl	8008d98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f004 fea1 	bl	8009ef0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80051c0:	b590      	push	{r4, r7, lr}
 80051c2:	b08d      	sub	sp, #52	@ 0x34
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f004 ff5f 	bl	800a09a <USB_GetMode>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f040 848c 	bne.w	8005afc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f004 fec3 	bl	8009f74 <USB_ReadInterrupts>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 8482 	beq.w	8005afa <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	0a1b      	lsrs	r3, r3, #8
 8005200:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f004 feb0 	bl	8009f74 <USB_ReadInterrupts>
 8005214:	4603      	mov	r3, r0
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b02      	cmp	r3, #2
 800521c:	d107      	bne.n	800522e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695a      	ldr	r2, [r3, #20]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f002 0202 	and.w	r2, r2, #2
 800522c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f004 fe9e 	bl	8009f74 <USB_ReadInterrupts>
 8005238:	4603      	mov	r3, r0
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b10      	cmp	r3, #16
 8005240:	d161      	bne.n	8005306 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699a      	ldr	r2, [r3, #24]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0210 	bic.w	r2, r2, #16
 8005250:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f003 020f 	and.w	r2, r3, #15
 800525e:	4613      	mov	r3, r2
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	4413      	add	r3, r2
 800526e:	3304      	adds	r3, #4
 8005270:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005278:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800527c:	d124      	bne.n	80052c8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005284:	4013      	ands	r3, r2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d035      	beq.n	80052f6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005294:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005298:	b29b      	uxth	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	6a38      	ldr	r0, [r7, #32]
 800529e:	f004 fcd5 	bl	8009c4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	091b      	lsrs	r3, r3, #4
 80052aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ae:	441a      	add	r2, r3
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	695a      	ldr	r2, [r3, #20]
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	091b      	lsrs	r3, r3, #4
 80052bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052c0:	441a      	add	r2, r3
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	615a      	str	r2, [r3, #20]
 80052c6:	e016      	b.n	80052f6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80052ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80052d2:	d110      	bne.n	80052f6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80052da:	2208      	movs	r2, #8
 80052dc:	4619      	mov	r1, r3
 80052de:	6a38      	ldr	r0, [r7, #32]
 80052e0:	f004 fcb4 	bl	8009c4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	091b      	lsrs	r3, r3, #4
 80052ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052f0:	441a      	add	r2, r3
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699a      	ldr	r2, [r3, #24]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0210 	orr.w	r2, r2, #16
 8005304:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f004 fe32 	bl	8009f74 <USB_ReadInterrupts>
 8005310:	4603      	mov	r3, r0
 8005312:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005316:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800531a:	f040 80a7 	bne.w	800546c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f004 fe37 	bl	8009f9a <USB_ReadDevAllOutEpInterrupt>
 800532c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800532e:	e099      	b.n	8005464 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 808e 	beq.w	8005458 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	4611      	mov	r1, r2
 8005346:	4618      	mov	r0, r3
 8005348:	f004 fe5b 	bl	800a002 <USB_ReadDevOutEPInterrupt>
 800534c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00c      	beq.n	8005372 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005364:	461a      	mov	r2, r3
 8005366:	2301      	movs	r3, #1
 8005368:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800536a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fea3 	bl	80060b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00c      	beq.n	8005396 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005388:	461a      	mov	r2, r3
 800538a:	2308      	movs	r3, #8
 800538c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800538e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 ff79 	bl	8006288 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f003 0310 	and.w	r3, r3, #16
 800539c:	2b00      	cmp	r3, #0
 800539e:	d008      	beq.n	80053b2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ac:	461a      	mov	r2, r3
 80053ae:	2310      	movs	r3, #16
 80053b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d030      	beq.n	800541e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c4:	2b80      	cmp	r3, #128	@ 0x80
 80053c6:	d109      	bne.n	80053dc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053da:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80053dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053de:	4613      	mov	r3, r2
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	4413      	add	r3, r2
 80053ee:	3304      	adds	r3, #4
 80053f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	78db      	ldrb	r3, [r3, #3]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d108      	bne.n	800540c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2200      	movs	r2, #0
 80053fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	b2db      	uxtb	r3, r3
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f007 fa2c 	bl	800c864 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005418:	461a      	mov	r2, r3
 800541a:	2302      	movs	r3, #2
 800541c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005434:	461a      	mov	r2, r3
 8005436:	2320      	movs	r3, #32
 8005438:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d009      	beq.n	8005458 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005450:	461a      	mov	r2, r3
 8005452:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005456:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545a:	3301      	adds	r3, #1
 800545c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800545e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005460:	085b      	lsrs	r3, r3, #1
 8005462:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005466:	2b00      	cmp	r3, #0
 8005468:	f47f af62 	bne.w	8005330 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4618      	mov	r0, r3
 8005472:	f004 fd7f 	bl	8009f74 <USB_ReadInterrupts>
 8005476:	4603      	mov	r3, r0
 8005478:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800547c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005480:	f040 80db 	bne.w	800563a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4618      	mov	r0, r3
 800548a:	f004 fda0 	bl	8009fce <USB_ReadDevAllInEpInterrupt>
 800548e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005494:	e0cd      	b.n	8005632 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 80c2 	beq.w	8005626 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	4611      	mov	r1, r2
 80054ac:	4618      	mov	r0, r3
 80054ae:	f004 fdc6 	bl	800a03e <USB_ReadDevInEPInterrupt>
 80054b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d057      	beq.n	800556e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	2201      	movs	r2, #1
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	43db      	mvns	r3, r3
 80054d8:	69f9      	ldr	r1, [r7, #28]
 80054da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054de:	4013      	ands	r3, r2
 80054e0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80054e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ee:	461a      	mov	r2, r3
 80054f0:	2301      	movs	r3, #1
 80054f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	799b      	ldrb	r3, [r3, #6]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d132      	bne.n	8005562 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005500:	4613      	mov	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	3320      	adds	r3, #32
 800550c:	6819      	ldr	r1, [r3, #0]
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005512:	4613      	mov	r3, r2
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	4413      	add	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4403      	add	r3, r0
 800551c:	331c      	adds	r3, #28
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4419      	add	r1, r3
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005526:	4613      	mov	r3, r2
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4403      	add	r3, r0
 8005530:	3320      	adds	r3, #32
 8005532:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005536:	2b00      	cmp	r3, #0
 8005538:	d113      	bne.n	8005562 <HAL_PCD_IRQHandler+0x3a2>
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800553e:	4613      	mov	r3, r2
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	3324      	adds	r3, #36	@ 0x24
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d108      	bne.n	8005562 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6818      	ldr	r0, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800555a:	461a      	mov	r2, r3
 800555c:	2101      	movs	r1, #1
 800555e:	f004 fdcd 	bl	800a0fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	b2db      	uxtb	r3, r3
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f007 f900 	bl	800c76e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b00      	cmp	r3, #0
 8005576:	d008      	beq.n	800558a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005584:	461a      	mov	r2, r3
 8005586:	2308      	movs	r3, #8
 8005588:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f003 0310 	and.w	r3, r3, #16
 8005590:	2b00      	cmp	r3, #0
 8005592:	d008      	beq.n	80055a6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055a0:	461a      	mov	r2, r3
 80055a2:	2310      	movs	r3, #16
 80055a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d008      	beq.n	80055c2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80055b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055bc:	461a      	mov	r2, r3
 80055be:	2340      	movs	r3, #64	@ 0x40
 80055c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d023      	beq.n	8005614 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80055cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055ce:	6a38      	ldr	r0, [r7, #32]
 80055d0:	f003 fdb4 	bl	800913c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80055d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d6:	4613      	mov	r3, r2
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	4413      	add	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	3310      	adds	r3, #16
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	4413      	add	r3, r2
 80055e4:	3304      	adds	r3, #4
 80055e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	78db      	ldrb	r3, [r3, #3]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d108      	bne.n	8005602 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	2200      	movs	r2, #0
 80055f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	4619      	mov	r1, r3
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f007 f943 	bl	800c888 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800560e:	461a      	mov	r2, r3
 8005610:	2302      	movs	r3, #2
 8005612:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800561e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fcbd 	bl	8005fa0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	3301      	adds	r3, #1
 800562a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800562c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562e:	085b      	lsrs	r3, r3, #1
 8005630:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005634:	2b00      	cmp	r3, #0
 8005636:	f47f af2e 	bne.w	8005496 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f004 fc98 	bl	8009f74 <USB_ReadInterrupts>
 8005644:	4603      	mov	r3, r0
 8005646:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800564a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800564e:	d122      	bne.n	8005696 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	69fa      	ldr	r2, [r7, #28]
 800565a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800565e:	f023 0301 	bic.w	r3, r3, #1
 8005662:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800566a:	2b01      	cmp	r3, #1
 800566c:	d108      	bne.n	8005680 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005676:	2100      	movs	r1, #0
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fea3 	bl	80063c4 <HAL_PCDEx_LPM_Callback>
 800567e:	e002      	b.n	8005686 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f007 f8e1 	bl	800c848 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695a      	ldr	r2, [r3, #20]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	f004 fc6a 	bl	8009f74 <USB_ReadInterrupts>
 80056a0:	4603      	mov	r3, r0
 80056a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056aa:	d112      	bne.n	80056d2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d102      	bne.n	80056c2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f007 f89d 	bl	800c7fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695a      	ldr	r2, [r3, #20]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80056d0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f004 fc4c 	bl	8009f74 <USB_ReadInterrupts>
 80056dc:	4603      	mov	r3, r0
 80056de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e6:	f040 80b7 	bne.w	8005858 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056f8:	f023 0301 	bic.w	r3, r3, #1
 80056fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2110      	movs	r1, #16
 8005704:	4618      	mov	r0, r3
 8005706:	f003 fd19 	bl	800913c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800570a:	2300      	movs	r3, #0
 800570c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800570e:	e046      	b.n	800579e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800571c:	461a      	mov	r2, r3
 800571e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005722:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	69fa      	ldr	r2, [r7, #28]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800573e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005742:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005750:	461a      	mov	r2, r3
 8005752:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005756:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	440a      	add	r2, r1
 800576e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005772:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005776:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005792:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005796:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579a:	3301      	adds	r3, #1
 800579c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	791b      	ldrb	r3, [r3, #4]
 80057a2:	461a      	mov	r2, r3
 80057a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d3b2      	bcc.n	8005710 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057b8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80057bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	7bdb      	ldrb	r3, [r3, #15]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d016      	beq.n	80057f4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057d6:	f043 030b 	orr.w	r3, r3, #11
 80057da:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e6:	69fa      	ldr	r2, [r7, #28]
 80057e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057ec:	f043 030b 	orr.w	r3, r3, #11
 80057f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80057f2:	e015      	b.n	8005820 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005802:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005806:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800580a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800581a:	f043 030b 	orr.w	r3, r3, #11
 800581e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800582e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005832:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6818      	ldr	r0, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005842:	461a      	mov	r2, r3
 8005844:	f004 fc5a 	bl	800a0fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695a      	ldr	r2, [r3, #20]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005856:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4618      	mov	r0, r3
 800585e:	f004 fb89 	bl	8009f74 <USB_ReadInterrupts>
 8005862:	4603      	mov	r3, r0
 8005864:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005868:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800586c:	d123      	bne.n	80058b6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f004 fc1f 	bl	800a0b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f003 fcd6 	bl	800922e <USB_GetDevSpeed>
 8005882:	4603      	mov	r3, r0
 8005884:	461a      	mov	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681c      	ldr	r4, [r3, #0]
 800588e:	f001 f9c9 	bl	8006c24 <HAL_RCC_GetHCLKFreq>
 8005892:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005898:	461a      	mov	r2, r3
 800589a:	4620      	mov	r0, r4
 800589c:	f003 f9da 	bl	8008c54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f006 ff8c 	bl	800c7be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695a      	ldr	r2, [r3, #20]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80058b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f004 fb5a 	bl	8009f74 <USB_ReadInterrupts>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d10a      	bne.n	80058e0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f006 ff69 	bl	800c7a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695a      	ldr	r2, [r3, #20]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f002 0208 	and.w	r2, r2, #8
 80058de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f004 fb45 	bl	8009f74 <USB_ReadInterrupts>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f0:	2b80      	cmp	r3, #128	@ 0x80
 80058f2:	d123      	bne.n	800593c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005900:	2301      	movs	r3, #1
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
 8005904:	e014      	b.n	8005930 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800590a:	4613      	mov	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	440b      	add	r3, r1
 8005914:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d105      	bne.n	800592a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	b2db      	uxtb	r3, r3
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 fb0a 	bl	8005f3e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	3301      	adds	r3, #1
 800592e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	791b      	ldrb	r3, [r3, #4]
 8005934:	461a      	mov	r2, r3
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	4293      	cmp	r3, r2
 800593a:	d3e4      	bcc.n	8005906 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4618      	mov	r0, r3
 8005942:	f004 fb17 	bl	8009f74 <USB_ReadInterrupts>
 8005946:	4603      	mov	r3, r0
 8005948:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800594c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005950:	d13c      	bne.n	80059cc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005952:	2301      	movs	r3, #1
 8005954:	627b      	str	r3, [r7, #36]	@ 0x24
 8005956:	e02b      	b.n	80059b0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005968:	6879      	ldr	r1, [r7, #4]
 800596a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800596c:	4613      	mov	r3, r2
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	3318      	adds	r3, #24
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d115      	bne.n	80059aa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800597e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005980:	2b00      	cmp	r3, #0
 8005982:	da12      	bge.n	80059aa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005988:	4613      	mov	r3, r2
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	3317      	adds	r3, #23
 8005994:	2201      	movs	r2, #1
 8005996:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	4619      	mov	r1, r3
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 faca 	bl	8005f3e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	3301      	adds	r3, #1
 80059ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	791b      	ldrb	r3, [r3, #4]
 80059b4:	461a      	mov	r2, r3
 80059b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d3cd      	bcc.n	8005958 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695a      	ldr	r2, [r3, #20]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80059ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f004 facf 	bl	8009f74 <USB_ReadInterrupts>
 80059d6:	4603      	mov	r3, r0
 80059d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059e0:	d156      	bne.n	8005a90 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059e2:	2301      	movs	r3, #1
 80059e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e6:	e045      	b.n	8005a74 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80059e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059fc:	4613      	mov	r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	440b      	add	r3, r1
 8005a06:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d12e      	bne.n	8005a6e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a10:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	da2b      	bge.n	8005a6e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005a22:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d121      	bne.n	8005a6e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a2e:	4613      	mov	r3, r2
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a6a:	6053      	str	r3, [r2, #4]
            break;
 8005a6c:	e008      	b.n	8005a80 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a70:	3301      	adds	r3, #1
 8005a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	791b      	ldrb	r3, [r3, #4]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d3b3      	bcc.n	80059e8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695a      	ldr	r2, [r3, #20]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f004 fa6d 	bl	8009f74 <USB_ReadInterrupts>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa4:	d10a      	bne.n	8005abc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f006 ff00 	bl	800c8ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	695a      	ldr	r2, [r3, #20]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f004 fa57 	bl	8009f74 <USB_ReadInterrupts>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d115      	bne.n	8005afc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f006 fef0 	bl	800c8c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6859      	ldr	r1, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	605a      	str	r2, [r3, #4]
 8005af8:	e000      	b.n	8005afc <HAL_PCD_IRQHandler+0x93c>
      return;
 8005afa:	bf00      	nop
    }
  }
}
 8005afc:	3734      	adds	r7, #52	@ 0x34
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd90      	pop	{r4, r7, pc}

08005b02 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b082      	sub	sp, #8
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_PCD_SetAddress+0x1a>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e012      	b.n	8005b42 <HAL_PCD_SetAddress+0x40>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	78fa      	ldrb	r2, [r7, #3]
 8005b30:	4611      	mov	r1, r2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f004 f9b6 	bl	8009ea4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	4608      	mov	r0, r1
 8005b54:	4611      	mov	r1, r2
 8005b56:	461a      	mov	r2, r3
 8005b58:	4603      	mov	r3, r0
 8005b5a:	70fb      	strb	r3, [r7, #3]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	803b      	strh	r3, [r7, #0]
 8005b60:	4613      	mov	r3, r2
 8005b62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	da0f      	bge.n	8005b90 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	f003 020f 	and.w	r2, r3, #15
 8005b76:	4613      	mov	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	3310      	adds	r3, #16
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	4413      	add	r3, r2
 8005b84:	3304      	adds	r3, #4
 8005b86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	705a      	strb	r2, [r3, #1]
 8005b8e:	e00f      	b.n	8005bb0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b90:	78fb      	ldrb	r3, [r7, #3]
 8005b92:	f003 020f 	and.w	r2, r3, #15
 8005b96:	4613      	mov	r3, r2
 8005b98:	00db      	lsls	r3, r3, #3
 8005b9a:	4413      	add	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005bbc:	883b      	ldrh	r3, [r7, #0]
 8005bbe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	78ba      	ldrb	r2, [r7, #2]
 8005bca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	785b      	ldrb	r3, [r3, #1]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d004      	beq.n	8005bde <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005bde:	78bb      	ldrb	r3, [r7, #2]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d102      	bne.n	8005bea <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_PCD_EP_Open+0xae>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e00e      	b.n	8005c16 <HAL_PCD_EP_Open+0xcc>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68f9      	ldr	r1, [r7, #12]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f003 fb36 	bl	8009278 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005c14:	7afb      	ldrb	r3, [r7, #11]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	460b      	mov	r3, r1
 8005c28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	da0f      	bge.n	8005c52 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c32:	78fb      	ldrb	r3, [r7, #3]
 8005c34:	f003 020f 	and.w	r2, r3, #15
 8005c38:	4613      	mov	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	3310      	adds	r3, #16
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	4413      	add	r3, r2
 8005c46:	3304      	adds	r3, #4
 8005c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	705a      	strb	r2, [r3, #1]
 8005c50:	e00f      	b.n	8005c72 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c52:	78fb      	ldrb	r3, [r7, #3]
 8005c54:	f003 020f 	and.w	r2, r3, #15
 8005c58:	4613      	mov	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	4413      	add	r3, r2
 8005c68:	3304      	adds	r3, #4
 8005c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c72:	78fb      	ldrb	r3, [r7, #3]
 8005c74:	f003 030f 	and.w	r3, r3, #15
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_PCD_EP_Close+0x6e>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e00e      	b.n	8005caa <HAL_PCD_EP_Close+0x8c>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68f9      	ldr	r1, [r7, #12]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f003 fb74 	bl	8009388 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b086      	sub	sp, #24
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	603b      	str	r3, [r7, #0]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cc2:	7afb      	ldrb	r3, [r7, #11]
 8005cc4:	f003 020f 	and.w	r2, r3, #15
 8005cc8:	4613      	mov	r3, r2
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3304      	adds	r3, #4
 8005cda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2200      	movs	r2, #0
 8005cec:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cf4:	7afb      	ldrb	r3, [r7, #11]
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	799b      	ldrb	r3, [r3, #6]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d102      	bne.n	8005d0e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	799b      	ldrb	r3, [r3, #6]
 8005d16:	461a      	mov	r2, r3
 8005d18:	6979      	ldr	r1, [r7, #20]
 8005d1a:	f003 fc11 	bl	8009540 <USB_EPStartXfer>

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	f003 020f 	and.w	r2, r3, #15
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	4413      	add	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	440b      	add	r3, r1
 8005d46:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005d4a:	681b      	ldr	r3, [r3, #0]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	607a      	str	r2, [r7, #4]
 8005d62:	603b      	str	r3, [r7, #0]
 8005d64:	460b      	mov	r3, r1
 8005d66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d68:	7afb      	ldrb	r3, [r7, #11]
 8005d6a:	f003 020f 	and.w	r2, r3, #15
 8005d6e:	4613      	mov	r3, r2
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	3310      	adds	r3, #16
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2201      	movs	r2, #1
 8005d96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d98:	7afb      	ldrb	r3, [r7, #11]
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	799b      	ldrb	r3, [r3, #6]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d102      	bne.n	8005db2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	799b      	ldrb	r3, [r3, #6]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	6979      	ldr	r1, [r7, #20]
 8005dbe:	f003 fbbf 	bl	8009540 <USB_EPStartXfer>

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	7912      	ldrb	r2, [r2, #4]
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e04f      	b.n	8005e8a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	da0f      	bge.n	8005e12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	f003 020f 	and.w	r2, r3, #15
 8005df8:	4613      	mov	r3, r2
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	3310      	adds	r3, #16
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	4413      	add	r3, r2
 8005e06:	3304      	adds	r3, #4
 8005e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	705a      	strb	r2, [r3, #1]
 8005e10:	e00d      	b.n	8005e2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e12:	78fa      	ldrb	r2, [r7, #3]
 8005e14:	4613      	mov	r3, r2
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	4413      	add	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	4413      	add	r3, r2
 8005e24:	3304      	adds	r3, #4
 8005e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_PCD_EP_SetStall+0x82>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e01d      	b.n	8005e8a <HAL_PCD_EP_SetStall+0xbe>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68f9      	ldr	r1, [r7, #12]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f003 ff4d 	bl	8009cfc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e62:	78fb      	ldrb	r3, [r7, #3]
 8005e64:	f003 030f 	and.w	r3, r3, #15
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d109      	bne.n	8005e80 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	7999      	ldrb	r1, [r3, #6]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f004 f93e 	bl	800a0fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e9e:	78fb      	ldrb	r3, [r7, #3]
 8005ea0:	f003 030f 	and.w	r3, r3, #15
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	7912      	ldrb	r2, [r2, #4]
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d901      	bls.n	8005eb0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e042      	b.n	8005f36 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005eb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	da0f      	bge.n	8005ed8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	f003 020f 	and.w	r2, r3, #15
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	3310      	adds	r3, #16
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	4413      	add	r3, r2
 8005ecc:	3304      	adds	r3, #4
 8005ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	705a      	strb	r2, [r3, #1]
 8005ed6:	e00f      	b.n	8005ef8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	f003 020f 	and.w	r2, r3, #15
 8005ede:	4613      	mov	r3, r2
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	4413      	add	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	4413      	add	r3, r2
 8005eee:	3304      	adds	r3, #4
 8005ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	f003 030f 	and.w	r3, r3, #15
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_PCD_EP_ClrStall+0x86>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e00e      	b.n	8005f36 <HAL_PCD_EP_ClrStall+0xa4>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68f9      	ldr	r1, [r7, #12]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f003 ff56 	bl	8009dd8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b084      	sub	sp, #16
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	460b      	mov	r3, r1
 8005f48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005f4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	da0c      	bge.n	8005f6c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f52:	78fb      	ldrb	r3, [r7, #3]
 8005f54:	f003 020f 	and.w	r2, r3, #15
 8005f58:	4613      	mov	r3, r2
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	3310      	adds	r3, #16
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	4413      	add	r3, r2
 8005f66:	3304      	adds	r3, #4
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	e00c      	b.n	8005f86 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	f003 020f 	and.w	r2, r3, #15
 8005f72:	4613      	mov	r3, r2
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	4413      	add	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	4413      	add	r3, r2
 8005f82:	3304      	adds	r3, #4
 8005f84:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68f9      	ldr	r1, [r7, #12]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f003 fd75 	bl	8009a7c <USB_EPStopXfer>
 8005f92:	4603      	mov	r3, r0
 8005f94:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005f96:	7afb      	ldrb	r3, [r7, #11]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08a      	sub	sp, #40	@ 0x28
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	3310      	adds	r3, #16
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	695a      	ldr	r2, [r3, #20]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d901      	bls.n	8005fd8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e06b      	b.n	80060b0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	69fa      	ldr	r2, [r7, #28]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d902      	bls.n	8005ff4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	3303      	adds	r3, #3
 8005ff8:	089b      	lsrs	r3, r3, #2
 8005ffa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ffc:	e02a      	b.n	8006054 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	691a      	ldr	r2, [r3, #16]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	429a      	cmp	r2, r3
 8006012:	d902      	bls.n	800601a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	3303      	adds	r3, #3
 800601e:	089b      	lsrs	r3, r3, #2
 8006020:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	68d9      	ldr	r1, [r3, #12]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	b2da      	uxtb	r2, r3
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	4603      	mov	r3, r0
 8006036:	6978      	ldr	r0, [r7, #20]
 8006038:	f003 fdca 	bl	8009bd0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	441a      	add	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	695a      	ldr	r2, [r3, #20]
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	441a      	add	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	429a      	cmp	r2, r3
 8006068:	d809      	bhi.n	800607e <PCD_WriteEmptyTxFifo+0xde>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	695a      	ldr	r2, [r3, #20]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006072:	429a      	cmp	r2, r3
 8006074:	d203      	bcs.n	800607e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1bf      	bne.n	8005ffe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	429a      	cmp	r2, r3
 8006088:	d811      	bhi.n	80060ae <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	2201      	movs	r2, #1
 8006092:	fa02 f303 	lsl.w	r3, r2, r3
 8006096:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800609e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	43db      	mvns	r3, r3
 80060a4:	6939      	ldr	r1, [r7, #16]
 80060a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060aa:	4013      	ands	r3, r2
 80060ac:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	333c      	adds	r3, #60	@ 0x3c
 80060d0:	3304      	adds	r3, #4
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	799b      	ldrb	r3, [r3, #6]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d17b      	bne.n	80061e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d015      	beq.n	8006124 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	4a61      	ldr	r2, [pc, #388]	@ (8006280 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	f240 80b9 	bls.w	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 80b3 	beq.w	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800611a:	461a      	mov	r2, r3
 800611c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006120:	6093      	str	r3, [r2, #8]
 8006122:	e0a7      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800613a:	461a      	mov	r2, r3
 800613c:	2320      	movs	r3, #32
 800613e:	6093      	str	r3, [r2, #8]
 8006140:	e098      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006148:	2b00      	cmp	r3, #0
 800614a:	f040 8093 	bne.w	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4a4b      	ldr	r2, [pc, #300]	@ (8006280 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d90f      	bls.n	8006176 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800616c:	461a      	mov	r2, r3
 800616e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006172:	6093      	str	r3, [r2, #8]
 8006174:	e07e      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	4613      	mov	r3, r2
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	4413      	add	r3, r2
 8006188:	3304      	adds	r3, #4
 800618a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a1a      	ldr	r2, [r3, #32]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	0159      	lsls	r1, r3, #5
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	440b      	add	r3, r1
 8006198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061a2:	1ad2      	subs	r2, r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d114      	bne.n	80061d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d109      	bne.n	80061ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6818      	ldr	r0, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80061c0:	461a      	mov	r2, r3
 80061c2:	2101      	movs	r1, #1
 80061c4:	f003 ff9a 	bl	800a0fc <USB_EP0_OutStart>
 80061c8:	e006      	b.n	80061d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	441a      	add	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f006 faaa 	bl	800c738 <HAL_PCD_DataOutStageCallback>
 80061e4:	e046      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	4a26      	ldr	r2, [pc, #152]	@ (8006284 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d124      	bne.n	8006238 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00a      	beq.n	800620e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006204:	461a      	mov	r2, r3
 8006206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800620a:	6093      	str	r3, [r2, #8]
 800620c:	e032      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006224:	461a      	mov	r2, r3
 8006226:	2320      	movs	r3, #32
 8006228:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	b2db      	uxtb	r3, r3
 800622e:	4619      	mov	r1, r3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f006 fa81 	bl	800c738 <HAL_PCD_DataOutStageCallback>
 8006236:	e01d      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d114      	bne.n	8006268 <PCD_EP_OutXfrComplete_int+0x1b0>
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	4613      	mov	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d108      	bne.n	8006268 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006260:	461a      	mov	r2, r3
 8006262:	2100      	movs	r1, #0
 8006264:	f003 ff4a 	bl	800a0fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f006 fa62 	bl	800c738 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3720      	adds	r7, #32
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	4f54300a 	.word	0x4f54300a
 8006284:	4f54310a 	.word	0x4f54310a

08006288 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	333c      	adds	r3, #60	@ 0x3c
 80062a0:	3304      	adds	r3, #4
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4a15      	ldr	r2, [pc, #84]	@ (8006310 <PCD_EP_OutSetupPacket_int+0x88>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d90e      	bls.n	80062dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d009      	beq.n	80062dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d4:	461a      	mov	r2, r3
 80062d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f006 fa19 	bl	800c714 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006310 <PCD_EP_OutSetupPacket_int+0x88>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d90c      	bls.n	8006304 <PCD_EP_OutSetupPacket_int+0x7c>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	799b      	ldrb	r3, [r3, #6]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d108      	bne.n	8006304 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80062fc:	461a      	mov	r2, r3
 80062fe:	2101      	movs	r1, #1
 8006300:	f003 fefc 	bl	800a0fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	4f54300a 	.word	0x4f54300a

08006314 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
 8006320:	4613      	mov	r3, r2
 8006322:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d107      	bne.n	8006342 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006332:	883b      	ldrh	r3, [r7, #0]
 8006334:	0419      	lsls	r1, r3, #16
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	430a      	orrs	r2, r1
 800633e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006340:	e028      	b.n	8006394 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006348:	0c1b      	lsrs	r3, r3, #16
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	4413      	add	r3, r2
 800634e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006350:	2300      	movs	r3, #0
 8006352:	73fb      	strb	r3, [r7, #15]
 8006354:	e00d      	b.n	8006372 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	3340      	adds	r3, #64	@ 0x40
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	0c1b      	lsrs	r3, r3, #16
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	4413      	add	r3, r2
 800636a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	3301      	adds	r3, #1
 8006370:	73fb      	strb	r3, [r7, #15]
 8006372:	7bfa      	ldrb	r2, [r7, #15]
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	3b01      	subs	r3, #1
 8006378:	429a      	cmp	r2, r3
 800637a:	d3ec      	bcc.n	8006356 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800637c:	883b      	ldrh	r3, [r7, #0]
 800637e:	0418      	lsls	r0, r3, #16
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6819      	ldr	r1, [r3, #0]
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	3b01      	subs	r3, #1
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	4302      	orrs	r2, r0
 800638c:	3340      	adds	r3, #64	@ 0x40
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	887a      	ldrh	r2, [r7, #2]
 80063b4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e267      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d075      	beq.n	80064e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80063fa:	4b88      	ldr	r3, [pc, #544]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 030c 	and.w	r3, r3, #12
 8006402:	2b04      	cmp	r3, #4
 8006404:	d00c      	beq.n	8006420 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006406:	4b85      	ldr	r3, [pc, #532]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800640e:	2b08      	cmp	r3, #8
 8006410:	d112      	bne.n	8006438 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006412:	4b82      	ldr	r3, [pc, #520]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800641a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800641e:	d10b      	bne.n	8006438 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006420:	4b7e      	ldr	r3, [pc, #504]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d05b      	beq.n	80064e4 <HAL_RCC_OscConfig+0x108>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d157      	bne.n	80064e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e242      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006440:	d106      	bne.n	8006450 <HAL_RCC_OscConfig+0x74>
 8006442:	4b76      	ldr	r3, [pc, #472]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a75      	ldr	r2, [pc, #468]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	e01d      	b.n	800648c <HAL_RCC_OscConfig+0xb0>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006458:	d10c      	bne.n	8006474 <HAL_RCC_OscConfig+0x98>
 800645a:	4b70      	ldr	r3, [pc, #448]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a6f      	ldr	r2, [pc, #444]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	4b6d      	ldr	r3, [pc, #436]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a6c      	ldr	r2, [pc, #432]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800646c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	e00b      	b.n	800648c <HAL_RCC_OscConfig+0xb0>
 8006474:	4b69      	ldr	r3, [pc, #420]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a68      	ldr	r2, [pc, #416]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800647a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	4b66      	ldr	r3, [pc, #408]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a65      	ldr	r2, [pc, #404]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800648a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d013      	beq.n	80064bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006494:	f7fd fa76 	bl	8003984 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800649c:	f7fd fa72 	bl	8003984 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b64      	cmp	r3, #100	@ 0x64
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e207      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ae:	4b5b      	ldr	r3, [pc, #364]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0f0      	beq.n	800649c <HAL_RCC_OscConfig+0xc0>
 80064ba:	e014      	b.n	80064e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064bc:	f7fd fa62 	bl	8003984 <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064c4:	f7fd fa5e 	bl	8003984 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b64      	cmp	r3, #100	@ 0x64
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e1f3      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064d6:	4b51      	ldr	r3, [pc, #324]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f0      	bne.n	80064c4 <HAL_RCC_OscConfig+0xe8>
 80064e2:	e000      	b.n	80064e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d063      	beq.n	80065ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80064f2:	4b4a      	ldr	r3, [pc, #296]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 030c 	and.w	r3, r3, #12
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00b      	beq.n	8006516 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064fe:	4b47      	ldr	r3, [pc, #284]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006506:	2b08      	cmp	r3, #8
 8006508:	d11c      	bne.n	8006544 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800650a:	4b44      	ldr	r3, [pc, #272]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d116      	bne.n	8006544 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006516:	4b41      	ldr	r3, [pc, #260]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <HAL_RCC_OscConfig+0x152>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d001      	beq.n	800652e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e1c7      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652e:	4b3b      	ldr	r3, [pc, #236]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	4937      	ldr	r1, [pc, #220]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800653e:	4313      	orrs	r3, r2
 8006540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006542:	e03a      	b.n	80065ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d020      	beq.n	800658e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800654c:	4b34      	ldr	r3, [pc, #208]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 800654e:	2201      	movs	r2, #1
 8006550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006552:	f7fd fa17 	bl	8003984 <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006558:	e008      	b.n	800656c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800655a:	f7fd fa13 	bl	8003984 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e1a8      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800656c:	4b2b      	ldr	r3, [pc, #172]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0f0      	beq.n	800655a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006578:	4b28      	ldr	r3, [pc, #160]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	4925      	ldr	r1, [pc, #148]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006588:	4313      	orrs	r3, r2
 800658a:	600b      	str	r3, [r1, #0]
 800658c:	e015      	b.n	80065ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800658e:	4b24      	ldr	r3, [pc, #144]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006594:	f7fd f9f6 	bl	8003984 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800659c:	f7fd f9f2 	bl	8003984 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e187      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ae:	4b1b      	ldr	r3, [pc, #108]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f0      	bne.n	800659c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d036      	beq.n	8006634 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d016      	beq.n	80065fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ce:	4b15      	ldr	r3, [pc, #84]	@ (8006624 <HAL_RCC_OscConfig+0x248>)
 80065d0:	2201      	movs	r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d4:	f7fd f9d6 	bl	8003984 <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065dc:	f7fd f9d2 	bl	8003984 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e167      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ee:	4b0b      	ldr	r3, [pc, #44]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80065f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0f0      	beq.n	80065dc <HAL_RCC_OscConfig+0x200>
 80065fa:	e01b      	b.n	8006634 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065fc:	4b09      	ldr	r3, [pc, #36]	@ (8006624 <HAL_RCC_OscConfig+0x248>)
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006602:	f7fd f9bf 	bl	8003984 <HAL_GetTick>
 8006606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006608:	e00e      	b.n	8006628 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800660a:	f7fd f9bb 	bl	8003984 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d907      	bls.n	8006628 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e150      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
 800661c:	40023800 	.word	0x40023800
 8006620:	42470000 	.word	0x42470000
 8006624:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006628:	4b88      	ldr	r3, [pc, #544]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 800662a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1ea      	bne.n	800660a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 8097 	beq.w	8006770 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006642:	2300      	movs	r3, #0
 8006644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006646:	4b81      	ldr	r3, [pc, #516]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10f      	bne.n	8006672 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006652:	2300      	movs	r3, #0
 8006654:	60bb      	str	r3, [r7, #8]
 8006656:	4b7d      	ldr	r3, [pc, #500]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665a:	4a7c      	ldr	r2, [pc, #496]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 800665c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006660:	6413      	str	r3, [r2, #64]	@ 0x40
 8006662:	4b7a      	ldr	r3, [pc, #488]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800666a:	60bb      	str	r3, [r7, #8]
 800666c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800666e:	2301      	movs	r3, #1
 8006670:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006672:	4b77      	ldr	r3, [pc, #476]	@ (8006850 <HAL_RCC_OscConfig+0x474>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800667a:	2b00      	cmp	r3, #0
 800667c:	d118      	bne.n	80066b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800667e:	4b74      	ldr	r3, [pc, #464]	@ (8006850 <HAL_RCC_OscConfig+0x474>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a73      	ldr	r2, [pc, #460]	@ (8006850 <HAL_RCC_OscConfig+0x474>)
 8006684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800668a:	f7fd f97b 	bl	8003984 <HAL_GetTick>
 800668e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006690:	e008      	b.n	80066a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006692:	f7fd f977 	bl	8003984 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b02      	cmp	r3, #2
 800669e:	d901      	bls.n	80066a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e10c      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a4:	4b6a      	ldr	r3, [pc, #424]	@ (8006850 <HAL_RCC_OscConfig+0x474>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0f0      	beq.n	8006692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d106      	bne.n	80066c6 <HAL_RCC_OscConfig+0x2ea>
 80066b8:	4b64      	ldr	r3, [pc, #400]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066bc:	4a63      	ldr	r2, [pc, #396]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066be:	f043 0301 	orr.w	r3, r3, #1
 80066c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80066c4:	e01c      	b.n	8006700 <HAL_RCC_OscConfig+0x324>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2b05      	cmp	r3, #5
 80066cc:	d10c      	bne.n	80066e8 <HAL_RCC_OscConfig+0x30c>
 80066ce:	4b5f      	ldr	r3, [pc, #380]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d2:	4a5e      	ldr	r2, [pc, #376]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066d4:	f043 0304 	orr.w	r3, r3, #4
 80066d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80066da:	4b5c      	ldr	r3, [pc, #368]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066de:	4a5b      	ldr	r2, [pc, #364]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066e0:	f043 0301 	orr.w	r3, r3, #1
 80066e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80066e6:	e00b      	b.n	8006700 <HAL_RCC_OscConfig+0x324>
 80066e8:	4b58      	ldr	r3, [pc, #352]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ec:	4a57      	ldr	r2, [pc, #348]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066ee:	f023 0301 	bic.w	r3, r3, #1
 80066f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80066f4:	4b55      	ldr	r3, [pc, #340]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f8:	4a54      	ldr	r2, [pc, #336]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066fa:	f023 0304 	bic.w	r3, r3, #4
 80066fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d015      	beq.n	8006734 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006708:	f7fd f93c 	bl	8003984 <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800670e:	e00a      	b.n	8006726 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006710:	f7fd f938 	bl	8003984 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800671e:	4293      	cmp	r3, r2
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e0cb      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006726:	4b49      	ldr	r3, [pc, #292]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0ee      	beq.n	8006710 <HAL_RCC_OscConfig+0x334>
 8006732:	e014      	b.n	800675e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006734:	f7fd f926 	bl	8003984 <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800673a:	e00a      	b.n	8006752 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800673c:	f7fd f922 	bl	8003984 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800674a:	4293      	cmp	r3, r2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e0b5      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006752:	4b3e      	ldr	r3, [pc, #248]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1ee      	bne.n	800673c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800675e:	7dfb      	ldrb	r3, [r7, #23]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d105      	bne.n	8006770 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006764:	4b39      	ldr	r3, [pc, #228]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006768:	4a38      	ldr	r2, [pc, #224]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 800676a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800676e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80a1 	beq.w	80068bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800677a:	4b34      	ldr	r3, [pc, #208]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 030c 	and.w	r3, r3, #12
 8006782:	2b08      	cmp	r3, #8
 8006784:	d05c      	beq.n	8006840 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	2b02      	cmp	r3, #2
 800678c:	d141      	bne.n	8006812 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800678e:	4b31      	ldr	r3, [pc, #196]	@ (8006854 <HAL_RCC_OscConfig+0x478>)
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006794:	f7fd f8f6 	bl	8003984 <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800679c:	f7fd f8f2 	bl	8003984 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e087      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ae:	4b27      	ldr	r3, [pc, #156]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1f0      	bne.n	800679c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69da      	ldr	r2, [r3, #28]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c8:	019b      	lsls	r3, r3, #6
 80067ca:	431a      	orrs	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d0:	085b      	lsrs	r3, r3, #1
 80067d2:	3b01      	subs	r3, #1
 80067d4:	041b      	lsls	r3, r3, #16
 80067d6:	431a      	orrs	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067dc:	061b      	lsls	r3, r3, #24
 80067de:	491b      	ldr	r1, [pc, #108]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006854 <HAL_RCC_OscConfig+0x478>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ea:	f7fd f8cb 	bl	8003984 <HAL_GetTick>
 80067ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f2:	f7fd f8c7 	bl	8003984 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e05c      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006804:	4b11      	ldr	r3, [pc, #68]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0f0      	beq.n	80067f2 <HAL_RCC_OscConfig+0x416>
 8006810:	e054      	b.n	80068bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006812:	4b10      	ldr	r3, [pc, #64]	@ (8006854 <HAL_RCC_OscConfig+0x478>)
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006818:	f7fd f8b4 	bl	8003984 <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006820:	f7fd f8b0 	bl	8003984 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e045      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006832:	4b06      	ldr	r3, [pc, #24]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1f0      	bne.n	8006820 <HAL_RCC_OscConfig+0x444>
 800683e:	e03d      	b.n	80068bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d107      	bne.n	8006858 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e038      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
 800684c:	40023800 	.word	0x40023800
 8006850:	40007000 	.word	0x40007000
 8006854:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006858:	4b1b      	ldr	r3, [pc, #108]	@ (80068c8 <HAL_RCC_OscConfig+0x4ec>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d028      	beq.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006870:	429a      	cmp	r2, r3
 8006872:	d121      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687e:	429a      	cmp	r2, r3
 8006880:	d11a      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006888:	4013      	ands	r3, r2
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800688e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006890:	4293      	cmp	r3, r2
 8006892:	d111      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	3b01      	subs	r3, #1
 80068a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d107      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d001      	beq.n	80068bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e000      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	40023800 	.word	0x40023800

080068cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e0cc      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068e0:	4b68      	ldr	r3, [pc, #416]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d90c      	bls.n	8006908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ee:	4b65      	ldr	r3, [pc, #404]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f6:	4b63      	ldr	r3, [pc, #396]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	d001      	beq.n	8006908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e0b8      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d020      	beq.n	8006956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006920:	4b59      	ldr	r3, [pc, #356]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	4a58      	ldr	r2, [pc, #352]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006926:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800692a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b00      	cmp	r3, #0
 8006936:	d005      	beq.n	8006944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006938:	4b53      	ldr	r3, [pc, #332]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	4a52      	ldr	r2, [pc, #328]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800693e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006944:	4b50      	ldr	r3, [pc, #320]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	494d      	ldr	r1, [pc, #308]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006952:	4313      	orrs	r3, r2
 8006954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d044      	beq.n	80069ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d107      	bne.n	800697a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800696a:	4b47      	ldr	r3, [pc, #284]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d119      	bne.n	80069aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e07f      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2b02      	cmp	r3, #2
 8006980:	d003      	beq.n	800698a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006986:	2b03      	cmp	r3, #3
 8006988:	d107      	bne.n	800699a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800698a:	4b3f      	ldr	r3, [pc, #252]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d109      	bne.n	80069aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e06f      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800699a:	4b3b      	ldr	r3, [pc, #236]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e067      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069aa:	4b37      	ldr	r3, [pc, #220]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f023 0203 	bic.w	r2, r3, #3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	4934      	ldr	r1, [pc, #208]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069bc:	f7fc ffe2 	bl	8003984 <HAL_GetTick>
 80069c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069c2:	e00a      	b.n	80069da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069c4:	f7fc ffde 	bl	8003984 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e04f      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069da:	4b2b      	ldr	r3, [pc, #172]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 020c 	and.w	r2, r3, #12
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d1eb      	bne.n	80069c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069ec:	4b25      	ldr	r3, [pc, #148]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d20c      	bcs.n	8006a14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069fa:	4b22      	ldr	r3, [pc, #136]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	b2d2      	uxtb	r2, r2
 8006a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a02:	4b20      	ldr	r3, [pc, #128]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d001      	beq.n	8006a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e032      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d008      	beq.n	8006a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a20:	4b19      	ldr	r3, [pc, #100]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	4916      	ldr	r1, [pc, #88]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0308 	and.w	r3, r3, #8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d009      	beq.n	8006a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a3e:	4b12      	ldr	r3, [pc, #72]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	490e      	ldr	r1, [pc, #56]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a52:	f000 f821 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
 8006a56:	4602      	mov	r2, r0
 8006a58:	4b0b      	ldr	r3, [pc, #44]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	091b      	lsrs	r3, r3, #4
 8006a5e:	f003 030f 	and.w	r3, r3, #15
 8006a62:	490a      	ldr	r1, [pc, #40]	@ (8006a8c <HAL_RCC_ClockConfig+0x1c0>)
 8006a64:	5ccb      	ldrb	r3, [r1, r3]
 8006a66:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6a:	4a09      	ldr	r2, [pc, #36]	@ (8006a90 <HAL_RCC_ClockConfig+0x1c4>)
 8006a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006a6e:	4b09      	ldr	r3, [pc, #36]	@ (8006a94 <HAL_RCC_ClockConfig+0x1c8>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fc ff42 	bl	80038fc <HAL_InitTick>

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	40023c00 	.word	0x40023c00
 8006a88:	40023800 	.word	0x40023800
 8006a8c:	0800fe4c 	.word	0x0800fe4c
 8006a90:	20000000 	.word	0x20000000
 8006a94:	20000004 	.word	0x20000004

08006a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a9c:	b090      	sub	sp, #64	@ 0x40
 8006a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ab0:	4b59      	ldr	r3, [pc, #356]	@ (8006c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 030c 	and.w	r3, r3, #12
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d00d      	beq.n	8006ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	f200 80a1 	bhi.w	8006c04 <HAL_RCC_GetSysClockFreq+0x16c>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <HAL_RCC_GetSysClockFreq+0x34>
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d003      	beq.n	8006ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006aca:	e09b      	b.n	8006c04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006acc:	4b53      	ldr	r3, [pc, #332]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x184>)
 8006ace:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006ad0:	e09b      	b.n	8006c0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ad2:	4b53      	ldr	r3, [pc, #332]	@ (8006c20 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006ad6:	e098      	b.n	8006c0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8006c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ae0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ae2:	4b4d      	ldr	r3, [pc, #308]	@ (8006c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d028      	beq.n	8006b40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aee:	4b4a      	ldr	r3, [pc, #296]	@ (8006c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	099b      	lsrs	r3, r3, #6
 8006af4:	2200      	movs	r2, #0
 8006af6:	623b      	str	r3, [r7, #32]
 8006af8:	627a      	str	r2, [r7, #36]	@ 0x24
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006b00:	2100      	movs	r1, #0
 8006b02:	4b47      	ldr	r3, [pc, #284]	@ (8006c20 <HAL_RCC_GetSysClockFreq+0x188>)
 8006b04:	fb03 f201 	mul.w	r2, r3, r1
 8006b08:	2300      	movs	r3, #0
 8006b0a:	fb00 f303 	mul.w	r3, r0, r3
 8006b0e:	4413      	add	r3, r2
 8006b10:	4a43      	ldr	r2, [pc, #268]	@ (8006c20 <HAL_RCC_GetSysClockFreq+0x188>)
 8006b12:	fba0 1202 	umull	r1, r2, r0, r2
 8006b16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b18:	460a      	mov	r2, r1
 8006b1a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006b1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b1e:	4413      	add	r3, r2
 8006b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b24:	2200      	movs	r2, #0
 8006b26:	61bb      	str	r3, [r7, #24]
 8006b28:	61fa      	str	r2, [r7, #28]
 8006b2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006b32:	f7fa f841 	bl	8000bb8 <__aeabi_uldivmod>
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b3e:	e053      	b.n	8006be8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b40:	4b35      	ldr	r3, [pc, #212]	@ (8006c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	099b      	lsrs	r3, r3, #6
 8006b46:	2200      	movs	r2, #0
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	617a      	str	r2, [r7, #20]
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006b52:	f04f 0b00 	mov.w	fp, #0
 8006b56:	4652      	mov	r2, sl
 8006b58:	465b      	mov	r3, fp
 8006b5a:	f04f 0000 	mov.w	r0, #0
 8006b5e:	f04f 0100 	mov.w	r1, #0
 8006b62:	0159      	lsls	r1, r3, #5
 8006b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b68:	0150      	lsls	r0, r2, #5
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	ebb2 080a 	subs.w	r8, r2, sl
 8006b72:	eb63 090b 	sbc.w	r9, r3, fp
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006b82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006b86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006b8a:	ebb2 0408 	subs.w	r4, r2, r8
 8006b8e:	eb63 0509 	sbc.w	r5, r3, r9
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	f04f 0300 	mov.w	r3, #0
 8006b9a:	00eb      	lsls	r3, r5, #3
 8006b9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ba0:	00e2      	lsls	r2, r4, #3
 8006ba2:	4614      	mov	r4, r2
 8006ba4:	461d      	mov	r5, r3
 8006ba6:	eb14 030a 	adds.w	r3, r4, sl
 8006baa:	603b      	str	r3, [r7, #0]
 8006bac:	eb45 030b 	adc.w	r3, r5, fp
 8006bb0:	607b      	str	r3, [r7, #4]
 8006bb2:	f04f 0200 	mov.w	r2, #0
 8006bb6:	f04f 0300 	mov.w	r3, #0
 8006bba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	028b      	lsls	r3, r1, #10
 8006bc2:	4621      	mov	r1, r4
 8006bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bc8:	4621      	mov	r1, r4
 8006bca:	028a      	lsls	r2, r1, #10
 8006bcc:	4610      	mov	r0, r2
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	60bb      	str	r3, [r7, #8]
 8006bd6:	60fa      	str	r2, [r7, #12]
 8006bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bdc:	f7f9 ffec 	bl	8000bb8 <__aeabi_uldivmod>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	4613      	mov	r3, r2
 8006be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006be8:	4b0b      	ldr	r3, [pc, #44]	@ (8006c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	0c1b      	lsrs	r3, r3, #16
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006bf8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c00:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c02:	e002      	b.n	8006c0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c04:	4b05      	ldr	r3, [pc, #20]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x184>)
 8006c06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3740      	adds	r7, #64	@ 0x40
 8006c10:	46bd      	mov	sp, r7
 8006c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c16:	bf00      	nop
 8006c18:	40023800 	.word	0x40023800
 8006c1c:	00f42400 	.word	0x00f42400
 8006c20:	017d7840 	.word	0x017d7840

08006c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c28:	4b03      	ldr	r3, [pc, #12]	@ (8006c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	20000000 	.word	0x20000000

08006c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c40:	f7ff fff0 	bl	8006c24 <HAL_RCC_GetHCLKFreq>
 8006c44:	4602      	mov	r2, r0
 8006c46:	4b05      	ldr	r3, [pc, #20]	@ (8006c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	0a9b      	lsrs	r3, r3, #10
 8006c4c:	f003 0307 	and.w	r3, r3, #7
 8006c50:	4903      	ldr	r1, [pc, #12]	@ (8006c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c52:	5ccb      	ldrb	r3, [r1, r3]
 8006c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	40023800 	.word	0x40023800
 8006c60:	0800fe5c 	.word	0x0800fe5c

08006c64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e07b      	b.n	8006d6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d108      	bne.n	8006c90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c86:	d009      	beq.n	8006c9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	61da      	str	r2, [r3, #28]
 8006c8e:	e005      	b.n	8006c9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d106      	bne.n	8006cbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7fa fffa 	bl	8001cb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d16:	431a      	orrs	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d20:	ea42 0103 	orr.w	r1, r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d28:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	0c1b      	lsrs	r3, r3, #16
 8006d3a:	f003 0104 	and.w	r1, r3, #4
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d42:	f003 0210 	and.w	r2, r3, #16
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69da      	ldr	r2, [r3, #28]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b088      	sub	sp, #32
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	603b      	str	r3, [r7, #0]
 8006d82:	4613      	mov	r3, r2
 8006d84:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d86:	f7fc fdfd 	bl	8003984 <HAL_GetTick>
 8006d8a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006d8c:	88fb      	ldrh	r3, [r7, #6]
 8006d8e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d001      	beq.n	8006da0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	e12a      	b.n	8006ff6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <HAL_SPI_Transmit+0x36>
 8006da6:	88fb      	ldrh	r3, [r7, #6]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e122      	b.n	8006ff6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d101      	bne.n	8006dbe <HAL_SPI_Transmit+0x48>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e11b      	b.n	8006ff6 <HAL_SPI_Transmit+0x280>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2203      	movs	r2, #3
 8006dca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	88fa      	ldrh	r2, [r7, #6]
 8006dde:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	88fa      	ldrh	r2, [r7, #6]
 8006de4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e0c:	d10f      	bne.n	8006e2e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e38:	2b40      	cmp	r3, #64	@ 0x40
 8006e3a:	d007      	beq.n	8006e4c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e54:	d152      	bne.n	8006efc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <HAL_SPI_Transmit+0xee>
 8006e5e:	8b7b      	ldrh	r3, [r7, #26]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d145      	bne.n	8006ef0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e68:	881a      	ldrh	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e74:	1c9a      	adds	r2, r3, #2
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	3b01      	subs	r3, #1
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e88:	e032      	b.n	8006ef0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d112      	bne.n	8006ebe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e9c:	881a      	ldrh	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea8:	1c9a      	adds	r2, r3, #2
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006ebc:	e018      	b.n	8006ef0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ebe:	f7fc fd61 	bl	8003984 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d803      	bhi.n	8006ed6 <HAL_SPI_Transmit+0x160>
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ed4:	d102      	bne.n	8006edc <HAL_SPI_Transmit+0x166>
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d109      	bne.n	8006ef0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e082      	b.n	8006ff6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1c7      	bne.n	8006e8a <HAL_SPI_Transmit+0x114>
 8006efa:	e053      	b.n	8006fa4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <HAL_SPI_Transmit+0x194>
 8006f04:	8b7b      	ldrh	r3, [r7, #26]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d147      	bne.n	8006f9a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	330c      	adds	r3, #12
 8006f14:	7812      	ldrb	r2, [r2, #0]
 8006f16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f30:	e033      	b.n	8006f9a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f003 0302 	and.w	r3, r3, #2
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d113      	bne.n	8006f68 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	330c      	adds	r3, #12
 8006f4a:	7812      	ldrb	r2, [r2, #0]
 8006f4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006f66:	e018      	b.n	8006f9a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f68:	f7fc fd0c 	bl	8003984 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d803      	bhi.n	8006f80 <HAL_SPI_Transmit+0x20a>
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f7e:	d102      	bne.n	8006f86 <HAL_SPI_Transmit+0x210>
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d109      	bne.n	8006f9a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e02d      	b.n	8006ff6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1c6      	bne.n	8006f32 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fa4:	69fa      	ldr	r2, [r7, #28]
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 fbd9 	bl	8007760 <SPI_EndRxTxTransaction>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	617b      	str	r3, [r7, #20]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	617b      	str	r3, [r7, #20]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d001      	beq.n	8006ff4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e000      	b.n	8006ff6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
  }
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3720      	adds	r7, #32
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b088      	sub	sp, #32
 8007002:	af02      	add	r7, sp, #8
 8007004:	60f8      	str	r0, [r7, #12]
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	603b      	str	r3, [r7, #0]
 800700a:	4613      	mov	r3, r2
 800700c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b01      	cmp	r3, #1
 8007018:	d001      	beq.n	800701e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800701a:	2302      	movs	r3, #2
 800701c:	e104      	b.n	8007228 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007026:	d112      	bne.n	800704e <HAL_SPI_Receive+0x50>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10e      	bne.n	800704e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2204      	movs	r2, #4
 8007034:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007038:	88fa      	ldrh	r2, [r7, #6]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	4613      	mov	r3, r2
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	68b9      	ldr	r1, [r7, #8]
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f8f3 	bl	8007230 <HAL_SPI_TransmitReceive>
 800704a:	4603      	mov	r3, r0
 800704c:	e0ec      	b.n	8007228 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800704e:	f7fc fc99 	bl	8003984 <HAL_GetTick>
 8007052:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <HAL_SPI_Receive+0x62>
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e0e1      	b.n	8007228 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800706a:	2b01      	cmp	r3, #1
 800706c:	d101      	bne.n	8007072 <HAL_SPI_Receive+0x74>
 800706e:	2302      	movs	r3, #2
 8007070:	e0da      	b.n	8007228 <HAL_SPI_Receive+0x22a>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2204      	movs	r2, #4
 800707e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	88fa      	ldrh	r2, [r7, #6]
 8007092:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	88fa      	ldrh	r2, [r7, #6]
 8007098:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070c0:	d10f      	bne.n	80070e2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80070e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ec:	2b40      	cmp	r3, #64	@ 0x40
 80070ee:	d007      	beq.n	8007100 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d170      	bne.n	80071ea <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007108:	e035      	b.n	8007176 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b01      	cmp	r3, #1
 8007116:	d115      	bne.n	8007144 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f103 020c 	add.w	r2, r3, #12
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007124:	7812      	ldrb	r2, [r2, #0]
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007142:	e018      	b.n	8007176 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007144:	f7fc fc1e 	bl	8003984 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d803      	bhi.n	800715c <HAL_SPI_Receive+0x15e>
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800715a:	d102      	bne.n	8007162 <HAL_SPI_Receive+0x164>
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d109      	bne.n	8007176 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e058      	b.n	8007228 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800717a:	b29b      	uxth	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1c4      	bne.n	800710a <HAL_SPI_Receive+0x10c>
 8007180:	e038      	b.n	80071f4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	2b01      	cmp	r3, #1
 800718e:	d113      	bne.n	80071b8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68da      	ldr	r2, [r3, #12]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719a:	b292      	uxth	r2, r2
 800719c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a2:	1c9a      	adds	r2, r3, #2
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	3b01      	subs	r3, #1
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80071b6:	e018      	b.n	80071ea <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071b8:	f7fc fbe4 	bl	8003984 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d803      	bhi.n	80071d0 <HAL_SPI_Receive+0x1d2>
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071ce:	d102      	bne.n	80071d6 <HAL_SPI_Receive+0x1d8>
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d109      	bne.n	80071ea <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e01e      	b.n	8007228 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1c6      	bne.n	8007182 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 fa4b 	bl	8007694 <SPI_EndRxTransaction>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d002      	beq.n	800720a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2220      	movs	r2, #32
 8007208:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e000      	b.n	8007228 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007226:	2300      	movs	r3, #0
  }
}
 8007228:	4618      	mov	r0, r3
 800722a:	3718      	adds	r7, #24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b08a      	sub	sp, #40	@ 0x28
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800723e:	2301      	movs	r3, #1
 8007240:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007242:	f7fc fb9f 	bl	8003984 <HAL_GetTick>
 8007246:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800724e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007256:	887b      	ldrh	r3, [r7, #2]
 8007258:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800725a:	7ffb      	ldrb	r3, [r7, #31]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d00c      	beq.n	800727a <HAL_SPI_TransmitReceive+0x4a>
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007266:	d106      	bne.n	8007276 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d102      	bne.n	8007276 <HAL_SPI_TransmitReceive+0x46>
 8007270:	7ffb      	ldrb	r3, [r7, #31]
 8007272:	2b04      	cmp	r3, #4
 8007274:	d001      	beq.n	800727a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007276:	2302      	movs	r3, #2
 8007278:	e17f      	b.n	800757a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d005      	beq.n	800728c <HAL_SPI_TransmitReceive+0x5c>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <HAL_SPI_TransmitReceive+0x5c>
 8007286:	887b      	ldrh	r3, [r7, #2]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e174      	b.n	800757a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_SPI_TransmitReceive+0x6e>
 800729a:	2302      	movs	r3, #2
 800729c:	e16d      	b.n	800757a <HAL_SPI_TransmitReceive+0x34a>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d003      	beq.n	80072ba <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2205      	movs	r2, #5
 80072b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	887a      	ldrh	r2, [r7, #2]
 80072ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	887a      	ldrh	r2, [r7, #2]
 80072d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	887a      	ldrh	r2, [r7, #2]
 80072dc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	887a      	ldrh	r2, [r7, #2]
 80072e2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072fa:	2b40      	cmp	r3, #64	@ 0x40
 80072fc:	d007      	beq.n	800730e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800730c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007316:	d17e      	bne.n	8007416 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <HAL_SPI_TransmitReceive+0xf6>
 8007320:	8afb      	ldrh	r3, [r7, #22]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d16c      	bne.n	8007400 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732a:	881a      	ldrh	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007336:	1c9a      	adds	r2, r3, #2
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007340:	b29b      	uxth	r3, r3
 8007342:	3b01      	subs	r3, #1
 8007344:	b29a      	uxth	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800734a:	e059      	b.n	8007400 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b02      	cmp	r3, #2
 8007358:	d11b      	bne.n	8007392 <HAL_SPI_TransmitReceive+0x162>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800735e:	b29b      	uxth	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d016      	beq.n	8007392 <HAL_SPI_TransmitReceive+0x162>
 8007364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007366:	2b01      	cmp	r3, #1
 8007368:	d113      	bne.n	8007392 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736e:	881a      	ldrh	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800737a:	1c9a      	adds	r2, r3, #2
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b01      	cmp	r3, #1
 800739e:	d119      	bne.n	80073d4 <HAL_SPI_TransmitReceive+0x1a4>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d014      	beq.n	80073d4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b4:	b292      	uxth	r2, r2
 80073b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073bc:	1c9a      	adds	r2, r3, #2
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	3b01      	subs	r3, #1
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073d0:	2301      	movs	r3, #1
 80073d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073d4:	f7fc fad6 	bl	8003984 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d80d      	bhi.n	8007400 <HAL_SPI_TransmitReceive+0x1d0>
 80073e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073ea:	d009      	beq.n	8007400 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e0bc      	b.n	800757a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1a0      	bne.n	800734c <HAL_SPI_TransmitReceive+0x11c>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800740e:	b29b      	uxth	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d19b      	bne.n	800734c <HAL_SPI_TransmitReceive+0x11c>
 8007414:	e082      	b.n	800751c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <HAL_SPI_TransmitReceive+0x1f4>
 800741e:	8afb      	ldrh	r3, [r7, #22]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d171      	bne.n	8007508 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	330c      	adds	r3, #12
 800742e:	7812      	ldrb	r2, [r2, #0]
 8007430:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007440:	b29b      	uxth	r3, r3
 8007442:	3b01      	subs	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800744a:	e05d      	b.n	8007508 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b02      	cmp	r3, #2
 8007458:	d11c      	bne.n	8007494 <HAL_SPI_TransmitReceive+0x264>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800745e:	b29b      	uxth	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	d017      	beq.n	8007494 <HAL_SPI_TransmitReceive+0x264>
 8007464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007466:	2b01      	cmp	r3, #1
 8007468:	d114      	bne.n	8007494 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	330c      	adds	r3, #12
 8007474:	7812      	ldrb	r2, [r2, #0]
 8007476:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007486:	b29b      	uxth	r3, r3
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d119      	bne.n	80074d6 <HAL_SPI_TransmitReceive+0x2a6>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d014      	beq.n	80074d6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b6:	b2d2      	uxtb	r2, r2
 80074b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074d2:	2301      	movs	r3, #1
 80074d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80074d6:	f7fc fa55 	bl	8003984 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d803      	bhi.n	80074ee <HAL_SPI_TransmitReceive+0x2be>
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074ec:	d102      	bne.n	80074f4 <HAL_SPI_TransmitReceive+0x2c4>
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d109      	bne.n	8007508 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e038      	b.n	800757a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d19c      	bne.n	800744c <HAL_SPI_TransmitReceive+0x21c>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007516:	b29b      	uxth	r3, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	d197      	bne.n	800744c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800751c:	6a3a      	ldr	r2, [r7, #32]
 800751e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 f91d 	bl	8007760 <SPI_EndRxTxTransaction>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d008      	beq.n	800753e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2220      	movs	r2, #32
 8007530:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e01d      	b.n	800757a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10a      	bne.n	800755c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007546:	2300      	movs	r3, #0
 8007548:	613b      	str	r3, [r7, #16]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	613b      	str	r3, [r7, #16]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	613b      	str	r3, [r7, #16]
 800755a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e000      	b.n	800757a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007578:	2300      	movs	r3, #0
  }
}
 800757a:	4618      	mov	r0, r3
 800757c:	3728      	adds	r7, #40	@ 0x28
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b088      	sub	sp, #32
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	603b      	str	r3, [r7, #0]
 8007590:	4613      	mov	r3, r2
 8007592:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007594:	f7fc f9f6 	bl	8003984 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759c:	1a9b      	subs	r3, r3, r2
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	4413      	add	r3, r2
 80075a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80075a4:	f7fc f9ee 	bl	8003984 <HAL_GetTick>
 80075a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80075aa:	4b39      	ldr	r3, [pc, #228]	@ (8007690 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	015b      	lsls	r3, r3, #5
 80075b0:	0d1b      	lsrs	r3, r3, #20
 80075b2:	69fa      	ldr	r2, [r7, #28]
 80075b4:	fb02 f303 	mul.w	r3, r2, r3
 80075b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075ba:	e054      	b.n	8007666 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075c2:	d050      	beq.n	8007666 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80075c4:	f7fc f9de 	bl	8003984 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	69fa      	ldr	r2, [r7, #28]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d902      	bls.n	80075da <SPI_WaitFlagStateUntilTimeout+0x56>
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d13d      	bne.n	8007656 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80075e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075f2:	d111      	bne.n	8007618 <SPI_WaitFlagStateUntilTimeout+0x94>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075fc:	d004      	beq.n	8007608 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007606:	d107      	bne.n	8007618 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007616:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007620:	d10f      	bne.n	8007642 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007640:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e017      	b.n	8007686 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	3b01      	subs	r3, #1
 8007664:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	4013      	ands	r3, r2
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	429a      	cmp	r2, r3
 8007674:	bf0c      	ite	eq
 8007676:	2301      	moveq	r3, #1
 8007678:	2300      	movne	r3, #0
 800767a:	b2db      	uxtb	r3, r3
 800767c:	461a      	mov	r2, r3
 800767e:	79fb      	ldrb	r3, [r7, #7]
 8007680:	429a      	cmp	r2, r3
 8007682:	d19b      	bne.n	80075bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3720      	adds	r7, #32
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20000000 	.word	0x20000000

08007694 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af02      	add	r7, sp, #8
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076a8:	d111      	bne.n	80076ce <SPI_EndRxTransaction+0x3a>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076b2:	d004      	beq.n	80076be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076bc:	d107      	bne.n	80076ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076d6:	d12a      	bne.n	800772e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076e0:	d012      	beq.n	8007708 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2200      	movs	r2, #0
 80076ea:	2180      	movs	r1, #128	@ 0x80
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f7ff ff49 	bl	8007584 <SPI_WaitFlagStateUntilTimeout>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d02d      	beq.n	8007754 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076fc:	f043 0220 	orr.w	r2, r3, #32
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e026      	b.n	8007756 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2200      	movs	r2, #0
 8007710:	2101      	movs	r1, #1
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f7ff ff36 	bl	8007584 <SPI_WaitFlagStateUntilTimeout>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d01a      	beq.n	8007754 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007722:	f043 0220 	orr.w	r2, r3, #32
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e013      	b.n	8007756 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2200      	movs	r2, #0
 8007736:	2101      	movs	r1, #1
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f7ff ff23 	bl	8007584 <SPI_WaitFlagStateUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d007      	beq.n	8007754 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007748:	f043 0220 	orr.w	r2, r3, #32
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e000      	b.n	8007756 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
	...

08007760 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af02      	add	r7, sp, #8
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2201      	movs	r2, #1
 8007774:	2102      	movs	r1, #2
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f7ff ff04 	bl	8007584 <SPI_WaitFlagStateUntilTimeout>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d007      	beq.n	8007792 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007786:	f043 0220 	orr.w	r2, r3, #32
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e032      	b.n	80077f8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007792:	4b1b      	ldr	r3, [pc, #108]	@ (8007800 <SPI_EndRxTxTransaction+0xa0>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a1b      	ldr	r2, [pc, #108]	@ (8007804 <SPI_EndRxTxTransaction+0xa4>)
 8007798:	fba2 2303 	umull	r2, r3, r2, r3
 800779c:	0d5b      	lsrs	r3, r3, #21
 800779e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80077a2:	fb02 f303 	mul.w	r3, r2, r3
 80077a6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077b0:	d112      	bne.n	80077d8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2200      	movs	r2, #0
 80077ba:	2180      	movs	r1, #128	@ 0x80
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f7ff fee1 	bl	8007584 <SPI_WaitFlagStateUntilTimeout>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d016      	beq.n	80077f6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077cc:	f043 0220 	orr.w	r2, r3, #32
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e00f      	b.n	80077f8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ee:	2b80      	cmp	r3, #128	@ 0x80
 80077f0:	d0f2      	beq.n	80077d8 <SPI_EndRxTxTransaction+0x78>
 80077f2:	e000      	b.n	80077f6 <SPI_EndRxTxTransaction+0x96>
        break;
 80077f4:	bf00      	nop
  }

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3718      	adds	r7, #24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	20000000 	.word	0x20000000
 8007804:	165e9f81 	.word	0x165e9f81

08007808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e041      	b.n	800789e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7fa fa86 	bl	8001d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3304      	adds	r3, #4
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f000 fcea 	bl	8008220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e041      	b.n	800793c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d106      	bne.n	80078d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f839 	bl	8007944 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2202      	movs	r2, #2
 80078d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	3304      	adds	r3, #4
 80078e2:	4619      	mov	r1, r3
 80078e4:	4610      	mov	r0, r2
 80078e6:	f000 fc9b 	bl	8008220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d109      	bne.n	800797c <HAL_TIM_PWM_Start+0x24>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b01      	cmp	r3, #1
 8007972:	bf14      	ite	ne
 8007974:	2301      	movne	r3, #1
 8007976:	2300      	moveq	r3, #0
 8007978:	b2db      	uxtb	r3, r3
 800797a:	e022      	b.n	80079c2 <HAL_TIM_PWM_Start+0x6a>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	2b04      	cmp	r3, #4
 8007980:	d109      	bne.n	8007996 <HAL_TIM_PWM_Start+0x3e>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b01      	cmp	r3, #1
 800798c:	bf14      	ite	ne
 800798e:	2301      	movne	r3, #1
 8007990:	2300      	moveq	r3, #0
 8007992:	b2db      	uxtb	r3, r3
 8007994:	e015      	b.n	80079c2 <HAL_TIM_PWM_Start+0x6a>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b08      	cmp	r3, #8
 800799a:	d109      	bne.n	80079b0 <HAL_TIM_PWM_Start+0x58>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	bf14      	ite	ne
 80079a8:	2301      	movne	r3, #1
 80079aa:	2300      	moveq	r3, #0
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	e008      	b.n	80079c2 <HAL_TIM_PWM_Start+0x6a>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	bf14      	ite	ne
 80079bc:	2301      	movne	r3, #1
 80079be:	2300      	moveq	r3, #0
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e068      	b.n	8007a9c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d104      	bne.n	80079da <HAL_TIM_PWM_Start+0x82>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079d8:	e013      	b.n	8007a02 <HAL_TIM_PWM_Start+0xaa>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d104      	bne.n	80079ea <HAL_TIM_PWM_Start+0x92>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079e8:	e00b      	b.n	8007a02 <HAL_TIM_PWM_Start+0xaa>
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d104      	bne.n	80079fa <HAL_TIM_PWM_Start+0xa2>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079f8:	e003      	b.n	8007a02 <HAL_TIM_PWM_Start+0xaa>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2202      	movs	r2, #2
 80079fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2201      	movs	r2, #1
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 ffd8 	bl	80089c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a23      	ldr	r2, [pc, #140]	@ (8007aa4 <HAL_TIM_PWM_Start+0x14c>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d107      	bne.n	8007a2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8007aa4 <HAL_TIM_PWM_Start+0x14c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d018      	beq.n	8007a66 <HAL_TIM_PWM_Start+0x10e>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a3c:	d013      	beq.n	8007a66 <HAL_TIM_PWM_Start+0x10e>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a19      	ldr	r2, [pc, #100]	@ (8007aa8 <HAL_TIM_PWM_Start+0x150>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d00e      	beq.n	8007a66 <HAL_TIM_PWM_Start+0x10e>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a17      	ldr	r2, [pc, #92]	@ (8007aac <HAL_TIM_PWM_Start+0x154>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d009      	beq.n	8007a66 <HAL_TIM_PWM_Start+0x10e>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a16      	ldr	r2, [pc, #88]	@ (8007ab0 <HAL_TIM_PWM_Start+0x158>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d004      	beq.n	8007a66 <HAL_TIM_PWM_Start+0x10e>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a14      	ldr	r2, [pc, #80]	@ (8007ab4 <HAL_TIM_PWM_Start+0x15c>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d111      	bne.n	8007a8a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b06      	cmp	r3, #6
 8007a76:	d010      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f042 0201 	orr.w	r2, r2, #1
 8007a86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a88:	e007      	b.n	8007a9a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f042 0201 	orr.w	r2, r2, #1
 8007a98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	40010000 	.word	0x40010000
 8007aa8:	40000400 	.word	0x40000400
 8007aac:	40000800 	.word	0x40000800
 8007ab0:	40000c00 	.word	0x40000c00
 8007ab4:	40014000 	.word	0x40014000

08007ab8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e041      	b.n	8007b4e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d106      	bne.n	8007ae4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f839 	bl	8007b56 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3304      	adds	r3, #4
 8007af4:	4619      	mov	r1, r3
 8007af6:	4610      	mov	r0, r2
 8007af8:	f000 fb92 	bl	8008220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e097      	b.n	8007cae <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d106      	bne.n	8007b98 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7fa f930 	bl	8001df8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	6812      	ldr	r2, [r2, #0]
 8007baa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bae:	f023 0307 	bic.w	r3, r3, #7
 8007bb2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	f000 fb2e 	bl	8008220 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bec:	f023 0303 	bic.w	r3, r3, #3
 8007bf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	689a      	ldr	r2, [r3, #8]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	021b      	lsls	r3, r3, #8
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007c0a:	f023 030c 	bic.w	r3, r3, #12
 8007c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007c16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	68da      	ldr	r2, [r3, #12]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	021b      	lsls	r3, r3, #8
 8007c26:	4313      	orrs	r3, r2
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	011a      	lsls	r2, r3, #4
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	6a1b      	ldr	r3, [r3, #32]
 8007c38:	031b      	lsls	r3, r3, #12
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007c48:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007c50:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	011b      	lsls	r3, r3, #4
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007cc6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007cce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007cd6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007cde:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d110      	bne.n	8007d08 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d102      	bne.n	8007cf2 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007cec:	7b7b      	ldrb	r3, [r7, #13]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d001      	beq.n	8007cf6 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e069      	b.n	8007dca <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2202      	movs	r2, #2
 8007d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d06:	e031      	b.n	8007d6c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2b04      	cmp	r3, #4
 8007d0c:	d110      	bne.n	8007d30 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d0e:	7bbb      	ldrb	r3, [r7, #14]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d102      	bne.n	8007d1a <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d14:	7b3b      	ldrb	r3, [r7, #12]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d001      	beq.n	8007d1e <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e055      	b.n	8007dca <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2202      	movs	r2, #2
 8007d22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2202      	movs	r2, #2
 8007d2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d2e:	e01d      	b.n	8007d6c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d108      	bne.n	8007d48 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d105      	bne.n	8007d48 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d3c:	7b7b      	ldrb	r3, [r7, #13]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d102      	bne.n	8007d48 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d42:	7b3b      	ldrb	r3, [r7, #12]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d001      	beq.n	8007d4c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e03e      	b.n	8007dca <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2202      	movs	r2, #2
 8007d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <HAL_TIM_Encoder_Start+0xc4>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d008      	beq.n	8007d8a <HAL_TIM_Encoder_Start+0xd4>
 8007d78:	e00f      	b.n	8007d9a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	2100      	movs	r1, #0
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 fe1c 	bl	80089c0 <TIM_CCxChannelCmd>
      break;
 8007d88:	e016      	b.n	8007db8 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	2104      	movs	r1, #4
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fe14 	bl	80089c0 <TIM_CCxChannelCmd>
      break;
 8007d98:	e00e      	b.n	8007db8 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	2100      	movs	r1, #0
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 fe0c 	bl	80089c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2201      	movs	r2, #1
 8007dae:	2104      	movs	r1, #4
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 fe05 	bl	80089c0 <TIM_CCxChannelCmd>
      break;
 8007db6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f042 0201 	orr.w	r2, r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b086      	sub	sp, #24
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d101      	bne.n	8007df0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e088      	b.n	8007f02 <HAL_TIM_IC_ConfigChannel+0x130>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d11b      	bne.n	8007e36 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007e0e:	f000 fc1f 	bl	8008650 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	699a      	ldr	r2, [r3, #24]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 020c 	bic.w	r2, r2, #12
 8007e20:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6999      	ldr	r1, [r3, #24]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	689a      	ldr	r2, [r3, #8]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	619a      	str	r2, [r3, #24]
 8007e34:	e060      	b.n	8007ef8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	d11c      	bne.n	8007e76 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007e4c:	f000 fc97 	bl	800877e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699a      	ldr	r2, [r3, #24]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007e5e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6999      	ldr	r1, [r3, #24]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	021a      	lsls	r2, r3, #8
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	430a      	orrs	r2, r1
 8007e72:	619a      	str	r2, [r3, #24]
 8007e74:	e040      	b.n	8007ef8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b08      	cmp	r3, #8
 8007e7a:	d11b      	bne.n	8007eb4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007e8c:	f000 fce4 	bl	8008858 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	69da      	ldr	r2, [r3, #28]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f022 020c 	bic.w	r2, r2, #12
 8007e9e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	69d9      	ldr	r1, [r3, #28]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	61da      	str	r2, [r3, #28]
 8007eb2:	e021      	b.n	8007ef8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b0c      	cmp	r3, #12
 8007eb8:	d11c      	bne.n	8007ef4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007eca:	f000 fd01 	bl	80088d0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	69da      	ldr	r2, [r3, #28]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007edc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	69d9      	ldr	r1, [r3, #28]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	021a      	lsls	r2, r3, #8
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	61da      	str	r2, [r3, #28]
 8007ef2:	e001      	b.n	8007ef8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
	...

08007f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d101      	bne.n	8007f2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f26:	2302      	movs	r3, #2
 8007f28:	e0ae      	b.n	8008088 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b0c      	cmp	r3, #12
 8007f36:	f200 809f 	bhi.w	8008078 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f40:	08007f75 	.word	0x08007f75
 8007f44:	08008079 	.word	0x08008079
 8007f48:	08008079 	.word	0x08008079
 8007f4c:	08008079 	.word	0x08008079
 8007f50:	08007fb5 	.word	0x08007fb5
 8007f54:	08008079 	.word	0x08008079
 8007f58:	08008079 	.word	0x08008079
 8007f5c:	08008079 	.word	0x08008079
 8007f60:	08007ff7 	.word	0x08007ff7
 8007f64:	08008079 	.word	0x08008079
 8007f68:	08008079 	.word	0x08008079
 8007f6c:	08008079 	.word	0x08008079
 8007f70:	08008037 	.word	0x08008037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68b9      	ldr	r1, [r7, #8]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 f9dc 	bl	8008338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	699a      	ldr	r2, [r3, #24]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f042 0208 	orr.w	r2, r2, #8
 8007f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	699a      	ldr	r2, [r3, #24]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f022 0204 	bic.w	r2, r2, #4
 8007f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6999      	ldr	r1, [r3, #24]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	691a      	ldr	r2, [r3, #16]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	619a      	str	r2, [r3, #24]
      break;
 8007fb2:	e064      	b.n	800807e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68b9      	ldr	r1, [r7, #8]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fa22 	bl	8008404 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699a      	ldr	r2, [r3, #24]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	699a      	ldr	r2, [r3, #24]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6999      	ldr	r1, [r3, #24]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	021a      	lsls	r2, r3, #8
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	619a      	str	r2, [r3, #24]
      break;
 8007ff4:	e043      	b.n	800807e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68b9      	ldr	r1, [r7, #8]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fa6d 	bl	80084dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69da      	ldr	r2, [r3, #28]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f042 0208 	orr.w	r2, r2, #8
 8008010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69da      	ldr	r2, [r3, #28]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0204 	bic.w	r2, r2, #4
 8008020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69d9      	ldr	r1, [r3, #28]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	691a      	ldr	r2, [r3, #16]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	430a      	orrs	r2, r1
 8008032:	61da      	str	r2, [r3, #28]
      break;
 8008034:	e023      	b.n	800807e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68b9      	ldr	r1, [r7, #8]
 800803c:	4618      	mov	r0, r3
 800803e:	f000 fab7 	bl	80085b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69da      	ldr	r2, [r3, #28]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	69da      	ldr	r2, [r3, #28]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	69d9      	ldr	r1, [r3, #28]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	021a      	lsls	r2, r3, #8
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	61da      	str	r2, [r3, #28]
      break;
 8008076:	e002      	b.n	800807e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	75fb      	strb	r3, [r7, #23]
      break;
 800807c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008086:	7dfb      	ldrb	r3, [r7, #23]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3718      	adds	r7, #24
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d101      	bne.n	80080ac <HAL_TIM_ConfigClockSource+0x1c>
 80080a8:	2302      	movs	r3, #2
 80080aa:	e0b4      	b.n	8008216 <HAL_TIM_ConfigClockSource+0x186>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2202      	movs	r2, #2
 80080b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80080ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080e4:	d03e      	beq.n	8008164 <HAL_TIM_ConfigClockSource+0xd4>
 80080e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080ea:	f200 8087 	bhi.w	80081fc <HAL_TIM_ConfigClockSource+0x16c>
 80080ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080f2:	f000 8086 	beq.w	8008202 <HAL_TIM_ConfigClockSource+0x172>
 80080f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080fa:	d87f      	bhi.n	80081fc <HAL_TIM_ConfigClockSource+0x16c>
 80080fc:	2b70      	cmp	r3, #112	@ 0x70
 80080fe:	d01a      	beq.n	8008136 <HAL_TIM_ConfigClockSource+0xa6>
 8008100:	2b70      	cmp	r3, #112	@ 0x70
 8008102:	d87b      	bhi.n	80081fc <HAL_TIM_ConfigClockSource+0x16c>
 8008104:	2b60      	cmp	r3, #96	@ 0x60
 8008106:	d050      	beq.n	80081aa <HAL_TIM_ConfigClockSource+0x11a>
 8008108:	2b60      	cmp	r3, #96	@ 0x60
 800810a:	d877      	bhi.n	80081fc <HAL_TIM_ConfigClockSource+0x16c>
 800810c:	2b50      	cmp	r3, #80	@ 0x50
 800810e:	d03c      	beq.n	800818a <HAL_TIM_ConfigClockSource+0xfa>
 8008110:	2b50      	cmp	r3, #80	@ 0x50
 8008112:	d873      	bhi.n	80081fc <HAL_TIM_ConfigClockSource+0x16c>
 8008114:	2b40      	cmp	r3, #64	@ 0x40
 8008116:	d058      	beq.n	80081ca <HAL_TIM_ConfigClockSource+0x13a>
 8008118:	2b40      	cmp	r3, #64	@ 0x40
 800811a:	d86f      	bhi.n	80081fc <HAL_TIM_ConfigClockSource+0x16c>
 800811c:	2b30      	cmp	r3, #48	@ 0x30
 800811e:	d064      	beq.n	80081ea <HAL_TIM_ConfigClockSource+0x15a>
 8008120:	2b30      	cmp	r3, #48	@ 0x30
 8008122:	d86b      	bhi.n	80081fc <HAL_TIM_ConfigClockSource+0x16c>
 8008124:	2b20      	cmp	r3, #32
 8008126:	d060      	beq.n	80081ea <HAL_TIM_ConfigClockSource+0x15a>
 8008128:	2b20      	cmp	r3, #32
 800812a:	d867      	bhi.n	80081fc <HAL_TIM_ConfigClockSource+0x16c>
 800812c:	2b00      	cmp	r3, #0
 800812e:	d05c      	beq.n	80081ea <HAL_TIM_ConfigClockSource+0x15a>
 8008130:	2b10      	cmp	r3, #16
 8008132:	d05a      	beq.n	80081ea <HAL_TIM_ConfigClockSource+0x15a>
 8008134:	e062      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008146:	f000 fc1b 	bl	8008980 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	609a      	str	r2, [r3, #8]
      break;
 8008162:	e04f      	b.n	8008204 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008174:	f000 fc04 	bl	8008980 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689a      	ldr	r2, [r3, #8]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008186:	609a      	str	r2, [r3, #8]
      break;
 8008188:	e03c      	b.n	8008204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008196:	461a      	mov	r2, r3
 8008198:	f000 fac2 	bl	8008720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2150      	movs	r1, #80	@ 0x50
 80081a2:	4618      	mov	r0, r3
 80081a4:	f000 fbd1 	bl	800894a <TIM_ITRx_SetConfig>
      break;
 80081a8:	e02c      	b.n	8008204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081b6:	461a      	mov	r2, r3
 80081b8:	f000 fb1e 	bl	80087f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2160      	movs	r1, #96	@ 0x60
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 fbc1 	bl	800894a <TIM_ITRx_SetConfig>
      break;
 80081c8:	e01c      	b.n	8008204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081d6:	461a      	mov	r2, r3
 80081d8:	f000 faa2 	bl	8008720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2140      	movs	r1, #64	@ 0x40
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 fbb1 	bl	800894a <TIM_ITRx_SetConfig>
      break;
 80081e8:	e00c      	b.n	8008204 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4619      	mov	r1, r3
 80081f4:	4610      	mov	r0, r2
 80081f6:	f000 fba8 	bl	800894a <TIM_ITRx_SetConfig>
      break;
 80081fa:	e003      	b.n	8008204 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008200:	e000      	b.n	8008204 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008214:	7bfb      	ldrb	r3, [r7, #15]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
	...

08008220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a3a      	ldr	r2, [pc, #232]	@ (800831c <TIM_Base_SetConfig+0xfc>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d00f      	beq.n	8008258 <TIM_Base_SetConfig+0x38>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800823e:	d00b      	beq.n	8008258 <TIM_Base_SetConfig+0x38>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a37      	ldr	r2, [pc, #220]	@ (8008320 <TIM_Base_SetConfig+0x100>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d007      	beq.n	8008258 <TIM_Base_SetConfig+0x38>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a36      	ldr	r2, [pc, #216]	@ (8008324 <TIM_Base_SetConfig+0x104>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d003      	beq.n	8008258 <TIM_Base_SetConfig+0x38>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a35      	ldr	r2, [pc, #212]	@ (8008328 <TIM_Base_SetConfig+0x108>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d108      	bne.n	800826a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800825e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a2b      	ldr	r2, [pc, #172]	@ (800831c <TIM_Base_SetConfig+0xfc>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d01b      	beq.n	80082aa <TIM_Base_SetConfig+0x8a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008278:	d017      	beq.n	80082aa <TIM_Base_SetConfig+0x8a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a28      	ldr	r2, [pc, #160]	@ (8008320 <TIM_Base_SetConfig+0x100>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d013      	beq.n	80082aa <TIM_Base_SetConfig+0x8a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a27      	ldr	r2, [pc, #156]	@ (8008324 <TIM_Base_SetConfig+0x104>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d00f      	beq.n	80082aa <TIM_Base_SetConfig+0x8a>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a26      	ldr	r2, [pc, #152]	@ (8008328 <TIM_Base_SetConfig+0x108>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d00b      	beq.n	80082aa <TIM_Base_SetConfig+0x8a>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a25      	ldr	r2, [pc, #148]	@ (800832c <TIM_Base_SetConfig+0x10c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d007      	beq.n	80082aa <TIM_Base_SetConfig+0x8a>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a24      	ldr	r2, [pc, #144]	@ (8008330 <TIM_Base_SetConfig+0x110>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d003      	beq.n	80082aa <TIM_Base_SetConfig+0x8a>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a23      	ldr	r2, [pc, #140]	@ (8008334 <TIM_Base_SetConfig+0x114>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d108      	bne.n	80082bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	689a      	ldr	r2, [r3, #8]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a0e      	ldr	r2, [pc, #56]	@ (800831c <TIM_Base_SetConfig+0xfc>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d103      	bne.n	80082f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	691a      	ldr	r2, [r3, #16]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d105      	bne.n	800830e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f023 0201 	bic.w	r2, r3, #1
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	611a      	str	r2, [r3, #16]
  }
}
 800830e:	bf00      	nop
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	40010000 	.word	0x40010000
 8008320:	40000400 	.word	0x40000400
 8008324:	40000800 	.word	0x40000800
 8008328:	40000c00 	.word	0x40000c00
 800832c:	40014000 	.word	0x40014000
 8008330:	40014400 	.word	0x40014400
 8008334:	40014800 	.word	0x40014800

08008338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a1b      	ldr	r3, [r3, #32]
 800834c:	f023 0201 	bic.w	r2, r3, #1
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f023 0303 	bic.w	r3, r3, #3
 800836e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f023 0302 	bic.w	r3, r3, #2
 8008380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	4313      	orrs	r3, r2
 800838a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a1c      	ldr	r2, [pc, #112]	@ (8008400 <TIM_OC1_SetConfig+0xc8>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d10c      	bne.n	80083ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f023 0308 	bic.w	r3, r3, #8
 800839a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f023 0304 	bic.w	r3, r3, #4
 80083ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a13      	ldr	r2, [pc, #76]	@ (8008400 <TIM_OC1_SetConfig+0xc8>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d111      	bne.n	80083da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	685a      	ldr	r2, [r3, #4]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	621a      	str	r2, [r3, #32]
}
 80083f4:	bf00      	nop
 80083f6:	371c      	adds	r7, #28
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr
 8008400:	40010000 	.word	0x40010000

08008404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	f023 0210 	bic.w	r2, r3, #16
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800843a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	021b      	lsls	r3, r3, #8
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	4313      	orrs	r3, r2
 8008446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f023 0320 	bic.w	r3, r3, #32
 800844e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	011b      	lsls	r3, r3, #4
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	4313      	orrs	r3, r2
 800845a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a1e      	ldr	r2, [pc, #120]	@ (80084d8 <TIM_OC2_SetConfig+0xd4>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d10d      	bne.n	8008480 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800846a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	011b      	lsls	r3, r3, #4
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	4313      	orrs	r3, r2
 8008476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800847e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a15      	ldr	r2, [pc, #84]	@ (80084d8 <TIM_OC2_SetConfig+0xd4>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d113      	bne.n	80084b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800848e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008496:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	621a      	str	r2, [r3, #32]
}
 80084ca:	bf00      	nop
 80084cc:	371c      	adds	r7, #28
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	40010000 	.word	0x40010000

080084dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	69db      	ldr	r3, [r3, #28]
 8008502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800850a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f023 0303 	bic.w	r3, r3, #3
 8008512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	4313      	orrs	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	021b      	lsls	r3, r3, #8
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	4313      	orrs	r3, r2
 8008530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a1d      	ldr	r2, [pc, #116]	@ (80085ac <TIM_OC3_SetConfig+0xd0>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d10d      	bne.n	8008556 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	021b      	lsls	r3, r3, #8
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	4313      	orrs	r3, r2
 800854c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a14      	ldr	r2, [pc, #80]	@ (80085ac <TIM_OC3_SetConfig+0xd0>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d113      	bne.n	8008586 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800856c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	011b      	lsls	r3, r3, #4
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	4313      	orrs	r3, r2
 8008578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	011b      	lsls	r3, r3, #4
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	4313      	orrs	r3, r2
 8008584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	621a      	str	r2, [r3, #32]
}
 80085a0:	bf00      	nop
 80085a2:	371c      	adds	r7, #28
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	40010000 	.word	0x40010000

080085b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	021b      	lsls	r3, r3, #8
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80085fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	031b      	lsls	r3, r3, #12
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	4313      	orrs	r3, r2
 8008606:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a10      	ldr	r2, [pc, #64]	@ (800864c <TIM_OC4_SetConfig+0x9c>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d109      	bne.n	8008624 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008616:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	019b      	lsls	r3, r3, #6
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	4313      	orrs	r3, r2
 8008622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	621a      	str	r2, [r3, #32]
}
 800863e:	bf00      	nop
 8008640:	371c      	adds	r7, #28
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	40010000 	.word	0x40010000

08008650 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
 800865c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	f023 0201 	bic.w	r2, r3, #1
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	4a24      	ldr	r2, [pc, #144]	@ (800870c <TIM_TI1_SetConfig+0xbc>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d013      	beq.n	80086a6 <TIM_TI1_SetConfig+0x56>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008684:	d00f      	beq.n	80086a6 <TIM_TI1_SetConfig+0x56>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	4a21      	ldr	r2, [pc, #132]	@ (8008710 <TIM_TI1_SetConfig+0xc0>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d00b      	beq.n	80086a6 <TIM_TI1_SetConfig+0x56>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	4a20      	ldr	r2, [pc, #128]	@ (8008714 <TIM_TI1_SetConfig+0xc4>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d007      	beq.n	80086a6 <TIM_TI1_SetConfig+0x56>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	4a1f      	ldr	r2, [pc, #124]	@ (8008718 <TIM_TI1_SetConfig+0xc8>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d003      	beq.n	80086a6 <TIM_TI1_SetConfig+0x56>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	4a1e      	ldr	r2, [pc, #120]	@ (800871c <TIM_TI1_SetConfig+0xcc>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d101      	bne.n	80086aa <TIM_TI1_SetConfig+0x5a>
 80086a6:	2301      	movs	r3, #1
 80086a8:	e000      	b.n	80086ac <TIM_TI1_SetConfig+0x5c>
 80086aa:	2300      	movs	r3, #0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d008      	beq.n	80086c2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f023 0303 	bic.w	r3, r3, #3
 80086b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4313      	orrs	r3, r2
 80086be:	617b      	str	r3, [r7, #20]
 80086c0:	e003      	b.n	80086ca <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f043 0301 	orr.w	r3, r3, #1
 80086c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	011b      	lsls	r3, r3, #4
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	4313      	orrs	r3, r2
 80086dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	f023 030a 	bic.w	r3, r3, #10
 80086e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	f003 030a 	and.w	r3, r3, #10
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	621a      	str	r2, [r3, #32]
}
 80086fe:	bf00      	nop
 8008700:	371c      	adds	r7, #28
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	40010000 	.word	0x40010000
 8008710:	40000400 	.word	0x40000400
 8008714:	40000800 	.word	0x40000800
 8008718:	40000c00 	.word	0x40000c00
 800871c:	40014000 	.word	0x40014000

08008720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008720:	b480      	push	{r7}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6a1b      	ldr	r3, [r3, #32]
 8008730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	f023 0201 	bic.w	r2, r3, #1
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800874a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	011b      	lsls	r3, r3, #4
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	4313      	orrs	r3, r2
 8008754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f023 030a 	bic.w	r3, r3, #10
 800875c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	4313      	orrs	r3, r2
 8008764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	621a      	str	r2, [r3, #32]
}
 8008772:	bf00      	nop
 8008774:	371c      	adds	r7, #28
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800877e:	b480      	push	{r7}
 8008780:	b087      	sub	sp, #28
 8008782:	af00      	add	r7, sp, #0
 8008784:	60f8      	str	r0, [r7, #12]
 8008786:	60b9      	str	r1, [r7, #8]
 8008788:	607a      	str	r2, [r7, #4]
 800878a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6a1b      	ldr	r3, [r3, #32]
 8008790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	f023 0210 	bic.w	r2, r3, #16
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	021b      	lsls	r3, r3, #8
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80087bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	031b      	lsls	r3, r3, #12
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80087d0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	011b      	lsls	r3, r3, #4
 80087d6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	4313      	orrs	r3, r2
 80087de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	621a      	str	r2, [r3, #32]
}
 80087ec:	bf00      	nop
 80087ee:	371c      	adds	r7, #28
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	f023 0210 	bic.w	r2, r3, #16
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	031b      	lsls	r3, r3, #12
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	4313      	orrs	r3, r2
 800882c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008834:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	011b      	lsls	r3, r3, #4
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	4313      	orrs	r3, r2
 800883e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	621a      	str	r2, [r3, #32]
}
 800884c:	bf00      	nop
 800884e:	371c      	adds	r7, #28
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008858:	b480      	push	{r7}
 800885a:	b087      	sub	sp, #28
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
 8008864:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6a1b      	ldr	r3, [r3, #32]
 800886a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6a1b      	ldr	r3, [r3, #32]
 8008870:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	69db      	ldr	r3, [r3, #28]
 800887c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	f023 0303 	bic.w	r3, r3, #3
 8008884:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4313      	orrs	r3, r2
 800888c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008894:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	011b      	lsls	r3, r3, #4
 800889a:	b2db      	uxtb	r3, r3
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	4313      	orrs	r3, r2
 80088a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80088a8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	021b      	lsls	r3, r3, #8
 80088ae:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	693a      	ldr	r2, [r7, #16]
 80088bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	621a      	str	r2, [r3, #32]
}
 80088c4:	bf00      	nop
 80088c6:	371c      	adds	r7, #28
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b087      	sub	sp, #28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
 80088dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6a1b      	ldr	r3, [r3, #32]
 80088e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	69db      	ldr	r3, [r3, #28]
 80088f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	021b      	lsls	r3, r3, #8
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	4313      	orrs	r3, r2
 8008906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800890e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	031b      	lsls	r3, r3, #12
 8008914:	b29b      	uxth	r3, r3
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	4313      	orrs	r3, r2
 800891a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008922:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	031b      	lsls	r3, r3, #12
 8008928:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	4313      	orrs	r3, r2
 8008930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	621a      	str	r2, [r3, #32]
}
 800893e:	bf00      	nop
 8008940:	371c      	adds	r7, #28
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800894a:	b480      	push	{r7}
 800894c:	b085      	sub	sp, #20
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4313      	orrs	r3, r2
 8008968:	f043 0307 	orr.w	r3, r3, #7
 800896c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	609a      	str	r2, [r3, #8]
}
 8008974:	bf00      	nop
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008980:	b480      	push	{r7}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
 800898c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800899a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	021a      	lsls	r2, r3, #8
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	431a      	orrs	r2, r3
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	609a      	str	r2, [r3, #8]
}
 80089b4:	bf00      	nop
 80089b6:	371c      	adds	r7, #28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b087      	sub	sp, #28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f003 031f 	and.w	r3, r3, #31
 80089d2:	2201      	movs	r2, #1
 80089d4:	fa02 f303 	lsl.w	r3, r2, r3
 80089d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6a1a      	ldr	r2, [r3, #32]
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	43db      	mvns	r3, r3
 80089e2:	401a      	ands	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6a1a      	ldr	r2, [r3, #32]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f003 031f 	and.w	r3, r3, #31
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	fa01 f303 	lsl.w	r3, r1, r3
 80089f8:	431a      	orrs	r2, r3
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	621a      	str	r2, [r3, #32]
}
 80089fe:	bf00      	nop
 8008a00:	371c      	adds	r7, #28
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
	...

08008a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d101      	bne.n	8008a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a20:	2302      	movs	r3, #2
 8008a22:	e050      	b.n	8008ac6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a1c      	ldr	r2, [pc, #112]	@ (8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d018      	beq.n	8008a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a70:	d013      	beq.n	8008a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a18      	ldr	r2, [pc, #96]	@ (8008ad8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d00e      	beq.n	8008a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a16      	ldr	r2, [pc, #88]	@ (8008adc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d009      	beq.n	8008a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a15      	ldr	r2, [pc, #84]	@ (8008ae0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d004      	beq.n	8008a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a13      	ldr	r2, [pc, #76]	@ (8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d10c      	bne.n	8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008aa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	40010000 	.word	0x40010000
 8008ad8:	40000400 	.word	0x40000400
 8008adc:	40000800 	.word	0x40000800
 8008ae0:	40000c00 	.word	0x40000c00
 8008ae4:	40014000 	.word	0x40014000

08008ae8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008af2:	2300      	movs	r3, #0
 8008af4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d101      	bne.n	8008b04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b00:	2302      	movs	r3, #2
 8008b02:	e03d      	b.n	8008b80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b8c:	b084      	sub	sp, #16
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b084      	sub	sp, #16
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	f107 001c 	add.w	r0, r7, #28
 8008b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b9e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d123      	bne.n	8008bee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008baa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008bba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008bce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d105      	bne.n	8008be2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f001 fae8 	bl	800a1b8 <USB_CoreReset>
 8008be8:	4603      	mov	r3, r0
 8008bea:	73fb      	strb	r3, [r7, #15]
 8008bec:	e01b      	b.n	8008c26 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f001 fadc 	bl	800a1b8 <USB_CoreReset>
 8008c00:	4603      	mov	r3, r0
 8008c02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008c04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d106      	bne.n	8008c1a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	639a      	str	r2, [r3, #56]	@ 0x38
 8008c18:	e005      	b.n	8008c26 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008c26:	7fbb      	ldrb	r3, [r7, #30]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d10b      	bne.n	8008c44 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f043 0206 	orr.w	r2, r3, #6
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	f043 0220 	orr.w	r2, r3, #32
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c50:	b004      	add	sp, #16
 8008c52:	4770      	bx	lr

08008c54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b087      	sub	sp, #28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008c62:	79fb      	ldrb	r3, [r7, #7]
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d165      	bne.n	8008d34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	4a41      	ldr	r2, [pc, #260]	@ (8008d70 <USB_SetTurnaroundTime+0x11c>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d906      	bls.n	8008c7e <USB_SetTurnaroundTime+0x2a>
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	4a40      	ldr	r2, [pc, #256]	@ (8008d74 <USB_SetTurnaroundTime+0x120>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d202      	bcs.n	8008c7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008c78:	230f      	movs	r3, #15
 8008c7a:	617b      	str	r3, [r7, #20]
 8008c7c:	e062      	b.n	8008d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	4a3c      	ldr	r2, [pc, #240]	@ (8008d74 <USB_SetTurnaroundTime+0x120>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d306      	bcc.n	8008c94 <USB_SetTurnaroundTime+0x40>
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	4a3b      	ldr	r2, [pc, #236]	@ (8008d78 <USB_SetTurnaroundTime+0x124>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d202      	bcs.n	8008c94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008c8e:	230e      	movs	r3, #14
 8008c90:	617b      	str	r3, [r7, #20]
 8008c92:	e057      	b.n	8008d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	4a38      	ldr	r2, [pc, #224]	@ (8008d78 <USB_SetTurnaroundTime+0x124>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d306      	bcc.n	8008caa <USB_SetTurnaroundTime+0x56>
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	4a37      	ldr	r2, [pc, #220]	@ (8008d7c <USB_SetTurnaroundTime+0x128>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d202      	bcs.n	8008caa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008ca4:	230d      	movs	r3, #13
 8008ca6:	617b      	str	r3, [r7, #20]
 8008ca8:	e04c      	b.n	8008d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	4a33      	ldr	r2, [pc, #204]	@ (8008d7c <USB_SetTurnaroundTime+0x128>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d306      	bcc.n	8008cc0 <USB_SetTurnaroundTime+0x6c>
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	4a32      	ldr	r2, [pc, #200]	@ (8008d80 <USB_SetTurnaroundTime+0x12c>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d802      	bhi.n	8008cc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008cba:	230c      	movs	r3, #12
 8008cbc:	617b      	str	r3, [r7, #20]
 8008cbe:	e041      	b.n	8008d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	4a2f      	ldr	r2, [pc, #188]	@ (8008d80 <USB_SetTurnaroundTime+0x12c>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d906      	bls.n	8008cd6 <USB_SetTurnaroundTime+0x82>
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	4a2e      	ldr	r2, [pc, #184]	@ (8008d84 <USB_SetTurnaroundTime+0x130>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d802      	bhi.n	8008cd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008cd0:	230b      	movs	r3, #11
 8008cd2:	617b      	str	r3, [r7, #20]
 8008cd4:	e036      	b.n	8008d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	4a2a      	ldr	r2, [pc, #168]	@ (8008d84 <USB_SetTurnaroundTime+0x130>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d906      	bls.n	8008cec <USB_SetTurnaroundTime+0x98>
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	4a29      	ldr	r2, [pc, #164]	@ (8008d88 <USB_SetTurnaroundTime+0x134>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d802      	bhi.n	8008cec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008ce6:	230a      	movs	r3, #10
 8008ce8:	617b      	str	r3, [r7, #20]
 8008cea:	e02b      	b.n	8008d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	4a26      	ldr	r2, [pc, #152]	@ (8008d88 <USB_SetTurnaroundTime+0x134>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d906      	bls.n	8008d02 <USB_SetTurnaroundTime+0xae>
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	4a25      	ldr	r2, [pc, #148]	@ (8008d8c <USB_SetTurnaroundTime+0x138>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d202      	bcs.n	8008d02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008cfc:	2309      	movs	r3, #9
 8008cfe:	617b      	str	r3, [r7, #20]
 8008d00:	e020      	b.n	8008d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	4a21      	ldr	r2, [pc, #132]	@ (8008d8c <USB_SetTurnaroundTime+0x138>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d306      	bcc.n	8008d18 <USB_SetTurnaroundTime+0xc4>
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	4a20      	ldr	r2, [pc, #128]	@ (8008d90 <USB_SetTurnaroundTime+0x13c>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d802      	bhi.n	8008d18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008d12:	2308      	movs	r3, #8
 8008d14:	617b      	str	r3, [r7, #20]
 8008d16:	e015      	b.n	8008d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8008d90 <USB_SetTurnaroundTime+0x13c>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d906      	bls.n	8008d2e <USB_SetTurnaroundTime+0xda>
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	4a1c      	ldr	r2, [pc, #112]	@ (8008d94 <USB_SetTurnaroundTime+0x140>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d202      	bcs.n	8008d2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008d28:	2307      	movs	r3, #7
 8008d2a:	617b      	str	r3, [r7, #20]
 8008d2c:	e00a      	b.n	8008d44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008d2e:	2306      	movs	r3, #6
 8008d30:	617b      	str	r3, [r7, #20]
 8008d32:	e007      	b.n	8008d44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008d34:	79fb      	ldrb	r3, [r7, #7]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d102      	bne.n	8008d40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008d3a:	2309      	movs	r3, #9
 8008d3c:	617b      	str	r3, [r7, #20]
 8008d3e:	e001      	b.n	8008d44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008d40:	2309      	movs	r3, #9
 8008d42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	029b      	lsls	r3, r3, #10
 8008d58:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	371c      	adds	r7, #28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	00d8acbf 	.word	0x00d8acbf
 8008d74:	00e4e1c0 	.word	0x00e4e1c0
 8008d78:	00f42400 	.word	0x00f42400
 8008d7c:	01067380 	.word	0x01067380
 8008d80:	011a499f 	.word	0x011a499f
 8008d84:	01312cff 	.word	0x01312cff
 8008d88:	014ca43f 	.word	0x014ca43f
 8008d8c:	016e3600 	.word	0x016e3600
 8008d90:	01a6ab1f 	.word	0x01a6ab1f
 8008d94:	01e84800 	.word	0x01e84800

08008d98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f043 0201 	orr.w	r2, r3, #1
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f023 0201 	bic.w	r2, r3, #1
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008de8:	2300      	movs	r3, #0
 8008dea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008df8:	78fb      	ldrb	r3, [r7, #3]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d115      	bne.n	8008e2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008e0a:	200a      	movs	r0, #10
 8008e0c:	f7fa fdc6 	bl	800399c <HAL_Delay>
      ms += 10U;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	330a      	adds	r3, #10
 8008e14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f001 f93f 	bl	800a09a <USB_GetMode>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d01e      	beq.n	8008e60 <USB_SetCurrentMode+0x84>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2bc7      	cmp	r3, #199	@ 0xc7
 8008e26:	d9f0      	bls.n	8008e0a <USB_SetCurrentMode+0x2e>
 8008e28:	e01a      	b.n	8008e60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e2a:	78fb      	ldrb	r3, [r7, #3]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d115      	bne.n	8008e5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008e3c:	200a      	movs	r0, #10
 8008e3e:	f7fa fdad 	bl	800399c <HAL_Delay>
      ms += 10U;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	330a      	adds	r3, #10
 8008e46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f001 f926 	bl	800a09a <USB_GetMode>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d005      	beq.n	8008e60 <USB_SetCurrentMode+0x84>
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2bc7      	cmp	r3, #199	@ 0xc7
 8008e58:	d9f0      	bls.n	8008e3c <USB_SetCurrentMode+0x60>
 8008e5a:	e001      	b.n	8008e60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e005      	b.n	8008e6c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2bc8      	cmp	r3, #200	@ 0xc8
 8008e64:	d101      	bne.n	8008e6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e000      	b.n	8008e6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e74:	b084      	sub	sp, #16
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b086      	sub	sp, #24
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008e8e:	2300      	movs	r3, #0
 8008e90:	613b      	str	r3, [r7, #16]
 8008e92:	e009      	b.n	8008ea8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	3340      	adds	r3, #64	@ 0x40
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4413      	add	r3, r2
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	613b      	str	r3, [r7, #16]
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	2b0e      	cmp	r3, #14
 8008eac:	d9f2      	bls.n	8008e94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008eae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d11c      	bne.n	8008ef0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ec4:	f043 0302 	orr.w	r3, r3, #2
 8008ec8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ece:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eda:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	639a      	str	r2, [r3, #56]	@ 0x38
 8008eee:	e00b      	b.n	8008f08 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f00:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f0e:	461a      	mov	r2, r3
 8008f10:	2300      	movs	r3, #0
 8008f12:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f14:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d10d      	bne.n	8008f38 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d104      	bne.n	8008f2e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008f24:	2100      	movs	r1, #0
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f968 	bl	80091fc <USB_SetDevSpeed>
 8008f2c:	e008      	b.n	8008f40 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008f2e:	2101      	movs	r1, #1
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f963 	bl	80091fc <USB_SetDevSpeed>
 8008f36:	e003      	b.n	8008f40 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f38:	2103      	movs	r1, #3
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f95e 	bl	80091fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f40:	2110      	movs	r1, #16
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f8fa 	bl	800913c <USB_FlushTxFifo>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f924 	bl	80091a0 <USB_FlushRxFifo>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f68:	461a      	mov	r2, r3
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f74:	461a      	mov	r2, r3
 8008f76:	2300      	movs	r3, #0
 8008f78:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f80:	461a      	mov	r2, r3
 8008f82:	2300      	movs	r3, #0
 8008f84:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f86:	2300      	movs	r3, #0
 8008f88:	613b      	str	r3, [r7, #16]
 8008f8a:	e043      	b.n	8009014 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	015a      	lsls	r2, r3, #5
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	4413      	add	r3, r2
 8008f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fa2:	d118      	bne.n	8008fd6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10a      	bne.n	8008fc0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	015a      	lsls	r2, r3, #5
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008fbc:	6013      	str	r3, [r2, #0]
 8008fbe:	e013      	b.n	8008fe8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	015a      	lsls	r2, r3, #5
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fcc:	461a      	mov	r2, r3
 8008fce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	e008      	b.n	8008fe8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	015a      	lsls	r2, r3, #5
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	4413      	add	r3, r2
 8008fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	015a      	lsls	r2, r3, #5
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	4413      	add	r3, r2
 8008ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	015a      	lsls	r2, r3, #5
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	4413      	add	r3, r2
 8009002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009006:	461a      	mov	r2, r3
 8009008:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800900c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	3301      	adds	r3, #1
 8009012:	613b      	str	r3, [r7, #16]
 8009014:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009018:	461a      	mov	r2, r3
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	4293      	cmp	r3, r2
 800901e:	d3b5      	bcc.n	8008f8c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009020:	2300      	movs	r3, #0
 8009022:	613b      	str	r3, [r7, #16]
 8009024:	e043      	b.n	80090ae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	015a      	lsls	r2, r3, #5
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	4413      	add	r3, r2
 800902e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009038:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800903c:	d118      	bne.n	8009070 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10a      	bne.n	800905a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	015a      	lsls	r2, r3, #5
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	4413      	add	r3, r2
 800904c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009050:	461a      	mov	r2, r3
 8009052:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	e013      	b.n	8009082 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	4413      	add	r3, r2
 8009062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009066:	461a      	mov	r2, r3
 8009068:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	e008      	b.n	8009082 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	015a      	lsls	r2, r3, #5
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4413      	add	r3, r2
 8009078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800907c:	461a      	mov	r2, r3
 800907e:	2300      	movs	r3, #0
 8009080:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	015a      	lsls	r2, r3, #5
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	4413      	add	r3, r2
 800908a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800908e:	461a      	mov	r2, r3
 8009090:	2300      	movs	r3, #0
 8009092:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	015a      	lsls	r2, r3, #5
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	4413      	add	r3, r2
 800909c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090a0:	461a      	mov	r2, r3
 80090a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80090a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	3301      	adds	r3, #1
 80090ac:	613b      	str	r3, [r7, #16]
 80090ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80090b2:	461a      	mov	r2, r3
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d3b5      	bcc.n	8009026 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80090da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80090dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d105      	bne.n	80090f0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	f043 0210 	orr.w	r2, r3, #16
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	699a      	ldr	r2, [r3, #24]
 80090f4:	4b10      	ldr	r3, [pc, #64]	@ (8009138 <USB_DevInit+0x2c4>)
 80090f6:	4313      	orrs	r3, r2
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80090fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009100:	2b00      	cmp	r3, #0
 8009102:	d005      	beq.n	8009110 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	f043 0208 	orr.w	r2, r3, #8
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009110:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009114:	2b01      	cmp	r3, #1
 8009116:	d107      	bne.n	8009128 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009120:	f043 0304 	orr.w	r3, r3, #4
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009128:	7dfb      	ldrb	r3, [r7, #23]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009134:	b004      	add	sp, #16
 8009136:	4770      	bx	lr
 8009138:	803c3800 	.word	0x803c3800

0800913c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009146:	2300      	movs	r3, #0
 8009148:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	3301      	adds	r3, #1
 800914e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009156:	d901      	bls.n	800915c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009158:	2303      	movs	r3, #3
 800915a:	e01b      	b.n	8009194 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	daf2      	bge.n	800914a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009164:	2300      	movs	r3, #0
 8009166:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	019b      	lsls	r3, r3, #6
 800916c:	f043 0220 	orr.w	r2, r3, #32
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	3301      	adds	r3, #1
 8009178:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009180:	d901      	bls.n	8009186 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e006      	b.n	8009194 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	f003 0320 	and.w	r3, r3, #32
 800918e:	2b20      	cmp	r3, #32
 8009190:	d0f0      	beq.n	8009174 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3714      	adds	r7, #20
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091a8:	2300      	movs	r3, #0
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	3301      	adds	r3, #1
 80091b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80091b8:	d901      	bls.n	80091be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e018      	b.n	80091f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	daf2      	bge.n	80091ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80091c6:	2300      	movs	r3, #0
 80091c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2210      	movs	r2, #16
 80091ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	3301      	adds	r3, #1
 80091d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80091dc:	d901      	bls.n	80091e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e006      	b.n	80091f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	f003 0310 	and.w	r3, r3, #16
 80091ea:	2b10      	cmp	r3, #16
 80091ec:	d0f0      	beq.n	80091d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	460b      	mov	r3, r1
 8009206:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	78fb      	ldrb	r3, [r7, #3]
 8009216:	68f9      	ldr	r1, [r7, #12]
 8009218:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800921c:	4313      	orrs	r3, r2
 800921e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800922e:	b480      	push	{r7}
 8009230:	b087      	sub	sp, #28
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	f003 0306 	and.w	r3, r3, #6
 8009246:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d102      	bne.n	8009254 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800924e:	2300      	movs	r3, #0
 8009250:	75fb      	strb	r3, [r7, #23]
 8009252:	e00a      	b.n	800926a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2b02      	cmp	r3, #2
 8009258:	d002      	beq.n	8009260 <USB_GetDevSpeed+0x32>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2b06      	cmp	r3, #6
 800925e:	d102      	bne.n	8009266 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009260:	2302      	movs	r3, #2
 8009262:	75fb      	strb	r3, [r7, #23]
 8009264:	e001      	b.n	800926a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009266:	230f      	movs	r3, #15
 8009268:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800926a:	7dfb      	ldrb	r3, [r7, #23]
}
 800926c:	4618      	mov	r0, r3
 800926e:	371c      	adds	r7, #28
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	785b      	ldrb	r3, [r3, #1]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d13a      	bne.n	800930a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800929a:	69da      	ldr	r2, [r3, #28]
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	f003 030f 	and.w	r3, r3, #15
 80092a4:	2101      	movs	r1, #1
 80092a6:	fa01 f303 	lsl.w	r3, r1, r3
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	68f9      	ldr	r1, [r7, #12]
 80092ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80092b2:	4313      	orrs	r3, r2
 80092b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d155      	bne.n	8009378 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	791b      	ldrb	r3, [r3, #4]
 80092e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80092e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	059b      	lsls	r3, r3, #22
 80092ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80092f0:	4313      	orrs	r3, r2
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	0151      	lsls	r1, r2, #5
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	440a      	add	r2, r1
 80092fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009302:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009306:	6013      	str	r3, [r2, #0]
 8009308:	e036      	b.n	8009378 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009310:	69da      	ldr	r2, [r3, #28]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	f003 030f 	and.w	r3, r3, #15
 800931a:	2101      	movs	r1, #1
 800931c:	fa01 f303 	lsl.w	r3, r1, r3
 8009320:	041b      	lsls	r3, r3, #16
 8009322:	68f9      	ldr	r1, [r7, #12]
 8009324:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009328:	4313      	orrs	r3, r2
 800932a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4413      	add	r3, r2
 8009334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800933e:	2b00      	cmp	r3, #0
 8009340:	d11a      	bne.n	8009378 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	015a      	lsls	r2, r3, #5
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	4413      	add	r3, r2
 800934a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	791b      	ldrb	r3, [r3, #4]
 800935c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800935e:	430b      	orrs	r3, r1
 8009360:	4313      	orrs	r3, r2
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	0151      	lsls	r1, r2, #5
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	440a      	add	r2, r1
 800936a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800936e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009372:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009376:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3714      	adds	r7, #20
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr
	...

08009388 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	785b      	ldrb	r3, [r3, #1]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d161      	bne.n	8009468 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093ba:	d11f      	bne.n	80093fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	0151      	lsls	r1, r2, #5
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	440a      	add	r2, r1
 80093d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80093da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	015a      	lsls	r2, r3, #5
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	0151      	lsls	r1, r2, #5
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	440a      	add	r2, r1
 80093f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009402:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	f003 030f 	and.w	r3, r3, #15
 800940c:	2101      	movs	r1, #1
 800940e:	fa01 f303 	lsl.w	r3, r1, r3
 8009412:	b29b      	uxth	r3, r3
 8009414:	43db      	mvns	r3, r3
 8009416:	68f9      	ldr	r1, [r7, #12]
 8009418:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800941c:	4013      	ands	r3, r2
 800941e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009426:	69da      	ldr	r2, [r3, #28]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	f003 030f 	and.w	r3, r3, #15
 8009430:	2101      	movs	r1, #1
 8009432:	fa01 f303 	lsl.w	r3, r1, r3
 8009436:	b29b      	uxth	r3, r3
 8009438:	43db      	mvns	r3, r3
 800943a:	68f9      	ldr	r1, [r7, #12]
 800943c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009440:	4013      	ands	r3, r2
 8009442:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	0159      	lsls	r1, r3, #5
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	440b      	add	r3, r1
 800945a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800945e:	4619      	mov	r1, r3
 8009460:	4b35      	ldr	r3, [pc, #212]	@ (8009538 <USB_DeactivateEndpoint+0x1b0>)
 8009462:	4013      	ands	r3, r2
 8009464:	600b      	str	r3, [r1, #0]
 8009466:	e060      	b.n	800952a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4413      	add	r3, r2
 8009470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800947a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800947e:	d11f      	bne.n	80094c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	015a      	lsls	r2, r3, #5
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4413      	add	r3, r2
 8009488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	0151      	lsls	r1, r2, #5
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	440a      	add	r2, r1
 8009496:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800949a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800949e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	015a      	lsls	r2, r3, #5
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	4413      	add	r3, r2
 80094a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	0151      	lsls	r1, r2, #5
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	440a      	add	r2, r1
 80094b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80094be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	f003 030f 	and.w	r3, r3, #15
 80094d0:	2101      	movs	r1, #1
 80094d2:	fa01 f303 	lsl.w	r3, r1, r3
 80094d6:	041b      	lsls	r3, r3, #16
 80094d8:	43db      	mvns	r3, r3
 80094da:	68f9      	ldr	r1, [r7, #12]
 80094dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80094e0:	4013      	ands	r3, r2
 80094e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094ea:	69da      	ldr	r2, [r3, #28]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	f003 030f 	and.w	r3, r3, #15
 80094f4:	2101      	movs	r1, #1
 80094f6:	fa01 f303 	lsl.w	r3, r1, r3
 80094fa:	041b      	lsls	r3, r3, #16
 80094fc:	43db      	mvns	r3, r3
 80094fe:	68f9      	ldr	r1, [r7, #12]
 8009500:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009504:	4013      	ands	r3, r2
 8009506:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	015a      	lsls	r2, r3, #5
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	4413      	add	r3, r2
 8009510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	0159      	lsls	r1, r3, #5
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	440b      	add	r3, r1
 800951e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009522:	4619      	mov	r1, r3
 8009524:	4b05      	ldr	r3, [pc, #20]	@ (800953c <USB_DeactivateEndpoint+0x1b4>)
 8009526:	4013      	ands	r3, r2
 8009528:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	ec337800 	.word	0xec337800
 800953c:	eff37800 	.word	0xeff37800

08009540 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b08a      	sub	sp, #40	@ 0x28
 8009544:	af02      	add	r7, sp, #8
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	4613      	mov	r3, r2
 800954c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	785b      	ldrb	r3, [r3, #1]
 800955c:	2b01      	cmp	r3, #1
 800955e:	f040 817f 	bne.w	8009860 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d132      	bne.n	80095d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	015a      	lsls	r2, r3, #5
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	4413      	add	r3, r2
 8009572:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	69ba      	ldr	r2, [r7, #24]
 800957a:	0151      	lsls	r1, r2, #5
 800957c:	69fa      	ldr	r2, [r7, #28]
 800957e:	440a      	add	r2, r1
 8009580:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009584:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009588:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800958c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	015a      	lsls	r2, r3, #5
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	4413      	add	r3, r2
 8009596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	69ba      	ldr	r2, [r7, #24]
 800959e:	0151      	lsls	r1, r2, #5
 80095a0:	69fa      	ldr	r2, [r7, #28]
 80095a2:	440a      	add	r2, r1
 80095a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80095ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	0151      	lsls	r1, r2, #5
 80095c0:	69fa      	ldr	r2, [r7, #28]
 80095c2:	440a      	add	r2, r1
 80095c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095c8:	0cdb      	lsrs	r3, r3, #19
 80095ca:	04db      	lsls	r3, r3, #19
 80095cc:	6113      	str	r3, [r2, #16]
 80095ce:	e097      	b.n	8009700 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	015a      	lsls	r2, r3, #5
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	69ba      	ldr	r2, [r7, #24]
 80095e0:	0151      	lsls	r1, r2, #5
 80095e2:	69fa      	ldr	r2, [r7, #28]
 80095e4:	440a      	add	r2, r1
 80095e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095ea:	0cdb      	lsrs	r3, r3, #19
 80095ec:	04db      	lsls	r3, r3, #19
 80095ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	015a      	lsls	r2, r3, #5
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	69ba      	ldr	r2, [r7, #24]
 8009600:	0151      	lsls	r1, r2, #5
 8009602:	69fa      	ldr	r2, [r7, #28]
 8009604:	440a      	add	r2, r1
 8009606:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800960a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800960e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009612:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d11a      	bne.n	8009650 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	691a      	ldr	r2, [r3, #16]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	429a      	cmp	r2, r3
 8009624:	d903      	bls.n	800962e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	689a      	ldr	r2, [r3, #8]
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	015a      	lsls	r2, r3, #5
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	4413      	add	r3, r2
 8009636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	69ba      	ldr	r2, [r7, #24]
 800963e:	0151      	lsls	r1, r2, #5
 8009640:	69fa      	ldr	r2, [r7, #28]
 8009642:	440a      	add	r2, r1
 8009644:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009648:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800964c:	6113      	str	r3, [r2, #16]
 800964e:	e044      	b.n	80096da <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	691a      	ldr	r2, [r3, #16]
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	4413      	add	r3, r2
 800965a:	1e5a      	subs	r2, r3, #1
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	fbb2 f3f3 	udiv	r3, r2, r3
 8009664:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	015a      	lsls	r2, r3, #5
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	4413      	add	r3, r2
 800966e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009672:	691a      	ldr	r2, [r3, #16]
 8009674:	8afb      	ldrh	r3, [r7, #22]
 8009676:	04d9      	lsls	r1, r3, #19
 8009678:	4ba4      	ldr	r3, [pc, #656]	@ (800990c <USB_EPStartXfer+0x3cc>)
 800967a:	400b      	ands	r3, r1
 800967c:	69b9      	ldr	r1, [r7, #24]
 800967e:	0148      	lsls	r0, r1, #5
 8009680:	69f9      	ldr	r1, [r7, #28]
 8009682:	4401      	add	r1, r0
 8009684:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009688:	4313      	orrs	r3, r2
 800968a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	791b      	ldrb	r3, [r3, #4]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d122      	bne.n	80096da <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	015a      	lsls	r2, r3, #5
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	4413      	add	r3, r2
 800969c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	0151      	lsls	r1, r2, #5
 80096a6:	69fa      	ldr	r2, [r7, #28]
 80096a8:	440a      	add	r2, r1
 80096aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096ae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80096b2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096c0:	691a      	ldr	r2, [r3, #16]
 80096c2:	8afb      	ldrh	r3, [r7, #22]
 80096c4:	075b      	lsls	r3, r3, #29
 80096c6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80096ca:	69b9      	ldr	r1, [r7, #24]
 80096cc:	0148      	lsls	r0, r1, #5
 80096ce:	69f9      	ldr	r1, [r7, #28]
 80096d0:	4401      	add	r1, r0
 80096d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80096d6:	4313      	orrs	r3, r2
 80096d8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	015a      	lsls	r2, r3, #5
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096e6:	691a      	ldr	r2, [r3, #16]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096f0:	69b9      	ldr	r1, [r7, #24]
 80096f2:	0148      	lsls	r0, r1, #5
 80096f4:	69f9      	ldr	r1, [r7, #28]
 80096f6:	4401      	add	r1, r0
 80096f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80096fc:	4313      	orrs	r3, r2
 80096fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d14b      	bne.n	800979e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d009      	beq.n	8009722 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	4413      	add	r3, r2
 8009716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800971a:	461a      	mov	r2, r3
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	791b      	ldrb	r3, [r3, #4]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d128      	bne.n	800977c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009736:	2b00      	cmp	r3, #0
 8009738:	d110      	bne.n	800975c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	015a      	lsls	r2, r3, #5
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	4413      	add	r3, r2
 8009742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	69ba      	ldr	r2, [r7, #24]
 800974a:	0151      	lsls	r1, r2, #5
 800974c:	69fa      	ldr	r2, [r7, #28]
 800974e:	440a      	add	r2, r1
 8009750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009754:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009758:	6013      	str	r3, [r2, #0]
 800975a:	e00f      	b.n	800977c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	4413      	add	r3, r2
 8009764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	69ba      	ldr	r2, [r7, #24]
 800976c:	0151      	lsls	r1, r2, #5
 800976e:	69fa      	ldr	r2, [r7, #28]
 8009770:	440a      	add	r2, r1
 8009772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800977a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	69ba      	ldr	r2, [r7, #24]
 800978c:	0151      	lsls	r1, r2, #5
 800978e:	69fa      	ldr	r2, [r7, #28]
 8009790:	440a      	add	r2, r1
 8009792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009796:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800979a:	6013      	str	r3, [r2, #0]
 800979c:	e166      	b.n	8009a6c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	015a      	lsls	r2, r3, #5
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	4413      	add	r3, r2
 80097a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	69ba      	ldr	r2, [r7, #24]
 80097ae:	0151      	lsls	r1, r2, #5
 80097b0:	69fa      	ldr	r2, [r7, #28]
 80097b2:	440a      	add	r2, r1
 80097b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80097bc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	791b      	ldrb	r3, [r3, #4]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d015      	beq.n	80097f2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f000 814e 	beq.w	8009a6c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	f003 030f 	and.w	r3, r3, #15
 80097e0:	2101      	movs	r1, #1
 80097e2:	fa01 f303 	lsl.w	r3, r1, r3
 80097e6:	69f9      	ldr	r1, [r7, #28]
 80097e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097ec:	4313      	orrs	r3, r2
 80097ee:	634b      	str	r3, [r1, #52]	@ 0x34
 80097f0:	e13c      	b.n	8009a6c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d110      	bne.n	8009824 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	4413      	add	r3, r2
 800980a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	69ba      	ldr	r2, [r7, #24]
 8009812:	0151      	lsls	r1, r2, #5
 8009814:	69fa      	ldr	r2, [r7, #28]
 8009816:	440a      	add	r2, r1
 8009818:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800981c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009820:	6013      	str	r3, [r2, #0]
 8009822:	e00f      	b.n	8009844 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	4413      	add	r3, r2
 800982c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	69ba      	ldr	r2, [r7, #24]
 8009834:	0151      	lsls	r1, r2, #5
 8009836:	69fa      	ldr	r2, [r7, #28]
 8009838:	440a      	add	r2, r1
 800983a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800983e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009842:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	68d9      	ldr	r1, [r3, #12]
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	781a      	ldrb	r2, [r3, #0]
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	b298      	uxth	r0, r3
 8009852:	79fb      	ldrb	r3, [r7, #7]
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	4603      	mov	r3, r0
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f000 f9b9 	bl	8009bd0 <USB_WritePacket>
 800985e:	e105      	b.n	8009a6c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	4413      	add	r3, r2
 8009868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	69ba      	ldr	r2, [r7, #24]
 8009870:	0151      	lsls	r1, r2, #5
 8009872:	69fa      	ldr	r2, [r7, #28]
 8009874:	440a      	add	r2, r1
 8009876:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800987a:	0cdb      	lsrs	r3, r3, #19
 800987c:	04db      	lsls	r3, r3, #19
 800987e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	69ba      	ldr	r2, [r7, #24]
 8009890:	0151      	lsls	r1, r2, #5
 8009892:	69fa      	ldr	r2, [r7, #28]
 8009894:	440a      	add	r2, r1
 8009896:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800989a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800989e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80098a2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d132      	bne.n	8009910 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d003      	beq.n	80098ba <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	689a      	ldr	r2, [r3, #8]
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	689a      	ldr	r2, [r3, #8]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ce:	691a      	ldr	r2, [r3, #16]
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098d8:	69b9      	ldr	r1, [r7, #24]
 80098da:	0148      	lsls	r0, r1, #5
 80098dc:	69f9      	ldr	r1, [r7, #28]
 80098de:	4401      	add	r1, r0
 80098e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80098e4:	4313      	orrs	r3, r2
 80098e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	015a      	lsls	r2, r3, #5
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	4413      	add	r3, r2
 80098f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	69ba      	ldr	r2, [r7, #24]
 80098f8:	0151      	lsls	r1, r2, #5
 80098fa:	69fa      	ldr	r2, [r7, #28]
 80098fc:	440a      	add	r2, r1
 80098fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009902:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009906:	6113      	str	r3, [r2, #16]
 8009908:	e062      	b.n	80099d0 <USB_EPStartXfer+0x490>
 800990a:	bf00      	nop
 800990c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d123      	bne.n	8009960 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	015a      	lsls	r2, r3, #5
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	4413      	add	r3, r2
 8009920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009924:	691a      	ldr	r2, [r3, #16]
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800992e:	69b9      	ldr	r1, [r7, #24]
 8009930:	0148      	lsls	r0, r1, #5
 8009932:	69f9      	ldr	r1, [r7, #28]
 8009934:	4401      	add	r1, r0
 8009936:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800993a:	4313      	orrs	r3, r2
 800993c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	69ba      	ldr	r2, [r7, #24]
 800994e:	0151      	lsls	r1, r2, #5
 8009950:	69fa      	ldr	r2, [r7, #28]
 8009952:	440a      	add	r2, r1
 8009954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009958:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800995c:	6113      	str	r3, [r2, #16]
 800995e:	e037      	b.n	80099d0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	691a      	ldr	r2, [r3, #16]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	4413      	add	r3, r2
 800996a:	1e5a      	subs	r2, r3, #1
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	fbb2 f3f3 	udiv	r3, r2, r3
 8009974:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	8afa      	ldrh	r2, [r7, #22]
 800997c:	fb03 f202 	mul.w	r2, r3, r2
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	4413      	add	r3, r2
 800998c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009990:	691a      	ldr	r2, [r3, #16]
 8009992:	8afb      	ldrh	r3, [r7, #22]
 8009994:	04d9      	lsls	r1, r3, #19
 8009996:	4b38      	ldr	r3, [pc, #224]	@ (8009a78 <USB_EPStartXfer+0x538>)
 8009998:	400b      	ands	r3, r1
 800999a:	69b9      	ldr	r1, [r7, #24]
 800999c:	0148      	lsls	r0, r1, #5
 800999e:	69f9      	ldr	r1, [r7, #28]
 80099a0:	4401      	add	r1, r0
 80099a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80099a6:	4313      	orrs	r3, r2
 80099a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	015a      	lsls	r2, r3, #5
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	4413      	add	r3, r2
 80099b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099b6:	691a      	ldr	r2, [r3, #16]
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	6a1b      	ldr	r3, [r3, #32]
 80099bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099c0:	69b9      	ldr	r1, [r7, #24]
 80099c2:	0148      	lsls	r0, r1, #5
 80099c4:	69f9      	ldr	r1, [r7, #28]
 80099c6:	4401      	add	r1, r0
 80099c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80099cc:	4313      	orrs	r3, r2
 80099ce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80099d0:	79fb      	ldrb	r3, [r7, #7]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d10d      	bne.n	80099f2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d009      	beq.n	80099f2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	68d9      	ldr	r1, [r3, #12]
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ee:	460a      	mov	r2, r1
 80099f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	791b      	ldrb	r3, [r3, #4]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d128      	bne.n	8009a4c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d110      	bne.n	8009a2c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	015a      	lsls	r2, r3, #5
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	4413      	add	r3, r2
 8009a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	69ba      	ldr	r2, [r7, #24]
 8009a1a:	0151      	lsls	r1, r2, #5
 8009a1c:	69fa      	ldr	r2, [r7, #28]
 8009a1e:	440a      	add	r2, r1
 8009a20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009a28:	6013      	str	r3, [r2, #0]
 8009a2a:	e00f      	b.n	8009a4c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	015a      	lsls	r2, r3, #5
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	4413      	add	r3, r2
 8009a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	69ba      	ldr	r2, [r7, #24]
 8009a3c:	0151      	lsls	r1, r2, #5
 8009a3e:	69fa      	ldr	r2, [r7, #28]
 8009a40:	440a      	add	r2, r1
 8009a42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	69ba      	ldr	r2, [r7, #24]
 8009a5c:	0151      	lsls	r1, r2, #5
 8009a5e:	69fa      	ldr	r2, [r7, #28]
 8009a60:	440a      	add	r2, r1
 8009a62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a66:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009a6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3720      	adds	r7, #32
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	1ff80000 	.word	0x1ff80000

08009a7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b087      	sub	sp, #28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	785b      	ldrb	r3, [r3, #1]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d14a      	bne.n	8009b30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	015a      	lsls	r2, r3, #5
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009aae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ab2:	f040 8086 	bne.w	8009bc2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	015a      	lsls	r2, r3, #5
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	4413      	add	r3, r2
 8009ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	7812      	ldrb	r2, [r2, #0]
 8009aca:	0151      	lsls	r1, r2, #5
 8009acc:	693a      	ldr	r2, [r7, #16]
 8009ace:	440a      	add	r2, r1
 8009ad0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ad4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ad8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	015a      	lsls	r2, r3, #5
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	7812      	ldrb	r2, [r2, #0]
 8009aee:	0151      	lsls	r1, r2, #5
 8009af0:	693a      	ldr	r2, [r7, #16]
 8009af2:	440a      	add	r2, r1
 8009af4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009af8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009afc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3301      	adds	r3, #1
 8009b02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d902      	bls.n	8009b14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	75fb      	strb	r3, [r7, #23]
          break;
 8009b12:	e056      	b.n	8009bc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	015a      	lsls	r2, r3, #5
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b2c:	d0e7      	beq.n	8009afe <USB_EPStopXfer+0x82>
 8009b2e:	e048      	b.n	8009bc2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	015a      	lsls	r2, r3, #5
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	4413      	add	r3, r2
 8009b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b48:	d13b      	bne.n	8009bc2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	015a      	lsls	r2, r3, #5
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	4413      	add	r3, r2
 8009b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	7812      	ldrb	r2, [r2, #0]
 8009b5e:	0151      	lsls	r1, r2, #5
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	440a      	add	r2, r1
 8009b64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009b6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	7812      	ldrb	r2, [r2, #0]
 8009b82:	0151      	lsls	r1, r2, #5
 8009b84:	693a      	ldr	r2, [r7, #16]
 8009b86:	440a      	add	r2, r1
 8009b88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	3301      	adds	r3, #1
 8009b96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d902      	bls.n	8009ba8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ba6:	e00c      	b.n	8009bc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	015a      	lsls	r2, r3, #5
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bc0:	d0e7      	beq.n	8009b92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	371c      	adds	r7, #28
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b089      	sub	sp, #36	@ 0x24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	4611      	mov	r1, r2
 8009bdc:	461a      	mov	r2, r3
 8009bde:	460b      	mov	r3, r1
 8009be0:	71fb      	strb	r3, [r7, #7]
 8009be2:	4613      	mov	r3, r2
 8009be4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009bee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d123      	bne.n	8009c3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009bf6:	88bb      	ldrh	r3, [r7, #4]
 8009bf8:	3303      	adds	r3, #3
 8009bfa:	089b      	lsrs	r3, r3, #2
 8009bfc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009bfe:	2300      	movs	r3, #0
 8009c00:	61bb      	str	r3, [r7, #24]
 8009c02:	e018      	b.n	8009c36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009c04:	79fb      	ldrb	r3, [r7, #7]
 8009c06:	031a      	lsls	r2, r3, #12
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c10:	461a      	mov	r2, r3
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	3301      	adds	r3, #1
 8009c22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	3301      	adds	r3, #1
 8009c28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	3301      	adds	r3, #1
 8009c34:	61bb      	str	r3, [r7, #24]
 8009c36:	69ba      	ldr	r2, [r7, #24]
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d3e2      	bcc.n	8009c04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3724      	adds	r7, #36	@ 0x24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b08b      	sub	sp, #44	@ 0x2c
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	4613      	mov	r3, r2
 8009c58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009c62:	88fb      	ldrh	r3, [r7, #6]
 8009c64:	089b      	lsrs	r3, r3, #2
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009c6a:	88fb      	ldrh	r3, [r7, #6]
 8009c6c:	f003 0303 	and.w	r3, r3, #3
 8009c70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009c72:	2300      	movs	r3, #0
 8009c74:	623b      	str	r3, [r7, #32]
 8009c76:	e014      	b.n	8009ca2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c82:	601a      	str	r2, [r3, #0]
    pDest++;
 8009c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c86:	3301      	adds	r3, #1
 8009c88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c92:	3301      	adds	r3, #1
 8009c94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c98:	3301      	adds	r3, #1
 8009c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	623b      	str	r3, [r7, #32]
 8009ca2:	6a3a      	ldr	r2, [r7, #32]
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d3e6      	bcc.n	8009c78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009caa:	8bfb      	ldrh	r3, [r7, #30]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d01e      	beq.n	8009cee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cba:	461a      	mov	r2, r3
 8009cbc:	f107 0310 	add.w	r3, r7, #16
 8009cc0:	6812      	ldr	r2, [r2, #0]
 8009cc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	00db      	lsls	r3, r3, #3
 8009ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd4:	701a      	strb	r2, [r3, #0]
      i++;
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	623b      	str	r3, [r7, #32]
      pDest++;
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cde:	3301      	adds	r3, #1
 8009ce0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009ce2:	8bfb      	ldrh	r3, [r7, #30]
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009ce8:	8bfb      	ldrh	r3, [r7, #30]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1ea      	bne.n	8009cc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	372c      	adds	r7, #44	@ 0x2c
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	785b      	ldrb	r3, [r3, #1]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d12c      	bne.n	8009d72 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	015a      	lsls	r2, r3, #5
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	4413      	add	r3, r2
 8009d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	db12      	blt.n	8009d50 <USB_EPSetStall+0x54>
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00f      	beq.n	8009d50 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	0151      	lsls	r1, r2, #5
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	440a      	add	r2, r1
 8009d46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009d4e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	015a      	lsls	r2, r3, #5
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4413      	add	r3, r2
 8009d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	0151      	lsls	r1, r2, #5
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	440a      	add	r2, r1
 8009d66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009d6e:	6013      	str	r3, [r2, #0]
 8009d70:	e02b      	b.n	8009dca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	015a      	lsls	r2, r3, #5
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	4413      	add	r3, r2
 8009d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	db12      	blt.n	8009daa <USB_EPSetStall+0xae>
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00f      	beq.n	8009daa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	015a      	lsls	r2, r3, #5
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	4413      	add	r3, r2
 8009d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	0151      	lsls	r1, r2, #5
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	440a      	add	r2, r1
 8009da0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009da4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009da8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	015a      	lsls	r2, r3, #5
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	0151      	lsls	r1, r2, #5
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	440a      	add	r2, r1
 8009dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009dc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	785b      	ldrb	r3, [r3, #1]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d128      	bne.n	8009e46 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	015a      	lsls	r2, r3, #5
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	0151      	lsls	r1, r2, #5
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	440a      	add	r2, r1
 8009e0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009e12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	791b      	ldrb	r3, [r3, #4]
 8009e18:	2b03      	cmp	r3, #3
 8009e1a:	d003      	beq.n	8009e24 <USB_EPClearStall+0x4c>
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	791b      	ldrb	r3, [r3, #4]
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d138      	bne.n	8009e96 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	0151      	lsls	r1, r2, #5
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	440a      	add	r2, r1
 8009e3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	e027      	b.n	8009e96 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	015a      	lsls	r2, r3, #5
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68ba      	ldr	r2, [r7, #8]
 8009e56:	0151      	lsls	r1, r2, #5
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	440a      	add	r2, r1
 8009e5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009e64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	791b      	ldrb	r3, [r3, #4]
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d003      	beq.n	8009e76 <USB_EPClearStall+0x9e>
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	791b      	ldrb	r3, [r3, #4]
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d10f      	bne.n	8009e96 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	015a      	lsls	r2, r3, #5
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68ba      	ldr	r2, [r7, #8]
 8009e86:	0151      	lsls	r1, r2, #5
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	440a      	add	r2, r1
 8009e8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e94:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3714      	adds	r7, #20
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	460b      	mov	r3, r1
 8009eae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ec2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009ec6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	78fb      	ldrb	r3, [r7, #3]
 8009ed2:	011b      	lsls	r3, r3, #4
 8009ed4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009ed8:	68f9      	ldr	r1, [r7, #12]
 8009eda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3714      	adds	r7, #20
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009f0a:	f023 0303 	bic.w	r3, r3, #3
 8009f0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f1e:	f023 0302 	bic.w	r3, r3, #2
 8009f22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f32:	b480      	push	{r7}
 8009f34:	b085      	sub	sp, #20
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009f4c:	f023 0303 	bic.w	r3, r3, #3
 8009f50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f60:	f043 0302 	orr.w	r3, r3, #2
 8009f64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	695b      	ldr	r3, [r3, #20]
 8009f80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	4013      	ands	r3, r2
 8009f8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3714      	adds	r7, #20
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr

08009f9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f9a:	b480      	push	{r7}
 8009f9c:	b085      	sub	sp, #20
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fb6:	69db      	ldr	r3, [r3, #28]
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	4013      	ands	r3, r2
 8009fbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	0c1b      	lsrs	r3, r3, #16
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3714      	adds	r7, #20
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009fce:	b480      	push	{r7}
 8009fd0:	b085      	sub	sp, #20
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fe0:	699b      	ldr	r3, [r3, #24]
 8009fe2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fea:	69db      	ldr	r3, [r3, #28]
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	4013      	ands	r3, r2
 8009ff0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	b29b      	uxth	r3, r3
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3714      	adds	r7, #20
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a002:	b480      	push	{r7}
 800a004:	b085      	sub	sp, #20
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	460b      	mov	r3, r1
 800a00c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a012:	78fb      	ldrb	r3, [r7, #3]
 800a014:	015a      	lsls	r2, r3, #5
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	4413      	add	r3, r2
 800a01a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a028:	695b      	ldr	r3, [r3, #20]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	4013      	ands	r3, r2
 800a02e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a030:	68bb      	ldr	r3, [r7, #8]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3714      	adds	r7, #20
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a03e:	b480      	push	{r7}
 800a040:	b087      	sub	sp, #28
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
 800a046:	460b      	mov	r3, r1
 800a048:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a05e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a060:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a062:	78fb      	ldrb	r3, [r7, #3]
 800a064:	f003 030f 	and.w	r3, r3, #15
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	fa22 f303 	lsr.w	r3, r2, r3
 800a06e:	01db      	lsls	r3, r3, #7
 800a070:	b2db      	uxtb	r3, r3
 800a072:	693a      	ldr	r2, [r7, #16]
 800a074:	4313      	orrs	r3, r2
 800a076:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a078:	78fb      	ldrb	r3, [r7, #3]
 800a07a:	015a      	lsls	r2, r3, #5
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	4413      	add	r3, r2
 800a080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	4013      	ands	r3, r2
 800a08a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a08c:	68bb      	ldr	r3, [r7, #8]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	371c      	adds	r7, #28
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a09a:	b480      	push	{r7}
 800a09c:	b083      	sub	sp, #12
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	695b      	ldr	r3, [r3, #20]
 800a0a6:	f003 0301 	and.w	r3, r3, #1
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0b6:	b480      	push	{r7}
 800a0b8:	b085      	sub	sp, #20
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a0d4:	f023 0307 	bic.w	r3, r3, #7
 800a0d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b087      	sub	sp, #28
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	460b      	mov	r3, r1
 800a106:	607a      	str	r2, [r7, #4]
 800a108:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	333c      	adds	r3, #60	@ 0x3c
 800a112:	3304      	adds	r3, #4
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	4a26      	ldr	r2, [pc, #152]	@ (800a1b4 <USB_EP0_OutStart+0xb8>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d90a      	bls.n	800a136 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a12c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a130:	d101      	bne.n	800a136 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a132:	2300      	movs	r3, #0
 800a134:	e037      	b.n	800a1a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a13c:	461a      	mov	r2, r3
 800a13e:	2300      	movs	r3, #0
 800a140:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	697a      	ldr	r2, [r7, #20]
 800a14c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a150:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a154:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a164:	f043 0318 	orr.w	r3, r3, #24
 800a168:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a178:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a17c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a17e:	7afb      	ldrb	r3, [r7, #11]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d10f      	bne.n	800a1a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a18a:	461a      	mov	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	697a      	ldr	r2, [r7, #20]
 800a19a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a19e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a1a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	371c      	adds	r7, #28
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	4f54300a 	.word	0x4f54300a

0800a1b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a1d0:	d901      	bls.n	800a1d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e01b      	b.n	800a20e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	daf2      	bge.n	800a1c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	f043 0201 	orr.w	r2, r3, #1
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a1fa:	d901      	bls.n	800a200 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e006      	b.n	800a20e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d0f0      	beq.n	800a1ee <USB_CoreReset+0x36>

  return HAL_OK;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3714      	adds	r7, #20
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
	...

0800a21c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a228:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a22c:	f002 fce4 	bl	800cbf8 <USBD_static_malloc>
 800a230:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d109      	bne.n	800a24c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	32b0      	adds	r2, #176	@ 0xb0
 800a242:	2100      	movs	r1, #0
 800a244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a248:	2302      	movs	r3, #2
 800a24a:	e0d4      	b.n	800a3f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a24c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a250:	2100      	movs	r1, #0
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f003 fbb0 	bl	800d9b8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	32b0      	adds	r2, #176	@ 0xb0
 800a262:	68f9      	ldr	r1, [r7, #12]
 800a264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	32b0      	adds	r2, #176	@ 0xb0
 800a272:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	7c1b      	ldrb	r3, [r3, #16]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d138      	bne.n	800a2f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a284:	4b5e      	ldr	r3, [pc, #376]	@ (800a400 <USBD_CDC_Init+0x1e4>)
 800a286:	7819      	ldrb	r1, [r3, #0]
 800a288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a28c:	2202      	movs	r2, #2
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f002 fb8f 	bl	800c9b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a294:	4b5a      	ldr	r3, [pc, #360]	@ (800a400 <USBD_CDC_Init+0x1e4>)
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	f003 020f 	and.w	r2, r3, #15
 800a29c:	6879      	ldr	r1, [r7, #4]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	440b      	add	r3, r1
 800a2a8:	3324      	adds	r3, #36	@ 0x24
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a2ae:	4b55      	ldr	r3, [pc, #340]	@ (800a404 <USBD_CDC_Init+0x1e8>)
 800a2b0:	7819      	ldrb	r1, [r3, #0]
 800a2b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f002 fb7a 	bl	800c9b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a2be:	4b51      	ldr	r3, [pc, #324]	@ (800a404 <USBD_CDC_Init+0x1e8>)
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	f003 020f 	and.w	r2, r3, #15
 800a2c6:	6879      	ldr	r1, [r7, #4]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	440b      	add	r3, r1
 800a2d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a2da:	4b4b      	ldr	r3, [pc, #300]	@ (800a408 <USBD_CDC_Init+0x1ec>)
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	f003 020f 	and.w	r2, r3, #15
 800a2e2:	6879      	ldr	r1, [r7, #4]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	4413      	add	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	440b      	add	r3, r1
 800a2ee:	3326      	adds	r3, #38	@ 0x26
 800a2f0:	2210      	movs	r2, #16
 800a2f2:	801a      	strh	r2, [r3, #0]
 800a2f4:	e035      	b.n	800a362 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a2f6:	4b42      	ldr	r3, [pc, #264]	@ (800a400 <USBD_CDC_Init+0x1e4>)
 800a2f8:	7819      	ldrb	r1, [r3, #0]
 800a2fa:	2340      	movs	r3, #64	@ 0x40
 800a2fc:	2202      	movs	r2, #2
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f002 fb57 	bl	800c9b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a304:	4b3e      	ldr	r3, [pc, #248]	@ (800a400 <USBD_CDC_Init+0x1e4>)
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	f003 020f 	and.w	r2, r3, #15
 800a30c:	6879      	ldr	r1, [r7, #4]
 800a30e:	4613      	mov	r3, r2
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	4413      	add	r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	440b      	add	r3, r1
 800a318:	3324      	adds	r3, #36	@ 0x24
 800a31a:	2201      	movs	r2, #1
 800a31c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a31e:	4b39      	ldr	r3, [pc, #228]	@ (800a404 <USBD_CDC_Init+0x1e8>)
 800a320:	7819      	ldrb	r1, [r3, #0]
 800a322:	2340      	movs	r3, #64	@ 0x40
 800a324:	2202      	movs	r2, #2
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f002 fb43 	bl	800c9b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a32c:	4b35      	ldr	r3, [pc, #212]	@ (800a404 <USBD_CDC_Init+0x1e8>)
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	f003 020f 	and.w	r2, r3, #15
 800a334:	6879      	ldr	r1, [r7, #4]
 800a336:	4613      	mov	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	440b      	add	r3, r1
 800a340:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a344:	2201      	movs	r2, #1
 800a346:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a348:	4b2f      	ldr	r3, [pc, #188]	@ (800a408 <USBD_CDC_Init+0x1ec>)
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	f003 020f 	and.w	r2, r3, #15
 800a350:	6879      	ldr	r1, [r7, #4]
 800a352:	4613      	mov	r3, r2
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4413      	add	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	440b      	add	r3, r1
 800a35c:	3326      	adds	r3, #38	@ 0x26
 800a35e:	2210      	movs	r2, #16
 800a360:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a362:	4b29      	ldr	r3, [pc, #164]	@ (800a408 <USBD_CDC_Init+0x1ec>)
 800a364:	7819      	ldrb	r1, [r3, #0]
 800a366:	2308      	movs	r3, #8
 800a368:	2203      	movs	r2, #3
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f002 fb21 	bl	800c9b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a370:	4b25      	ldr	r3, [pc, #148]	@ (800a408 <USBD_CDC_Init+0x1ec>)
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	f003 020f 	and.w	r2, r3, #15
 800a378:	6879      	ldr	r1, [r7, #4]
 800a37a:	4613      	mov	r3, r2
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	4413      	add	r3, r2
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	440b      	add	r3, r1
 800a384:	3324      	adds	r3, #36	@ 0x24
 800a386:	2201      	movs	r2, #1
 800a388:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	33b0      	adds	r3, #176	@ 0xb0
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4413      	add	r3, r2
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d101      	bne.n	800a3c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	e018      	b.n	800a3f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	7c1b      	ldrb	r3, [r3, #16]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10a      	bne.n	800a3e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a3cc:	4b0d      	ldr	r3, [pc, #52]	@ (800a404 <USBD_CDC_Init+0x1e8>)
 800a3ce:	7819      	ldrb	r1, [r3, #0]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a3d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f002 fbd8 	bl	800cb90 <USBD_LL_PrepareReceive>
 800a3e0:	e008      	b.n	800a3f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a3e2:	4b08      	ldr	r3, [pc, #32]	@ (800a404 <USBD_CDC_Init+0x1e8>)
 800a3e4:	7819      	ldrb	r1, [r3, #0]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a3ec:	2340      	movs	r3, #64	@ 0x40
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f002 fbce 	bl	800cb90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	20000093 	.word	0x20000093
 800a404:	20000094 	.word	0x20000094
 800a408:	20000095 	.word	0x20000095

0800a40c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	460b      	mov	r3, r1
 800a416:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a418:	4b3a      	ldr	r3, [pc, #232]	@ (800a504 <USBD_CDC_DeInit+0xf8>)
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	4619      	mov	r1, r3
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f002 faed 	bl	800c9fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a424:	4b37      	ldr	r3, [pc, #220]	@ (800a504 <USBD_CDC_DeInit+0xf8>)
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	f003 020f 	and.w	r2, r3, #15
 800a42c:	6879      	ldr	r1, [r7, #4]
 800a42e:	4613      	mov	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4413      	add	r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	440b      	add	r3, r1
 800a438:	3324      	adds	r3, #36	@ 0x24
 800a43a:	2200      	movs	r2, #0
 800a43c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a43e:	4b32      	ldr	r3, [pc, #200]	@ (800a508 <USBD_CDC_DeInit+0xfc>)
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f002 fada 	bl	800c9fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a44a:	4b2f      	ldr	r3, [pc, #188]	@ (800a508 <USBD_CDC_DeInit+0xfc>)
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	f003 020f 	and.w	r2, r3, #15
 800a452:	6879      	ldr	r1, [r7, #4]
 800a454:	4613      	mov	r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	4413      	add	r3, r2
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	440b      	add	r3, r1
 800a45e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a462:	2200      	movs	r2, #0
 800a464:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a466:	4b29      	ldr	r3, [pc, #164]	@ (800a50c <USBD_CDC_DeInit+0x100>)
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f002 fac6 	bl	800c9fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a472:	4b26      	ldr	r3, [pc, #152]	@ (800a50c <USBD_CDC_DeInit+0x100>)
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	f003 020f 	and.w	r2, r3, #15
 800a47a:	6879      	ldr	r1, [r7, #4]
 800a47c:	4613      	mov	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	440b      	add	r3, r1
 800a486:	3324      	adds	r3, #36	@ 0x24
 800a488:	2200      	movs	r2, #0
 800a48a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a48c:	4b1f      	ldr	r3, [pc, #124]	@ (800a50c <USBD_CDC_DeInit+0x100>)
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	f003 020f 	and.w	r2, r3, #15
 800a494:	6879      	ldr	r1, [r7, #4]
 800a496:	4613      	mov	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	4413      	add	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	440b      	add	r3, r1
 800a4a0:	3326      	adds	r3, #38	@ 0x26
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	32b0      	adds	r2, #176	@ 0xb0
 800a4b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d01f      	beq.n	800a4f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	33b0      	adds	r3, #176	@ 0xb0
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4413      	add	r3, r2
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	32b0      	adds	r2, #176	@ 0xb0
 800a4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f002 fb9a 	bl	800cc14 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	32b0      	adds	r2, #176	@ 0xb0
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	20000093 	.word	0x20000093
 800a508:	20000094 	.word	0x20000094
 800a50c:	20000095 	.word	0x20000095

0800a510 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b086      	sub	sp, #24
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	32b0      	adds	r2, #176	@ 0xb0
 800a524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a528:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a52a:	2300      	movs	r3, #0
 800a52c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a52e:	2300      	movs	r3, #0
 800a530:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a532:	2300      	movs	r3, #0
 800a534:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d101      	bne.n	800a540 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e0bf      	b.n	800a6c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d050      	beq.n	800a5ee <USBD_CDC_Setup+0xde>
 800a54c:	2b20      	cmp	r3, #32
 800a54e:	f040 80af 	bne.w	800a6b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	88db      	ldrh	r3, [r3, #6]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d03a      	beq.n	800a5d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	b25b      	sxtb	r3, r3
 800a560:	2b00      	cmp	r3, #0
 800a562:	da1b      	bge.n	800a59c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	33b0      	adds	r3, #176	@ 0xb0
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	4413      	add	r3, r2
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	683a      	ldr	r2, [r7, #0]
 800a578:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a57a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	88d2      	ldrh	r2, [r2, #6]
 800a580:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	88db      	ldrh	r3, [r3, #6]
 800a586:	2b07      	cmp	r3, #7
 800a588:	bf28      	it	cs
 800a58a:	2307      	movcs	r3, #7
 800a58c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	89fa      	ldrh	r2, [r7, #14]
 800a592:	4619      	mov	r1, r3
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f001 fd93 	bl	800c0c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a59a:	e090      	b.n	800a6be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	785a      	ldrb	r2, [r3, #1]
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	88db      	ldrh	r3, [r3, #6]
 800a5aa:	2b3f      	cmp	r3, #63	@ 0x3f
 800a5ac:	d803      	bhi.n	800a5b6 <USBD_CDC_Setup+0xa6>
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	88db      	ldrh	r3, [r3, #6]
 800a5b2:	b2da      	uxtb	r2, r3
 800a5b4:	e000      	b.n	800a5b8 <USBD_CDC_Setup+0xa8>
 800a5b6:	2240      	movs	r2, #64	@ 0x40
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a5be:	6939      	ldr	r1, [r7, #16]
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f001 fda5 	bl	800c118 <USBD_CtlPrepareRx>
      break;
 800a5ce:	e076      	b.n	800a6be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	33b0      	adds	r3, #176	@ 0xb0
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4413      	add	r3, r2
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	683a      	ldr	r2, [r7, #0]
 800a5e4:	7850      	ldrb	r0, [r2, #1]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	6839      	ldr	r1, [r7, #0]
 800a5ea:	4798      	blx	r3
      break;
 800a5ec:	e067      	b.n	800a6be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	785b      	ldrb	r3, [r3, #1]
 800a5f2:	2b0b      	cmp	r3, #11
 800a5f4:	d851      	bhi.n	800a69a <USBD_CDC_Setup+0x18a>
 800a5f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5fc <USBD_CDC_Setup+0xec>)
 800a5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5fc:	0800a62d 	.word	0x0800a62d
 800a600:	0800a6a9 	.word	0x0800a6a9
 800a604:	0800a69b 	.word	0x0800a69b
 800a608:	0800a69b 	.word	0x0800a69b
 800a60c:	0800a69b 	.word	0x0800a69b
 800a610:	0800a69b 	.word	0x0800a69b
 800a614:	0800a69b 	.word	0x0800a69b
 800a618:	0800a69b 	.word	0x0800a69b
 800a61c:	0800a69b 	.word	0x0800a69b
 800a620:	0800a69b 	.word	0x0800a69b
 800a624:	0800a657 	.word	0x0800a657
 800a628:	0800a681 	.word	0x0800a681
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a632:	b2db      	uxtb	r3, r3
 800a634:	2b03      	cmp	r3, #3
 800a636:	d107      	bne.n	800a648 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a638:	f107 030a 	add.w	r3, r7, #10
 800a63c:	2202      	movs	r2, #2
 800a63e:	4619      	mov	r1, r3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f001 fd3d 	bl	800c0c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a646:	e032      	b.n	800a6ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f001 fcbb 	bl	800bfc6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a650:	2303      	movs	r3, #3
 800a652:	75fb      	strb	r3, [r7, #23]
          break;
 800a654:	e02b      	b.n	800a6ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	2b03      	cmp	r3, #3
 800a660:	d107      	bne.n	800a672 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a662:	f107 030d 	add.w	r3, r7, #13
 800a666:	2201      	movs	r2, #1
 800a668:	4619      	mov	r1, r3
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f001 fd28 	bl	800c0c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a670:	e01d      	b.n	800a6ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a672:	6839      	ldr	r1, [r7, #0]
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f001 fca6 	bl	800bfc6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a67a:	2303      	movs	r3, #3
 800a67c:	75fb      	strb	r3, [r7, #23]
          break;
 800a67e:	e016      	b.n	800a6ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a686:	b2db      	uxtb	r3, r3
 800a688:	2b03      	cmp	r3, #3
 800a68a:	d00f      	beq.n	800a6ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a68c:	6839      	ldr	r1, [r7, #0]
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f001 fc99 	bl	800bfc6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a694:	2303      	movs	r3, #3
 800a696:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a698:	e008      	b.n	800a6ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a69a:	6839      	ldr	r1, [r7, #0]
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f001 fc92 	bl	800bfc6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a6a2:	2303      	movs	r3, #3
 800a6a4:	75fb      	strb	r3, [r7, #23]
          break;
 800a6a6:	e002      	b.n	800a6ae <USBD_CDC_Setup+0x19e>
          break;
 800a6a8:	bf00      	nop
 800a6aa:	e008      	b.n	800a6be <USBD_CDC_Setup+0x1ae>
          break;
 800a6ac:	bf00      	nop
      }
      break;
 800a6ae:	e006      	b.n	800a6be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a6b0:	6839      	ldr	r1, [r7, #0]
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f001 fc87 	bl	800bfc6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	75fb      	strb	r3, [r7, #23]
      break;
 800a6bc:	bf00      	nop
  }

  return (uint8_t)ret;
 800a6be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3718      	adds	r7, #24
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a6da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	32b0      	adds	r2, #176	@ 0xb0
 800a6e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d101      	bne.n	800a6f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e065      	b.n	800a7be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	32b0      	adds	r2, #176	@ 0xb0
 800a6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a700:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a702:	78fb      	ldrb	r3, [r7, #3]
 800a704:	f003 020f 	and.w	r2, r3, #15
 800a708:	6879      	ldr	r1, [r7, #4]
 800a70a:	4613      	mov	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	4413      	add	r3, r2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	440b      	add	r3, r1
 800a714:	3318      	adds	r3, #24
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d02f      	beq.n	800a77c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a71c:	78fb      	ldrb	r3, [r7, #3]
 800a71e:	f003 020f 	and.w	r2, r3, #15
 800a722:	6879      	ldr	r1, [r7, #4]
 800a724:	4613      	mov	r3, r2
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4413      	add	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	440b      	add	r3, r1
 800a72e:	3318      	adds	r3, #24
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	78fb      	ldrb	r3, [r7, #3]
 800a734:	f003 010f 	and.w	r1, r3, #15
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	460b      	mov	r3, r1
 800a73c:	00db      	lsls	r3, r3, #3
 800a73e:	440b      	add	r3, r1
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4403      	add	r3, r0
 800a744:	331c      	adds	r3, #28
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	fbb2 f1f3 	udiv	r1, r2, r3
 800a74c:	fb01 f303 	mul.w	r3, r1, r3
 800a750:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a752:	2b00      	cmp	r3, #0
 800a754:	d112      	bne.n	800a77c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a756:	78fb      	ldrb	r3, [r7, #3]
 800a758:	f003 020f 	and.w	r2, r3, #15
 800a75c:	6879      	ldr	r1, [r7, #4]
 800a75e:	4613      	mov	r3, r2
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	440b      	add	r3, r1
 800a768:	3318      	adds	r3, #24
 800a76a:	2200      	movs	r2, #0
 800a76c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a76e:	78f9      	ldrb	r1, [r7, #3]
 800a770:	2300      	movs	r3, #0
 800a772:	2200      	movs	r2, #0
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f002 f9ea 	bl	800cb4e <USBD_LL_Transmit>
 800a77a:	e01f      	b.n	800a7bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2200      	movs	r2, #0
 800a780:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	33b0      	adds	r3, #176	@ 0xb0
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d010      	beq.n	800a7bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	33b0      	adds	r3, #176	@ 0xb0
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	68ba      	ldr	r2, [r7, #8]
 800a7ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a7b8:	78fa      	ldrb	r2, [r7, #3]
 800a7ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b084      	sub	sp, #16
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	32b0      	adds	r2, #176	@ 0xb0
 800a7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	32b0      	adds	r2, #176	@ 0xb0
 800a7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d101      	bne.n	800a7f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e01a      	b.n	800a82e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a7f8:	78fb      	ldrb	r3, [r7, #3]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f002 f9e8 	bl	800cbd2 <USBD_LL_GetRxDataSize>
 800a802:	4602      	mov	r2, r0
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	33b0      	adds	r3, #176	@ 0xb0
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a828:	4611      	mov	r1, r2
 800a82a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b084      	sub	sp, #16
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	32b0      	adds	r2, #176	@ 0xb0
 800a848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a84c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a854:	2303      	movs	r3, #3
 800a856:	e024      	b.n	800a8a2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	33b0      	adds	r3, #176	@ 0xb0
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	4413      	add	r3, r2
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d019      	beq.n	800a8a0 <USBD_CDC_EP0_RxReady+0x6a>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a872:	2bff      	cmp	r3, #255	@ 0xff
 800a874:	d014      	beq.n	800a8a0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	33b0      	adds	r3, #176	@ 0xb0
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4413      	add	r3, r2
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a88e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a896:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	22ff      	movs	r2, #255	@ 0xff
 800a89c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
	...

0800a8ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a8b4:	2182      	movs	r1, #130	@ 0x82
 800a8b6:	4818      	ldr	r0, [pc, #96]	@ (800a918 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a8b8:	f000 fd4f 	bl	800b35a <USBD_GetEpDesc>
 800a8bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a8be:	2101      	movs	r1, #1
 800a8c0:	4815      	ldr	r0, [pc, #84]	@ (800a918 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a8c2:	f000 fd4a 	bl	800b35a <USBD_GetEpDesc>
 800a8c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a8c8:	2181      	movs	r1, #129	@ 0x81
 800a8ca:	4813      	ldr	r0, [pc, #76]	@ (800a918 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a8cc:	f000 fd45 	bl	800b35a <USBD_GetEpDesc>
 800a8d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	2210      	movs	r2, #16
 800a8dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d006      	beq.n	800a8f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a8ec:	711a      	strb	r2, [r3, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d006      	beq.n	800a906 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a900:	711a      	strb	r2, [r3, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2243      	movs	r2, #67	@ 0x43
 800a90a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a90c:	4b02      	ldr	r3, [pc, #8]	@ (800a918 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3718      	adds	r7, #24
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	20000050 	.word	0x20000050

0800a91c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a924:	2182      	movs	r1, #130	@ 0x82
 800a926:	4818      	ldr	r0, [pc, #96]	@ (800a988 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a928:	f000 fd17 	bl	800b35a <USBD_GetEpDesc>
 800a92c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a92e:	2101      	movs	r1, #1
 800a930:	4815      	ldr	r0, [pc, #84]	@ (800a988 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a932:	f000 fd12 	bl	800b35a <USBD_GetEpDesc>
 800a936:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a938:	2181      	movs	r1, #129	@ 0x81
 800a93a:	4813      	ldr	r0, [pc, #76]	@ (800a988 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a93c:	f000 fd0d 	bl	800b35a <USBD_GetEpDesc>
 800a940:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	2210      	movs	r2, #16
 800a94c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d006      	beq.n	800a962 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	2200      	movs	r2, #0
 800a958:	711a      	strb	r2, [r3, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f042 0202 	orr.w	r2, r2, #2
 800a960:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d006      	beq.n	800a976 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	711a      	strb	r2, [r3, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f042 0202 	orr.w	r2, r2, #2
 800a974:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2243      	movs	r2, #67	@ 0x43
 800a97a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a97c:	4b02      	ldr	r3, [pc, #8]	@ (800a988 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	20000050 	.word	0x20000050

0800a98c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a994:	2182      	movs	r1, #130	@ 0x82
 800a996:	4818      	ldr	r0, [pc, #96]	@ (800a9f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a998:	f000 fcdf 	bl	800b35a <USBD_GetEpDesc>
 800a99c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a99e:	2101      	movs	r1, #1
 800a9a0:	4815      	ldr	r0, [pc, #84]	@ (800a9f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a9a2:	f000 fcda 	bl	800b35a <USBD_GetEpDesc>
 800a9a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a9a8:	2181      	movs	r1, #129	@ 0x81
 800a9aa:	4813      	ldr	r0, [pc, #76]	@ (800a9f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a9ac:	f000 fcd5 	bl	800b35a <USBD_GetEpDesc>
 800a9b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d002      	beq.n	800a9be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	2210      	movs	r2, #16
 800a9bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d006      	beq.n	800a9d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a9cc:	711a      	strb	r2, [r3, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d006      	beq.n	800a9e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a9e0:	711a      	strb	r2, [r3, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2243      	movs	r2, #67	@ 0x43
 800a9ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a9ec:	4b02      	ldr	r3, [pc, #8]	@ (800a9f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3718      	adds	r7, #24
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	20000050 	.word	0x20000050

0800a9fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	220a      	movs	r2, #10
 800aa08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aa0a:	4b03      	ldr	r3, [pc, #12]	@ (800aa18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr
 800aa18:	2000000c 	.word	0x2000000c

0800aa1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d101      	bne.n	800aa30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	e009      	b.n	800aa44 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	33b0      	adds	r3, #176	@ 0xb0
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	4413      	add	r3, r2
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b087      	sub	sp, #28
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	32b0      	adds	r2, #176	@ 0xb0
 800aa66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa6a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800aa72:	2303      	movs	r3, #3
 800aa74:	e008      	b.n	800aa88 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	68ba      	ldr	r2, [r7, #8]
 800aa7a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	371c      	adds	r7, #28
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	32b0      	adds	r2, #176	@ 0xb0
 800aaa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800aab4:	2303      	movs	r3, #3
 800aab6:	e004      	b.n	800aac2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3714      	adds	r7, #20
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
	...

0800aad0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	32b0      	adds	r2, #176	@ 0xb0
 800aae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800aae8:	2301      	movs	r3, #1
 800aaea:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d101      	bne.n	800aaf6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800aaf2:	2303      	movs	r3, #3
 800aaf4:	e025      	b.n	800ab42 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d11f      	bne.n	800ab40 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ab08:	4b10      	ldr	r3, [pc, #64]	@ (800ab4c <USBD_CDC_TransmitPacket+0x7c>)
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	f003 020f 	and.w	r2, r3, #15
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	4613      	mov	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4413      	add	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4403      	add	r3, r0
 800ab22:	3318      	adds	r3, #24
 800ab24:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ab26:	4b09      	ldr	r3, [pc, #36]	@ (800ab4c <USBD_CDC_TransmitPacket+0x7c>)
 800ab28:	7819      	ldrb	r1, [r3, #0]
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f002 f809 	bl	800cb4e <USBD_LL_Transmit>

    ret = USBD_OK;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20000093 	.word	0x20000093

0800ab50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	32b0      	adds	r2, #176	@ 0xb0
 800ab62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab66:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	32b0      	adds	r2, #176	@ 0xb0
 800ab72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ab7a:	2303      	movs	r3, #3
 800ab7c:	e018      	b.n	800abb0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	7c1b      	ldrb	r3, [r3, #16]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d10a      	bne.n	800ab9c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab86:	4b0c      	ldr	r3, [pc, #48]	@ (800abb8 <USBD_CDC_ReceivePacket+0x68>)
 800ab88:	7819      	ldrb	r1, [r3, #0]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ab90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f001 fffb 	bl	800cb90 <USBD_LL_PrepareReceive>
 800ab9a:	e008      	b.n	800abae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab9c:	4b06      	ldr	r3, [pc, #24]	@ (800abb8 <USBD_CDC_ReceivePacket+0x68>)
 800ab9e:	7819      	ldrb	r1, [r3, #0]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aba6:	2340      	movs	r3, #64	@ 0x40
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f001 fff1 	bl	800cb90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	20000094 	.word	0x20000094

0800abbc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	4613      	mov	r3, r2
 800abc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d101      	bne.n	800abd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800abd0:	2303      	movs	r3, #3
 800abd2:	e01f      	b.n	800ac14 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d003      	beq.n	800abfa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	68ba      	ldr	r2, [r7, #8]
 800abf6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2201      	movs	r2, #1
 800abfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	79fa      	ldrb	r2, [r7, #7]
 800ac06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f001 fe6b 	bl	800c8e4 <USBD_LL_Init>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ac12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3718      	adds	r7, #24
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac26:	2300      	movs	r3, #0
 800ac28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d101      	bne.n	800ac34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e025      	b.n	800ac80 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	32ae      	adds	r2, #174	@ 0xae
 800ac46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00f      	beq.n	800ac70 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	32ae      	adds	r2, #174	@ 0xae
 800ac5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac60:	f107 020e 	add.w	r2, r7, #14
 800ac64:	4610      	mov	r0, r2
 800ac66:	4798      	blx	r3
 800ac68:	4602      	mov	r2, r0
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ac76:	1c5a      	adds	r2, r3, #1
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f001 fe73 	bl	800c97c <USBD_LL_Start>
 800ac96:	4603      	mov	r3, r0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3708      	adds	r7, #8
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aca8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800acaa:	4618      	mov	r0, r3
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b084      	sub	sp, #16
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	460b      	mov	r3, r1
 800acc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800acc2:	2300      	movs	r3, #0
 800acc4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800accc:	2b00      	cmp	r3, #0
 800acce:	d009      	beq.n	800ace4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	78fa      	ldrb	r2, [r7, #3]
 800acda:	4611      	mov	r1, r2
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	4798      	blx	r3
 800ace0:	4603      	mov	r3, r0
 800ace2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ace4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b084      	sub	sp, #16
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	460b      	mov	r3, r1
 800acf8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	78fa      	ldrb	r2, [r7, #3]
 800ad08:	4611      	mov	r1, r2
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	4798      	blx	r3
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d001      	beq.n	800ad18 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ad14:	2303      	movs	r3, #3
 800ad16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b084      	sub	sp, #16
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f001 f90c 	bl	800bf52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ad48:	461a      	mov	r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ad56:	f003 031f 	and.w	r3, r3, #31
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d01a      	beq.n	800ad94 <USBD_LL_SetupStage+0x72>
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d822      	bhi.n	800ada8 <USBD_LL_SetupStage+0x86>
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d002      	beq.n	800ad6c <USBD_LL_SetupStage+0x4a>
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d00a      	beq.n	800ad80 <USBD_LL_SetupStage+0x5e>
 800ad6a:	e01d      	b.n	800ada8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad72:	4619      	mov	r1, r3
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fb63 	bl	800b440 <USBD_StdDevReq>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	73fb      	strb	r3, [r7, #15]
      break;
 800ad7e:	e020      	b.n	800adc2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad86:	4619      	mov	r1, r3
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fbcb 	bl	800b524 <USBD_StdItfReq>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	73fb      	strb	r3, [r7, #15]
      break;
 800ad92:	e016      	b.n	800adc2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fc2d 	bl	800b5fc <USBD_StdEPReq>
 800ada2:	4603      	mov	r3, r0
 800ada4:	73fb      	strb	r3, [r7, #15]
      break;
 800ada6:	e00c      	b.n	800adc2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800adae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	4619      	mov	r1, r3
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f001 fe40 	bl	800ca3c <USBD_LL_StallEP>
 800adbc:	4603      	mov	r3, r0
 800adbe:	73fb      	strb	r3, [r7, #15]
      break;
 800adc0:	bf00      	nop
  }

  return ret;
 800adc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	460b      	mov	r3, r1
 800add6:	607a      	str	r2, [r7, #4]
 800add8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800adde:	7afb      	ldrb	r3, [r7, #11]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d16e      	bne.n	800aec2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800adea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	f040 8098 	bne.w	800af28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	689a      	ldr	r2, [r3, #8]
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d913      	bls.n	800ae2c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	689a      	ldr	r2, [r3, #8]
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	1ad2      	subs	r2, r2, r3
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	68da      	ldr	r2, [r3, #12]
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	bf28      	it	cs
 800ae1e:	4613      	movcs	r3, r2
 800ae20:	461a      	mov	r2, r3
 800ae22:	6879      	ldr	r1, [r7, #4]
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	f001 f994 	bl	800c152 <USBD_CtlContinueRx>
 800ae2a:	e07d      	b.n	800af28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ae32:	f003 031f 	and.w	r3, r3, #31
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d014      	beq.n	800ae64 <USBD_LL_DataOutStage+0x98>
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d81d      	bhi.n	800ae7a <USBD_LL_DataOutStage+0xae>
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d002      	beq.n	800ae48 <USBD_LL_DataOutStage+0x7c>
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d003      	beq.n	800ae4e <USBD_LL_DataOutStage+0x82>
 800ae46:	e018      	b.n	800ae7a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	75bb      	strb	r3, [r7, #22]
            break;
 800ae4c:	e018      	b.n	800ae80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	4619      	mov	r1, r3
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	f000 fa64 	bl	800b326 <USBD_CoreFindIF>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	75bb      	strb	r3, [r7, #22]
            break;
 800ae62:	e00d      	b.n	800ae80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f000 fa66 	bl	800b340 <USBD_CoreFindEP>
 800ae74:	4603      	mov	r3, r0
 800ae76:	75bb      	strb	r3, [r7, #22]
            break;
 800ae78:	e002      	b.n	800ae80 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	75bb      	strb	r3, [r7, #22]
            break;
 800ae7e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ae80:	7dbb      	ldrb	r3, [r7, #22]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d119      	bne.n	800aeba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b03      	cmp	r3, #3
 800ae90:	d113      	bne.n	800aeba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ae92:	7dba      	ldrb	r2, [r7, #22]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	32ae      	adds	r2, #174	@ 0xae
 800ae98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d00b      	beq.n	800aeba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800aea2:	7dba      	ldrb	r2, [r7, #22]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800aeaa:	7dba      	ldrb	r2, [r7, #22]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	32ae      	adds	r2, #174	@ 0xae
 800aeb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	f001 f95a 	bl	800c174 <USBD_CtlSendStatus>
 800aec0:	e032      	b.n	800af28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800aec2:	7afb      	ldrb	r3, [r7, #11]
 800aec4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	4619      	mov	r1, r3
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f000 fa37 	bl	800b340 <USBD_CoreFindEP>
 800aed2:	4603      	mov	r3, r0
 800aed4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aed6:	7dbb      	ldrb	r3, [r7, #22]
 800aed8:	2bff      	cmp	r3, #255	@ 0xff
 800aeda:	d025      	beq.n	800af28 <USBD_LL_DataOutStage+0x15c>
 800aedc:	7dbb      	ldrb	r3, [r7, #22]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d122      	bne.n	800af28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	2b03      	cmp	r3, #3
 800aeec:	d117      	bne.n	800af1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800aeee:	7dba      	ldrb	r2, [r7, #22]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	32ae      	adds	r2, #174	@ 0xae
 800aef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef8:	699b      	ldr	r3, [r3, #24]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d00f      	beq.n	800af1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800aefe:	7dba      	ldrb	r2, [r7, #22]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800af06:	7dba      	ldrb	r2, [r7, #22]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	32ae      	adds	r2, #174	@ 0xae
 800af0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	7afa      	ldrb	r2, [r7, #11]
 800af14:	4611      	mov	r1, r2
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	4798      	blx	r3
 800af1a:	4603      	mov	r3, r0
 800af1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800af1e:	7dfb      	ldrb	r3, [r7, #23]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d001      	beq.n	800af28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800af24:	7dfb      	ldrb	r3, [r7, #23]
 800af26:	e000      	b.n	800af2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3718      	adds	r7, #24
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b086      	sub	sp, #24
 800af36:	af00      	add	r7, sp, #0
 800af38:	60f8      	str	r0, [r7, #12]
 800af3a:	460b      	mov	r3, r1
 800af3c:	607a      	str	r2, [r7, #4]
 800af3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800af40:	7afb      	ldrb	r3, [r7, #11]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d16f      	bne.n	800b026 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	3314      	adds	r3, #20
 800af4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800af52:	2b02      	cmp	r3, #2
 800af54:	d15a      	bne.n	800b00c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	689a      	ldr	r2, [r3, #8]
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d914      	bls.n	800af8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	689a      	ldr	r2, [r3, #8]
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	1ad2      	subs	r2, r2, r3
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	461a      	mov	r2, r3
 800af76:	6879      	ldr	r1, [r7, #4]
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f001 f8bc 	bl	800c0f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af7e:	2300      	movs	r3, #0
 800af80:	2200      	movs	r2, #0
 800af82:	2100      	movs	r1, #0
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f001 fe03 	bl	800cb90 <USBD_LL_PrepareReceive>
 800af8a:	e03f      	b.n	800b00c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	68da      	ldr	r2, [r3, #12]
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	429a      	cmp	r2, r3
 800af96:	d11c      	bne.n	800afd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	685a      	ldr	r2, [r3, #4]
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d316      	bcc.n	800afd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	685a      	ldr	r2, [r3, #4]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800afae:	429a      	cmp	r2, r3
 800afb0:	d20f      	bcs.n	800afd2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800afb2:	2200      	movs	r2, #0
 800afb4:	2100      	movs	r1, #0
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f001 f89d 	bl	800c0f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afc4:	2300      	movs	r3, #0
 800afc6:	2200      	movs	r2, #0
 800afc8:	2100      	movs	r1, #0
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	f001 fde0 	bl	800cb90 <USBD_LL_PrepareReceive>
 800afd0:	e01c      	b.n	800b00c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	2b03      	cmp	r3, #3
 800afdc:	d10f      	bne.n	800affe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d009      	beq.n	800affe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2200      	movs	r2, #0
 800afee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800affe:	2180      	movs	r1, #128	@ 0x80
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f001 fd1b 	bl	800ca3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f001 f8c7 	bl	800c19a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d03a      	beq.n	800b08c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f7ff fe42 	bl	800aca0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2200      	movs	r2, #0
 800b020:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b024:	e032      	b.n	800b08c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b026:	7afb      	ldrb	r3, [r7, #11]
 800b028:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	4619      	mov	r1, r3
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f000 f985 	bl	800b340 <USBD_CoreFindEP>
 800b036:	4603      	mov	r3, r0
 800b038:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b03a:	7dfb      	ldrb	r3, [r7, #23]
 800b03c:	2bff      	cmp	r3, #255	@ 0xff
 800b03e:	d025      	beq.n	800b08c <USBD_LL_DataInStage+0x15a>
 800b040:	7dfb      	ldrb	r3, [r7, #23]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d122      	bne.n	800b08c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	2b03      	cmp	r3, #3
 800b050:	d11c      	bne.n	800b08c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b052:	7dfa      	ldrb	r2, [r7, #23]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	32ae      	adds	r2, #174	@ 0xae
 800b058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b05c:	695b      	ldr	r3, [r3, #20]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d014      	beq.n	800b08c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b062:	7dfa      	ldrb	r2, [r7, #23]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b06a:	7dfa      	ldrb	r2, [r7, #23]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	32ae      	adds	r2, #174	@ 0xae
 800b070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	7afa      	ldrb	r2, [r7, #11]
 800b078:	4611      	mov	r1, r2
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	4798      	blx	r3
 800b07e:	4603      	mov	r3, r0
 800b080:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b082:	7dbb      	ldrb	r3, [r7, #22]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b088:	7dbb      	ldrb	r3, [r7, #22]
 800b08a:	e000      	b.n	800b08e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3718      	adds	r7, #24
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b084      	sub	sp, #16
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d014      	beq.n	800b0fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00e      	beq.n	800b0fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	6852      	ldr	r2, [r2, #4]
 800b0ea:	b2d2      	uxtb	r2, r2
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	4798      	blx	r3
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d001      	beq.n	800b0fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b0f8:	2303      	movs	r3, #3
 800b0fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b0fc:	2340      	movs	r3, #64	@ 0x40
 800b0fe:	2200      	movs	r2, #0
 800b100:	2100      	movs	r1, #0
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f001 fc55 	bl	800c9b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2201      	movs	r2, #1
 800b10c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2240      	movs	r2, #64	@ 0x40
 800b114:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b118:	2340      	movs	r3, #64	@ 0x40
 800b11a:	2200      	movs	r2, #0
 800b11c:	2180      	movs	r1, #128	@ 0x80
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f001 fc47 	bl	800c9b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2240      	movs	r2, #64	@ 0x40
 800b12e:	621a      	str	r2, [r3, #32]

  return ret;
 800b130:	7bfb      	ldrb	r3, [r7, #15]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b13a:	b480      	push	{r7}
 800b13c:	b083      	sub	sp, #12
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	460b      	mov	r3, r1
 800b144:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	78fa      	ldrb	r2, [r7, #3]
 800b14a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b15a:	b480      	push	{r7}
 800b15c:	b083      	sub	sp, #12
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	2b04      	cmp	r3, #4
 800b16c:	d006      	beq.n	800b17c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b174:	b2da      	uxtb	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2204      	movs	r2, #4
 800b180:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	370c      	adds	r7, #12
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b192:	b480      	push	{r7}
 800b194:	b083      	sub	sp, #12
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	2b04      	cmp	r3, #4
 800b1a4:	d106      	bne.n	800b1b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b1ac:	b2da      	uxtb	r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b1b4:	2300      	movs	r3, #0
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	370c      	adds	r7, #12
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr

0800b1c2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b082      	sub	sp, #8
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	2b03      	cmp	r3, #3
 800b1d4:	d110      	bne.n	800b1f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d00b      	beq.n	800b1f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1e6:	69db      	ldr	r3, [r3, #28]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d005      	beq.n	800b1f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1f2:	69db      	ldr	r3, [r3, #28]
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b082      	sub	sp, #8
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	460b      	mov	r3, r1
 800b20c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	32ae      	adds	r2, #174	@ 0xae
 800b218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d101      	bne.n	800b224 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b220:	2303      	movs	r3, #3
 800b222:	e01c      	b.n	800b25e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b03      	cmp	r3, #3
 800b22e:	d115      	bne.n	800b25c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	32ae      	adds	r2, #174	@ 0xae
 800b23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b23e:	6a1b      	ldr	r3, [r3, #32]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00b      	beq.n	800b25c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	32ae      	adds	r2, #174	@ 0xae
 800b24e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b252:	6a1b      	ldr	r3, [r3, #32]
 800b254:	78fa      	ldrb	r2, [r7, #3]
 800b256:	4611      	mov	r1, r2
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b082      	sub	sp, #8
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	460b      	mov	r3, r1
 800b270:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	32ae      	adds	r2, #174	@ 0xae
 800b27c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d101      	bne.n	800b288 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b284:	2303      	movs	r3, #3
 800b286:	e01c      	b.n	800b2c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	2b03      	cmp	r3, #3
 800b292:	d115      	bne.n	800b2c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	32ae      	adds	r2, #174	@ 0xae
 800b29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00b      	beq.n	800b2c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	32ae      	adds	r2, #174	@ 0xae
 800b2b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2b8:	78fa      	ldrb	r2, [r7, #3]
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b2c0:	2300      	movs	r3, #0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3708      	adds	r7, #8
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b083      	sub	sp, #12
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b2d2:	2300      	movs	r3, #0
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00e      	beq.n	800b31c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	6852      	ldr	r2, [r2, #4]
 800b30a:	b2d2      	uxtb	r2, r2
 800b30c:	4611      	mov	r1, r2
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	4798      	blx	r3
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d001      	beq.n	800b31c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b318:	2303      	movs	r3, #3
 800b31a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b326:	b480      	push	{r7}
 800b328:	b083      	sub	sp, #12
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	460b      	mov	r3, r1
 800b330:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b332:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b334:	4618      	mov	r0, r3
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	460b      	mov	r3, r1
 800b34a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b34c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b34e:	4618      	mov	r0, r3
 800b350:	370c      	adds	r7, #12
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr

0800b35a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b086      	sub	sp, #24
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	460b      	mov	r3, r1
 800b364:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b36e:	2300      	movs	r3, #0
 800b370:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	885b      	ldrh	r3, [r3, #2]
 800b376:	b29b      	uxth	r3, r3
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	7812      	ldrb	r2, [r2, #0]
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d91f      	bls.n	800b3c0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b386:	e013      	b.n	800b3b0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b388:	f107 030a 	add.w	r3, r7, #10
 800b38c:	4619      	mov	r1, r3
 800b38e:	6978      	ldr	r0, [r7, #20]
 800b390:	f000 f81b 	bl	800b3ca <USBD_GetNextDesc>
 800b394:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	785b      	ldrb	r3, [r3, #1]
 800b39a:	2b05      	cmp	r3, #5
 800b39c:	d108      	bne.n	800b3b0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	789b      	ldrb	r3, [r3, #2]
 800b3a6:	78fa      	ldrb	r2, [r7, #3]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d008      	beq.n	800b3be <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	885b      	ldrh	r3, [r3, #2]
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	897b      	ldrh	r3, [r7, #10]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d8e5      	bhi.n	800b388 <USBD_GetEpDesc+0x2e>
 800b3bc:	e000      	b.n	800b3c0 <USBD_GetEpDesc+0x66>
          break;
 800b3be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b3c0:	693b      	ldr	r3, [r7, #16]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3718      	adds	r7, #24
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b085      	sub	sp, #20
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	881b      	ldrh	r3, [r3, #0]
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	7812      	ldrb	r2, [r2, #0]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	b29a      	uxth	r2, r3
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr

0800b402 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b402:	b480      	push	{r7}
 800b404:	b087      	sub	sp, #28
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	3301      	adds	r3, #1
 800b418:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b420:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b424:	021b      	lsls	r3, r3, #8
 800b426:	b21a      	sxth	r2, r3
 800b428:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b42c:	4313      	orrs	r3, r2
 800b42e:	b21b      	sxth	r3, r3
 800b430:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b432:	89fb      	ldrh	r3, [r7, #14]
}
 800b434:	4618      	mov	r0, r3
 800b436:	371c      	adds	r7, #28
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b44a:	2300      	movs	r3, #0
 800b44c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b456:	2b40      	cmp	r3, #64	@ 0x40
 800b458:	d005      	beq.n	800b466 <USBD_StdDevReq+0x26>
 800b45a:	2b40      	cmp	r3, #64	@ 0x40
 800b45c:	d857      	bhi.n	800b50e <USBD_StdDevReq+0xce>
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00f      	beq.n	800b482 <USBD_StdDevReq+0x42>
 800b462:	2b20      	cmp	r3, #32
 800b464:	d153      	bne.n	800b50e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	32ae      	adds	r2, #174	@ 0xae
 800b470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	6839      	ldr	r1, [r7, #0]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	4798      	blx	r3
 800b47c:	4603      	mov	r3, r0
 800b47e:	73fb      	strb	r3, [r7, #15]
      break;
 800b480:	e04a      	b.n	800b518 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	785b      	ldrb	r3, [r3, #1]
 800b486:	2b09      	cmp	r3, #9
 800b488:	d83b      	bhi.n	800b502 <USBD_StdDevReq+0xc2>
 800b48a:	a201      	add	r2, pc, #4	@ (adr r2, 800b490 <USBD_StdDevReq+0x50>)
 800b48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b490:	0800b4e5 	.word	0x0800b4e5
 800b494:	0800b4f9 	.word	0x0800b4f9
 800b498:	0800b503 	.word	0x0800b503
 800b49c:	0800b4ef 	.word	0x0800b4ef
 800b4a0:	0800b503 	.word	0x0800b503
 800b4a4:	0800b4c3 	.word	0x0800b4c3
 800b4a8:	0800b4b9 	.word	0x0800b4b9
 800b4ac:	0800b503 	.word	0x0800b503
 800b4b0:	0800b4db 	.word	0x0800b4db
 800b4b4:	0800b4cd 	.word	0x0800b4cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b4b8:	6839      	ldr	r1, [r7, #0]
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fa3c 	bl	800b938 <USBD_GetDescriptor>
          break;
 800b4c0:	e024      	b.n	800b50c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b4c2:	6839      	ldr	r1, [r7, #0]
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fba1 	bl	800bc0c <USBD_SetAddress>
          break;
 800b4ca:	e01f      	b.n	800b50c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b4cc:	6839      	ldr	r1, [r7, #0]
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fbe0 	bl	800bc94 <USBD_SetConfig>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	73fb      	strb	r3, [r7, #15]
          break;
 800b4d8:	e018      	b.n	800b50c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b4da:	6839      	ldr	r1, [r7, #0]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 fc83 	bl	800bde8 <USBD_GetConfig>
          break;
 800b4e2:	e013      	b.n	800b50c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b4e4:	6839      	ldr	r1, [r7, #0]
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 fcb4 	bl	800be54 <USBD_GetStatus>
          break;
 800b4ec:	e00e      	b.n	800b50c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b4ee:	6839      	ldr	r1, [r7, #0]
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 fce3 	bl	800bebc <USBD_SetFeature>
          break;
 800b4f6:	e009      	b.n	800b50c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b4f8:	6839      	ldr	r1, [r7, #0]
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 fd07 	bl	800bf0e <USBD_ClrFeature>
          break;
 800b500:	e004      	b.n	800b50c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b502:	6839      	ldr	r1, [r7, #0]
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 fd5e 	bl	800bfc6 <USBD_CtlError>
          break;
 800b50a:	bf00      	nop
      }
      break;
 800b50c:	e004      	b.n	800b518 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b50e:	6839      	ldr	r1, [r7, #0]
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 fd58 	bl	800bfc6 <USBD_CtlError>
      break;
 800b516:	bf00      	nop
  }

  return ret;
 800b518:	7bfb      	ldrb	r3, [r7, #15]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop

0800b524 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b52e:	2300      	movs	r3, #0
 800b530:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b53a:	2b40      	cmp	r3, #64	@ 0x40
 800b53c:	d005      	beq.n	800b54a <USBD_StdItfReq+0x26>
 800b53e:	2b40      	cmp	r3, #64	@ 0x40
 800b540:	d852      	bhi.n	800b5e8 <USBD_StdItfReq+0xc4>
 800b542:	2b00      	cmp	r3, #0
 800b544:	d001      	beq.n	800b54a <USBD_StdItfReq+0x26>
 800b546:	2b20      	cmp	r3, #32
 800b548:	d14e      	bne.n	800b5e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b550:	b2db      	uxtb	r3, r3
 800b552:	3b01      	subs	r3, #1
 800b554:	2b02      	cmp	r3, #2
 800b556:	d840      	bhi.n	800b5da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	889b      	ldrh	r3, [r3, #4]
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d836      	bhi.n	800b5d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	889b      	ldrh	r3, [r3, #4]
 800b566:	b2db      	uxtb	r3, r3
 800b568:	4619      	mov	r1, r3
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7ff fedb 	bl	800b326 <USBD_CoreFindIF>
 800b570:	4603      	mov	r3, r0
 800b572:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b574:	7bbb      	ldrb	r3, [r7, #14]
 800b576:	2bff      	cmp	r3, #255	@ 0xff
 800b578:	d01d      	beq.n	800b5b6 <USBD_StdItfReq+0x92>
 800b57a:	7bbb      	ldrb	r3, [r7, #14]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d11a      	bne.n	800b5b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b580:	7bba      	ldrb	r2, [r7, #14]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	32ae      	adds	r2, #174	@ 0xae
 800b586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00f      	beq.n	800b5b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b590:	7bba      	ldrb	r2, [r7, #14]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b598:	7bba      	ldrb	r2, [r7, #14]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	32ae      	adds	r2, #174	@ 0xae
 800b59e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	6839      	ldr	r1, [r7, #0]
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	4798      	blx	r3
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b5ae:	e004      	b.n	800b5ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b5b4:	e001      	b.n	800b5ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	88db      	ldrh	r3, [r3, #6]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d110      	bne.n	800b5e4 <USBD_StdItfReq+0xc0>
 800b5c2:	7bfb      	ldrb	r3, [r7, #15]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d10d      	bne.n	800b5e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 fdd3 	bl	800c174 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b5ce:	e009      	b.n	800b5e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b5d0:	6839      	ldr	r1, [r7, #0]
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 fcf7 	bl	800bfc6 <USBD_CtlError>
          break;
 800b5d8:	e004      	b.n	800b5e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b5da:	6839      	ldr	r1, [r7, #0]
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 fcf2 	bl	800bfc6 <USBD_CtlError>
          break;
 800b5e2:	e000      	b.n	800b5e6 <USBD_StdItfReq+0xc2>
          break;
 800b5e4:	bf00      	nop
      }
      break;
 800b5e6:	e004      	b.n	800b5f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b5e8:	6839      	ldr	r1, [r7, #0]
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fceb 	bl	800bfc6 <USBD_CtlError>
      break;
 800b5f0:	bf00      	nop
  }

  return ret;
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b606:	2300      	movs	r3, #0
 800b608:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	889b      	ldrh	r3, [r3, #4]
 800b60e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b618:	2b40      	cmp	r3, #64	@ 0x40
 800b61a:	d007      	beq.n	800b62c <USBD_StdEPReq+0x30>
 800b61c:	2b40      	cmp	r3, #64	@ 0x40
 800b61e:	f200 817f 	bhi.w	800b920 <USBD_StdEPReq+0x324>
 800b622:	2b00      	cmp	r3, #0
 800b624:	d02a      	beq.n	800b67c <USBD_StdEPReq+0x80>
 800b626:	2b20      	cmp	r3, #32
 800b628:	f040 817a 	bne.w	800b920 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b62c:	7bbb      	ldrb	r3, [r7, #14]
 800b62e:	4619      	mov	r1, r3
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f7ff fe85 	bl	800b340 <USBD_CoreFindEP>
 800b636:	4603      	mov	r3, r0
 800b638:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b63a:	7b7b      	ldrb	r3, [r7, #13]
 800b63c:	2bff      	cmp	r3, #255	@ 0xff
 800b63e:	f000 8174 	beq.w	800b92a <USBD_StdEPReq+0x32e>
 800b642:	7b7b      	ldrb	r3, [r7, #13]
 800b644:	2b00      	cmp	r3, #0
 800b646:	f040 8170 	bne.w	800b92a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b64a:	7b7a      	ldrb	r2, [r7, #13]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b652:	7b7a      	ldrb	r2, [r7, #13]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	32ae      	adds	r2, #174	@ 0xae
 800b658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b65c:	689b      	ldr	r3, [r3, #8]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f000 8163 	beq.w	800b92a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b664:	7b7a      	ldrb	r2, [r7, #13]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	32ae      	adds	r2, #174	@ 0xae
 800b66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	6839      	ldr	r1, [r7, #0]
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	4798      	blx	r3
 800b676:	4603      	mov	r3, r0
 800b678:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b67a:	e156      	b.n	800b92a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	785b      	ldrb	r3, [r3, #1]
 800b680:	2b03      	cmp	r3, #3
 800b682:	d008      	beq.n	800b696 <USBD_StdEPReq+0x9a>
 800b684:	2b03      	cmp	r3, #3
 800b686:	f300 8145 	bgt.w	800b914 <USBD_StdEPReq+0x318>
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	f000 809b 	beq.w	800b7c6 <USBD_StdEPReq+0x1ca>
 800b690:	2b01      	cmp	r3, #1
 800b692:	d03c      	beq.n	800b70e <USBD_StdEPReq+0x112>
 800b694:	e13e      	b.n	800b914 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	d002      	beq.n	800b6a8 <USBD_StdEPReq+0xac>
 800b6a2:	2b03      	cmp	r3, #3
 800b6a4:	d016      	beq.n	800b6d4 <USBD_StdEPReq+0xd8>
 800b6a6:	e02c      	b.n	800b702 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6a8:	7bbb      	ldrb	r3, [r7, #14]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00d      	beq.n	800b6ca <USBD_StdEPReq+0xce>
 800b6ae:	7bbb      	ldrb	r3, [r7, #14]
 800b6b0:	2b80      	cmp	r3, #128	@ 0x80
 800b6b2:	d00a      	beq.n	800b6ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b6b4:	7bbb      	ldrb	r3, [r7, #14]
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f001 f9bf 	bl	800ca3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6be:	2180      	movs	r1, #128	@ 0x80
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f001 f9bb 	bl	800ca3c <USBD_LL_StallEP>
 800b6c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b6c8:	e020      	b.n	800b70c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b6ca:	6839      	ldr	r1, [r7, #0]
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 fc7a 	bl	800bfc6 <USBD_CtlError>
              break;
 800b6d2:	e01b      	b.n	800b70c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	885b      	ldrh	r3, [r3, #2]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d10e      	bne.n	800b6fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b6dc:	7bbb      	ldrb	r3, [r7, #14]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00b      	beq.n	800b6fa <USBD_StdEPReq+0xfe>
 800b6e2:	7bbb      	ldrb	r3, [r7, #14]
 800b6e4:	2b80      	cmp	r3, #128	@ 0x80
 800b6e6:	d008      	beq.n	800b6fa <USBD_StdEPReq+0xfe>
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	88db      	ldrh	r3, [r3, #6]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d104      	bne.n	800b6fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b6f0:	7bbb      	ldrb	r3, [r7, #14]
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f001 f9a1 	bl	800ca3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 fd3a 	bl	800c174 <USBD_CtlSendStatus>

              break;
 800b700:	e004      	b.n	800b70c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b702:	6839      	ldr	r1, [r7, #0]
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 fc5e 	bl	800bfc6 <USBD_CtlError>
              break;
 800b70a:	bf00      	nop
          }
          break;
 800b70c:	e107      	b.n	800b91e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b02      	cmp	r3, #2
 800b718:	d002      	beq.n	800b720 <USBD_StdEPReq+0x124>
 800b71a:	2b03      	cmp	r3, #3
 800b71c:	d016      	beq.n	800b74c <USBD_StdEPReq+0x150>
 800b71e:	e04b      	b.n	800b7b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b720:	7bbb      	ldrb	r3, [r7, #14]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d00d      	beq.n	800b742 <USBD_StdEPReq+0x146>
 800b726:	7bbb      	ldrb	r3, [r7, #14]
 800b728:	2b80      	cmp	r3, #128	@ 0x80
 800b72a:	d00a      	beq.n	800b742 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b72c:	7bbb      	ldrb	r3, [r7, #14]
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f001 f983 	bl	800ca3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b736:	2180      	movs	r1, #128	@ 0x80
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f001 f97f 	bl	800ca3c <USBD_LL_StallEP>
 800b73e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b740:	e040      	b.n	800b7c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 fc3e 	bl	800bfc6 <USBD_CtlError>
              break;
 800b74a:	e03b      	b.n	800b7c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	885b      	ldrh	r3, [r3, #2]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d136      	bne.n	800b7c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b754:	7bbb      	ldrb	r3, [r7, #14]
 800b756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d004      	beq.n	800b768 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b75e:	7bbb      	ldrb	r3, [r7, #14]
 800b760:	4619      	mov	r1, r3
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f001 f989 	bl	800ca7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fd03 	bl	800c174 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b76e:	7bbb      	ldrb	r3, [r7, #14]
 800b770:	4619      	mov	r1, r3
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f7ff fde4 	bl	800b340 <USBD_CoreFindEP>
 800b778:	4603      	mov	r3, r0
 800b77a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b77c:	7b7b      	ldrb	r3, [r7, #13]
 800b77e:	2bff      	cmp	r3, #255	@ 0xff
 800b780:	d01f      	beq.n	800b7c2 <USBD_StdEPReq+0x1c6>
 800b782:	7b7b      	ldrb	r3, [r7, #13]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d11c      	bne.n	800b7c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b788:	7b7a      	ldrb	r2, [r7, #13]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b790:	7b7a      	ldrb	r2, [r7, #13]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	32ae      	adds	r2, #174	@ 0xae
 800b796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d010      	beq.n	800b7c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b7a0:	7b7a      	ldrb	r2, [r7, #13]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	32ae      	adds	r2, #174	@ 0xae
 800b7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	4798      	blx	r3
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b7b6:	e004      	b.n	800b7c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b7b8:	6839      	ldr	r1, [r7, #0]
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 fc03 	bl	800bfc6 <USBD_CtlError>
              break;
 800b7c0:	e000      	b.n	800b7c4 <USBD_StdEPReq+0x1c8>
              break;
 800b7c2:	bf00      	nop
          }
          break;
 800b7c4:	e0ab      	b.n	800b91e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d002      	beq.n	800b7d8 <USBD_StdEPReq+0x1dc>
 800b7d2:	2b03      	cmp	r3, #3
 800b7d4:	d032      	beq.n	800b83c <USBD_StdEPReq+0x240>
 800b7d6:	e097      	b.n	800b908 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7d8:	7bbb      	ldrb	r3, [r7, #14]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d007      	beq.n	800b7ee <USBD_StdEPReq+0x1f2>
 800b7de:	7bbb      	ldrb	r3, [r7, #14]
 800b7e0:	2b80      	cmp	r3, #128	@ 0x80
 800b7e2:	d004      	beq.n	800b7ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b7e4:	6839      	ldr	r1, [r7, #0]
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 fbed 	bl	800bfc6 <USBD_CtlError>
                break;
 800b7ec:	e091      	b.n	800b912 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	da0b      	bge.n	800b80e <USBD_StdEPReq+0x212>
 800b7f6:	7bbb      	ldrb	r3, [r7, #14]
 800b7f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	4413      	add	r3, r2
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	3310      	adds	r3, #16
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	4413      	add	r3, r2
 800b80a:	3304      	adds	r3, #4
 800b80c:	e00b      	b.n	800b826 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b80e:	7bbb      	ldrb	r3, [r7, #14]
 800b810:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b814:	4613      	mov	r3, r2
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	4413      	add	r3, r2
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	4413      	add	r3, r2
 800b824:	3304      	adds	r3, #4
 800b826:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	2200      	movs	r2, #0
 800b82c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	2202      	movs	r2, #2
 800b832:	4619      	mov	r1, r3
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fc43 	bl	800c0c0 <USBD_CtlSendData>
              break;
 800b83a:	e06a      	b.n	800b912 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b83c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b840:	2b00      	cmp	r3, #0
 800b842:	da11      	bge.n	800b868 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b844:	7bbb      	ldrb	r3, [r7, #14]
 800b846:	f003 020f 	and.w	r2, r3, #15
 800b84a:	6879      	ldr	r1, [r7, #4]
 800b84c:	4613      	mov	r3, r2
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	4413      	add	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	440b      	add	r3, r1
 800b856:	3324      	adds	r3, #36	@ 0x24
 800b858:	881b      	ldrh	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d117      	bne.n	800b88e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b85e:	6839      	ldr	r1, [r7, #0]
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 fbb0 	bl	800bfc6 <USBD_CtlError>
                  break;
 800b866:	e054      	b.n	800b912 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b868:	7bbb      	ldrb	r3, [r7, #14]
 800b86a:	f003 020f 	and.w	r2, r3, #15
 800b86e:	6879      	ldr	r1, [r7, #4]
 800b870:	4613      	mov	r3, r2
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	4413      	add	r3, r2
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	440b      	add	r3, r1
 800b87a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b87e:	881b      	ldrh	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d104      	bne.n	800b88e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b884:	6839      	ldr	r1, [r7, #0]
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 fb9d 	bl	800bfc6 <USBD_CtlError>
                  break;
 800b88c:	e041      	b.n	800b912 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b88e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b892:	2b00      	cmp	r3, #0
 800b894:	da0b      	bge.n	800b8ae <USBD_StdEPReq+0x2b2>
 800b896:	7bbb      	ldrb	r3, [r7, #14]
 800b898:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b89c:	4613      	mov	r3, r2
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4413      	add	r3, r2
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	3310      	adds	r3, #16
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	3304      	adds	r3, #4
 800b8ac:	e00b      	b.n	800b8c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b8ae:	7bbb      	ldrb	r3, [r7, #14]
 800b8b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4413      	add	r3, r2
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	3304      	adds	r3, #4
 800b8c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b8c8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d002      	beq.n	800b8d4 <USBD_StdEPReq+0x2d8>
 800b8ce:	7bbb      	ldrb	r3, [r7, #14]
 800b8d0:	2b80      	cmp	r3, #128	@ 0x80
 800b8d2:	d103      	bne.n	800b8dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	601a      	str	r2, [r3, #0]
 800b8da:	e00e      	b.n	800b8fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b8dc:	7bbb      	ldrb	r3, [r7, #14]
 800b8de:	4619      	mov	r1, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f001 f8e9 	bl	800cab8 <USBD_LL_IsStallEP>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d003      	beq.n	800b8f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	601a      	str	r2, [r3, #0]
 800b8f2:	e002      	b.n	800b8fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	2202      	movs	r2, #2
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 fbdd 	bl	800c0c0 <USBD_CtlSendData>
              break;
 800b906:	e004      	b.n	800b912 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b908:	6839      	ldr	r1, [r7, #0]
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 fb5b 	bl	800bfc6 <USBD_CtlError>
              break;
 800b910:	bf00      	nop
          }
          break;
 800b912:	e004      	b.n	800b91e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fb55 	bl	800bfc6 <USBD_CtlError>
          break;
 800b91c:	bf00      	nop
      }
      break;
 800b91e:	e005      	b.n	800b92c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b920:	6839      	ldr	r1, [r7, #0]
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 fb4f 	bl	800bfc6 <USBD_CtlError>
      break;
 800b928:	e000      	b.n	800b92c <USBD_StdEPReq+0x330>
      break;
 800b92a:	bf00      	nop
  }

  return ret;
 800b92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
	...

0800b938 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b942:	2300      	movs	r3, #0
 800b944:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b946:	2300      	movs	r3, #0
 800b948:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b94a:	2300      	movs	r3, #0
 800b94c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	885b      	ldrh	r3, [r3, #2]
 800b952:	0a1b      	lsrs	r3, r3, #8
 800b954:	b29b      	uxth	r3, r3
 800b956:	3b01      	subs	r3, #1
 800b958:	2b06      	cmp	r3, #6
 800b95a:	f200 8128 	bhi.w	800bbae <USBD_GetDescriptor+0x276>
 800b95e:	a201      	add	r2, pc, #4	@ (adr r2, 800b964 <USBD_GetDescriptor+0x2c>)
 800b960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b964:	0800b981 	.word	0x0800b981
 800b968:	0800b999 	.word	0x0800b999
 800b96c:	0800b9d9 	.word	0x0800b9d9
 800b970:	0800bbaf 	.word	0x0800bbaf
 800b974:	0800bbaf 	.word	0x0800bbaf
 800b978:	0800bb4f 	.word	0x0800bb4f
 800b97c:	0800bb7b 	.word	0x0800bb7b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	7c12      	ldrb	r2, [r2, #16]
 800b98c:	f107 0108 	add.w	r1, r7, #8
 800b990:	4610      	mov	r0, r2
 800b992:	4798      	blx	r3
 800b994:	60f8      	str	r0, [r7, #12]
      break;
 800b996:	e112      	b.n	800bbbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	7c1b      	ldrb	r3, [r3, #16]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d10d      	bne.n	800b9bc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9a8:	f107 0208 	add.w	r2, r7, #8
 800b9ac:	4610      	mov	r0, r2
 800b9ae:	4798      	blx	r3
 800b9b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	2202      	movs	r2, #2
 800b9b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b9ba:	e100      	b.n	800bbbe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c4:	f107 0208 	add.w	r2, r7, #8
 800b9c8:	4610      	mov	r0, r2
 800b9ca:	4798      	blx	r3
 800b9cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	2202      	movs	r2, #2
 800b9d4:	701a      	strb	r2, [r3, #0]
      break;
 800b9d6:	e0f2      	b.n	800bbbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	885b      	ldrh	r3, [r3, #2]
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	2b05      	cmp	r3, #5
 800b9e0:	f200 80ac 	bhi.w	800bb3c <USBD_GetDescriptor+0x204>
 800b9e4:	a201      	add	r2, pc, #4	@ (adr r2, 800b9ec <USBD_GetDescriptor+0xb4>)
 800b9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ea:	bf00      	nop
 800b9ec:	0800ba05 	.word	0x0800ba05
 800b9f0:	0800ba39 	.word	0x0800ba39
 800b9f4:	0800ba6d 	.word	0x0800ba6d
 800b9f8:	0800baa1 	.word	0x0800baa1
 800b9fc:	0800bad5 	.word	0x0800bad5
 800ba00:	0800bb09 	.word	0x0800bb09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00b      	beq.n	800ba28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	7c12      	ldrb	r2, [r2, #16]
 800ba1c:	f107 0108 	add.w	r1, r7, #8
 800ba20:	4610      	mov	r0, r2
 800ba22:	4798      	blx	r3
 800ba24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba26:	e091      	b.n	800bb4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba28:	6839      	ldr	r1, [r7, #0]
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 facb 	bl	800bfc6 <USBD_CtlError>
            err++;
 800ba30:	7afb      	ldrb	r3, [r7, #11]
 800ba32:	3301      	adds	r3, #1
 800ba34:	72fb      	strb	r3, [r7, #11]
          break;
 800ba36:	e089      	b.n	800bb4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d00b      	beq.n	800ba5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	7c12      	ldrb	r2, [r2, #16]
 800ba50:	f107 0108 	add.w	r1, r7, #8
 800ba54:	4610      	mov	r0, r2
 800ba56:	4798      	blx	r3
 800ba58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba5a:	e077      	b.n	800bb4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba5c:	6839      	ldr	r1, [r7, #0]
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 fab1 	bl	800bfc6 <USBD_CtlError>
            err++;
 800ba64:	7afb      	ldrb	r3, [r7, #11]
 800ba66:	3301      	adds	r3, #1
 800ba68:	72fb      	strb	r3, [r7, #11]
          break;
 800ba6a:	e06f      	b.n	800bb4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00b      	beq.n	800ba90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	7c12      	ldrb	r2, [r2, #16]
 800ba84:	f107 0108 	add.w	r1, r7, #8
 800ba88:	4610      	mov	r0, r2
 800ba8a:	4798      	blx	r3
 800ba8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba8e:	e05d      	b.n	800bb4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba90:	6839      	ldr	r1, [r7, #0]
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 fa97 	bl	800bfc6 <USBD_CtlError>
            err++;
 800ba98:	7afb      	ldrb	r3, [r7, #11]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	72fb      	strb	r3, [r7, #11]
          break;
 800ba9e:	e055      	b.n	800bb4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baa6:	691b      	ldr	r3, [r3, #16]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d00b      	beq.n	800bac4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bab2:	691b      	ldr	r3, [r3, #16]
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	7c12      	ldrb	r2, [r2, #16]
 800bab8:	f107 0108 	add.w	r1, r7, #8
 800babc:	4610      	mov	r0, r2
 800babe:	4798      	blx	r3
 800bac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bac2:	e043      	b.n	800bb4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bac4:	6839      	ldr	r1, [r7, #0]
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 fa7d 	bl	800bfc6 <USBD_CtlError>
            err++;
 800bacc:	7afb      	ldrb	r3, [r7, #11]
 800bace:	3301      	adds	r3, #1
 800bad0:	72fb      	strb	r3, [r7, #11]
          break;
 800bad2:	e03b      	b.n	800bb4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00b      	beq.n	800baf8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bae6:	695b      	ldr	r3, [r3, #20]
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	7c12      	ldrb	r2, [r2, #16]
 800baec:	f107 0108 	add.w	r1, r7, #8
 800baf0:	4610      	mov	r0, r2
 800baf2:	4798      	blx	r3
 800baf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800baf6:	e029      	b.n	800bb4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800baf8:	6839      	ldr	r1, [r7, #0]
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 fa63 	bl	800bfc6 <USBD_CtlError>
            err++;
 800bb00:	7afb      	ldrb	r3, [r7, #11]
 800bb02:	3301      	adds	r3, #1
 800bb04:	72fb      	strb	r3, [r7, #11]
          break;
 800bb06:	e021      	b.n	800bb4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb0e:	699b      	ldr	r3, [r3, #24]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d00b      	beq.n	800bb2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb1a:	699b      	ldr	r3, [r3, #24]
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	7c12      	ldrb	r2, [r2, #16]
 800bb20:	f107 0108 	add.w	r1, r7, #8
 800bb24:	4610      	mov	r0, r2
 800bb26:	4798      	blx	r3
 800bb28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb2a:	e00f      	b.n	800bb4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 fa49 	bl	800bfc6 <USBD_CtlError>
            err++;
 800bb34:	7afb      	ldrb	r3, [r7, #11]
 800bb36:	3301      	adds	r3, #1
 800bb38:	72fb      	strb	r3, [r7, #11]
          break;
 800bb3a:	e007      	b.n	800bb4c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bb3c:	6839      	ldr	r1, [r7, #0]
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 fa41 	bl	800bfc6 <USBD_CtlError>
          err++;
 800bb44:	7afb      	ldrb	r3, [r7, #11]
 800bb46:	3301      	adds	r3, #1
 800bb48:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bb4a:	bf00      	nop
      }
      break;
 800bb4c:	e037      	b.n	800bbbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	7c1b      	ldrb	r3, [r3, #16]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d109      	bne.n	800bb6a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb5e:	f107 0208 	add.w	r2, r7, #8
 800bb62:	4610      	mov	r0, r2
 800bb64:	4798      	blx	r3
 800bb66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb68:	e029      	b.n	800bbbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bb6a:	6839      	ldr	r1, [r7, #0]
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fa2a 	bl	800bfc6 <USBD_CtlError>
        err++;
 800bb72:	7afb      	ldrb	r3, [r7, #11]
 800bb74:	3301      	adds	r3, #1
 800bb76:	72fb      	strb	r3, [r7, #11]
      break;
 800bb78:	e021      	b.n	800bbbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	7c1b      	ldrb	r3, [r3, #16]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10d      	bne.n	800bb9e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb8a:	f107 0208 	add.w	r2, r7, #8
 800bb8e:	4610      	mov	r0, r2
 800bb90:	4798      	blx	r3
 800bb92:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	3301      	adds	r3, #1
 800bb98:	2207      	movs	r2, #7
 800bb9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb9c:	e00f      	b.n	800bbbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 fa10 	bl	800bfc6 <USBD_CtlError>
        err++;
 800bba6:	7afb      	ldrb	r3, [r7, #11]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	72fb      	strb	r3, [r7, #11]
      break;
 800bbac:	e007      	b.n	800bbbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bbae:	6839      	ldr	r1, [r7, #0]
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 fa08 	bl	800bfc6 <USBD_CtlError>
      err++;
 800bbb6:	7afb      	ldrb	r3, [r7, #11]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	72fb      	strb	r3, [r7, #11]
      break;
 800bbbc:	bf00      	nop
  }

  if (err != 0U)
 800bbbe:	7afb      	ldrb	r3, [r7, #11]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d11e      	bne.n	800bc02 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	88db      	ldrh	r3, [r3, #6]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d016      	beq.n	800bbfa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bbcc:	893b      	ldrh	r3, [r7, #8]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00e      	beq.n	800bbf0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	88da      	ldrh	r2, [r3, #6]
 800bbd6:	893b      	ldrh	r3, [r7, #8]
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	bf28      	it	cs
 800bbdc:	4613      	movcs	r3, r2
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bbe2:	893b      	ldrh	r3, [r7, #8]
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	68f9      	ldr	r1, [r7, #12]
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 fa69 	bl	800c0c0 <USBD_CtlSendData>
 800bbee:	e009      	b.n	800bc04 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bbf0:	6839      	ldr	r1, [r7, #0]
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 f9e7 	bl	800bfc6 <USBD_CtlError>
 800bbf8:	e004      	b.n	800bc04 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 faba 	bl	800c174 <USBD_CtlSendStatus>
 800bc00:	e000      	b.n	800bc04 <USBD_GetDescriptor+0x2cc>
    return;
 800bc02:	bf00      	nop
  }
}
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop

0800bc0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	889b      	ldrh	r3, [r3, #4]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d131      	bne.n	800bc82 <USBD_SetAddress+0x76>
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	88db      	ldrh	r3, [r3, #6]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d12d      	bne.n	800bc82 <USBD_SetAddress+0x76>
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	885b      	ldrh	r3, [r3, #2]
 800bc2a:	2b7f      	cmp	r3, #127	@ 0x7f
 800bc2c:	d829      	bhi.n	800bc82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	885b      	ldrh	r3, [r3, #2]
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	d104      	bne.n	800bc50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bc46:	6839      	ldr	r1, [r7, #0]
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 f9bc 	bl	800bfc6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc4e:	e01d      	b.n	800bc8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	7bfa      	ldrb	r2, [r7, #15]
 800bc54:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 ff57 	bl	800cb10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 fa86 	bl	800c174 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bc68:	7bfb      	ldrb	r3, [r7, #15]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d004      	beq.n	800bc78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2202      	movs	r2, #2
 800bc72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc76:	e009      	b.n	800bc8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc80:	e004      	b.n	800bc8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bc82:	6839      	ldr	r1, [r7, #0]
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f000 f99e 	bl	800bfc6 <USBD_CtlError>
  }
}
 800bc8a:	bf00      	nop
 800bc8c:	bf00      	nop
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	885b      	ldrh	r3, [r3, #2]
 800bca6:	b2da      	uxtb	r2, r3
 800bca8:	4b4e      	ldr	r3, [pc, #312]	@ (800bde4 <USBD_SetConfig+0x150>)
 800bcaa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bcac:	4b4d      	ldr	r3, [pc, #308]	@ (800bde4 <USBD_SetConfig+0x150>)
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d905      	bls.n	800bcc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bcb4:	6839      	ldr	r1, [r7, #0]
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 f985 	bl	800bfc6 <USBD_CtlError>
    return USBD_FAIL;
 800bcbc:	2303      	movs	r3, #3
 800bcbe:	e08c      	b.n	800bdda <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	d002      	beq.n	800bcd2 <USBD_SetConfig+0x3e>
 800bccc:	2b03      	cmp	r3, #3
 800bcce:	d029      	beq.n	800bd24 <USBD_SetConfig+0x90>
 800bcd0:	e075      	b.n	800bdbe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bcd2:	4b44      	ldr	r3, [pc, #272]	@ (800bde4 <USBD_SetConfig+0x150>)
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d020      	beq.n	800bd1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bcda:	4b42      	ldr	r3, [pc, #264]	@ (800bde4 <USBD_SetConfig+0x150>)
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	461a      	mov	r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bce4:	4b3f      	ldr	r3, [pc, #252]	@ (800bde4 <USBD_SetConfig+0x150>)
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	4619      	mov	r1, r3
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7fe ffe3 	bl	800acb6 <USBD_SetClassConfig>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bcf4:	7bfb      	ldrb	r3, [r7, #15]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d008      	beq.n	800bd0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bcfa:	6839      	ldr	r1, [r7, #0]
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 f962 	bl	800bfc6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2202      	movs	r2, #2
 800bd06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bd0a:	e065      	b.n	800bdd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 fa31 	bl	800c174 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2203      	movs	r2, #3
 800bd16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bd1a:	e05d      	b.n	800bdd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 fa29 	bl	800c174 <USBD_CtlSendStatus>
      break;
 800bd22:	e059      	b.n	800bdd8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bd24:	4b2f      	ldr	r3, [pc, #188]	@ (800bde4 <USBD_SetConfig+0x150>)
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d112      	bne.n	800bd52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2202      	movs	r2, #2
 800bd30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bd34:	4b2b      	ldr	r3, [pc, #172]	@ (800bde4 <USBD_SetConfig+0x150>)
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	461a      	mov	r2, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bd3e:	4b29      	ldr	r3, [pc, #164]	@ (800bde4 <USBD_SetConfig+0x150>)
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	4619      	mov	r1, r3
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f7fe ffd2 	bl	800acee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 fa12 	bl	800c174 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bd50:	e042      	b.n	800bdd8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bd52:	4b24      	ldr	r3, [pc, #144]	@ (800bde4 <USBD_SetConfig+0x150>)
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	461a      	mov	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d02a      	beq.n	800bdb6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	4619      	mov	r1, r3
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7fe ffc0 	bl	800acee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bd6e:	4b1d      	ldr	r3, [pc, #116]	@ (800bde4 <USBD_SetConfig+0x150>)
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	461a      	mov	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bd78:	4b1a      	ldr	r3, [pc, #104]	@ (800bde4 <USBD_SetConfig+0x150>)
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f7fe ff99 	bl	800acb6 <USBD_SetClassConfig>
 800bd84:	4603      	mov	r3, r0
 800bd86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bd88:	7bfb      	ldrb	r3, [r7, #15]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00f      	beq.n	800bdae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bd8e:	6839      	ldr	r1, [r7, #0]
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 f918 	bl	800bfc6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f7fe ffa5 	bl	800acee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2202      	movs	r2, #2
 800bda8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bdac:	e014      	b.n	800bdd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 f9e0 	bl	800c174 <USBD_CtlSendStatus>
      break;
 800bdb4:	e010      	b.n	800bdd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 f9dc 	bl	800c174 <USBD_CtlSendStatus>
      break;
 800bdbc:	e00c      	b.n	800bdd8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bdbe:	6839      	ldr	r1, [r7, #0]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 f900 	bl	800bfc6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bdc6:	4b07      	ldr	r3, [pc, #28]	@ (800bde4 <USBD_SetConfig+0x150>)
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	4619      	mov	r1, r3
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f7fe ff8e 	bl	800acee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bdd2:	2303      	movs	r3, #3
 800bdd4:	73fb      	strb	r3, [r7, #15]
      break;
 800bdd6:	bf00      	nop
  }

  return ret;
 800bdd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3710      	adds	r7, #16
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	20000514 	.word	0x20000514

0800bde8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	88db      	ldrh	r3, [r3, #6]
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d004      	beq.n	800be04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bdfa:	6839      	ldr	r1, [r7, #0]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 f8e2 	bl	800bfc6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800be02:	e023      	b.n	800be4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	2b02      	cmp	r3, #2
 800be0e:	dc02      	bgt.n	800be16 <USBD_GetConfig+0x2e>
 800be10:	2b00      	cmp	r3, #0
 800be12:	dc03      	bgt.n	800be1c <USBD_GetConfig+0x34>
 800be14:	e015      	b.n	800be42 <USBD_GetConfig+0x5a>
 800be16:	2b03      	cmp	r3, #3
 800be18:	d00b      	beq.n	800be32 <USBD_GetConfig+0x4a>
 800be1a:	e012      	b.n	800be42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	3308      	adds	r3, #8
 800be26:	2201      	movs	r2, #1
 800be28:	4619      	mov	r1, r3
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f948 	bl	800c0c0 <USBD_CtlSendData>
        break;
 800be30:	e00c      	b.n	800be4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	3304      	adds	r3, #4
 800be36:	2201      	movs	r2, #1
 800be38:	4619      	mov	r1, r3
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f940 	bl	800c0c0 <USBD_CtlSendData>
        break;
 800be40:	e004      	b.n	800be4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800be42:	6839      	ldr	r1, [r7, #0]
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 f8be 	bl	800bfc6 <USBD_CtlError>
        break;
 800be4a:	bf00      	nop
}
 800be4c:	bf00      	nop
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be64:	b2db      	uxtb	r3, r3
 800be66:	3b01      	subs	r3, #1
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d81e      	bhi.n	800beaa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	88db      	ldrh	r3, [r3, #6]
 800be70:	2b02      	cmp	r3, #2
 800be72:	d004      	beq.n	800be7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800be74:	6839      	ldr	r1, [r7, #0]
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 f8a5 	bl	800bfc6 <USBD_CtlError>
        break;
 800be7c:	e01a      	b.n	800beb4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2201      	movs	r2, #1
 800be82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d005      	beq.n	800be9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	f043 0202 	orr.w	r2, r3, #2
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	330c      	adds	r3, #12
 800be9e:	2202      	movs	r2, #2
 800bea0:	4619      	mov	r1, r3
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f90c 	bl	800c0c0 <USBD_CtlSendData>
      break;
 800bea8:	e004      	b.n	800beb4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800beaa:	6839      	ldr	r1, [r7, #0]
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 f88a 	bl	800bfc6 <USBD_CtlError>
      break;
 800beb2:	bf00      	nop
  }
}
 800beb4:	bf00      	nop
 800beb6:	3708      	adds	r7, #8
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	885b      	ldrh	r3, [r3, #2]
 800beca:	2b01      	cmp	r3, #1
 800becc:	d107      	bne.n	800bede <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2201      	movs	r2, #1
 800bed2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 f94c 	bl	800c174 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bedc:	e013      	b.n	800bf06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	885b      	ldrh	r3, [r3, #2]
 800bee2:	2b02      	cmp	r3, #2
 800bee4:	d10b      	bne.n	800befe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	889b      	ldrh	r3, [r3, #4]
 800beea:	0a1b      	lsrs	r3, r3, #8
 800beec:	b29b      	uxth	r3, r3
 800beee:	b2da      	uxtb	r2, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f93c 	bl	800c174 <USBD_CtlSendStatus>
}
 800befc:	e003      	b.n	800bf06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800befe:	6839      	ldr	r1, [r7, #0]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 f860 	bl	800bfc6 <USBD_CtlError>
}
 800bf06:	bf00      	nop
 800bf08:	3708      	adds	r7, #8
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b082      	sub	sp, #8
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
 800bf16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	3b01      	subs	r3, #1
 800bf22:	2b02      	cmp	r3, #2
 800bf24:	d80b      	bhi.n	800bf3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	885b      	ldrh	r3, [r3, #2]
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d10c      	bne.n	800bf48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 f91c 	bl	800c174 <USBD_CtlSendStatus>
      }
      break;
 800bf3c:	e004      	b.n	800bf48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bf3e:	6839      	ldr	r1, [r7, #0]
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 f840 	bl	800bfc6 <USBD_CtlError>
      break;
 800bf46:	e000      	b.n	800bf4a <USBD_ClrFeature+0x3c>
      break;
 800bf48:	bf00      	nop
  }
}
 800bf4a:	bf00      	nop
 800bf4c:	3708      	adds	r7, #8
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b084      	sub	sp, #16
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
 800bf5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	781a      	ldrb	r2, [r3, #0]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	781a      	ldrb	r2, [r3, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f7ff fa40 	bl	800b402 <SWAPBYTE>
 800bf82:	4603      	mov	r3, r0
 800bf84:	461a      	mov	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	3301      	adds	r3, #1
 800bf94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	f7ff fa33 	bl	800b402 <SWAPBYTE>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	3301      	adds	r3, #1
 800bfae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	f7ff fa26 	bl	800b402 <SWAPBYTE>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	461a      	mov	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	80da      	strh	r2, [r3, #6]
}
 800bfbe:	bf00      	nop
 800bfc0:	3710      	adds	r7, #16
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b082      	sub	sp, #8
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
 800bfce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfd0:	2180      	movs	r1, #128	@ 0x80
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 fd32 	bl	800ca3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bfd8:	2100      	movs	r1, #0
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 fd2e 	bl	800ca3c <USBD_LL_StallEP>
}
 800bfe0:	bf00      	nop
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b086      	sub	sp, #24
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bff4:	2300      	movs	r3, #0
 800bff6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d042      	beq.n	800c084 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c002:	6938      	ldr	r0, [r7, #16]
 800c004:	f000 f842 	bl	800c08c <USBD_GetLen>
 800c008:	4603      	mov	r3, r0
 800c00a:	3301      	adds	r3, #1
 800c00c:	005b      	lsls	r3, r3, #1
 800c00e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c012:	d808      	bhi.n	800c026 <USBD_GetString+0x3e>
 800c014:	6938      	ldr	r0, [r7, #16]
 800c016:	f000 f839 	bl	800c08c <USBD_GetLen>
 800c01a:	4603      	mov	r3, r0
 800c01c:	3301      	adds	r3, #1
 800c01e:	b29b      	uxth	r3, r3
 800c020:	005b      	lsls	r3, r3, #1
 800c022:	b29a      	uxth	r2, r3
 800c024:	e001      	b.n	800c02a <USBD_GetString+0x42>
 800c026:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
 800c030:	68ba      	ldr	r2, [r7, #8]
 800c032:	4413      	add	r3, r2
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	7812      	ldrb	r2, [r2, #0]
 800c038:	701a      	strb	r2, [r3, #0]
  idx++;
 800c03a:	7dfb      	ldrb	r3, [r7, #23]
 800c03c:	3301      	adds	r3, #1
 800c03e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c040:	7dfb      	ldrb	r3, [r7, #23]
 800c042:	68ba      	ldr	r2, [r7, #8]
 800c044:	4413      	add	r3, r2
 800c046:	2203      	movs	r2, #3
 800c048:	701a      	strb	r2, [r3, #0]
  idx++;
 800c04a:	7dfb      	ldrb	r3, [r7, #23]
 800c04c:	3301      	adds	r3, #1
 800c04e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c050:	e013      	b.n	800c07a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c052:	7dfb      	ldrb	r3, [r7, #23]
 800c054:	68ba      	ldr	r2, [r7, #8]
 800c056:	4413      	add	r3, r2
 800c058:	693a      	ldr	r2, [r7, #16]
 800c05a:	7812      	ldrb	r2, [r2, #0]
 800c05c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	3301      	adds	r3, #1
 800c062:	613b      	str	r3, [r7, #16]
    idx++;
 800c064:	7dfb      	ldrb	r3, [r7, #23]
 800c066:	3301      	adds	r3, #1
 800c068:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c06a:	7dfb      	ldrb	r3, [r7, #23]
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	4413      	add	r3, r2
 800c070:	2200      	movs	r2, #0
 800c072:	701a      	strb	r2, [r3, #0]
    idx++;
 800c074:	7dfb      	ldrb	r3, [r7, #23]
 800c076:	3301      	adds	r3, #1
 800c078:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1e7      	bne.n	800c052 <USBD_GetString+0x6a>
 800c082:	e000      	b.n	800c086 <USBD_GetString+0x9e>
    return;
 800c084:	bf00      	nop
  }
}
 800c086:	3718      	adds	r7, #24
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b085      	sub	sp, #20
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c094:	2300      	movs	r3, #0
 800c096:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c09c:	e005      	b.n	800c0aa <USBD_GetLen+0x1e>
  {
    len++;
 800c09e:	7bfb      	ldrb	r3, [r7, #15]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1f5      	bne.n	800c09e <USBD_GetLen+0x12>
  }

  return len;
 800c0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3714      	adds	r7, #20
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	68f8      	ldr	r0, [r7, #12]
 800c0e8:	f000 fd31 	bl	800cb4e <USBD_LL_Transmit>

  return USBD_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b084      	sub	sp, #16
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	60f8      	str	r0, [r7, #12]
 800c0fe:	60b9      	str	r1, [r7, #8]
 800c100:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	68ba      	ldr	r2, [r7, #8]
 800c106:	2100      	movs	r1, #0
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	f000 fd20 	bl	800cb4e <USBD_LL_Transmit>

  return USBD_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	3710      	adds	r7, #16
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2203      	movs	r2, #3
 800c128:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	68ba      	ldr	r2, [r7, #8]
 800c140:	2100      	movs	r1, #0
 800c142:	68f8      	ldr	r0, [r7, #12]
 800c144:	f000 fd24 	bl	800cb90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c148:	2300      	movs	r3, #0
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3710      	adds	r7, #16
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b084      	sub	sp, #16
 800c156:	af00      	add	r7, sp, #0
 800c158:	60f8      	str	r0, [r7, #12]
 800c15a:	60b9      	str	r1, [r7, #8]
 800c15c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	68ba      	ldr	r2, [r7, #8]
 800c162:	2100      	movs	r1, #0
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f000 fd13 	bl	800cb90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c16a:	2300      	movs	r3, #0
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2204      	movs	r2, #4
 800c180:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c184:	2300      	movs	r3, #0
 800c186:	2200      	movs	r2, #0
 800c188:	2100      	movs	r1, #0
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 fcdf 	bl	800cb4e <USBD_LL_Transmit>

  return USBD_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b082      	sub	sp, #8
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2205      	movs	r2, #5
 800c1a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 fced 	bl	800cb90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	4912      	ldr	r1, [pc, #72]	@ (800c210 <MX_USB_DEVICE_Init+0x50>)
 800c1c8:	4812      	ldr	r0, [pc, #72]	@ (800c214 <MX_USB_DEVICE_Init+0x54>)
 800c1ca:	f7fe fcf7 	bl	800abbc <USBD_Init>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d001      	beq.n	800c1d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c1d4:	f7f5 fa70 	bl	80016b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c1d8:	490f      	ldr	r1, [pc, #60]	@ (800c218 <MX_USB_DEVICE_Init+0x58>)
 800c1da:	480e      	ldr	r0, [pc, #56]	@ (800c214 <MX_USB_DEVICE_Init+0x54>)
 800c1dc:	f7fe fd1e 	bl	800ac1c <USBD_RegisterClass>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d001      	beq.n	800c1ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c1e6:	f7f5 fa67 	bl	80016b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c1ea:	490c      	ldr	r1, [pc, #48]	@ (800c21c <MX_USB_DEVICE_Init+0x5c>)
 800c1ec:	4809      	ldr	r0, [pc, #36]	@ (800c214 <MX_USB_DEVICE_Init+0x54>)
 800c1ee:	f7fe fc15 	bl	800aa1c <USBD_CDC_RegisterInterface>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d001      	beq.n	800c1fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c1f8:	f7f5 fa5e 	bl	80016b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c1fc:	4805      	ldr	r0, [pc, #20]	@ (800c214 <MX_USB_DEVICE_Init+0x54>)
 800c1fe:	f7fe fd43 	bl	800ac88 <USBD_Start>
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d001      	beq.n	800c20c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c208:	f7f5 fa56 	bl	80016b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c20c:	bf00      	nop
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	200000b4 	.word	0x200000b4
 800c214:	20000518 	.word	0x20000518
 800c218:	20000018 	.word	0x20000018
 800c21c:	200000a0 	.word	0x200000a0

0800c220 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c224:	2200      	movs	r2, #0
 800c226:	4905      	ldr	r1, [pc, #20]	@ (800c23c <CDC_Init_FS+0x1c>)
 800c228:	4805      	ldr	r0, [pc, #20]	@ (800c240 <CDC_Init_FS+0x20>)
 800c22a:	f7fe fc11 	bl	800aa50 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c22e:	4905      	ldr	r1, [pc, #20]	@ (800c244 <CDC_Init_FS+0x24>)
 800c230:	4803      	ldr	r0, [pc, #12]	@ (800c240 <CDC_Init_FS+0x20>)
 800c232:	f7fe fc2f 	bl	800aa94 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c236:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c238:	4618      	mov	r0, r3
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	20000ff4 	.word	0x20000ff4
 800c240:	20000518 	.word	0x20000518
 800c244:	200007f4 	.word	0x200007f4

0800c248 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c248:	b480      	push	{r7}
 800c24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c24c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c24e:	4618      	mov	r0, r3
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	4603      	mov	r3, r0
 800c260:	6039      	str	r1, [r7, #0]
 800c262:	71fb      	strb	r3, [r7, #7]
 800c264:	4613      	mov	r3, r2
 800c266:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c268:	79fb      	ldrb	r3, [r7, #7]
 800c26a:	2b23      	cmp	r3, #35	@ 0x23
 800c26c:	f200 8098 	bhi.w	800c3a0 <CDC_Control_FS+0x148>
 800c270:	a201      	add	r2, pc, #4	@ (adr r2, 800c278 <CDC_Control_FS+0x20>)
 800c272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c276:	bf00      	nop
 800c278:	0800c3a1 	.word	0x0800c3a1
 800c27c:	0800c3a1 	.word	0x0800c3a1
 800c280:	0800c3a1 	.word	0x0800c3a1
 800c284:	0800c3a1 	.word	0x0800c3a1
 800c288:	0800c3a1 	.word	0x0800c3a1
 800c28c:	0800c3a1 	.word	0x0800c3a1
 800c290:	0800c3a1 	.word	0x0800c3a1
 800c294:	0800c3a1 	.word	0x0800c3a1
 800c298:	0800c3a1 	.word	0x0800c3a1
 800c29c:	0800c3a1 	.word	0x0800c3a1
 800c2a0:	0800c3a1 	.word	0x0800c3a1
 800c2a4:	0800c3a1 	.word	0x0800c3a1
 800c2a8:	0800c3a1 	.word	0x0800c3a1
 800c2ac:	0800c3a1 	.word	0x0800c3a1
 800c2b0:	0800c3a1 	.word	0x0800c3a1
 800c2b4:	0800c3a1 	.word	0x0800c3a1
 800c2b8:	0800c3a1 	.word	0x0800c3a1
 800c2bc:	0800c3a1 	.word	0x0800c3a1
 800c2c0:	0800c3a1 	.word	0x0800c3a1
 800c2c4:	0800c3a1 	.word	0x0800c3a1
 800c2c8:	0800c3a1 	.word	0x0800c3a1
 800c2cc:	0800c3a1 	.word	0x0800c3a1
 800c2d0:	0800c3a1 	.word	0x0800c3a1
 800c2d4:	0800c3a1 	.word	0x0800c3a1
 800c2d8:	0800c3a1 	.word	0x0800c3a1
 800c2dc:	0800c3a1 	.word	0x0800c3a1
 800c2e0:	0800c3a1 	.word	0x0800c3a1
 800c2e4:	0800c3a1 	.word	0x0800c3a1
 800c2e8:	0800c3a1 	.word	0x0800c3a1
 800c2ec:	0800c3a1 	.word	0x0800c3a1
 800c2f0:	0800c3a1 	.word	0x0800c3a1
 800c2f4:	0800c3a1 	.word	0x0800c3a1
 800c2f8:	0800c309 	.word	0x0800c309
 800c2fc:	0800c34d 	.word	0x0800c34d
 800c300:	0800c3a1 	.word	0x0800c3a1
 800c304:	0800c3a1 	.word	0x0800c3a1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	461a      	mov	r2, r3
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	3301      	adds	r3, #1
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	021b      	lsls	r3, r3, #8
 800c316:	431a      	orrs	r2, r3
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	3302      	adds	r3, #2
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	041b      	lsls	r3, r3, #16
 800c320:	431a      	orrs	r2, r3
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	3303      	adds	r3, #3
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	061b      	lsls	r3, r3, #24
 800c32a:	4313      	orrs	r3, r2
 800c32c:	461a      	mov	r2, r3
 800c32e:	4b20      	ldr	r3, [pc, #128]	@ (800c3b0 <CDC_Control_FS+0x158>)
 800c330:	601a      	str	r2, [r3, #0]
      LineCoding.format = pbuf[4];
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	791a      	ldrb	r2, [r3, #4]
 800c336:	4b1e      	ldr	r3, [pc, #120]	@ (800c3b0 <CDC_Control_FS+0x158>)
 800c338:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	795a      	ldrb	r2, [r3, #5]
 800c33e:	4b1c      	ldr	r3, [pc, #112]	@ (800c3b0 <CDC_Control_FS+0x158>)
 800c340:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype = pbuf[6];
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	799a      	ldrb	r2, [r3, #6]
 800c346:	4b1a      	ldr	r3, [pc, #104]	@ (800c3b0 <CDC_Control_FS+0x158>)
 800c348:	719a      	strb	r2, [r3, #6]
      break;
 800c34a:	e02a      	b.n	800c3a2 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t) (LineCoding.bitrate);
 800c34c:	4b18      	ldr	r3, [pc, #96]	@ (800c3b0 <CDC_Control_FS+0x158>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	b2da      	uxtb	r2, r3
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 800c356:	4b16      	ldr	r3, [pc, #88]	@ (800c3b0 <CDC_Control_FS+0x158>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	0a1a      	lsrs	r2, r3, #8
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	3301      	adds	r3, #1
 800c360:	b2d2      	uxtb	r2, r2
 800c362:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 800c364:	4b12      	ldr	r3, [pc, #72]	@ (800c3b0 <CDC_Control_FS+0x158>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	0c1a      	lsrs	r2, r3, #16
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	3302      	adds	r3, #2
 800c36e:	b2d2      	uxtb	r2, r2
 800c370:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 800c372:	4b0f      	ldr	r3, [pc, #60]	@ (800c3b0 <CDC_Control_FS+0x158>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	0e1a      	lsrs	r2, r3, #24
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	3303      	adds	r3, #3
 800c37c:	b2d2      	uxtb	r2, r2
 800c37e:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	3304      	adds	r3, #4
 800c384:	4a0a      	ldr	r2, [pc, #40]	@ (800c3b0 <CDC_Control_FS+0x158>)
 800c386:	7912      	ldrb	r2, [r2, #4]
 800c388:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	3305      	adds	r3, #5
 800c38e:	4a08      	ldr	r2, [pc, #32]	@ (800c3b0 <CDC_Control_FS+0x158>)
 800c390:	7952      	ldrb	r2, [r2, #5]
 800c392:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	3306      	adds	r3, #6
 800c398:	4a05      	ldr	r2, [pc, #20]	@ (800c3b0 <CDC_Control_FS+0x158>)
 800c39a:	7992      	ldrb	r2, [r2, #6]
 800c39c:	701a      	strb	r2, [r3, #0]
      break;
 800c39e:	e000      	b.n	800c3a2 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c3a0:	bf00      	nop
  }

  return (USBD_OK);
 800c3a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	20000098 	.word	0x20000098

0800c3b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c3be:	6879      	ldr	r1, [r7, #4]
 800c3c0:	4805      	ldr	r0, [pc, #20]	@ (800c3d8 <CDC_Receive_FS+0x24>)
 800c3c2:	f7fe fb67 	bl	800aa94 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c3c6:	4804      	ldr	r0, [pc, #16]	@ (800c3d8 <CDC_Receive_FS+0x24>)
 800c3c8:	f7fe fbc2 	bl	800ab50 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c3cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3708      	adds	r7, #8
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	20000518 	.word	0x20000518

0800c3dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c3ec:	4b0d      	ldr	r3, [pc, #52]	@ (800c424 <CDC_Transmit_FS+0x48>)
 800c3ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c3f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d001      	beq.n	800c402 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e00b      	b.n	800c41a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c402:	887b      	ldrh	r3, [r7, #2]
 800c404:	461a      	mov	r2, r3
 800c406:	6879      	ldr	r1, [r7, #4]
 800c408:	4806      	ldr	r0, [pc, #24]	@ (800c424 <CDC_Transmit_FS+0x48>)
 800c40a:	f7fe fb21 	bl	800aa50 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c40e:	4805      	ldr	r0, [pc, #20]	@ (800c424 <CDC_Transmit_FS+0x48>)
 800c410:	f7fe fb5e 	bl	800aad0 <USBD_CDC_TransmitPacket>
 800c414:	4603      	mov	r3, r0
 800c416:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c418:	7bfb      	ldrb	r3, [r7, #15]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	20000518 	.word	0x20000518

0800c428 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c428:	b480      	push	{r7}
 800c42a:	b087      	sub	sp, #28
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	4613      	mov	r3, r2
 800c434:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c436:	2300      	movs	r3, #0
 800c438:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c43a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	371c      	adds	r7, #28
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
	...

0800c44c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	4603      	mov	r3, r0
 800c454:	6039      	str	r1, [r7, #0]
 800c456:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	2212      	movs	r2, #18
 800c45c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c45e:	4b03      	ldr	r3, [pc, #12]	@ (800c46c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c460:	4618      	mov	r0, r3
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr
 800c46c:	200000d0 	.word	0x200000d0

0800c470 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c470:	b480      	push	{r7}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
 800c476:	4603      	mov	r3, r0
 800c478:	6039      	str	r1, [r7, #0]
 800c47a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	2204      	movs	r2, #4
 800c480:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c482:	4b03      	ldr	r3, [pc, #12]	@ (800c490 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c484:	4618      	mov	r0, r3
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr
 800c490:	200000e4 	.word	0x200000e4

0800c494 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	4603      	mov	r3, r0
 800c49c:	6039      	str	r1, [r7, #0]
 800c49e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4a0:	79fb      	ldrb	r3, [r7, #7]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d105      	bne.n	800c4b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4a6:	683a      	ldr	r2, [r7, #0]
 800c4a8:	4907      	ldr	r1, [pc, #28]	@ (800c4c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c4aa:	4808      	ldr	r0, [pc, #32]	@ (800c4cc <USBD_FS_ProductStrDescriptor+0x38>)
 800c4ac:	f7ff fd9c 	bl	800bfe8 <USBD_GetString>
 800c4b0:	e004      	b.n	800c4bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4b2:	683a      	ldr	r2, [r7, #0]
 800c4b4:	4904      	ldr	r1, [pc, #16]	@ (800c4c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c4b6:	4805      	ldr	r0, [pc, #20]	@ (800c4cc <USBD_FS_ProductStrDescriptor+0x38>)
 800c4b8:	f7ff fd96 	bl	800bfe8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4bc:	4b02      	ldr	r3, [pc, #8]	@ (800c4c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3708      	adds	r7, #8
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	200017f4 	.word	0x200017f4
 800c4cc:	0800fe04 	.word	0x0800fe04

0800c4d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	6039      	str	r1, [r7, #0]
 800c4da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c4dc:	683a      	ldr	r2, [r7, #0]
 800c4de:	4904      	ldr	r1, [pc, #16]	@ (800c4f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c4e0:	4804      	ldr	r0, [pc, #16]	@ (800c4f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c4e2:	f7ff fd81 	bl	800bfe8 <USBD_GetString>
  return USBD_StrDesc;
 800c4e6:	4b02      	ldr	r3, [pc, #8]	@ (800c4f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	200017f4 	.word	0x200017f4
 800c4f4:	0800fe1c 	.word	0x0800fe1c

0800c4f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	4603      	mov	r3, r0
 800c500:	6039      	str	r1, [r7, #0]
 800c502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	221a      	movs	r2, #26
 800c508:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c50a:	f000 f843 	bl	800c594 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c50e:	4b02      	ldr	r3, [pc, #8]	@ (800c518 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c510:	4618      	mov	r0, r3
 800c512:	3708      	adds	r7, #8
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	200000e8 	.word	0x200000e8

0800c51c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	4603      	mov	r3, r0
 800c524:	6039      	str	r1, [r7, #0]
 800c526:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c528:	79fb      	ldrb	r3, [r7, #7]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d105      	bne.n	800c53a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c52e:	683a      	ldr	r2, [r7, #0]
 800c530:	4907      	ldr	r1, [pc, #28]	@ (800c550 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c532:	4808      	ldr	r0, [pc, #32]	@ (800c554 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c534:	f7ff fd58 	bl	800bfe8 <USBD_GetString>
 800c538:	e004      	b.n	800c544 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c53a:	683a      	ldr	r2, [r7, #0]
 800c53c:	4904      	ldr	r1, [pc, #16]	@ (800c550 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c53e:	4805      	ldr	r0, [pc, #20]	@ (800c554 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c540:	f7ff fd52 	bl	800bfe8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c544:	4b02      	ldr	r3, [pc, #8]	@ (800c550 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c546:	4618      	mov	r0, r3
 800c548:	3708      	adds	r7, #8
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	200017f4 	.word	0x200017f4
 800c554:	0800fe30 	.word	0x0800fe30

0800c558 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	4603      	mov	r3, r0
 800c560:	6039      	str	r1, [r7, #0]
 800c562:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c564:	79fb      	ldrb	r3, [r7, #7]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d105      	bne.n	800c576 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c56a:	683a      	ldr	r2, [r7, #0]
 800c56c:	4907      	ldr	r1, [pc, #28]	@ (800c58c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c56e:	4808      	ldr	r0, [pc, #32]	@ (800c590 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c570:	f7ff fd3a 	bl	800bfe8 <USBD_GetString>
 800c574:	e004      	b.n	800c580 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c576:	683a      	ldr	r2, [r7, #0]
 800c578:	4904      	ldr	r1, [pc, #16]	@ (800c58c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c57a:	4805      	ldr	r0, [pc, #20]	@ (800c590 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c57c:	f7ff fd34 	bl	800bfe8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c580:	4b02      	ldr	r3, [pc, #8]	@ (800c58c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c582:	4618      	mov	r0, r3
 800c584:	3708      	adds	r7, #8
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	200017f4 	.word	0x200017f4
 800c590:	0800fe3c 	.word	0x0800fe3c

0800c594 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c59a:	4b0f      	ldr	r3, [pc, #60]	@ (800c5d8 <Get_SerialNum+0x44>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c5a0:	4b0e      	ldr	r3, [pc, #56]	@ (800c5dc <Get_SerialNum+0x48>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c5a6:	4b0e      	ldr	r3, [pc, #56]	@ (800c5e0 <Get_SerialNum+0x4c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d009      	beq.n	800c5ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c5ba:	2208      	movs	r2, #8
 800c5bc:	4909      	ldr	r1, [pc, #36]	@ (800c5e4 <Get_SerialNum+0x50>)
 800c5be:	68f8      	ldr	r0, [r7, #12]
 800c5c0:	f000 f814 	bl	800c5ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c5c4:	2204      	movs	r2, #4
 800c5c6:	4908      	ldr	r1, [pc, #32]	@ (800c5e8 <Get_SerialNum+0x54>)
 800c5c8:	68b8      	ldr	r0, [r7, #8]
 800c5ca:	f000 f80f 	bl	800c5ec <IntToUnicode>
  }
}
 800c5ce:	bf00      	nop
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	1fff7a10 	.word	0x1fff7a10
 800c5dc:	1fff7a14 	.word	0x1fff7a14
 800c5e0:	1fff7a18 	.word	0x1fff7a18
 800c5e4:	200000ea 	.word	0x200000ea
 800c5e8:	200000fa 	.word	0x200000fa

0800c5ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b087      	sub	sp, #28
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c5fe:	2300      	movs	r3, #0
 800c600:	75fb      	strb	r3, [r7, #23]
 800c602:	e027      	b.n	800c654 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	0f1b      	lsrs	r3, r3, #28
 800c608:	2b09      	cmp	r3, #9
 800c60a:	d80b      	bhi.n	800c624 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	0f1b      	lsrs	r3, r3, #28
 800c610:	b2da      	uxtb	r2, r3
 800c612:	7dfb      	ldrb	r3, [r7, #23]
 800c614:	005b      	lsls	r3, r3, #1
 800c616:	4619      	mov	r1, r3
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	440b      	add	r3, r1
 800c61c:	3230      	adds	r2, #48	@ 0x30
 800c61e:	b2d2      	uxtb	r2, r2
 800c620:	701a      	strb	r2, [r3, #0]
 800c622:	e00a      	b.n	800c63a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	0f1b      	lsrs	r3, r3, #28
 800c628:	b2da      	uxtb	r2, r3
 800c62a:	7dfb      	ldrb	r3, [r7, #23]
 800c62c:	005b      	lsls	r3, r3, #1
 800c62e:	4619      	mov	r1, r3
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	440b      	add	r3, r1
 800c634:	3237      	adds	r2, #55	@ 0x37
 800c636:	b2d2      	uxtb	r2, r2
 800c638:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	011b      	lsls	r3, r3, #4
 800c63e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c640:	7dfb      	ldrb	r3, [r7, #23]
 800c642:	005b      	lsls	r3, r3, #1
 800c644:	3301      	adds	r3, #1
 800c646:	68ba      	ldr	r2, [r7, #8]
 800c648:	4413      	add	r3, r2
 800c64a:	2200      	movs	r2, #0
 800c64c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c64e:	7dfb      	ldrb	r3, [r7, #23]
 800c650:	3301      	adds	r3, #1
 800c652:	75fb      	strb	r3, [r7, #23]
 800c654:	7dfa      	ldrb	r2, [r7, #23]
 800c656:	79fb      	ldrb	r3, [r7, #7]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d3d3      	bcc.n	800c604 <IntToUnicode+0x18>
  }
}
 800c65c:	bf00      	nop
 800c65e:	bf00      	nop
 800c660:	371c      	adds	r7, #28
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
	...

0800c66c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b08a      	sub	sp, #40	@ 0x28
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c674:	f107 0314 	add.w	r3, r7, #20
 800c678:	2200      	movs	r2, #0
 800c67a:	601a      	str	r2, [r3, #0]
 800c67c:	605a      	str	r2, [r3, #4]
 800c67e:	609a      	str	r2, [r3, #8]
 800c680:	60da      	str	r2, [r3, #12]
 800c682:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c68c:	d13a      	bne.n	800c704 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c68e:	2300      	movs	r3, #0
 800c690:	613b      	str	r3, [r7, #16]
 800c692:	4b1e      	ldr	r3, [pc, #120]	@ (800c70c <HAL_PCD_MspInit+0xa0>)
 800c694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c696:	4a1d      	ldr	r2, [pc, #116]	@ (800c70c <HAL_PCD_MspInit+0xa0>)
 800c698:	f043 0301 	orr.w	r3, r3, #1
 800c69c:	6313      	str	r3, [r2, #48]	@ 0x30
 800c69e:	4b1b      	ldr	r3, [pc, #108]	@ (800c70c <HAL_PCD_MspInit+0xa0>)
 800c6a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6a2:	f003 0301 	and.w	r3, r3, #1
 800c6a6:	613b      	str	r3, [r7, #16]
 800c6a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c6aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c6ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6b0:	2302      	movs	r3, #2
 800c6b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6b8:	2303      	movs	r3, #3
 800c6ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c6bc:	230a      	movs	r3, #10
 800c6be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c6c0:	f107 0314 	add.w	r3, r7, #20
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	4812      	ldr	r0, [pc, #72]	@ (800c710 <HAL_PCD_MspInit+0xa4>)
 800c6c8:	f7f7 fa9e 	bl	8003c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c6cc:	4b0f      	ldr	r3, [pc, #60]	@ (800c70c <HAL_PCD_MspInit+0xa0>)
 800c6ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6d0:	4a0e      	ldr	r2, [pc, #56]	@ (800c70c <HAL_PCD_MspInit+0xa0>)
 800c6d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6d6:	6353      	str	r3, [r2, #52]	@ 0x34
 800c6d8:	2300      	movs	r3, #0
 800c6da:	60fb      	str	r3, [r7, #12]
 800c6dc:	4b0b      	ldr	r3, [pc, #44]	@ (800c70c <HAL_PCD_MspInit+0xa0>)
 800c6de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6e0:	4a0a      	ldr	r2, [pc, #40]	@ (800c70c <HAL_PCD_MspInit+0xa0>)
 800c6e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c6e6:	6453      	str	r3, [r2, #68]	@ 0x44
 800c6e8:	4b08      	ldr	r3, [pc, #32]	@ (800c70c <HAL_PCD_MspInit+0xa0>)
 800c6ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c6f0:	60fb      	str	r3, [r7, #12]
 800c6f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	2100      	movs	r1, #0
 800c6f8:	2043      	movs	r0, #67	@ 0x43
 800c6fa:	f7f7 fa4e 	bl	8003b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c6fe:	2043      	movs	r0, #67	@ 0x43
 800c700:	f7f7 fa67 	bl	8003bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c704:	bf00      	nop
 800c706:	3728      	adds	r7, #40	@ 0x28
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	40023800 	.word	0x40023800
 800c710:	40020000 	.word	0x40020000

0800c714 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c728:	4619      	mov	r1, r3
 800c72a:	4610      	mov	r0, r2
 800c72c:	f7fe faf9 	bl	800ad22 <USBD_LL_SetupStage>
}
 800c730:	bf00      	nop
 800c732:	3708      	adds	r7, #8
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	460b      	mov	r3, r1
 800c742:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c74a:	78fa      	ldrb	r2, [r7, #3]
 800c74c:	6879      	ldr	r1, [r7, #4]
 800c74e:	4613      	mov	r3, r2
 800c750:	00db      	lsls	r3, r3, #3
 800c752:	4413      	add	r3, r2
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	440b      	add	r3, r1
 800c758:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	78fb      	ldrb	r3, [r7, #3]
 800c760:	4619      	mov	r1, r3
 800c762:	f7fe fb33 	bl	800adcc <USBD_LL_DataOutStage>
}
 800c766:	bf00      	nop
 800c768:	3708      	adds	r7, #8
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}

0800c76e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c76e:	b580      	push	{r7, lr}
 800c770:	b082      	sub	sp, #8
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
 800c776:	460b      	mov	r3, r1
 800c778:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c780:	78fa      	ldrb	r2, [r7, #3]
 800c782:	6879      	ldr	r1, [r7, #4]
 800c784:	4613      	mov	r3, r2
 800c786:	00db      	lsls	r3, r3, #3
 800c788:	4413      	add	r3, r2
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	440b      	add	r3, r1
 800c78e:	3320      	adds	r3, #32
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	78fb      	ldrb	r3, [r7, #3]
 800c794:	4619      	mov	r1, r3
 800c796:	f7fe fbcc 	bl	800af32 <USBD_LL_DataInStage>
}
 800c79a:	bf00      	nop
 800c79c:	3708      	adds	r7, #8
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b082      	sub	sp, #8
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7fe fd06 	bl	800b1c2 <USBD_LL_SOF>
}
 800c7b6:	bf00      	nop
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b084      	sub	sp, #16
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	79db      	ldrb	r3, [r3, #7]
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	d001      	beq.n	800c7d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c7d2:	f7f4 ff71 	bl	80016b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c7dc:	7bfa      	ldrb	r2, [r7, #15]
 800c7de:	4611      	mov	r1, r2
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fe fcaa 	bl	800b13a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fe fc52 	bl	800b096 <USBD_LL_Reset>
}
 800c7f2:	bf00      	nop
 800c7f4:	3710      	adds	r7, #16
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
	...

0800c7fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fe fca5 	bl	800b15a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	6812      	ldr	r2, [r2, #0]
 800c81e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c822:	f043 0301 	orr.w	r3, r3, #1
 800c826:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	7adb      	ldrb	r3, [r3, #11]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d005      	beq.n	800c83c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c830:	4b04      	ldr	r3, [pc, #16]	@ (800c844 <HAL_PCD_SuspendCallback+0x48>)
 800c832:	691b      	ldr	r3, [r3, #16]
 800c834:	4a03      	ldr	r2, [pc, #12]	@ (800c844 <HAL_PCD_SuspendCallback+0x48>)
 800c836:	f043 0306 	orr.w	r3, r3, #6
 800c83a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c83c:	bf00      	nop
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	e000ed00 	.word	0xe000ed00

0800c848 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c856:	4618      	mov	r0, r3
 800c858:	f7fe fc9b 	bl	800b192 <USBD_LL_Resume>
}
 800c85c:	bf00      	nop
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	460b      	mov	r3, r1
 800c86e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c876:	78fa      	ldrb	r2, [r7, #3]
 800c878:	4611      	mov	r1, r2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fe fcf3 	bl	800b266 <USBD_LL_IsoOUTIncomplete>
}
 800c880:	bf00      	nop
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	460b      	mov	r3, r1
 800c892:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c89a:	78fa      	ldrb	r2, [r7, #3]
 800c89c:	4611      	mov	r1, r2
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7fe fcaf 	bl	800b202 <USBD_LL_IsoINIncomplete>
}
 800c8a4:	bf00      	nop
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fe fd05 	bl	800b2ca <USBD_LL_DevConnected>
}
 800c8c0:	bf00      	nop
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7fe fd02 	bl	800b2e0 <USBD_LL_DevDisconnected>
}
 800c8dc:	bf00      	nop
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d13c      	bne.n	800c96e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c8f4:	4a20      	ldr	r2, [pc, #128]	@ (800c978 <USBD_LL_Init+0x94>)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4a1e      	ldr	r2, [pc, #120]	@ (800c978 <USBD_LL_Init+0x94>)
 800c900:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c904:	4b1c      	ldr	r3, [pc, #112]	@ (800c978 <USBD_LL_Init+0x94>)
 800c906:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c90a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c90c:	4b1a      	ldr	r3, [pc, #104]	@ (800c978 <USBD_LL_Init+0x94>)
 800c90e:	2204      	movs	r2, #4
 800c910:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c912:	4b19      	ldr	r3, [pc, #100]	@ (800c978 <USBD_LL_Init+0x94>)
 800c914:	2202      	movs	r2, #2
 800c916:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c918:	4b17      	ldr	r3, [pc, #92]	@ (800c978 <USBD_LL_Init+0x94>)
 800c91a:	2200      	movs	r2, #0
 800c91c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c91e:	4b16      	ldr	r3, [pc, #88]	@ (800c978 <USBD_LL_Init+0x94>)
 800c920:	2202      	movs	r2, #2
 800c922:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c924:	4b14      	ldr	r3, [pc, #80]	@ (800c978 <USBD_LL_Init+0x94>)
 800c926:	2200      	movs	r2, #0
 800c928:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c92a:	4b13      	ldr	r3, [pc, #76]	@ (800c978 <USBD_LL_Init+0x94>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c930:	4b11      	ldr	r3, [pc, #68]	@ (800c978 <USBD_LL_Init+0x94>)
 800c932:	2200      	movs	r2, #0
 800c934:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c936:	4b10      	ldr	r3, [pc, #64]	@ (800c978 <USBD_LL_Init+0x94>)
 800c938:	2200      	movs	r2, #0
 800c93a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c93c:	4b0e      	ldr	r3, [pc, #56]	@ (800c978 <USBD_LL_Init+0x94>)
 800c93e:	2200      	movs	r2, #0
 800c940:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c942:	480d      	ldr	r0, [pc, #52]	@ (800c978 <USBD_LL_Init+0x94>)
 800c944:	f7f8 faf8 	bl	8004f38 <HAL_PCD_Init>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d001      	beq.n	800c952 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c94e:	f7f4 feb3 	bl	80016b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c952:	2180      	movs	r1, #128	@ 0x80
 800c954:	4808      	ldr	r0, [pc, #32]	@ (800c978 <USBD_LL_Init+0x94>)
 800c956:	f7f9 fd24 	bl	80063a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c95a:	2240      	movs	r2, #64	@ 0x40
 800c95c:	2100      	movs	r1, #0
 800c95e:	4806      	ldr	r0, [pc, #24]	@ (800c978 <USBD_LL_Init+0x94>)
 800c960:	f7f9 fcd8 	bl	8006314 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c964:	2280      	movs	r2, #128	@ 0x80
 800c966:	2101      	movs	r1, #1
 800c968:	4803      	ldr	r0, [pc, #12]	@ (800c978 <USBD_LL_Init+0x94>)
 800c96a:	f7f9 fcd3 	bl	8006314 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	200019f4 	.word	0x200019f4

0800c97c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c984:	2300      	movs	r3, #0
 800c986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c988:	2300      	movs	r3, #0
 800c98a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c992:	4618      	mov	r0, r3
 800c994:	f7f8 fbdf 	bl	8005156 <HAL_PCD_Start>
 800c998:	4603      	mov	r3, r0
 800c99a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c99c:	7bfb      	ldrb	r3, [r7, #15]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f000 f942 	bl	800cc28 <USBD_Get_USB_Status>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3710      	adds	r7, #16
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b084      	sub	sp, #16
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	4608      	mov	r0, r1
 800c9bc:	4611      	mov	r1, r2
 800c9be:	461a      	mov	r2, r3
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	70fb      	strb	r3, [r7, #3]
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	70bb      	strb	r3, [r7, #2]
 800c9c8:	4613      	mov	r3, r2
 800c9ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c9da:	78bb      	ldrb	r3, [r7, #2]
 800c9dc:	883a      	ldrh	r2, [r7, #0]
 800c9de:	78f9      	ldrb	r1, [r7, #3]
 800c9e0:	f7f9 f8b3 	bl	8005b4a <HAL_PCD_EP_Open>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9e8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f000 f91c 	bl	800cc28 <USBD_Get_USB_Status>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b084      	sub	sp, #16
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
 800ca06:	460b      	mov	r3, r1
 800ca08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca18:	78fa      	ldrb	r2, [r7, #3]
 800ca1a:	4611      	mov	r1, r2
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7f9 f8fe 	bl	8005c1e <HAL_PCD_EP_Close>
 800ca22:	4603      	mov	r3, r0
 800ca24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca26:	7bfb      	ldrb	r3, [r7, #15]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f000 f8fd 	bl	800cc28 <USBD_Get_USB_Status>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca32:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3710      	adds	r7, #16
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	460b      	mov	r3, r1
 800ca46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca56:	78fa      	ldrb	r2, [r7, #3]
 800ca58:	4611      	mov	r1, r2
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7f9 f9b6 	bl	8005dcc <HAL_PCD_EP_SetStall>
 800ca60:	4603      	mov	r3, r0
 800ca62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca64:	7bfb      	ldrb	r3, [r7, #15]
 800ca66:	4618      	mov	r0, r3
 800ca68:	f000 f8de 	bl	800cc28 <USBD_Get_USB_Status>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca70:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b084      	sub	sp, #16
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	460b      	mov	r3, r1
 800ca84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca86:	2300      	movs	r3, #0
 800ca88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca94:	78fa      	ldrb	r2, [r7, #3]
 800ca96:	4611      	mov	r1, r2
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7f9 f9fa 	bl	8005e92 <HAL_PCD_EP_ClrStall>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caa2:	7bfb      	ldrb	r3, [r7, #15]
 800caa4:	4618      	mov	r0, r3
 800caa6:	f000 f8bf 	bl	800cc28 <USBD_Get_USB_Status>
 800caaa:	4603      	mov	r3, r0
 800caac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800caae:	7bbb      	ldrb	r3, [r7, #14]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3710      	adds	r7, #16
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	460b      	mov	r3, r1
 800cac2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800caca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cacc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	da0b      	bge.n	800caec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cad4:	78fb      	ldrb	r3, [r7, #3]
 800cad6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cada:	68f9      	ldr	r1, [r7, #12]
 800cadc:	4613      	mov	r3, r2
 800cade:	00db      	lsls	r3, r3, #3
 800cae0:	4413      	add	r3, r2
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	440b      	add	r3, r1
 800cae6:	3316      	adds	r3, #22
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	e00b      	b.n	800cb04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800caec:	78fb      	ldrb	r3, [r7, #3]
 800caee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800caf2:	68f9      	ldr	r1, [r7, #12]
 800caf4:	4613      	mov	r3, r2
 800caf6:	00db      	lsls	r3, r3, #3
 800caf8:	4413      	add	r3, r2
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	440b      	add	r3, r1
 800cafe:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800cb02:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3714      	adds	r7, #20
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	460b      	mov	r3, r1
 800cb1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb20:	2300      	movs	r3, #0
 800cb22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cb2a:	78fa      	ldrb	r2, [r7, #3]
 800cb2c:	4611      	mov	r1, r2
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7f8 ffe7 	bl	8005b02 <HAL_PCD_SetAddress>
 800cb34:	4603      	mov	r3, r0
 800cb36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb38:	7bfb      	ldrb	r3, [r7, #15]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f000 f874 	bl	800cc28 <USBD_Get_USB_Status>
 800cb40:	4603      	mov	r3, r0
 800cb42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb44:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3710      	adds	r7, #16
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b086      	sub	sp, #24
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	60f8      	str	r0, [r7, #12]
 800cb56:	607a      	str	r2, [r7, #4]
 800cb58:	603b      	str	r3, [r7, #0]
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb62:	2300      	movs	r3, #0
 800cb64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cb6c:	7af9      	ldrb	r1, [r7, #11]
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	f7f9 f8f1 	bl	8005d58 <HAL_PCD_EP_Transmit>
 800cb76:	4603      	mov	r3, r0
 800cb78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb7a:	7dfb      	ldrb	r3, [r7, #23]
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f000 f853 	bl	800cc28 <USBD_Get_USB_Status>
 800cb82:	4603      	mov	r3, r0
 800cb84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb86:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3718      	adds	r7, #24
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b086      	sub	sp, #24
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	607a      	str	r2, [r7, #4]
 800cb9a:	603b      	str	r3, [r7, #0]
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cba0:	2300      	movs	r3, #0
 800cba2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cba4:	2300      	movs	r3, #0
 800cba6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cbae:	7af9      	ldrb	r1, [r7, #11]
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	f7f9 f87d 	bl	8005cb2 <HAL_PCD_EP_Receive>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbbc:	7dfb      	ldrb	r3, [r7, #23]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f000 f832 	bl	800cc28 <USBD_Get_USB_Status>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cbc8:	7dbb      	ldrb	r3, [r7, #22]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3718      	adds	r7, #24
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b082      	sub	sp, #8
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
 800cbda:	460b      	mov	r3, r1
 800cbdc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cbe4:	78fa      	ldrb	r2, [r7, #3]
 800cbe6:	4611      	mov	r1, r2
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7f9 f89d 	bl	8005d28 <HAL_PCD_EP_GetRxCount>
 800cbee:	4603      	mov	r3, r0
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cc00:	4b03      	ldr	r3, [pc, #12]	@ (800cc10 <USBD_static_malloc+0x18>)
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	370c      	adds	r7, #12
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop
 800cc10:	20001ed8 	.word	0x20001ed8

0800cc14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b083      	sub	sp, #12
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]

}
 800cc1c:	bf00      	nop
 800cc1e:	370c      	adds	r7, #12
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	4603      	mov	r3, r0
 800cc30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cc36:	79fb      	ldrb	r3, [r7, #7]
 800cc38:	2b03      	cmp	r3, #3
 800cc3a:	d817      	bhi.n	800cc6c <USBD_Get_USB_Status+0x44>
 800cc3c:	a201      	add	r2, pc, #4	@ (adr r2, 800cc44 <USBD_Get_USB_Status+0x1c>)
 800cc3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc42:	bf00      	nop
 800cc44:	0800cc55 	.word	0x0800cc55
 800cc48:	0800cc5b 	.word	0x0800cc5b
 800cc4c:	0800cc61 	.word	0x0800cc61
 800cc50:	0800cc67 	.word	0x0800cc67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	73fb      	strb	r3, [r7, #15]
    break;
 800cc58:	e00b      	b.n	800cc72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc5a:	2303      	movs	r3, #3
 800cc5c:	73fb      	strb	r3, [r7, #15]
    break;
 800cc5e:	e008      	b.n	800cc72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc60:	2301      	movs	r3, #1
 800cc62:	73fb      	strb	r3, [r7, #15]
    break;
 800cc64:	e005      	b.n	800cc72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc66:	2303      	movs	r3, #3
 800cc68:	73fb      	strb	r3, [r7, #15]
    break;
 800cc6a:	e002      	b.n	800cc72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cc6c:	2303      	movs	r3, #3
 800cc6e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc70:	bf00      	nop
  }
  return usb_status;
 800cc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3714      	adds	r7, #20
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <__cvt>:
 800cc80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc84:	ec57 6b10 	vmov	r6, r7, d0
 800cc88:	2f00      	cmp	r7, #0
 800cc8a:	460c      	mov	r4, r1
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	463b      	mov	r3, r7
 800cc90:	bfbb      	ittet	lt
 800cc92:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cc96:	461f      	movlt	r7, r3
 800cc98:	2300      	movge	r3, #0
 800cc9a:	232d      	movlt	r3, #45	@ 0x2d
 800cc9c:	700b      	strb	r3, [r1, #0]
 800cc9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cca0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cca4:	4691      	mov	r9, r2
 800cca6:	f023 0820 	bic.w	r8, r3, #32
 800ccaa:	bfbc      	itt	lt
 800ccac:	4632      	movlt	r2, r6
 800ccae:	4616      	movlt	r6, r2
 800ccb0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ccb4:	d005      	beq.n	800ccc2 <__cvt+0x42>
 800ccb6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ccba:	d100      	bne.n	800ccbe <__cvt+0x3e>
 800ccbc:	3401      	adds	r4, #1
 800ccbe:	2102      	movs	r1, #2
 800ccc0:	e000      	b.n	800ccc4 <__cvt+0x44>
 800ccc2:	2103      	movs	r1, #3
 800ccc4:	ab03      	add	r3, sp, #12
 800ccc6:	9301      	str	r3, [sp, #4]
 800ccc8:	ab02      	add	r3, sp, #8
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	ec47 6b10 	vmov	d0, r6, r7
 800ccd0:	4653      	mov	r3, sl
 800ccd2:	4622      	mov	r2, r4
 800ccd4:	f000 ff88 	bl	800dbe8 <_dtoa_r>
 800ccd8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ccdc:	4605      	mov	r5, r0
 800ccde:	d119      	bne.n	800cd14 <__cvt+0x94>
 800cce0:	f019 0f01 	tst.w	r9, #1
 800cce4:	d00e      	beq.n	800cd04 <__cvt+0x84>
 800cce6:	eb00 0904 	add.w	r9, r0, r4
 800ccea:	2200      	movs	r2, #0
 800ccec:	2300      	movs	r3, #0
 800ccee:	4630      	mov	r0, r6
 800ccf0:	4639      	mov	r1, r7
 800ccf2:	f7f3 fef1 	bl	8000ad8 <__aeabi_dcmpeq>
 800ccf6:	b108      	cbz	r0, 800ccfc <__cvt+0x7c>
 800ccf8:	f8cd 900c 	str.w	r9, [sp, #12]
 800ccfc:	2230      	movs	r2, #48	@ 0x30
 800ccfe:	9b03      	ldr	r3, [sp, #12]
 800cd00:	454b      	cmp	r3, r9
 800cd02:	d31e      	bcc.n	800cd42 <__cvt+0xc2>
 800cd04:	9b03      	ldr	r3, [sp, #12]
 800cd06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd08:	1b5b      	subs	r3, r3, r5
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	6013      	str	r3, [r2, #0]
 800cd0e:	b004      	add	sp, #16
 800cd10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cd18:	eb00 0904 	add.w	r9, r0, r4
 800cd1c:	d1e5      	bne.n	800ccea <__cvt+0x6a>
 800cd1e:	7803      	ldrb	r3, [r0, #0]
 800cd20:	2b30      	cmp	r3, #48	@ 0x30
 800cd22:	d10a      	bne.n	800cd3a <__cvt+0xba>
 800cd24:	2200      	movs	r2, #0
 800cd26:	2300      	movs	r3, #0
 800cd28:	4630      	mov	r0, r6
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	f7f3 fed4 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd30:	b918      	cbnz	r0, 800cd3a <__cvt+0xba>
 800cd32:	f1c4 0401 	rsb	r4, r4, #1
 800cd36:	f8ca 4000 	str.w	r4, [sl]
 800cd3a:	f8da 3000 	ldr.w	r3, [sl]
 800cd3e:	4499      	add	r9, r3
 800cd40:	e7d3      	b.n	800ccea <__cvt+0x6a>
 800cd42:	1c59      	adds	r1, r3, #1
 800cd44:	9103      	str	r1, [sp, #12]
 800cd46:	701a      	strb	r2, [r3, #0]
 800cd48:	e7d9      	b.n	800ccfe <__cvt+0x7e>

0800cd4a <__exponent>:
 800cd4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd4c:	2900      	cmp	r1, #0
 800cd4e:	bfba      	itte	lt
 800cd50:	4249      	neglt	r1, r1
 800cd52:	232d      	movlt	r3, #45	@ 0x2d
 800cd54:	232b      	movge	r3, #43	@ 0x2b
 800cd56:	2909      	cmp	r1, #9
 800cd58:	7002      	strb	r2, [r0, #0]
 800cd5a:	7043      	strb	r3, [r0, #1]
 800cd5c:	dd29      	ble.n	800cdb2 <__exponent+0x68>
 800cd5e:	f10d 0307 	add.w	r3, sp, #7
 800cd62:	461d      	mov	r5, r3
 800cd64:	270a      	movs	r7, #10
 800cd66:	461a      	mov	r2, r3
 800cd68:	fbb1 f6f7 	udiv	r6, r1, r7
 800cd6c:	fb07 1416 	mls	r4, r7, r6, r1
 800cd70:	3430      	adds	r4, #48	@ 0x30
 800cd72:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cd76:	460c      	mov	r4, r1
 800cd78:	2c63      	cmp	r4, #99	@ 0x63
 800cd7a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800cd7e:	4631      	mov	r1, r6
 800cd80:	dcf1      	bgt.n	800cd66 <__exponent+0x1c>
 800cd82:	3130      	adds	r1, #48	@ 0x30
 800cd84:	1e94      	subs	r4, r2, #2
 800cd86:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cd8a:	1c41      	adds	r1, r0, #1
 800cd8c:	4623      	mov	r3, r4
 800cd8e:	42ab      	cmp	r3, r5
 800cd90:	d30a      	bcc.n	800cda8 <__exponent+0x5e>
 800cd92:	f10d 0309 	add.w	r3, sp, #9
 800cd96:	1a9b      	subs	r3, r3, r2
 800cd98:	42ac      	cmp	r4, r5
 800cd9a:	bf88      	it	hi
 800cd9c:	2300      	movhi	r3, #0
 800cd9e:	3302      	adds	r3, #2
 800cda0:	4403      	add	r3, r0
 800cda2:	1a18      	subs	r0, r3, r0
 800cda4:	b003      	add	sp, #12
 800cda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cda8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cdac:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cdb0:	e7ed      	b.n	800cd8e <__exponent+0x44>
 800cdb2:	2330      	movs	r3, #48	@ 0x30
 800cdb4:	3130      	adds	r1, #48	@ 0x30
 800cdb6:	7083      	strb	r3, [r0, #2]
 800cdb8:	70c1      	strb	r1, [r0, #3]
 800cdba:	1d03      	adds	r3, r0, #4
 800cdbc:	e7f1      	b.n	800cda2 <__exponent+0x58>
	...

0800cdc0 <_printf_float>:
 800cdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc4:	b08d      	sub	sp, #52	@ 0x34
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cdcc:	4616      	mov	r6, r2
 800cdce:	461f      	mov	r7, r3
 800cdd0:	4605      	mov	r5, r0
 800cdd2:	f000 fdf9 	bl	800d9c8 <_localeconv_r>
 800cdd6:	6803      	ldr	r3, [r0, #0]
 800cdd8:	9304      	str	r3, [sp, #16]
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7f3 fa50 	bl	8000280 <strlen>
 800cde0:	2300      	movs	r3, #0
 800cde2:	930a      	str	r3, [sp, #40]	@ 0x28
 800cde4:	f8d8 3000 	ldr.w	r3, [r8]
 800cde8:	9005      	str	r0, [sp, #20]
 800cdea:	3307      	adds	r3, #7
 800cdec:	f023 0307 	bic.w	r3, r3, #7
 800cdf0:	f103 0208 	add.w	r2, r3, #8
 800cdf4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cdf8:	f8d4 b000 	ldr.w	fp, [r4]
 800cdfc:	f8c8 2000 	str.w	r2, [r8]
 800ce00:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ce08:	9307      	str	r3, [sp, #28]
 800ce0a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ce0e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ce12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce16:	4b9c      	ldr	r3, [pc, #624]	@ (800d088 <_printf_float+0x2c8>)
 800ce18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce1c:	f7f3 fe8e 	bl	8000b3c <__aeabi_dcmpun>
 800ce20:	bb70      	cbnz	r0, 800ce80 <_printf_float+0xc0>
 800ce22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce26:	4b98      	ldr	r3, [pc, #608]	@ (800d088 <_printf_float+0x2c8>)
 800ce28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce2c:	f7f3 fe68 	bl	8000b00 <__aeabi_dcmple>
 800ce30:	bb30      	cbnz	r0, 800ce80 <_printf_float+0xc0>
 800ce32:	2200      	movs	r2, #0
 800ce34:	2300      	movs	r3, #0
 800ce36:	4640      	mov	r0, r8
 800ce38:	4649      	mov	r1, r9
 800ce3a:	f7f3 fe57 	bl	8000aec <__aeabi_dcmplt>
 800ce3e:	b110      	cbz	r0, 800ce46 <_printf_float+0x86>
 800ce40:	232d      	movs	r3, #45	@ 0x2d
 800ce42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce46:	4a91      	ldr	r2, [pc, #580]	@ (800d08c <_printf_float+0x2cc>)
 800ce48:	4b91      	ldr	r3, [pc, #580]	@ (800d090 <_printf_float+0x2d0>)
 800ce4a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ce4e:	bf8c      	ite	hi
 800ce50:	4690      	movhi	r8, r2
 800ce52:	4698      	movls	r8, r3
 800ce54:	2303      	movs	r3, #3
 800ce56:	6123      	str	r3, [r4, #16]
 800ce58:	f02b 0304 	bic.w	r3, fp, #4
 800ce5c:	6023      	str	r3, [r4, #0]
 800ce5e:	f04f 0900 	mov.w	r9, #0
 800ce62:	9700      	str	r7, [sp, #0]
 800ce64:	4633      	mov	r3, r6
 800ce66:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ce68:	4621      	mov	r1, r4
 800ce6a:	4628      	mov	r0, r5
 800ce6c:	f000 f9d2 	bl	800d214 <_printf_common>
 800ce70:	3001      	adds	r0, #1
 800ce72:	f040 808d 	bne.w	800cf90 <_printf_float+0x1d0>
 800ce76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce7a:	b00d      	add	sp, #52	@ 0x34
 800ce7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce80:	4642      	mov	r2, r8
 800ce82:	464b      	mov	r3, r9
 800ce84:	4640      	mov	r0, r8
 800ce86:	4649      	mov	r1, r9
 800ce88:	f7f3 fe58 	bl	8000b3c <__aeabi_dcmpun>
 800ce8c:	b140      	cbz	r0, 800cea0 <_printf_float+0xe0>
 800ce8e:	464b      	mov	r3, r9
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	bfbc      	itt	lt
 800ce94:	232d      	movlt	r3, #45	@ 0x2d
 800ce96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ce9a:	4a7e      	ldr	r2, [pc, #504]	@ (800d094 <_printf_float+0x2d4>)
 800ce9c:	4b7e      	ldr	r3, [pc, #504]	@ (800d098 <_printf_float+0x2d8>)
 800ce9e:	e7d4      	b.n	800ce4a <_printf_float+0x8a>
 800cea0:	6863      	ldr	r3, [r4, #4]
 800cea2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cea6:	9206      	str	r2, [sp, #24]
 800cea8:	1c5a      	adds	r2, r3, #1
 800ceaa:	d13b      	bne.n	800cf24 <_printf_float+0x164>
 800ceac:	2306      	movs	r3, #6
 800ceae:	6063      	str	r3, [r4, #4]
 800ceb0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	6022      	str	r2, [r4, #0]
 800ceb8:	9303      	str	r3, [sp, #12]
 800ceba:	ab0a      	add	r3, sp, #40	@ 0x28
 800cebc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cec0:	ab09      	add	r3, sp, #36	@ 0x24
 800cec2:	9300      	str	r3, [sp, #0]
 800cec4:	6861      	ldr	r1, [r4, #4]
 800cec6:	ec49 8b10 	vmov	d0, r8, r9
 800ceca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cece:	4628      	mov	r0, r5
 800ced0:	f7ff fed6 	bl	800cc80 <__cvt>
 800ced4:	9b06      	ldr	r3, [sp, #24]
 800ced6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ced8:	2b47      	cmp	r3, #71	@ 0x47
 800ceda:	4680      	mov	r8, r0
 800cedc:	d129      	bne.n	800cf32 <_printf_float+0x172>
 800cede:	1cc8      	adds	r0, r1, #3
 800cee0:	db02      	blt.n	800cee8 <_printf_float+0x128>
 800cee2:	6863      	ldr	r3, [r4, #4]
 800cee4:	4299      	cmp	r1, r3
 800cee6:	dd41      	ble.n	800cf6c <_printf_float+0x1ac>
 800cee8:	f1aa 0a02 	sub.w	sl, sl, #2
 800ceec:	fa5f fa8a 	uxtb.w	sl, sl
 800cef0:	3901      	subs	r1, #1
 800cef2:	4652      	mov	r2, sl
 800cef4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cef8:	9109      	str	r1, [sp, #36]	@ 0x24
 800cefa:	f7ff ff26 	bl	800cd4a <__exponent>
 800cefe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf00:	1813      	adds	r3, r2, r0
 800cf02:	2a01      	cmp	r2, #1
 800cf04:	4681      	mov	r9, r0
 800cf06:	6123      	str	r3, [r4, #16]
 800cf08:	dc02      	bgt.n	800cf10 <_printf_float+0x150>
 800cf0a:	6822      	ldr	r2, [r4, #0]
 800cf0c:	07d2      	lsls	r2, r2, #31
 800cf0e:	d501      	bpl.n	800cf14 <_printf_float+0x154>
 800cf10:	3301      	adds	r3, #1
 800cf12:	6123      	str	r3, [r4, #16]
 800cf14:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d0a2      	beq.n	800ce62 <_printf_float+0xa2>
 800cf1c:	232d      	movs	r3, #45	@ 0x2d
 800cf1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf22:	e79e      	b.n	800ce62 <_printf_float+0xa2>
 800cf24:	9a06      	ldr	r2, [sp, #24]
 800cf26:	2a47      	cmp	r2, #71	@ 0x47
 800cf28:	d1c2      	bne.n	800ceb0 <_printf_float+0xf0>
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d1c0      	bne.n	800ceb0 <_printf_float+0xf0>
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e7bd      	b.n	800ceae <_printf_float+0xee>
 800cf32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cf36:	d9db      	bls.n	800cef0 <_printf_float+0x130>
 800cf38:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cf3c:	d118      	bne.n	800cf70 <_printf_float+0x1b0>
 800cf3e:	2900      	cmp	r1, #0
 800cf40:	6863      	ldr	r3, [r4, #4]
 800cf42:	dd0b      	ble.n	800cf5c <_printf_float+0x19c>
 800cf44:	6121      	str	r1, [r4, #16]
 800cf46:	b913      	cbnz	r3, 800cf4e <_printf_float+0x18e>
 800cf48:	6822      	ldr	r2, [r4, #0]
 800cf4a:	07d0      	lsls	r0, r2, #31
 800cf4c:	d502      	bpl.n	800cf54 <_printf_float+0x194>
 800cf4e:	3301      	adds	r3, #1
 800cf50:	440b      	add	r3, r1
 800cf52:	6123      	str	r3, [r4, #16]
 800cf54:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cf56:	f04f 0900 	mov.w	r9, #0
 800cf5a:	e7db      	b.n	800cf14 <_printf_float+0x154>
 800cf5c:	b913      	cbnz	r3, 800cf64 <_printf_float+0x1a4>
 800cf5e:	6822      	ldr	r2, [r4, #0]
 800cf60:	07d2      	lsls	r2, r2, #31
 800cf62:	d501      	bpl.n	800cf68 <_printf_float+0x1a8>
 800cf64:	3302      	adds	r3, #2
 800cf66:	e7f4      	b.n	800cf52 <_printf_float+0x192>
 800cf68:	2301      	movs	r3, #1
 800cf6a:	e7f2      	b.n	800cf52 <_printf_float+0x192>
 800cf6c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cf70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf72:	4299      	cmp	r1, r3
 800cf74:	db05      	blt.n	800cf82 <_printf_float+0x1c2>
 800cf76:	6823      	ldr	r3, [r4, #0]
 800cf78:	6121      	str	r1, [r4, #16]
 800cf7a:	07d8      	lsls	r0, r3, #31
 800cf7c:	d5ea      	bpl.n	800cf54 <_printf_float+0x194>
 800cf7e:	1c4b      	adds	r3, r1, #1
 800cf80:	e7e7      	b.n	800cf52 <_printf_float+0x192>
 800cf82:	2900      	cmp	r1, #0
 800cf84:	bfd4      	ite	le
 800cf86:	f1c1 0202 	rsble	r2, r1, #2
 800cf8a:	2201      	movgt	r2, #1
 800cf8c:	4413      	add	r3, r2
 800cf8e:	e7e0      	b.n	800cf52 <_printf_float+0x192>
 800cf90:	6823      	ldr	r3, [r4, #0]
 800cf92:	055a      	lsls	r2, r3, #21
 800cf94:	d407      	bmi.n	800cfa6 <_printf_float+0x1e6>
 800cf96:	6923      	ldr	r3, [r4, #16]
 800cf98:	4642      	mov	r2, r8
 800cf9a:	4631      	mov	r1, r6
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	47b8      	blx	r7
 800cfa0:	3001      	adds	r0, #1
 800cfa2:	d12b      	bne.n	800cffc <_printf_float+0x23c>
 800cfa4:	e767      	b.n	800ce76 <_printf_float+0xb6>
 800cfa6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cfaa:	f240 80dd 	bls.w	800d168 <_printf_float+0x3a8>
 800cfae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	f7f3 fd8f 	bl	8000ad8 <__aeabi_dcmpeq>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	d033      	beq.n	800d026 <_printf_float+0x266>
 800cfbe:	4a37      	ldr	r2, [pc, #220]	@ (800d09c <_printf_float+0x2dc>)
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	4631      	mov	r1, r6
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	47b8      	blx	r7
 800cfc8:	3001      	adds	r0, #1
 800cfca:	f43f af54 	beq.w	800ce76 <_printf_float+0xb6>
 800cfce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cfd2:	4543      	cmp	r3, r8
 800cfd4:	db02      	blt.n	800cfdc <_printf_float+0x21c>
 800cfd6:	6823      	ldr	r3, [r4, #0]
 800cfd8:	07d8      	lsls	r0, r3, #31
 800cfda:	d50f      	bpl.n	800cffc <_printf_float+0x23c>
 800cfdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfe0:	4631      	mov	r1, r6
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	47b8      	blx	r7
 800cfe6:	3001      	adds	r0, #1
 800cfe8:	f43f af45 	beq.w	800ce76 <_printf_float+0xb6>
 800cfec:	f04f 0900 	mov.w	r9, #0
 800cff0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800cff4:	f104 0a1a 	add.w	sl, r4, #26
 800cff8:	45c8      	cmp	r8, r9
 800cffa:	dc09      	bgt.n	800d010 <_printf_float+0x250>
 800cffc:	6823      	ldr	r3, [r4, #0]
 800cffe:	079b      	lsls	r3, r3, #30
 800d000:	f100 8103 	bmi.w	800d20a <_printf_float+0x44a>
 800d004:	68e0      	ldr	r0, [r4, #12]
 800d006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d008:	4298      	cmp	r0, r3
 800d00a:	bfb8      	it	lt
 800d00c:	4618      	movlt	r0, r3
 800d00e:	e734      	b.n	800ce7a <_printf_float+0xba>
 800d010:	2301      	movs	r3, #1
 800d012:	4652      	mov	r2, sl
 800d014:	4631      	mov	r1, r6
 800d016:	4628      	mov	r0, r5
 800d018:	47b8      	blx	r7
 800d01a:	3001      	adds	r0, #1
 800d01c:	f43f af2b 	beq.w	800ce76 <_printf_float+0xb6>
 800d020:	f109 0901 	add.w	r9, r9, #1
 800d024:	e7e8      	b.n	800cff8 <_printf_float+0x238>
 800d026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d028:	2b00      	cmp	r3, #0
 800d02a:	dc39      	bgt.n	800d0a0 <_printf_float+0x2e0>
 800d02c:	4a1b      	ldr	r2, [pc, #108]	@ (800d09c <_printf_float+0x2dc>)
 800d02e:	2301      	movs	r3, #1
 800d030:	4631      	mov	r1, r6
 800d032:	4628      	mov	r0, r5
 800d034:	47b8      	blx	r7
 800d036:	3001      	adds	r0, #1
 800d038:	f43f af1d 	beq.w	800ce76 <_printf_float+0xb6>
 800d03c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d040:	ea59 0303 	orrs.w	r3, r9, r3
 800d044:	d102      	bne.n	800d04c <_printf_float+0x28c>
 800d046:	6823      	ldr	r3, [r4, #0]
 800d048:	07d9      	lsls	r1, r3, #31
 800d04a:	d5d7      	bpl.n	800cffc <_printf_float+0x23c>
 800d04c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d050:	4631      	mov	r1, r6
 800d052:	4628      	mov	r0, r5
 800d054:	47b8      	blx	r7
 800d056:	3001      	adds	r0, #1
 800d058:	f43f af0d 	beq.w	800ce76 <_printf_float+0xb6>
 800d05c:	f04f 0a00 	mov.w	sl, #0
 800d060:	f104 0b1a 	add.w	fp, r4, #26
 800d064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d066:	425b      	negs	r3, r3
 800d068:	4553      	cmp	r3, sl
 800d06a:	dc01      	bgt.n	800d070 <_printf_float+0x2b0>
 800d06c:	464b      	mov	r3, r9
 800d06e:	e793      	b.n	800cf98 <_printf_float+0x1d8>
 800d070:	2301      	movs	r3, #1
 800d072:	465a      	mov	r2, fp
 800d074:	4631      	mov	r1, r6
 800d076:	4628      	mov	r0, r5
 800d078:	47b8      	blx	r7
 800d07a:	3001      	adds	r0, #1
 800d07c:	f43f aefb 	beq.w	800ce76 <_printf_float+0xb6>
 800d080:	f10a 0a01 	add.w	sl, sl, #1
 800d084:	e7ee      	b.n	800d064 <_printf_float+0x2a4>
 800d086:	bf00      	nop
 800d088:	7fefffff 	.word	0x7fefffff
 800d08c:	0800fe6a 	.word	0x0800fe6a
 800d090:	0800fe66 	.word	0x0800fe66
 800d094:	0800fe72 	.word	0x0800fe72
 800d098:	0800fe6e 	.word	0x0800fe6e
 800d09c:	0800fe76 	.word	0x0800fe76
 800d0a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d0a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d0a6:	4553      	cmp	r3, sl
 800d0a8:	bfa8      	it	ge
 800d0aa:	4653      	movge	r3, sl
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	4699      	mov	r9, r3
 800d0b0:	dc36      	bgt.n	800d120 <_printf_float+0x360>
 800d0b2:	f04f 0b00 	mov.w	fp, #0
 800d0b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d0ba:	f104 021a 	add.w	r2, r4, #26
 800d0be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d0c0:	9306      	str	r3, [sp, #24]
 800d0c2:	eba3 0309 	sub.w	r3, r3, r9
 800d0c6:	455b      	cmp	r3, fp
 800d0c8:	dc31      	bgt.n	800d12e <_printf_float+0x36e>
 800d0ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0cc:	459a      	cmp	sl, r3
 800d0ce:	dc3a      	bgt.n	800d146 <_printf_float+0x386>
 800d0d0:	6823      	ldr	r3, [r4, #0]
 800d0d2:	07da      	lsls	r2, r3, #31
 800d0d4:	d437      	bmi.n	800d146 <_printf_float+0x386>
 800d0d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0d8:	ebaa 0903 	sub.w	r9, sl, r3
 800d0dc:	9b06      	ldr	r3, [sp, #24]
 800d0de:	ebaa 0303 	sub.w	r3, sl, r3
 800d0e2:	4599      	cmp	r9, r3
 800d0e4:	bfa8      	it	ge
 800d0e6:	4699      	movge	r9, r3
 800d0e8:	f1b9 0f00 	cmp.w	r9, #0
 800d0ec:	dc33      	bgt.n	800d156 <_printf_float+0x396>
 800d0ee:	f04f 0800 	mov.w	r8, #0
 800d0f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d0f6:	f104 0b1a 	add.w	fp, r4, #26
 800d0fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0fc:	ebaa 0303 	sub.w	r3, sl, r3
 800d100:	eba3 0309 	sub.w	r3, r3, r9
 800d104:	4543      	cmp	r3, r8
 800d106:	f77f af79 	ble.w	800cffc <_printf_float+0x23c>
 800d10a:	2301      	movs	r3, #1
 800d10c:	465a      	mov	r2, fp
 800d10e:	4631      	mov	r1, r6
 800d110:	4628      	mov	r0, r5
 800d112:	47b8      	blx	r7
 800d114:	3001      	adds	r0, #1
 800d116:	f43f aeae 	beq.w	800ce76 <_printf_float+0xb6>
 800d11a:	f108 0801 	add.w	r8, r8, #1
 800d11e:	e7ec      	b.n	800d0fa <_printf_float+0x33a>
 800d120:	4642      	mov	r2, r8
 800d122:	4631      	mov	r1, r6
 800d124:	4628      	mov	r0, r5
 800d126:	47b8      	blx	r7
 800d128:	3001      	adds	r0, #1
 800d12a:	d1c2      	bne.n	800d0b2 <_printf_float+0x2f2>
 800d12c:	e6a3      	b.n	800ce76 <_printf_float+0xb6>
 800d12e:	2301      	movs	r3, #1
 800d130:	4631      	mov	r1, r6
 800d132:	4628      	mov	r0, r5
 800d134:	9206      	str	r2, [sp, #24]
 800d136:	47b8      	blx	r7
 800d138:	3001      	adds	r0, #1
 800d13a:	f43f ae9c 	beq.w	800ce76 <_printf_float+0xb6>
 800d13e:	9a06      	ldr	r2, [sp, #24]
 800d140:	f10b 0b01 	add.w	fp, fp, #1
 800d144:	e7bb      	b.n	800d0be <_printf_float+0x2fe>
 800d146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d14a:	4631      	mov	r1, r6
 800d14c:	4628      	mov	r0, r5
 800d14e:	47b8      	blx	r7
 800d150:	3001      	adds	r0, #1
 800d152:	d1c0      	bne.n	800d0d6 <_printf_float+0x316>
 800d154:	e68f      	b.n	800ce76 <_printf_float+0xb6>
 800d156:	9a06      	ldr	r2, [sp, #24]
 800d158:	464b      	mov	r3, r9
 800d15a:	4442      	add	r2, r8
 800d15c:	4631      	mov	r1, r6
 800d15e:	4628      	mov	r0, r5
 800d160:	47b8      	blx	r7
 800d162:	3001      	adds	r0, #1
 800d164:	d1c3      	bne.n	800d0ee <_printf_float+0x32e>
 800d166:	e686      	b.n	800ce76 <_printf_float+0xb6>
 800d168:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d16c:	f1ba 0f01 	cmp.w	sl, #1
 800d170:	dc01      	bgt.n	800d176 <_printf_float+0x3b6>
 800d172:	07db      	lsls	r3, r3, #31
 800d174:	d536      	bpl.n	800d1e4 <_printf_float+0x424>
 800d176:	2301      	movs	r3, #1
 800d178:	4642      	mov	r2, r8
 800d17a:	4631      	mov	r1, r6
 800d17c:	4628      	mov	r0, r5
 800d17e:	47b8      	blx	r7
 800d180:	3001      	adds	r0, #1
 800d182:	f43f ae78 	beq.w	800ce76 <_printf_float+0xb6>
 800d186:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d18a:	4631      	mov	r1, r6
 800d18c:	4628      	mov	r0, r5
 800d18e:	47b8      	blx	r7
 800d190:	3001      	adds	r0, #1
 800d192:	f43f ae70 	beq.w	800ce76 <_printf_float+0xb6>
 800d196:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d19a:	2200      	movs	r2, #0
 800d19c:	2300      	movs	r3, #0
 800d19e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d1a2:	f7f3 fc99 	bl	8000ad8 <__aeabi_dcmpeq>
 800d1a6:	b9c0      	cbnz	r0, 800d1da <_printf_float+0x41a>
 800d1a8:	4653      	mov	r3, sl
 800d1aa:	f108 0201 	add.w	r2, r8, #1
 800d1ae:	4631      	mov	r1, r6
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	47b8      	blx	r7
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	d10c      	bne.n	800d1d2 <_printf_float+0x412>
 800d1b8:	e65d      	b.n	800ce76 <_printf_float+0xb6>
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	465a      	mov	r2, fp
 800d1be:	4631      	mov	r1, r6
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	47b8      	blx	r7
 800d1c4:	3001      	adds	r0, #1
 800d1c6:	f43f ae56 	beq.w	800ce76 <_printf_float+0xb6>
 800d1ca:	f108 0801 	add.w	r8, r8, #1
 800d1ce:	45d0      	cmp	r8, sl
 800d1d0:	dbf3      	blt.n	800d1ba <_printf_float+0x3fa>
 800d1d2:	464b      	mov	r3, r9
 800d1d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d1d8:	e6df      	b.n	800cf9a <_printf_float+0x1da>
 800d1da:	f04f 0800 	mov.w	r8, #0
 800d1de:	f104 0b1a 	add.w	fp, r4, #26
 800d1e2:	e7f4      	b.n	800d1ce <_printf_float+0x40e>
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	4642      	mov	r2, r8
 800d1e8:	e7e1      	b.n	800d1ae <_printf_float+0x3ee>
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	464a      	mov	r2, r9
 800d1ee:	4631      	mov	r1, r6
 800d1f0:	4628      	mov	r0, r5
 800d1f2:	47b8      	blx	r7
 800d1f4:	3001      	adds	r0, #1
 800d1f6:	f43f ae3e 	beq.w	800ce76 <_printf_float+0xb6>
 800d1fa:	f108 0801 	add.w	r8, r8, #1
 800d1fe:	68e3      	ldr	r3, [r4, #12]
 800d200:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d202:	1a5b      	subs	r3, r3, r1
 800d204:	4543      	cmp	r3, r8
 800d206:	dcf0      	bgt.n	800d1ea <_printf_float+0x42a>
 800d208:	e6fc      	b.n	800d004 <_printf_float+0x244>
 800d20a:	f04f 0800 	mov.w	r8, #0
 800d20e:	f104 0919 	add.w	r9, r4, #25
 800d212:	e7f4      	b.n	800d1fe <_printf_float+0x43e>

0800d214 <_printf_common>:
 800d214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d218:	4616      	mov	r6, r2
 800d21a:	4698      	mov	r8, r3
 800d21c:	688a      	ldr	r2, [r1, #8]
 800d21e:	690b      	ldr	r3, [r1, #16]
 800d220:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d224:	4293      	cmp	r3, r2
 800d226:	bfb8      	it	lt
 800d228:	4613      	movlt	r3, r2
 800d22a:	6033      	str	r3, [r6, #0]
 800d22c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d230:	4607      	mov	r7, r0
 800d232:	460c      	mov	r4, r1
 800d234:	b10a      	cbz	r2, 800d23a <_printf_common+0x26>
 800d236:	3301      	adds	r3, #1
 800d238:	6033      	str	r3, [r6, #0]
 800d23a:	6823      	ldr	r3, [r4, #0]
 800d23c:	0699      	lsls	r1, r3, #26
 800d23e:	bf42      	ittt	mi
 800d240:	6833      	ldrmi	r3, [r6, #0]
 800d242:	3302      	addmi	r3, #2
 800d244:	6033      	strmi	r3, [r6, #0]
 800d246:	6825      	ldr	r5, [r4, #0]
 800d248:	f015 0506 	ands.w	r5, r5, #6
 800d24c:	d106      	bne.n	800d25c <_printf_common+0x48>
 800d24e:	f104 0a19 	add.w	sl, r4, #25
 800d252:	68e3      	ldr	r3, [r4, #12]
 800d254:	6832      	ldr	r2, [r6, #0]
 800d256:	1a9b      	subs	r3, r3, r2
 800d258:	42ab      	cmp	r3, r5
 800d25a:	dc26      	bgt.n	800d2aa <_printf_common+0x96>
 800d25c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d260:	6822      	ldr	r2, [r4, #0]
 800d262:	3b00      	subs	r3, #0
 800d264:	bf18      	it	ne
 800d266:	2301      	movne	r3, #1
 800d268:	0692      	lsls	r2, r2, #26
 800d26a:	d42b      	bmi.n	800d2c4 <_printf_common+0xb0>
 800d26c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d270:	4641      	mov	r1, r8
 800d272:	4638      	mov	r0, r7
 800d274:	47c8      	blx	r9
 800d276:	3001      	adds	r0, #1
 800d278:	d01e      	beq.n	800d2b8 <_printf_common+0xa4>
 800d27a:	6823      	ldr	r3, [r4, #0]
 800d27c:	6922      	ldr	r2, [r4, #16]
 800d27e:	f003 0306 	and.w	r3, r3, #6
 800d282:	2b04      	cmp	r3, #4
 800d284:	bf02      	ittt	eq
 800d286:	68e5      	ldreq	r5, [r4, #12]
 800d288:	6833      	ldreq	r3, [r6, #0]
 800d28a:	1aed      	subeq	r5, r5, r3
 800d28c:	68a3      	ldr	r3, [r4, #8]
 800d28e:	bf0c      	ite	eq
 800d290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d294:	2500      	movne	r5, #0
 800d296:	4293      	cmp	r3, r2
 800d298:	bfc4      	itt	gt
 800d29a:	1a9b      	subgt	r3, r3, r2
 800d29c:	18ed      	addgt	r5, r5, r3
 800d29e:	2600      	movs	r6, #0
 800d2a0:	341a      	adds	r4, #26
 800d2a2:	42b5      	cmp	r5, r6
 800d2a4:	d11a      	bne.n	800d2dc <_printf_common+0xc8>
 800d2a6:	2000      	movs	r0, #0
 800d2a8:	e008      	b.n	800d2bc <_printf_common+0xa8>
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	4652      	mov	r2, sl
 800d2ae:	4641      	mov	r1, r8
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	47c8      	blx	r9
 800d2b4:	3001      	adds	r0, #1
 800d2b6:	d103      	bne.n	800d2c0 <_printf_common+0xac>
 800d2b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d2bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2c0:	3501      	adds	r5, #1
 800d2c2:	e7c6      	b.n	800d252 <_printf_common+0x3e>
 800d2c4:	18e1      	adds	r1, r4, r3
 800d2c6:	1c5a      	adds	r2, r3, #1
 800d2c8:	2030      	movs	r0, #48	@ 0x30
 800d2ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d2ce:	4422      	add	r2, r4
 800d2d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d2d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d2d8:	3302      	adds	r3, #2
 800d2da:	e7c7      	b.n	800d26c <_printf_common+0x58>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	4622      	mov	r2, r4
 800d2e0:	4641      	mov	r1, r8
 800d2e2:	4638      	mov	r0, r7
 800d2e4:	47c8      	blx	r9
 800d2e6:	3001      	adds	r0, #1
 800d2e8:	d0e6      	beq.n	800d2b8 <_printf_common+0xa4>
 800d2ea:	3601      	adds	r6, #1
 800d2ec:	e7d9      	b.n	800d2a2 <_printf_common+0x8e>
	...

0800d2f0 <_printf_i>:
 800d2f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f4:	7e0f      	ldrb	r7, [r1, #24]
 800d2f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d2f8:	2f78      	cmp	r7, #120	@ 0x78
 800d2fa:	4691      	mov	r9, r2
 800d2fc:	4680      	mov	r8, r0
 800d2fe:	460c      	mov	r4, r1
 800d300:	469a      	mov	sl, r3
 800d302:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d306:	d807      	bhi.n	800d318 <_printf_i+0x28>
 800d308:	2f62      	cmp	r7, #98	@ 0x62
 800d30a:	d80a      	bhi.n	800d322 <_printf_i+0x32>
 800d30c:	2f00      	cmp	r7, #0
 800d30e:	f000 80d1 	beq.w	800d4b4 <_printf_i+0x1c4>
 800d312:	2f58      	cmp	r7, #88	@ 0x58
 800d314:	f000 80b8 	beq.w	800d488 <_printf_i+0x198>
 800d318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d31c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d320:	e03a      	b.n	800d398 <_printf_i+0xa8>
 800d322:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d326:	2b15      	cmp	r3, #21
 800d328:	d8f6      	bhi.n	800d318 <_printf_i+0x28>
 800d32a:	a101      	add	r1, pc, #4	@ (adr r1, 800d330 <_printf_i+0x40>)
 800d32c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d330:	0800d389 	.word	0x0800d389
 800d334:	0800d39d 	.word	0x0800d39d
 800d338:	0800d319 	.word	0x0800d319
 800d33c:	0800d319 	.word	0x0800d319
 800d340:	0800d319 	.word	0x0800d319
 800d344:	0800d319 	.word	0x0800d319
 800d348:	0800d39d 	.word	0x0800d39d
 800d34c:	0800d319 	.word	0x0800d319
 800d350:	0800d319 	.word	0x0800d319
 800d354:	0800d319 	.word	0x0800d319
 800d358:	0800d319 	.word	0x0800d319
 800d35c:	0800d49b 	.word	0x0800d49b
 800d360:	0800d3c7 	.word	0x0800d3c7
 800d364:	0800d455 	.word	0x0800d455
 800d368:	0800d319 	.word	0x0800d319
 800d36c:	0800d319 	.word	0x0800d319
 800d370:	0800d4bd 	.word	0x0800d4bd
 800d374:	0800d319 	.word	0x0800d319
 800d378:	0800d3c7 	.word	0x0800d3c7
 800d37c:	0800d319 	.word	0x0800d319
 800d380:	0800d319 	.word	0x0800d319
 800d384:	0800d45d 	.word	0x0800d45d
 800d388:	6833      	ldr	r3, [r6, #0]
 800d38a:	1d1a      	adds	r2, r3, #4
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	6032      	str	r2, [r6, #0]
 800d390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d394:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d398:	2301      	movs	r3, #1
 800d39a:	e09c      	b.n	800d4d6 <_printf_i+0x1e6>
 800d39c:	6833      	ldr	r3, [r6, #0]
 800d39e:	6820      	ldr	r0, [r4, #0]
 800d3a0:	1d19      	adds	r1, r3, #4
 800d3a2:	6031      	str	r1, [r6, #0]
 800d3a4:	0606      	lsls	r6, r0, #24
 800d3a6:	d501      	bpl.n	800d3ac <_printf_i+0xbc>
 800d3a8:	681d      	ldr	r5, [r3, #0]
 800d3aa:	e003      	b.n	800d3b4 <_printf_i+0xc4>
 800d3ac:	0645      	lsls	r5, r0, #25
 800d3ae:	d5fb      	bpl.n	800d3a8 <_printf_i+0xb8>
 800d3b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d3b4:	2d00      	cmp	r5, #0
 800d3b6:	da03      	bge.n	800d3c0 <_printf_i+0xd0>
 800d3b8:	232d      	movs	r3, #45	@ 0x2d
 800d3ba:	426d      	negs	r5, r5
 800d3bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3c0:	4858      	ldr	r0, [pc, #352]	@ (800d524 <_printf_i+0x234>)
 800d3c2:	230a      	movs	r3, #10
 800d3c4:	e011      	b.n	800d3ea <_printf_i+0xfa>
 800d3c6:	6821      	ldr	r1, [r4, #0]
 800d3c8:	6833      	ldr	r3, [r6, #0]
 800d3ca:	0608      	lsls	r0, r1, #24
 800d3cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800d3d0:	d402      	bmi.n	800d3d8 <_printf_i+0xe8>
 800d3d2:	0649      	lsls	r1, r1, #25
 800d3d4:	bf48      	it	mi
 800d3d6:	b2ad      	uxthmi	r5, r5
 800d3d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800d3da:	4852      	ldr	r0, [pc, #328]	@ (800d524 <_printf_i+0x234>)
 800d3dc:	6033      	str	r3, [r6, #0]
 800d3de:	bf14      	ite	ne
 800d3e0:	230a      	movne	r3, #10
 800d3e2:	2308      	moveq	r3, #8
 800d3e4:	2100      	movs	r1, #0
 800d3e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d3ea:	6866      	ldr	r6, [r4, #4]
 800d3ec:	60a6      	str	r6, [r4, #8]
 800d3ee:	2e00      	cmp	r6, #0
 800d3f0:	db05      	blt.n	800d3fe <_printf_i+0x10e>
 800d3f2:	6821      	ldr	r1, [r4, #0]
 800d3f4:	432e      	orrs	r6, r5
 800d3f6:	f021 0104 	bic.w	r1, r1, #4
 800d3fa:	6021      	str	r1, [r4, #0]
 800d3fc:	d04b      	beq.n	800d496 <_printf_i+0x1a6>
 800d3fe:	4616      	mov	r6, r2
 800d400:	fbb5 f1f3 	udiv	r1, r5, r3
 800d404:	fb03 5711 	mls	r7, r3, r1, r5
 800d408:	5dc7      	ldrb	r7, [r0, r7]
 800d40a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d40e:	462f      	mov	r7, r5
 800d410:	42bb      	cmp	r3, r7
 800d412:	460d      	mov	r5, r1
 800d414:	d9f4      	bls.n	800d400 <_printf_i+0x110>
 800d416:	2b08      	cmp	r3, #8
 800d418:	d10b      	bne.n	800d432 <_printf_i+0x142>
 800d41a:	6823      	ldr	r3, [r4, #0]
 800d41c:	07df      	lsls	r7, r3, #31
 800d41e:	d508      	bpl.n	800d432 <_printf_i+0x142>
 800d420:	6923      	ldr	r3, [r4, #16]
 800d422:	6861      	ldr	r1, [r4, #4]
 800d424:	4299      	cmp	r1, r3
 800d426:	bfde      	ittt	le
 800d428:	2330      	movle	r3, #48	@ 0x30
 800d42a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d42e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d432:	1b92      	subs	r2, r2, r6
 800d434:	6122      	str	r2, [r4, #16]
 800d436:	f8cd a000 	str.w	sl, [sp]
 800d43a:	464b      	mov	r3, r9
 800d43c:	aa03      	add	r2, sp, #12
 800d43e:	4621      	mov	r1, r4
 800d440:	4640      	mov	r0, r8
 800d442:	f7ff fee7 	bl	800d214 <_printf_common>
 800d446:	3001      	adds	r0, #1
 800d448:	d14a      	bne.n	800d4e0 <_printf_i+0x1f0>
 800d44a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d44e:	b004      	add	sp, #16
 800d450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d454:	6823      	ldr	r3, [r4, #0]
 800d456:	f043 0320 	orr.w	r3, r3, #32
 800d45a:	6023      	str	r3, [r4, #0]
 800d45c:	4832      	ldr	r0, [pc, #200]	@ (800d528 <_printf_i+0x238>)
 800d45e:	2778      	movs	r7, #120	@ 0x78
 800d460:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d464:	6823      	ldr	r3, [r4, #0]
 800d466:	6831      	ldr	r1, [r6, #0]
 800d468:	061f      	lsls	r7, r3, #24
 800d46a:	f851 5b04 	ldr.w	r5, [r1], #4
 800d46e:	d402      	bmi.n	800d476 <_printf_i+0x186>
 800d470:	065f      	lsls	r7, r3, #25
 800d472:	bf48      	it	mi
 800d474:	b2ad      	uxthmi	r5, r5
 800d476:	6031      	str	r1, [r6, #0]
 800d478:	07d9      	lsls	r1, r3, #31
 800d47a:	bf44      	itt	mi
 800d47c:	f043 0320 	orrmi.w	r3, r3, #32
 800d480:	6023      	strmi	r3, [r4, #0]
 800d482:	b11d      	cbz	r5, 800d48c <_printf_i+0x19c>
 800d484:	2310      	movs	r3, #16
 800d486:	e7ad      	b.n	800d3e4 <_printf_i+0xf4>
 800d488:	4826      	ldr	r0, [pc, #152]	@ (800d524 <_printf_i+0x234>)
 800d48a:	e7e9      	b.n	800d460 <_printf_i+0x170>
 800d48c:	6823      	ldr	r3, [r4, #0]
 800d48e:	f023 0320 	bic.w	r3, r3, #32
 800d492:	6023      	str	r3, [r4, #0]
 800d494:	e7f6      	b.n	800d484 <_printf_i+0x194>
 800d496:	4616      	mov	r6, r2
 800d498:	e7bd      	b.n	800d416 <_printf_i+0x126>
 800d49a:	6833      	ldr	r3, [r6, #0]
 800d49c:	6825      	ldr	r5, [r4, #0]
 800d49e:	6961      	ldr	r1, [r4, #20]
 800d4a0:	1d18      	adds	r0, r3, #4
 800d4a2:	6030      	str	r0, [r6, #0]
 800d4a4:	062e      	lsls	r6, r5, #24
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	d501      	bpl.n	800d4ae <_printf_i+0x1be>
 800d4aa:	6019      	str	r1, [r3, #0]
 800d4ac:	e002      	b.n	800d4b4 <_printf_i+0x1c4>
 800d4ae:	0668      	lsls	r0, r5, #25
 800d4b0:	d5fb      	bpl.n	800d4aa <_printf_i+0x1ba>
 800d4b2:	8019      	strh	r1, [r3, #0]
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	6123      	str	r3, [r4, #16]
 800d4b8:	4616      	mov	r6, r2
 800d4ba:	e7bc      	b.n	800d436 <_printf_i+0x146>
 800d4bc:	6833      	ldr	r3, [r6, #0]
 800d4be:	1d1a      	adds	r2, r3, #4
 800d4c0:	6032      	str	r2, [r6, #0]
 800d4c2:	681e      	ldr	r6, [r3, #0]
 800d4c4:	6862      	ldr	r2, [r4, #4]
 800d4c6:	2100      	movs	r1, #0
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	f7f2 fe89 	bl	80001e0 <memchr>
 800d4ce:	b108      	cbz	r0, 800d4d4 <_printf_i+0x1e4>
 800d4d0:	1b80      	subs	r0, r0, r6
 800d4d2:	6060      	str	r0, [r4, #4]
 800d4d4:	6863      	ldr	r3, [r4, #4]
 800d4d6:	6123      	str	r3, [r4, #16]
 800d4d8:	2300      	movs	r3, #0
 800d4da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d4de:	e7aa      	b.n	800d436 <_printf_i+0x146>
 800d4e0:	6923      	ldr	r3, [r4, #16]
 800d4e2:	4632      	mov	r2, r6
 800d4e4:	4649      	mov	r1, r9
 800d4e6:	4640      	mov	r0, r8
 800d4e8:	47d0      	blx	sl
 800d4ea:	3001      	adds	r0, #1
 800d4ec:	d0ad      	beq.n	800d44a <_printf_i+0x15a>
 800d4ee:	6823      	ldr	r3, [r4, #0]
 800d4f0:	079b      	lsls	r3, r3, #30
 800d4f2:	d413      	bmi.n	800d51c <_printf_i+0x22c>
 800d4f4:	68e0      	ldr	r0, [r4, #12]
 800d4f6:	9b03      	ldr	r3, [sp, #12]
 800d4f8:	4298      	cmp	r0, r3
 800d4fa:	bfb8      	it	lt
 800d4fc:	4618      	movlt	r0, r3
 800d4fe:	e7a6      	b.n	800d44e <_printf_i+0x15e>
 800d500:	2301      	movs	r3, #1
 800d502:	4632      	mov	r2, r6
 800d504:	4649      	mov	r1, r9
 800d506:	4640      	mov	r0, r8
 800d508:	47d0      	blx	sl
 800d50a:	3001      	adds	r0, #1
 800d50c:	d09d      	beq.n	800d44a <_printf_i+0x15a>
 800d50e:	3501      	adds	r5, #1
 800d510:	68e3      	ldr	r3, [r4, #12]
 800d512:	9903      	ldr	r1, [sp, #12]
 800d514:	1a5b      	subs	r3, r3, r1
 800d516:	42ab      	cmp	r3, r5
 800d518:	dcf2      	bgt.n	800d500 <_printf_i+0x210>
 800d51a:	e7eb      	b.n	800d4f4 <_printf_i+0x204>
 800d51c:	2500      	movs	r5, #0
 800d51e:	f104 0619 	add.w	r6, r4, #25
 800d522:	e7f5      	b.n	800d510 <_printf_i+0x220>
 800d524:	0800fe78 	.word	0x0800fe78
 800d528:	0800fe89 	.word	0x0800fe89

0800d52c <std>:
 800d52c:	2300      	movs	r3, #0
 800d52e:	b510      	push	{r4, lr}
 800d530:	4604      	mov	r4, r0
 800d532:	e9c0 3300 	strd	r3, r3, [r0]
 800d536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d53a:	6083      	str	r3, [r0, #8]
 800d53c:	8181      	strh	r1, [r0, #12]
 800d53e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d540:	81c2      	strh	r2, [r0, #14]
 800d542:	6183      	str	r3, [r0, #24]
 800d544:	4619      	mov	r1, r3
 800d546:	2208      	movs	r2, #8
 800d548:	305c      	adds	r0, #92	@ 0x5c
 800d54a:	f000 fa35 	bl	800d9b8 <memset>
 800d54e:	4b0d      	ldr	r3, [pc, #52]	@ (800d584 <std+0x58>)
 800d550:	6263      	str	r3, [r4, #36]	@ 0x24
 800d552:	4b0d      	ldr	r3, [pc, #52]	@ (800d588 <std+0x5c>)
 800d554:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d556:	4b0d      	ldr	r3, [pc, #52]	@ (800d58c <std+0x60>)
 800d558:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d55a:	4b0d      	ldr	r3, [pc, #52]	@ (800d590 <std+0x64>)
 800d55c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d55e:	4b0d      	ldr	r3, [pc, #52]	@ (800d594 <std+0x68>)
 800d560:	6224      	str	r4, [r4, #32]
 800d562:	429c      	cmp	r4, r3
 800d564:	d006      	beq.n	800d574 <std+0x48>
 800d566:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d56a:	4294      	cmp	r4, r2
 800d56c:	d002      	beq.n	800d574 <std+0x48>
 800d56e:	33d0      	adds	r3, #208	@ 0xd0
 800d570:	429c      	cmp	r4, r3
 800d572:	d105      	bne.n	800d580 <std+0x54>
 800d574:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d57c:	f000 ba98 	b.w	800dab0 <__retarget_lock_init_recursive>
 800d580:	bd10      	pop	{r4, pc}
 800d582:	bf00      	nop
 800d584:	0800d791 	.word	0x0800d791
 800d588:	0800d7b3 	.word	0x0800d7b3
 800d58c:	0800d7eb 	.word	0x0800d7eb
 800d590:	0800d80f 	.word	0x0800d80f
 800d594:	200020f8 	.word	0x200020f8

0800d598 <stdio_exit_handler>:
 800d598:	4a02      	ldr	r2, [pc, #8]	@ (800d5a4 <stdio_exit_handler+0xc>)
 800d59a:	4903      	ldr	r1, [pc, #12]	@ (800d5a8 <stdio_exit_handler+0x10>)
 800d59c:	4803      	ldr	r0, [pc, #12]	@ (800d5ac <stdio_exit_handler+0x14>)
 800d59e:	f000 b869 	b.w	800d674 <_fwalk_sglue>
 800d5a2:	bf00      	nop
 800d5a4:	20000104 	.word	0x20000104
 800d5a8:	0800f6b9 	.word	0x0800f6b9
 800d5ac:	20000114 	.word	0x20000114

0800d5b0 <cleanup_stdio>:
 800d5b0:	6841      	ldr	r1, [r0, #4]
 800d5b2:	4b0c      	ldr	r3, [pc, #48]	@ (800d5e4 <cleanup_stdio+0x34>)
 800d5b4:	4299      	cmp	r1, r3
 800d5b6:	b510      	push	{r4, lr}
 800d5b8:	4604      	mov	r4, r0
 800d5ba:	d001      	beq.n	800d5c0 <cleanup_stdio+0x10>
 800d5bc:	f002 f87c 	bl	800f6b8 <_fflush_r>
 800d5c0:	68a1      	ldr	r1, [r4, #8]
 800d5c2:	4b09      	ldr	r3, [pc, #36]	@ (800d5e8 <cleanup_stdio+0x38>)
 800d5c4:	4299      	cmp	r1, r3
 800d5c6:	d002      	beq.n	800d5ce <cleanup_stdio+0x1e>
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	f002 f875 	bl	800f6b8 <_fflush_r>
 800d5ce:	68e1      	ldr	r1, [r4, #12]
 800d5d0:	4b06      	ldr	r3, [pc, #24]	@ (800d5ec <cleanup_stdio+0x3c>)
 800d5d2:	4299      	cmp	r1, r3
 800d5d4:	d004      	beq.n	800d5e0 <cleanup_stdio+0x30>
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5dc:	f002 b86c 	b.w	800f6b8 <_fflush_r>
 800d5e0:	bd10      	pop	{r4, pc}
 800d5e2:	bf00      	nop
 800d5e4:	200020f8 	.word	0x200020f8
 800d5e8:	20002160 	.word	0x20002160
 800d5ec:	200021c8 	.word	0x200021c8

0800d5f0 <global_stdio_init.part.0>:
 800d5f0:	b510      	push	{r4, lr}
 800d5f2:	4b0b      	ldr	r3, [pc, #44]	@ (800d620 <global_stdio_init.part.0+0x30>)
 800d5f4:	4c0b      	ldr	r4, [pc, #44]	@ (800d624 <global_stdio_init.part.0+0x34>)
 800d5f6:	4a0c      	ldr	r2, [pc, #48]	@ (800d628 <global_stdio_init.part.0+0x38>)
 800d5f8:	601a      	str	r2, [r3, #0]
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	2104      	movs	r1, #4
 800d600:	f7ff ff94 	bl	800d52c <std>
 800d604:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d608:	2201      	movs	r2, #1
 800d60a:	2109      	movs	r1, #9
 800d60c:	f7ff ff8e 	bl	800d52c <std>
 800d610:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d614:	2202      	movs	r2, #2
 800d616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d61a:	2112      	movs	r1, #18
 800d61c:	f7ff bf86 	b.w	800d52c <std>
 800d620:	20002230 	.word	0x20002230
 800d624:	200020f8 	.word	0x200020f8
 800d628:	0800d599 	.word	0x0800d599

0800d62c <__sfp_lock_acquire>:
 800d62c:	4801      	ldr	r0, [pc, #4]	@ (800d634 <__sfp_lock_acquire+0x8>)
 800d62e:	f000 ba40 	b.w	800dab2 <__retarget_lock_acquire_recursive>
 800d632:	bf00      	nop
 800d634:	20002239 	.word	0x20002239

0800d638 <__sfp_lock_release>:
 800d638:	4801      	ldr	r0, [pc, #4]	@ (800d640 <__sfp_lock_release+0x8>)
 800d63a:	f000 ba3b 	b.w	800dab4 <__retarget_lock_release_recursive>
 800d63e:	bf00      	nop
 800d640:	20002239 	.word	0x20002239

0800d644 <__sinit>:
 800d644:	b510      	push	{r4, lr}
 800d646:	4604      	mov	r4, r0
 800d648:	f7ff fff0 	bl	800d62c <__sfp_lock_acquire>
 800d64c:	6a23      	ldr	r3, [r4, #32]
 800d64e:	b11b      	cbz	r3, 800d658 <__sinit+0x14>
 800d650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d654:	f7ff bff0 	b.w	800d638 <__sfp_lock_release>
 800d658:	4b04      	ldr	r3, [pc, #16]	@ (800d66c <__sinit+0x28>)
 800d65a:	6223      	str	r3, [r4, #32]
 800d65c:	4b04      	ldr	r3, [pc, #16]	@ (800d670 <__sinit+0x2c>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d1f5      	bne.n	800d650 <__sinit+0xc>
 800d664:	f7ff ffc4 	bl	800d5f0 <global_stdio_init.part.0>
 800d668:	e7f2      	b.n	800d650 <__sinit+0xc>
 800d66a:	bf00      	nop
 800d66c:	0800d5b1 	.word	0x0800d5b1
 800d670:	20002230 	.word	0x20002230

0800d674 <_fwalk_sglue>:
 800d674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d678:	4607      	mov	r7, r0
 800d67a:	4688      	mov	r8, r1
 800d67c:	4614      	mov	r4, r2
 800d67e:	2600      	movs	r6, #0
 800d680:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d684:	f1b9 0901 	subs.w	r9, r9, #1
 800d688:	d505      	bpl.n	800d696 <_fwalk_sglue+0x22>
 800d68a:	6824      	ldr	r4, [r4, #0]
 800d68c:	2c00      	cmp	r4, #0
 800d68e:	d1f7      	bne.n	800d680 <_fwalk_sglue+0xc>
 800d690:	4630      	mov	r0, r6
 800d692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d696:	89ab      	ldrh	r3, [r5, #12]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d907      	bls.n	800d6ac <_fwalk_sglue+0x38>
 800d69c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	d003      	beq.n	800d6ac <_fwalk_sglue+0x38>
 800d6a4:	4629      	mov	r1, r5
 800d6a6:	4638      	mov	r0, r7
 800d6a8:	47c0      	blx	r8
 800d6aa:	4306      	orrs	r6, r0
 800d6ac:	3568      	adds	r5, #104	@ 0x68
 800d6ae:	e7e9      	b.n	800d684 <_fwalk_sglue+0x10>

0800d6b0 <iprintf>:
 800d6b0:	b40f      	push	{r0, r1, r2, r3}
 800d6b2:	b507      	push	{r0, r1, r2, lr}
 800d6b4:	4906      	ldr	r1, [pc, #24]	@ (800d6d0 <iprintf+0x20>)
 800d6b6:	ab04      	add	r3, sp, #16
 800d6b8:	6808      	ldr	r0, [r1, #0]
 800d6ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6be:	6881      	ldr	r1, [r0, #8]
 800d6c0:	9301      	str	r3, [sp, #4]
 800d6c2:	f001 fe5d 	bl	800f380 <_vfiprintf_r>
 800d6c6:	b003      	add	sp, #12
 800d6c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6cc:	b004      	add	sp, #16
 800d6ce:	4770      	bx	lr
 800d6d0:	20000110 	.word	0x20000110

0800d6d4 <_puts_r>:
 800d6d4:	6a03      	ldr	r3, [r0, #32]
 800d6d6:	b570      	push	{r4, r5, r6, lr}
 800d6d8:	6884      	ldr	r4, [r0, #8]
 800d6da:	4605      	mov	r5, r0
 800d6dc:	460e      	mov	r6, r1
 800d6de:	b90b      	cbnz	r3, 800d6e4 <_puts_r+0x10>
 800d6e0:	f7ff ffb0 	bl	800d644 <__sinit>
 800d6e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6e6:	07db      	lsls	r3, r3, #31
 800d6e8:	d405      	bmi.n	800d6f6 <_puts_r+0x22>
 800d6ea:	89a3      	ldrh	r3, [r4, #12]
 800d6ec:	0598      	lsls	r0, r3, #22
 800d6ee:	d402      	bmi.n	800d6f6 <_puts_r+0x22>
 800d6f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6f2:	f000 f9de 	bl	800dab2 <__retarget_lock_acquire_recursive>
 800d6f6:	89a3      	ldrh	r3, [r4, #12]
 800d6f8:	0719      	lsls	r1, r3, #28
 800d6fa:	d502      	bpl.n	800d702 <_puts_r+0x2e>
 800d6fc:	6923      	ldr	r3, [r4, #16]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d135      	bne.n	800d76e <_puts_r+0x9a>
 800d702:	4621      	mov	r1, r4
 800d704:	4628      	mov	r0, r5
 800d706:	f000 f901 	bl	800d90c <__swsetup_r>
 800d70a:	b380      	cbz	r0, 800d76e <_puts_r+0x9a>
 800d70c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d710:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d712:	07da      	lsls	r2, r3, #31
 800d714:	d405      	bmi.n	800d722 <_puts_r+0x4e>
 800d716:	89a3      	ldrh	r3, [r4, #12]
 800d718:	059b      	lsls	r3, r3, #22
 800d71a:	d402      	bmi.n	800d722 <_puts_r+0x4e>
 800d71c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d71e:	f000 f9c9 	bl	800dab4 <__retarget_lock_release_recursive>
 800d722:	4628      	mov	r0, r5
 800d724:	bd70      	pop	{r4, r5, r6, pc}
 800d726:	2b00      	cmp	r3, #0
 800d728:	da04      	bge.n	800d734 <_puts_r+0x60>
 800d72a:	69a2      	ldr	r2, [r4, #24]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	dc17      	bgt.n	800d760 <_puts_r+0x8c>
 800d730:	290a      	cmp	r1, #10
 800d732:	d015      	beq.n	800d760 <_puts_r+0x8c>
 800d734:	6823      	ldr	r3, [r4, #0]
 800d736:	1c5a      	adds	r2, r3, #1
 800d738:	6022      	str	r2, [r4, #0]
 800d73a:	7019      	strb	r1, [r3, #0]
 800d73c:	68a3      	ldr	r3, [r4, #8]
 800d73e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d742:	3b01      	subs	r3, #1
 800d744:	60a3      	str	r3, [r4, #8]
 800d746:	2900      	cmp	r1, #0
 800d748:	d1ed      	bne.n	800d726 <_puts_r+0x52>
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	da11      	bge.n	800d772 <_puts_r+0x9e>
 800d74e:	4622      	mov	r2, r4
 800d750:	210a      	movs	r1, #10
 800d752:	4628      	mov	r0, r5
 800d754:	f000 f89c 	bl	800d890 <__swbuf_r>
 800d758:	3001      	adds	r0, #1
 800d75a:	d0d7      	beq.n	800d70c <_puts_r+0x38>
 800d75c:	250a      	movs	r5, #10
 800d75e:	e7d7      	b.n	800d710 <_puts_r+0x3c>
 800d760:	4622      	mov	r2, r4
 800d762:	4628      	mov	r0, r5
 800d764:	f000 f894 	bl	800d890 <__swbuf_r>
 800d768:	3001      	adds	r0, #1
 800d76a:	d1e7      	bne.n	800d73c <_puts_r+0x68>
 800d76c:	e7ce      	b.n	800d70c <_puts_r+0x38>
 800d76e:	3e01      	subs	r6, #1
 800d770:	e7e4      	b.n	800d73c <_puts_r+0x68>
 800d772:	6823      	ldr	r3, [r4, #0]
 800d774:	1c5a      	adds	r2, r3, #1
 800d776:	6022      	str	r2, [r4, #0]
 800d778:	220a      	movs	r2, #10
 800d77a:	701a      	strb	r2, [r3, #0]
 800d77c:	e7ee      	b.n	800d75c <_puts_r+0x88>
	...

0800d780 <puts>:
 800d780:	4b02      	ldr	r3, [pc, #8]	@ (800d78c <puts+0xc>)
 800d782:	4601      	mov	r1, r0
 800d784:	6818      	ldr	r0, [r3, #0]
 800d786:	f7ff bfa5 	b.w	800d6d4 <_puts_r>
 800d78a:	bf00      	nop
 800d78c:	20000110 	.word	0x20000110

0800d790 <__sread>:
 800d790:	b510      	push	{r4, lr}
 800d792:	460c      	mov	r4, r1
 800d794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d798:	f000 f93c 	bl	800da14 <_read_r>
 800d79c:	2800      	cmp	r0, #0
 800d79e:	bfab      	itete	ge
 800d7a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d7a2:	89a3      	ldrhlt	r3, [r4, #12]
 800d7a4:	181b      	addge	r3, r3, r0
 800d7a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d7aa:	bfac      	ite	ge
 800d7ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d7ae:	81a3      	strhlt	r3, [r4, #12]
 800d7b0:	bd10      	pop	{r4, pc}

0800d7b2 <__swrite>:
 800d7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b6:	461f      	mov	r7, r3
 800d7b8:	898b      	ldrh	r3, [r1, #12]
 800d7ba:	05db      	lsls	r3, r3, #23
 800d7bc:	4605      	mov	r5, r0
 800d7be:	460c      	mov	r4, r1
 800d7c0:	4616      	mov	r6, r2
 800d7c2:	d505      	bpl.n	800d7d0 <__swrite+0x1e>
 800d7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7c8:	2302      	movs	r3, #2
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f000 f910 	bl	800d9f0 <_lseek_r>
 800d7d0:	89a3      	ldrh	r3, [r4, #12]
 800d7d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d7da:	81a3      	strh	r3, [r4, #12]
 800d7dc:	4632      	mov	r2, r6
 800d7de:	463b      	mov	r3, r7
 800d7e0:	4628      	mov	r0, r5
 800d7e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7e6:	f000 b927 	b.w	800da38 <_write_r>

0800d7ea <__sseek>:
 800d7ea:	b510      	push	{r4, lr}
 800d7ec:	460c      	mov	r4, r1
 800d7ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7f2:	f000 f8fd 	bl	800d9f0 <_lseek_r>
 800d7f6:	1c43      	adds	r3, r0, #1
 800d7f8:	89a3      	ldrh	r3, [r4, #12]
 800d7fa:	bf15      	itete	ne
 800d7fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d7fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d802:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d806:	81a3      	strheq	r3, [r4, #12]
 800d808:	bf18      	it	ne
 800d80a:	81a3      	strhne	r3, [r4, #12]
 800d80c:	bd10      	pop	{r4, pc}

0800d80e <__sclose>:
 800d80e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d812:	f000 b8dd 	b.w	800d9d0 <_close_r>

0800d816 <_vsniprintf_r>:
 800d816:	b530      	push	{r4, r5, lr}
 800d818:	4614      	mov	r4, r2
 800d81a:	2c00      	cmp	r4, #0
 800d81c:	b09b      	sub	sp, #108	@ 0x6c
 800d81e:	4605      	mov	r5, r0
 800d820:	461a      	mov	r2, r3
 800d822:	da05      	bge.n	800d830 <_vsniprintf_r+0x1a>
 800d824:	238b      	movs	r3, #139	@ 0x8b
 800d826:	6003      	str	r3, [r0, #0]
 800d828:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d82c:	b01b      	add	sp, #108	@ 0x6c
 800d82e:	bd30      	pop	{r4, r5, pc}
 800d830:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d834:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d838:	f04f 0300 	mov.w	r3, #0
 800d83c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d83e:	bf14      	ite	ne
 800d840:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800d844:	4623      	moveq	r3, r4
 800d846:	9302      	str	r3, [sp, #8]
 800d848:	9305      	str	r3, [sp, #20]
 800d84a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d84e:	9100      	str	r1, [sp, #0]
 800d850:	9104      	str	r1, [sp, #16]
 800d852:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d856:	4669      	mov	r1, sp
 800d858:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d85a:	f001 fc6b 	bl	800f134 <_svfiprintf_r>
 800d85e:	1c43      	adds	r3, r0, #1
 800d860:	bfbc      	itt	lt
 800d862:	238b      	movlt	r3, #139	@ 0x8b
 800d864:	602b      	strlt	r3, [r5, #0]
 800d866:	2c00      	cmp	r4, #0
 800d868:	d0e0      	beq.n	800d82c <_vsniprintf_r+0x16>
 800d86a:	9b00      	ldr	r3, [sp, #0]
 800d86c:	2200      	movs	r2, #0
 800d86e:	701a      	strb	r2, [r3, #0]
 800d870:	e7dc      	b.n	800d82c <_vsniprintf_r+0x16>
	...

0800d874 <vsniprintf>:
 800d874:	b507      	push	{r0, r1, r2, lr}
 800d876:	9300      	str	r3, [sp, #0]
 800d878:	4613      	mov	r3, r2
 800d87a:	460a      	mov	r2, r1
 800d87c:	4601      	mov	r1, r0
 800d87e:	4803      	ldr	r0, [pc, #12]	@ (800d88c <vsniprintf+0x18>)
 800d880:	6800      	ldr	r0, [r0, #0]
 800d882:	f7ff ffc8 	bl	800d816 <_vsniprintf_r>
 800d886:	b003      	add	sp, #12
 800d888:	f85d fb04 	ldr.w	pc, [sp], #4
 800d88c:	20000110 	.word	0x20000110

0800d890 <__swbuf_r>:
 800d890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d892:	460e      	mov	r6, r1
 800d894:	4614      	mov	r4, r2
 800d896:	4605      	mov	r5, r0
 800d898:	b118      	cbz	r0, 800d8a2 <__swbuf_r+0x12>
 800d89a:	6a03      	ldr	r3, [r0, #32]
 800d89c:	b90b      	cbnz	r3, 800d8a2 <__swbuf_r+0x12>
 800d89e:	f7ff fed1 	bl	800d644 <__sinit>
 800d8a2:	69a3      	ldr	r3, [r4, #24]
 800d8a4:	60a3      	str	r3, [r4, #8]
 800d8a6:	89a3      	ldrh	r3, [r4, #12]
 800d8a8:	071a      	lsls	r2, r3, #28
 800d8aa:	d501      	bpl.n	800d8b0 <__swbuf_r+0x20>
 800d8ac:	6923      	ldr	r3, [r4, #16]
 800d8ae:	b943      	cbnz	r3, 800d8c2 <__swbuf_r+0x32>
 800d8b0:	4621      	mov	r1, r4
 800d8b2:	4628      	mov	r0, r5
 800d8b4:	f000 f82a 	bl	800d90c <__swsetup_r>
 800d8b8:	b118      	cbz	r0, 800d8c2 <__swbuf_r+0x32>
 800d8ba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d8be:	4638      	mov	r0, r7
 800d8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8c2:	6823      	ldr	r3, [r4, #0]
 800d8c4:	6922      	ldr	r2, [r4, #16]
 800d8c6:	1a98      	subs	r0, r3, r2
 800d8c8:	6963      	ldr	r3, [r4, #20]
 800d8ca:	b2f6      	uxtb	r6, r6
 800d8cc:	4283      	cmp	r3, r0
 800d8ce:	4637      	mov	r7, r6
 800d8d0:	dc05      	bgt.n	800d8de <__swbuf_r+0x4e>
 800d8d2:	4621      	mov	r1, r4
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	f001 feef 	bl	800f6b8 <_fflush_r>
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	d1ed      	bne.n	800d8ba <__swbuf_r+0x2a>
 800d8de:	68a3      	ldr	r3, [r4, #8]
 800d8e0:	3b01      	subs	r3, #1
 800d8e2:	60a3      	str	r3, [r4, #8]
 800d8e4:	6823      	ldr	r3, [r4, #0]
 800d8e6:	1c5a      	adds	r2, r3, #1
 800d8e8:	6022      	str	r2, [r4, #0]
 800d8ea:	701e      	strb	r6, [r3, #0]
 800d8ec:	6962      	ldr	r2, [r4, #20]
 800d8ee:	1c43      	adds	r3, r0, #1
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d004      	beq.n	800d8fe <__swbuf_r+0x6e>
 800d8f4:	89a3      	ldrh	r3, [r4, #12]
 800d8f6:	07db      	lsls	r3, r3, #31
 800d8f8:	d5e1      	bpl.n	800d8be <__swbuf_r+0x2e>
 800d8fa:	2e0a      	cmp	r6, #10
 800d8fc:	d1df      	bne.n	800d8be <__swbuf_r+0x2e>
 800d8fe:	4621      	mov	r1, r4
 800d900:	4628      	mov	r0, r5
 800d902:	f001 fed9 	bl	800f6b8 <_fflush_r>
 800d906:	2800      	cmp	r0, #0
 800d908:	d0d9      	beq.n	800d8be <__swbuf_r+0x2e>
 800d90a:	e7d6      	b.n	800d8ba <__swbuf_r+0x2a>

0800d90c <__swsetup_r>:
 800d90c:	b538      	push	{r3, r4, r5, lr}
 800d90e:	4b29      	ldr	r3, [pc, #164]	@ (800d9b4 <__swsetup_r+0xa8>)
 800d910:	4605      	mov	r5, r0
 800d912:	6818      	ldr	r0, [r3, #0]
 800d914:	460c      	mov	r4, r1
 800d916:	b118      	cbz	r0, 800d920 <__swsetup_r+0x14>
 800d918:	6a03      	ldr	r3, [r0, #32]
 800d91a:	b90b      	cbnz	r3, 800d920 <__swsetup_r+0x14>
 800d91c:	f7ff fe92 	bl	800d644 <__sinit>
 800d920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d924:	0719      	lsls	r1, r3, #28
 800d926:	d422      	bmi.n	800d96e <__swsetup_r+0x62>
 800d928:	06da      	lsls	r2, r3, #27
 800d92a:	d407      	bmi.n	800d93c <__swsetup_r+0x30>
 800d92c:	2209      	movs	r2, #9
 800d92e:	602a      	str	r2, [r5, #0]
 800d930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d934:	81a3      	strh	r3, [r4, #12]
 800d936:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d93a:	e033      	b.n	800d9a4 <__swsetup_r+0x98>
 800d93c:	0758      	lsls	r0, r3, #29
 800d93e:	d512      	bpl.n	800d966 <__swsetup_r+0x5a>
 800d940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d942:	b141      	cbz	r1, 800d956 <__swsetup_r+0x4a>
 800d944:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d948:	4299      	cmp	r1, r3
 800d94a:	d002      	beq.n	800d952 <__swsetup_r+0x46>
 800d94c:	4628      	mov	r0, r5
 800d94e:	f000 ff1b 	bl	800e788 <_free_r>
 800d952:	2300      	movs	r3, #0
 800d954:	6363      	str	r3, [r4, #52]	@ 0x34
 800d956:	89a3      	ldrh	r3, [r4, #12]
 800d958:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d95c:	81a3      	strh	r3, [r4, #12]
 800d95e:	2300      	movs	r3, #0
 800d960:	6063      	str	r3, [r4, #4]
 800d962:	6923      	ldr	r3, [r4, #16]
 800d964:	6023      	str	r3, [r4, #0]
 800d966:	89a3      	ldrh	r3, [r4, #12]
 800d968:	f043 0308 	orr.w	r3, r3, #8
 800d96c:	81a3      	strh	r3, [r4, #12]
 800d96e:	6923      	ldr	r3, [r4, #16]
 800d970:	b94b      	cbnz	r3, 800d986 <__swsetup_r+0x7a>
 800d972:	89a3      	ldrh	r3, [r4, #12]
 800d974:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d97c:	d003      	beq.n	800d986 <__swsetup_r+0x7a>
 800d97e:	4621      	mov	r1, r4
 800d980:	4628      	mov	r0, r5
 800d982:	f001 fee7 	bl	800f754 <__smakebuf_r>
 800d986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d98a:	f013 0201 	ands.w	r2, r3, #1
 800d98e:	d00a      	beq.n	800d9a6 <__swsetup_r+0x9a>
 800d990:	2200      	movs	r2, #0
 800d992:	60a2      	str	r2, [r4, #8]
 800d994:	6962      	ldr	r2, [r4, #20]
 800d996:	4252      	negs	r2, r2
 800d998:	61a2      	str	r2, [r4, #24]
 800d99a:	6922      	ldr	r2, [r4, #16]
 800d99c:	b942      	cbnz	r2, 800d9b0 <__swsetup_r+0xa4>
 800d99e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d9a2:	d1c5      	bne.n	800d930 <__swsetup_r+0x24>
 800d9a4:	bd38      	pop	{r3, r4, r5, pc}
 800d9a6:	0799      	lsls	r1, r3, #30
 800d9a8:	bf58      	it	pl
 800d9aa:	6962      	ldrpl	r2, [r4, #20]
 800d9ac:	60a2      	str	r2, [r4, #8]
 800d9ae:	e7f4      	b.n	800d99a <__swsetup_r+0x8e>
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	e7f7      	b.n	800d9a4 <__swsetup_r+0x98>
 800d9b4:	20000110 	.word	0x20000110

0800d9b8 <memset>:
 800d9b8:	4402      	add	r2, r0
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d100      	bne.n	800d9c2 <memset+0xa>
 800d9c0:	4770      	bx	lr
 800d9c2:	f803 1b01 	strb.w	r1, [r3], #1
 800d9c6:	e7f9      	b.n	800d9bc <memset+0x4>

0800d9c8 <_localeconv_r>:
 800d9c8:	4800      	ldr	r0, [pc, #0]	@ (800d9cc <_localeconv_r+0x4>)
 800d9ca:	4770      	bx	lr
 800d9cc:	20000250 	.word	0x20000250

0800d9d0 <_close_r>:
 800d9d0:	b538      	push	{r3, r4, r5, lr}
 800d9d2:	4d06      	ldr	r5, [pc, #24]	@ (800d9ec <_close_r+0x1c>)
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	4604      	mov	r4, r0
 800d9d8:	4608      	mov	r0, r1
 800d9da:	602b      	str	r3, [r5, #0]
 800d9dc:	f7f4 fb5a 	bl	8002094 <_close>
 800d9e0:	1c43      	adds	r3, r0, #1
 800d9e2:	d102      	bne.n	800d9ea <_close_r+0x1a>
 800d9e4:	682b      	ldr	r3, [r5, #0]
 800d9e6:	b103      	cbz	r3, 800d9ea <_close_r+0x1a>
 800d9e8:	6023      	str	r3, [r4, #0]
 800d9ea:	bd38      	pop	{r3, r4, r5, pc}
 800d9ec:	20002234 	.word	0x20002234

0800d9f0 <_lseek_r>:
 800d9f0:	b538      	push	{r3, r4, r5, lr}
 800d9f2:	4d07      	ldr	r5, [pc, #28]	@ (800da10 <_lseek_r+0x20>)
 800d9f4:	4604      	mov	r4, r0
 800d9f6:	4608      	mov	r0, r1
 800d9f8:	4611      	mov	r1, r2
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	602a      	str	r2, [r5, #0]
 800d9fe:	461a      	mov	r2, r3
 800da00:	f7f4 fb6f 	bl	80020e2 <_lseek>
 800da04:	1c43      	adds	r3, r0, #1
 800da06:	d102      	bne.n	800da0e <_lseek_r+0x1e>
 800da08:	682b      	ldr	r3, [r5, #0]
 800da0a:	b103      	cbz	r3, 800da0e <_lseek_r+0x1e>
 800da0c:	6023      	str	r3, [r4, #0]
 800da0e:	bd38      	pop	{r3, r4, r5, pc}
 800da10:	20002234 	.word	0x20002234

0800da14 <_read_r>:
 800da14:	b538      	push	{r3, r4, r5, lr}
 800da16:	4d07      	ldr	r5, [pc, #28]	@ (800da34 <_read_r+0x20>)
 800da18:	4604      	mov	r4, r0
 800da1a:	4608      	mov	r0, r1
 800da1c:	4611      	mov	r1, r2
 800da1e:	2200      	movs	r2, #0
 800da20:	602a      	str	r2, [r5, #0]
 800da22:	461a      	mov	r2, r3
 800da24:	f7f4 fafd 	bl	8002022 <_read>
 800da28:	1c43      	adds	r3, r0, #1
 800da2a:	d102      	bne.n	800da32 <_read_r+0x1e>
 800da2c:	682b      	ldr	r3, [r5, #0]
 800da2e:	b103      	cbz	r3, 800da32 <_read_r+0x1e>
 800da30:	6023      	str	r3, [r4, #0]
 800da32:	bd38      	pop	{r3, r4, r5, pc}
 800da34:	20002234 	.word	0x20002234

0800da38 <_write_r>:
 800da38:	b538      	push	{r3, r4, r5, lr}
 800da3a:	4d07      	ldr	r5, [pc, #28]	@ (800da58 <_write_r+0x20>)
 800da3c:	4604      	mov	r4, r0
 800da3e:	4608      	mov	r0, r1
 800da40:	4611      	mov	r1, r2
 800da42:	2200      	movs	r2, #0
 800da44:	602a      	str	r2, [r5, #0]
 800da46:	461a      	mov	r2, r3
 800da48:	f7f4 fb08 	bl	800205c <_write>
 800da4c:	1c43      	adds	r3, r0, #1
 800da4e:	d102      	bne.n	800da56 <_write_r+0x1e>
 800da50:	682b      	ldr	r3, [r5, #0]
 800da52:	b103      	cbz	r3, 800da56 <_write_r+0x1e>
 800da54:	6023      	str	r3, [r4, #0]
 800da56:	bd38      	pop	{r3, r4, r5, pc}
 800da58:	20002234 	.word	0x20002234

0800da5c <__errno>:
 800da5c:	4b01      	ldr	r3, [pc, #4]	@ (800da64 <__errno+0x8>)
 800da5e:	6818      	ldr	r0, [r3, #0]
 800da60:	4770      	bx	lr
 800da62:	bf00      	nop
 800da64:	20000110 	.word	0x20000110

0800da68 <__libc_init_array>:
 800da68:	b570      	push	{r4, r5, r6, lr}
 800da6a:	4d0d      	ldr	r5, [pc, #52]	@ (800daa0 <__libc_init_array+0x38>)
 800da6c:	4c0d      	ldr	r4, [pc, #52]	@ (800daa4 <__libc_init_array+0x3c>)
 800da6e:	1b64      	subs	r4, r4, r5
 800da70:	10a4      	asrs	r4, r4, #2
 800da72:	2600      	movs	r6, #0
 800da74:	42a6      	cmp	r6, r4
 800da76:	d109      	bne.n	800da8c <__libc_init_array+0x24>
 800da78:	4d0b      	ldr	r5, [pc, #44]	@ (800daa8 <__libc_init_array+0x40>)
 800da7a:	4c0c      	ldr	r4, [pc, #48]	@ (800daac <__libc_init_array+0x44>)
 800da7c:	f001 ffd8 	bl	800fa30 <_init>
 800da80:	1b64      	subs	r4, r4, r5
 800da82:	10a4      	asrs	r4, r4, #2
 800da84:	2600      	movs	r6, #0
 800da86:	42a6      	cmp	r6, r4
 800da88:	d105      	bne.n	800da96 <__libc_init_array+0x2e>
 800da8a:	bd70      	pop	{r4, r5, r6, pc}
 800da8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800da90:	4798      	blx	r3
 800da92:	3601      	adds	r6, #1
 800da94:	e7ee      	b.n	800da74 <__libc_init_array+0xc>
 800da96:	f855 3b04 	ldr.w	r3, [r5], #4
 800da9a:	4798      	blx	r3
 800da9c:	3601      	adds	r6, #1
 800da9e:	e7f2      	b.n	800da86 <__libc_init_array+0x1e>
 800daa0:	080101e4 	.word	0x080101e4
 800daa4:	080101e4 	.word	0x080101e4
 800daa8:	080101e4 	.word	0x080101e4
 800daac:	080101e8 	.word	0x080101e8

0800dab0 <__retarget_lock_init_recursive>:
 800dab0:	4770      	bx	lr

0800dab2 <__retarget_lock_acquire_recursive>:
 800dab2:	4770      	bx	lr

0800dab4 <__retarget_lock_release_recursive>:
 800dab4:	4770      	bx	lr

0800dab6 <memcpy>:
 800dab6:	440a      	add	r2, r1
 800dab8:	4291      	cmp	r1, r2
 800daba:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dabe:	d100      	bne.n	800dac2 <memcpy+0xc>
 800dac0:	4770      	bx	lr
 800dac2:	b510      	push	{r4, lr}
 800dac4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dac8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dacc:	4291      	cmp	r1, r2
 800dace:	d1f9      	bne.n	800dac4 <memcpy+0xe>
 800dad0:	bd10      	pop	{r4, pc}

0800dad2 <quorem>:
 800dad2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad6:	6903      	ldr	r3, [r0, #16]
 800dad8:	690c      	ldr	r4, [r1, #16]
 800dada:	42a3      	cmp	r3, r4
 800dadc:	4607      	mov	r7, r0
 800dade:	db7e      	blt.n	800dbde <quorem+0x10c>
 800dae0:	3c01      	subs	r4, #1
 800dae2:	f101 0814 	add.w	r8, r1, #20
 800dae6:	00a3      	lsls	r3, r4, #2
 800dae8:	f100 0514 	add.w	r5, r0, #20
 800daec:	9300      	str	r3, [sp, #0]
 800daee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800daf2:	9301      	str	r3, [sp, #4]
 800daf4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800daf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dafc:	3301      	adds	r3, #1
 800dafe:	429a      	cmp	r2, r3
 800db00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db04:	fbb2 f6f3 	udiv	r6, r2, r3
 800db08:	d32e      	bcc.n	800db68 <quorem+0x96>
 800db0a:	f04f 0a00 	mov.w	sl, #0
 800db0e:	46c4      	mov	ip, r8
 800db10:	46ae      	mov	lr, r5
 800db12:	46d3      	mov	fp, sl
 800db14:	f85c 3b04 	ldr.w	r3, [ip], #4
 800db18:	b298      	uxth	r0, r3
 800db1a:	fb06 a000 	mla	r0, r6, r0, sl
 800db1e:	0c02      	lsrs	r2, r0, #16
 800db20:	0c1b      	lsrs	r3, r3, #16
 800db22:	fb06 2303 	mla	r3, r6, r3, r2
 800db26:	f8de 2000 	ldr.w	r2, [lr]
 800db2a:	b280      	uxth	r0, r0
 800db2c:	b292      	uxth	r2, r2
 800db2e:	1a12      	subs	r2, r2, r0
 800db30:	445a      	add	r2, fp
 800db32:	f8de 0000 	ldr.w	r0, [lr]
 800db36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800db40:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800db44:	b292      	uxth	r2, r2
 800db46:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800db4a:	45e1      	cmp	r9, ip
 800db4c:	f84e 2b04 	str.w	r2, [lr], #4
 800db50:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800db54:	d2de      	bcs.n	800db14 <quorem+0x42>
 800db56:	9b00      	ldr	r3, [sp, #0]
 800db58:	58eb      	ldr	r3, [r5, r3]
 800db5a:	b92b      	cbnz	r3, 800db68 <quorem+0x96>
 800db5c:	9b01      	ldr	r3, [sp, #4]
 800db5e:	3b04      	subs	r3, #4
 800db60:	429d      	cmp	r5, r3
 800db62:	461a      	mov	r2, r3
 800db64:	d32f      	bcc.n	800dbc6 <quorem+0xf4>
 800db66:	613c      	str	r4, [r7, #16]
 800db68:	4638      	mov	r0, r7
 800db6a:	f001 f97f 	bl	800ee6c <__mcmp>
 800db6e:	2800      	cmp	r0, #0
 800db70:	db25      	blt.n	800dbbe <quorem+0xec>
 800db72:	4629      	mov	r1, r5
 800db74:	2000      	movs	r0, #0
 800db76:	f858 2b04 	ldr.w	r2, [r8], #4
 800db7a:	f8d1 c000 	ldr.w	ip, [r1]
 800db7e:	fa1f fe82 	uxth.w	lr, r2
 800db82:	fa1f f38c 	uxth.w	r3, ip
 800db86:	eba3 030e 	sub.w	r3, r3, lr
 800db8a:	4403      	add	r3, r0
 800db8c:	0c12      	lsrs	r2, r2, #16
 800db8e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800db92:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800db96:	b29b      	uxth	r3, r3
 800db98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db9c:	45c1      	cmp	r9, r8
 800db9e:	f841 3b04 	str.w	r3, [r1], #4
 800dba2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dba6:	d2e6      	bcs.n	800db76 <quorem+0xa4>
 800dba8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbb0:	b922      	cbnz	r2, 800dbbc <quorem+0xea>
 800dbb2:	3b04      	subs	r3, #4
 800dbb4:	429d      	cmp	r5, r3
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	d30b      	bcc.n	800dbd2 <quorem+0x100>
 800dbba:	613c      	str	r4, [r7, #16]
 800dbbc:	3601      	adds	r6, #1
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	b003      	add	sp, #12
 800dbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc6:	6812      	ldr	r2, [r2, #0]
 800dbc8:	3b04      	subs	r3, #4
 800dbca:	2a00      	cmp	r2, #0
 800dbcc:	d1cb      	bne.n	800db66 <quorem+0x94>
 800dbce:	3c01      	subs	r4, #1
 800dbd0:	e7c6      	b.n	800db60 <quorem+0x8e>
 800dbd2:	6812      	ldr	r2, [r2, #0]
 800dbd4:	3b04      	subs	r3, #4
 800dbd6:	2a00      	cmp	r2, #0
 800dbd8:	d1ef      	bne.n	800dbba <quorem+0xe8>
 800dbda:	3c01      	subs	r4, #1
 800dbdc:	e7ea      	b.n	800dbb4 <quorem+0xe2>
 800dbde:	2000      	movs	r0, #0
 800dbe0:	e7ee      	b.n	800dbc0 <quorem+0xee>
 800dbe2:	0000      	movs	r0, r0
 800dbe4:	0000      	movs	r0, r0
	...

0800dbe8 <_dtoa_r>:
 800dbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbec:	69c7      	ldr	r7, [r0, #28]
 800dbee:	b097      	sub	sp, #92	@ 0x5c
 800dbf0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800dbf4:	ec55 4b10 	vmov	r4, r5, d0
 800dbf8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dbfa:	9107      	str	r1, [sp, #28]
 800dbfc:	4681      	mov	r9, r0
 800dbfe:	920c      	str	r2, [sp, #48]	@ 0x30
 800dc00:	9311      	str	r3, [sp, #68]	@ 0x44
 800dc02:	b97f      	cbnz	r7, 800dc24 <_dtoa_r+0x3c>
 800dc04:	2010      	movs	r0, #16
 800dc06:	f000 fe09 	bl	800e81c <malloc>
 800dc0a:	4602      	mov	r2, r0
 800dc0c:	f8c9 001c 	str.w	r0, [r9, #28]
 800dc10:	b920      	cbnz	r0, 800dc1c <_dtoa_r+0x34>
 800dc12:	4ba9      	ldr	r3, [pc, #676]	@ (800deb8 <_dtoa_r+0x2d0>)
 800dc14:	21ef      	movs	r1, #239	@ 0xef
 800dc16:	48a9      	ldr	r0, [pc, #676]	@ (800debc <_dtoa_r+0x2d4>)
 800dc18:	f001 fe24 	bl	800f864 <__assert_func>
 800dc1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dc20:	6007      	str	r7, [r0, #0]
 800dc22:	60c7      	str	r7, [r0, #12]
 800dc24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dc28:	6819      	ldr	r1, [r3, #0]
 800dc2a:	b159      	cbz	r1, 800dc44 <_dtoa_r+0x5c>
 800dc2c:	685a      	ldr	r2, [r3, #4]
 800dc2e:	604a      	str	r2, [r1, #4]
 800dc30:	2301      	movs	r3, #1
 800dc32:	4093      	lsls	r3, r2
 800dc34:	608b      	str	r3, [r1, #8]
 800dc36:	4648      	mov	r0, r9
 800dc38:	f000 fee6 	bl	800ea08 <_Bfree>
 800dc3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dc40:	2200      	movs	r2, #0
 800dc42:	601a      	str	r2, [r3, #0]
 800dc44:	1e2b      	subs	r3, r5, #0
 800dc46:	bfb9      	ittee	lt
 800dc48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dc4c:	9305      	strlt	r3, [sp, #20]
 800dc4e:	2300      	movge	r3, #0
 800dc50:	6033      	strge	r3, [r6, #0]
 800dc52:	9f05      	ldr	r7, [sp, #20]
 800dc54:	4b9a      	ldr	r3, [pc, #616]	@ (800dec0 <_dtoa_r+0x2d8>)
 800dc56:	bfbc      	itt	lt
 800dc58:	2201      	movlt	r2, #1
 800dc5a:	6032      	strlt	r2, [r6, #0]
 800dc5c:	43bb      	bics	r3, r7
 800dc5e:	d112      	bne.n	800dc86 <_dtoa_r+0x9e>
 800dc60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dc62:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dc66:	6013      	str	r3, [r2, #0]
 800dc68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dc6c:	4323      	orrs	r3, r4
 800dc6e:	f000 855a 	beq.w	800e726 <_dtoa_r+0xb3e>
 800dc72:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dc74:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ded4 <_dtoa_r+0x2ec>
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	f000 855c 	beq.w	800e736 <_dtoa_r+0xb4e>
 800dc7e:	f10a 0303 	add.w	r3, sl, #3
 800dc82:	f000 bd56 	b.w	800e732 <_dtoa_r+0xb4a>
 800dc86:	ed9d 7b04 	vldr	d7, [sp, #16]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	ec51 0b17 	vmov	r0, r1, d7
 800dc90:	2300      	movs	r3, #0
 800dc92:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800dc96:	f7f2 ff1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc9a:	4680      	mov	r8, r0
 800dc9c:	b158      	cbz	r0, 800dcb6 <_dtoa_r+0xce>
 800dc9e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dca0:	2301      	movs	r3, #1
 800dca2:	6013      	str	r3, [r2, #0]
 800dca4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dca6:	b113      	cbz	r3, 800dcae <_dtoa_r+0xc6>
 800dca8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dcaa:	4b86      	ldr	r3, [pc, #536]	@ (800dec4 <_dtoa_r+0x2dc>)
 800dcac:	6013      	str	r3, [r2, #0]
 800dcae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ded8 <_dtoa_r+0x2f0>
 800dcb2:	f000 bd40 	b.w	800e736 <_dtoa_r+0xb4e>
 800dcb6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800dcba:	aa14      	add	r2, sp, #80	@ 0x50
 800dcbc:	a915      	add	r1, sp, #84	@ 0x54
 800dcbe:	4648      	mov	r0, r9
 800dcc0:	f001 f984 	bl	800efcc <__d2b>
 800dcc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dcc8:	9002      	str	r0, [sp, #8]
 800dcca:	2e00      	cmp	r6, #0
 800dccc:	d078      	beq.n	800ddc0 <_dtoa_r+0x1d8>
 800dcce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcd0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800dcd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dcdc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dce0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dce4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dce8:	4619      	mov	r1, r3
 800dcea:	2200      	movs	r2, #0
 800dcec:	4b76      	ldr	r3, [pc, #472]	@ (800dec8 <_dtoa_r+0x2e0>)
 800dcee:	f7f2 fad3 	bl	8000298 <__aeabi_dsub>
 800dcf2:	a36b      	add	r3, pc, #428	@ (adr r3, 800dea0 <_dtoa_r+0x2b8>)
 800dcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf8:	f7f2 fc86 	bl	8000608 <__aeabi_dmul>
 800dcfc:	a36a      	add	r3, pc, #424	@ (adr r3, 800dea8 <_dtoa_r+0x2c0>)
 800dcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd02:	f7f2 facb 	bl	800029c <__adddf3>
 800dd06:	4604      	mov	r4, r0
 800dd08:	4630      	mov	r0, r6
 800dd0a:	460d      	mov	r5, r1
 800dd0c:	f7f2 fc12 	bl	8000534 <__aeabi_i2d>
 800dd10:	a367      	add	r3, pc, #412	@ (adr r3, 800deb0 <_dtoa_r+0x2c8>)
 800dd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd16:	f7f2 fc77 	bl	8000608 <__aeabi_dmul>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	4620      	mov	r0, r4
 800dd20:	4629      	mov	r1, r5
 800dd22:	f7f2 fabb 	bl	800029c <__adddf3>
 800dd26:	4604      	mov	r4, r0
 800dd28:	460d      	mov	r5, r1
 800dd2a:	f7f2 ff1d 	bl	8000b68 <__aeabi_d2iz>
 800dd2e:	2200      	movs	r2, #0
 800dd30:	4607      	mov	r7, r0
 800dd32:	2300      	movs	r3, #0
 800dd34:	4620      	mov	r0, r4
 800dd36:	4629      	mov	r1, r5
 800dd38:	f7f2 fed8 	bl	8000aec <__aeabi_dcmplt>
 800dd3c:	b140      	cbz	r0, 800dd50 <_dtoa_r+0x168>
 800dd3e:	4638      	mov	r0, r7
 800dd40:	f7f2 fbf8 	bl	8000534 <__aeabi_i2d>
 800dd44:	4622      	mov	r2, r4
 800dd46:	462b      	mov	r3, r5
 800dd48:	f7f2 fec6 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd4c:	b900      	cbnz	r0, 800dd50 <_dtoa_r+0x168>
 800dd4e:	3f01      	subs	r7, #1
 800dd50:	2f16      	cmp	r7, #22
 800dd52:	d852      	bhi.n	800ddfa <_dtoa_r+0x212>
 800dd54:	4b5d      	ldr	r3, [pc, #372]	@ (800decc <_dtoa_r+0x2e4>)
 800dd56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dd62:	f7f2 fec3 	bl	8000aec <__aeabi_dcmplt>
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d049      	beq.n	800ddfe <_dtoa_r+0x216>
 800dd6a:	3f01      	subs	r7, #1
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	9310      	str	r3, [sp, #64]	@ 0x40
 800dd70:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dd72:	1b9b      	subs	r3, r3, r6
 800dd74:	1e5a      	subs	r2, r3, #1
 800dd76:	bf45      	ittet	mi
 800dd78:	f1c3 0301 	rsbmi	r3, r3, #1
 800dd7c:	9300      	strmi	r3, [sp, #0]
 800dd7e:	2300      	movpl	r3, #0
 800dd80:	2300      	movmi	r3, #0
 800dd82:	9206      	str	r2, [sp, #24]
 800dd84:	bf54      	ite	pl
 800dd86:	9300      	strpl	r3, [sp, #0]
 800dd88:	9306      	strmi	r3, [sp, #24]
 800dd8a:	2f00      	cmp	r7, #0
 800dd8c:	db39      	blt.n	800de02 <_dtoa_r+0x21a>
 800dd8e:	9b06      	ldr	r3, [sp, #24]
 800dd90:	970d      	str	r7, [sp, #52]	@ 0x34
 800dd92:	443b      	add	r3, r7
 800dd94:	9306      	str	r3, [sp, #24]
 800dd96:	2300      	movs	r3, #0
 800dd98:	9308      	str	r3, [sp, #32]
 800dd9a:	9b07      	ldr	r3, [sp, #28]
 800dd9c:	2b09      	cmp	r3, #9
 800dd9e:	d863      	bhi.n	800de68 <_dtoa_r+0x280>
 800dda0:	2b05      	cmp	r3, #5
 800dda2:	bfc4      	itt	gt
 800dda4:	3b04      	subgt	r3, #4
 800dda6:	9307      	strgt	r3, [sp, #28]
 800dda8:	9b07      	ldr	r3, [sp, #28]
 800ddaa:	f1a3 0302 	sub.w	r3, r3, #2
 800ddae:	bfcc      	ite	gt
 800ddb0:	2400      	movgt	r4, #0
 800ddb2:	2401      	movle	r4, #1
 800ddb4:	2b03      	cmp	r3, #3
 800ddb6:	d863      	bhi.n	800de80 <_dtoa_r+0x298>
 800ddb8:	e8df f003 	tbb	[pc, r3]
 800ddbc:	2b375452 	.word	0x2b375452
 800ddc0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ddc4:	441e      	add	r6, r3
 800ddc6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ddca:	2b20      	cmp	r3, #32
 800ddcc:	bfc1      	itttt	gt
 800ddce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ddd2:	409f      	lslgt	r7, r3
 800ddd4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ddd8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dddc:	bfd6      	itet	le
 800ddde:	f1c3 0320 	rsble	r3, r3, #32
 800dde2:	ea47 0003 	orrgt.w	r0, r7, r3
 800dde6:	fa04 f003 	lslle.w	r0, r4, r3
 800ddea:	f7f2 fb93 	bl	8000514 <__aeabi_ui2d>
 800ddee:	2201      	movs	r2, #1
 800ddf0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ddf4:	3e01      	subs	r6, #1
 800ddf6:	9212      	str	r2, [sp, #72]	@ 0x48
 800ddf8:	e776      	b.n	800dce8 <_dtoa_r+0x100>
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	e7b7      	b.n	800dd6e <_dtoa_r+0x186>
 800ddfe:	9010      	str	r0, [sp, #64]	@ 0x40
 800de00:	e7b6      	b.n	800dd70 <_dtoa_r+0x188>
 800de02:	9b00      	ldr	r3, [sp, #0]
 800de04:	1bdb      	subs	r3, r3, r7
 800de06:	9300      	str	r3, [sp, #0]
 800de08:	427b      	negs	r3, r7
 800de0a:	9308      	str	r3, [sp, #32]
 800de0c:	2300      	movs	r3, #0
 800de0e:	930d      	str	r3, [sp, #52]	@ 0x34
 800de10:	e7c3      	b.n	800dd9a <_dtoa_r+0x1b2>
 800de12:	2301      	movs	r3, #1
 800de14:	9309      	str	r3, [sp, #36]	@ 0x24
 800de16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de18:	eb07 0b03 	add.w	fp, r7, r3
 800de1c:	f10b 0301 	add.w	r3, fp, #1
 800de20:	2b01      	cmp	r3, #1
 800de22:	9303      	str	r3, [sp, #12]
 800de24:	bfb8      	it	lt
 800de26:	2301      	movlt	r3, #1
 800de28:	e006      	b.n	800de38 <_dtoa_r+0x250>
 800de2a:	2301      	movs	r3, #1
 800de2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800de2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de30:	2b00      	cmp	r3, #0
 800de32:	dd28      	ble.n	800de86 <_dtoa_r+0x29e>
 800de34:	469b      	mov	fp, r3
 800de36:	9303      	str	r3, [sp, #12]
 800de38:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800de3c:	2100      	movs	r1, #0
 800de3e:	2204      	movs	r2, #4
 800de40:	f102 0514 	add.w	r5, r2, #20
 800de44:	429d      	cmp	r5, r3
 800de46:	d926      	bls.n	800de96 <_dtoa_r+0x2ae>
 800de48:	6041      	str	r1, [r0, #4]
 800de4a:	4648      	mov	r0, r9
 800de4c:	f000 fd9c 	bl	800e988 <_Balloc>
 800de50:	4682      	mov	sl, r0
 800de52:	2800      	cmp	r0, #0
 800de54:	d142      	bne.n	800dedc <_dtoa_r+0x2f4>
 800de56:	4b1e      	ldr	r3, [pc, #120]	@ (800ded0 <_dtoa_r+0x2e8>)
 800de58:	4602      	mov	r2, r0
 800de5a:	f240 11af 	movw	r1, #431	@ 0x1af
 800de5e:	e6da      	b.n	800dc16 <_dtoa_r+0x2e>
 800de60:	2300      	movs	r3, #0
 800de62:	e7e3      	b.n	800de2c <_dtoa_r+0x244>
 800de64:	2300      	movs	r3, #0
 800de66:	e7d5      	b.n	800de14 <_dtoa_r+0x22c>
 800de68:	2401      	movs	r4, #1
 800de6a:	2300      	movs	r3, #0
 800de6c:	9307      	str	r3, [sp, #28]
 800de6e:	9409      	str	r4, [sp, #36]	@ 0x24
 800de70:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800de74:	2200      	movs	r2, #0
 800de76:	f8cd b00c 	str.w	fp, [sp, #12]
 800de7a:	2312      	movs	r3, #18
 800de7c:	920c      	str	r2, [sp, #48]	@ 0x30
 800de7e:	e7db      	b.n	800de38 <_dtoa_r+0x250>
 800de80:	2301      	movs	r3, #1
 800de82:	9309      	str	r3, [sp, #36]	@ 0x24
 800de84:	e7f4      	b.n	800de70 <_dtoa_r+0x288>
 800de86:	f04f 0b01 	mov.w	fp, #1
 800de8a:	f8cd b00c 	str.w	fp, [sp, #12]
 800de8e:	465b      	mov	r3, fp
 800de90:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800de94:	e7d0      	b.n	800de38 <_dtoa_r+0x250>
 800de96:	3101      	adds	r1, #1
 800de98:	0052      	lsls	r2, r2, #1
 800de9a:	e7d1      	b.n	800de40 <_dtoa_r+0x258>
 800de9c:	f3af 8000 	nop.w
 800dea0:	636f4361 	.word	0x636f4361
 800dea4:	3fd287a7 	.word	0x3fd287a7
 800dea8:	8b60c8b3 	.word	0x8b60c8b3
 800deac:	3fc68a28 	.word	0x3fc68a28
 800deb0:	509f79fb 	.word	0x509f79fb
 800deb4:	3fd34413 	.word	0x3fd34413
 800deb8:	0800fea7 	.word	0x0800fea7
 800debc:	0800febe 	.word	0x0800febe
 800dec0:	7ff00000 	.word	0x7ff00000
 800dec4:	0800fe77 	.word	0x0800fe77
 800dec8:	3ff80000 	.word	0x3ff80000
 800decc:	08010010 	.word	0x08010010
 800ded0:	0800ff16 	.word	0x0800ff16
 800ded4:	0800fea3 	.word	0x0800fea3
 800ded8:	0800fe76 	.word	0x0800fe76
 800dedc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dee0:	6018      	str	r0, [r3, #0]
 800dee2:	9b03      	ldr	r3, [sp, #12]
 800dee4:	2b0e      	cmp	r3, #14
 800dee6:	f200 80a1 	bhi.w	800e02c <_dtoa_r+0x444>
 800deea:	2c00      	cmp	r4, #0
 800deec:	f000 809e 	beq.w	800e02c <_dtoa_r+0x444>
 800def0:	2f00      	cmp	r7, #0
 800def2:	dd33      	ble.n	800df5c <_dtoa_r+0x374>
 800def4:	4b9c      	ldr	r3, [pc, #624]	@ (800e168 <_dtoa_r+0x580>)
 800def6:	f007 020f 	and.w	r2, r7, #15
 800defa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800defe:	ed93 7b00 	vldr	d7, [r3]
 800df02:	05f8      	lsls	r0, r7, #23
 800df04:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800df08:	ea4f 1427 	mov.w	r4, r7, asr #4
 800df0c:	d516      	bpl.n	800df3c <_dtoa_r+0x354>
 800df0e:	4b97      	ldr	r3, [pc, #604]	@ (800e16c <_dtoa_r+0x584>)
 800df10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800df14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df18:	f7f2 fca0 	bl	800085c <__aeabi_ddiv>
 800df1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df20:	f004 040f 	and.w	r4, r4, #15
 800df24:	2603      	movs	r6, #3
 800df26:	4d91      	ldr	r5, [pc, #580]	@ (800e16c <_dtoa_r+0x584>)
 800df28:	b954      	cbnz	r4, 800df40 <_dtoa_r+0x358>
 800df2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800df2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df32:	f7f2 fc93 	bl	800085c <__aeabi_ddiv>
 800df36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df3a:	e028      	b.n	800df8e <_dtoa_r+0x3a6>
 800df3c:	2602      	movs	r6, #2
 800df3e:	e7f2      	b.n	800df26 <_dtoa_r+0x33e>
 800df40:	07e1      	lsls	r1, r4, #31
 800df42:	d508      	bpl.n	800df56 <_dtoa_r+0x36e>
 800df44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800df48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df4c:	f7f2 fb5c 	bl	8000608 <__aeabi_dmul>
 800df50:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800df54:	3601      	adds	r6, #1
 800df56:	1064      	asrs	r4, r4, #1
 800df58:	3508      	adds	r5, #8
 800df5a:	e7e5      	b.n	800df28 <_dtoa_r+0x340>
 800df5c:	f000 80af 	beq.w	800e0be <_dtoa_r+0x4d6>
 800df60:	427c      	negs	r4, r7
 800df62:	4b81      	ldr	r3, [pc, #516]	@ (800e168 <_dtoa_r+0x580>)
 800df64:	4d81      	ldr	r5, [pc, #516]	@ (800e16c <_dtoa_r+0x584>)
 800df66:	f004 020f 	and.w	r2, r4, #15
 800df6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800df76:	f7f2 fb47 	bl	8000608 <__aeabi_dmul>
 800df7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df7e:	1124      	asrs	r4, r4, #4
 800df80:	2300      	movs	r3, #0
 800df82:	2602      	movs	r6, #2
 800df84:	2c00      	cmp	r4, #0
 800df86:	f040 808f 	bne.w	800e0a8 <_dtoa_r+0x4c0>
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d1d3      	bne.n	800df36 <_dtoa_r+0x34e>
 800df8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800df90:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800df94:	2b00      	cmp	r3, #0
 800df96:	f000 8094 	beq.w	800e0c2 <_dtoa_r+0x4da>
 800df9a:	4b75      	ldr	r3, [pc, #468]	@ (800e170 <_dtoa_r+0x588>)
 800df9c:	2200      	movs	r2, #0
 800df9e:	4620      	mov	r0, r4
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	f7f2 fda3 	bl	8000aec <__aeabi_dcmplt>
 800dfa6:	2800      	cmp	r0, #0
 800dfa8:	f000 808b 	beq.w	800e0c2 <_dtoa_r+0x4da>
 800dfac:	9b03      	ldr	r3, [sp, #12]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	f000 8087 	beq.w	800e0c2 <_dtoa_r+0x4da>
 800dfb4:	f1bb 0f00 	cmp.w	fp, #0
 800dfb8:	dd34      	ble.n	800e024 <_dtoa_r+0x43c>
 800dfba:	4620      	mov	r0, r4
 800dfbc:	4b6d      	ldr	r3, [pc, #436]	@ (800e174 <_dtoa_r+0x58c>)
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	4629      	mov	r1, r5
 800dfc2:	f7f2 fb21 	bl	8000608 <__aeabi_dmul>
 800dfc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dfca:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800dfce:	3601      	adds	r6, #1
 800dfd0:	465c      	mov	r4, fp
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	f7f2 faae 	bl	8000534 <__aeabi_i2d>
 800dfd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfdc:	f7f2 fb14 	bl	8000608 <__aeabi_dmul>
 800dfe0:	4b65      	ldr	r3, [pc, #404]	@ (800e178 <_dtoa_r+0x590>)
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	f7f2 f95a 	bl	800029c <__adddf3>
 800dfe8:	4605      	mov	r5, r0
 800dfea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800dfee:	2c00      	cmp	r4, #0
 800dff0:	d16a      	bne.n	800e0c8 <_dtoa_r+0x4e0>
 800dff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dff6:	4b61      	ldr	r3, [pc, #388]	@ (800e17c <_dtoa_r+0x594>)
 800dff8:	2200      	movs	r2, #0
 800dffa:	f7f2 f94d 	bl	8000298 <__aeabi_dsub>
 800dffe:	4602      	mov	r2, r0
 800e000:	460b      	mov	r3, r1
 800e002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e006:	462a      	mov	r2, r5
 800e008:	4633      	mov	r3, r6
 800e00a:	f7f2 fd8d 	bl	8000b28 <__aeabi_dcmpgt>
 800e00e:	2800      	cmp	r0, #0
 800e010:	f040 8298 	bne.w	800e544 <_dtoa_r+0x95c>
 800e014:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e018:	462a      	mov	r2, r5
 800e01a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e01e:	f7f2 fd65 	bl	8000aec <__aeabi_dcmplt>
 800e022:	bb38      	cbnz	r0, 800e074 <_dtoa_r+0x48c>
 800e024:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e028:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e02c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e02e:	2b00      	cmp	r3, #0
 800e030:	f2c0 8157 	blt.w	800e2e2 <_dtoa_r+0x6fa>
 800e034:	2f0e      	cmp	r7, #14
 800e036:	f300 8154 	bgt.w	800e2e2 <_dtoa_r+0x6fa>
 800e03a:	4b4b      	ldr	r3, [pc, #300]	@ (800e168 <_dtoa_r+0x580>)
 800e03c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e040:	ed93 7b00 	vldr	d7, [r3]
 800e044:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e046:	2b00      	cmp	r3, #0
 800e048:	ed8d 7b00 	vstr	d7, [sp]
 800e04c:	f280 80e5 	bge.w	800e21a <_dtoa_r+0x632>
 800e050:	9b03      	ldr	r3, [sp, #12]
 800e052:	2b00      	cmp	r3, #0
 800e054:	f300 80e1 	bgt.w	800e21a <_dtoa_r+0x632>
 800e058:	d10c      	bne.n	800e074 <_dtoa_r+0x48c>
 800e05a:	4b48      	ldr	r3, [pc, #288]	@ (800e17c <_dtoa_r+0x594>)
 800e05c:	2200      	movs	r2, #0
 800e05e:	ec51 0b17 	vmov	r0, r1, d7
 800e062:	f7f2 fad1 	bl	8000608 <__aeabi_dmul>
 800e066:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e06a:	f7f2 fd53 	bl	8000b14 <__aeabi_dcmpge>
 800e06e:	2800      	cmp	r0, #0
 800e070:	f000 8266 	beq.w	800e540 <_dtoa_r+0x958>
 800e074:	2400      	movs	r4, #0
 800e076:	4625      	mov	r5, r4
 800e078:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e07a:	4656      	mov	r6, sl
 800e07c:	ea6f 0803 	mvn.w	r8, r3
 800e080:	2700      	movs	r7, #0
 800e082:	4621      	mov	r1, r4
 800e084:	4648      	mov	r0, r9
 800e086:	f000 fcbf 	bl	800ea08 <_Bfree>
 800e08a:	2d00      	cmp	r5, #0
 800e08c:	f000 80bd 	beq.w	800e20a <_dtoa_r+0x622>
 800e090:	b12f      	cbz	r7, 800e09e <_dtoa_r+0x4b6>
 800e092:	42af      	cmp	r7, r5
 800e094:	d003      	beq.n	800e09e <_dtoa_r+0x4b6>
 800e096:	4639      	mov	r1, r7
 800e098:	4648      	mov	r0, r9
 800e09a:	f000 fcb5 	bl	800ea08 <_Bfree>
 800e09e:	4629      	mov	r1, r5
 800e0a0:	4648      	mov	r0, r9
 800e0a2:	f000 fcb1 	bl	800ea08 <_Bfree>
 800e0a6:	e0b0      	b.n	800e20a <_dtoa_r+0x622>
 800e0a8:	07e2      	lsls	r2, r4, #31
 800e0aa:	d505      	bpl.n	800e0b8 <_dtoa_r+0x4d0>
 800e0ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e0b0:	f7f2 faaa 	bl	8000608 <__aeabi_dmul>
 800e0b4:	3601      	adds	r6, #1
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	1064      	asrs	r4, r4, #1
 800e0ba:	3508      	adds	r5, #8
 800e0bc:	e762      	b.n	800df84 <_dtoa_r+0x39c>
 800e0be:	2602      	movs	r6, #2
 800e0c0:	e765      	b.n	800df8e <_dtoa_r+0x3a6>
 800e0c2:	9c03      	ldr	r4, [sp, #12]
 800e0c4:	46b8      	mov	r8, r7
 800e0c6:	e784      	b.n	800dfd2 <_dtoa_r+0x3ea>
 800e0c8:	4b27      	ldr	r3, [pc, #156]	@ (800e168 <_dtoa_r+0x580>)
 800e0ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e0cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e0d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e0d4:	4454      	add	r4, sl
 800e0d6:	2900      	cmp	r1, #0
 800e0d8:	d054      	beq.n	800e184 <_dtoa_r+0x59c>
 800e0da:	4929      	ldr	r1, [pc, #164]	@ (800e180 <_dtoa_r+0x598>)
 800e0dc:	2000      	movs	r0, #0
 800e0de:	f7f2 fbbd 	bl	800085c <__aeabi_ddiv>
 800e0e2:	4633      	mov	r3, r6
 800e0e4:	462a      	mov	r2, r5
 800e0e6:	f7f2 f8d7 	bl	8000298 <__aeabi_dsub>
 800e0ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e0ee:	4656      	mov	r6, sl
 800e0f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e0f4:	f7f2 fd38 	bl	8000b68 <__aeabi_d2iz>
 800e0f8:	4605      	mov	r5, r0
 800e0fa:	f7f2 fa1b 	bl	8000534 <__aeabi_i2d>
 800e0fe:	4602      	mov	r2, r0
 800e100:	460b      	mov	r3, r1
 800e102:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e106:	f7f2 f8c7 	bl	8000298 <__aeabi_dsub>
 800e10a:	3530      	adds	r5, #48	@ 0x30
 800e10c:	4602      	mov	r2, r0
 800e10e:	460b      	mov	r3, r1
 800e110:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e114:	f806 5b01 	strb.w	r5, [r6], #1
 800e118:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e11c:	f7f2 fce6 	bl	8000aec <__aeabi_dcmplt>
 800e120:	2800      	cmp	r0, #0
 800e122:	d172      	bne.n	800e20a <_dtoa_r+0x622>
 800e124:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e128:	4911      	ldr	r1, [pc, #68]	@ (800e170 <_dtoa_r+0x588>)
 800e12a:	2000      	movs	r0, #0
 800e12c:	f7f2 f8b4 	bl	8000298 <__aeabi_dsub>
 800e130:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e134:	f7f2 fcda 	bl	8000aec <__aeabi_dcmplt>
 800e138:	2800      	cmp	r0, #0
 800e13a:	f040 80b4 	bne.w	800e2a6 <_dtoa_r+0x6be>
 800e13e:	42a6      	cmp	r6, r4
 800e140:	f43f af70 	beq.w	800e024 <_dtoa_r+0x43c>
 800e144:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e148:	4b0a      	ldr	r3, [pc, #40]	@ (800e174 <_dtoa_r+0x58c>)
 800e14a:	2200      	movs	r2, #0
 800e14c:	f7f2 fa5c 	bl	8000608 <__aeabi_dmul>
 800e150:	4b08      	ldr	r3, [pc, #32]	@ (800e174 <_dtoa_r+0x58c>)
 800e152:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e156:	2200      	movs	r2, #0
 800e158:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e15c:	f7f2 fa54 	bl	8000608 <__aeabi_dmul>
 800e160:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e164:	e7c4      	b.n	800e0f0 <_dtoa_r+0x508>
 800e166:	bf00      	nop
 800e168:	08010010 	.word	0x08010010
 800e16c:	0800ffe8 	.word	0x0800ffe8
 800e170:	3ff00000 	.word	0x3ff00000
 800e174:	40240000 	.word	0x40240000
 800e178:	401c0000 	.word	0x401c0000
 800e17c:	40140000 	.word	0x40140000
 800e180:	3fe00000 	.word	0x3fe00000
 800e184:	4631      	mov	r1, r6
 800e186:	4628      	mov	r0, r5
 800e188:	f7f2 fa3e 	bl	8000608 <__aeabi_dmul>
 800e18c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e190:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e192:	4656      	mov	r6, sl
 800e194:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e198:	f7f2 fce6 	bl	8000b68 <__aeabi_d2iz>
 800e19c:	4605      	mov	r5, r0
 800e19e:	f7f2 f9c9 	bl	8000534 <__aeabi_i2d>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1aa:	f7f2 f875 	bl	8000298 <__aeabi_dsub>
 800e1ae:	3530      	adds	r5, #48	@ 0x30
 800e1b0:	f806 5b01 	strb.w	r5, [r6], #1
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	42a6      	cmp	r6, r4
 800e1ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e1be:	f04f 0200 	mov.w	r2, #0
 800e1c2:	d124      	bne.n	800e20e <_dtoa_r+0x626>
 800e1c4:	4baf      	ldr	r3, [pc, #700]	@ (800e484 <_dtoa_r+0x89c>)
 800e1c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e1ca:	f7f2 f867 	bl	800029c <__adddf3>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1d6:	f7f2 fca7 	bl	8000b28 <__aeabi_dcmpgt>
 800e1da:	2800      	cmp	r0, #0
 800e1dc:	d163      	bne.n	800e2a6 <_dtoa_r+0x6be>
 800e1de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e1e2:	49a8      	ldr	r1, [pc, #672]	@ (800e484 <_dtoa_r+0x89c>)
 800e1e4:	2000      	movs	r0, #0
 800e1e6:	f7f2 f857 	bl	8000298 <__aeabi_dsub>
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1f2:	f7f2 fc7b 	bl	8000aec <__aeabi_dcmplt>
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	f43f af14 	beq.w	800e024 <_dtoa_r+0x43c>
 800e1fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e1fe:	1e73      	subs	r3, r6, #1
 800e200:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e202:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e206:	2b30      	cmp	r3, #48	@ 0x30
 800e208:	d0f8      	beq.n	800e1fc <_dtoa_r+0x614>
 800e20a:	4647      	mov	r7, r8
 800e20c:	e03b      	b.n	800e286 <_dtoa_r+0x69e>
 800e20e:	4b9e      	ldr	r3, [pc, #632]	@ (800e488 <_dtoa_r+0x8a0>)
 800e210:	f7f2 f9fa 	bl	8000608 <__aeabi_dmul>
 800e214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e218:	e7bc      	b.n	800e194 <_dtoa_r+0x5ac>
 800e21a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e21e:	4656      	mov	r6, sl
 800e220:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e224:	4620      	mov	r0, r4
 800e226:	4629      	mov	r1, r5
 800e228:	f7f2 fb18 	bl	800085c <__aeabi_ddiv>
 800e22c:	f7f2 fc9c 	bl	8000b68 <__aeabi_d2iz>
 800e230:	4680      	mov	r8, r0
 800e232:	f7f2 f97f 	bl	8000534 <__aeabi_i2d>
 800e236:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e23a:	f7f2 f9e5 	bl	8000608 <__aeabi_dmul>
 800e23e:	4602      	mov	r2, r0
 800e240:	460b      	mov	r3, r1
 800e242:	4620      	mov	r0, r4
 800e244:	4629      	mov	r1, r5
 800e246:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e24a:	f7f2 f825 	bl	8000298 <__aeabi_dsub>
 800e24e:	f806 4b01 	strb.w	r4, [r6], #1
 800e252:	9d03      	ldr	r5, [sp, #12]
 800e254:	eba6 040a 	sub.w	r4, r6, sl
 800e258:	42a5      	cmp	r5, r4
 800e25a:	4602      	mov	r2, r0
 800e25c:	460b      	mov	r3, r1
 800e25e:	d133      	bne.n	800e2c8 <_dtoa_r+0x6e0>
 800e260:	f7f2 f81c 	bl	800029c <__adddf3>
 800e264:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e268:	4604      	mov	r4, r0
 800e26a:	460d      	mov	r5, r1
 800e26c:	f7f2 fc5c 	bl	8000b28 <__aeabi_dcmpgt>
 800e270:	b9c0      	cbnz	r0, 800e2a4 <_dtoa_r+0x6bc>
 800e272:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e276:	4620      	mov	r0, r4
 800e278:	4629      	mov	r1, r5
 800e27a:	f7f2 fc2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e27e:	b110      	cbz	r0, 800e286 <_dtoa_r+0x69e>
 800e280:	f018 0f01 	tst.w	r8, #1
 800e284:	d10e      	bne.n	800e2a4 <_dtoa_r+0x6bc>
 800e286:	9902      	ldr	r1, [sp, #8]
 800e288:	4648      	mov	r0, r9
 800e28a:	f000 fbbd 	bl	800ea08 <_Bfree>
 800e28e:	2300      	movs	r3, #0
 800e290:	7033      	strb	r3, [r6, #0]
 800e292:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e294:	3701      	adds	r7, #1
 800e296:	601f      	str	r7, [r3, #0]
 800e298:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	f000 824b 	beq.w	800e736 <_dtoa_r+0xb4e>
 800e2a0:	601e      	str	r6, [r3, #0]
 800e2a2:	e248      	b.n	800e736 <_dtoa_r+0xb4e>
 800e2a4:	46b8      	mov	r8, r7
 800e2a6:	4633      	mov	r3, r6
 800e2a8:	461e      	mov	r6, r3
 800e2aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2ae:	2a39      	cmp	r2, #57	@ 0x39
 800e2b0:	d106      	bne.n	800e2c0 <_dtoa_r+0x6d8>
 800e2b2:	459a      	cmp	sl, r3
 800e2b4:	d1f8      	bne.n	800e2a8 <_dtoa_r+0x6c0>
 800e2b6:	2230      	movs	r2, #48	@ 0x30
 800e2b8:	f108 0801 	add.w	r8, r8, #1
 800e2bc:	f88a 2000 	strb.w	r2, [sl]
 800e2c0:	781a      	ldrb	r2, [r3, #0]
 800e2c2:	3201      	adds	r2, #1
 800e2c4:	701a      	strb	r2, [r3, #0]
 800e2c6:	e7a0      	b.n	800e20a <_dtoa_r+0x622>
 800e2c8:	4b6f      	ldr	r3, [pc, #444]	@ (800e488 <_dtoa_r+0x8a0>)
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	f7f2 f99c 	bl	8000608 <__aeabi_dmul>
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	460d      	mov	r5, r1
 800e2d8:	f7f2 fbfe 	bl	8000ad8 <__aeabi_dcmpeq>
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	d09f      	beq.n	800e220 <_dtoa_r+0x638>
 800e2e0:	e7d1      	b.n	800e286 <_dtoa_r+0x69e>
 800e2e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e2e4:	2a00      	cmp	r2, #0
 800e2e6:	f000 80ea 	beq.w	800e4be <_dtoa_r+0x8d6>
 800e2ea:	9a07      	ldr	r2, [sp, #28]
 800e2ec:	2a01      	cmp	r2, #1
 800e2ee:	f300 80cd 	bgt.w	800e48c <_dtoa_r+0x8a4>
 800e2f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e2f4:	2a00      	cmp	r2, #0
 800e2f6:	f000 80c1 	beq.w	800e47c <_dtoa_r+0x894>
 800e2fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e2fe:	9c08      	ldr	r4, [sp, #32]
 800e300:	9e00      	ldr	r6, [sp, #0]
 800e302:	9a00      	ldr	r2, [sp, #0]
 800e304:	441a      	add	r2, r3
 800e306:	9200      	str	r2, [sp, #0]
 800e308:	9a06      	ldr	r2, [sp, #24]
 800e30a:	2101      	movs	r1, #1
 800e30c:	441a      	add	r2, r3
 800e30e:	4648      	mov	r0, r9
 800e310:	9206      	str	r2, [sp, #24]
 800e312:	f000 fc2d 	bl	800eb70 <__i2b>
 800e316:	4605      	mov	r5, r0
 800e318:	b166      	cbz	r6, 800e334 <_dtoa_r+0x74c>
 800e31a:	9b06      	ldr	r3, [sp, #24]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	dd09      	ble.n	800e334 <_dtoa_r+0x74c>
 800e320:	42b3      	cmp	r3, r6
 800e322:	9a00      	ldr	r2, [sp, #0]
 800e324:	bfa8      	it	ge
 800e326:	4633      	movge	r3, r6
 800e328:	1ad2      	subs	r2, r2, r3
 800e32a:	9200      	str	r2, [sp, #0]
 800e32c:	9a06      	ldr	r2, [sp, #24]
 800e32e:	1af6      	subs	r6, r6, r3
 800e330:	1ad3      	subs	r3, r2, r3
 800e332:	9306      	str	r3, [sp, #24]
 800e334:	9b08      	ldr	r3, [sp, #32]
 800e336:	b30b      	cbz	r3, 800e37c <_dtoa_r+0x794>
 800e338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	f000 80c6 	beq.w	800e4cc <_dtoa_r+0x8e4>
 800e340:	2c00      	cmp	r4, #0
 800e342:	f000 80c0 	beq.w	800e4c6 <_dtoa_r+0x8de>
 800e346:	4629      	mov	r1, r5
 800e348:	4622      	mov	r2, r4
 800e34a:	4648      	mov	r0, r9
 800e34c:	f000 fcc8 	bl	800ece0 <__pow5mult>
 800e350:	9a02      	ldr	r2, [sp, #8]
 800e352:	4601      	mov	r1, r0
 800e354:	4605      	mov	r5, r0
 800e356:	4648      	mov	r0, r9
 800e358:	f000 fc20 	bl	800eb9c <__multiply>
 800e35c:	9902      	ldr	r1, [sp, #8]
 800e35e:	4680      	mov	r8, r0
 800e360:	4648      	mov	r0, r9
 800e362:	f000 fb51 	bl	800ea08 <_Bfree>
 800e366:	9b08      	ldr	r3, [sp, #32]
 800e368:	1b1b      	subs	r3, r3, r4
 800e36a:	9308      	str	r3, [sp, #32]
 800e36c:	f000 80b1 	beq.w	800e4d2 <_dtoa_r+0x8ea>
 800e370:	9a08      	ldr	r2, [sp, #32]
 800e372:	4641      	mov	r1, r8
 800e374:	4648      	mov	r0, r9
 800e376:	f000 fcb3 	bl	800ece0 <__pow5mult>
 800e37a:	9002      	str	r0, [sp, #8]
 800e37c:	2101      	movs	r1, #1
 800e37e:	4648      	mov	r0, r9
 800e380:	f000 fbf6 	bl	800eb70 <__i2b>
 800e384:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e386:	4604      	mov	r4, r0
 800e388:	2b00      	cmp	r3, #0
 800e38a:	f000 81d8 	beq.w	800e73e <_dtoa_r+0xb56>
 800e38e:	461a      	mov	r2, r3
 800e390:	4601      	mov	r1, r0
 800e392:	4648      	mov	r0, r9
 800e394:	f000 fca4 	bl	800ece0 <__pow5mult>
 800e398:	9b07      	ldr	r3, [sp, #28]
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	4604      	mov	r4, r0
 800e39e:	f300 809f 	bgt.w	800e4e0 <_dtoa_r+0x8f8>
 800e3a2:	9b04      	ldr	r3, [sp, #16]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	f040 8097 	bne.w	800e4d8 <_dtoa_r+0x8f0>
 800e3aa:	9b05      	ldr	r3, [sp, #20]
 800e3ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	f040 8093 	bne.w	800e4dc <_dtoa_r+0x8f4>
 800e3b6:	9b05      	ldr	r3, [sp, #20]
 800e3b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e3bc:	0d1b      	lsrs	r3, r3, #20
 800e3be:	051b      	lsls	r3, r3, #20
 800e3c0:	b133      	cbz	r3, 800e3d0 <_dtoa_r+0x7e8>
 800e3c2:	9b00      	ldr	r3, [sp, #0]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	9300      	str	r3, [sp, #0]
 800e3c8:	9b06      	ldr	r3, [sp, #24]
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	9306      	str	r3, [sp, #24]
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	9308      	str	r3, [sp, #32]
 800e3d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	f000 81b8 	beq.w	800e74a <_dtoa_r+0xb62>
 800e3da:	6923      	ldr	r3, [r4, #16]
 800e3dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e3e0:	6918      	ldr	r0, [r3, #16]
 800e3e2:	f000 fb79 	bl	800ead8 <__hi0bits>
 800e3e6:	f1c0 0020 	rsb	r0, r0, #32
 800e3ea:	9b06      	ldr	r3, [sp, #24]
 800e3ec:	4418      	add	r0, r3
 800e3ee:	f010 001f 	ands.w	r0, r0, #31
 800e3f2:	f000 8082 	beq.w	800e4fa <_dtoa_r+0x912>
 800e3f6:	f1c0 0320 	rsb	r3, r0, #32
 800e3fa:	2b04      	cmp	r3, #4
 800e3fc:	dd73      	ble.n	800e4e6 <_dtoa_r+0x8fe>
 800e3fe:	9b00      	ldr	r3, [sp, #0]
 800e400:	f1c0 001c 	rsb	r0, r0, #28
 800e404:	4403      	add	r3, r0
 800e406:	9300      	str	r3, [sp, #0]
 800e408:	9b06      	ldr	r3, [sp, #24]
 800e40a:	4403      	add	r3, r0
 800e40c:	4406      	add	r6, r0
 800e40e:	9306      	str	r3, [sp, #24]
 800e410:	9b00      	ldr	r3, [sp, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	dd05      	ble.n	800e422 <_dtoa_r+0x83a>
 800e416:	9902      	ldr	r1, [sp, #8]
 800e418:	461a      	mov	r2, r3
 800e41a:	4648      	mov	r0, r9
 800e41c:	f000 fcba 	bl	800ed94 <__lshift>
 800e420:	9002      	str	r0, [sp, #8]
 800e422:	9b06      	ldr	r3, [sp, #24]
 800e424:	2b00      	cmp	r3, #0
 800e426:	dd05      	ble.n	800e434 <_dtoa_r+0x84c>
 800e428:	4621      	mov	r1, r4
 800e42a:	461a      	mov	r2, r3
 800e42c:	4648      	mov	r0, r9
 800e42e:	f000 fcb1 	bl	800ed94 <__lshift>
 800e432:	4604      	mov	r4, r0
 800e434:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e436:	2b00      	cmp	r3, #0
 800e438:	d061      	beq.n	800e4fe <_dtoa_r+0x916>
 800e43a:	9802      	ldr	r0, [sp, #8]
 800e43c:	4621      	mov	r1, r4
 800e43e:	f000 fd15 	bl	800ee6c <__mcmp>
 800e442:	2800      	cmp	r0, #0
 800e444:	da5b      	bge.n	800e4fe <_dtoa_r+0x916>
 800e446:	2300      	movs	r3, #0
 800e448:	9902      	ldr	r1, [sp, #8]
 800e44a:	220a      	movs	r2, #10
 800e44c:	4648      	mov	r0, r9
 800e44e:	f000 fafd 	bl	800ea4c <__multadd>
 800e452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e454:	9002      	str	r0, [sp, #8]
 800e456:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	f000 8177 	beq.w	800e74e <_dtoa_r+0xb66>
 800e460:	4629      	mov	r1, r5
 800e462:	2300      	movs	r3, #0
 800e464:	220a      	movs	r2, #10
 800e466:	4648      	mov	r0, r9
 800e468:	f000 faf0 	bl	800ea4c <__multadd>
 800e46c:	f1bb 0f00 	cmp.w	fp, #0
 800e470:	4605      	mov	r5, r0
 800e472:	dc6f      	bgt.n	800e554 <_dtoa_r+0x96c>
 800e474:	9b07      	ldr	r3, [sp, #28]
 800e476:	2b02      	cmp	r3, #2
 800e478:	dc49      	bgt.n	800e50e <_dtoa_r+0x926>
 800e47a:	e06b      	b.n	800e554 <_dtoa_r+0x96c>
 800e47c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e47e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e482:	e73c      	b.n	800e2fe <_dtoa_r+0x716>
 800e484:	3fe00000 	.word	0x3fe00000
 800e488:	40240000 	.word	0x40240000
 800e48c:	9b03      	ldr	r3, [sp, #12]
 800e48e:	1e5c      	subs	r4, r3, #1
 800e490:	9b08      	ldr	r3, [sp, #32]
 800e492:	42a3      	cmp	r3, r4
 800e494:	db09      	blt.n	800e4aa <_dtoa_r+0x8c2>
 800e496:	1b1c      	subs	r4, r3, r4
 800e498:	9b03      	ldr	r3, [sp, #12]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	f6bf af30 	bge.w	800e300 <_dtoa_r+0x718>
 800e4a0:	9b00      	ldr	r3, [sp, #0]
 800e4a2:	9a03      	ldr	r2, [sp, #12]
 800e4a4:	1a9e      	subs	r6, r3, r2
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	e72b      	b.n	800e302 <_dtoa_r+0x71a>
 800e4aa:	9b08      	ldr	r3, [sp, #32]
 800e4ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e4ae:	9408      	str	r4, [sp, #32]
 800e4b0:	1ae3      	subs	r3, r4, r3
 800e4b2:	441a      	add	r2, r3
 800e4b4:	9e00      	ldr	r6, [sp, #0]
 800e4b6:	9b03      	ldr	r3, [sp, #12]
 800e4b8:	920d      	str	r2, [sp, #52]	@ 0x34
 800e4ba:	2400      	movs	r4, #0
 800e4bc:	e721      	b.n	800e302 <_dtoa_r+0x71a>
 800e4be:	9c08      	ldr	r4, [sp, #32]
 800e4c0:	9e00      	ldr	r6, [sp, #0]
 800e4c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e4c4:	e728      	b.n	800e318 <_dtoa_r+0x730>
 800e4c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e4ca:	e751      	b.n	800e370 <_dtoa_r+0x788>
 800e4cc:	9a08      	ldr	r2, [sp, #32]
 800e4ce:	9902      	ldr	r1, [sp, #8]
 800e4d0:	e750      	b.n	800e374 <_dtoa_r+0x78c>
 800e4d2:	f8cd 8008 	str.w	r8, [sp, #8]
 800e4d6:	e751      	b.n	800e37c <_dtoa_r+0x794>
 800e4d8:	2300      	movs	r3, #0
 800e4da:	e779      	b.n	800e3d0 <_dtoa_r+0x7e8>
 800e4dc:	9b04      	ldr	r3, [sp, #16]
 800e4de:	e777      	b.n	800e3d0 <_dtoa_r+0x7e8>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	9308      	str	r3, [sp, #32]
 800e4e4:	e779      	b.n	800e3da <_dtoa_r+0x7f2>
 800e4e6:	d093      	beq.n	800e410 <_dtoa_r+0x828>
 800e4e8:	9a00      	ldr	r2, [sp, #0]
 800e4ea:	331c      	adds	r3, #28
 800e4ec:	441a      	add	r2, r3
 800e4ee:	9200      	str	r2, [sp, #0]
 800e4f0:	9a06      	ldr	r2, [sp, #24]
 800e4f2:	441a      	add	r2, r3
 800e4f4:	441e      	add	r6, r3
 800e4f6:	9206      	str	r2, [sp, #24]
 800e4f8:	e78a      	b.n	800e410 <_dtoa_r+0x828>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	e7f4      	b.n	800e4e8 <_dtoa_r+0x900>
 800e4fe:	9b03      	ldr	r3, [sp, #12]
 800e500:	2b00      	cmp	r3, #0
 800e502:	46b8      	mov	r8, r7
 800e504:	dc20      	bgt.n	800e548 <_dtoa_r+0x960>
 800e506:	469b      	mov	fp, r3
 800e508:	9b07      	ldr	r3, [sp, #28]
 800e50a:	2b02      	cmp	r3, #2
 800e50c:	dd1e      	ble.n	800e54c <_dtoa_r+0x964>
 800e50e:	f1bb 0f00 	cmp.w	fp, #0
 800e512:	f47f adb1 	bne.w	800e078 <_dtoa_r+0x490>
 800e516:	4621      	mov	r1, r4
 800e518:	465b      	mov	r3, fp
 800e51a:	2205      	movs	r2, #5
 800e51c:	4648      	mov	r0, r9
 800e51e:	f000 fa95 	bl	800ea4c <__multadd>
 800e522:	4601      	mov	r1, r0
 800e524:	4604      	mov	r4, r0
 800e526:	9802      	ldr	r0, [sp, #8]
 800e528:	f000 fca0 	bl	800ee6c <__mcmp>
 800e52c:	2800      	cmp	r0, #0
 800e52e:	f77f ada3 	ble.w	800e078 <_dtoa_r+0x490>
 800e532:	4656      	mov	r6, sl
 800e534:	2331      	movs	r3, #49	@ 0x31
 800e536:	f806 3b01 	strb.w	r3, [r6], #1
 800e53a:	f108 0801 	add.w	r8, r8, #1
 800e53e:	e59f      	b.n	800e080 <_dtoa_r+0x498>
 800e540:	9c03      	ldr	r4, [sp, #12]
 800e542:	46b8      	mov	r8, r7
 800e544:	4625      	mov	r5, r4
 800e546:	e7f4      	b.n	800e532 <_dtoa_r+0x94a>
 800e548:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e54c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f000 8101 	beq.w	800e756 <_dtoa_r+0xb6e>
 800e554:	2e00      	cmp	r6, #0
 800e556:	dd05      	ble.n	800e564 <_dtoa_r+0x97c>
 800e558:	4629      	mov	r1, r5
 800e55a:	4632      	mov	r2, r6
 800e55c:	4648      	mov	r0, r9
 800e55e:	f000 fc19 	bl	800ed94 <__lshift>
 800e562:	4605      	mov	r5, r0
 800e564:	9b08      	ldr	r3, [sp, #32]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d05c      	beq.n	800e624 <_dtoa_r+0xa3c>
 800e56a:	6869      	ldr	r1, [r5, #4]
 800e56c:	4648      	mov	r0, r9
 800e56e:	f000 fa0b 	bl	800e988 <_Balloc>
 800e572:	4606      	mov	r6, r0
 800e574:	b928      	cbnz	r0, 800e582 <_dtoa_r+0x99a>
 800e576:	4b82      	ldr	r3, [pc, #520]	@ (800e780 <_dtoa_r+0xb98>)
 800e578:	4602      	mov	r2, r0
 800e57a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e57e:	f7ff bb4a 	b.w	800dc16 <_dtoa_r+0x2e>
 800e582:	692a      	ldr	r2, [r5, #16]
 800e584:	3202      	adds	r2, #2
 800e586:	0092      	lsls	r2, r2, #2
 800e588:	f105 010c 	add.w	r1, r5, #12
 800e58c:	300c      	adds	r0, #12
 800e58e:	f7ff fa92 	bl	800dab6 <memcpy>
 800e592:	2201      	movs	r2, #1
 800e594:	4631      	mov	r1, r6
 800e596:	4648      	mov	r0, r9
 800e598:	f000 fbfc 	bl	800ed94 <__lshift>
 800e59c:	f10a 0301 	add.w	r3, sl, #1
 800e5a0:	9300      	str	r3, [sp, #0]
 800e5a2:	eb0a 030b 	add.w	r3, sl, fp
 800e5a6:	9308      	str	r3, [sp, #32]
 800e5a8:	9b04      	ldr	r3, [sp, #16]
 800e5aa:	f003 0301 	and.w	r3, r3, #1
 800e5ae:	462f      	mov	r7, r5
 800e5b0:	9306      	str	r3, [sp, #24]
 800e5b2:	4605      	mov	r5, r0
 800e5b4:	9b00      	ldr	r3, [sp, #0]
 800e5b6:	9802      	ldr	r0, [sp, #8]
 800e5b8:	4621      	mov	r1, r4
 800e5ba:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800e5be:	f7ff fa88 	bl	800dad2 <quorem>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	3330      	adds	r3, #48	@ 0x30
 800e5c6:	9003      	str	r0, [sp, #12]
 800e5c8:	4639      	mov	r1, r7
 800e5ca:	9802      	ldr	r0, [sp, #8]
 800e5cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5ce:	f000 fc4d 	bl	800ee6c <__mcmp>
 800e5d2:	462a      	mov	r2, r5
 800e5d4:	9004      	str	r0, [sp, #16]
 800e5d6:	4621      	mov	r1, r4
 800e5d8:	4648      	mov	r0, r9
 800e5da:	f000 fc63 	bl	800eea4 <__mdiff>
 800e5de:	68c2      	ldr	r2, [r0, #12]
 800e5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5e2:	4606      	mov	r6, r0
 800e5e4:	bb02      	cbnz	r2, 800e628 <_dtoa_r+0xa40>
 800e5e6:	4601      	mov	r1, r0
 800e5e8:	9802      	ldr	r0, [sp, #8]
 800e5ea:	f000 fc3f 	bl	800ee6c <__mcmp>
 800e5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	4631      	mov	r1, r6
 800e5f4:	4648      	mov	r0, r9
 800e5f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800e5f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5fa:	f000 fa05 	bl	800ea08 <_Bfree>
 800e5fe:	9b07      	ldr	r3, [sp, #28]
 800e600:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e602:	9e00      	ldr	r6, [sp, #0]
 800e604:	ea42 0103 	orr.w	r1, r2, r3
 800e608:	9b06      	ldr	r3, [sp, #24]
 800e60a:	4319      	orrs	r1, r3
 800e60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e60e:	d10d      	bne.n	800e62c <_dtoa_r+0xa44>
 800e610:	2b39      	cmp	r3, #57	@ 0x39
 800e612:	d027      	beq.n	800e664 <_dtoa_r+0xa7c>
 800e614:	9a04      	ldr	r2, [sp, #16]
 800e616:	2a00      	cmp	r2, #0
 800e618:	dd01      	ble.n	800e61e <_dtoa_r+0xa36>
 800e61a:	9b03      	ldr	r3, [sp, #12]
 800e61c:	3331      	adds	r3, #49	@ 0x31
 800e61e:	f88b 3000 	strb.w	r3, [fp]
 800e622:	e52e      	b.n	800e082 <_dtoa_r+0x49a>
 800e624:	4628      	mov	r0, r5
 800e626:	e7b9      	b.n	800e59c <_dtoa_r+0x9b4>
 800e628:	2201      	movs	r2, #1
 800e62a:	e7e2      	b.n	800e5f2 <_dtoa_r+0xa0a>
 800e62c:	9904      	ldr	r1, [sp, #16]
 800e62e:	2900      	cmp	r1, #0
 800e630:	db04      	blt.n	800e63c <_dtoa_r+0xa54>
 800e632:	9807      	ldr	r0, [sp, #28]
 800e634:	4301      	orrs	r1, r0
 800e636:	9806      	ldr	r0, [sp, #24]
 800e638:	4301      	orrs	r1, r0
 800e63a:	d120      	bne.n	800e67e <_dtoa_r+0xa96>
 800e63c:	2a00      	cmp	r2, #0
 800e63e:	ddee      	ble.n	800e61e <_dtoa_r+0xa36>
 800e640:	9902      	ldr	r1, [sp, #8]
 800e642:	9300      	str	r3, [sp, #0]
 800e644:	2201      	movs	r2, #1
 800e646:	4648      	mov	r0, r9
 800e648:	f000 fba4 	bl	800ed94 <__lshift>
 800e64c:	4621      	mov	r1, r4
 800e64e:	9002      	str	r0, [sp, #8]
 800e650:	f000 fc0c 	bl	800ee6c <__mcmp>
 800e654:	2800      	cmp	r0, #0
 800e656:	9b00      	ldr	r3, [sp, #0]
 800e658:	dc02      	bgt.n	800e660 <_dtoa_r+0xa78>
 800e65a:	d1e0      	bne.n	800e61e <_dtoa_r+0xa36>
 800e65c:	07da      	lsls	r2, r3, #31
 800e65e:	d5de      	bpl.n	800e61e <_dtoa_r+0xa36>
 800e660:	2b39      	cmp	r3, #57	@ 0x39
 800e662:	d1da      	bne.n	800e61a <_dtoa_r+0xa32>
 800e664:	2339      	movs	r3, #57	@ 0x39
 800e666:	f88b 3000 	strb.w	r3, [fp]
 800e66a:	4633      	mov	r3, r6
 800e66c:	461e      	mov	r6, r3
 800e66e:	3b01      	subs	r3, #1
 800e670:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e674:	2a39      	cmp	r2, #57	@ 0x39
 800e676:	d04e      	beq.n	800e716 <_dtoa_r+0xb2e>
 800e678:	3201      	adds	r2, #1
 800e67a:	701a      	strb	r2, [r3, #0]
 800e67c:	e501      	b.n	800e082 <_dtoa_r+0x49a>
 800e67e:	2a00      	cmp	r2, #0
 800e680:	dd03      	ble.n	800e68a <_dtoa_r+0xaa2>
 800e682:	2b39      	cmp	r3, #57	@ 0x39
 800e684:	d0ee      	beq.n	800e664 <_dtoa_r+0xa7c>
 800e686:	3301      	adds	r3, #1
 800e688:	e7c9      	b.n	800e61e <_dtoa_r+0xa36>
 800e68a:	9a00      	ldr	r2, [sp, #0]
 800e68c:	9908      	ldr	r1, [sp, #32]
 800e68e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e692:	428a      	cmp	r2, r1
 800e694:	d028      	beq.n	800e6e8 <_dtoa_r+0xb00>
 800e696:	9902      	ldr	r1, [sp, #8]
 800e698:	2300      	movs	r3, #0
 800e69a:	220a      	movs	r2, #10
 800e69c:	4648      	mov	r0, r9
 800e69e:	f000 f9d5 	bl	800ea4c <__multadd>
 800e6a2:	42af      	cmp	r7, r5
 800e6a4:	9002      	str	r0, [sp, #8]
 800e6a6:	f04f 0300 	mov.w	r3, #0
 800e6aa:	f04f 020a 	mov.w	r2, #10
 800e6ae:	4639      	mov	r1, r7
 800e6b0:	4648      	mov	r0, r9
 800e6b2:	d107      	bne.n	800e6c4 <_dtoa_r+0xadc>
 800e6b4:	f000 f9ca 	bl	800ea4c <__multadd>
 800e6b8:	4607      	mov	r7, r0
 800e6ba:	4605      	mov	r5, r0
 800e6bc:	9b00      	ldr	r3, [sp, #0]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	9300      	str	r3, [sp, #0]
 800e6c2:	e777      	b.n	800e5b4 <_dtoa_r+0x9cc>
 800e6c4:	f000 f9c2 	bl	800ea4c <__multadd>
 800e6c8:	4629      	mov	r1, r5
 800e6ca:	4607      	mov	r7, r0
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	220a      	movs	r2, #10
 800e6d0:	4648      	mov	r0, r9
 800e6d2:	f000 f9bb 	bl	800ea4c <__multadd>
 800e6d6:	4605      	mov	r5, r0
 800e6d8:	e7f0      	b.n	800e6bc <_dtoa_r+0xad4>
 800e6da:	f1bb 0f00 	cmp.w	fp, #0
 800e6de:	bfcc      	ite	gt
 800e6e0:	465e      	movgt	r6, fp
 800e6e2:	2601      	movle	r6, #1
 800e6e4:	4456      	add	r6, sl
 800e6e6:	2700      	movs	r7, #0
 800e6e8:	9902      	ldr	r1, [sp, #8]
 800e6ea:	9300      	str	r3, [sp, #0]
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	4648      	mov	r0, r9
 800e6f0:	f000 fb50 	bl	800ed94 <__lshift>
 800e6f4:	4621      	mov	r1, r4
 800e6f6:	9002      	str	r0, [sp, #8]
 800e6f8:	f000 fbb8 	bl	800ee6c <__mcmp>
 800e6fc:	2800      	cmp	r0, #0
 800e6fe:	dcb4      	bgt.n	800e66a <_dtoa_r+0xa82>
 800e700:	d102      	bne.n	800e708 <_dtoa_r+0xb20>
 800e702:	9b00      	ldr	r3, [sp, #0]
 800e704:	07db      	lsls	r3, r3, #31
 800e706:	d4b0      	bmi.n	800e66a <_dtoa_r+0xa82>
 800e708:	4633      	mov	r3, r6
 800e70a:	461e      	mov	r6, r3
 800e70c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e710:	2a30      	cmp	r2, #48	@ 0x30
 800e712:	d0fa      	beq.n	800e70a <_dtoa_r+0xb22>
 800e714:	e4b5      	b.n	800e082 <_dtoa_r+0x49a>
 800e716:	459a      	cmp	sl, r3
 800e718:	d1a8      	bne.n	800e66c <_dtoa_r+0xa84>
 800e71a:	2331      	movs	r3, #49	@ 0x31
 800e71c:	f108 0801 	add.w	r8, r8, #1
 800e720:	f88a 3000 	strb.w	r3, [sl]
 800e724:	e4ad      	b.n	800e082 <_dtoa_r+0x49a>
 800e726:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e728:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e784 <_dtoa_r+0xb9c>
 800e72c:	b11b      	cbz	r3, 800e736 <_dtoa_r+0xb4e>
 800e72e:	f10a 0308 	add.w	r3, sl, #8
 800e732:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e734:	6013      	str	r3, [r2, #0]
 800e736:	4650      	mov	r0, sl
 800e738:	b017      	add	sp, #92	@ 0x5c
 800e73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e73e:	9b07      	ldr	r3, [sp, #28]
 800e740:	2b01      	cmp	r3, #1
 800e742:	f77f ae2e 	ble.w	800e3a2 <_dtoa_r+0x7ba>
 800e746:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e748:	9308      	str	r3, [sp, #32]
 800e74a:	2001      	movs	r0, #1
 800e74c:	e64d      	b.n	800e3ea <_dtoa_r+0x802>
 800e74e:	f1bb 0f00 	cmp.w	fp, #0
 800e752:	f77f aed9 	ble.w	800e508 <_dtoa_r+0x920>
 800e756:	4656      	mov	r6, sl
 800e758:	9802      	ldr	r0, [sp, #8]
 800e75a:	4621      	mov	r1, r4
 800e75c:	f7ff f9b9 	bl	800dad2 <quorem>
 800e760:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e764:	f806 3b01 	strb.w	r3, [r6], #1
 800e768:	eba6 020a 	sub.w	r2, r6, sl
 800e76c:	4593      	cmp	fp, r2
 800e76e:	ddb4      	ble.n	800e6da <_dtoa_r+0xaf2>
 800e770:	9902      	ldr	r1, [sp, #8]
 800e772:	2300      	movs	r3, #0
 800e774:	220a      	movs	r2, #10
 800e776:	4648      	mov	r0, r9
 800e778:	f000 f968 	bl	800ea4c <__multadd>
 800e77c:	9002      	str	r0, [sp, #8]
 800e77e:	e7eb      	b.n	800e758 <_dtoa_r+0xb70>
 800e780:	0800ff16 	.word	0x0800ff16
 800e784:	0800fe9a 	.word	0x0800fe9a

0800e788 <_free_r>:
 800e788:	b538      	push	{r3, r4, r5, lr}
 800e78a:	4605      	mov	r5, r0
 800e78c:	2900      	cmp	r1, #0
 800e78e:	d041      	beq.n	800e814 <_free_r+0x8c>
 800e790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e794:	1f0c      	subs	r4, r1, #4
 800e796:	2b00      	cmp	r3, #0
 800e798:	bfb8      	it	lt
 800e79a:	18e4      	addlt	r4, r4, r3
 800e79c:	f000 f8e8 	bl	800e970 <__malloc_lock>
 800e7a0:	4a1d      	ldr	r2, [pc, #116]	@ (800e818 <_free_r+0x90>)
 800e7a2:	6813      	ldr	r3, [r2, #0]
 800e7a4:	b933      	cbnz	r3, 800e7b4 <_free_r+0x2c>
 800e7a6:	6063      	str	r3, [r4, #4]
 800e7a8:	6014      	str	r4, [r2, #0]
 800e7aa:	4628      	mov	r0, r5
 800e7ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7b0:	f000 b8e4 	b.w	800e97c <__malloc_unlock>
 800e7b4:	42a3      	cmp	r3, r4
 800e7b6:	d908      	bls.n	800e7ca <_free_r+0x42>
 800e7b8:	6820      	ldr	r0, [r4, #0]
 800e7ba:	1821      	adds	r1, r4, r0
 800e7bc:	428b      	cmp	r3, r1
 800e7be:	bf01      	itttt	eq
 800e7c0:	6819      	ldreq	r1, [r3, #0]
 800e7c2:	685b      	ldreq	r3, [r3, #4]
 800e7c4:	1809      	addeq	r1, r1, r0
 800e7c6:	6021      	streq	r1, [r4, #0]
 800e7c8:	e7ed      	b.n	800e7a6 <_free_r+0x1e>
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	b10b      	cbz	r3, 800e7d4 <_free_r+0x4c>
 800e7d0:	42a3      	cmp	r3, r4
 800e7d2:	d9fa      	bls.n	800e7ca <_free_r+0x42>
 800e7d4:	6811      	ldr	r1, [r2, #0]
 800e7d6:	1850      	adds	r0, r2, r1
 800e7d8:	42a0      	cmp	r0, r4
 800e7da:	d10b      	bne.n	800e7f4 <_free_r+0x6c>
 800e7dc:	6820      	ldr	r0, [r4, #0]
 800e7de:	4401      	add	r1, r0
 800e7e0:	1850      	adds	r0, r2, r1
 800e7e2:	4283      	cmp	r3, r0
 800e7e4:	6011      	str	r1, [r2, #0]
 800e7e6:	d1e0      	bne.n	800e7aa <_free_r+0x22>
 800e7e8:	6818      	ldr	r0, [r3, #0]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	6053      	str	r3, [r2, #4]
 800e7ee:	4408      	add	r0, r1
 800e7f0:	6010      	str	r0, [r2, #0]
 800e7f2:	e7da      	b.n	800e7aa <_free_r+0x22>
 800e7f4:	d902      	bls.n	800e7fc <_free_r+0x74>
 800e7f6:	230c      	movs	r3, #12
 800e7f8:	602b      	str	r3, [r5, #0]
 800e7fa:	e7d6      	b.n	800e7aa <_free_r+0x22>
 800e7fc:	6820      	ldr	r0, [r4, #0]
 800e7fe:	1821      	adds	r1, r4, r0
 800e800:	428b      	cmp	r3, r1
 800e802:	bf04      	itt	eq
 800e804:	6819      	ldreq	r1, [r3, #0]
 800e806:	685b      	ldreq	r3, [r3, #4]
 800e808:	6063      	str	r3, [r4, #4]
 800e80a:	bf04      	itt	eq
 800e80c:	1809      	addeq	r1, r1, r0
 800e80e:	6021      	streq	r1, [r4, #0]
 800e810:	6054      	str	r4, [r2, #4]
 800e812:	e7ca      	b.n	800e7aa <_free_r+0x22>
 800e814:	bd38      	pop	{r3, r4, r5, pc}
 800e816:	bf00      	nop
 800e818:	20002240 	.word	0x20002240

0800e81c <malloc>:
 800e81c:	4b02      	ldr	r3, [pc, #8]	@ (800e828 <malloc+0xc>)
 800e81e:	4601      	mov	r1, r0
 800e820:	6818      	ldr	r0, [r3, #0]
 800e822:	f000 b825 	b.w	800e870 <_malloc_r>
 800e826:	bf00      	nop
 800e828:	20000110 	.word	0x20000110

0800e82c <sbrk_aligned>:
 800e82c:	b570      	push	{r4, r5, r6, lr}
 800e82e:	4e0f      	ldr	r6, [pc, #60]	@ (800e86c <sbrk_aligned+0x40>)
 800e830:	460c      	mov	r4, r1
 800e832:	6831      	ldr	r1, [r6, #0]
 800e834:	4605      	mov	r5, r0
 800e836:	b911      	cbnz	r1, 800e83e <sbrk_aligned+0x12>
 800e838:	f001 f804 	bl	800f844 <_sbrk_r>
 800e83c:	6030      	str	r0, [r6, #0]
 800e83e:	4621      	mov	r1, r4
 800e840:	4628      	mov	r0, r5
 800e842:	f000 ffff 	bl	800f844 <_sbrk_r>
 800e846:	1c43      	adds	r3, r0, #1
 800e848:	d103      	bne.n	800e852 <sbrk_aligned+0x26>
 800e84a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e84e:	4620      	mov	r0, r4
 800e850:	bd70      	pop	{r4, r5, r6, pc}
 800e852:	1cc4      	adds	r4, r0, #3
 800e854:	f024 0403 	bic.w	r4, r4, #3
 800e858:	42a0      	cmp	r0, r4
 800e85a:	d0f8      	beq.n	800e84e <sbrk_aligned+0x22>
 800e85c:	1a21      	subs	r1, r4, r0
 800e85e:	4628      	mov	r0, r5
 800e860:	f000 fff0 	bl	800f844 <_sbrk_r>
 800e864:	3001      	adds	r0, #1
 800e866:	d1f2      	bne.n	800e84e <sbrk_aligned+0x22>
 800e868:	e7ef      	b.n	800e84a <sbrk_aligned+0x1e>
 800e86a:	bf00      	nop
 800e86c:	2000223c 	.word	0x2000223c

0800e870 <_malloc_r>:
 800e870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e874:	1ccd      	adds	r5, r1, #3
 800e876:	f025 0503 	bic.w	r5, r5, #3
 800e87a:	3508      	adds	r5, #8
 800e87c:	2d0c      	cmp	r5, #12
 800e87e:	bf38      	it	cc
 800e880:	250c      	movcc	r5, #12
 800e882:	2d00      	cmp	r5, #0
 800e884:	4606      	mov	r6, r0
 800e886:	db01      	blt.n	800e88c <_malloc_r+0x1c>
 800e888:	42a9      	cmp	r1, r5
 800e88a:	d904      	bls.n	800e896 <_malloc_r+0x26>
 800e88c:	230c      	movs	r3, #12
 800e88e:	6033      	str	r3, [r6, #0]
 800e890:	2000      	movs	r0, #0
 800e892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e896:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e96c <_malloc_r+0xfc>
 800e89a:	f000 f869 	bl	800e970 <__malloc_lock>
 800e89e:	f8d8 3000 	ldr.w	r3, [r8]
 800e8a2:	461c      	mov	r4, r3
 800e8a4:	bb44      	cbnz	r4, 800e8f8 <_malloc_r+0x88>
 800e8a6:	4629      	mov	r1, r5
 800e8a8:	4630      	mov	r0, r6
 800e8aa:	f7ff ffbf 	bl	800e82c <sbrk_aligned>
 800e8ae:	1c43      	adds	r3, r0, #1
 800e8b0:	4604      	mov	r4, r0
 800e8b2:	d158      	bne.n	800e966 <_malloc_r+0xf6>
 800e8b4:	f8d8 4000 	ldr.w	r4, [r8]
 800e8b8:	4627      	mov	r7, r4
 800e8ba:	2f00      	cmp	r7, #0
 800e8bc:	d143      	bne.n	800e946 <_malloc_r+0xd6>
 800e8be:	2c00      	cmp	r4, #0
 800e8c0:	d04b      	beq.n	800e95a <_malloc_r+0xea>
 800e8c2:	6823      	ldr	r3, [r4, #0]
 800e8c4:	4639      	mov	r1, r7
 800e8c6:	4630      	mov	r0, r6
 800e8c8:	eb04 0903 	add.w	r9, r4, r3
 800e8cc:	f000 ffba 	bl	800f844 <_sbrk_r>
 800e8d0:	4581      	cmp	r9, r0
 800e8d2:	d142      	bne.n	800e95a <_malloc_r+0xea>
 800e8d4:	6821      	ldr	r1, [r4, #0]
 800e8d6:	1a6d      	subs	r5, r5, r1
 800e8d8:	4629      	mov	r1, r5
 800e8da:	4630      	mov	r0, r6
 800e8dc:	f7ff ffa6 	bl	800e82c <sbrk_aligned>
 800e8e0:	3001      	adds	r0, #1
 800e8e2:	d03a      	beq.n	800e95a <_malloc_r+0xea>
 800e8e4:	6823      	ldr	r3, [r4, #0]
 800e8e6:	442b      	add	r3, r5
 800e8e8:	6023      	str	r3, [r4, #0]
 800e8ea:	f8d8 3000 	ldr.w	r3, [r8]
 800e8ee:	685a      	ldr	r2, [r3, #4]
 800e8f0:	bb62      	cbnz	r2, 800e94c <_malloc_r+0xdc>
 800e8f2:	f8c8 7000 	str.w	r7, [r8]
 800e8f6:	e00f      	b.n	800e918 <_malloc_r+0xa8>
 800e8f8:	6822      	ldr	r2, [r4, #0]
 800e8fa:	1b52      	subs	r2, r2, r5
 800e8fc:	d420      	bmi.n	800e940 <_malloc_r+0xd0>
 800e8fe:	2a0b      	cmp	r2, #11
 800e900:	d917      	bls.n	800e932 <_malloc_r+0xc2>
 800e902:	1961      	adds	r1, r4, r5
 800e904:	42a3      	cmp	r3, r4
 800e906:	6025      	str	r5, [r4, #0]
 800e908:	bf18      	it	ne
 800e90a:	6059      	strne	r1, [r3, #4]
 800e90c:	6863      	ldr	r3, [r4, #4]
 800e90e:	bf08      	it	eq
 800e910:	f8c8 1000 	streq.w	r1, [r8]
 800e914:	5162      	str	r2, [r4, r5]
 800e916:	604b      	str	r3, [r1, #4]
 800e918:	4630      	mov	r0, r6
 800e91a:	f000 f82f 	bl	800e97c <__malloc_unlock>
 800e91e:	f104 000b 	add.w	r0, r4, #11
 800e922:	1d23      	adds	r3, r4, #4
 800e924:	f020 0007 	bic.w	r0, r0, #7
 800e928:	1ac2      	subs	r2, r0, r3
 800e92a:	bf1c      	itt	ne
 800e92c:	1a1b      	subne	r3, r3, r0
 800e92e:	50a3      	strne	r3, [r4, r2]
 800e930:	e7af      	b.n	800e892 <_malloc_r+0x22>
 800e932:	6862      	ldr	r2, [r4, #4]
 800e934:	42a3      	cmp	r3, r4
 800e936:	bf0c      	ite	eq
 800e938:	f8c8 2000 	streq.w	r2, [r8]
 800e93c:	605a      	strne	r2, [r3, #4]
 800e93e:	e7eb      	b.n	800e918 <_malloc_r+0xa8>
 800e940:	4623      	mov	r3, r4
 800e942:	6864      	ldr	r4, [r4, #4]
 800e944:	e7ae      	b.n	800e8a4 <_malloc_r+0x34>
 800e946:	463c      	mov	r4, r7
 800e948:	687f      	ldr	r7, [r7, #4]
 800e94a:	e7b6      	b.n	800e8ba <_malloc_r+0x4a>
 800e94c:	461a      	mov	r2, r3
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	42a3      	cmp	r3, r4
 800e952:	d1fb      	bne.n	800e94c <_malloc_r+0xdc>
 800e954:	2300      	movs	r3, #0
 800e956:	6053      	str	r3, [r2, #4]
 800e958:	e7de      	b.n	800e918 <_malloc_r+0xa8>
 800e95a:	230c      	movs	r3, #12
 800e95c:	6033      	str	r3, [r6, #0]
 800e95e:	4630      	mov	r0, r6
 800e960:	f000 f80c 	bl	800e97c <__malloc_unlock>
 800e964:	e794      	b.n	800e890 <_malloc_r+0x20>
 800e966:	6005      	str	r5, [r0, #0]
 800e968:	e7d6      	b.n	800e918 <_malloc_r+0xa8>
 800e96a:	bf00      	nop
 800e96c:	20002240 	.word	0x20002240

0800e970 <__malloc_lock>:
 800e970:	4801      	ldr	r0, [pc, #4]	@ (800e978 <__malloc_lock+0x8>)
 800e972:	f7ff b89e 	b.w	800dab2 <__retarget_lock_acquire_recursive>
 800e976:	bf00      	nop
 800e978:	20002238 	.word	0x20002238

0800e97c <__malloc_unlock>:
 800e97c:	4801      	ldr	r0, [pc, #4]	@ (800e984 <__malloc_unlock+0x8>)
 800e97e:	f7ff b899 	b.w	800dab4 <__retarget_lock_release_recursive>
 800e982:	bf00      	nop
 800e984:	20002238 	.word	0x20002238

0800e988 <_Balloc>:
 800e988:	b570      	push	{r4, r5, r6, lr}
 800e98a:	69c6      	ldr	r6, [r0, #28]
 800e98c:	4604      	mov	r4, r0
 800e98e:	460d      	mov	r5, r1
 800e990:	b976      	cbnz	r6, 800e9b0 <_Balloc+0x28>
 800e992:	2010      	movs	r0, #16
 800e994:	f7ff ff42 	bl	800e81c <malloc>
 800e998:	4602      	mov	r2, r0
 800e99a:	61e0      	str	r0, [r4, #28]
 800e99c:	b920      	cbnz	r0, 800e9a8 <_Balloc+0x20>
 800e99e:	4b18      	ldr	r3, [pc, #96]	@ (800ea00 <_Balloc+0x78>)
 800e9a0:	4818      	ldr	r0, [pc, #96]	@ (800ea04 <_Balloc+0x7c>)
 800e9a2:	216b      	movs	r1, #107	@ 0x6b
 800e9a4:	f000 ff5e 	bl	800f864 <__assert_func>
 800e9a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9ac:	6006      	str	r6, [r0, #0]
 800e9ae:	60c6      	str	r6, [r0, #12]
 800e9b0:	69e6      	ldr	r6, [r4, #28]
 800e9b2:	68f3      	ldr	r3, [r6, #12]
 800e9b4:	b183      	cbz	r3, 800e9d8 <_Balloc+0x50>
 800e9b6:	69e3      	ldr	r3, [r4, #28]
 800e9b8:	68db      	ldr	r3, [r3, #12]
 800e9ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e9be:	b9b8      	cbnz	r0, 800e9f0 <_Balloc+0x68>
 800e9c0:	2101      	movs	r1, #1
 800e9c2:	fa01 f605 	lsl.w	r6, r1, r5
 800e9c6:	1d72      	adds	r2, r6, #5
 800e9c8:	0092      	lsls	r2, r2, #2
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	f000 ff68 	bl	800f8a0 <_calloc_r>
 800e9d0:	b160      	cbz	r0, 800e9ec <_Balloc+0x64>
 800e9d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e9d6:	e00e      	b.n	800e9f6 <_Balloc+0x6e>
 800e9d8:	2221      	movs	r2, #33	@ 0x21
 800e9da:	2104      	movs	r1, #4
 800e9dc:	4620      	mov	r0, r4
 800e9de:	f000 ff5f 	bl	800f8a0 <_calloc_r>
 800e9e2:	69e3      	ldr	r3, [r4, #28]
 800e9e4:	60f0      	str	r0, [r6, #12]
 800e9e6:	68db      	ldr	r3, [r3, #12]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d1e4      	bne.n	800e9b6 <_Balloc+0x2e>
 800e9ec:	2000      	movs	r0, #0
 800e9ee:	bd70      	pop	{r4, r5, r6, pc}
 800e9f0:	6802      	ldr	r2, [r0, #0]
 800e9f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e9fc:	e7f7      	b.n	800e9ee <_Balloc+0x66>
 800e9fe:	bf00      	nop
 800ea00:	0800fea7 	.word	0x0800fea7
 800ea04:	0800ff27 	.word	0x0800ff27

0800ea08 <_Bfree>:
 800ea08:	b570      	push	{r4, r5, r6, lr}
 800ea0a:	69c6      	ldr	r6, [r0, #28]
 800ea0c:	4605      	mov	r5, r0
 800ea0e:	460c      	mov	r4, r1
 800ea10:	b976      	cbnz	r6, 800ea30 <_Bfree+0x28>
 800ea12:	2010      	movs	r0, #16
 800ea14:	f7ff ff02 	bl	800e81c <malloc>
 800ea18:	4602      	mov	r2, r0
 800ea1a:	61e8      	str	r0, [r5, #28]
 800ea1c:	b920      	cbnz	r0, 800ea28 <_Bfree+0x20>
 800ea1e:	4b09      	ldr	r3, [pc, #36]	@ (800ea44 <_Bfree+0x3c>)
 800ea20:	4809      	ldr	r0, [pc, #36]	@ (800ea48 <_Bfree+0x40>)
 800ea22:	218f      	movs	r1, #143	@ 0x8f
 800ea24:	f000 ff1e 	bl	800f864 <__assert_func>
 800ea28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea2c:	6006      	str	r6, [r0, #0]
 800ea2e:	60c6      	str	r6, [r0, #12]
 800ea30:	b13c      	cbz	r4, 800ea42 <_Bfree+0x3a>
 800ea32:	69eb      	ldr	r3, [r5, #28]
 800ea34:	6862      	ldr	r2, [r4, #4]
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea3c:	6021      	str	r1, [r4, #0]
 800ea3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea42:	bd70      	pop	{r4, r5, r6, pc}
 800ea44:	0800fea7 	.word	0x0800fea7
 800ea48:	0800ff27 	.word	0x0800ff27

0800ea4c <__multadd>:
 800ea4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea50:	690d      	ldr	r5, [r1, #16]
 800ea52:	4607      	mov	r7, r0
 800ea54:	460c      	mov	r4, r1
 800ea56:	461e      	mov	r6, r3
 800ea58:	f101 0c14 	add.w	ip, r1, #20
 800ea5c:	2000      	movs	r0, #0
 800ea5e:	f8dc 3000 	ldr.w	r3, [ip]
 800ea62:	b299      	uxth	r1, r3
 800ea64:	fb02 6101 	mla	r1, r2, r1, r6
 800ea68:	0c1e      	lsrs	r6, r3, #16
 800ea6a:	0c0b      	lsrs	r3, r1, #16
 800ea6c:	fb02 3306 	mla	r3, r2, r6, r3
 800ea70:	b289      	uxth	r1, r1
 800ea72:	3001      	adds	r0, #1
 800ea74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ea78:	4285      	cmp	r5, r0
 800ea7a:	f84c 1b04 	str.w	r1, [ip], #4
 800ea7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ea82:	dcec      	bgt.n	800ea5e <__multadd+0x12>
 800ea84:	b30e      	cbz	r6, 800eaca <__multadd+0x7e>
 800ea86:	68a3      	ldr	r3, [r4, #8]
 800ea88:	42ab      	cmp	r3, r5
 800ea8a:	dc19      	bgt.n	800eac0 <__multadd+0x74>
 800ea8c:	6861      	ldr	r1, [r4, #4]
 800ea8e:	4638      	mov	r0, r7
 800ea90:	3101      	adds	r1, #1
 800ea92:	f7ff ff79 	bl	800e988 <_Balloc>
 800ea96:	4680      	mov	r8, r0
 800ea98:	b928      	cbnz	r0, 800eaa6 <__multadd+0x5a>
 800ea9a:	4602      	mov	r2, r0
 800ea9c:	4b0c      	ldr	r3, [pc, #48]	@ (800ead0 <__multadd+0x84>)
 800ea9e:	480d      	ldr	r0, [pc, #52]	@ (800ead4 <__multadd+0x88>)
 800eaa0:	21ba      	movs	r1, #186	@ 0xba
 800eaa2:	f000 fedf 	bl	800f864 <__assert_func>
 800eaa6:	6922      	ldr	r2, [r4, #16]
 800eaa8:	3202      	adds	r2, #2
 800eaaa:	f104 010c 	add.w	r1, r4, #12
 800eaae:	0092      	lsls	r2, r2, #2
 800eab0:	300c      	adds	r0, #12
 800eab2:	f7ff f800 	bl	800dab6 <memcpy>
 800eab6:	4621      	mov	r1, r4
 800eab8:	4638      	mov	r0, r7
 800eaba:	f7ff ffa5 	bl	800ea08 <_Bfree>
 800eabe:	4644      	mov	r4, r8
 800eac0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eac4:	3501      	adds	r5, #1
 800eac6:	615e      	str	r6, [r3, #20]
 800eac8:	6125      	str	r5, [r4, #16]
 800eaca:	4620      	mov	r0, r4
 800eacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ead0:	0800ff16 	.word	0x0800ff16
 800ead4:	0800ff27 	.word	0x0800ff27

0800ead8 <__hi0bits>:
 800ead8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eadc:	4603      	mov	r3, r0
 800eade:	bf36      	itet	cc
 800eae0:	0403      	lslcc	r3, r0, #16
 800eae2:	2000      	movcs	r0, #0
 800eae4:	2010      	movcc	r0, #16
 800eae6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eaea:	bf3c      	itt	cc
 800eaec:	021b      	lslcc	r3, r3, #8
 800eaee:	3008      	addcc	r0, #8
 800eaf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eaf4:	bf3c      	itt	cc
 800eaf6:	011b      	lslcc	r3, r3, #4
 800eaf8:	3004      	addcc	r0, #4
 800eafa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eafe:	bf3c      	itt	cc
 800eb00:	009b      	lslcc	r3, r3, #2
 800eb02:	3002      	addcc	r0, #2
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	db05      	blt.n	800eb14 <__hi0bits+0x3c>
 800eb08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eb0c:	f100 0001 	add.w	r0, r0, #1
 800eb10:	bf08      	it	eq
 800eb12:	2020      	moveq	r0, #32
 800eb14:	4770      	bx	lr

0800eb16 <__lo0bits>:
 800eb16:	6803      	ldr	r3, [r0, #0]
 800eb18:	4602      	mov	r2, r0
 800eb1a:	f013 0007 	ands.w	r0, r3, #7
 800eb1e:	d00b      	beq.n	800eb38 <__lo0bits+0x22>
 800eb20:	07d9      	lsls	r1, r3, #31
 800eb22:	d421      	bmi.n	800eb68 <__lo0bits+0x52>
 800eb24:	0798      	lsls	r0, r3, #30
 800eb26:	bf49      	itett	mi
 800eb28:	085b      	lsrmi	r3, r3, #1
 800eb2a:	089b      	lsrpl	r3, r3, #2
 800eb2c:	2001      	movmi	r0, #1
 800eb2e:	6013      	strmi	r3, [r2, #0]
 800eb30:	bf5c      	itt	pl
 800eb32:	6013      	strpl	r3, [r2, #0]
 800eb34:	2002      	movpl	r0, #2
 800eb36:	4770      	bx	lr
 800eb38:	b299      	uxth	r1, r3
 800eb3a:	b909      	cbnz	r1, 800eb40 <__lo0bits+0x2a>
 800eb3c:	0c1b      	lsrs	r3, r3, #16
 800eb3e:	2010      	movs	r0, #16
 800eb40:	b2d9      	uxtb	r1, r3
 800eb42:	b909      	cbnz	r1, 800eb48 <__lo0bits+0x32>
 800eb44:	3008      	adds	r0, #8
 800eb46:	0a1b      	lsrs	r3, r3, #8
 800eb48:	0719      	lsls	r1, r3, #28
 800eb4a:	bf04      	itt	eq
 800eb4c:	091b      	lsreq	r3, r3, #4
 800eb4e:	3004      	addeq	r0, #4
 800eb50:	0799      	lsls	r1, r3, #30
 800eb52:	bf04      	itt	eq
 800eb54:	089b      	lsreq	r3, r3, #2
 800eb56:	3002      	addeq	r0, #2
 800eb58:	07d9      	lsls	r1, r3, #31
 800eb5a:	d403      	bmi.n	800eb64 <__lo0bits+0x4e>
 800eb5c:	085b      	lsrs	r3, r3, #1
 800eb5e:	f100 0001 	add.w	r0, r0, #1
 800eb62:	d003      	beq.n	800eb6c <__lo0bits+0x56>
 800eb64:	6013      	str	r3, [r2, #0]
 800eb66:	4770      	bx	lr
 800eb68:	2000      	movs	r0, #0
 800eb6a:	4770      	bx	lr
 800eb6c:	2020      	movs	r0, #32
 800eb6e:	4770      	bx	lr

0800eb70 <__i2b>:
 800eb70:	b510      	push	{r4, lr}
 800eb72:	460c      	mov	r4, r1
 800eb74:	2101      	movs	r1, #1
 800eb76:	f7ff ff07 	bl	800e988 <_Balloc>
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	b928      	cbnz	r0, 800eb8a <__i2b+0x1a>
 800eb7e:	4b05      	ldr	r3, [pc, #20]	@ (800eb94 <__i2b+0x24>)
 800eb80:	4805      	ldr	r0, [pc, #20]	@ (800eb98 <__i2b+0x28>)
 800eb82:	f240 1145 	movw	r1, #325	@ 0x145
 800eb86:	f000 fe6d 	bl	800f864 <__assert_func>
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	6144      	str	r4, [r0, #20]
 800eb8e:	6103      	str	r3, [r0, #16]
 800eb90:	bd10      	pop	{r4, pc}
 800eb92:	bf00      	nop
 800eb94:	0800ff16 	.word	0x0800ff16
 800eb98:	0800ff27 	.word	0x0800ff27

0800eb9c <__multiply>:
 800eb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba0:	4617      	mov	r7, r2
 800eba2:	690a      	ldr	r2, [r1, #16]
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	bfa8      	it	ge
 800ebaa:	463b      	movge	r3, r7
 800ebac:	4689      	mov	r9, r1
 800ebae:	bfa4      	itt	ge
 800ebb0:	460f      	movge	r7, r1
 800ebb2:	4699      	movge	r9, r3
 800ebb4:	693d      	ldr	r5, [r7, #16]
 800ebb6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	6879      	ldr	r1, [r7, #4]
 800ebbe:	eb05 060a 	add.w	r6, r5, sl
 800ebc2:	42b3      	cmp	r3, r6
 800ebc4:	b085      	sub	sp, #20
 800ebc6:	bfb8      	it	lt
 800ebc8:	3101      	addlt	r1, #1
 800ebca:	f7ff fedd 	bl	800e988 <_Balloc>
 800ebce:	b930      	cbnz	r0, 800ebde <__multiply+0x42>
 800ebd0:	4602      	mov	r2, r0
 800ebd2:	4b41      	ldr	r3, [pc, #260]	@ (800ecd8 <__multiply+0x13c>)
 800ebd4:	4841      	ldr	r0, [pc, #260]	@ (800ecdc <__multiply+0x140>)
 800ebd6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ebda:	f000 fe43 	bl	800f864 <__assert_func>
 800ebde:	f100 0414 	add.w	r4, r0, #20
 800ebe2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ebe6:	4623      	mov	r3, r4
 800ebe8:	2200      	movs	r2, #0
 800ebea:	4573      	cmp	r3, lr
 800ebec:	d320      	bcc.n	800ec30 <__multiply+0x94>
 800ebee:	f107 0814 	add.w	r8, r7, #20
 800ebf2:	f109 0114 	add.w	r1, r9, #20
 800ebf6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ebfa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ebfe:	9302      	str	r3, [sp, #8]
 800ec00:	1beb      	subs	r3, r5, r7
 800ec02:	3b15      	subs	r3, #21
 800ec04:	f023 0303 	bic.w	r3, r3, #3
 800ec08:	3304      	adds	r3, #4
 800ec0a:	3715      	adds	r7, #21
 800ec0c:	42bd      	cmp	r5, r7
 800ec0e:	bf38      	it	cc
 800ec10:	2304      	movcc	r3, #4
 800ec12:	9301      	str	r3, [sp, #4]
 800ec14:	9b02      	ldr	r3, [sp, #8]
 800ec16:	9103      	str	r1, [sp, #12]
 800ec18:	428b      	cmp	r3, r1
 800ec1a:	d80c      	bhi.n	800ec36 <__multiply+0x9a>
 800ec1c:	2e00      	cmp	r6, #0
 800ec1e:	dd03      	ble.n	800ec28 <__multiply+0x8c>
 800ec20:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d055      	beq.n	800ecd4 <__multiply+0x138>
 800ec28:	6106      	str	r6, [r0, #16]
 800ec2a:	b005      	add	sp, #20
 800ec2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec30:	f843 2b04 	str.w	r2, [r3], #4
 800ec34:	e7d9      	b.n	800ebea <__multiply+0x4e>
 800ec36:	f8b1 a000 	ldrh.w	sl, [r1]
 800ec3a:	f1ba 0f00 	cmp.w	sl, #0
 800ec3e:	d01f      	beq.n	800ec80 <__multiply+0xe4>
 800ec40:	46c4      	mov	ip, r8
 800ec42:	46a1      	mov	r9, r4
 800ec44:	2700      	movs	r7, #0
 800ec46:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ec4a:	f8d9 3000 	ldr.w	r3, [r9]
 800ec4e:	fa1f fb82 	uxth.w	fp, r2
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	fb0a 330b 	mla	r3, sl, fp, r3
 800ec58:	443b      	add	r3, r7
 800ec5a:	f8d9 7000 	ldr.w	r7, [r9]
 800ec5e:	0c12      	lsrs	r2, r2, #16
 800ec60:	0c3f      	lsrs	r7, r7, #16
 800ec62:	fb0a 7202 	mla	r2, sl, r2, r7
 800ec66:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec70:	4565      	cmp	r5, ip
 800ec72:	f849 3b04 	str.w	r3, [r9], #4
 800ec76:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ec7a:	d8e4      	bhi.n	800ec46 <__multiply+0xaa>
 800ec7c:	9b01      	ldr	r3, [sp, #4]
 800ec7e:	50e7      	str	r7, [r4, r3]
 800ec80:	9b03      	ldr	r3, [sp, #12]
 800ec82:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ec86:	3104      	adds	r1, #4
 800ec88:	f1b9 0f00 	cmp.w	r9, #0
 800ec8c:	d020      	beq.n	800ecd0 <__multiply+0x134>
 800ec8e:	6823      	ldr	r3, [r4, #0]
 800ec90:	4647      	mov	r7, r8
 800ec92:	46a4      	mov	ip, r4
 800ec94:	f04f 0a00 	mov.w	sl, #0
 800ec98:	f8b7 b000 	ldrh.w	fp, [r7]
 800ec9c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800eca0:	fb09 220b 	mla	r2, r9, fp, r2
 800eca4:	4452      	add	r2, sl
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ecac:	f84c 3b04 	str.w	r3, [ip], #4
 800ecb0:	f857 3b04 	ldr.w	r3, [r7], #4
 800ecb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ecb8:	f8bc 3000 	ldrh.w	r3, [ip]
 800ecbc:	fb09 330a 	mla	r3, r9, sl, r3
 800ecc0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ecc4:	42bd      	cmp	r5, r7
 800ecc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ecca:	d8e5      	bhi.n	800ec98 <__multiply+0xfc>
 800eccc:	9a01      	ldr	r2, [sp, #4]
 800ecce:	50a3      	str	r3, [r4, r2]
 800ecd0:	3404      	adds	r4, #4
 800ecd2:	e79f      	b.n	800ec14 <__multiply+0x78>
 800ecd4:	3e01      	subs	r6, #1
 800ecd6:	e7a1      	b.n	800ec1c <__multiply+0x80>
 800ecd8:	0800ff16 	.word	0x0800ff16
 800ecdc:	0800ff27 	.word	0x0800ff27

0800ece0 <__pow5mult>:
 800ece0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ece4:	4615      	mov	r5, r2
 800ece6:	f012 0203 	ands.w	r2, r2, #3
 800ecea:	4607      	mov	r7, r0
 800ecec:	460e      	mov	r6, r1
 800ecee:	d007      	beq.n	800ed00 <__pow5mult+0x20>
 800ecf0:	4c25      	ldr	r4, [pc, #148]	@ (800ed88 <__pow5mult+0xa8>)
 800ecf2:	3a01      	subs	r2, #1
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ecfa:	f7ff fea7 	bl	800ea4c <__multadd>
 800ecfe:	4606      	mov	r6, r0
 800ed00:	10ad      	asrs	r5, r5, #2
 800ed02:	d03d      	beq.n	800ed80 <__pow5mult+0xa0>
 800ed04:	69fc      	ldr	r4, [r7, #28]
 800ed06:	b97c      	cbnz	r4, 800ed28 <__pow5mult+0x48>
 800ed08:	2010      	movs	r0, #16
 800ed0a:	f7ff fd87 	bl	800e81c <malloc>
 800ed0e:	4602      	mov	r2, r0
 800ed10:	61f8      	str	r0, [r7, #28]
 800ed12:	b928      	cbnz	r0, 800ed20 <__pow5mult+0x40>
 800ed14:	4b1d      	ldr	r3, [pc, #116]	@ (800ed8c <__pow5mult+0xac>)
 800ed16:	481e      	ldr	r0, [pc, #120]	@ (800ed90 <__pow5mult+0xb0>)
 800ed18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ed1c:	f000 fda2 	bl	800f864 <__assert_func>
 800ed20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed24:	6004      	str	r4, [r0, #0]
 800ed26:	60c4      	str	r4, [r0, #12]
 800ed28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ed2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed30:	b94c      	cbnz	r4, 800ed46 <__pow5mult+0x66>
 800ed32:	f240 2171 	movw	r1, #625	@ 0x271
 800ed36:	4638      	mov	r0, r7
 800ed38:	f7ff ff1a 	bl	800eb70 <__i2b>
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ed42:	4604      	mov	r4, r0
 800ed44:	6003      	str	r3, [r0, #0]
 800ed46:	f04f 0900 	mov.w	r9, #0
 800ed4a:	07eb      	lsls	r3, r5, #31
 800ed4c:	d50a      	bpl.n	800ed64 <__pow5mult+0x84>
 800ed4e:	4631      	mov	r1, r6
 800ed50:	4622      	mov	r2, r4
 800ed52:	4638      	mov	r0, r7
 800ed54:	f7ff ff22 	bl	800eb9c <__multiply>
 800ed58:	4631      	mov	r1, r6
 800ed5a:	4680      	mov	r8, r0
 800ed5c:	4638      	mov	r0, r7
 800ed5e:	f7ff fe53 	bl	800ea08 <_Bfree>
 800ed62:	4646      	mov	r6, r8
 800ed64:	106d      	asrs	r5, r5, #1
 800ed66:	d00b      	beq.n	800ed80 <__pow5mult+0xa0>
 800ed68:	6820      	ldr	r0, [r4, #0]
 800ed6a:	b938      	cbnz	r0, 800ed7c <__pow5mult+0x9c>
 800ed6c:	4622      	mov	r2, r4
 800ed6e:	4621      	mov	r1, r4
 800ed70:	4638      	mov	r0, r7
 800ed72:	f7ff ff13 	bl	800eb9c <__multiply>
 800ed76:	6020      	str	r0, [r4, #0]
 800ed78:	f8c0 9000 	str.w	r9, [r0]
 800ed7c:	4604      	mov	r4, r0
 800ed7e:	e7e4      	b.n	800ed4a <__pow5mult+0x6a>
 800ed80:	4630      	mov	r0, r6
 800ed82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed86:	bf00      	nop
 800ed88:	0800ffd8 	.word	0x0800ffd8
 800ed8c:	0800fea7 	.word	0x0800fea7
 800ed90:	0800ff27 	.word	0x0800ff27

0800ed94 <__lshift>:
 800ed94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed98:	460c      	mov	r4, r1
 800ed9a:	6849      	ldr	r1, [r1, #4]
 800ed9c:	6923      	ldr	r3, [r4, #16]
 800ed9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eda2:	68a3      	ldr	r3, [r4, #8]
 800eda4:	4607      	mov	r7, r0
 800eda6:	4691      	mov	r9, r2
 800eda8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800edac:	f108 0601 	add.w	r6, r8, #1
 800edb0:	42b3      	cmp	r3, r6
 800edb2:	db0b      	blt.n	800edcc <__lshift+0x38>
 800edb4:	4638      	mov	r0, r7
 800edb6:	f7ff fde7 	bl	800e988 <_Balloc>
 800edba:	4605      	mov	r5, r0
 800edbc:	b948      	cbnz	r0, 800edd2 <__lshift+0x3e>
 800edbe:	4602      	mov	r2, r0
 800edc0:	4b28      	ldr	r3, [pc, #160]	@ (800ee64 <__lshift+0xd0>)
 800edc2:	4829      	ldr	r0, [pc, #164]	@ (800ee68 <__lshift+0xd4>)
 800edc4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800edc8:	f000 fd4c 	bl	800f864 <__assert_func>
 800edcc:	3101      	adds	r1, #1
 800edce:	005b      	lsls	r3, r3, #1
 800edd0:	e7ee      	b.n	800edb0 <__lshift+0x1c>
 800edd2:	2300      	movs	r3, #0
 800edd4:	f100 0114 	add.w	r1, r0, #20
 800edd8:	f100 0210 	add.w	r2, r0, #16
 800eddc:	4618      	mov	r0, r3
 800edde:	4553      	cmp	r3, sl
 800ede0:	db33      	blt.n	800ee4a <__lshift+0xb6>
 800ede2:	6920      	ldr	r0, [r4, #16]
 800ede4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ede8:	f104 0314 	add.w	r3, r4, #20
 800edec:	f019 091f 	ands.w	r9, r9, #31
 800edf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800edf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800edf8:	d02b      	beq.n	800ee52 <__lshift+0xbe>
 800edfa:	f1c9 0e20 	rsb	lr, r9, #32
 800edfe:	468a      	mov	sl, r1
 800ee00:	2200      	movs	r2, #0
 800ee02:	6818      	ldr	r0, [r3, #0]
 800ee04:	fa00 f009 	lsl.w	r0, r0, r9
 800ee08:	4310      	orrs	r0, r2
 800ee0a:	f84a 0b04 	str.w	r0, [sl], #4
 800ee0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee12:	459c      	cmp	ip, r3
 800ee14:	fa22 f20e 	lsr.w	r2, r2, lr
 800ee18:	d8f3      	bhi.n	800ee02 <__lshift+0x6e>
 800ee1a:	ebac 0304 	sub.w	r3, ip, r4
 800ee1e:	3b15      	subs	r3, #21
 800ee20:	f023 0303 	bic.w	r3, r3, #3
 800ee24:	3304      	adds	r3, #4
 800ee26:	f104 0015 	add.w	r0, r4, #21
 800ee2a:	4560      	cmp	r0, ip
 800ee2c:	bf88      	it	hi
 800ee2e:	2304      	movhi	r3, #4
 800ee30:	50ca      	str	r2, [r1, r3]
 800ee32:	b10a      	cbz	r2, 800ee38 <__lshift+0xa4>
 800ee34:	f108 0602 	add.w	r6, r8, #2
 800ee38:	3e01      	subs	r6, #1
 800ee3a:	4638      	mov	r0, r7
 800ee3c:	612e      	str	r6, [r5, #16]
 800ee3e:	4621      	mov	r1, r4
 800ee40:	f7ff fde2 	bl	800ea08 <_Bfree>
 800ee44:	4628      	mov	r0, r5
 800ee46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee4a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ee4e:	3301      	adds	r3, #1
 800ee50:	e7c5      	b.n	800edde <__lshift+0x4a>
 800ee52:	3904      	subs	r1, #4
 800ee54:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee58:	f841 2f04 	str.w	r2, [r1, #4]!
 800ee5c:	459c      	cmp	ip, r3
 800ee5e:	d8f9      	bhi.n	800ee54 <__lshift+0xc0>
 800ee60:	e7ea      	b.n	800ee38 <__lshift+0xa4>
 800ee62:	bf00      	nop
 800ee64:	0800ff16 	.word	0x0800ff16
 800ee68:	0800ff27 	.word	0x0800ff27

0800ee6c <__mcmp>:
 800ee6c:	690a      	ldr	r2, [r1, #16]
 800ee6e:	4603      	mov	r3, r0
 800ee70:	6900      	ldr	r0, [r0, #16]
 800ee72:	1a80      	subs	r0, r0, r2
 800ee74:	b530      	push	{r4, r5, lr}
 800ee76:	d10e      	bne.n	800ee96 <__mcmp+0x2a>
 800ee78:	3314      	adds	r3, #20
 800ee7a:	3114      	adds	r1, #20
 800ee7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ee80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ee84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ee88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ee8c:	4295      	cmp	r5, r2
 800ee8e:	d003      	beq.n	800ee98 <__mcmp+0x2c>
 800ee90:	d205      	bcs.n	800ee9e <__mcmp+0x32>
 800ee92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ee96:	bd30      	pop	{r4, r5, pc}
 800ee98:	42a3      	cmp	r3, r4
 800ee9a:	d3f3      	bcc.n	800ee84 <__mcmp+0x18>
 800ee9c:	e7fb      	b.n	800ee96 <__mcmp+0x2a>
 800ee9e:	2001      	movs	r0, #1
 800eea0:	e7f9      	b.n	800ee96 <__mcmp+0x2a>
	...

0800eea4 <__mdiff>:
 800eea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea8:	4689      	mov	r9, r1
 800eeaa:	4606      	mov	r6, r0
 800eeac:	4611      	mov	r1, r2
 800eeae:	4648      	mov	r0, r9
 800eeb0:	4614      	mov	r4, r2
 800eeb2:	f7ff ffdb 	bl	800ee6c <__mcmp>
 800eeb6:	1e05      	subs	r5, r0, #0
 800eeb8:	d112      	bne.n	800eee0 <__mdiff+0x3c>
 800eeba:	4629      	mov	r1, r5
 800eebc:	4630      	mov	r0, r6
 800eebe:	f7ff fd63 	bl	800e988 <_Balloc>
 800eec2:	4602      	mov	r2, r0
 800eec4:	b928      	cbnz	r0, 800eed2 <__mdiff+0x2e>
 800eec6:	4b3f      	ldr	r3, [pc, #252]	@ (800efc4 <__mdiff+0x120>)
 800eec8:	f240 2137 	movw	r1, #567	@ 0x237
 800eecc:	483e      	ldr	r0, [pc, #248]	@ (800efc8 <__mdiff+0x124>)
 800eece:	f000 fcc9 	bl	800f864 <__assert_func>
 800eed2:	2301      	movs	r3, #1
 800eed4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eed8:	4610      	mov	r0, r2
 800eeda:	b003      	add	sp, #12
 800eedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eee0:	bfbc      	itt	lt
 800eee2:	464b      	movlt	r3, r9
 800eee4:	46a1      	movlt	r9, r4
 800eee6:	4630      	mov	r0, r6
 800eee8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eeec:	bfba      	itte	lt
 800eeee:	461c      	movlt	r4, r3
 800eef0:	2501      	movlt	r5, #1
 800eef2:	2500      	movge	r5, #0
 800eef4:	f7ff fd48 	bl	800e988 <_Balloc>
 800eef8:	4602      	mov	r2, r0
 800eefa:	b918      	cbnz	r0, 800ef04 <__mdiff+0x60>
 800eefc:	4b31      	ldr	r3, [pc, #196]	@ (800efc4 <__mdiff+0x120>)
 800eefe:	f240 2145 	movw	r1, #581	@ 0x245
 800ef02:	e7e3      	b.n	800eecc <__mdiff+0x28>
 800ef04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ef08:	6926      	ldr	r6, [r4, #16]
 800ef0a:	60c5      	str	r5, [r0, #12]
 800ef0c:	f109 0310 	add.w	r3, r9, #16
 800ef10:	f109 0514 	add.w	r5, r9, #20
 800ef14:	f104 0e14 	add.w	lr, r4, #20
 800ef18:	f100 0b14 	add.w	fp, r0, #20
 800ef1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ef20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ef24:	9301      	str	r3, [sp, #4]
 800ef26:	46d9      	mov	r9, fp
 800ef28:	f04f 0c00 	mov.w	ip, #0
 800ef2c:	9b01      	ldr	r3, [sp, #4]
 800ef2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ef32:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ef36:	9301      	str	r3, [sp, #4]
 800ef38:	fa1f f38a 	uxth.w	r3, sl
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	b283      	uxth	r3, r0
 800ef40:	1acb      	subs	r3, r1, r3
 800ef42:	0c00      	lsrs	r0, r0, #16
 800ef44:	4463      	add	r3, ip
 800ef46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ef4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ef54:	4576      	cmp	r6, lr
 800ef56:	f849 3b04 	str.w	r3, [r9], #4
 800ef5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef5e:	d8e5      	bhi.n	800ef2c <__mdiff+0x88>
 800ef60:	1b33      	subs	r3, r6, r4
 800ef62:	3b15      	subs	r3, #21
 800ef64:	f023 0303 	bic.w	r3, r3, #3
 800ef68:	3415      	adds	r4, #21
 800ef6a:	3304      	adds	r3, #4
 800ef6c:	42a6      	cmp	r6, r4
 800ef6e:	bf38      	it	cc
 800ef70:	2304      	movcc	r3, #4
 800ef72:	441d      	add	r5, r3
 800ef74:	445b      	add	r3, fp
 800ef76:	461e      	mov	r6, r3
 800ef78:	462c      	mov	r4, r5
 800ef7a:	4544      	cmp	r4, r8
 800ef7c:	d30e      	bcc.n	800ef9c <__mdiff+0xf8>
 800ef7e:	f108 0103 	add.w	r1, r8, #3
 800ef82:	1b49      	subs	r1, r1, r5
 800ef84:	f021 0103 	bic.w	r1, r1, #3
 800ef88:	3d03      	subs	r5, #3
 800ef8a:	45a8      	cmp	r8, r5
 800ef8c:	bf38      	it	cc
 800ef8e:	2100      	movcc	r1, #0
 800ef90:	440b      	add	r3, r1
 800ef92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ef96:	b191      	cbz	r1, 800efbe <__mdiff+0x11a>
 800ef98:	6117      	str	r7, [r2, #16]
 800ef9a:	e79d      	b.n	800eed8 <__mdiff+0x34>
 800ef9c:	f854 1b04 	ldr.w	r1, [r4], #4
 800efa0:	46e6      	mov	lr, ip
 800efa2:	0c08      	lsrs	r0, r1, #16
 800efa4:	fa1c fc81 	uxtah	ip, ip, r1
 800efa8:	4471      	add	r1, lr
 800efaa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800efae:	b289      	uxth	r1, r1
 800efb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800efb4:	f846 1b04 	str.w	r1, [r6], #4
 800efb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800efbc:	e7dd      	b.n	800ef7a <__mdiff+0xd6>
 800efbe:	3f01      	subs	r7, #1
 800efc0:	e7e7      	b.n	800ef92 <__mdiff+0xee>
 800efc2:	bf00      	nop
 800efc4:	0800ff16 	.word	0x0800ff16
 800efc8:	0800ff27 	.word	0x0800ff27

0800efcc <__d2b>:
 800efcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800efd0:	460f      	mov	r7, r1
 800efd2:	2101      	movs	r1, #1
 800efd4:	ec59 8b10 	vmov	r8, r9, d0
 800efd8:	4616      	mov	r6, r2
 800efda:	f7ff fcd5 	bl	800e988 <_Balloc>
 800efde:	4604      	mov	r4, r0
 800efe0:	b930      	cbnz	r0, 800eff0 <__d2b+0x24>
 800efe2:	4602      	mov	r2, r0
 800efe4:	4b23      	ldr	r3, [pc, #140]	@ (800f074 <__d2b+0xa8>)
 800efe6:	4824      	ldr	r0, [pc, #144]	@ (800f078 <__d2b+0xac>)
 800efe8:	f240 310f 	movw	r1, #783	@ 0x30f
 800efec:	f000 fc3a 	bl	800f864 <__assert_func>
 800eff0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eff4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eff8:	b10d      	cbz	r5, 800effe <__d2b+0x32>
 800effa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800effe:	9301      	str	r3, [sp, #4]
 800f000:	f1b8 0300 	subs.w	r3, r8, #0
 800f004:	d023      	beq.n	800f04e <__d2b+0x82>
 800f006:	4668      	mov	r0, sp
 800f008:	9300      	str	r3, [sp, #0]
 800f00a:	f7ff fd84 	bl	800eb16 <__lo0bits>
 800f00e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f012:	b1d0      	cbz	r0, 800f04a <__d2b+0x7e>
 800f014:	f1c0 0320 	rsb	r3, r0, #32
 800f018:	fa02 f303 	lsl.w	r3, r2, r3
 800f01c:	430b      	orrs	r3, r1
 800f01e:	40c2      	lsrs	r2, r0
 800f020:	6163      	str	r3, [r4, #20]
 800f022:	9201      	str	r2, [sp, #4]
 800f024:	9b01      	ldr	r3, [sp, #4]
 800f026:	61a3      	str	r3, [r4, #24]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	bf0c      	ite	eq
 800f02c:	2201      	moveq	r2, #1
 800f02e:	2202      	movne	r2, #2
 800f030:	6122      	str	r2, [r4, #16]
 800f032:	b1a5      	cbz	r5, 800f05e <__d2b+0x92>
 800f034:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f038:	4405      	add	r5, r0
 800f03a:	603d      	str	r5, [r7, #0]
 800f03c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f040:	6030      	str	r0, [r6, #0]
 800f042:	4620      	mov	r0, r4
 800f044:	b003      	add	sp, #12
 800f046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f04a:	6161      	str	r1, [r4, #20]
 800f04c:	e7ea      	b.n	800f024 <__d2b+0x58>
 800f04e:	a801      	add	r0, sp, #4
 800f050:	f7ff fd61 	bl	800eb16 <__lo0bits>
 800f054:	9b01      	ldr	r3, [sp, #4]
 800f056:	6163      	str	r3, [r4, #20]
 800f058:	3020      	adds	r0, #32
 800f05a:	2201      	movs	r2, #1
 800f05c:	e7e8      	b.n	800f030 <__d2b+0x64>
 800f05e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f062:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f066:	6038      	str	r0, [r7, #0]
 800f068:	6918      	ldr	r0, [r3, #16]
 800f06a:	f7ff fd35 	bl	800ead8 <__hi0bits>
 800f06e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f072:	e7e5      	b.n	800f040 <__d2b+0x74>
 800f074:	0800ff16 	.word	0x0800ff16
 800f078:	0800ff27 	.word	0x0800ff27

0800f07c <__ssputs_r>:
 800f07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f080:	688e      	ldr	r6, [r1, #8]
 800f082:	461f      	mov	r7, r3
 800f084:	42be      	cmp	r6, r7
 800f086:	680b      	ldr	r3, [r1, #0]
 800f088:	4682      	mov	sl, r0
 800f08a:	460c      	mov	r4, r1
 800f08c:	4690      	mov	r8, r2
 800f08e:	d82d      	bhi.n	800f0ec <__ssputs_r+0x70>
 800f090:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f094:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f098:	d026      	beq.n	800f0e8 <__ssputs_r+0x6c>
 800f09a:	6965      	ldr	r5, [r4, #20]
 800f09c:	6909      	ldr	r1, [r1, #16]
 800f09e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0a2:	eba3 0901 	sub.w	r9, r3, r1
 800f0a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0aa:	1c7b      	adds	r3, r7, #1
 800f0ac:	444b      	add	r3, r9
 800f0ae:	106d      	asrs	r5, r5, #1
 800f0b0:	429d      	cmp	r5, r3
 800f0b2:	bf38      	it	cc
 800f0b4:	461d      	movcc	r5, r3
 800f0b6:	0553      	lsls	r3, r2, #21
 800f0b8:	d527      	bpl.n	800f10a <__ssputs_r+0x8e>
 800f0ba:	4629      	mov	r1, r5
 800f0bc:	f7ff fbd8 	bl	800e870 <_malloc_r>
 800f0c0:	4606      	mov	r6, r0
 800f0c2:	b360      	cbz	r0, 800f11e <__ssputs_r+0xa2>
 800f0c4:	6921      	ldr	r1, [r4, #16]
 800f0c6:	464a      	mov	r2, r9
 800f0c8:	f7fe fcf5 	bl	800dab6 <memcpy>
 800f0cc:	89a3      	ldrh	r3, [r4, #12]
 800f0ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f0d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0d6:	81a3      	strh	r3, [r4, #12]
 800f0d8:	6126      	str	r6, [r4, #16]
 800f0da:	6165      	str	r5, [r4, #20]
 800f0dc:	444e      	add	r6, r9
 800f0de:	eba5 0509 	sub.w	r5, r5, r9
 800f0e2:	6026      	str	r6, [r4, #0]
 800f0e4:	60a5      	str	r5, [r4, #8]
 800f0e6:	463e      	mov	r6, r7
 800f0e8:	42be      	cmp	r6, r7
 800f0ea:	d900      	bls.n	800f0ee <__ssputs_r+0x72>
 800f0ec:	463e      	mov	r6, r7
 800f0ee:	6820      	ldr	r0, [r4, #0]
 800f0f0:	4632      	mov	r2, r6
 800f0f2:	4641      	mov	r1, r8
 800f0f4:	f000 fb6a 	bl	800f7cc <memmove>
 800f0f8:	68a3      	ldr	r3, [r4, #8]
 800f0fa:	1b9b      	subs	r3, r3, r6
 800f0fc:	60a3      	str	r3, [r4, #8]
 800f0fe:	6823      	ldr	r3, [r4, #0]
 800f100:	4433      	add	r3, r6
 800f102:	6023      	str	r3, [r4, #0]
 800f104:	2000      	movs	r0, #0
 800f106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f10a:	462a      	mov	r2, r5
 800f10c:	f000 fbee 	bl	800f8ec <_realloc_r>
 800f110:	4606      	mov	r6, r0
 800f112:	2800      	cmp	r0, #0
 800f114:	d1e0      	bne.n	800f0d8 <__ssputs_r+0x5c>
 800f116:	6921      	ldr	r1, [r4, #16]
 800f118:	4650      	mov	r0, sl
 800f11a:	f7ff fb35 	bl	800e788 <_free_r>
 800f11e:	230c      	movs	r3, #12
 800f120:	f8ca 3000 	str.w	r3, [sl]
 800f124:	89a3      	ldrh	r3, [r4, #12]
 800f126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f12a:	81a3      	strh	r3, [r4, #12]
 800f12c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f130:	e7e9      	b.n	800f106 <__ssputs_r+0x8a>
	...

0800f134 <_svfiprintf_r>:
 800f134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f138:	4698      	mov	r8, r3
 800f13a:	898b      	ldrh	r3, [r1, #12]
 800f13c:	061b      	lsls	r3, r3, #24
 800f13e:	b09d      	sub	sp, #116	@ 0x74
 800f140:	4607      	mov	r7, r0
 800f142:	460d      	mov	r5, r1
 800f144:	4614      	mov	r4, r2
 800f146:	d510      	bpl.n	800f16a <_svfiprintf_r+0x36>
 800f148:	690b      	ldr	r3, [r1, #16]
 800f14a:	b973      	cbnz	r3, 800f16a <_svfiprintf_r+0x36>
 800f14c:	2140      	movs	r1, #64	@ 0x40
 800f14e:	f7ff fb8f 	bl	800e870 <_malloc_r>
 800f152:	6028      	str	r0, [r5, #0]
 800f154:	6128      	str	r0, [r5, #16]
 800f156:	b930      	cbnz	r0, 800f166 <_svfiprintf_r+0x32>
 800f158:	230c      	movs	r3, #12
 800f15a:	603b      	str	r3, [r7, #0]
 800f15c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f160:	b01d      	add	sp, #116	@ 0x74
 800f162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f166:	2340      	movs	r3, #64	@ 0x40
 800f168:	616b      	str	r3, [r5, #20]
 800f16a:	2300      	movs	r3, #0
 800f16c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f16e:	2320      	movs	r3, #32
 800f170:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f174:	f8cd 800c 	str.w	r8, [sp, #12]
 800f178:	2330      	movs	r3, #48	@ 0x30
 800f17a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f318 <_svfiprintf_r+0x1e4>
 800f17e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f182:	f04f 0901 	mov.w	r9, #1
 800f186:	4623      	mov	r3, r4
 800f188:	469a      	mov	sl, r3
 800f18a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f18e:	b10a      	cbz	r2, 800f194 <_svfiprintf_r+0x60>
 800f190:	2a25      	cmp	r2, #37	@ 0x25
 800f192:	d1f9      	bne.n	800f188 <_svfiprintf_r+0x54>
 800f194:	ebba 0b04 	subs.w	fp, sl, r4
 800f198:	d00b      	beq.n	800f1b2 <_svfiprintf_r+0x7e>
 800f19a:	465b      	mov	r3, fp
 800f19c:	4622      	mov	r2, r4
 800f19e:	4629      	mov	r1, r5
 800f1a0:	4638      	mov	r0, r7
 800f1a2:	f7ff ff6b 	bl	800f07c <__ssputs_r>
 800f1a6:	3001      	adds	r0, #1
 800f1a8:	f000 80a7 	beq.w	800f2fa <_svfiprintf_r+0x1c6>
 800f1ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1ae:	445a      	add	r2, fp
 800f1b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f1b2:	f89a 3000 	ldrb.w	r3, [sl]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	f000 809f 	beq.w	800f2fa <_svfiprintf_r+0x1c6>
 800f1bc:	2300      	movs	r3, #0
 800f1be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f1c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1c6:	f10a 0a01 	add.w	sl, sl, #1
 800f1ca:	9304      	str	r3, [sp, #16]
 800f1cc:	9307      	str	r3, [sp, #28]
 800f1ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f1d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800f1d4:	4654      	mov	r4, sl
 800f1d6:	2205      	movs	r2, #5
 800f1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1dc:	484e      	ldr	r0, [pc, #312]	@ (800f318 <_svfiprintf_r+0x1e4>)
 800f1de:	f7f0 ffff 	bl	80001e0 <memchr>
 800f1e2:	9a04      	ldr	r2, [sp, #16]
 800f1e4:	b9d8      	cbnz	r0, 800f21e <_svfiprintf_r+0xea>
 800f1e6:	06d0      	lsls	r0, r2, #27
 800f1e8:	bf44      	itt	mi
 800f1ea:	2320      	movmi	r3, #32
 800f1ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f1f0:	0711      	lsls	r1, r2, #28
 800f1f2:	bf44      	itt	mi
 800f1f4:	232b      	movmi	r3, #43	@ 0x2b
 800f1f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f1fa:	f89a 3000 	ldrb.w	r3, [sl]
 800f1fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800f200:	d015      	beq.n	800f22e <_svfiprintf_r+0xfa>
 800f202:	9a07      	ldr	r2, [sp, #28]
 800f204:	4654      	mov	r4, sl
 800f206:	2000      	movs	r0, #0
 800f208:	f04f 0c0a 	mov.w	ip, #10
 800f20c:	4621      	mov	r1, r4
 800f20e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f212:	3b30      	subs	r3, #48	@ 0x30
 800f214:	2b09      	cmp	r3, #9
 800f216:	d94b      	bls.n	800f2b0 <_svfiprintf_r+0x17c>
 800f218:	b1b0      	cbz	r0, 800f248 <_svfiprintf_r+0x114>
 800f21a:	9207      	str	r2, [sp, #28]
 800f21c:	e014      	b.n	800f248 <_svfiprintf_r+0x114>
 800f21e:	eba0 0308 	sub.w	r3, r0, r8
 800f222:	fa09 f303 	lsl.w	r3, r9, r3
 800f226:	4313      	orrs	r3, r2
 800f228:	9304      	str	r3, [sp, #16]
 800f22a:	46a2      	mov	sl, r4
 800f22c:	e7d2      	b.n	800f1d4 <_svfiprintf_r+0xa0>
 800f22e:	9b03      	ldr	r3, [sp, #12]
 800f230:	1d19      	adds	r1, r3, #4
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	9103      	str	r1, [sp, #12]
 800f236:	2b00      	cmp	r3, #0
 800f238:	bfbb      	ittet	lt
 800f23a:	425b      	neglt	r3, r3
 800f23c:	f042 0202 	orrlt.w	r2, r2, #2
 800f240:	9307      	strge	r3, [sp, #28]
 800f242:	9307      	strlt	r3, [sp, #28]
 800f244:	bfb8      	it	lt
 800f246:	9204      	strlt	r2, [sp, #16]
 800f248:	7823      	ldrb	r3, [r4, #0]
 800f24a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f24c:	d10a      	bne.n	800f264 <_svfiprintf_r+0x130>
 800f24e:	7863      	ldrb	r3, [r4, #1]
 800f250:	2b2a      	cmp	r3, #42	@ 0x2a
 800f252:	d132      	bne.n	800f2ba <_svfiprintf_r+0x186>
 800f254:	9b03      	ldr	r3, [sp, #12]
 800f256:	1d1a      	adds	r2, r3, #4
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	9203      	str	r2, [sp, #12]
 800f25c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f260:	3402      	adds	r4, #2
 800f262:	9305      	str	r3, [sp, #20]
 800f264:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f328 <_svfiprintf_r+0x1f4>
 800f268:	7821      	ldrb	r1, [r4, #0]
 800f26a:	2203      	movs	r2, #3
 800f26c:	4650      	mov	r0, sl
 800f26e:	f7f0 ffb7 	bl	80001e0 <memchr>
 800f272:	b138      	cbz	r0, 800f284 <_svfiprintf_r+0x150>
 800f274:	9b04      	ldr	r3, [sp, #16]
 800f276:	eba0 000a 	sub.w	r0, r0, sl
 800f27a:	2240      	movs	r2, #64	@ 0x40
 800f27c:	4082      	lsls	r2, r0
 800f27e:	4313      	orrs	r3, r2
 800f280:	3401      	adds	r4, #1
 800f282:	9304      	str	r3, [sp, #16]
 800f284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f288:	4824      	ldr	r0, [pc, #144]	@ (800f31c <_svfiprintf_r+0x1e8>)
 800f28a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f28e:	2206      	movs	r2, #6
 800f290:	f7f0 ffa6 	bl	80001e0 <memchr>
 800f294:	2800      	cmp	r0, #0
 800f296:	d036      	beq.n	800f306 <_svfiprintf_r+0x1d2>
 800f298:	4b21      	ldr	r3, [pc, #132]	@ (800f320 <_svfiprintf_r+0x1ec>)
 800f29a:	bb1b      	cbnz	r3, 800f2e4 <_svfiprintf_r+0x1b0>
 800f29c:	9b03      	ldr	r3, [sp, #12]
 800f29e:	3307      	adds	r3, #7
 800f2a0:	f023 0307 	bic.w	r3, r3, #7
 800f2a4:	3308      	adds	r3, #8
 800f2a6:	9303      	str	r3, [sp, #12]
 800f2a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2aa:	4433      	add	r3, r6
 800f2ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2ae:	e76a      	b.n	800f186 <_svfiprintf_r+0x52>
 800f2b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2b4:	460c      	mov	r4, r1
 800f2b6:	2001      	movs	r0, #1
 800f2b8:	e7a8      	b.n	800f20c <_svfiprintf_r+0xd8>
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	3401      	adds	r4, #1
 800f2be:	9305      	str	r3, [sp, #20]
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	f04f 0c0a 	mov.w	ip, #10
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2cc:	3a30      	subs	r2, #48	@ 0x30
 800f2ce:	2a09      	cmp	r2, #9
 800f2d0:	d903      	bls.n	800f2da <_svfiprintf_r+0x1a6>
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d0c6      	beq.n	800f264 <_svfiprintf_r+0x130>
 800f2d6:	9105      	str	r1, [sp, #20]
 800f2d8:	e7c4      	b.n	800f264 <_svfiprintf_r+0x130>
 800f2da:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2de:	4604      	mov	r4, r0
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	e7f0      	b.n	800f2c6 <_svfiprintf_r+0x192>
 800f2e4:	ab03      	add	r3, sp, #12
 800f2e6:	9300      	str	r3, [sp, #0]
 800f2e8:	462a      	mov	r2, r5
 800f2ea:	4b0e      	ldr	r3, [pc, #56]	@ (800f324 <_svfiprintf_r+0x1f0>)
 800f2ec:	a904      	add	r1, sp, #16
 800f2ee:	4638      	mov	r0, r7
 800f2f0:	f7fd fd66 	bl	800cdc0 <_printf_float>
 800f2f4:	1c42      	adds	r2, r0, #1
 800f2f6:	4606      	mov	r6, r0
 800f2f8:	d1d6      	bne.n	800f2a8 <_svfiprintf_r+0x174>
 800f2fa:	89ab      	ldrh	r3, [r5, #12]
 800f2fc:	065b      	lsls	r3, r3, #25
 800f2fe:	f53f af2d 	bmi.w	800f15c <_svfiprintf_r+0x28>
 800f302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f304:	e72c      	b.n	800f160 <_svfiprintf_r+0x2c>
 800f306:	ab03      	add	r3, sp, #12
 800f308:	9300      	str	r3, [sp, #0]
 800f30a:	462a      	mov	r2, r5
 800f30c:	4b05      	ldr	r3, [pc, #20]	@ (800f324 <_svfiprintf_r+0x1f0>)
 800f30e:	a904      	add	r1, sp, #16
 800f310:	4638      	mov	r0, r7
 800f312:	f7fd ffed 	bl	800d2f0 <_printf_i>
 800f316:	e7ed      	b.n	800f2f4 <_svfiprintf_r+0x1c0>
 800f318:	0800ff80 	.word	0x0800ff80
 800f31c:	0800ff8a 	.word	0x0800ff8a
 800f320:	0800cdc1 	.word	0x0800cdc1
 800f324:	0800f07d 	.word	0x0800f07d
 800f328:	0800ff86 	.word	0x0800ff86

0800f32c <__sfputc_r>:
 800f32c:	6893      	ldr	r3, [r2, #8]
 800f32e:	3b01      	subs	r3, #1
 800f330:	2b00      	cmp	r3, #0
 800f332:	b410      	push	{r4}
 800f334:	6093      	str	r3, [r2, #8]
 800f336:	da08      	bge.n	800f34a <__sfputc_r+0x1e>
 800f338:	6994      	ldr	r4, [r2, #24]
 800f33a:	42a3      	cmp	r3, r4
 800f33c:	db01      	blt.n	800f342 <__sfputc_r+0x16>
 800f33e:	290a      	cmp	r1, #10
 800f340:	d103      	bne.n	800f34a <__sfputc_r+0x1e>
 800f342:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f346:	f7fe baa3 	b.w	800d890 <__swbuf_r>
 800f34a:	6813      	ldr	r3, [r2, #0]
 800f34c:	1c58      	adds	r0, r3, #1
 800f34e:	6010      	str	r0, [r2, #0]
 800f350:	7019      	strb	r1, [r3, #0]
 800f352:	4608      	mov	r0, r1
 800f354:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f358:	4770      	bx	lr

0800f35a <__sfputs_r>:
 800f35a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f35c:	4606      	mov	r6, r0
 800f35e:	460f      	mov	r7, r1
 800f360:	4614      	mov	r4, r2
 800f362:	18d5      	adds	r5, r2, r3
 800f364:	42ac      	cmp	r4, r5
 800f366:	d101      	bne.n	800f36c <__sfputs_r+0x12>
 800f368:	2000      	movs	r0, #0
 800f36a:	e007      	b.n	800f37c <__sfputs_r+0x22>
 800f36c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f370:	463a      	mov	r2, r7
 800f372:	4630      	mov	r0, r6
 800f374:	f7ff ffda 	bl	800f32c <__sfputc_r>
 800f378:	1c43      	adds	r3, r0, #1
 800f37a:	d1f3      	bne.n	800f364 <__sfputs_r+0xa>
 800f37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f380 <_vfiprintf_r>:
 800f380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f384:	460d      	mov	r5, r1
 800f386:	b09d      	sub	sp, #116	@ 0x74
 800f388:	4614      	mov	r4, r2
 800f38a:	4698      	mov	r8, r3
 800f38c:	4606      	mov	r6, r0
 800f38e:	b118      	cbz	r0, 800f398 <_vfiprintf_r+0x18>
 800f390:	6a03      	ldr	r3, [r0, #32]
 800f392:	b90b      	cbnz	r3, 800f398 <_vfiprintf_r+0x18>
 800f394:	f7fe f956 	bl	800d644 <__sinit>
 800f398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f39a:	07d9      	lsls	r1, r3, #31
 800f39c:	d405      	bmi.n	800f3aa <_vfiprintf_r+0x2a>
 800f39e:	89ab      	ldrh	r3, [r5, #12]
 800f3a0:	059a      	lsls	r2, r3, #22
 800f3a2:	d402      	bmi.n	800f3aa <_vfiprintf_r+0x2a>
 800f3a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3a6:	f7fe fb84 	bl	800dab2 <__retarget_lock_acquire_recursive>
 800f3aa:	89ab      	ldrh	r3, [r5, #12]
 800f3ac:	071b      	lsls	r3, r3, #28
 800f3ae:	d501      	bpl.n	800f3b4 <_vfiprintf_r+0x34>
 800f3b0:	692b      	ldr	r3, [r5, #16]
 800f3b2:	b99b      	cbnz	r3, 800f3dc <_vfiprintf_r+0x5c>
 800f3b4:	4629      	mov	r1, r5
 800f3b6:	4630      	mov	r0, r6
 800f3b8:	f7fe faa8 	bl	800d90c <__swsetup_r>
 800f3bc:	b170      	cbz	r0, 800f3dc <_vfiprintf_r+0x5c>
 800f3be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3c0:	07dc      	lsls	r4, r3, #31
 800f3c2:	d504      	bpl.n	800f3ce <_vfiprintf_r+0x4e>
 800f3c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3c8:	b01d      	add	sp, #116	@ 0x74
 800f3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ce:	89ab      	ldrh	r3, [r5, #12]
 800f3d0:	0598      	lsls	r0, r3, #22
 800f3d2:	d4f7      	bmi.n	800f3c4 <_vfiprintf_r+0x44>
 800f3d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3d6:	f7fe fb6d 	bl	800dab4 <__retarget_lock_release_recursive>
 800f3da:	e7f3      	b.n	800f3c4 <_vfiprintf_r+0x44>
 800f3dc:	2300      	movs	r3, #0
 800f3de:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3e0:	2320      	movs	r3, #32
 800f3e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f3e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3ea:	2330      	movs	r3, #48	@ 0x30
 800f3ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f59c <_vfiprintf_r+0x21c>
 800f3f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f3f4:	f04f 0901 	mov.w	r9, #1
 800f3f8:	4623      	mov	r3, r4
 800f3fa:	469a      	mov	sl, r3
 800f3fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f400:	b10a      	cbz	r2, 800f406 <_vfiprintf_r+0x86>
 800f402:	2a25      	cmp	r2, #37	@ 0x25
 800f404:	d1f9      	bne.n	800f3fa <_vfiprintf_r+0x7a>
 800f406:	ebba 0b04 	subs.w	fp, sl, r4
 800f40a:	d00b      	beq.n	800f424 <_vfiprintf_r+0xa4>
 800f40c:	465b      	mov	r3, fp
 800f40e:	4622      	mov	r2, r4
 800f410:	4629      	mov	r1, r5
 800f412:	4630      	mov	r0, r6
 800f414:	f7ff ffa1 	bl	800f35a <__sfputs_r>
 800f418:	3001      	adds	r0, #1
 800f41a:	f000 80a7 	beq.w	800f56c <_vfiprintf_r+0x1ec>
 800f41e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f420:	445a      	add	r2, fp
 800f422:	9209      	str	r2, [sp, #36]	@ 0x24
 800f424:	f89a 3000 	ldrb.w	r3, [sl]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	f000 809f 	beq.w	800f56c <_vfiprintf_r+0x1ec>
 800f42e:	2300      	movs	r3, #0
 800f430:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f438:	f10a 0a01 	add.w	sl, sl, #1
 800f43c:	9304      	str	r3, [sp, #16]
 800f43e:	9307      	str	r3, [sp, #28]
 800f440:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f444:	931a      	str	r3, [sp, #104]	@ 0x68
 800f446:	4654      	mov	r4, sl
 800f448:	2205      	movs	r2, #5
 800f44a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f44e:	4853      	ldr	r0, [pc, #332]	@ (800f59c <_vfiprintf_r+0x21c>)
 800f450:	f7f0 fec6 	bl	80001e0 <memchr>
 800f454:	9a04      	ldr	r2, [sp, #16]
 800f456:	b9d8      	cbnz	r0, 800f490 <_vfiprintf_r+0x110>
 800f458:	06d1      	lsls	r1, r2, #27
 800f45a:	bf44      	itt	mi
 800f45c:	2320      	movmi	r3, #32
 800f45e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f462:	0713      	lsls	r3, r2, #28
 800f464:	bf44      	itt	mi
 800f466:	232b      	movmi	r3, #43	@ 0x2b
 800f468:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f46c:	f89a 3000 	ldrb.w	r3, [sl]
 800f470:	2b2a      	cmp	r3, #42	@ 0x2a
 800f472:	d015      	beq.n	800f4a0 <_vfiprintf_r+0x120>
 800f474:	9a07      	ldr	r2, [sp, #28]
 800f476:	4654      	mov	r4, sl
 800f478:	2000      	movs	r0, #0
 800f47a:	f04f 0c0a 	mov.w	ip, #10
 800f47e:	4621      	mov	r1, r4
 800f480:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f484:	3b30      	subs	r3, #48	@ 0x30
 800f486:	2b09      	cmp	r3, #9
 800f488:	d94b      	bls.n	800f522 <_vfiprintf_r+0x1a2>
 800f48a:	b1b0      	cbz	r0, 800f4ba <_vfiprintf_r+0x13a>
 800f48c:	9207      	str	r2, [sp, #28]
 800f48e:	e014      	b.n	800f4ba <_vfiprintf_r+0x13a>
 800f490:	eba0 0308 	sub.w	r3, r0, r8
 800f494:	fa09 f303 	lsl.w	r3, r9, r3
 800f498:	4313      	orrs	r3, r2
 800f49a:	9304      	str	r3, [sp, #16]
 800f49c:	46a2      	mov	sl, r4
 800f49e:	e7d2      	b.n	800f446 <_vfiprintf_r+0xc6>
 800f4a0:	9b03      	ldr	r3, [sp, #12]
 800f4a2:	1d19      	adds	r1, r3, #4
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	9103      	str	r1, [sp, #12]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	bfbb      	ittet	lt
 800f4ac:	425b      	neglt	r3, r3
 800f4ae:	f042 0202 	orrlt.w	r2, r2, #2
 800f4b2:	9307      	strge	r3, [sp, #28]
 800f4b4:	9307      	strlt	r3, [sp, #28]
 800f4b6:	bfb8      	it	lt
 800f4b8:	9204      	strlt	r2, [sp, #16]
 800f4ba:	7823      	ldrb	r3, [r4, #0]
 800f4bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800f4be:	d10a      	bne.n	800f4d6 <_vfiprintf_r+0x156>
 800f4c0:	7863      	ldrb	r3, [r4, #1]
 800f4c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4c4:	d132      	bne.n	800f52c <_vfiprintf_r+0x1ac>
 800f4c6:	9b03      	ldr	r3, [sp, #12]
 800f4c8:	1d1a      	adds	r2, r3, #4
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	9203      	str	r2, [sp, #12]
 800f4ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f4d2:	3402      	adds	r4, #2
 800f4d4:	9305      	str	r3, [sp, #20]
 800f4d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f5ac <_vfiprintf_r+0x22c>
 800f4da:	7821      	ldrb	r1, [r4, #0]
 800f4dc:	2203      	movs	r2, #3
 800f4de:	4650      	mov	r0, sl
 800f4e0:	f7f0 fe7e 	bl	80001e0 <memchr>
 800f4e4:	b138      	cbz	r0, 800f4f6 <_vfiprintf_r+0x176>
 800f4e6:	9b04      	ldr	r3, [sp, #16]
 800f4e8:	eba0 000a 	sub.w	r0, r0, sl
 800f4ec:	2240      	movs	r2, #64	@ 0x40
 800f4ee:	4082      	lsls	r2, r0
 800f4f0:	4313      	orrs	r3, r2
 800f4f2:	3401      	adds	r4, #1
 800f4f4:	9304      	str	r3, [sp, #16]
 800f4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4fa:	4829      	ldr	r0, [pc, #164]	@ (800f5a0 <_vfiprintf_r+0x220>)
 800f4fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f500:	2206      	movs	r2, #6
 800f502:	f7f0 fe6d 	bl	80001e0 <memchr>
 800f506:	2800      	cmp	r0, #0
 800f508:	d03f      	beq.n	800f58a <_vfiprintf_r+0x20a>
 800f50a:	4b26      	ldr	r3, [pc, #152]	@ (800f5a4 <_vfiprintf_r+0x224>)
 800f50c:	bb1b      	cbnz	r3, 800f556 <_vfiprintf_r+0x1d6>
 800f50e:	9b03      	ldr	r3, [sp, #12]
 800f510:	3307      	adds	r3, #7
 800f512:	f023 0307 	bic.w	r3, r3, #7
 800f516:	3308      	adds	r3, #8
 800f518:	9303      	str	r3, [sp, #12]
 800f51a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f51c:	443b      	add	r3, r7
 800f51e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f520:	e76a      	b.n	800f3f8 <_vfiprintf_r+0x78>
 800f522:	fb0c 3202 	mla	r2, ip, r2, r3
 800f526:	460c      	mov	r4, r1
 800f528:	2001      	movs	r0, #1
 800f52a:	e7a8      	b.n	800f47e <_vfiprintf_r+0xfe>
 800f52c:	2300      	movs	r3, #0
 800f52e:	3401      	adds	r4, #1
 800f530:	9305      	str	r3, [sp, #20]
 800f532:	4619      	mov	r1, r3
 800f534:	f04f 0c0a 	mov.w	ip, #10
 800f538:	4620      	mov	r0, r4
 800f53a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f53e:	3a30      	subs	r2, #48	@ 0x30
 800f540:	2a09      	cmp	r2, #9
 800f542:	d903      	bls.n	800f54c <_vfiprintf_r+0x1cc>
 800f544:	2b00      	cmp	r3, #0
 800f546:	d0c6      	beq.n	800f4d6 <_vfiprintf_r+0x156>
 800f548:	9105      	str	r1, [sp, #20]
 800f54a:	e7c4      	b.n	800f4d6 <_vfiprintf_r+0x156>
 800f54c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f550:	4604      	mov	r4, r0
 800f552:	2301      	movs	r3, #1
 800f554:	e7f0      	b.n	800f538 <_vfiprintf_r+0x1b8>
 800f556:	ab03      	add	r3, sp, #12
 800f558:	9300      	str	r3, [sp, #0]
 800f55a:	462a      	mov	r2, r5
 800f55c:	4b12      	ldr	r3, [pc, #72]	@ (800f5a8 <_vfiprintf_r+0x228>)
 800f55e:	a904      	add	r1, sp, #16
 800f560:	4630      	mov	r0, r6
 800f562:	f7fd fc2d 	bl	800cdc0 <_printf_float>
 800f566:	4607      	mov	r7, r0
 800f568:	1c78      	adds	r0, r7, #1
 800f56a:	d1d6      	bne.n	800f51a <_vfiprintf_r+0x19a>
 800f56c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f56e:	07d9      	lsls	r1, r3, #31
 800f570:	d405      	bmi.n	800f57e <_vfiprintf_r+0x1fe>
 800f572:	89ab      	ldrh	r3, [r5, #12]
 800f574:	059a      	lsls	r2, r3, #22
 800f576:	d402      	bmi.n	800f57e <_vfiprintf_r+0x1fe>
 800f578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f57a:	f7fe fa9b 	bl	800dab4 <__retarget_lock_release_recursive>
 800f57e:	89ab      	ldrh	r3, [r5, #12]
 800f580:	065b      	lsls	r3, r3, #25
 800f582:	f53f af1f 	bmi.w	800f3c4 <_vfiprintf_r+0x44>
 800f586:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f588:	e71e      	b.n	800f3c8 <_vfiprintf_r+0x48>
 800f58a:	ab03      	add	r3, sp, #12
 800f58c:	9300      	str	r3, [sp, #0]
 800f58e:	462a      	mov	r2, r5
 800f590:	4b05      	ldr	r3, [pc, #20]	@ (800f5a8 <_vfiprintf_r+0x228>)
 800f592:	a904      	add	r1, sp, #16
 800f594:	4630      	mov	r0, r6
 800f596:	f7fd feab 	bl	800d2f0 <_printf_i>
 800f59a:	e7e4      	b.n	800f566 <_vfiprintf_r+0x1e6>
 800f59c:	0800ff80 	.word	0x0800ff80
 800f5a0:	0800ff8a 	.word	0x0800ff8a
 800f5a4:	0800cdc1 	.word	0x0800cdc1
 800f5a8:	0800f35b 	.word	0x0800f35b
 800f5ac:	0800ff86 	.word	0x0800ff86

0800f5b0 <__sflush_r>:
 800f5b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5b8:	0716      	lsls	r6, r2, #28
 800f5ba:	4605      	mov	r5, r0
 800f5bc:	460c      	mov	r4, r1
 800f5be:	d454      	bmi.n	800f66a <__sflush_r+0xba>
 800f5c0:	684b      	ldr	r3, [r1, #4]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	dc02      	bgt.n	800f5cc <__sflush_r+0x1c>
 800f5c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	dd48      	ble.n	800f65e <__sflush_r+0xae>
 800f5cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5ce:	2e00      	cmp	r6, #0
 800f5d0:	d045      	beq.n	800f65e <__sflush_r+0xae>
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f5d8:	682f      	ldr	r7, [r5, #0]
 800f5da:	6a21      	ldr	r1, [r4, #32]
 800f5dc:	602b      	str	r3, [r5, #0]
 800f5de:	d030      	beq.n	800f642 <__sflush_r+0x92>
 800f5e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f5e2:	89a3      	ldrh	r3, [r4, #12]
 800f5e4:	0759      	lsls	r1, r3, #29
 800f5e6:	d505      	bpl.n	800f5f4 <__sflush_r+0x44>
 800f5e8:	6863      	ldr	r3, [r4, #4]
 800f5ea:	1ad2      	subs	r2, r2, r3
 800f5ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f5ee:	b10b      	cbz	r3, 800f5f4 <__sflush_r+0x44>
 800f5f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f5f2:	1ad2      	subs	r2, r2, r3
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5f8:	6a21      	ldr	r1, [r4, #32]
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	47b0      	blx	r6
 800f5fe:	1c43      	adds	r3, r0, #1
 800f600:	89a3      	ldrh	r3, [r4, #12]
 800f602:	d106      	bne.n	800f612 <__sflush_r+0x62>
 800f604:	6829      	ldr	r1, [r5, #0]
 800f606:	291d      	cmp	r1, #29
 800f608:	d82b      	bhi.n	800f662 <__sflush_r+0xb2>
 800f60a:	4a2a      	ldr	r2, [pc, #168]	@ (800f6b4 <__sflush_r+0x104>)
 800f60c:	40ca      	lsrs	r2, r1
 800f60e:	07d6      	lsls	r6, r2, #31
 800f610:	d527      	bpl.n	800f662 <__sflush_r+0xb2>
 800f612:	2200      	movs	r2, #0
 800f614:	6062      	str	r2, [r4, #4]
 800f616:	04d9      	lsls	r1, r3, #19
 800f618:	6922      	ldr	r2, [r4, #16]
 800f61a:	6022      	str	r2, [r4, #0]
 800f61c:	d504      	bpl.n	800f628 <__sflush_r+0x78>
 800f61e:	1c42      	adds	r2, r0, #1
 800f620:	d101      	bne.n	800f626 <__sflush_r+0x76>
 800f622:	682b      	ldr	r3, [r5, #0]
 800f624:	b903      	cbnz	r3, 800f628 <__sflush_r+0x78>
 800f626:	6560      	str	r0, [r4, #84]	@ 0x54
 800f628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f62a:	602f      	str	r7, [r5, #0]
 800f62c:	b1b9      	cbz	r1, 800f65e <__sflush_r+0xae>
 800f62e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f632:	4299      	cmp	r1, r3
 800f634:	d002      	beq.n	800f63c <__sflush_r+0x8c>
 800f636:	4628      	mov	r0, r5
 800f638:	f7ff f8a6 	bl	800e788 <_free_r>
 800f63c:	2300      	movs	r3, #0
 800f63e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f640:	e00d      	b.n	800f65e <__sflush_r+0xae>
 800f642:	2301      	movs	r3, #1
 800f644:	4628      	mov	r0, r5
 800f646:	47b0      	blx	r6
 800f648:	4602      	mov	r2, r0
 800f64a:	1c50      	adds	r0, r2, #1
 800f64c:	d1c9      	bne.n	800f5e2 <__sflush_r+0x32>
 800f64e:	682b      	ldr	r3, [r5, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d0c6      	beq.n	800f5e2 <__sflush_r+0x32>
 800f654:	2b1d      	cmp	r3, #29
 800f656:	d001      	beq.n	800f65c <__sflush_r+0xac>
 800f658:	2b16      	cmp	r3, #22
 800f65a:	d11e      	bne.n	800f69a <__sflush_r+0xea>
 800f65c:	602f      	str	r7, [r5, #0]
 800f65e:	2000      	movs	r0, #0
 800f660:	e022      	b.n	800f6a8 <__sflush_r+0xf8>
 800f662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f666:	b21b      	sxth	r3, r3
 800f668:	e01b      	b.n	800f6a2 <__sflush_r+0xf2>
 800f66a:	690f      	ldr	r7, [r1, #16]
 800f66c:	2f00      	cmp	r7, #0
 800f66e:	d0f6      	beq.n	800f65e <__sflush_r+0xae>
 800f670:	0793      	lsls	r3, r2, #30
 800f672:	680e      	ldr	r6, [r1, #0]
 800f674:	bf08      	it	eq
 800f676:	694b      	ldreq	r3, [r1, #20]
 800f678:	600f      	str	r7, [r1, #0]
 800f67a:	bf18      	it	ne
 800f67c:	2300      	movne	r3, #0
 800f67e:	eba6 0807 	sub.w	r8, r6, r7
 800f682:	608b      	str	r3, [r1, #8]
 800f684:	f1b8 0f00 	cmp.w	r8, #0
 800f688:	dde9      	ble.n	800f65e <__sflush_r+0xae>
 800f68a:	6a21      	ldr	r1, [r4, #32]
 800f68c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f68e:	4643      	mov	r3, r8
 800f690:	463a      	mov	r2, r7
 800f692:	4628      	mov	r0, r5
 800f694:	47b0      	blx	r6
 800f696:	2800      	cmp	r0, #0
 800f698:	dc08      	bgt.n	800f6ac <__sflush_r+0xfc>
 800f69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f69e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6a2:	81a3      	strh	r3, [r4, #12]
 800f6a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6ac:	4407      	add	r7, r0
 800f6ae:	eba8 0800 	sub.w	r8, r8, r0
 800f6b2:	e7e7      	b.n	800f684 <__sflush_r+0xd4>
 800f6b4:	20400001 	.word	0x20400001

0800f6b8 <_fflush_r>:
 800f6b8:	b538      	push	{r3, r4, r5, lr}
 800f6ba:	690b      	ldr	r3, [r1, #16]
 800f6bc:	4605      	mov	r5, r0
 800f6be:	460c      	mov	r4, r1
 800f6c0:	b913      	cbnz	r3, 800f6c8 <_fflush_r+0x10>
 800f6c2:	2500      	movs	r5, #0
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	bd38      	pop	{r3, r4, r5, pc}
 800f6c8:	b118      	cbz	r0, 800f6d2 <_fflush_r+0x1a>
 800f6ca:	6a03      	ldr	r3, [r0, #32]
 800f6cc:	b90b      	cbnz	r3, 800f6d2 <_fflush_r+0x1a>
 800f6ce:	f7fd ffb9 	bl	800d644 <__sinit>
 800f6d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d0f3      	beq.n	800f6c2 <_fflush_r+0xa>
 800f6da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f6dc:	07d0      	lsls	r0, r2, #31
 800f6de:	d404      	bmi.n	800f6ea <_fflush_r+0x32>
 800f6e0:	0599      	lsls	r1, r3, #22
 800f6e2:	d402      	bmi.n	800f6ea <_fflush_r+0x32>
 800f6e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6e6:	f7fe f9e4 	bl	800dab2 <__retarget_lock_acquire_recursive>
 800f6ea:	4628      	mov	r0, r5
 800f6ec:	4621      	mov	r1, r4
 800f6ee:	f7ff ff5f 	bl	800f5b0 <__sflush_r>
 800f6f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6f4:	07da      	lsls	r2, r3, #31
 800f6f6:	4605      	mov	r5, r0
 800f6f8:	d4e4      	bmi.n	800f6c4 <_fflush_r+0xc>
 800f6fa:	89a3      	ldrh	r3, [r4, #12]
 800f6fc:	059b      	lsls	r3, r3, #22
 800f6fe:	d4e1      	bmi.n	800f6c4 <_fflush_r+0xc>
 800f700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f702:	f7fe f9d7 	bl	800dab4 <__retarget_lock_release_recursive>
 800f706:	e7dd      	b.n	800f6c4 <_fflush_r+0xc>

0800f708 <__swhatbuf_r>:
 800f708:	b570      	push	{r4, r5, r6, lr}
 800f70a:	460c      	mov	r4, r1
 800f70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f710:	2900      	cmp	r1, #0
 800f712:	b096      	sub	sp, #88	@ 0x58
 800f714:	4615      	mov	r5, r2
 800f716:	461e      	mov	r6, r3
 800f718:	da0d      	bge.n	800f736 <__swhatbuf_r+0x2e>
 800f71a:	89a3      	ldrh	r3, [r4, #12]
 800f71c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f720:	f04f 0100 	mov.w	r1, #0
 800f724:	bf14      	ite	ne
 800f726:	2340      	movne	r3, #64	@ 0x40
 800f728:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f72c:	2000      	movs	r0, #0
 800f72e:	6031      	str	r1, [r6, #0]
 800f730:	602b      	str	r3, [r5, #0]
 800f732:	b016      	add	sp, #88	@ 0x58
 800f734:	bd70      	pop	{r4, r5, r6, pc}
 800f736:	466a      	mov	r2, sp
 800f738:	f000 f862 	bl	800f800 <_fstat_r>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	dbec      	blt.n	800f71a <__swhatbuf_r+0x12>
 800f740:	9901      	ldr	r1, [sp, #4]
 800f742:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f746:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f74a:	4259      	negs	r1, r3
 800f74c:	4159      	adcs	r1, r3
 800f74e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f752:	e7eb      	b.n	800f72c <__swhatbuf_r+0x24>

0800f754 <__smakebuf_r>:
 800f754:	898b      	ldrh	r3, [r1, #12]
 800f756:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f758:	079d      	lsls	r5, r3, #30
 800f75a:	4606      	mov	r6, r0
 800f75c:	460c      	mov	r4, r1
 800f75e:	d507      	bpl.n	800f770 <__smakebuf_r+0x1c>
 800f760:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f764:	6023      	str	r3, [r4, #0]
 800f766:	6123      	str	r3, [r4, #16]
 800f768:	2301      	movs	r3, #1
 800f76a:	6163      	str	r3, [r4, #20]
 800f76c:	b003      	add	sp, #12
 800f76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f770:	ab01      	add	r3, sp, #4
 800f772:	466a      	mov	r2, sp
 800f774:	f7ff ffc8 	bl	800f708 <__swhatbuf_r>
 800f778:	9f00      	ldr	r7, [sp, #0]
 800f77a:	4605      	mov	r5, r0
 800f77c:	4639      	mov	r1, r7
 800f77e:	4630      	mov	r0, r6
 800f780:	f7ff f876 	bl	800e870 <_malloc_r>
 800f784:	b948      	cbnz	r0, 800f79a <__smakebuf_r+0x46>
 800f786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f78a:	059a      	lsls	r2, r3, #22
 800f78c:	d4ee      	bmi.n	800f76c <__smakebuf_r+0x18>
 800f78e:	f023 0303 	bic.w	r3, r3, #3
 800f792:	f043 0302 	orr.w	r3, r3, #2
 800f796:	81a3      	strh	r3, [r4, #12]
 800f798:	e7e2      	b.n	800f760 <__smakebuf_r+0xc>
 800f79a:	89a3      	ldrh	r3, [r4, #12]
 800f79c:	6020      	str	r0, [r4, #0]
 800f79e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7a2:	81a3      	strh	r3, [r4, #12]
 800f7a4:	9b01      	ldr	r3, [sp, #4]
 800f7a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f7aa:	b15b      	cbz	r3, 800f7c4 <__smakebuf_r+0x70>
 800f7ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7b0:	4630      	mov	r0, r6
 800f7b2:	f000 f837 	bl	800f824 <_isatty_r>
 800f7b6:	b128      	cbz	r0, 800f7c4 <__smakebuf_r+0x70>
 800f7b8:	89a3      	ldrh	r3, [r4, #12]
 800f7ba:	f023 0303 	bic.w	r3, r3, #3
 800f7be:	f043 0301 	orr.w	r3, r3, #1
 800f7c2:	81a3      	strh	r3, [r4, #12]
 800f7c4:	89a3      	ldrh	r3, [r4, #12]
 800f7c6:	431d      	orrs	r5, r3
 800f7c8:	81a5      	strh	r5, [r4, #12]
 800f7ca:	e7cf      	b.n	800f76c <__smakebuf_r+0x18>

0800f7cc <memmove>:
 800f7cc:	4288      	cmp	r0, r1
 800f7ce:	b510      	push	{r4, lr}
 800f7d0:	eb01 0402 	add.w	r4, r1, r2
 800f7d4:	d902      	bls.n	800f7dc <memmove+0x10>
 800f7d6:	4284      	cmp	r4, r0
 800f7d8:	4623      	mov	r3, r4
 800f7da:	d807      	bhi.n	800f7ec <memmove+0x20>
 800f7dc:	1e43      	subs	r3, r0, #1
 800f7de:	42a1      	cmp	r1, r4
 800f7e0:	d008      	beq.n	800f7f4 <memmove+0x28>
 800f7e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f7ea:	e7f8      	b.n	800f7de <memmove+0x12>
 800f7ec:	4402      	add	r2, r0
 800f7ee:	4601      	mov	r1, r0
 800f7f0:	428a      	cmp	r2, r1
 800f7f2:	d100      	bne.n	800f7f6 <memmove+0x2a>
 800f7f4:	bd10      	pop	{r4, pc}
 800f7f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f7fe:	e7f7      	b.n	800f7f0 <memmove+0x24>

0800f800 <_fstat_r>:
 800f800:	b538      	push	{r3, r4, r5, lr}
 800f802:	4d07      	ldr	r5, [pc, #28]	@ (800f820 <_fstat_r+0x20>)
 800f804:	2300      	movs	r3, #0
 800f806:	4604      	mov	r4, r0
 800f808:	4608      	mov	r0, r1
 800f80a:	4611      	mov	r1, r2
 800f80c:	602b      	str	r3, [r5, #0]
 800f80e:	f7f2 fc4d 	bl	80020ac <_fstat>
 800f812:	1c43      	adds	r3, r0, #1
 800f814:	d102      	bne.n	800f81c <_fstat_r+0x1c>
 800f816:	682b      	ldr	r3, [r5, #0]
 800f818:	b103      	cbz	r3, 800f81c <_fstat_r+0x1c>
 800f81a:	6023      	str	r3, [r4, #0]
 800f81c:	bd38      	pop	{r3, r4, r5, pc}
 800f81e:	bf00      	nop
 800f820:	20002234 	.word	0x20002234

0800f824 <_isatty_r>:
 800f824:	b538      	push	{r3, r4, r5, lr}
 800f826:	4d06      	ldr	r5, [pc, #24]	@ (800f840 <_isatty_r+0x1c>)
 800f828:	2300      	movs	r3, #0
 800f82a:	4604      	mov	r4, r0
 800f82c:	4608      	mov	r0, r1
 800f82e:	602b      	str	r3, [r5, #0]
 800f830:	f7f2 fc4c 	bl	80020cc <_isatty>
 800f834:	1c43      	adds	r3, r0, #1
 800f836:	d102      	bne.n	800f83e <_isatty_r+0x1a>
 800f838:	682b      	ldr	r3, [r5, #0]
 800f83a:	b103      	cbz	r3, 800f83e <_isatty_r+0x1a>
 800f83c:	6023      	str	r3, [r4, #0]
 800f83e:	bd38      	pop	{r3, r4, r5, pc}
 800f840:	20002234 	.word	0x20002234

0800f844 <_sbrk_r>:
 800f844:	b538      	push	{r3, r4, r5, lr}
 800f846:	4d06      	ldr	r5, [pc, #24]	@ (800f860 <_sbrk_r+0x1c>)
 800f848:	2300      	movs	r3, #0
 800f84a:	4604      	mov	r4, r0
 800f84c:	4608      	mov	r0, r1
 800f84e:	602b      	str	r3, [r5, #0]
 800f850:	f7f2 fc54 	bl	80020fc <_sbrk>
 800f854:	1c43      	adds	r3, r0, #1
 800f856:	d102      	bne.n	800f85e <_sbrk_r+0x1a>
 800f858:	682b      	ldr	r3, [r5, #0]
 800f85a:	b103      	cbz	r3, 800f85e <_sbrk_r+0x1a>
 800f85c:	6023      	str	r3, [r4, #0]
 800f85e:	bd38      	pop	{r3, r4, r5, pc}
 800f860:	20002234 	.word	0x20002234

0800f864 <__assert_func>:
 800f864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f866:	4614      	mov	r4, r2
 800f868:	461a      	mov	r2, r3
 800f86a:	4b09      	ldr	r3, [pc, #36]	@ (800f890 <__assert_func+0x2c>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	4605      	mov	r5, r0
 800f870:	68d8      	ldr	r0, [r3, #12]
 800f872:	b14c      	cbz	r4, 800f888 <__assert_func+0x24>
 800f874:	4b07      	ldr	r3, [pc, #28]	@ (800f894 <__assert_func+0x30>)
 800f876:	9100      	str	r1, [sp, #0]
 800f878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f87c:	4906      	ldr	r1, [pc, #24]	@ (800f898 <__assert_func+0x34>)
 800f87e:	462b      	mov	r3, r5
 800f880:	f000 f870 	bl	800f964 <fiprintf>
 800f884:	f000 f880 	bl	800f988 <abort>
 800f888:	4b04      	ldr	r3, [pc, #16]	@ (800f89c <__assert_func+0x38>)
 800f88a:	461c      	mov	r4, r3
 800f88c:	e7f3      	b.n	800f876 <__assert_func+0x12>
 800f88e:	bf00      	nop
 800f890:	20000110 	.word	0x20000110
 800f894:	0800ff9b 	.word	0x0800ff9b
 800f898:	0800ffa8 	.word	0x0800ffa8
 800f89c:	0800ffd6 	.word	0x0800ffd6

0800f8a0 <_calloc_r>:
 800f8a0:	b570      	push	{r4, r5, r6, lr}
 800f8a2:	fba1 5402 	umull	r5, r4, r1, r2
 800f8a6:	b934      	cbnz	r4, 800f8b6 <_calloc_r+0x16>
 800f8a8:	4629      	mov	r1, r5
 800f8aa:	f7fe ffe1 	bl	800e870 <_malloc_r>
 800f8ae:	4606      	mov	r6, r0
 800f8b0:	b928      	cbnz	r0, 800f8be <_calloc_r+0x1e>
 800f8b2:	4630      	mov	r0, r6
 800f8b4:	bd70      	pop	{r4, r5, r6, pc}
 800f8b6:	220c      	movs	r2, #12
 800f8b8:	6002      	str	r2, [r0, #0]
 800f8ba:	2600      	movs	r6, #0
 800f8bc:	e7f9      	b.n	800f8b2 <_calloc_r+0x12>
 800f8be:	462a      	mov	r2, r5
 800f8c0:	4621      	mov	r1, r4
 800f8c2:	f7fe f879 	bl	800d9b8 <memset>
 800f8c6:	e7f4      	b.n	800f8b2 <_calloc_r+0x12>

0800f8c8 <__ascii_mbtowc>:
 800f8c8:	b082      	sub	sp, #8
 800f8ca:	b901      	cbnz	r1, 800f8ce <__ascii_mbtowc+0x6>
 800f8cc:	a901      	add	r1, sp, #4
 800f8ce:	b142      	cbz	r2, 800f8e2 <__ascii_mbtowc+0x1a>
 800f8d0:	b14b      	cbz	r3, 800f8e6 <__ascii_mbtowc+0x1e>
 800f8d2:	7813      	ldrb	r3, [r2, #0]
 800f8d4:	600b      	str	r3, [r1, #0]
 800f8d6:	7812      	ldrb	r2, [r2, #0]
 800f8d8:	1e10      	subs	r0, r2, #0
 800f8da:	bf18      	it	ne
 800f8dc:	2001      	movne	r0, #1
 800f8de:	b002      	add	sp, #8
 800f8e0:	4770      	bx	lr
 800f8e2:	4610      	mov	r0, r2
 800f8e4:	e7fb      	b.n	800f8de <__ascii_mbtowc+0x16>
 800f8e6:	f06f 0001 	mvn.w	r0, #1
 800f8ea:	e7f8      	b.n	800f8de <__ascii_mbtowc+0x16>

0800f8ec <_realloc_r>:
 800f8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8f0:	4607      	mov	r7, r0
 800f8f2:	4614      	mov	r4, r2
 800f8f4:	460d      	mov	r5, r1
 800f8f6:	b921      	cbnz	r1, 800f902 <_realloc_r+0x16>
 800f8f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8fc:	4611      	mov	r1, r2
 800f8fe:	f7fe bfb7 	b.w	800e870 <_malloc_r>
 800f902:	b92a      	cbnz	r2, 800f910 <_realloc_r+0x24>
 800f904:	f7fe ff40 	bl	800e788 <_free_r>
 800f908:	4625      	mov	r5, r4
 800f90a:	4628      	mov	r0, r5
 800f90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f910:	f000 f841 	bl	800f996 <_malloc_usable_size_r>
 800f914:	4284      	cmp	r4, r0
 800f916:	4606      	mov	r6, r0
 800f918:	d802      	bhi.n	800f920 <_realloc_r+0x34>
 800f91a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f91e:	d8f4      	bhi.n	800f90a <_realloc_r+0x1e>
 800f920:	4621      	mov	r1, r4
 800f922:	4638      	mov	r0, r7
 800f924:	f7fe ffa4 	bl	800e870 <_malloc_r>
 800f928:	4680      	mov	r8, r0
 800f92a:	b908      	cbnz	r0, 800f930 <_realloc_r+0x44>
 800f92c:	4645      	mov	r5, r8
 800f92e:	e7ec      	b.n	800f90a <_realloc_r+0x1e>
 800f930:	42b4      	cmp	r4, r6
 800f932:	4622      	mov	r2, r4
 800f934:	4629      	mov	r1, r5
 800f936:	bf28      	it	cs
 800f938:	4632      	movcs	r2, r6
 800f93a:	f7fe f8bc 	bl	800dab6 <memcpy>
 800f93e:	4629      	mov	r1, r5
 800f940:	4638      	mov	r0, r7
 800f942:	f7fe ff21 	bl	800e788 <_free_r>
 800f946:	e7f1      	b.n	800f92c <_realloc_r+0x40>

0800f948 <__ascii_wctomb>:
 800f948:	4603      	mov	r3, r0
 800f94a:	4608      	mov	r0, r1
 800f94c:	b141      	cbz	r1, 800f960 <__ascii_wctomb+0x18>
 800f94e:	2aff      	cmp	r2, #255	@ 0xff
 800f950:	d904      	bls.n	800f95c <__ascii_wctomb+0x14>
 800f952:	228a      	movs	r2, #138	@ 0x8a
 800f954:	601a      	str	r2, [r3, #0]
 800f956:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f95a:	4770      	bx	lr
 800f95c:	700a      	strb	r2, [r1, #0]
 800f95e:	2001      	movs	r0, #1
 800f960:	4770      	bx	lr
	...

0800f964 <fiprintf>:
 800f964:	b40e      	push	{r1, r2, r3}
 800f966:	b503      	push	{r0, r1, lr}
 800f968:	4601      	mov	r1, r0
 800f96a:	ab03      	add	r3, sp, #12
 800f96c:	4805      	ldr	r0, [pc, #20]	@ (800f984 <fiprintf+0x20>)
 800f96e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f972:	6800      	ldr	r0, [r0, #0]
 800f974:	9301      	str	r3, [sp, #4]
 800f976:	f7ff fd03 	bl	800f380 <_vfiprintf_r>
 800f97a:	b002      	add	sp, #8
 800f97c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f980:	b003      	add	sp, #12
 800f982:	4770      	bx	lr
 800f984:	20000110 	.word	0x20000110

0800f988 <abort>:
 800f988:	b508      	push	{r3, lr}
 800f98a:	2006      	movs	r0, #6
 800f98c:	f000 f834 	bl	800f9f8 <raise>
 800f990:	2001      	movs	r0, #1
 800f992:	f7f2 fb3b 	bl	800200c <_exit>

0800f996 <_malloc_usable_size_r>:
 800f996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f99a:	1f18      	subs	r0, r3, #4
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	bfbc      	itt	lt
 800f9a0:	580b      	ldrlt	r3, [r1, r0]
 800f9a2:	18c0      	addlt	r0, r0, r3
 800f9a4:	4770      	bx	lr

0800f9a6 <_raise_r>:
 800f9a6:	291f      	cmp	r1, #31
 800f9a8:	b538      	push	{r3, r4, r5, lr}
 800f9aa:	4605      	mov	r5, r0
 800f9ac:	460c      	mov	r4, r1
 800f9ae:	d904      	bls.n	800f9ba <_raise_r+0x14>
 800f9b0:	2316      	movs	r3, #22
 800f9b2:	6003      	str	r3, [r0, #0]
 800f9b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f9b8:	bd38      	pop	{r3, r4, r5, pc}
 800f9ba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f9bc:	b112      	cbz	r2, 800f9c4 <_raise_r+0x1e>
 800f9be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f9c2:	b94b      	cbnz	r3, 800f9d8 <_raise_r+0x32>
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	f000 f831 	bl	800fa2c <_getpid_r>
 800f9ca:	4622      	mov	r2, r4
 800f9cc:	4601      	mov	r1, r0
 800f9ce:	4628      	mov	r0, r5
 800f9d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9d4:	f000 b818 	b.w	800fa08 <_kill_r>
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d00a      	beq.n	800f9f2 <_raise_r+0x4c>
 800f9dc:	1c59      	adds	r1, r3, #1
 800f9de:	d103      	bne.n	800f9e8 <_raise_r+0x42>
 800f9e0:	2316      	movs	r3, #22
 800f9e2:	6003      	str	r3, [r0, #0]
 800f9e4:	2001      	movs	r0, #1
 800f9e6:	e7e7      	b.n	800f9b8 <_raise_r+0x12>
 800f9e8:	2100      	movs	r1, #0
 800f9ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	4798      	blx	r3
 800f9f2:	2000      	movs	r0, #0
 800f9f4:	e7e0      	b.n	800f9b8 <_raise_r+0x12>
	...

0800f9f8 <raise>:
 800f9f8:	4b02      	ldr	r3, [pc, #8]	@ (800fa04 <raise+0xc>)
 800f9fa:	4601      	mov	r1, r0
 800f9fc:	6818      	ldr	r0, [r3, #0]
 800f9fe:	f7ff bfd2 	b.w	800f9a6 <_raise_r>
 800fa02:	bf00      	nop
 800fa04:	20000110 	.word	0x20000110

0800fa08 <_kill_r>:
 800fa08:	b538      	push	{r3, r4, r5, lr}
 800fa0a:	4d07      	ldr	r5, [pc, #28]	@ (800fa28 <_kill_r+0x20>)
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	4604      	mov	r4, r0
 800fa10:	4608      	mov	r0, r1
 800fa12:	4611      	mov	r1, r2
 800fa14:	602b      	str	r3, [r5, #0]
 800fa16:	f7f2 fae9 	bl	8001fec <_kill>
 800fa1a:	1c43      	adds	r3, r0, #1
 800fa1c:	d102      	bne.n	800fa24 <_kill_r+0x1c>
 800fa1e:	682b      	ldr	r3, [r5, #0]
 800fa20:	b103      	cbz	r3, 800fa24 <_kill_r+0x1c>
 800fa22:	6023      	str	r3, [r4, #0]
 800fa24:	bd38      	pop	{r3, r4, r5, pc}
 800fa26:	bf00      	nop
 800fa28:	20002234 	.word	0x20002234

0800fa2c <_getpid_r>:
 800fa2c:	f7f2 bad6 	b.w	8001fdc <_getpid>

0800fa30 <_init>:
 800fa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa32:	bf00      	nop
 800fa34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa36:	bc08      	pop	{r3}
 800fa38:	469e      	mov	lr, r3
 800fa3a:	4770      	bx	lr

0800fa3c <_fini>:
 800fa3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa3e:	bf00      	nop
 800fa40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa42:	bc08      	pop	{r3}
 800fa44:	469e      	mov	lr, r3
 800fa46:	4770      	bx	lr
