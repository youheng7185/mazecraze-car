
mazecrase-car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cac0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800cc60  0800cc60  0000dc60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d074  0800d074  0000f2cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d074  0800d074  0000e074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d07c  0800d07c  0000f2cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d07c  0800d07c  0000e07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d080  0800d080  0000e080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  0800d084  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ed8  200002cc  0800d350  0000f2cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021a4  0800d350  000101a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016cc6  00000000  00000000  0000f2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aef  00000000  00000000  00025fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  00029ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001032  00000000  00000000  0002afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005e18  00000000  00000000  0002c002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001987b  00000000  00000000  00031e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095443  00000000  00000000  0004b695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0ad8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069e0  00000000  00000000  000e0b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e74fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cc48 	.word	0x0800cc48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800cc48 	.word	0x0800cc48

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <my_printf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void my_printf(const char *format, ...)
{
 8000ee4:	b40f      	push	{r0, r1, r2, r3}
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b0a2      	sub	sp, #136	@ 0x88
 8000eea:	af00      	add	r7, sp, #0
    char tx_buffer[BUFFER_LEN];
    va_list args;
    va_start(args, format);
 8000eec:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ef0:	603b      	str	r3, [r7, #0]
    int usbTxLength = vsnprintf(tx_buffer, BUFFER_LEN, format, args);
 8000ef2:	1d38      	adds	r0, r7, #4
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000efa:	2180      	movs	r1, #128	@ 0x80
 8000efc:	f009 fdc8 	bl	800aa90 <vsniprintf>
 8000f00:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    va_end(args);

    if (usbTxLength > 0 && usbTxLength < BUFFER_LEN)
 8000f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	dd0b      	ble.n	8000f24 <my_printf+0x40>
 8000f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f10:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f12:	dc07      	bgt.n	8000f24 <my_printf+0x40>
    {
        CDC_Transmit_FS((uint8_t *)tx_buffer, usbTxLength);
 8000f14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f008 fbda 	bl	80096d8 <CDC_Transmit_FS>
    }
}
 8000f24:	bf00      	nop
 8000f26:	3788      	adds	r7, #136	@ 0x88
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f2e:	b004      	add	sp, #16
 8000f30:	4770      	bx	lr
	...

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f000 feaf 	bl	8001c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f881 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 fa97 	bl	8001474 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f46:	f000 f8e5 	bl	8001114 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f4a:	f000 f911 	bl	8001170 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000f4e:	f000 f93d 	bl	80011cc <MX_TIM1_Init>
  MX_TIM4_Init();
 8000f52:	f000 f9e7 	bl	8001324 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000f56:	f000 fa39 	bl	80013cc <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8000f5a:	f008 faaf 	bl	80094bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4833      	ldr	r0, [pc, #204]	@ (8001030 <main+0xfc>)
 8000f62:	f004 f919 	bl	8005198 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f66:	2104      	movs	r1, #4
 8000f68:	4831      	ldr	r0, [pc, #196]	@ (8001030 <main+0xfc>)
 8000f6a:	f004 f915 	bl	8005198 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 49);
 8000f6e:	4b30      	ldr	r3, [pc, #192]	@ (8001030 <main+0xfc>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2231      	movs	r2, #49	@ 0x31
 8000f74:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 49);
 8000f76:	4b2e      	ldr	r3, [pc, #184]	@ (8001030 <main+0xfc>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2231      	movs	r2, #49	@ 0x31
 8000f7c:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);  // PB13 HIGH
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f84:	482b      	ldr	r0, [pc, #172]	@ (8001034 <main+0x100>)
 8000f86:	f001 f9b5 	bl	80022f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // PB12 LOW
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f90:	4828      	ldr	r0, [pc, #160]	@ (8001034 <main+0x100>)
 8000f92:	f001 f9af 	bl	80022f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // PB13 HIGH
 8000f96:	2201      	movs	r2, #1
 8000f98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f9c:	4825      	ldr	r0, [pc, #148]	@ (8001034 <main+0x100>)
 8000f9e:	f001 f9a9 	bl	80022f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // PB12 LOW
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fa8:	4822      	ldr	r0, [pc, #136]	@ (8001034 <main+0x100>)
 8000faa:	f001 f9a3 	bl	80022f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, motor_stdby_Pin, GPIO_PIN_SET); // make standby pin high, activate the motor driver
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fb4:	4820      	ldr	r0, [pc, #128]	@ (8001038 <main+0x104>)
 8000fb6:	f001 f99d 	bl	80022f4 <HAL_GPIO_WritePin>


  selectTCAChannel(0);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 fd6c 	bl	8001a98 <selectTCAChannel>
  TCS34725_t tcs34725_sensor;
  tcs32725_begin(&tcs34725_sensor, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	21f6      	movs	r1, #246	@ 0xf6
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fdd9 	bl	8001b80 <tcs32725_begin>
  selectTCAChannel(1);
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f000 fd62 	bl	8001a98 <selectTCAChannel>
  TCS34725_t tcs34725_sensor1;
  tcs32725_begin(&tcs34725_sensor1, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2200      	movs	r2, #0
 8000fda:	21f6      	movs	r1, #246	@ 0xf6
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 fdcf 	bl	8001b80 <tcs32725_begin>
  selectTCAChannel(2);
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f000 fd58 	bl	8001a98 <selectTCAChannel>
  TCS34725_t tcs34725_sensor2;
  tcs32725_begin(&tcs34725_sensor2, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	2200      	movs	r2, #0
 8000fee:	21f6      	movs	r1, #246	@ 0xf6
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fdc5 	bl	8001b80 <tcs32725_begin>
  float r, g, b;
  uint32_t count = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]


  uint8_t dev_id = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  uint8_t whoami = 0x0F;
 8000ffe:	230f      	movs	r3, #15
 8001000:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(&hi2c2, 0x6B << 1, &whoami, 1, 100);
 8001002:	1dba      	adds	r2, r7, #6
 8001004:	2364      	movs	r3, #100	@ 0x64
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	21d6      	movs	r1, #214	@ 0xd6
 800100c:	480b      	ldr	r0, [pc, #44]	@ (800103c <main+0x108>)
 800100e:	f001 facf 	bl	80025b0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c2, 0x6B << 1, &dev_id, 1, 100);
 8001012:	1dfa      	adds	r2, r7, #7
 8001014:	2364      	movs	r3, #100	@ 0x64
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	21d6      	movs	r1, #214	@ 0xd6
 800101c:	4807      	ldr	r0, [pc, #28]	@ (800103c <main+0x108>)
 800101e:	f001 fbc5 	bl	80027ac <HAL_I2C_Master_Receive>
  my_printf("my id: %d", dev_id);
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	@ (8001040 <main+0x10c>)
 8001028:	f7ff ff5c 	bl	8000ee4 <my_printf>
  //lsm6dsl_read_data_polling();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <main+0xf8>
 8001030:	20000390 	.word	0x20000390
 8001034:	40020400 	.word	0x40020400
 8001038:	40020000 	.word	0x40020000
 800103c:	2000033c 	.word	0x2000033c
 8001040:	0800cc60 	.word	0x0800cc60

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	@ 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	2230      	movs	r2, #48	@ 0x30
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f009 fd2a 	bl	800aaac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	4b27      	ldr	r3, [pc, #156]	@ (800110c <SystemClock_Config+0xc8>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	4a26      	ldr	r2, [pc, #152]	@ (800110c <SystemClock_Config+0xc8>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	@ 0x40
 8001078:	4b24      	ldr	r3, [pc, #144]	@ (800110c <SystemClock_Config+0xc8>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <SystemClock_Config+0xcc>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a20      	ldr	r2, [pc, #128]	@ (8001110 <SystemClock_Config+0xcc>)
 800108e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <SystemClock_Config+0xcc>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a0:	2301      	movs	r3, #1
 80010a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2302      	movs	r3, #2
 80010ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010b4:	2319      	movs	r3, #25
 80010b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010b8:	23c0      	movs	r3, #192	@ 0xc0
 80010ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010bc:	2302      	movs	r3, #2
 80010be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010c0:	2304      	movs	r3, #4
 80010c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c4:	f107 0320 	add.w	r3, r7, #32
 80010c8:	4618      	mov	r0, r3
 80010ca:	f003 fb79 	bl	80047c0 <HAL_RCC_OscConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010d4:	f000 fa38 	bl	8001548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d8:	230f      	movs	r3, #15
 80010da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010dc:	2302      	movs	r3, #2
 80010de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2103      	movs	r1, #3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fddb 	bl	8004cb0 <HAL_RCC_ClockConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001100:	f000 fa22 	bl	8001548 <Error_Handler>
  }
}
 8001104:	bf00      	nop
 8001106:	3750      	adds	r7, #80	@ 0x50
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40007000 	.word	0x40007000

08001114 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <MX_I2C1_Init+0x50>)
 800111a:	4a13      	ldr	r2, [pc, #76]	@ (8001168 <MX_I2C1_Init+0x54>)
 800111c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800111e:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <MX_I2C1_Init+0x50>)
 8001120:	4a12      	ldr	r2, [pc, #72]	@ (800116c <MX_I2C1_Init+0x58>)
 8001122:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001124:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <MX_I2C1_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <MX_I2C1_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001130:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <MX_I2C1_Init+0x50>)
 8001132:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001136:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001138:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <MX_I2C1_Init+0x50>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <MX_I2C1_Init+0x50>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001144:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <MX_I2C1_Init+0x50>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <MX_I2C1_Init+0x50>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001150:	4804      	ldr	r0, [pc, #16]	@ (8001164 <MX_I2C1_Init+0x50>)
 8001152:	f001 f8e9 	bl	8002328 <HAL_I2C_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800115c:	f000 f9f4 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200002e8 	.word	0x200002e8
 8001168:	40005400 	.word	0x40005400
 800116c:	000186a0 	.word	0x000186a0

08001170 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <MX_I2C2_Init+0x50>)
 8001176:	4a13      	ldr	r2, [pc, #76]	@ (80011c4 <MX_I2C2_Init+0x54>)
 8001178:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800117a:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <MX_I2C2_Init+0x50>)
 800117c:	4a12      	ldr	r2, [pc, #72]	@ (80011c8 <MX_I2C2_Init+0x58>)
 800117e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001180:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <MX_I2C2_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <MX_I2C2_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <MX_I2C2_Init+0x50>)
 800118e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001192:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001194:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <MX_I2C2_Init+0x50>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <MX_I2C2_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <MX_I2C2_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <MX_I2C2_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011ac:	4804      	ldr	r0, [pc, #16]	@ (80011c0 <MX_I2C2_Init+0x50>)
 80011ae:	f001 f8bb 	bl	8002328 <HAL_I2C_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011b8:	f000 f9c6 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000033c 	.word	0x2000033c
 80011c4:	40005800 	.word	0x40005800
 80011c8:	000186a0 	.word	0x000186a0

080011cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b096      	sub	sp, #88	@ 0x58
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]
 80011fa:	615a      	str	r2, [r3, #20]
 80011fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2220      	movs	r2, #32
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f009 fc51 	bl	800aaac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800120a:	4b44      	ldr	r3, [pc, #272]	@ (800131c <MX_TIM1_Init+0x150>)
 800120c:	4a44      	ldr	r2, [pc, #272]	@ (8001320 <MX_TIM1_Init+0x154>)
 800120e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8001210:	4b42      	ldr	r3, [pc, #264]	@ (800131c <MX_TIM1_Init+0x150>)
 8001212:	225f      	movs	r2, #95	@ 0x5f
 8001214:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	4b41      	ldr	r3, [pc, #260]	@ (800131c <MX_TIM1_Init+0x150>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 800121c:	4b3f      	ldr	r3, [pc, #252]	@ (800131c <MX_TIM1_Init+0x150>)
 800121e:	2231      	movs	r2, #49	@ 0x31
 8001220:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001222:	4b3e      	ldr	r3, [pc, #248]	@ (800131c <MX_TIM1_Init+0x150>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001228:	4b3c      	ldr	r3, [pc, #240]	@ (800131c <MX_TIM1_Init+0x150>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122e:	4b3b      	ldr	r3, [pc, #236]	@ (800131c <MX_TIM1_Init+0x150>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001234:	4839      	ldr	r0, [pc, #228]	@ (800131c <MX_TIM1_Init+0x150>)
 8001236:	f003 ff07 	bl	8005048 <HAL_TIM_Base_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001240:	f000 f982 	bl	8001548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001248:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800124a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800124e:	4619      	mov	r1, r3
 8001250:	4832      	ldr	r0, [pc, #200]	@ (800131c <MX_TIM1_Init+0x150>)
 8001252:	f004 f9b9 	bl	80055c8 <HAL_TIM_ConfigClockSource>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800125c:	f000 f974 	bl	8001548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001260:	482e      	ldr	r0, [pc, #184]	@ (800131c <MX_TIM1_Init+0x150>)
 8001262:	f003 ff40 	bl	80050e6 <HAL_TIM_PWM_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800126c:	f000 f96c 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001270:	2300      	movs	r3, #0
 8001272:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001278:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800127c:	4619      	mov	r1, r3
 800127e:	4827      	ldr	r0, [pc, #156]	@ (800131c <MX_TIM1_Init+0x150>)
 8001280:	f004 fd42 	bl	8005d08 <HAL_TIMEx_MasterConfigSynchronization>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800128a:	f000 f95d 	bl	8001548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800128e:	2360      	movs	r3, #96	@ 0x60
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800129a:	2300      	movs	r3, #0
 800129c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ae:	2200      	movs	r2, #0
 80012b0:	4619      	mov	r1, r3
 80012b2:	481a      	ldr	r0, [pc, #104]	@ (800131c <MX_TIM1_Init+0x150>)
 80012b4:	f004 f8c6 	bl	8005444 <HAL_TIM_PWM_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80012be:	f000 f943 	bl	8001548 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c6:	2204      	movs	r2, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	4814      	ldr	r0, [pc, #80]	@ (800131c <MX_TIM1_Init+0x150>)
 80012cc:	f004 f8ba 	bl	8005444 <HAL_TIM_PWM_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80012d6:	f000 f937 	bl	8001548 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4807      	ldr	r0, [pc, #28]	@ (800131c <MX_TIM1_Init+0x150>)
 80012fe:	f004 fd71 	bl	8005de4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001308:	f000 f91e 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800130c:	4803      	ldr	r0, [pc, #12]	@ (800131c <MX_TIM1_Init+0x150>)
 800130e:	f000 fa77 	bl	8001800 <HAL_TIM_MspPostInit>

}
 8001312:	bf00      	nop
 8001314:	3758      	adds	r7, #88	@ 0x58
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000390 	.word	0x20000390
 8001320:	40010000 	.word	0x40010000

08001324 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08c      	sub	sp, #48	@ 0x30
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	2224      	movs	r2, #36	@ 0x24
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f009 fbba 	bl	800aaac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001340:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <MX_TIM4_Init+0xa0>)
 8001342:	4a21      	ldr	r2, [pc, #132]	@ (80013c8 <MX_TIM4_Init+0xa4>)
 8001344:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001346:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <MX_TIM4_Init+0xa0>)
 8001348:	2200      	movs	r2, #0
 800134a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <MX_TIM4_Init+0xa0>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001352:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <MX_TIM4_Init+0xa0>)
 8001354:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001358:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135a:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <MX_TIM4_Init+0xa0>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001360:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <MX_TIM4_Init+0xa0>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001366:	2301      	movs	r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800136e:	2301      	movs	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800137e:	2301      	movs	r3, #1
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4619      	mov	r1, r3
 8001390:	480c      	ldr	r0, [pc, #48]	@ (80013c4 <MX_TIM4_Init+0xa0>)
 8001392:	f003 ffb1 	bl	80052f8 <HAL_TIM_Encoder_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800139c:	f000 f8d4 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <MX_TIM4_Init+0xa0>)
 80013ae:	f004 fcab 	bl	8005d08 <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80013b8:	f000 f8c6 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3730      	adds	r7, #48	@ 0x30
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200003d8 	.word	0x200003d8
 80013c8:	40000800 	.word	0x40000800

080013cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	@ 0x30
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2224      	movs	r2, #36	@ 0x24
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f009 fb66 	bl	800aaac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013e8:	4b20      	ldr	r3, [pc, #128]	@ (800146c <MX_TIM5_Init+0xa0>)
 80013ea:	4a21      	ldr	r2, [pc, #132]	@ (8001470 <MX_TIM5_Init+0xa4>)
 80013ec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013ee:	4b1f      	ldr	r3, [pc, #124]	@ (800146c <MX_TIM5_Init+0xa0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	@ (800146c <MX_TIM5_Init+0xa0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	@ (800146c <MX_TIM5_Init+0xa0>)
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001400:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001402:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <MX_TIM5_Init+0xa0>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001408:	4b18      	ldr	r3, [pc, #96]	@ (800146c <MX_TIM5_Init+0xa0>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800140e:	2301      	movs	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001416:	2301      	movs	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001426:	2301      	movs	r3, #1
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	4619      	mov	r1, r3
 8001438:	480c      	ldr	r0, [pc, #48]	@ (800146c <MX_TIM5_Init+0xa0>)
 800143a:	f003 ff5d 	bl	80052f8 <HAL_TIM_Encoder_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001444:	f000 f880 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_TIM5_Init+0xa0>)
 8001456:	f004 fc57 	bl	8005d08 <HAL_TIMEx_MasterConfigSynchronization>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001460:	f000 f872 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3730      	adds	r7, #48	@ 0x30
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000420 	.word	0x20000420
 8001470:	40000c00 	.word	0x40000c00

08001474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	4b2b      	ldr	r3, [pc, #172]	@ (800153c <MX_GPIO_Init+0xc8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a2a      	ldr	r2, [pc, #168]	@ (800153c <MX_GPIO_Init+0xc8>)
 8001494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b28      	ldr	r3, [pc, #160]	@ (800153c <MX_GPIO_Init+0xc8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b24      	ldr	r3, [pc, #144]	@ (800153c <MX_GPIO_Init+0xc8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a23      	ldr	r2, [pc, #140]	@ (800153c <MX_GPIO_Init+0xc8>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b21      	ldr	r3, [pc, #132]	@ (800153c <MX_GPIO_Init+0xc8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <MX_GPIO_Init+0xc8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a1c      	ldr	r2, [pc, #112]	@ (800153c <MX_GPIO_Init+0xc8>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <MX_GPIO_Init+0xc8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_h2_Pin|a_h1_Pin|b_h2_Pin|b_h1_Pin, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80014e4:	4816      	ldr	r0, [pc, #88]	@ (8001540 <MX_GPIO_Init+0xcc>)
 80014e6:	f000 ff05 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(motor_stdby_GPIO_Port, motor_stdby_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014f0:	4814      	ldr	r0, [pc, #80]	@ (8001544 <MX_GPIO_Init+0xd0>)
 80014f2:	f000 feff 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : a_h2_Pin a_h1_Pin b_h2_Pin b_h1_Pin */
  GPIO_InitStruct.Pin = a_h2_Pin|a_h1_Pin|b_h2_Pin|b_h1_Pin;
 80014f6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80014fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	4619      	mov	r1, r3
 800150e:	480c      	ldr	r0, [pc, #48]	@ (8001540 <MX_GPIO_Init+0xcc>)
 8001510:	f000 fd6c 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : motor_stdby_Pin */
  GPIO_InitStruct.Pin = motor_stdby_Pin;
 8001514:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(motor_stdby_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	@ (8001544 <MX_GPIO_Init+0xd0>)
 800152e:	f000 fd5d 	bl	8001fec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001532:	bf00      	nop
 8001534:	3720      	adds	r7, #32
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40020400 	.word	0x40020400
 8001544:	40020000 	.word	0x40020000

08001548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800154c:	b672      	cpsid	i
}
 800154e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <Error_Handler+0x8>

08001554 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	4a0f      	ldr	r2, [pc, #60]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001568:	6453      	str	r3, [r2, #68]	@ 0x44
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <HAL_MspInit+0x4c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <HAL_MspInit+0x4c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	4a08      	ldr	r2, [pc, #32]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001584:	6413      	str	r3, [r2, #64]	@ 0x40
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800

080015a4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	@ 0x30
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a3b      	ldr	r2, [pc, #236]	@ (80016b0 <HAL_I2C_MspInit+0x10c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d12d      	bne.n	8001622 <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	4b3a      	ldr	r3, [pc, #232]	@ (80016b4 <HAL_I2C_MspInit+0x110>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	4a39      	ldr	r2, [pc, #228]	@ (80016b4 <HAL_I2C_MspInit+0x110>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d6:	4b37      	ldr	r3, [pc, #220]	@ (80016b4 <HAL_I2C_MspInit+0x110>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	61bb      	str	r3, [r7, #24]
 80015e0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e8:	2312      	movs	r3, #18
 80015ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015f4:	2304      	movs	r3, #4
 80015f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	482e      	ldr	r0, [pc, #184]	@ (80016b8 <HAL_I2C_MspInit+0x114>)
 8001600:	f000 fcf4 	bl	8001fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <HAL_I2C_MspInit+0x110>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160c:	4a29      	ldr	r2, [pc, #164]	@ (80016b4 <HAL_I2C_MspInit+0x110>)
 800160e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001612:	6413      	str	r3, [r2, #64]	@ 0x40
 8001614:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <HAL_I2C_MspInit+0x110>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001620:	e041      	b.n	80016a6 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a25      	ldr	r2, [pc, #148]	@ (80016bc <HAL_I2C_MspInit+0x118>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d13c      	bne.n	80016a6 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <HAL_I2C_MspInit+0x110>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001634:	4a1f      	ldr	r2, [pc, #124]	@ (80016b4 <HAL_I2C_MspInit+0x110>)
 8001636:	f043 0302 	orr.w	r3, r3, #2
 800163a:	6313      	str	r3, [r2, #48]	@ 0x30
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <HAL_I2C_MspInit+0x110>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001648:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800164c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164e:	2312      	movs	r3, #18
 8001650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001652:	2301      	movs	r3, #1
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800165a:	2304      	movs	r3, #4
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4619      	mov	r1, r3
 8001664:	4814      	ldr	r0, [pc, #80]	@ (80016b8 <HAL_I2C_MspInit+0x114>)
 8001666:	f000 fcc1 	bl	8001fec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800166a:	2308      	movs	r3, #8
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166e:	2312      	movs	r3, #18
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001672:	2301      	movs	r3, #1
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800167a:	2309      	movs	r3, #9
 800167c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <HAL_I2C_MspInit+0x114>)
 8001686:	f000 fcb1 	bl	8001fec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_I2C_MspInit+0x110>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	4a08      	ldr	r2, [pc, #32]	@ (80016b4 <HAL_I2C_MspInit+0x110>)
 8001694:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001698:	6413      	str	r3, [r2, #64]	@ 0x40
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_I2C_MspInit+0x110>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
}
 80016a6:	bf00      	nop
 80016a8:	3730      	adds	r7, #48	@ 0x30
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40005400 	.word	0x40005400
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40005800 	.word	0x40005800

080016c0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0b      	ldr	r2, [pc, #44]	@ (80016fc <HAL_TIM_Base_MspInit+0x3c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d10d      	bne.n	80016ee <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <HAL_TIM_Base_MspInit+0x40>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016da:	4a09      	ldr	r2, [pc, #36]	@ (8001700 <HAL_TIM_Base_MspInit+0x40>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e2:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <HAL_TIM_Base_MspInit+0x40>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40010000 	.word	0x40010000
 8001700:	40023800 	.word	0x40023800

08001704 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	@ 0x30
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a32      	ldr	r2, [pc, #200]	@ (80017ec <HAL_TIM_Encoder_MspInit+0xe8>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d12c      	bne.n	8001780 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
 800172a:	4b31      	ldr	r3, [pc, #196]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0xec>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	4a30      	ldr	r2, [pc, #192]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6413      	str	r3, [r2, #64]	@ 0x40
 8001736:	4b2e      	ldr	r3, [pc, #184]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	61bb      	str	r3, [r7, #24]
 8001740:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	4b2a      	ldr	r3, [pc, #168]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a29      	ldr	r2, [pc, #164]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0xec>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b27      	ldr	r3, [pc, #156]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800175e:	23c0      	movs	r3, #192	@ 0xc0
 8001760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800176e:	2302      	movs	r3, #2
 8001770:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001772:	f107 031c 	add.w	r3, r7, #28
 8001776:	4619      	mov	r1, r3
 8001778:	481e      	ldr	r0, [pc, #120]	@ (80017f4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800177a:	f000 fc37 	bl	8001fec <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 800177e:	e030      	b.n	80017e2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1c      	ldr	r2, [pc, #112]	@ (80017f8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d12b      	bne.n	80017e2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b18      	ldr	r3, [pc, #96]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	4a17      	ldr	r2, [pc, #92]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	6413      	str	r3, [r2, #64]	@ 0x40
 800179a:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0xec>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0xec>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a10      	ldr	r2, [pc, #64]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0xec>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <HAL_TIM_Encoder_MspInit+0xec>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017c2:	2303      	movs	r3, #3
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80017d2:	2302      	movs	r3, #2
 80017d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	4619      	mov	r1, r3
 80017dc:	4807      	ldr	r0, [pc, #28]	@ (80017fc <HAL_TIM_Encoder_MspInit+0xf8>)
 80017de:	f000 fc05 	bl	8001fec <HAL_GPIO_Init>
}
 80017e2:	bf00      	nop
 80017e4:	3730      	adds	r7, #48	@ 0x30
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40000800 	.word	0x40000800
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020400 	.word	0x40020400
 80017f8:	40000c00 	.word	0x40000c00
 80017fc:	40020000 	.word	0x40020000

08001800 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a12      	ldr	r2, [pc, #72]	@ (8001868 <HAL_TIM_MspPostInit+0x68>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d11e      	bne.n	8001860 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <HAL_TIM_MspPostInit+0x6c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a10      	ldr	r2, [pc, #64]	@ (800186c <HAL_TIM_MspPostInit+0x6c>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <HAL_TIM_MspPostInit+0x6c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800183e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001842:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001850:	2301      	movs	r3, #1
 8001852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4619      	mov	r1, r3
 800185a:	4805      	ldr	r0, [pc, #20]	@ (8001870 <HAL_TIM_MspPostInit+0x70>)
 800185c:	f000 fbc6 	bl	8001fec <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001860:	bf00      	nop
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40010000 	.word	0x40010000
 800186c:	40023800 	.word	0x40023800
 8001870:	40020000 	.word	0x40020000

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <NMI_Handler+0x4>

0800187c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <MemManage_Handler+0x4>

0800188c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <BusFault_Handler+0x4>

08001894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <UsageFault_Handler+0x4>

0800189c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ca:	f000 fa39 	bl	8001d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018d8:	4802      	ldr	r0, [pc, #8]	@ (80018e4 <OTG_FS_IRQHandler+0x10>)
 80018da:	f001 fe63 	bl	80035a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20001954 	.word	0x20001954

080018e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return 1;
 80018ec:	2301      	movs	r3, #1
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_kill>:

int _kill(int pid, int sig)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001902:	f009 f925 	bl	800ab50 <__errno>
 8001906:	4603      	mov	r3, r0
 8001908:	2216      	movs	r2, #22
 800190a:	601a      	str	r2, [r3, #0]
  return -1;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_exit>:

void _exit (int status)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001920:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ffe7 	bl	80018f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800192a:	bf00      	nop
 800192c:	e7fd      	b.n	800192a <_exit+0x12>

0800192e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e00a      	b.n	8001956 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001940:	f3af 8000 	nop.w
 8001944:	4601      	mov	r1, r0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	60ba      	str	r2, [r7, #8]
 800194c:	b2ca      	uxtb	r2, r1
 800194e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	429a      	cmp	r2, r3
 800195c:	dbf0      	blt.n	8001940 <_read+0x12>
  }

  return len;
 800195e:	687b      	ldr	r3, [r7, #4]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e009      	b.n	800198e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	60ba      	str	r2, [r7, #8]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	429a      	cmp	r2, r3
 8001994:	dbf1      	blt.n	800197a <_write+0x12>
  }
  return len;
 8001996:	687b      	ldr	r3, [r7, #4]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_close>:

int _close(int file)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019c8:	605a      	str	r2, [r3, #4]
  return 0;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_isatty>:

int _isatty(int file)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e0:	2301      	movs	r3, #1
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	@ (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	@ (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a38:	f009 f88a 	bl	800ab50 <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20020000 	.word	0x20020000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	20000468 	.word	0x20000468
 8001a70:	200021a8 	.word	0x200021a8

08001a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <SystemInit+0x20>)
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a7e:	4a05      	ldr	r2, [pc, #20]	@ (8001a94 <SystemInit+0x20>)
 8001a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <selectTCAChannel>:
 */
#include "stm32f4xx_hal.h"
#include "main.h"
#include "tca9548.h"

void selectTCAChannel(uint8_t channel) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = (1 << channel);  // Enable only the selected channel
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, 0x77 << 1, &cmd, 1, HAL_MAX_DELAY);
 8001aae:	f107 020f 	add.w	r2, r7, #15
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2301      	movs	r3, #1
 8001aba:	21ee      	movs	r1, #238	@ 0xee
 8001abc:	4803      	ldr	r0, [pc, #12]	@ (8001acc <selectTCAChannel+0x34>)
 8001abe:	f000 fd77 	bl	80025b0 <HAL_I2C_Master_Transmit>
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200002e8 	.word	0x200002e8

08001ad0 <tcs34725_write8>:
/**************************************************************************/
/*!
    @brief  Writes a register and an 8 bit value over I2C
*/
/**************************************************************************/
void tcs34725_write8(uint8_t reg, uint8_t value) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	460a      	mov	r2, r1
 8001ada:	71fb      	strb	r3, [r7, #7]
 8001adc:	4613      	mov	r3, r2
 8001ade:	71bb      	strb	r3, [r7, #6]
    Wire.send(TCS34725_COMMAND_BIT | reg);
    Wire.send(value & 0xFF);
    #endif
    Wire.endTransmission();
    */
    uint8_t buffer[2] = {TCS34725_COMMAND_BIT | reg, value};
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	733b      	strb	r3, [r7, #12]
 8001aea:	79bb      	ldrb	r3, [r7, #6]
 8001aec:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8001aee:	f107 020c 	add.w	r2, r7, #12
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2302      	movs	r3, #2
 8001afa:	2152      	movs	r1, #82	@ 0x52
 8001afc:	4803      	ldr	r0, [pc, #12]	@ (8001b0c <tcs34725_write8+0x3c>)
 8001afe:	f000 fd57 	bl	80025b0 <HAL_I2C_Master_Transmit>
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200002e8 	.word	0x200002e8

08001b10 <read8>:
/**************************************************************************/
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
uint8_t read8(uint8_t reg) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
    return Wire.read();
    #else
    return Wire.receive();
    #endif
    */
    uint8_t cmd = TCS34725_COMMAND_BIT | reg;
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	73fb      	strb	r3, [r7, #15]
    uint8_t value = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 8001b28:	f107 020f 	add.w	r2, r7, #15
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2301      	movs	r3, #1
 8001b34:	2152      	movs	r1, #82	@ 0x52
 8001b36:	4809      	ldr	r0, [pc, #36]	@ (8001b5c <read8+0x4c>)
 8001b38:	f000 fd3a 	bl	80025b0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, &value, 1, HAL_MAX_DELAY);
 8001b3c:	f107 020e 	add.w	r2, r7, #14
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2301      	movs	r3, #1
 8001b48:	2152      	movs	r1, #82	@ 0x52
 8001b4a:	4804      	ldr	r0, [pc, #16]	@ (8001b5c <read8+0x4c>)
 8001b4c:	f000 fe2e 	bl	80027ac <HAL_I2C_Master_Receive>
    return value;
 8001b50:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200002e8 	.word	0x200002e8

08001b60 <enable>:
/**************************************************************************/
/*!
    Enables the device
*/
/**************************************************************************/
void enable(void) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
    tcs34725_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 8001b64:	2101      	movs	r1, #1
 8001b66:	2000      	movs	r0, #0
 8001b68:	f7ff ffb2 	bl	8001ad0 <tcs34725_write8>
    HAL_Delay(3);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f000 f907 	bl	8001d80 <HAL_Delay>
    tcs34725_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 8001b72:	2103      	movs	r1, #3
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7ff ffab 	bl	8001ad0 <tcs34725_write8>
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <tcs32725_begin>:
    doing anything else)
*/
/**************************************************************************/


bool tcs32725_begin(TCS34725_t *sensor, tcs34725IntegrationTime_t it, tcs34725Gain_t gain) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	70fb      	strb	r3, [r7, #3]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	70bb      	strb	r3, [r7, #2]
    //Wire.begin();

    /* Make sure we're actually connected */
    uint8_t x = read8(TCS34725_ID);
 8001b90:	2012      	movs	r0, #18
 8001b92:	f7ff ffbd 	bl	8001b10 <read8>
 8001b96:	4603      	mov	r3, r0
 8001b98:	73fb      	strb	r3, [r7, #15]
    my_printf("device id: %d", x);
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480d      	ldr	r0, [pc, #52]	@ (8001bd4 <tcs32725_begin+0x54>)
 8001ba0:	f7ff f9a0 	bl	8000ee4 <my_printf>
    if (x != 0x4D) {
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	2b4d      	cmp	r3, #77	@ 0x4d
 8001ba8:	d001      	beq.n	8001bae <tcs32725_begin+0x2e>
        return false;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e00d      	b.n	8001bca <tcs32725_begin+0x4a>
    }
    _tcs34725Initialised = true;
 8001bae:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd8 <tcs32725_begin+0x58>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]

    /* Set default integration time and gain */
    setIntegrationTime(it);
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f810 	bl	8001bdc <setIntegrationTime>
    setGain(gain);
 8001bbc:	78bb      	ldrb	r3, [r7, #2]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f82e 	bl	8001c20 <setGain>

    /* Note: by default, the device is in power down mode on bootup */
    enable();
 8001bc4:	f7ff ffcc 	bl	8001b60 <enable>

    return true;
 8001bc8:	2301      	movs	r3, #1
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	0800cc6c 	.word	0x0800cc6c
 8001bd8:	2000046c 	.word	0x2000046c

08001bdc <setIntegrationTime>:
/**************************************************************************/
/*!
    Sets the integration time for the TC34725
*/
/**************************************************************************/
void setIntegrationTime(tcs34725IntegrationTime_t it) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
    if (!_tcs34725Initialised) {
 8001be6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <setIntegrationTime+0x38>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	f083 0301 	eor.w	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <setIntegrationTime+0x1e>
        //begin();
    	my_printf("set integration time go wrong\r\n");
 8001bf4:	4808      	ldr	r0, [pc, #32]	@ (8001c18 <setIntegrationTime+0x3c>)
 8001bf6:	f7ff f975 	bl	8000ee4 <my_printf>
    }

    /* Update the timing register */
    tcs34725_write8(TCS34725_ATIME, it);
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f7ff ff66 	bl	8001ad0 <tcs34725_write8>

    /* Update value placeholder */
    _tcs34725IntegrationTime = it;
 8001c04:	4a05      	ldr	r2, [pc, #20]	@ (8001c1c <setIntegrationTime+0x40>)
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	7013      	strb	r3, [r2, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000046c 	.word	0x2000046c
 8001c18:	0800cc7c 	.word	0x0800cc7c
 8001c1c:	2000046e 	.word	0x2000046e

08001c20 <setGain>:
/**************************************************************************/
/*!
    Adjusts the gain on the TCS34725 (adjusts the sensitivity to light)
*/
/**************************************************************************/
void setGain(tcs34725Gain_t gain) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
        begin();
    }
    */

    /* Update the timing register */
    tcs34725_write8(TCS34725_CONTROL, gain);
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	200f      	movs	r0, #15
 8001c30:	f7ff ff4e 	bl	8001ad0 <tcs34725_write8>

    /* Update value placeholders */
    _tcs34725Gain = gain;
 8001c34:	4a03      	ldr	r2, [pc, #12]	@ (8001c44 <setGain+0x24>)
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	7013      	strb	r3, [r2, #0]
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000046d 	.word	0x2000046d

08001c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c4c:	f7ff ff12 	bl	8001a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c50:	480c      	ldr	r0, [pc, #48]	@ (8001c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c52:	490d      	ldr	r1, [pc, #52]	@ (8001c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c54:	4a0d      	ldr	r2, [pc, #52]	@ (8001c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c58:	e002      	b.n	8001c60 <LoopCopyDataInit>

08001c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5e:	3304      	adds	r3, #4

08001c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c64:	d3f9      	bcc.n	8001c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c68:	4c0a      	ldr	r4, [pc, #40]	@ (8001c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c6c:	e001      	b.n	8001c72 <LoopFillZerobss>

08001c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c70:	3204      	adds	r2, #4

08001c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c74:	d3fb      	bcc.n	8001c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c76:	f008 ff71 	bl	800ab5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c7a:	f7ff f95b 	bl	8000f34 <main>
  bx  lr    
 8001c7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c88:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001c8c:	0800d084 	.word	0x0800d084
  ldr r2, =_sbss
 8001c90:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8001c94:	200021a4 	.word	0x200021a4

08001c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c98:	e7fe      	b.n	8001c98 <ADC_IRQHandler>
	...

08001c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <HAL_Init+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cdc <HAL_Init+0x40>)
 8001ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cac:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <HAL_Init+0x40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001cdc <HAL_Init+0x40>)
 8001cb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb8:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <HAL_Init+0x40>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a07      	ldr	r2, [pc, #28]	@ (8001cdc <HAL_Init+0x40>)
 8001cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	f000 f94f 	bl	8001f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cca:	200f      	movs	r0, #15
 8001ccc:	f000 f808 	bl	8001ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd0:	f7ff fc40 	bl	8001554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023c00 	.word	0x40023c00

08001ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <HAL_InitTick+0x54>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <HAL_InitTick+0x58>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f967 	bl	8001fd2 <HAL_SYSTICK_Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00e      	b.n	8001d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	d80a      	bhi.n	8001d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d14:	2200      	movs	r2, #0
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d1c:	f000 f92f 	bl	8001f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d20:	4a06      	ldr	r2, [pc, #24]	@ (8001d3c <HAL_InitTick+0x5c>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_IncTick+0x20>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_IncTick+0x24>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <HAL_IncTick+0x24>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000008 	.word	0x20000008
 8001d64:	20000470 	.word	0x20000470

08001d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	@ (8001d7c <HAL_GetTick+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000470 	.word	0x20000470

08001d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff ffee 	bl	8001d68 <HAL_GetTick>
 8001d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d98:	d005      	beq.n	8001da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <HAL_Delay+0x44>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001da6:	bf00      	nop
 8001da8:	f7ff ffde 	bl	8001d68 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8f7      	bhi.n	8001da8 <HAL_Delay+0x28>
  {
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000008 	.word	0x20000008

08001dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001de4:	4013      	ands	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	@ (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e14:	4b04      	ldr	r3, [pc, #16]	@ (8001e28 <__NVIC_GetPriorityGrouping+0x18>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	f003 0307 	and.w	r3, r3, #7
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	db0b      	blt.n	8001e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	f003 021f 	and.w	r2, r3, #31
 8001e44:	4907      	ldr	r1, [pc, #28]	@ (8001e64 <__NVIC_EnableIRQ+0x38>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000e100 	.word	0xe000e100

08001e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	db0a      	blt.n	8001e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	490c      	ldr	r1, [pc, #48]	@ (8001eb4 <__NVIC_SetPriority+0x4c>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e90:	e00a      	b.n	8001ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4908      	ldr	r1, [pc, #32]	@ (8001eb8 <__NVIC_SetPriority+0x50>)
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	3b04      	subs	r3, #4
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	761a      	strb	r2, [r3, #24]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	@ 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f1c3 0307 	rsb	r3, r3, #7
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	bf28      	it	cs
 8001eda:	2304      	movcs	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d902      	bls.n	8001eec <NVIC_EncodePriority+0x30>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3b03      	subs	r3, #3
 8001eea:	e000      	b.n	8001eee <NVIC_EncodePriority+0x32>
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43d9      	mvns	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	4313      	orrs	r3, r2
         );
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3724      	adds	r7, #36	@ 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f34:	d301      	bcc.n	8001f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00f      	b.n	8001f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <SysTick_Config+0x40>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f42:	210f      	movs	r1, #15
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f48:	f7ff ff8e 	bl	8001e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <SysTick_Config+0x40>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f52:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <SysTick_Config+0x40>)
 8001f54:	2207      	movs	r2, #7
 8001f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	e000e010 	.word	0xe000e010

08001f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ff29 	bl	8001dc8 <__NVIC_SetPriorityGrouping>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f90:	f7ff ff3e 	bl	8001e10 <__NVIC_GetPriorityGrouping>
 8001f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	6978      	ldr	r0, [r7, #20]
 8001f9c:	f7ff ff8e 	bl	8001ebc <NVIC_EncodePriority>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff5d 	bl	8001e68 <__NVIC_SetPriority>
}
 8001fae:	bf00      	nop
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff31 	bl	8001e2c <__NVIC_EnableIRQ>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ffa2 	bl	8001f24 <SysTick_Config>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	@ 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e159      	b.n	80022bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002008:	2201      	movs	r2, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	f040 8148 	bne.w	80022b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d005      	beq.n	800203e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203a:	2b02      	cmp	r3, #2
 800203c:	d130      	bne.n	80020a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002074:	2201      	movs	r2, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 0201 	and.w	r2, r3, #1
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d017      	beq.n	80020dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d123      	bne.n	8002130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	08da      	lsrs	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3208      	adds	r2, #8
 80020f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	08da      	lsrs	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3208      	adds	r2, #8
 800212a:	69b9      	ldr	r1, [r7, #24]
 800212c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0203 	and.w	r2, r3, #3
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80a2 	beq.w	80022b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b57      	ldr	r3, [pc, #348]	@ (80022d4 <HAL_GPIO_Init+0x2e8>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	4a56      	ldr	r2, [pc, #344]	@ (80022d4 <HAL_GPIO_Init+0x2e8>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002180:	6453      	str	r3, [r2, #68]	@ 0x44
 8002182:	4b54      	ldr	r3, [pc, #336]	@ (80022d4 <HAL_GPIO_Init+0x2e8>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800218e:	4a52      	ldr	r2, [pc, #328]	@ (80022d8 <HAL_GPIO_Init+0x2ec>)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a49      	ldr	r2, [pc, #292]	@ (80022dc <HAL_GPIO_Init+0x2f0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d019      	beq.n	80021ee <HAL_GPIO_Init+0x202>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a48      	ldr	r2, [pc, #288]	@ (80022e0 <HAL_GPIO_Init+0x2f4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_GPIO_Init+0x1fe>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a47      	ldr	r2, [pc, #284]	@ (80022e4 <HAL_GPIO_Init+0x2f8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00d      	beq.n	80021e6 <HAL_GPIO_Init+0x1fa>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a46      	ldr	r2, [pc, #280]	@ (80022e8 <HAL_GPIO_Init+0x2fc>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d007      	beq.n	80021e2 <HAL_GPIO_Init+0x1f6>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a45      	ldr	r2, [pc, #276]	@ (80022ec <HAL_GPIO_Init+0x300>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d101      	bne.n	80021de <HAL_GPIO_Init+0x1f2>
 80021da:	2304      	movs	r3, #4
 80021dc:	e008      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021de:	2307      	movs	r3, #7
 80021e0:	e006      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021e2:	2303      	movs	r3, #3
 80021e4:	e004      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e002      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021ee:	2300      	movs	r3, #0
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	f002 0203 	and.w	r2, r2, #3
 80021f6:	0092      	lsls	r2, r2, #2
 80021f8:	4093      	lsls	r3, r2
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002200:	4935      	ldr	r1, [pc, #212]	@ (80022d8 <HAL_GPIO_Init+0x2ec>)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	3302      	adds	r3, #2
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800220e:	4b38      	ldr	r3, [pc, #224]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002232:	4a2f      	ldr	r2, [pc, #188]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002238:	4b2d      	ldr	r3, [pc, #180]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800225c:	4a24      	ldr	r2, [pc, #144]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002262:	4b23      	ldr	r3, [pc, #140]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002286:	4a1a      	ldr	r2, [pc, #104]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800228c:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022b0:	4a0f      	ldr	r2, [pc, #60]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3301      	adds	r3, #1
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b0f      	cmp	r3, #15
 80022c0:	f67f aea2 	bls.w	8002008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3724      	adds	r7, #36	@ 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40013800 	.word	0x40013800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40020400 	.word	0x40020400
 80022e4:	40020800 	.word	0x40020800
 80022e8:	40020c00 	.word	0x40020c00
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40013c00 	.word	0x40013c00

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002310:	e003      	b.n	800231a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e12b      	b.n	8002592 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff f928 	bl	80015a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2224      	movs	r2, #36	@ 0x24
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800237a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800238a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800238c:	f002 fe48 	bl	8005020 <HAL_RCC_GetPCLK1Freq>
 8002390:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4a81      	ldr	r2, [pc, #516]	@ (800259c <HAL_I2C_Init+0x274>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d807      	bhi.n	80023ac <HAL_I2C_Init+0x84>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4a80      	ldr	r2, [pc, #512]	@ (80025a0 <HAL_I2C_Init+0x278>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	bf94      	ite	ls
 80023a4:	2301      	movls	r3, #1
 80023a6:	2300      	movhi	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	e006      	b.n	80023ba <HAL_I2C_Init+0x92>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4a7d      	ldr	r2, [pc, #500]	@ (80025a4 <HAL_I2C_Init+0x27c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	bf94      	ite	ls
 80023b4:	2301      	movls	r3, #1
 80023b6:	2300      	movhi	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0e7      	b.n	8002592 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4a78      	ldr	r2, [pc, #480]	@ (80025a8 <HAL_I2C_Init+0x280>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0c9b      	lsrs	r3, r3, #18
 80023cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4a6a      	ldr	r2, [pc, #424]	@ (800259c <HAL_I2C_Init+0x274>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d802      	bhi.n	80023fc <HAL_I2C_Init+0xd4>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	3301      	adds	r3, #1
 80023fa:	e009      	b.n	8002410 <HAL_I2C_Init+0xe8>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	4a69      	ldr	r2, [pc, #420]	@ (80025ac <HAL_I2C_Init+0x284>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	3301      	adds	r3, #1
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	430b      	orrs	r3, r1
 8002416:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002422:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	495c      	ldr	r1, [pc, #368]	@ (800259c <HAL_I2C_Init+0x274>)
 800242c:	428b      	cmp	r3, r1
 800242e:	d819      	bhi.n	8002464 <HAL_I2C_Init+0x13c>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1e59      	subs	r1, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fbb1 f3f3 	udiv	r3, r1, r3
 800243e:	1c59      	adds	r1, r3, #1
 8002440:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002444:	400b      	ands	r3, r1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_I2C_Init+0x138>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1e59      	subs	r1, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fbb1 f3f3 	udiv	r3, r1, r3
 8002458:	3301      	adds	r3, #1
 800245a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245e:	e051      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 8002460:	2304      	movs	r3, #4
 8002462:	e04f      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d111      	bne.n	8002490 <HAL_I2C_Init+0x168>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1e58      	subs	r0, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	440b      	add	r3, r1
 800247a:	fbb0 f3f3 	udiv	r3, r0, r3
 800247e:	3301      	adds	r3, #1
 8002480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	e012      	b.n	80024b6 <HAL_I2C_Init+0x18e>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1e58      	subs	r0, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	0099      	lsls	r1, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Init+0x196>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e022      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10e      	bne.n	80024e4 <HAL_I2C_Init+0x1bc>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1e58      	subs	r0, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	440b      	add	r3, r1
 80024d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d8:	3301      	adds	r3, #1
 80024da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024e2:	e00f      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1e58      	subs	r0, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	0099      	lsls	r1, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024fa:	3301      	adds	r3, #1
 80024fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002500:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	6809      	ldr	r1, [r1, #0]
 8002508:	4313      	orrs	r3, r2
 800250a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69da      	ldr	r2, [r3, #28]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002532:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6911      	ldr	r1, [r2, #16]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68d2      	ldr	r2, [r2, #12]
 800253e:	4311      	orrs	r1, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	430b      	orrs	r3, r1
 8002546:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	000186a0 	.word	0x000186a0
 80025a0:	001e847f 	.word	0x001e847f
 80025a4:	003d08ff 	.word	0x003d08ff
 80025a8:	431bde83 	.word	0x431bde83
 80025ac:	10624dd3 	.word	0x10624dd3

080025b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	461a      	mov	r2, r3
 80025bc:	460b      	mov	r3, r1
 80025be:	817b      	strh	r3, [r7, #10]
 80025c0:	4613      	mov	r3, r2
 80025c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7ff fbd0 	bl	8001d68 <HAL_GetTick>
 80025c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	f040 80e0 	bne.w	8002798 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2319      	movs	r3, #25
 80025de:	2201      	movs	r2, #1
 80025e0:	4970      	ldr	r1, [pc, #448]	@ (80027a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 fc64 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	e0d3      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_I2C_Master_Transmit+0x50>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e0cc      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d007      	beq.n	8002626 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002634:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2221      	movs	r2, #33	@ 0x21
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2210      	movs	r2, #16
 8002642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	893a      	ldrh	r2, [r7, #8]
 8002656:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4a50      	ldr	r2, [pc, #320]	@ (80027a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002666:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002668:	8979      	ldrh	r1, [r7, #10]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	6a3a      	ldr	r2, [r7, #32]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 face 	bl	8002c10 <I2C_MasterRequestWrite>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e08d      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002694:	e066      	b.n	8002764 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	6a39      	ldr	r1, [r7, #32]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fd22 	bl	80030e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00d      	beq.n	80026c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d107      	bne.n	80026be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e06b      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c6:	781a      	ldrb	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d11b      	bne.n	8002738 <HAL_I2C_Master_Transmit+0x188>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	d017      	beq.n	8002738 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	6a39      	ldr	r1, [r7, #32]
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fd19 	bl	8003174 <I2C_WaitOnBTFFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00d      	beq.n	8002764 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274c:	2b04      	cmp	r3, #4
 800274e:	d107      	bne.n	8002760 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800275e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e01a      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002768:	2b00      	cmp	r3, #0
 800276a:	d194      	bne.n	8002696 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800277a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	e000      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
  }
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	00100002 	.word	0x00100002
 80027a8:	ffff0000 	.word	0xffff0000

080027ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08c      	sub	sp, #48	@ 0x30
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	461a      	mov	r2, r3
 80027b8:	460b      	mov	r3, r1
 80027ba:	817b      	strh	r3, [r7, #10]
 80027bc:	4613      	mov	r3, r2
 80027be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027c0:	f7ff fad2 	bl	8001d68 <HAL_GetTick>
 80027c4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	f040 8217 	bne.w	8002c02 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2319      	movs	r3, #25
 80027da:	2201      	movs	r2, #1
 80027dc:	497c      	ldr	r1, [pc, #496]	@ (80029d0 <HAL_I2C_Master_Receive+0x224>)
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fb66 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80027ea:	2302      	movs	r3, #2
 80027ec:	e20a      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_I2C_Master_Receive+0x50>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e203      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b01      	cmp	r3, #1
 8002810:	d007      	beq.n	8002822 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002830:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2222      	movs	r2, #34	@ 0x22
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2210      	movs	r2, #16
 800283e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	893a      	ldrh	r2, [r7, #8]
 8002852:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4a5c      	ldr	r2, [pc, #368]	@ (80029d4 <HAL_I2C_Master_Receive+0x228>)
 8002862:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002864:	8979      	ldrh	r1, [r7, #10]
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fa52 	bl	8002d14 <I2C_MasterRequestRead>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e1c4      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800287e:	2b00      	cmp	r3, #0
 8002880:	d113      	bne.n	80028aa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	623b      	str	r3, [r7, #32]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	623b      	str	r3, [r7, #32]
 8002896:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e198      	b.n	8002bdc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d11b      	bne.n	80028ea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e178      	b.n	8002bdc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d11b      	bne.n	800292a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002900:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002910:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	e158      	b.n	8002bdc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002938:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002950:	e144      	b.n	8002bdc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002956:	2b03      	cmp	r3, #3
 8002958:	f200 80f1 	bhi.w	8002b3e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002960:	2b01      	cmp	r3, #1
 8002962:	d123      	bne.n	80029ac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002966:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fc4b 	bl	8003204 <I2C_WaitOnRXNEFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e145      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029aa:	e117      	b.n	8002bdc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d14e      	bne.n	8002a52 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ba:	2200      	movs	r2, #0
 80029bc:	4906      	ldr	r1, [pc, #24]	@ (80029d8 <HAL_I2C_Master_Receive+0x22c>)
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fa76 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d008      	beq.n	80029dc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e11a      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
 80029ce:	bf00      	nop
 80029d0:	00100002 	.word	0x00100002
 80029d4:	ffff0000 	.word	0xffff0000
 80029d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a50:	e0c4      	b.n	8002bdc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a58:	2200      	movs	r2, #0
 8002a5a:	496c      	ldr	r1, [pc, #432]	@ (8002c0c <HAL_I2C_Master_Receive+0x460>)
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fa27 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0cb      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4955      	ldr	r1, [pc, #340]	@ (8002c0c <HAL_I2C_Master_Receive+0x460>)
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f9f9 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e09d      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b3c:	e04e      	b.n	8002bdc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fb5e 	bl	8003204 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e058      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d124      	bne.n	8002bdc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d107      	bne.n	8002baa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ba8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f47f aeb6 	bne.w	8002952 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3728      	adds	r7, #40	@ 0x28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	00010004 	.word	0x00010004

08002c10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d006      	beq.n	8002c3a <I2C_MasterRequestWrite+0x2a>
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d003      	beq.n	8002c3a <I2C_MasterRequestWrite+0x2a>
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c38:	d108      	bne.n	8002c4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e00b      	b.n	8002c64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c50:	2b12      	cmp	r3, #18
 8002c52:	d107      	bne.n	8002c64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f91d 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00d      	beq.n	8002c98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c8a:	d103      	bne.n	8002c94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e035      	b.n	8002d04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ca0:	d108      	bne.n	8002cb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ca2:	897b      	ldrh	r3, [r7, #10]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cb0:	611a      	str	r2, [r3, #16]
 8002cb2:	e01b      	b.n	8002cec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cb4:	897b      	ldrh	r3, [r7, #10]
 8002cb6:	11db      	asrs	r3, r3, #7
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f003 0306 	and.w	r3, r3, #6
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f063 030f 	orn	r3, r3, #15
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	490e      	ldr	r1, [pc, #56]	@ (8002d0c <I2C_MasterRequestWrite+0xfc>)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f966 	bl	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e010      	b.n	8002d04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ce2:	897b      	ldrh	r3, [r7, #10]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4907      	ldr	r1, [pc, #28]	@ (8002d10 <I2C_MasterRequestWrite+0x100>)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f956 	bl	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	00010008 	.word	0x00010008
 8002d10:	00010002 	.word	0x00010002

08002d14 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	460b      	mov	r3, r1
 8002d22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d28:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d38:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d006      	beq.n	8002d4e <I2C_MasterRequestRead+0x3a>
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d003      	beq.n	8002d4e <I2C_MasterRequestRead+0x3a>
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d4c:	d108      	bne.n	8002d60 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	e00b      	b.n	8002d78 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d64:	2b11      	cmp	r3, #17
 8002d66:	d107      	bne.n	8002d78 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f893 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00d      	beq.n	8002dac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d9e:	d103      	bne.n	8002da8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002da6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e079      	b.n	8002ea0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002db4:	d108      	bne.n	8002dc8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002db6:	897b      	ldrh	r3, [r7, #10]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	611a      	str	r2, [r3, #16]
 8002dc6:	e05f      	b.n	8002e88 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dc8:	897b      	ldrh	r3, [r7, #10]
 8002dca:	11db      	asrs	r3, r3, #7
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	f003 0306 	and.w	r3, r3, #6
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f063 030f 	orn	r3, r3, #15
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4930      	ldr	r1, [pc, #192]	@ (8002ea8 <I2C_MasterRequestRead+0x194>)
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f8dc 	bl	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e054      	b.n	8002ea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002df6:	897b      	ldrh	r3, [r7, #10]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4929      	ldr	r1, [pc, #164]	@ (8002eac <I2C_MasterRequestRead+0x198>)
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f8cc 	bl	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e044      	b.n	8002ea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e3a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f831 	bl	8002eb0 <I2C_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00d      	beq.n	8002e70 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e62:	d103      	bne.n	8002e6c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e6a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e017      	b.n	8002ea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e70:	897b      	ldrh	r3, [r7, #10]
 8002e72:	11db      	asrs	r3, r3, #7
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f003 0306 	and.w	r3, r3, #6
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f063 030e 	orn	r3, r3, #14
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4907      	ldr	r1, [pc, #28]	@ (8002eac <I2C_MasterRequestRead+0x198>)
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f888 	bl	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	00010008 	.word	0x00010008
 8002eac:	00010002 	.word	0x00010002

08002eb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec0:	e048      	b.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ec8:	d044      	beq.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eca:	f7fe ff4d 	bl	8001d68 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d302      	bcc.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d139      	bne.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	0c1b      	lsrs	r3, r3, #16
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d10d      	bne.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	43da      	mvns	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	e00c      	b.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	43da      	mvns	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4013      	ands	r3, r2
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d116      	bne.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e023      	b.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	0c1b      	lsrs	r3, r3, #16
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d10d      	bne.n	8002f7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	43da      	mvns	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	e00c      	b.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d093      	beq.n	8002ec2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fb2:	e071      	b.n	8003098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc2:	d123      	bne.n	800300c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff8:	f043 0204 	orr.w	r2, r3, #4
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e067      	b.n	80030dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003012:	d041      	beq.n	8003098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003014:	f7fe fea8 	bl	8001d68 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	429a      	cmp	r2, r3
 8003022:	d302      	bcc.n	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d136      	bne.n	8003098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d10c      	bne.n	800304e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	43da      	mvns	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4013      	ands	r3, r2
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	bf14      	ite	ne
 8003046:	2301      	movne	r3, #1
 8003048:	2300      	moveq	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	e00b      	b.n	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	43da      	mvns	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4013      	ands	r3, r2
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d016      	beq.n	8003098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e021      	b.n	80030dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	0c1b      	lsrs	r3, r3, #16
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d10c      	bne.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	43da      	mvns	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4013      	ands	r3, r2
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	e00b      	b.n	80030d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	43da      	mvns	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4013      	ands	r3, r2
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf14      	ite	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	2300      	moveq	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f47f af6d 	bne.w	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030f0:	e034      	b.n	800315c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f8e3 	bl	80032be <I2C_IsAcknowledgeFailed>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e034      	b.n	800316c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003108:	d028      	beq.n	800315c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310a:	f7fe fe2d 	bl	8001d68 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	d302      	bcc.n	8003120 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d11d      	bne.n	800315c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800312a:	2b80      	cmp	r3, #128	@ 0x80
 800312c:	d016      	beq.n	800315c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e007      	b.n	800316c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003166:	2b80      	cmp	r3, #128	@ 0x80
 8003168:	d1c3      	bne.n	80030f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003180:	e034      	b.n	80031ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f89b 	bl	80032be <I2C_IsAcknowledgeFailed>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e034      	b.n	80031fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003198:	d028      	beq.n	80031ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7fe fde5 	bl	8001d68 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11d      	bne.n	80031ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d016      	beq.n	80031ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e007      	b.n	80031fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d1c3      	bne.n	8003182 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003210:	e049      	b.n	80032a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b10      	cmp	r3, #16
 800321e:	d119      	bne.n	8003254 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0210 	mvn.w	r2, #16
 8003228:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e030      	b.n	80032b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003254:	f7fe fd88 	bl	8001d68 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	429a      	cmp	r2, r3
 8003262:	d302      	bcc.n	800326a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d11d      	bne.n	80032a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003274:	2b40      	cmp	r3, #64	@ 0x40
 8003276:	d016      	beq.n	80032a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	f043 0220 	orr.w	r2, r3, #32
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e007      	b.n	80032b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b0:	2b40      	cmp	r3, #64	@ 0x40
 80032b2:	d1ae      	bne.n	8003212 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d4:	d11b      	bne.n	800330e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	f043 0204 	orr.w	r2, r3, #4
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af02      	add	r7, sp, #8
 8003322:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e101      	b.n	8003532 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d106      	bne.n	800334e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f006 fb0d 	bl	8009968 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2203      	movs	r2, #3
 8003352:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800335c:	d102      	bne.n	8003364 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f002 fea4 	bl	80060b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	7c1a      	ldrb	r2, [r3, #16]
 8003376:	f88d 2000 	strb.w	r2, [sp]
 800337a:	3304      	adds	r3, #4
 800337c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800337e:	f002 fd83 	bl	8005e88 <USB_CoreInit>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0ce      	b.n	8003532 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2100      	movs	r1, #0
 800339a:	4618      	mov	r0, r3
 800339c:	f002 fe9c 	bl	80060d8 <USB_SetCurrentMode>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e0bf      	b.n	8003532 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	73fb      	strb	r3, [r7, #15]
 80033b6:	e04a      	b.n	800344e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033b8:	7bfa      	ldrb	r2, [r7, #15]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	3315      	adds	r3, #21
 80033c8:	2201      	movs	r2, #1
 80033ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033cc:	7bfa      	ldrb	r2, [r7, #15]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	3314      	adds	r3, #20
 80033dc:	7bfa      	ldrb	r2, [r7, #15]
 80033de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033e0:	7bfa      	ldrb	r2, [r7, #15]
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	b298      	uxth	r0, r3
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	332e      	adds	r3, #46	@ 0x2e
 80033f4:	4602      	mov	r2, r0
 80033f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033f8:	7bfa      	ldrb	r2, [r7, #15]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4413      	add	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	3318      	adds	r3, #24
 8003408:	2200      	movs	r2, #0
 800340a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800340c:	7bfa      	ldrb	r2, [r7, #15]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	331c      	adds	r3, #28
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003420:	7bfa      	ldrb	r2, [r7, #15]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	3320      	adds	r3, #32
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003434:	7bfa      	ldrb	r2, [r7, #15]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	3324      	adds	r3, #36	@ 0x24
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	3301      	adds	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	791b      	ldrb	r3, [r3, #4]
 8003452:	7bfa      	ldrb	r2, [r7, #15]
 8003454:	429a      	cmp	r2, r3
 8003456:	d3af      	bcc.n	80033b8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]
 800345c:	e044      	b.n	80034e8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800349c:	2200      	movs	r2, #0
 800349e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034a0:	7bfa      	ldrb	r2, [r7, #15]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034cc:	7bfa      	ldrb	r2, [r7, #15]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	3301      	adds	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	791b      	ldrb	r3, [r3, #4]
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d3b5      	bcc.n	800345e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	7c1a      	ldrb	r2, [r3, #16]
 80034fa:	f88d 2000 	strb.w	r2, [sp]
 80034fe:	3304      	adds	r3, #4
 8003500:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003502:	f002 fe35 	bl	8006170 <USB_DevInit>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e00c      	b.n	8003532 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f003 fe7f 	bl	800722e <USB_DevDisconnect>

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_PCD_Start+0x1c>
 8003552:	2302      	movs	r3, #2
 8003554:	e022      	b.n	800359c <HAL_PCD_Start+0x62>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d009      	beq.n	800357e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800356e:	2b01      	cmp	r3, #1
 8003570:	d105      	bne.n	800357e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003576:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f002 fd86 	bl	8006094 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f003 fe2d 	bl	80071ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b08d      	sub	sp, #52	@ 0x34
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f003 feeb 	bl	8007396 <USB_GetMode>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f040 848c 	bne.w	8003ee0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f003 fe4f 	bl	8007270 <USB_ReadInterrupts>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8482 	beq.w	8003ede <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	0a1b      	lsrs	r3, r3, #8
 80035e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f003 fe3c 	bl	8007270 <USB_ReadInterrupts>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d107      	bne.n	8003612 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f002 0202 	and.w	r2, r2, #2
 8003610:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f003 fe2a 	bl	8007270 <USB_ReadInterrupts>
 800361c:	4603      	mov	r3, r0
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b10      	cmp	r3, #16
 8003624:	d161      	bne.n	80036ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699a      	ldr	r2, [r3, #24]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0210 	bic.w	r2, r2, #16
 8003634:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	f003 020f 	and.w	r2, r3, #15
 8003642:	4613      	mov	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	3304      	adds	r3, #4
 8003654:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800365c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003660:	d124      	bne.n	80036ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003668:	4013      	ands	r3, r2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d035      	beq.n	80036da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003678:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800367c:	b29b      	uxth	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	6a38      	ldr	r0, [r7, #32]
 8003682:	f003 fc61 	bl	8006f48 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003692:	441a      	add	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	695a      	ldr	r2, [r3, #20]
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	091b      	lsrs	r3, r3, #4
 80036a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036a4:	441a      	add	r2, r3
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	615a      	str	r2, [r3, #20]
 80036aa:	e016      	b.n	80036da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80036b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80036b6:	d110      	bne.n	80036da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036be:	2208      	movs	r2, #8
 80036c0:	4619      	mov	r1, r3
 80036c2:	6a38      	ldr	r0, [r7, #32]
 80036c4:	f003 fc40 	bl	8006f48 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036d4:	441a      	add	r2, r3
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699a      	ldr	r2, [r3, #24]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0210 	orr.w	r2, r2, #16
 80036e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f003 fdbe 	bl	8007270 <USB_ReadInterrupts>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036fa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80036fe:	f040 80a7 	bne.w	8003850 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f003 fdc3 	bl	8007296 <USB_ReadDevAllOutEpInterrupt>
 8003710:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003712:	e099      	b.n	8003848 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 808e 	beq.w	800383c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	4611      	mov	r1, r2
 800372a:	4618      	mov	r0, r3
 800372c:	f003 fde7 	bl	80072fe <USB_ReadDevOutEPInterrupt>
 8003730:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00c      	beq.n	8003756 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800373c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003748:	461a      	mov	r2, r3
 800374a:	2301      	movs	r3, #1
 800374c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800374e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fea3 	bl	800449c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00c      	beq.n	800377a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800376c:	461a      	mov	r2, r3
 800376e:	2308      	movs	r3, #8
 8003770:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003772:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 ff79 	bl	800466c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003790:	461a      	mov	r2, r3
 8003792:	2310      	movs	r3, #16
 8003794:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d030      	beq.n	8003802 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a8:	2b80      	cmp	r3, #128	@ 0x80
 80037aa:	d109      	bne.n	80037c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80037c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c2:	4613      	mov	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	3304      	adds	r3, #4
 80037d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	78db      	ldrb	r3, [r3, #3]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d108      	bne.n	80037f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	4619      	mov	r1, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f006 f9b8 	bl	8009b60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80037f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037fc:	461a      	mov	r2, r3
 80037fe:	2302      	movs	r3, #2
 8003800:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003818:	461a      	mov	r2, r3
 800381a:	2320      	movs	r3, #32
 800381c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d009      	beq.n	800383c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003834:	461a      	mov	r2, r3
 8003836:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800383a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	3301      	adds	r3, #1
 8003840:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384a:	2b00      	cmp	r3, #0
 800384c:	f47f af62 	bne.w	8003714 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f003 fd0b 	bl	8007270 <USB_ReadInterrupts>
 800385a:	4603      	mov	r3, r0
 800385c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003860:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003864:	f040 80db 	bne.w	8003a1e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f003 fd2c 	bl	80072ca <USB_ReadDevAllInEpInterrupt>
 8003872:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003878:	e0cd      	b.n	8003a16 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800387a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80c2 	beq.w	8003a0a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f003 fd52 	bl	800733a <USB_ReadDevInEPInterrupt>
 8003896:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d057      	beq.n	8003952 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	2201      	movs	r2, #1
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69f9      	ldr	r1, [r7, #28]
 80038be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038c2:	4013      	ands	r3, r2
 80038c4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038d2:	461a      	mov	r2, r3
 80038d4:	2301      	movs	r3, #1
 80038d6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	799b      	ldrb	r3, [r3, #6]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d132      	bne.n	8003946 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	3320      	adds	r3, #32
 80038f0:	6819      	ldr	r1, [r3, #0]
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f6:	4613      	mov	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4403      	add	r3, r0
 8003900:	331c      	adds	r3, #28
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4419      	add	r1, r3
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390a:	4613      	mov	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4403      	add	r3, r0
 8003914:	3320      	adds	r3, #32
 8003916:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391a:	2b00      	cmp	r3, #0
 800391c:	d113      	bne.n	8003946 <HAL_PCD_IRQHandler+0x3a2>
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003922:	4613      	mov	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	3324      	adds	r3, #36	@ 0x24
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d108      	bne.n	8003946 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800393e:	461a      	mov	r2, r3
 8003940:	2101      	movs	r1, #1
 8003942:	f003 fd59 	bl	80073f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	b2db      	uxtb	r3, r3
 800394a:	4619      	mov	r1, r3
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f006 f88c 	bl	8009a6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800395c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003968:	461a      	mov	r2, r3
 800396a:	2308      	movs	r3, #8
 800396c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003984:	461a      	mov	r2, r3
 8003986:	2310      	movs	r3, #16
 8003988:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a0:	461a      	mov	r2, r3
 80039a2:	2340      	movs	r3, #64	@ 0x40
 80039a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d023      	beq.n	80039f8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80039b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039b2:	6a38      	ldr	r0, [r7, #32]
 80039b4:	f002 fd40 	bl	8006438 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80039b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ba:	4613      	mov	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	3310      	adds	r3, #16
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	4413      	add	r3, r2
 80039c8:	3304      	adds	r3, #4
 80039ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	78db      	ldrb	r3, [r3, #3]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d108      	bne.n	80039e6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2200      	movs	r2, #0
 80039d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	4619      	mov	r1, r3
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f006 f8cf 	bl	8009b84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039f2:	461a      	mov	r2, r3
 80039f4:	2302      	movs	r3, #2
 80039f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fcbd 	bl	8004384 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a12:	085b      	lsrs	r3, r3, #1
 8003a14:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f47f af2e 	bne.w	800387a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f003 fc24 	bl	8007270 <USB_ReadInterrupts>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a32:	d122      	bne.n	8003a7a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	69fa      	ldr	r2, [r7, #28]
 8003a3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a42:	f023 0301 	bic.w	r3, r3, #1
 8003a46:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d108      	bne.n	8003a64 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fea3 	bl	80047a8 <HAL_PCDEx_LPM_Callback>
 8003a62:	e002      	b.n	8003a6a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f006 f86d 	bl	8009b44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f003 fbf6 	bl	8007270 <USB_ReadInterrupts>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a8e:	d112      	bne.n	8003ab6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d102      	bne.n	8003aa6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f006 f829 	bl	8009af8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003ab4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f003 fbd8 	bl	8007270 <USB_ReadInterrupts>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aca:	f040 80b7 	bne.w	8003c3c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2110      	movs	r1, #16
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f002 fca5 	bl	8006438 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aee:	2300      	movs	r3, #0
 8003af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003af2:	e046      	b.n	8003b82 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b00:	461a      	mov	r2, r3
 8003b02:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b06:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b18:	0151      	lsls	r1, r2, #5
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	440a      	add	r2, r1
 8003b1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b34:	461a      	mov	r2, r3
 8003b36:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b3a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b4c:	0151      	lsls	r1, r2, #5
 8003b4e:	69fa      	ldr	r2, [r7, #28]
 8003b50:	440a      	add	r2, r1
 8003b52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b6c:	0151      	lsls	r1, r2, #5
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	440a      	add	r2, r1
 8003b72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b7a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7e:	3301      	adds	r3, #1
 8003b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	791b      	ldrb	r3, [r3, #4]
 8003b86:	461a      	mov	r2, r3
 8003b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d3b2      	bcc.n	8003af4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b9c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003ba0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	7bdb      	ldrb	r3, [r3, #15]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bba:	f043 030b 	orr.w	r3, r3, #11
 8003bbe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bd0:	f043 030b 	orr.w	r3, r3, #11
 8003bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bd6:	e015      	b.n	8003c04 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003be6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003bea:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003bee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bfe:	f043 030b 	orr.w	r3, r3, #11
 8003c02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c12:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003c16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c26:	461a      	mov	r2, r3
 8003c28:	f003 fbe6 	bl	80073f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f003 fb15 	bl	8007270 <USB_ReadInterrupts>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c50:	d123      	bne.n	8003c9a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f003 fbab 	bl	80073b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f002 fc62 	bl	800652a <USB_GetDevSpeed>
 8003c66:	4603      	mov	r3, r0
 8003c68:	461a      	mov	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681c      	ldr	r4, [r3, #0]
 8003c72:	f001 f9c9 	bl	8005008 <HAL_RCC_GetHCLKFreq>
 8003c76:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4620      	mov	r0, r4
 8003c80:	f002 f966 	bl	8005f50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f005 ff18 	bl	8009aba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f003 fae6 	bl	8007270 <USB_ReadInterrupts>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d10a      	bne.n	8003cc4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f005 fef5 	bl	8009a9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f002 0208 	and.w	r2, r2, #8
 8003cc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f003 fad1 	bl	8007270 <USB_ReadInterrupts>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd4:	2b80      	cmp	r3, #128	@ 0x80
 8003cd6:	d123      	bne.n	8003d20 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce8:	e014      	b.n	8003d14 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cee:	4613      	mov	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d105      	bne.n	8003d0e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	4619      	mov	r1, r3
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fb0a 	bl	8004322 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	3301      	adds	r3, #1
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	791b      	ldrb	r3, [r3, #4]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d3e4      	bcc.n	8003cea <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f003 faa3 	bl	8007270 <USB_ReadInterrupts>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d34:	d13c      	bne.n	8003db0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d36:	2301      	movs	r3, #1
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d3a:	e02b      	b.n	8003d94 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d50:	4613      	mov	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	3318      	adds	r3, #24
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d115      	bne.n	8003d8e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003d62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	da12      	bge.n	8003d8e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	3317      	adds	r3, #23
 8003d78:	2201      	movs	r2, #1
 8003d7a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 faca 	bl	8004322 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	3301      	adds	r3, #1
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	791b      	ldrb	r3, [r3, #4]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d3cd      	bcc.n	8003d3c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695a      	ldr	r2, [r3, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003dae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f003 fa5b 	bl	8007270 <USB_ReadInterrupts>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dc4:	d156      	bne.n	8003e74 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dca:	e045      	b.n	8003e58 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d12e      	bne.n	8003e52 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003df4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	da2b      	bge.n	8003e52 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003e06:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d121      	bne.n	8003e52 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e12:	4613      	mov	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e4e:	6053      	str	r3, [r2, #4]
            break;
 8003e50:	e008      	b.n	8003e64 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	3301      	adds	r3, #1
 8003e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	791b      	ldrb	r3, [r3, #4]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d3b3      	bcc.n	8003dcc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695a      	ldr	r2, [r3, #20]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003e72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f003 f9f9 	bl	8007270 <USB_ReadInterrupts>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e88:	d10a      	bne.n	8003ea0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f005 fe8c 	bl	8009ba8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003e9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f003 f9e3 	bl	8007270 <USB_ReadInterrupts>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d115      	bne.n	8003ee0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f005 fe7c 	bl	8009bc4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6859      	ldr	r1, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	605a      	str	r2, [r3, #4]
 8003edc:	e000      	b.n	8003ee0 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003ede:	bf00      	nop
    }
  }
}
 8003ee0:	3734      	adds	r7, #52	@ 0x34
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd90      	pop	{r4, r7, pc}

08003ee6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_PCD_SetAddress+0x1a>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e012      	b.n	8003f26 <HAL_PCD_SetAddress+0x40>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	4611      	mov	r1, r2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f003 f942 	bl	80071a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	4608      	mov	r0, r1
 8003f38:	4611      	mov	r1, r2
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	70fb      	strb	r3, [r7, #3]
 8003f40:	460b      	mov	r3, r1
 8003f42:	803b      	strh	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	da0f      	bge.n	8003f74 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	f003 020f 	and.w	r2, r3, #15
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	3310      	adds	r3, #16
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	4413      	add	r3, r2
 8003f68:	3304      	adds	r3, #4
 8003f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	705a      	strb	r2, [r3, #1]
 8003f72:	e00f      	b.n	8003f94 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	f003 020f 	and.w	r2, r3, #15
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	4413      	add	r3, r2
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003fa0:	883b      	ldrh	r3, [r7, #0]
 8003fa2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	78ba      	ldrb	r2, [r7, #2]
 8003fae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	785b      	ldrb	r3, [r3, #1]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d004      	beq.n	8003fc2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fc2:	78bb      	ldrb	r3, [r7, #2]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d102      	bne.n	8003fce <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_PCD_EP_Open+0xae>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e00e      	b.n	8003ffa <HAL_PCD_EP_Open+0xcc>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68f9      	ldr	r1, [r7, #12]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f002 fac2 	bl	8006574 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003ff8:	7afb      	ldrb	r3, [r7, #11]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	460b      	mov	r3, r1
 800400c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800400e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004012:	2b00      	cmp	r3, #0
 8004014:	da0f      	bge.n	8004036 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	f003 020f 	and.w	r2, r3, #15
 800401c:	4613      	mov	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	3310      	adds	r3, #16
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	4413      	add	r3, r2
 800402a:	3304      	adds	r3, #4
 800402c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	705a      	strb	r2, [r3, #1]
 8004034:	e00f      	b.n	8004056 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	f003 020f 	and.w	r2, r3, #15
 800403c:	4613      	mov	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	4413      	add	r3, r2
 800404c:	3304      	adds	r3, #4
 800404e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	b2da      	uxtb	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_PCD_EP_Close+0x6e>
 800406c:	2302      	movs	r3, #2
 800406e:	e00e      	b.n	800408e <HAL_PCD_EP_Close+0x8c>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68f9      	ldr	r1, [r7, #12]
 800407e:	4618      	mov	r0, r3
 8004080:	f002 fb00 	bl	8006684 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b086      	sub	sp, #24
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
 80040a2:	460b      	mov	r3, r1
 80040a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040a6:	7afb      	ldrb	r3, [r7, #11]
 80040a8:	f003 020f 	and.w	r2, r3, #15
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	3304      	adds	r3, #4
 80040be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	2200      	movs	r2, #0
 80040d0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2200      	movs	r2, #0
 80040d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040d8:	7afb      	ldrb	r3, [r7, #11]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	799b      	ldrb	r3, [r3, #6]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d102      	bne.n	80040f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	799b      	ldrb	r3, [r3, #6]
 80040fa:	461a      	mov	r2, r3
 80040fc:	6979      	ldr	r1, [r7, #20]
 80040fe:	f002 fb9d 	bl	800683c <USB_EPStartXfer>

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	f003 020f 	and.w	r2, r3, #15
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800412e:	681b      	ldr	r3, [r3, #0]
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	607a      	str	r2, [r7, #4]
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	460b      	mov	r3, r1
 800414a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800414c:	7afb      	ldrb	r3, [r7, #11]
 800414e:	f003 020f 	and.w	r2, r3, #15
 8004152:	4613      	mov	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	3310      	adds	r3, #16
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	3304      	adds	r3, #4
 8004162:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2200      	movs	r2, #0
 8004174:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2201      	movs	r2, #1
 800417a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800417c:	7afb      	ldrb	r3, [r7, #11]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	b2da      	uxtb	r2, r3
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	799b      	ldrb	r3, [r3, #6]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d102      	bne.n	8004196 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	799b      	ldrb	r3, [r3, #6]
 800419e:	461a      	mov	r2, r3
 80041a0:	6979      	ldr	r1, [r7, #20]
 80041a2:	f002 fb4b 	bl	800683c <USB_EPStartXfer>

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	7912      	ldrb	r2, [r2, #4]
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e04f      	b.n	800426e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	da0f      	bge.n	80041f6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	f003 020f 	and.w	r2, r3, #15
 80041dc:	4613      	mov	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	3310      	adds	r3, #16
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	3304      	adds	r3, #4
 80041ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	705a      	strb	r2, [r3, #1]
 80041f4:	e00d      	b.n	8004212 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	4613      	mov	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4413      	add	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	4413      	add	r3, r2
 8004208:	3304      	adds	r3, #4
 800420a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	b2da      	uxtb	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_PCD_EP_SetStall+0x82>
 800422e:	2302      	movs	r3, #2
 8004230:	e01d      	b.n	800426e <HAL_PCD_EP_SetStall+0xbe>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68f9      	ldr	r1, [r7, #12]
 8004240:	4618      	mov	r0, r3
 8004242:	f002 fed9 	bl	8006ff8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	2b00      	cmp	r3, #0
 800424e:	d109      	bne.n	8004264 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	7999      	ldrb	r1, [r3, #6]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800425e:	461a      	mov	r2, r3
 8004260:	f003 f8ca 	bl	80073f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	460b      	mov	r3, r1
 8004280:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	7912      	ldrb	r2, [r2, #4]
 800428c:	4293      	cmp	r3, r2
 800428e:	d901      	bls.n	8004294 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e042      	b.n	800431a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004298:	2b00      	cmp	r3, #0
 800429a:	da0f      	bge.n	80042bc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	f003 020f 	and.w	r2, r3, #15
 80042a2:	4613      	mov	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	3310      	adds	r3, #16
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	4413      	add	r3, r2
 80042b0:	3304      	adds	r3, #4
 80042b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	705a      	strb	r2, [r3, #1]
 80042ba:	e00f      	b.n	80042dc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	f003 020f 	and.w	r2, r3, #15
 80042c2:	4613      	mov	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	4413      	add	r3, r2
 80042d2:	3304      	adds	r3, #4
 80042d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_PCD_EP_ClrStall+0x86>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e00e      	b.n	800431a <HAL_PCD_EP_ClrStall+0xa4>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68f9      	ldr	r1, [r7, #12]
 800430a:	4618      	mov	r0, r3
 800430c:	f002 fee2 	bl	80070d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	460b      	mov	r3, r1
 800432c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800432e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004332:	2b00      	cmp	r3, #0
 8004334:	da0c      	bge.n	8004350 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	f003 020f 	and.w	r2, r3, #15
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	3310      	adds	r3, #16
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4413      	add	r3, r2
 800434a:	3304      	adds	r3, #4
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	e00c      	b.n	800436a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	f003 020f 	and.w	r2, r3, #15
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	3304      	adds	r3, #4
 8004368:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68f9      	ldr	r1, [r7, #12]
 8004370:	4618      	mov	r0, r3
 8004372:	f002 fd01 	bl	8006d78 <USB_EPStopXfer>
 8004376:	4603      	mov	r3, r0
 8004378:	72fb      	strb	r3, [r7, #11]

  return ret;
 800437a:	7afb      	ldrb	r3, [r7, #11]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08a      	sub	sp, #40	@ 0x28
 8004388:	af02      	add	r7, sp, #8
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	4613      	mov	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	3310      	adds	r3, #16
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	4413      	add	r3, r2
 80043a8:	3304      	adds	r3, #4
 80043aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d901      	bls.n	80043bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e06b      	b.n	8004494 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d902      	bls.n	80043d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	3303      	adds	r3, #3
 80043dc:	089b      	lsrs	r3, r3, #2
 80043de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043e0:	e02a      	b.n	8004438 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d902      	bls.n	80043fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	3303      	adds	r3, #3
 8004402:	089b      	lsrs	r3, r3, #2
 8004404:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	68d9      	ldr	r1, [r3, #12]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	b2da      	uxtb	r2, r3
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	4603      	mov	r3, r0
 800441a:	6978      	ldr	r0, [r7, #20]
 800441c:	f002 fd56 	bl	8006ecc <USB_WritePacket>

    ep->xfer_buff  += len;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	441a      	add	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	441a      	add	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	429a      	cmp	r2, r3
 800444c:	d809      	bhi.n	8004462 <PCD_WriteEmptyTxFifo+0xde>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	695a      	ldr	r2, [r3, #20]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004456:	429a      	cmp	r2, r3
 8004458:	d203      	bcs.n	8004462 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1bf      	bne.n	80043e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	429a      	cmp	r2, r3
 800446c:	d811      	bhi.n	8004492 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	2201      	movs	r2, #1
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	43db      	mvns	r3, r3
 8004488:	6939      	ldr	r1, [r7, #16]
 800448a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800448e:	4013      	ands	r3, r2
 8004490:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3720      	adds	r7, #32
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	333c      	adds	r3, #60	@ 0x3c
 80044b4:	3304      	adds	r3, #4
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	799b      	ldrb	r3, [r3, #6]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d17b      	bne.n	80045ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d015      	beq.n	8004508 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	4a61      	ldr	r2, [pc, #388]	@ (8004664 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	f240 80b9 	bls.w	8004658 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80b3 	beq.w	8004658 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044fe:	461a      	mov	r2, r3
 8004500:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004504:	6093      	str	r3, [r2, #8]
 8004506:	e0a7      	b.n	8004658 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800451e:	461a      	mov	r2, r3
 8004520:	2320      	movs	r3, #32
 8004522:	6093      	str	r3, [r2, #8]
 8004524:	e098      	b.n	8004658 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800452c:	2b00      	cmp	r3, #0
 800452e:	f040 8093 	bne.w	8004658 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	4a4b      	ldr	r2, [pc, #300]	@ (8004664 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d90f      	bls.n	800455a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004550:	461a      	mov	r2, r3
 8004552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004556:	6093      	str	r3, [r2, #8]
 8004558:	e07e      	b.n	8004658 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	4413      	add	r3, r2
 800456c:	3304      	adds	r3, #4
 800456e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a1a      	ldr	r2, [r3, #32]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	0159      	lsls	r1, r3, #5
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	440b      	add	r3, r1
 800457c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004586:	1ad2      	subs	r2, r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d114      	bne.n	80045bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d109      	bne.n	80045ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80045a4:	461a      	mov	r2, r3
 80045a6:	2101      	movs	r1, #1
 80045a8:	f002 ff26 	bl	80073f8 <USB_EP0_OutStart>
 80045ac:	e006      	b.n	80045bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	441a      	add	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	4619      	mov	r1, r3
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f005 fa36 	bl	8009a34 <HAL_PCD_DataOutStageCallback>
 80045c8:	e046      	b.n	8004658 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	4a26      	ldr	r2, [pc, #152]	@ (8004668 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d124      	bne.n	800461c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e8:	461a      	mov	r2, r3
 80045ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045ee:	6093      	str	r3, [r2, #8]
 80045f0:	e032      	b.n	8004658 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004608:	461a      	mov	r2, r3
 800460a:	2320      	movs	r3, #32
 800460c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	4619      	mov	r1, r3
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f005 fa0d 	bl	8009a34 <HAL_PCD_DataOutStageCallback>
 800461a:	e01d      	b.n	8004658 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d114      	bne.n	800464c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	4613      	mov	r3, r2
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d108      	bne.n	800464c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004644:	461a      	mov	r2, r3
 8004646:	2100      	movs	r1, #0
 8004648:	f002 fed6 	bl	80073f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	4619      	mov	r1, r3
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f005 f9ee 	bl	8009a34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	4f54300a 	.word	0x4f54300a
 8004668:	4f54310a 	.word	0x4f54310a

0800466c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	333c      	adds	r3, #60	@ 0x3c
 8004684:	3304      	adds	r3, #4
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4a15      	ldr	r2, [pc, #84]	@ (80046f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d90e      	bls.n	80046c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d009      	beq.n	80046c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046b8:	461a      	mov	r2, r3
 80046ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f005 f9a5 	bl	8009a10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a0a      	ldr	r2, [pc, #40]	@ (80046f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d90c      	bls.n	80046e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	799b      	ldrb	r3, [r3, #6]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d108      	bne.n	80046e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046e0:	461a      	mov	r2, r3
 80046e2:	2101      	movs	r1, #1
 80046e4:	f002 fe88 	bl	80073f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	4f54300a 	.word	0x4f54300a

080046f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	70fb      	strb	r3, [r7, #3]
 8004704:	4613      	mov	r3, r2
 8004706:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d107      	bne.n	8004726 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004716:	883b      	ldrh	r3, [r7, #0]
 8004718:	0419      	lsls	r1, r3, #16
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	430a      	orrs	r2, r1
 8004722:	629a      	str	r2, [r3, #40]	@ 0x28
 8004724:	e028      	b.n	8004778 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	4413      	add	r3, r2
 8004732:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004734:	2300      	movs	r3, #0
 8004736:	73fb      	strb	r3, [r7, #15]
 8004738:	e00d      	b.n	8004756 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	3340      	adds	r3, #64	@ 0x40
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	4413      	add	r3, r2
 800474e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	3301      	adds	r3, #1
 8004754:	73fb      	strb	r3, [r7, #15]
 8004756:	7bfa      	ldrb	r2, [r7, #15]
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	3b01      	subs	r3, #1
 800475c:	429a      	cmp	r2, r3
 800475e:	d3ec      	bcc.n	800473a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004760:	883b      	ldrh	r3, [r7, #0]
 8004762:	0418      	lsls	r0, r3, #16
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6819      	ldr	r1, [r3, #0]
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	3b01      	subs	r3, #1
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	4302      	orrs	r2, r0
 8004770:	3340      	adds	r3, #64	@ 0x40
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	460b      	mov	r3, r1
 8004790:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	887a      	ldrh	r2, [r7, #2]
 8004798:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e267      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d075      	beq.n	80048ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047de:	4b88      	ldr	r3, [pc, #544]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 030c 	and.w	r3, r3, #12
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d00c      	beq.n	8004804 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ea:	4b85      	ldr	r3, [pc, #532]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d112      	bne.n	800481c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047f6:	4b82      	ldr	r3, [pc, #520]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004802:	d10b      	bne.n	800481c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004804:	4b7e      	ldr	r3, [pc, #504]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d05b      	beq.n	80048c8 <HAL_RCC_OscConfig+0x108>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d157      	bne.n	80048c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e242      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004824:	d106      	bne.n	8004834 <HAL_RCC_OscConfig+0x74>
 8004826:	4b76      	ldr	r3, [pc, #472]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a75      	ldr	r2, [pc, #468]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 800482c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	e01d      	b.n	8004870 <HAL_RCC_OscConfig+0xb0>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800483c:	d10c      	bne.n	8004858 <HAL_RCC_OscConfig+0x98>
 800483e:	4b70      	ldr	r3, [pc, #448]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a6f      	ldr	r2, [pc, #444]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 8004844:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	4b6d      	ldr	r3, [pc, #436]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a6c      	ldr	r2, [pc, #432]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 8004850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	e00b      	b.n	8004870 <HAL_RCC_OscConfig+0xb0>
 8004858:	4b69      	ldr	r3, [pc, #420]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a68      	ldr	r2, [pc, #416]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 800485e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	4b66      	ldr	r3, [pc, #408]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a65      	ldr	r2, [pc, #404]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 800486a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800486e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d013      	beq.n	80048a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004878:	f7fd fa76 	bl	8001d68 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004880:	f7fd fa72 	bl	8001d68 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b64      	cmp	r3, #100	@ 0x64
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e207      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004892:	4b5b      	ldr	r3, [pc, #364]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0xc0>
 800489e:	e014      	b.n	80048ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a0:	f7fd fa62 	bl	8001d68 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a8:	f7fd fa5e 	bl	8001d68 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b64      	cmp	r3, #100	@ 0x64
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e1f3      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ba:	4b51      	ldr	r3, [pc, #324]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0xe8>
 80048c6:	e000      	b.n	80048ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d063      	beq.n	800499e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 030c 	and.w	r3, r3, #12
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00b      	beq.n	80048fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048e2:	4b47      	ldr	r3, [pc, #284]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	d11c      	bne.n	8004928 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ee:	4b44      	ldr	r3, [pc, #272]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d116      	bne.n	8004928 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048fa:	4b41      	ldr	r3, [pc, #260]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <HAL_RCC_OscConfig+0x152>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d001      	beq.n	8004912 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e1c7      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004912:	4b3b      	ldr	r3, [pc, #236]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4937      	ldr	r1, [pc, #220]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 8004922:	4313      	orrs	r3, r2
 8004924:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004926:	e03a      	b.n	800499e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d020      	beq.n	8004972 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004930:	4b34      	ldr	r3, [pc, #208]	@ (8004a04 <HAL_RCC_OscConfig+0x244>)
 8004932:	2201      	movs	r2, #1
 8004934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004936:	f7fd fa17 	bl	8001d68 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800493e:	f7fd fa13 	bl	8001d68 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e1a8      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004950:	4b2b      	ldr	r3, [pc, #172]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0f0      	beq.n	800493e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495c:	4b28      	ldr	r3, [pc, #160]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	4925      	ldr	r1, [pc, #148]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 800496c:	4313      	orrs	r3, r2
 800496e:	600b      	str	r3, [r1, #0]
 8004970:	e015      	b.n	800499e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004972:	4b24      	ldr	r3, [pc, #144]	@ (8004a04 <HAL_RCC_OscConfig+0x244>)
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004978:	f7fd f9f6 	bl	8001d68 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004980:	f7fd f9f2 	bl	8001d68 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e187      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004992:	4b1b      	ldr	r3, [pc, #108]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d036      	beq.n	8004a18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d016      	beq.n	80049e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b2:	4b15      	ldr	r3, [pc, #84]	@ (8004a08 <HAL_RCC_OscConfig+0x248>)
 80049b4:	2201      	movs	r2, #1
 80049b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fd f9d6 	bl	8001d68 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c0:	f7fd f9d2 	bl	8001d68 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e167      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a00 <HAL_RCC_OscConfig+0x240>)
 80049d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0f0      	beq.n	80049c0 <HAL_RCC_OscConfig+0x200>
 80049de:	e01b      	b.n	8004a18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049e0:	4b09      	ldr	r3, [pc, #36]	@ (8004a08 <HAL_RCC_OscConfig+0x248>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e6:	f7fd f9bf 	bl	8001d68 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ec:	e00e      	b.n	8004a0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ee:	f7fd f9bb 	bl	8001d68 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d907      	bls.n	8004a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e150      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4e2>
 8004a00:	40023800 	.word	0x40023800
 8004a04:	42470000 	.word	0x42470000
 8004a08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a0c:	4b88      	ldr	r3, [pc, #544]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1ea      	bne.n	80049ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 8097 	beq.w	8004b54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a26:	2300      	movs	r3, #0
 8004a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a2a:	4b81      	ldr	r3, [pc, #516]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10f      	bne.n	8004a56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a36:	2300      	movs	r3, #0
 8004a38:	60bb      	str	r3, [r7, #8]
 8004a3a:	4b7d      	ldr	r3, [pc, #500]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3e:	4a7c      	ldr	r2, [pc, #496]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a46:	4b7a      	ldr	r3, [pc, #488]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a4e:	60bb      	str	r3, [r7, #8]
 8004a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a52:	2301      	movs	r3, #1
 8004a54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a56:	4b77      	ldr	r3, [pc, #476]	@ (8004c34 <HAL_RCC_OscConfig+0x474>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d118      	bne.n	8004a94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a62:	4b74      	ldr	r3, [pc, #464]	@ (8004c34 <HAL_RCC_OscConfig+0x474>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a73      	ldr	r2, [pc, #460]	@ (8004c34 <HAL_RCC_OscConfig+0x474>)
 8004a68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a6e:	f7fd f97b 	bl	8001d68 <HAL_GetTick>
 8004a72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a76:	f7fd f977 	bl	8001d68 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e10c      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a88:	4b6a      	ldr	r3, [pc, #424]	@ (8004c34 <HAL_RCC_OscConfig+0x474>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0f0      	beq.n	8004a76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d106      	bne.n	8004aaa <HAL_RCC_OscConfig+0x2ea>
 8004a9c:	4b64      	ldr	r3, [pc, #400]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa0:	4a63      	ldr	r2, [pc, #396]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aa8:	e01c      	b.n	8004ae4 <HAL_RCC_OscConfig+0x324>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b05      	cmp	r3, #5
 8004ab0:	d10c      	bne.n	8004acc <HAL_RCC_OscConfig+0x30c>
 8004ab2:	4b5f      	ldr	r3, [pc, #380]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab6:	4a5e      	ldr	r2, [pc, #376]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004ab8:	f043 0304 	orr.w	r3, r3, #4
 8004abc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004abe:	4b5c      	ldr	r3, [pc, #368]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac2:	4a5b      	ldr	r2, [pc, #364]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aca:	e00b      	b.n	8004ae4 <HAL_RCC_OscConfig+0x324>
 8004acc:	4b58      	ldr	r3, [pc, #352]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad0:	4a57      	ldr	r2, [pc, #348]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004ad2:	f023 0301 	bic.w	r3, r3, #1
 8004ad6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ad8:	4b55      	ldr	r3, [pc, #340]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004adc:	4a54      	ldr	r2, [pc, #336]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004ade:	f023 0304 	bic.w	r3, r3, #4
 8004ae2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d015      	beq.n	8004b18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aec:	f7fd f93c 	bl	8001d68 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af2:	e00a      	b.n	8004b0a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af4:	f7fd f938 	bl	8001d68 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e0cb      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b0a:	4b49      	ldr	r3, [pc, #292]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0ee      	beq.n	8004af4 <HAL_RCC_OscConfig+0x334>
 8004b16:	e014      	b.n	8004b42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b18:	f7fd f926 	bl	8001d68 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b1e:	e00a      	b.n	8004b36 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b20:	f7fd f922 	bl	8001d68 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e0b5      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b36:	4b3e      	ldr	r3, [pc, #248]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1ee      	bne.n	8004b20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b42:	7dfb      	ldrb	r3, [r7, #23]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d105      	bne.n	8004b54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b48:	4b39      	ldr	r3, [pc, #228]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4c:	4a38      	ldr	r2, [pc, #224]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004b4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 80a1 	beq.w	8004ca0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b5e:	4b34      	ldr	r3, [pc, #208]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 030c 	and.w	r3, r3, #12
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d05c      	beq.n	8004c24 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d141      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b72:	4b31      	ldr	r3, [pc, #196]	@ (8004c38 <HAL_RCC_OscConfig+0x478>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b78:	f7fd f8f6 	bl	8001d68 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b80:	f7fd f8f2 	bl	8001d68 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e087      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b92:	4b27      	ldr	r3, [pc, #156]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69da      	ldr	r2, [r3, #28]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bac:	019b      	lsls	r3, r3, #6
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	085b      	lsrs	r3, r3, #1
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	041b      	lsls	r3, r3, #16
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc0:	061b      	lsls	r3, r3, #24
 8004bc2:	491b      	ldr	r1, [pc, #108]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c38 <HAL_RCC_OscConfig+0x478>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bce:	f7fd f8cb 	bl	8001d68 <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd6:	f7fd f8c7 	bl	8001d68 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e05c      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be8:	4b11      	ldr	r3, [pc, #68]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0f0      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x416>
 8004bf4:	e054      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf6:	4b10      	ldr	r3, [pc, #64]	@ (8004c38 <HAL_RCC_OscConfig+0x478>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7fd f8b4 	bl	8001d68 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c04:	f7fd f8b0 	bl	8001d68 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e045      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c16:	4b06      	ldr	r3, [pc, #24]	@ (8004c30 <HAL_RCC_OscConfig+0x470>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x444>
 8004c22:	e03d      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d107      	bne.n	8004c3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e038      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4e2>
 8004c30:	40023800 	.word	0x40023800
 8004c34:	40007000 	.word	0x40007000
 8004c38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004cac <HAL_RCC_OscConfig+0x4ec>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d028      	beq.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d121      	bne.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d11a      	bne.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d111      	bne.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c82:	085b      	lsrs	r3, r3, #1
 8004c84:	3b01      	subs	r3, #1
 8004c86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d107      	bne.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d001      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40023800 	.word	0x40023800

08004cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e0cc      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc4:	4b68      	ldr	r3, [pc, #416]	@ (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d90c      	bls.n	8004cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd2:	4b65      	ldr	r3, [pc, #404]	@ (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cda:	4b63      	ldr	r3, [pc, #396]	@ (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0b8      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d020      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d04:	4b59      	ldr	r3, [pc, #356]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4a58      	ldr	r2, [pc, #352]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d1c:	4b53      	ldr	r3, [pc, #332]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	4a52      	ldr	r2, [pc, #328]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d28:	4b50      	ldr	r3, [pc, #320]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	494d      	ldr	r1, [pc, #308]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d044      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d107      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4e:	4b47      	ldr	r3, [pc, #284]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d119      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e07f      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d003      	beq.n	8004d6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d107      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e06f      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e067      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d8e:	4b37      	ldr	r3, [pc, #220]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f023 0203 	bic.w	r2, r3, #3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	4934      	ldr	r1, [pc, #208]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004da0:	f7fc ffe2 	bl	8001d68 <HAL_GetTick>
 8004da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da6:	e00a      	b.n	8004dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da8:	f7fc ffde 	bl	8001d68 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e04f      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 020c 	and.w	r2, r3, #12
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d1eb      	bne.n	8004da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd0:	4b25      	ldr	r3, [pc, #148]	@ (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d20c      	bcs.n	8004df8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dde:	4b22      	ldr	r3, [pc, #136]	@ (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de6:	4b20      	ldr	r3, [pc, #128]	@ (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d001      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e032      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e04:	4b19      	ldr	r3, [pc, #100]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4916      	ldr	r1, [pc, #88]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d009      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e22:	4b12      	ldr	r3, [pc, #72]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	490e      	ldr	r1, [pc, #56]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e36:	f000 f821 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	091b      	lsrs	r3, r3, #4
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	490a      	ldr	r1, [pc, #40]	@ (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004e48:	5ccb      	ldrb	r3, [r1, r3]
 8004e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4e:	4a09      	ldr	r2, [pc, #36]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e52:	4b09      	ldr	r3, [pc, #36]	@ (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fc ff42 	bl	8001ce0 <HAL_InitTick>

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40023c00 	.word	0x40023c00
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	0800cce4 	.word	0x0800cce4
 8004e74:	20000000 	.word	0x20000000
 8004e78:	20000004 	.word	0x20000004

08004e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e80:	b090      	sub	sp, #64	@ 0x40
 8004e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e94:	4b59      	ldr	r3, [pc, #356]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 030c 	and.w	r3, r3, #12
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d00d      	beq.n	8004ebc <HAL_RCC_GetSysClockFreq+0x40>
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	f200 80a1 	bhi.w	8004fe8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d003      	beq.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004eae:	e09b      	b.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004eb0:	4b53      	ldr	r3, [pc, #332]	@ (8005000 <HAL_RCC_GetSysClockFreq+0x184>)
 8004eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004eb4:	e09b      	b.n	8004fee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eb6:	4b53      	ldr	r3, [pc, #332]	@ (8005004 <HAL_RCC_GetSysClockFreq+0x188>)
 8004eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004eba:	e098      	b.n	8004fee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ebc:	4b4f      	ldr	r3, [pc, #316]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ec4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ec6:	4b4d      	ldr	r3, [pc, #308]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d028      	beq.n	8004f24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	099b      	lsrs	r3, r3, #6
 8004ed8:	2200      	movs	r2, #0
 8004eda:	623b      	str	r3, [r7, #32]
 8004edc:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	4b47      	ldr	r3, [pc, #284]	@ (8005004 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ee8:	fb03 f201 	mul.w	r2, r3, r1
 8004eec:	2300      	movs	r3, #0
 8004eee:	fb00 f303 	mul.w	r3, r0, r3
 8004ef2:	4413      	add	r3, r2
 8004ef4:	4a43      	ldr	r2, [pc, #268]	@ (8005004 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ef6:	fba0 1202 	umull	r1, r2, r0, r2
 8004efa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004efc:	460a      	mov	r2, r1
 8004efe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004f00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f02:	4413      	add	r3, r2
 8004f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f08:	2200      	movs	r2, #0
 8004f0a:	61bb      	str	r3, [r7, #24]
 8004f0c:	61fa      	str	r2, [r7, #28]
 8004f0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004f16:	f7fb fe4f 	bl	8000bb8 <__aeabi_uldivmod>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4613      	mov	r3, r2
 8004f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f22:	e053      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f24:	4b35      	ldr	r3, [pc, #212]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	099b      	lsrs	r3, r3, #6
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	617a      	str	r2, [r7, #20]
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f36:	f04f 0b00 	mov.w	fp, #0
 8004f3a:	4652      	mov	r2, sl
 8004f3c:	465b      	mov	r3, fp
 8004f3e:	f04f 0000 	mov.w	r0, #0
 8004f42:	f04f 0100 	mov.w	r1, #0
 8004f46:	0159      	lsls	r1, r3, #5
 8004f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f4c:	0150      	lsls	r0, r2, #5
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	ebb2 080a 	subs.w	r8, r2, sl
 8004f56:	eb63 090b 	sbc.w	r9, r3, fp
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f6e:	ebb2 0408 	subs.w	r4, r2, r8
 8004f72:	eb63 0509 	sbc.w	r5, r3, r9
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	00eb      	lsls	r3, r5, #3
 8004f80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f84:	00e2      	lsls	r2, r4, #3
 8004f86:	4614      	mov	r4, r2
 8004f88:	461d      	mov	r5, r3
 8004f8a:	eb14 030a 	adds.w	r3, r4, sl
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	eb45 030b 	adc.w	r3, r5, fp
 8004f94:	607b      	str	r3, [r7, #4]
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	028b      	lsls	r3, r1, #10
 8004fa6:	4621      	mov	r1, r4
 8004fa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fac:	4621      	mov	r1, r4
 8004fae:	028a      	lsls	r2, r1, #10
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	60fa      	str	r2, [r7, #12]
 8004fbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fc0:	f7fb fdfa 	bl	8000bb8 <__aeabi_uldivmod>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4613      	mov	r3, r2
 8004fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	0c1b      	lsrs	r3, r3, #16
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004fdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fe6:	e002      	b.n	8004fee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fe8:	4b05      	ldr	r3, [pc, #20]	@ (8005000 <HAL_RCC_GetSysClockFreq+0x184>)
 8004fea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3740      	adds	r7, #64	@ 0x40
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40023800 	.word	0x40023800
 8005000:	00f42400 	.word	0x00f42400
 8005004:	017d7840 	.word	0x017d7840

08005008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800500c:	4b03      	ldr	r3, [pc, #12]	@ (800501c <HAL_RCC_GetHCLKFreq+0x14>)
 800500e:	681b      	ldr	r3, [r3, #0]
}
 8005010:	4618      	mov	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	20000000 	.word	0x20000000

08005020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005024:	f7ff fff0 	bl	8005008 <HAL_RCC_GetHCLKFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	4b05      	ldr	r3, [pc, #20]	@ (8005040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	0a9b      	lsrs	r3, r3, #10
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	4903      	ldr	r1, [pc, #12]	@ (8005044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005036:	5ccb      	ldrb	r3, [r1, r3]
 8005038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800503c:	4618      	mov	r0, r3
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40023800 	.word	0x40023800
 8005044:	0800ccf4 	.word	0x0800ccf4

08005048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e041      	b.n	80050de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fc fb26 	bl	80016c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3304      	adds	r3, #4
 8005084:	4619      	mov	r1, r3
 8005086:	4610      	mov	r0, r2
 8005088:	f000 fb66 	bl	8005758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e041      	b.n	800517c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d106      	bne.n	8005112 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f839 	bl	8005184 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2202      	movs	r2, #2
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3304      	adds	r3, #4
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	f000 fb17 	bl	8005758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d109      	bne.n	80051bc <HAL_TIM_PWM_Start+0x24>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	bf14      	ite	ne
 80051b4:	2301      	movne	r3, #1
 80051b6:	2300      	moveq	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	e022      	b.n	8005202 <HAL_TIM_PWM_Start+0x6a>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d109      	bne.n	80051d6 <HAL_TIM_PWM_Start+0x3e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	bf14      	ite	ne
 80051ce:	2301      	movne	r3, #1
 80051d0:	2300      	moveq	r3, #0
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	e015      	b.n	8005202 <HAL_TIM_PWM_Start+0x6a>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d109      	bne.n	80051f0 <HAL_TIM_PWM_Start+0x58>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	bf14      	ite	ne
 80051e8:	2301      	movne	r3, #1
 80051ea:	2300      	moveq	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	e008      	b.n	8005202 <HAL_TIM_PWM_Start+0x6a>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	bf14      	ite	ne
 80051fc:	2301      	movne	r3, #1
 80051fe:	2300      	moveq	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e068      	b.n	80052dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d104      	bne.n	800521a <HAL_TIM_PWM_Start+0x82>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005218:	e013      	b.n	8005242 <HAL_TIM_PWM_Start+0xaa>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b04      	cmp	r3, #4
 800521e:	d104      	bne.n	800522a <HAL_TIM_PWM_Start+0x92>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005228:	e00b      	b.n	8005242 <HAL_TIM_PWM_Start+0xaa>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b08      	cmp	r3, #8
 800522e:	d104      	bne.n	800523a <HAL_TIM_PWM_Start+0xa2>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005238:	e003      	b.n	8005242 <HAL_TIM_PWM_Start+0xaa>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2202      	movs	r2, #2
 800523e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2201      	movs	r2, #1
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fd36 	bl	8005cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a23      	ldr	r2, [pc, #140]	@ (80052e4 <HAL_TIM_PWM_Start+0x14c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d107      	bne.n	800526a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005268:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1d      	ldr	r2, [pc, #116]	@ (80052e4 <HAL_TIM_PWM_Start+0x14c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d018      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x10e>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800527c:	d013      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x10e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a19      	ldr	r2, [pc, #100]	@ (80052e8 <HAL_TIM_PWM_Start+0x150>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00e      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x10e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a17      	ldr	r2, [pc, #92]	@ (80052ec <HAL_TIM_PWM_Start+0x154>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d009      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x10e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a16      	ldr	r2, [pc, #88]	@ (80052f0 <HAL_TIM_PWM_Start+0x158>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d004      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x10e>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a14      	ldr	r2, [pc, #80]	@ (80052f4 <HAL_TIM_PWM_Start+0x15c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d111      	bne.n	80052ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b06      	cmp	r3, #6
 80052b6:	d010      	beq.n	80052da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c8:	e007      	b.n	80052da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0201 	orr.w	r2, r2, #1
 80052d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40000c00 	.word	0x40000c00
 80052f4:	40014000 	.word	0x40014000

080052f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e097      	b.n	800543c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d106      	bne.n	8005326 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7fc f9ef 	bl	8001704 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800533c:	f023 0307 	bic.w	r3, r3, #7
 8005340:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3304      	adds	r3, #4
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f000 fa03 	bl	8005758 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800537a:	f023 0303 	bic.w	r3, r3, #3
 800537e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	4313      	orrs	r3, r2
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005398:	f023 030c 	bic.w	r3, r3, #12
 800539c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	021b      	lsls	r3, r3, #8
 80053b4:	4313      	orrs	r3, r2
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	011a      	lsls	r2, r3, #4
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	031b      	lsls	r3, r3, #12
 80053c8:	4313      	orrs	r3, r2
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80053d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80053de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	4313      	orrs	r3, r2
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800545e:	2302      	movs	r3, #2
 8005460:	e0ae      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b0c      	cmp	r3, #12
 800546e:	f200 809f 	bhi.w	80055b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005472:	a201      	add	r2, pc, #4	@ (adr r2, 8005478 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005478:	080054ad 	.word	0x080054ad
 800547c:	080055b1 	.word	0x080055b1
 8005480:	080055b1 	.word	0x080055b1
 8005484:	080055b1 	.word	0x080055b1
 8005488:	080054ed 	.word	0x080054ed
 800548c:	080055b1 	.word	0x080055b1
 8005490:	080055b1 	.word	0x080055b1
 8005494:	080055b1 	.word	0x080055b1
 8005498:	0800552f 	.word	0x0800552f
 800549c:	080055b1 	.word	0x080055b1
 80054a0:	080055b1 	.word	0x080055b1
 80054a4:	080055b1 	.word	0x080055b1
 80054a8:	0800556f 	.word	0x0800556f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68b9      	ldr	r1, [r7, #8]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 f9dc 	bl	8005870 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0208 	orr.w	r2, r2, #8
 80054c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0204 	bic.w	r2, r2, #4
 80054d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6999      	ldr	r1, [r3, #24]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	691a      	ldr	r2, [r3, #16]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	619a      	str	r2, [r3, #24]
      break;
 80054ea:	e064      	b.n	80055b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fa22 	bl	800593c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6999      	ldr	r1, [r3, #24]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	021a      	lsls	r2, r3, #8
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	619a      	str	r2, [r3, #24]
      break;
 800552c:	e043      	b.n	80055b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	4618      	mov	r0, r3
 8005536:	f000 fa6d 	bl	8005a14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0208 	orr.w	r2, r2, #8
 8005548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0204 	bic.w	r2, r2, #4
 8005558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69d9      	ldr	r1, [r3, #28]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	61da      	str	r2, [r3, #28]
      break;
 800556c:	e023      	b.n	80055b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fab7 	bl	8005ae8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69da      	ldr	r2, [r3, #28]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69d9      	ldr	r1, [r3, #28]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	021a      	lsls	r2, r3, #8
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	61da      	str	r2, [r3, #28]
      break;
 80055ae:	e002      	b.n	80055b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	75fb      	strb	r3, [r7, #23]
      break;
 80055b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055be:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_TIM_ConfigClockSource+0x1c>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e0b4      	b.n	800574e <HAL_TIM_ConfigClockSource+0x186>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800560a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800561c:	d03e      	beq.n	800569c <HAL_TIM_ConfigClockSource+0xd4>
 800561e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005622:	f200 8087 	bhi.w	8005734 <HAL_TIM_ConfigClockSource+0x16c>
 8005626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800562a:	f000 8086 	beq.w	800573a <HAL_TIM_ConfigClockSource+0x172>
 800562e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005632:	d87f      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x16c>
 8005634:	2b70      	cmp	r3, #112	@ 0x70
 8005636:	d01a      	beq.n	800566e <HAL_TIM_ConfigClockSource+0xa6>
 8005638:	2b70      	cmp	r3, #112	@ 0x70
 800563a:	d87b      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x16c>
 800563c:	2b60      	cmp	r3, #96	@ 0x60
 800563e:	d050      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x11a>
 8005640:	2b60      	cmp	r3, #96	@ 0x60
 8005642:	d877      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x16c>
 8005644:	2b50      	cmp	r3, #80	@ 0x50
 8005646:	d03c      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0xfa>
 8005648:	2b50      	cmp	r3, #80	@ 0x50
 800564a:	d873      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x16c>
 800564c:	2b40      	cmp	r3, #64	@ 0x40
 800564e:	d058      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x13a>
 8005650:	2b40      	cmp	r3, #64	@ 0x40
 8005652:	d86f      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x16c>
 8005654:	2b30      	cmp	r3, #48	@ 0x30
 8005656:	d064      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0x15a>
 8005658:	2b30      	cmp	r3, #48	@ 0x30
 800565a:	d86b      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x16c>
 800565c:	2b20      	cmp	r3, #32
 800565e:	d060      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0x15a>
 8005660:	2b20      	cmp	r3, #32
 8005662:	d867      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x16c>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d05c      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0x15a>
 8005668:	2b10      	cmp	r3, #16
 800566a:	d05a      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0x15a>
 800566c:	e062      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800567e:	f000 fafd 	bl	8005c7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005690:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	609a      	str	r2, [r3, #8]
      break;
 800569a:	e04f      	b.n	800573c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056ac:	f000 fae6 	bl	8005c7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056be:	609a      	str	r2, [r3, #8]
      break;
 80056c0:	e03c      	b.n	800573c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ce:	461a      	mov	r2, r3
 80056d0:	f000 fa5a 	bl	8005b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2150      	movs	r1, #80	@ 0x50
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fab3 	bl	8005c46 <TIM_ITRx_SetConfig>
      break;
 80056e0:	e02c      	b.n	800573c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ee:	461a      	mov	r2, r3
 80056f0:	f000 fa79 	bl	8005be6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2160      	movs	r1, #96	@ 0x60
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 faa3 	bl	8005c46 <TIM_ITRx_SetConfig>
      break;
 8005700:	e01c      	b.n	800573c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800570e:	461a      	mov	r2, r3
 8005710:	f000 fa3a 	bl	8005b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2140      	movs	r1, #64	@ 0x40
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fa93 	bl	8005c46 <TIM_ITRx_SetConfig>
      break;
 8005720:	e00c      	b.n	800573c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4619      	mov	r1, r3
 800572c:	4610      	mov	r0, r2
 800572e:	f000 fa8a 	bl	8005c46 <TIM_ITRx_SetConfig>
      break;
 8005732:	e003      	b.n	800573c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
      break;
 8005738:	e000      	b.n	800573c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800573a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a3a      	ldr	r2, [pc, #232]	@ (8005854 <TIM_Base_SetConfig+0xfc>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00f      	beq.n	8005790 <TIM_Base_SetConfig+0x38>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005776:	d00b      	beq.n	8005790 <TIM_Base_SetConfig+0x38>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a37      	ldr	r2, [pc, #220]	@ (8005858 <TIM_Base_SetConfig+0x100>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d007      	beq.n	8005790 <TIM_Base_SetConfig+0x38>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a36      	ldr	r2, [pc, #216]	@ (800585c <TIM_Base_SetConfig+0x104>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d003      	beq.n	8005790 <TIM_Base_SetConfig+0x38>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a35      	ldr	r2, [pc, #212]	@ (8005860 <TIM_Base_SetConfig+0x108>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d108      	bne.n	80057a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005854 <TIM_Base_SetConfig+0xfc>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d01b      	beq.n	80057e2 <TIM_Base_SetConfig+0x8a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b0:	d017      	beq.n	80057e2 <TIM_Base_SetConfig+0x8a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a28      	ldr	r2, [pc, #160]	@ (8005858 <TIM_Base_SetConfig+0x100>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d013      	beq.n	80057e2 <TIM_Base_SetConfig+0x8a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a27      	ldr	r2, [pc, #156]	@ (800585c <TIM_Base_SetConfig+0x104>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00f      	beq.n	80057e2 <TIM_Base_SetConfig+0x8a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a26      	ldr	r2, [pc, #152]	@ (8005860 <TIM_Base_SetConfig+0x108>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00b      	beq.n	80057e2 <TIM_Base_SetConfig+0x8a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a25      	ldr	r2, [pc, #148]	@ (8005864 <TIM_Base_SetConfig+0x10c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d007      	beq.n	80057e2 <TIM_Base_SetConfig+0x8a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a24      	ldr	r2, [pc, #144]	@ (8005868 <TIM_Base_SetConfig+0x110>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <TIM_Base_SetConfig+0x8a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a23      	ldr	r2, [pc, #140]	@ (800586c <TIM_Base_SetConfig+0x114>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d108      	bne.n	80057f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a0e      	ldr	r2, [pc, #56]	@ (8005854 <TIM_Base_SetConfig+0xfc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d103      	bne.n	8005828 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b01      	cmp	r3, #1
 8005838:	d105      	bne.n	8005846 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f023 0201 	bic.w	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	611a      	str	r2, [r3, #16]
  }
}
 8005846:	bf00      	nop
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40010000 	.word	0x40010000
 8005858:	40000400 	.word	0x40000400
 800585c:	40000800 	.word	0x40000800
 8005860:	40000c00 	.word	0x40000c00
 8005864:	40014000 	.word	0x40014000
 8005868:	40014400 	.word	0x40014400
 800586c:	40014800 	.word	0x40014800

08005870 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	f023 0201 	bic.w	r2, r3, #1
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800589e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0303 	bic.w	r3, r3, #3
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f023 0302 	bic.w	r3, r3, #2
 80058b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005938 <TIM_OC1_SetConfig+0xc8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d10c      	bne.n	80058e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f023 0308 	bic.w	r3, r3, #8
 80058d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f023 0304 	bic.w	r3, r3, #4
 80058e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a13      	ldr	r2, [pc, #76]	@ (8005938 <TIM_OC1_SetConfig+0xc8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d111      	bne.n	8005912 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4313      	orrs	r3, r2
 8005910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	621a      	str	r2, [r3, #32]
}
 800592c:	bf00      	nop
 800592e:	371c      	adds	r7, #28
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	40010000 	.word	0x40010000

0800593c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	f023 0210 	bic.w	r2, r3, #16
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800596a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f023 0320 	bic.w	r3, r3, #32
 8005986:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a1e      	ldr	r2, [pc, #120]	@ (8005a10 <TIM_OC2_SetConfig+0xd4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d10d      	bne.n	80059b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a15      	ldr	r2, [pc, #84]	@ (8005a10 <TIM_OC2_SetConfig+0xd4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d113      	bne.n	80059e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	621a      	str	r2, [r3, #32]
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40010000 	.word	0x40010000

08005a14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0303 	bic.w	r3, r3, #3
 8005a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ae4 <TIM_OC3_SetConfig+0xd0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d10d      	bne.n	8005a8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	021b      	lsls	r3, r3, #8
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a14      	ldr	r2, [pc, #80]	@ (8005ae4 <TIM_OC3_SetConfig+0xd0>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d113      	bne.n	8005abe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	011b      	lsls	r3, r3, #4
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	621a      	str	r2, [r3, #32]
}
 8005ad8:	bf00      	nop
 8005ada:	371c      	adds	r7, #28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	40010000 	.word	0x40010000

08005ae8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	021b      	lsls	r3, r3, #8
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	031b      	lsls	r3, r3, #12
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a10      	ldr	r2, [pc, #64]	@ (8005b84 <TIM_OC4_SetConfig+0x9c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d109      	bne.n	8005b5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	019b      	lsls	r3, r3, #6
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	621a      	str	r2, [r3, #32]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40010000 	.word	0x40010000

08005b88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	f023 0201 	bic.w	r2, r3, #1
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f023 030a 	bic.w	r3, r3, #10
 8005bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	621a      	str	r2, [r3, #32]
}
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b087      	sub	sp, #28
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	60f8      	str	r0, [r7, #12]
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	f023 0210 	bic.w	r2, r3, #16
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	031b      	lsls	r3, r3, #12
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f043 0307 	orr.w	r3, r3, #7
 8005c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	609a      	str	r2, [r3, #8]
}
 8005c70:	bf00      	nop
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	021a      	lsls	r2, r3, #8
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	609a      	str	r2, [r3, #8]
}
 8005cb0:	bf00      	nop
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f003 031f 	and.w	r3, r3, #31
 8005cce:	2201      	movs	r2, #1
 8005cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6a1a      	ldr	r2, [r3, #32]
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	43db      	mvns	r3, r3
 8005cde:	401a      	ands	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a1a      	ldr	r2, [r3, #32]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
	...

08005d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e050      	b.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d018      	beq.n	8005d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d6c:	d013      	beq.n	8005d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a18      	ldr	r2, [pc, #96]	@ (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00e      	beq.n	8005d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a16      	ldr	r2, [pc, #88]	@ (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d009      	beq.n	8005d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a15      	ldr	r2, [pc, #84]	@ (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d004      	beq.n	8005d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a13      	ldr	r2, [pc, #76]	@ (8005de0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d10c      	bne.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40000400 	.word	0x40000400
 8005dd8:	40000800 	.word	0x40000800
 8005ddc:	40000c00 	.word	0x40000c00
 8005de0:	40014000 	.word	0x40014000

08005de4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e03d      	b.n	8005e7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e88:	b084      	sub	sp, #16
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	f107 001c 	add.w	r0, r7, #28
 8005e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d123      	bne.n	8005eea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005eb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005eca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d105      	bne.n	8005ede <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f001 fae8 	bl	80074b4 <USB_CoreReset>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	73fb      	strb	r3, [r7, #15]
 8005ee8:	e01b      	b.n	8005f22 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 fadc 	bl	80074b4 <USB_CoreReset>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d106      	bne.n	8005f16 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f14:	e005      	b.n	8005f22 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f22:	7fbb      	ldrb	r3, [r7, #30]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d10b      	bne.n	8005f40 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f043 0206 	orr.w	r2, r3, #6
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f043 0220 	orr.w	r2, r3, #32
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f4c:	b004      	add	sp, #16
 8005f4e:	4770      	bx	lr

08005f50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d165      	bne.n	8006030 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	4a41      	ldr	r2, [pc, #260]	@ (800606c <USB_SetTurnaroundTime+0x11c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d906      	bls.n	8005f7a <USB_SetTurnaroundTime+0x2a>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4a40      	ldr	r2, [pc, #256]	@ (8006070 <USB_SetTurnaroundTime+0x120>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d202      	bcs.n	8005f7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005f74:	230f      	movs	r3, #15
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	e062      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	4a3c      	ldr	r2, [pc, #240]	@ (8006070 <USB_SetTurnaroundTime+0x120>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d306      	bcc.n	8005f90 <USB_SetTurnaroundTime+0x40>
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	4a3b      	ldr	r2, [pc, #236]	@ (8006074 <USB_SetTurnaroundTime+0x124>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d202      	bcs.n	8005f90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005f8a:	230e      	movs	r3, #14
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	e057      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4a38      	ldr	r2, [pc, #224]	@ (8006074 <USB_SetTurnaroundTime+0x124>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d306      	bcc.n	8005fa6 <USB_SetTurnaroundTime+0x56>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4a37      	ldr	r2, [pc, #220]	@ (8006078 <USB_SetTurnaroundTime+0x128>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d202      	bcs.n	8005fa6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005fa0:	230d      	movs	r3, #13
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	e04c      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	4a33      	ldr	r2, [pc, #204]	@ (8006078 <USB_SetTurnaroundTime+0x128>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d306      	bcc.n	8005fbc <USB_SetTurnaroundTime+0x6c>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	4a32      	ldr	r2, [pc, #200]	@ (800607c <USB_SetTurnaroundTime+0x12c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d802      	bhi.n	8005fbc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005fb6:	230c      	movs	r3, #12
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	e041      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800607c <USB_SetTurnaroundTime+0x12c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d906      	bls.n	8005fd2 <USB_SetTurnaroundTime+0x82>
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	4a2e      	ldr	r2, [pc, #184]	@ (8006080 <USB_SetTurnaroundTime+0x130>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d802      	bhi.n	8005fd2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005fcc:	230b      	movs	r3, #11
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	e036      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8006080 <USB_SetTurnaroundTime+0x130>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d906      	bls.n	8005fe8 <USB_SetTurnaroundTime+0x98>
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4a29      	ldr	r2, [pc, #164]	@ (8006084 <USB_SetTurnaroundTime+0x134>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d802      	bhi.n	8005fe8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005fe2:	230a      	movs	r3, #10
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	e02b      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4a26      	ldr	r2, [pc, #152]	@ (8006084 <USB_SetTurnaroundTime+0x134>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d906      	bls.n	8005ffe <USB_SetTurnaroundTime+0xae>
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4a25      	ldr	r2, [pc, #148]	@ (8006088 <USB_SetTurnaroundTime+0x138>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d202      	bcs.n	8005ffe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ff8:	2309      	movs	r3, #9
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	e020      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	4a21      	ldr	r2, [pc, #132]	@ (8006088 <USB_SetTurnaroundTime+0x138>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d306      	bcc.n	8006014 <USB_SetTurnaroundTime+0xc4>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4a20      	ldr	r2, [pc, #128]	@ (800608c <USB_SetTurnaroundTime+0x13c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d802      	bhi.n	8006014 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800600e:	2308      	movs	r3, #8
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	e015      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4a1d      	ldr	r2, [pc, #116]	@ (800608c <USB_SetTurnaroundTime+0x13c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d906      	bls.n	800602a <USB_SetTurnaroundTime+0xda>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4a1c      	ldr	r2, [pc, #112]	@ (8006090 <USB_SetTurnaroundTime+0x140>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d202      	bcs.n	800602a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006024:	2307      	movs	r3, #7
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e00a      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800602a:	2306      	movs	r3, #6
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	e007      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006030:	79fb      	ldrb	r3, [r7, #7]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d102      	bne.n	800603c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006036:	2309      	movs	r3, #9
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	e001      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800603c:	2309      	movs	r3, #9
 800603e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	029b      	lsls	r3, r3, #10
 8006054:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006058:	431a      	orrs	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	00d8acbf 	.word	0x00d8acbf
 8006070:	00e4e1c0 	.word	0x00e4e1c0
 8006074:	00f42400 	.word	0x00f42400
 8006078:	01067380 	.word	0x01067380
 800607c:	011a499f 	.word	0x011a499f
 8006080:	01312cff 	.word	0x01312cff
 8006084:	014ca43f 	.word	0x014ca43f
 8006088:	016e3600 	.word	0x016e3600
 800608c:	01a6ab1f 	.word	0x01a6ab1f
 8006090:	01e84800 	.word	0x01e84800

08006094 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f043 0201 	orr.w	r2, r3, #1
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f023 0201 	bic.w	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d115      	bne.n	8006126 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006106:	200a      	movs	r0, #10
 8006108:	f7fb fe3a 	bl	8001d80 <HAL_Delay>
      ms += 10U;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	330a      	adds	r3, #10
 8006110:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 f93f 	bl	8007396 <USB_GetMode>
 8006118:	4603      	mov	r3, r0
 800611a:	2b01      	cmp	r3, #1
 800611c:	d01e      	beq.n	800615c <USB_SetCurrentMode+0x84>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2bc7      	cmp	r3, #199	@ 0xc7
 8006122:	d9f0      	bls.n	8006106 <USB_SetCurrentMode+0x2e>
 8006124:	e01a      	b.n	800615c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d115      	bne.n	8006158 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006138:	200a      	movs	r0, #10
 800613a:	f7fb fe21 	bl	8001d80 <HAL_Delay>
      ms += 10U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	330a      	adds	r3, #10
 8006142:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 f926 	bl	8007396 <USB_GetMode>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <USB_SetCurrentMode+0x84>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2bc7      	cmp	r3, #199	@ 0xc7
 8006154:	d9f0      	bls.n	8006138 <USB_SetCurrentMode+0x60>
 8006156:	e001      	b.n	800615c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e005      	b.n	8006168 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006160:	d101      	bne.n	8006166 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e000      	b.n	8006168 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006170:	b084      	sub	sp, #16
 8006172:	b580      	push	{r7, lr}
 8006174:	b086      	sub	sp, #24
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800617e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800618a:	2300      	movs	r3, #0
 800618c:	613b      	str	r3, [r7, #16]
 800618e:	e009      	b.n	80061a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	3340      	adds	r3, #64	@ 0x40
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	2200      	movs	r2, #0
 800619c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	3301      	adds	r3, #1
 80061a2:	613b      	str	r3, [r7, #16]
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	2b0e      	cmp	r3, #14
 80061a8:	d9f2      	bls.n	8006190 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d11c      	bne.n	80061ec <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061c0:	f043 0302 	orr.w	r3, r3, #2
 80061c4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80061ea:	e00b      	b.n	8006204 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800620a:	461a      	mov	r2, r3
 800620c:	2300      	movs	r3, #0
 800620e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006210:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006214:	2b01      	cmp	r3, #1
 8006216:	d10d      	bne.n	8006234 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800621c:	2b00      	cmp	r3, #0
 800621e:	d104      	bne.n	800622a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006220:	2100      	movs	r1, #0
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f968 	bl	80064f8 <USB_SetDevSpeed>
 8006228:	e008      	b.n	800623c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800622a:	2101      	movs	r1, #1
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f963 	bl	80064f8 <USB_SetDevSpeed>
 8006232:	e003      	b.n	800623c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006234:	2103      	movs	r1, #3
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f95e 	bl	80064f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800623c:	2110      	movs	r1, #16
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f8fa 	bl	8006438 <USB_FlushTxFifo>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f924 	bl	800649c <USB_FlushRxFifo>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006264:	461a      	mov	r2, r3
 8006266:	2300      	movs	r3, #0
 8006268:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006270:	461a      	mov	r2, r3
 8006272:	2300      	movs	r3, #0
 8006274:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800627c:	461a      	mov	r2, r3
 800627e:	2300      	movs	r3, #0
 8006280:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006282:	2300      	movs	r3, #0
 8006284:	613b      	str	r3, [r7, #16]
 8006286:	e043      	b.n	8006310 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800629a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800629e:	d118      	bne.n	80062d2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10a      	bne.n	80062bc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b2:	461a      	mov	r2, r3
 80062b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	e013      	b.n	80062e4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062c8:	461a      	mov	r2, r3
 80062ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	e008      	b.n	80062e4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062de:	461a      	mov	r2, r3
 80062e0:	2300      	movs	r3, #0
 80062e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f0:	461a      	mov	r2, r3
 80062f2:	2300      	movs	r3, #0
 80062f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006302:	461a      	mov	r2, r3
 8006304:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006308:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	3301      	adds	r3, #1
 800630e:	613b      	str	r3, [r7, #16]
 8006310:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006314:	461a      	mov	r2, r3
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4293      	cmp	r3, r2
 800631a:	d3b5      	bcc.n	8006288 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800631c:	2300      	movs	r3, #0
 800631e:	613b      	str	r3, [r7, #16]
 8006320:	e043      	b.n	80063aa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006334:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006338:	d118      	bne.n	800636c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10a      	bne.n	8006356 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634c:	461a      	mov	r2, r3
 800634e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006352:	6013      	str	r3, [r2, #0]
 8006354:	e013      	b.n	800637e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006362:	461a      	mov	r2, r3
 8006364:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	e008      	b.n	800637e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006378:	461a      	mov	r2, r3
 800637a:	2300      	movs	r3, #0
 800637c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638a:	461a      	mov	r2, r3
 800638c:	2300      	movs	r3, #0
 800638e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800639c:	461a      	mov	r2, r3
 800639e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	3301      	adds	r3, #1
 80063a8:	613b      	str	r3, [r7, #16]
 80063aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063ae:	461a      	mov	r2, r3
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d3b5      	bcc.n	8006322 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80063d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d105      	bne.n	80063ec <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	f043 0210 	orr.w	r2, r3, #16
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699a      	ldr	r2, [r3, #24]
 80063f0:	4b10      	ldr	r3, [pc, #64]	@ (8006434 <USB_DevInit+0x2c4>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80063f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	f043 0208 	orr.w	r2, r3, #8
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800640c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006410:	2b01      	cmp	r3, #1
 8006412:	d107      	bne.n	8006424 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800641c:	f043 0304 	orr.w	r3, r3, #4
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006424:	7dfb      	ldrb	r3, [r7, #23]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006430:	b004      	add	sp, #16
 8006432:	4770      	bx	lr
 8006434:	803c3800 	.word	0x803c3800

08006438 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3301      	adds	r3, #1
 800644a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006452:	d901      	bls.n	8006458 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e01b      	b.n	8006490 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	daf2      	bge.n	8006446 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	019b      	lsls	r3, r3, #6
 8006468:	f043 0220 	orr.w	r2, r3, #32
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3301      	adds	r3, #1
 8006474:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800647c:	d901      	bls.n	8006482 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e006      	b.n	8006490 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f003 0320 	and.w	r3, r3, #32
 800648a:	2b20      	cmp	r3, #32
 800648c:	d0f0      	beq.n	8006470 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3301      	adds	r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064b4:	d901      	bls.n	80064ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e018      	b.n	80064ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	daf2      	bge.n	80064a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2210      	movs	r2, #16
 80064ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3301      	adds	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064d8:	d901      	bls.n	80064de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e006      	b.n	80064ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0310 	and.w	r3, r3, #16
 80064e6:	2b10      	cmp	r3, #16
 80064e8:	d0f0      	beq.n	80064cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	68f9      	ldr	r1, [r7, #12]
 8006514:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006518:	4313      	orrs	r3, r2
 800651a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800652a:	b480      	push	{r7}
 800652c:	b087      	sub	sp, #28
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 0306 	and.w	r3, r3, #6
 8006542:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d102      	bne.n	8006550 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800654a:	2300      	movs	r3, #0
 800654c:	75fb      	strb	r3, [r7, #23]
 800654e:	e00a      	b.n	8006566 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b02      	cmp	r3, #2
 8006554:	d002      	beq.n	800655c <USB_GetDevSpeed+0x32>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b06      	cmp	r3, #6
 800655a:	d102      	bne.n	8006562 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800655c:	2302      	movs	r3, #2
 800655e:	75fb      	strb	r3, [r7, #23]
 8006560:	e001      	b.n	8006566 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006562:	230f      	movs	r3, #15
 8006564:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006566:	7dfb      	ldrb	r3, [r7, #23]
}
 8006568:	4618      	mov	r0, r3
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	785b      	ldrb	r3, [r3, #1]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d13a      	bne.n	8006606 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006596:	69da      	ldr	r2, [r3, #28]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	2101      	movs	r1, #1
 80065a2:	fa01 f303 	lsl.w	r3, r1, r3
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	68f9      	ldr	r1, [r7, #12]
 80065aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065ae:	4313      	orrs	r3, r2
 80065b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d155      	bne.n	8006674 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	791b      	ldrb	r3, [r3, #4]
 80065e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	059b      	lsls	r3, r3, #22
 80065ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065ec:	4313      	orrs	r3, r2
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	0151      	lsls	r1, r2, #5
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	440a      	add	r2, r1
 80065f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	e036      	b.n	8006674 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800660c:	69da      	ldr	r2, [r3, #28]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	2101      	movs	r1, #1
 8006618:	fa01 f303 	lsl.w	r3, r1, r3
 800661c:	041b      	lsls	r3, r3, #16
 800661e:	68f9      	ldr	r1, [r7, #12]
 8006620:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006624:	4313      	orrs	r3, r2
 8006626:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d11a      	bne.n	8006674 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4413      	add	r3, r2
 8006646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	791b      	ldrb	r3, [r3, #4]
 8006658:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800665a:	430b      	orrs	r3, r1
 800665c:	4313      	orrs	r3, r2
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	0151      	lsls	r1, r2, #5
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	440a      	add	r2, r1
 8006666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800666a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800666e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006672:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
	...

08006684 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d161      	bne.n	8006764 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066b6:	d11f      	bne.n	80066f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	0151      	lsls	r1, r2, #5
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	440a      	add	r2, r1
 80066ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	0151      	lsls	r1, r2, #5
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	440a      	add	r2, r1
 80066ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	2101      	movs	r1, #1
 800670a:	fa01 f303 	lsl.w	r3, r1, r3
 800670e:	b29b      	uxth	r3, r3
 8006710:	43db      	mvns	r3, r3
 8006712:	68f9      	ldr	r1, [r7, #12]
 8006714:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006718:	4013      	ands	r3, r2
 800671a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006722:	69da      	ldr	r2, [r3, #28]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	f003 030f 	and.w	r3, r3, #15
 800672c:	2101      	movs	r1, #1
 800672e:	fa01 f303 	lsl.w	r3, r1, r3
 8006732:	b29b      	uxth	r3, r3
 8006734:	43db      	mvns	r3, r3
 8006736:	68f9      	ldr	r1, [r7, #12]
 8006738:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800673c:	4013      	ands	r3, r2
 800673e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	0159      	lsls	r1, r3, #5
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	440b      	add	r3, r1
 8006756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675a:	4619      	mov	r1, r3
 800675c:	4b35      	ldr	r3, [pc, #212]	@ (8006834 <USB_DeactivateEndpoint+0x1b0>)
 800675e:	4013      	ands	r3, r2
 8006760:	600b      	str	r3, [r1, #0]
 8006762:	e060      	b.n	8006826 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006776:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800677a:	d11f      	bne.n	80067bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	0151      	lsls	r1, r2, #5
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	440a      	add	r2, r1
 8006792:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006796:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800679a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	0151      	lsls	r1, r2, #5
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	440a      	add	r2, r1
 80067b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	f003 030f 	and.w	r3, r3, #15
 80067cc:	2101      	movs	r1, #1
 80067ce:	fa01 f303 	lsl.w	r3, r1, r3
 80067d2:	041b      	lsls	r3, r3, #16
 80067d4:	43db      	mvns	r3, r3
 80067d6:	68f9      	ldr	r1, [r7, #12]
 80067d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067dc:	4013      	ands	r3, r2
 80067de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	2101      	movs	r1, #1
 80067f2:	fa01 f303 	lsl.w	r3, r1, r3
 80067f6:	041b      	lsls	r3, r3, #16
 80067f8:	43db      	mvns	r3, r3
 80067fa:	68f9      	ldr	r1, [r7, #12]
 80067fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006800:	4013      	ands	r3, r2
 8006802:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	0159      	lsls	r1, r3, #5
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	440b      	add	r3, r1
 800681a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681e:	4619      	mov	r1, r3
 8006820:	4b05      	ldr	r3, [pc, #20]	@ (8006838 <USB_DeactivateEndpoint+0x1b4>)
 8006822:	4013      	ands	r3, r2
 8006824:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	ec337800 	.word	0xec337800
 8006838:	eff37800 	.word	0xeff37800

0800683c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b08a      	sub	sp, #40	@ 0x28
 8006840:	af02      	add	r7, sp, #8
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	4613      	mov	r3, r2
 8006848:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	785b      	ldrb	r3, [r3, #1]
 8006858:	2b01      	cmp	r3, #1
 800685a:	f040 817f 	bne.w	8006b5c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d132      	bne.n	80068cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	0151      	lsls	r1, r2, #5
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	440a      	add	r2, r1
 800687c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006880:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006884:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006888:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	0151      	lsls	r1, r2, #5
 800689c:	69fa      	ldr	r2, [r7, #28]
 800689e:	440a      	add	r2, r1
 80068a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	0151      	lsls	r1, r2, #5
 80068bc:	69fa      	ldr	r2, [r7, #28]
 80068be:	440a      	add	r2, r1
 80068c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068c4:	0cdb      	lsrs	r3, r3, #19
 80068c6:	04db      	lsls	r3, r3, #19
 80068c8:	6113      	str	r3, [r2, #16]
 80068ca:	e097      	b.n	80069fc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	0151      	lsls	r1, r2, #5
 80068de:	69fa      	ldr	r2, [r7, #28]
 80068e0:	440a      	add	r2, r1
 80068e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068e6:	0cdb      	lsrs	r3, r3, #19
 80068e8:	04db      	lsls	r3, r3, #19
 80068ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	0151      	lsls	r1, r2, #5
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	440a      	add	r2, r1
 8006902:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006906:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800690a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800690e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d11a      	bne.n	800694c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	691a      	ldr	r2, [r3, #16]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	429a      	cmp	r2, r3
 8006920:	d903      	bls.n	800692a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	689a      	ldr	r2, [r3, #8]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	0151      	lsls	r1, r2, #5
 800693c:	69fa      	ldr	r2, [r7, #28]
 800693e:	440a      	add	r2, r1
 8006940:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006944:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006948:	6113      	str	r3, [r2, #16]
 800694a:	e044      	b.n	80069d6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	691a      	ldr	r2, [r3, #16]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	4413      	add	r3, r2
 8006956:	1e5a      	subs	r2, r3, #1
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800696e:	691a      	ldr	r2, [r3, #16]
 8006970:	8afb      	ldrh	r3, [r7, #22]
 8006972:	04d9      	lsls	r1, r3, #19
 8006974:	4ba4      	ldr	r3, [pc, #656]	@ (8006c08 <USB_EPStartXfer+0x3cc>)
 8006976:	400b      	ands	r3, r1
 8006978:	69b9      	ldr	r1, [r7, #24]
 800697a:	0148      	lsls	r0, r1, #5
 800697c:	69f9      	ldr	r1, [r7, #28]
 800697e:	4401      	add	r1, r0
 8006980:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006984:	4313      	orrs	r3, r2
 8006986:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	791b      	ldrb	r3, [r3, #4]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d122      	bne.n	80069d6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069aa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80069ae:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069bc:	691a      	ldr	r2, [r3, #16]
 80069be:	8afb      	ldrh	r3, [r7, #22]
 80069c0:	075b      	lsls	r3, r3, #29
 80069c2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80069c6:	69b9      	ldr	r1, [r7, #24]
 80069c8:	0148      	lsls	r0, r1, #5
 80069ca:	69f9      	ldr	r1, [r7, #28]
 80069cc:	4401      	add	r1, r0
 80069ce:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80069d2:	4313      	orrs	r3, r2
 80069d4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e2:	691a      	ldr	r2, [r3, #16]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ec:	69b9      	ldr	r1, [r7, #24]
 80069ee:	0148      	lsls	r0, r1, #5
 80069f0:	69f9      	ldr	r1, [r7, #28]
 80069f2:	4401      	add	r1, r0
 80069f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80069f8:	4313      	orrs	r3, r2
 80069fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80069fc:	79fb      	ldrb	r3, [r7, #7]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d14b      	bne.n	8006a9a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d009      	beq.n	8006a1e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a16:	461a      	mov	r2, r3
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	791b      	ldrb	r3, [r3, #4]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d128      	bne.n	8006a78 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d110      	bne.n	8006a58 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	0151      	lsls	r1, r2, #5
 8006a48:	69fa      	ldr	r2, [r7, #28]
 8006a4a:	440a      	add	r2, r1
 8006a4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a50:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	e00f      	b.n	8006a78 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	0151      	lsls	r1, r2, #5
 8006a6a:	69fa      	ldr	r2, [r7, #28]
 8006a6c:	440a      	add	r2, r1
 8006a6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a76:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a92:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	e166      	b.n	8006d68 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	0151      	lsls	r1, r2, #5
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	440a      	add	r2, r1
 8006ab0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ab4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006ab8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	791b      	ldrb	r3, [r3, #4]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d015      	beq.n	8006aee <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 814e 	beq.w	8006d68 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	f003 030f 	and.w	r3, r3, #15
 8006adc:	2101      	movs	r1, #1
 8006ade:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae2:	69f9      	ldr	r1, [r7, #28]
 8006ae4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	634b      	str	r3, [r1, #52]	@ 0x34
 8006aec:	e13c      	b.n	8006d68 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d110      	bne.n	8006b20 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	0151      	lsls	r1, r2, #5
 8006b10:	69fa      	ldr	r2, [r7, #28]
 8006b12:	440a      	add	r2, r1
 8006b14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	e00f      	b.n	8006b40 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	0151      	lsls	r1, r2, #5
 8006b32:	69fa      	ldr	r2, [r7, #28]
 8006b34:	440a      	add	r2, r1
 8006b36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b3e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	68d9      	ldr	r1, [r3, #12]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	781a      	ldrb	r2, [r3, #0]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	b298      	uxth	r0, r3
 8006b4e:	79fb      	ldrb	r3, [r7, #7]
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	4603      	mov	r3, r0
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 f9b9 	bl	8006ecc <USB_WritePacket>
 8006b5a:	e105      	b.n	8006d68 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	0151      	lsls	r1, r2, #5
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	440a      	add	r2, r1
 8006b72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b76:	0cdb      	lsrs	r3, r3, #19
 8006b78:	04db      	lsls	r3, r3, #19
 8006b7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	0151      	lsls	r1, r2, #5
 8006b8e:	69fa      	ldr	r2, [r7, #28]
 8006b90:	440a      	add	r2, r1
 8006b92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b96:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006b9a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006b9e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d132      	bne.n	8006c0c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bca:	691a      	ldr	r2, [r3, #16]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bd4:	69b9      	ldr	r1, [r7, #24]
 8006bd6:	0148      	lsls	r0, r1, #5
 8006bd8:	69f9      	ldr	r1, [r7, #28]
 8006bda:	4401      	add	r1, r0
 8006bdc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006be0:	4313      	orrs	r3, r2
 8006be2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	0151      	lsls	r1, r2, #5
 8006bf6:	69fa      	ldr	r2, [r7, #28]
 8006bf8:	440a      	add	r2, r1
 8006bfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bfe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c02:	6113      	str	r3, [r2, #16]
 8006c04:	e062      	b.n	8006ccc <USB_EPStartXfer+0x490>
 8006c06:	bf00      	nop
 8006c08:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d123      	bne.n	8006c5c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c20:	691a      	ldr	r2, [r3, #16]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c2a:	69b9      	ldr	r1, [r7, #24]
 8006c2c:	0148      	lsls	r0, r1, #5
 8006c2e:	69f9      	ldr	r1, [r7, #28]
 8006c30:	4401      	add	r1, r0
 8006c32:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c36:	4313      	orrs	r3, r2
 8006c38:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	0151      	lsls	r1, r2, #5
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	440a      	add	r2, r1
 8006c50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c58:	6113      	str	r3, [r2, #16]
 8006c5a:	e037      	b.n	8006ccc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	4413      	add	r3, r2
 8006c66:	1e5a      	subs	r2, r3, #1
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c70:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	8afa      	ldrh	r2, [r7, #22]
 8006c78:	fb03 f202 	mul.w	r2, r3, r2
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c8c:	691a      	ldr	r2, [r3, #16]
 8006c8e:	8afb      	ldrh	r3, [r7, #22]
 8006c90:	04d9      	lsls	r1, r3, #19
 8006c92:	4b38      	ldr	r3, [pc, #224]	@ (8006d74 <USB_EPStartXfer+0x538>)
 8006c94:	400b      	ands	r3, r1
 8006c96:	69b9      	ldr	r1, [r7, #24]
 8006c98:	0148      	lsls	r0, r1, #5
 8006c9a:	69f9      	ldr	r1, [r7, #28]
 8006c9c:	4401      	add	r1, r0
 8006c9e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cbc:	69b9      	ldr	r1, [r7, #24]
 8006cbe:	0148      	lsls	r0, r1, #5
 8006cc0:	69f9      	ldr	r1, [r7, #28]
 8006cc2:	4401      	add	r1, r0
 8006cc4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d10d      	bne.n	8006cee <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	68d9      	ldr	r1, [r3, #12]
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cea:	460a      	mov	r2, r1
 8006cec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	791b      	ldrb	r3, [r3, #4]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d128      	bne.n	8006d48 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d110      	bne.n	8006d28 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	0151      	lsls	r1, r2, #5
 8006d18:	69fa      	ldr	r2, [r7, #28]
 8006d1a:	440a      	add	r2, r1
 8006d1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	e00f      	b.n	8006d48 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	0151      	lsls	r1, r2, #5
 8006d3a:	69fa      	ldr	r2, [r7, #28]
 8006d3c:	440a      	add	r2, r1
 8006d3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	0151      	lsls	r1, r2, #5
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	440a      	add	r2, r1
 8006d5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d62:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3720      	adds	r7, #32
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	1ff80000 	.word	0x1ff80000

08006d78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d14a      	bne.n	8006e2c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006daa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dae:	f040 8086 	bne.w	8006ebe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	7812      	ldrb	r2, [r2, #0]
 8006dc6:	0151      	lsls	r1, r2, #5
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	440a      	add	r2, r1
 8006dcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dd0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006dd4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	7812      	ldrb	r2, [r2, #0]
 8006dea:	0151      	lsls	r1, r2, #5
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	440a      	add	r2, r1
 8006df0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006df4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006df8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d902      	bls.n	8006e10 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e0e:	e056      	b.n	8006ebe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e28:	d0e7      	beq.n	8006dfa <USB_EPStopXfer+0x82>
 8006e2a:	e048      	b.n	8006ebe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e44:	d13b      	bne.n	8006ebe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	7812      	ldrb	r2, [r2, #0]
 8006e5a:	0151      	lsls	r1, r2, #5
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	440a      	add	r2, r1
 8006e60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e64:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e68:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	7812      	ldrb	r2, [r2, #0]
 8006e7e:	0151      	lsls	r1, r2, #5
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	440a      	add	r2, r1
 8006e84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3301      	adds	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d902      	bls.n	8006ea4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ea2:	e00c      	b.n	8006ebe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ebc:	d0e7      	beq.n	8006e8e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	371c      	adds	r7, #28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b089      	sub	sp, #36	@ 0x24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	461a      	mov	r2, r3
 8006eda:	460b      	mov	r3, r1
 8006edc:	71fb      	strb	r3, [r7, #7]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006eea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d123      	bne.n	8006f3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ef2:	88bb      	ldrh	r3, [r7, #4]
 8006ef4:	3303      	adds	r3, #3
 8006ef6:	089b      	lsrs	r3, r3, #2
 8006ef8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006efa:	2300      	movs	r3, #0
 8006efc:	61bb      	str	r3, [r7, #24]
 8006efe:	e018      	b.n	8006f32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	031a      	lsls	r2, r3, #12
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	3301      	adds	r3, #1
 8006f18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	3301      	adds	r3, #1
 8006f24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	61bb      	str	r3, [r7, #24]
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d3e2      	bcc.n	8006f00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3724      	adds	r7, #36	@ 0x24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b08b      	sub	sp, #44	@ 0x2c
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	4613      	mov	r3, r2
 8006f54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f5e:	88fb      	ldrh	r3, [r7, #6]
 8006f60:	089b      	lsrs	r3, r3, #2
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f66:	88fb      	ldrh	r3, [r7, #6]
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f6e:	2300      	movs	r3, #0
 8006f70:	623b      	str	r3, [r7, #32]
 8006f72:	e014      	b.n	8006f9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f82:	3301      	adds	r3, #1
 8006f84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	3301      	adds	r3, #1
 8006f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8e:	3301      	adds	r3, #1
 8006f90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f94:	3301      	adds	r3, #1
 8006f96:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	623b      	str	r3, [r7, #32]
 8006f9e:	6a3a      	ldr	r2, [r7, #32]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d3e6      	bcc.n	8006f74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006fa6:	8bfb      	ldrh	r3, [r7, #30]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d01e      	beq.n	8006fea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f107 0310 	add.w	r3, r7, #16
 8006fbc:	6812      	ldr	r2, [r2, #0]
 8006fbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd0:	701a      	strb	r2, [r3, #0]
      i++;
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	3301      	adds	r3, #1
 8006fdc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006fde:	8bfb      	ldrh	r3, [r7, #30]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006fe4:	8bfb      	ldrh	r3, [r7, #30]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1ea      	bne.n	8006fc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	372c      	adds	r7, #44	@ 0x2c
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	785b      	ldrb	r3, [r3, #1]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d12c      	bne.n	800706e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	db12      	blt.n	800704c <USB_EPSetStall+0x54>
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00f      	beq.n	800704c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	0151      	lsls	r1, r2, #5
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	440a      	add	r2, r1
 8007042:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007046:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800704a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	0151      	lsls	r1, r2, #5
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	440a      	add	r2, r1
 8007062:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007066:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	e02b      	b.n	80070c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	db12      	blt.n	80070a6 <USB_EPSetStall+0xae>
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00f      	beq.n	80070a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	0151      	lsls	r1, r2, #5
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	440a      	add	r2, r1
 800709c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	0151      	lsls	r1, r2, #5
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	440a      	add	r2, r1
 80070bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	785b      	ldrb	r3, [r3, #1]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d128      	bne.n	8007142 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800710a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800710e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	791b      	ldrb	r3, [r3, #4]
 8007114:	2b03      	cmp	r3, #3
 8007116:	d003      	beq.n	8007120 <USB_EPClearStall+0x4c>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	791b      	ldrb	r3, [r3, #4]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d138      	bne.n	8007192 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	0151      	lsls	r1, r2, #5
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	440a      	add	r2, r1
 8007136:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800713a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	e027      	b.n	8007192 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	0151      	lsls	r1, r2, #5
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	440a      	add	r2, r1
 8007158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800715c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007160:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	791b      	ldrb	r3, [r3, #4]
 8007166:	2b03      	cmp	r3, #3
 8007168:	d003      	beq.n	8007172 <USB_EPClearStall+0x9e>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	791b      	ldrb	r3, [r3, #4]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d10f      	bne.n	8007192 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	440a      	add	r2, r1
 8007188:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800718c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007190:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80071c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	78fb      	ldrb	r3, [r7, #3]
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80071d4:	68f9      	ldr	r1, [r7, #12]
 80071d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071da:	4313      	orrs	r3, r2
 80071dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007206:	f023 0303 	bic.w	r3, r3, #3
 800720a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800721a:	f023 0302 	bic.w	r3, r3, #2
 800721e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007248:	f023 0303 	bic.w	r3, r3, #3
 800724c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800725c:	f043 0302 	orr.w	r3, r3, #2
 8007260:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4013      	ands	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007288:	68fb      	ldr	r3, [r7, #12]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007296:	b480      	push	{r7}
 8007298:	b085      	sub	sp, #20
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	4013      	ands	r3, r2
 80072b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	0c1b      	lsrs	r3, r3, #16
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	4013      	ands	r3, r2
 80072ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	b29b      	uxth	r3, r3
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072fe:	b480      	push	{r7}
 8007300:	b085      	sub	sp, #20
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	460b      	mov	r3, r1
 8007308:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800730e:	78fb      	ldrb	r3, [r7, #3]
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	4013      	ands	r3, r2
 800732a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800732c:	68bb      	ldr	r3, [r7, #8]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800733a:	b480      	push	{r7}
 800733c:	b087      	sub	sp, #28
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	460b      	mov	r3, r1
 8007344:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800735a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800735c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800735e:	78fb      	ldrb	r3, [r7, #3]
 8007360:	f003 030f 	and.w	r3, r3, #15
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	fa22 f303 	lsr.w	r3, r2, r3
 800736a:	01db      	lsls	r3, r3, #7
 800736c:	b2db      	uxtb	r3, r3
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	4313      	orrs	r3, r2
 8007372:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	4013      	ands	r3, r2
 8007386:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007388:	68bb      	ldr	r3, [r7, #8]
}
 800738a:	4618      	mov	r0, r3
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	f003 0301 	and.w	r3, r3, #1
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b085      	sub	sp, #20
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073cc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80073d0:	f023 0307 	bic.w	r3, r3, #7
 80073d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	460b      	mov	r3, r1
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	333c      	adds	r3, #60	@ 0x3c
 800740e:	3304      	adds	r3, #4
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	4a26      	ldr	r2, [pc, #152]	@ (80074b0 <USB_EP0_OutStart+0xb8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d90a      	bls.n	8007432 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007428:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800742c:	d101      	bne.n	8007432 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	e037      	b.n	80074a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007438:	461a      	mov	r2, r3
 800743a:	2300      	movs	r3, #0
 800743c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800744c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007450:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007460:	f043 0318 	orr.w	r3, r3, #24
 8007464:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007474:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007478:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800747a:	7afb      	ldrb	r3, [r7, #11]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d10f      	bne.n	80074a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007486:	461a      	mov	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800749a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800749e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	371c      	adds	r7, #28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	4f54300a 	.word	0x4f54300a

080074b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3301      	adds	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074cc:	d901      	bls.n	80074d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e01b      	b.n	800750a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	daf2      	bge.n	80074c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f043 0201 	orr.w	r2, r3, #1
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3301      	adds	r3, #1
 80074ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074f6:	d901      	bls.n	80074fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e006      	b.n	800750a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b01      	cmp	r3, #1
 8007506:	d0f0      	beq.n	80074ea <USB_CoreReset+0x36>

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
	...

08007518 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007524:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007528:	f002 fce4 	bl	8009ef4 <USBD_static_malloc>
 800752c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d109      	bne.n	8007548 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	32b0      	adds	r2, #176	@ 0xb0
 800753e:	2100      	movs	r1, #0
 8007540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007544:	2302      	movs	r3, #2
 8007546:	e0d4      	b.n	80076f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007548:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800754c:	2100      	movs	r1, #0
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f003 faac 	bl	800aaac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	32b0      	adds	r2, #176	@ 0xb0
 800755e:	68f9      	ldr	r1, [r7, #12]
 8007560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	32b0      	adds	r2, #176	@ 0xb0
 800756e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	7c1b      	ldrb	r3, [r3, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d138      	bne.n	80075f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007580:	4b5e      	ldr	r3, [pc, #376]	@ (80076fc <USBD_CDC_Init+0x1e4>)
 8007582:	7819      	ldrb	r1, [r3, #0]
 8007584:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007588:	2202      	movs	r2, #2
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f002 fb8f 	bl	8009cae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007590:	4b5a      	ldr	r3, [pc, #360]	@ (80076fc <USBD_CDC_Init+0x1e4>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	f003 020f 	and.w	r2, r3, #15
 8007598:	6879      	ldr	r1, [r7, #4]
 800759a:	4613      	mov	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	440b      	add	r3, r1
 80075a4:	3324      	adds	r3, #36	@ 0x24
 80075a6:	2201      	movs	r2, #1
 80075a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80075aa:	4b55      	ldr	r3, [pc, #340]	@ (8007700 <USBD_CDC_Init+0x1e8>)
 80075ac:	7819      	ldrb	r1, [r3, #0]
 80075ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075b2:	2202      	movs	r2, #2
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f002 fb7a 	bl	8009cae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80075ba:	4b51      	ldr	r3, [pc, #324]	@ (8007700 <USBD_CDC_Init+0x1e8>)
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	f003 020f 	and.w	r2, r3, #15
 80075c2:	6879      	ldr	r1, [r7, #4]
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	440b      	add	r3, r1
 80075ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80075d2:	2201      	movs	r2, #1
 80075d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80075d6:	4b4b      	ldr	r3, [pc, #300]	@ (8007704 <USBD_CDC_Init+0x1ec>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	f003 020f 	and.w	r2, r3, #15
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	4613      	mov	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	440b      	add	r3, r1
 80075ea:	3326      	adds	r3, #38	@ 0x26
 80075ec:	2210      	movs	r2, #16
 80075ee:	801a      	strh	r2, [r3, #0]
 80075f0:	e035      	b.n	800765e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80075f2:	4b42      	ldr	r3, [pc, #264]	@ (80076fc <USBD_CDC_Init+0x1e4>)
 80075f4:	7819      	ldrb	r1, [r3, #0]
 80075f6:	2340      	movs	r3, #64	@ 0x40
 80075f8:	2202      	movs	r2, #2
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f002 fb57 	bl	8009cae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007600:	4b3e      	ldr	r3, [pc, #248]	@ (80076fc <USBD_CDC_Init+0x1e4>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	f003 020f 	and.w	r2, r3, #15
 8007608:	6879      	ldr	r1, [r7, #4]
 800760a:	4613      	mov	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	440b      	add	r3, r1
 8007614:	3324      	adds	r3, #36	@ 0x24
 8007616:	2201      	movs	r2, #1
 8007618:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800761a:	4b39      	ldr	r3, [pc, #228]	@ (8007700 <USBD_CDC_Init+0x1e8>)
 800761c:	7819      	ldrb	r1, [r3, #0]
 800761e:	2340      	movs	r3, #64	@ 0x40
 8007620:	2202      	movs	r2, #2
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f002 fb43 	bl	8009cae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007628:	4b35      	ldr	r3, [pc, #212]	@ (8007700 <USBD_CDC_Init+0x1e8>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	f003 020f 	and.w	r2, r3, #15
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	4613      	mov	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	440b      	add	r3, r1
 800763c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007640:	2201      	movs	r2, #1
 8007642:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007644:	4b2f      	ldr	r3, [pc, #188]	@ (8007704 <USBD_CDC_Init+0x1ec>)
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	f003 020f 	and.w	r2, r3, #15
 800764c:	6879      	ldr	r1, [r7, #4]
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	440b      	add	r3, r1
 8007658:	3326      	adds	r3, #38	@ 0x26
 800765a:	2210      	movs	r2, #16
 800765c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800765e:	4b29      	ldr	r3, [pc, #164]	@ (8007704 <USBD_CDC_Init+0x1ec>)
 8007660:	7819      	ldrb	r1, [r3, #0]
 8007662:	2308      	movs	r3, #8
 8007664:	2203      	movs	r2, #3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f002 fb21 	bl	8009cae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800766c:	4b25      	ldr	r3, [pc, #148]	@ (8007704 <USBD_CDC_Init+0x1ec>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	f003 020f 	and.w	r2, r3, #15
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	440b      	add	r3, r1
 8007680:	3324      	adds	r3, #36	@ 0x24
 8007682:	2201      	movs	r2, #1
 8007684:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	33b0      	adds	r3, #176	@ 0xb0
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80076bc:	2302      	movs	r3, #2
 80076be:	e018      	b.n	80076f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	7c1b      	ldrb	r3, [r3, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007700 <USBD_CDC_Init+0x1e8>)
 80076ca:	7819      	ldrb	r1, [r3, #0]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80076d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f002 fbd8 	bl	8009e8c <USBD_LL_PrepareReceive>
 80076dc:	e008      	b.n	80076f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076de:	4b08      	ldr	r3, [pc, #32]	@ (8007700 <USBD_CDC_Init+0x1e8>)
 80076e0:	7819      	ldrb	r1, [r3, #0]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80076e8:	2340      	movs	r3, #64	@ 0x40
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f002 fbce 	bl	8009e8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20000093 	.word	0x20000093
 8007700:	20000094 	.word	0x20000094
 8007704:	20000095 	.word	0x20000095

08007708 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007714:	4b3a      	ldr	r3, [pc, #232]	@ (8007800 <USBD_CDC_DeInit+0xf8>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f002 faed 	bl	8009cfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007720:	4b37      	ldr	r3, [pc, #220]	@ (8007800 <USBD_CDC_DeInit+0xf8>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	f003 020f 	and.w	r2, r3, #15
 8007728:	6879      	ldr	r1, [r7, #4]
 800772a:	4613      	mov	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	440b      	add	r3, r1
 8007734:	3324      	adds	r3, #36	@ 0x24
 8007736:	2200      	movs	r2, #0
 8007738:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800773a:	4b32      	ldr	r3, [pc, #200]	@ (8007804 <USBD_CDC_DeInit+0xfc>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	4619      	mov	r1, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f002 fada 	bl	8009cfa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007746:	4b2f      	ldr	r3, [pc, #188]	@ (8007804 <USBD_CDC_DeInit+0xfc>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	f003 020f 	and.w	r2, r3, #15
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	4613      	mov	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	440b      	add	r3, r1
 800775a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800775e:	2200      	movs	r2, #0
 8007760:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007762:	4b29      	ldr	r3, [pc, #164]	@ (8007808 <USBD_CDC_DeInit+0x100>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f002 fac6 	bl	8009cfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800776e:	4b26      	ldr	r3, [pc, #152]	@ (8007808 <USBD_CDC_DeInit+0x100>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	f003 020f 	and.w	r2, r3, #15
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	440b      	add	r3, r1
 8007782:	3324      	adds	r3, #36	@ 0x24
 8007784:	2200      	movs	r2, #0
 8007786:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007788:	4b1f      	ldr	r3, [pc, #124]	@ (8007808 <USBD_CDC_DeInit+0x100>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	f003 020f 	and.w	r2, r3, #15
 8007790:	6879      	ldr	r1, [r7, #4]
 8007792:	4613      	mov	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	440b      	add	r3, r1
 800779c:	3326      	adds	r3, #38	@ 0x26
 800779e:	2200      	movs	r2, #0
 80077a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	32b0      	adds	r2, #176	@ 0xb0
 80077ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d01f      	beq.n	80077f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	33b0      	adds	r3, #176	@ 0xb0
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	32b0      	adds	r2, #176	@ 0xb0
 80077d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f002 fb9a 	bl	8009f10 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	32b0      	adds	r2, #176	@ 0xb0
 80077e6:	2100      	movs	r1, #0
 80077e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	20000093 	.word	0x20000093
 8007804:	20000094 	.word	0x20000094
 8007808:	20000095 	.word	0x20000095

0800780c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	32b0      	adds	r2, #176	@ 0xb0
 8007820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007824:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007826:	2300      	movs	r3, #0
 8007828:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007838:	2303      	movs	r3, #3
 800783a:	e0bf      	b.n	80079bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007844:	2b00      	cmp	r3, #0
 8007846:	d050      	beq.n	80078ea <USBD_CDC_Setup+0xde>
 8007848:	2b20      	cmp	r3, #32
 800784a:	f040 80af 	bne.w	80079ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	88db      	ldrh	r3, [r3, #6]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d03a      	beq.n	80078cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	b25b      	sxtb	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	da1b      	bge.n	8007898 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	33b0      	adds	r3, #176	@ 0xb0
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007876:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	88d2      	ldrh	r2, [r2, #6]
 800787c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	88db      	ldrh	r3, [r3, #6]
 8007882:	2b07      	cmp	r3, #7
 8007884:	bf28      	it	cs
 8007886:	2307      	movcs	r3, #7
 8007888:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	89fa      	ldrh	r2, [r7, #14]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 fd93 	bl	80093bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007896:	e090      	b.n	80079ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	785a      	ldrb	r2, [r3, #1]
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	88db      	ldrh	r3, [r3, #6]
 80078a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80078a8:	d803      	bhi.n	80078b2 <USBD_CDC_Setup+0xa6>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	88db      	ldrh	r3, [r3, #6]
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	e000      	b.n	80078b4 <USBD_CDC_Setup+0xa8>
 80078b2:	2240      	movs	r2, #64	@ 0x40
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80078ba:	6939      	ldr	r1, [r7, #16]
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80078c2:	461a      	mov	r2, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f001 fda5 	bl	8009414 <USBD_CtlPrepareRx>
      break;
 80078ca:	e076      	b.n	80079ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	33b0      	adds	r3, #176	@ 0xb0
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	7850      	ldrb	r0, [r2, #1]
 80078e2:	2200      	movs	r2, #0
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	4798      	blx	r3
      break;
 80078e8:	e067      	b.n	80079ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	785b      	ldrb	r3, [r3, #1]
 80078ee:	2b0b      	cmp	r3, #11
 80078f0:	d851      	bhi.n	8007996 <USBD_CDC_Setup+0x18a>
 80078f2:	a201      	add	r2, pc, #4	@ (adr r2, 80078f8 <USBD_CDC_Setup+0xec>)
 80078f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f8:	08007929 	.word	0x08007929
 80078fc:	080079a5 	.word	0x080079a5
 8007900:	08007997 	.word	0x08007997
 8007904:	08007997 	.word	0x08007997
 8007908:	08007997 	.word	0x08007997
 800790c:	08007997 	.word	0x08007997
 8007910:	08007997 	.word	0x08007997
 8007914:	08007997 	.word	0x08007997
 8007918:	08007997 	.word	0x08007997
 800791c:	08007997 	.word	0x08007997
 8007920:	08007953 	.word	0x08007953
 8007924:	0800797d 	.word	0x0800797d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b03      	cmp	r3, #3
 8007932:	d107      	bne.n	8007944 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007934:	f107 030a 	add.w	r3, r7, #10
 8007938:	2202      	movs	r2, #2
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 fd3d 	bl	80093bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007942:	e032      	b.n	80079aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f001 fcbb 	bl	80092c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800794c:	2303      	movs	r3, #3
 800794e:	75fb      	strb	r3, [r7, #23]
          break;
 8007950:	e02b      	b.n	80079aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b03      	cmp	r3, #3
 800795c:	d107      	bne.n	800796e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800795e:	f107 030d 	add.w	r3, r7, #13
 8007962:	2201      	movs	r2, #1
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f001 fd28 	bl	80093bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800796c:	e01d      	b.n	80079aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 fca6 	bl	80092c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007976:	2303      	movs	r3, #3
 8007978:	75fb      	strb	r3, [r7, #23]
          break;
 800797a:	e016      	b.n	80079aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b03      	cmp	r3, #3
 8007986:	d00f      	beq.n	80079a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 fc99 	bl	80092c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007990:	2303      	movs	r3, #3
 8007992:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007994:	e008      	b.n	80079a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007996:	6839      	ldr	r1, [r7, #0]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 fc92 	bl	80092c2 <USBD_CtlError>
          ret = USBD_FAIL;
 800799e:	2303      	movs	r3, #3
 80079a0:	75fb      	strb	r3, [r7, #23]
          break;
 80079a2:	e002      	b.n	80079aa <USBD_CDC_Setup+0x19e>
          break;
 80079a4:	bf00      	nop
 80079a6:	e008      	b.n	80079ba <USBD_CDC_Setup+0x1ae>
          break;
 80079a8:	bf00      	nop
      }
      break;
 80079aa:	e006      	b.n	80079ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 fc87 	bl	80092c2 <USBD_CtlError>
      ret = USBD_FAIL;
 80079b4:	2303      	movs	r3, #3
 80079b6:	75fb      	strb	r3, [r7, #23]
      break;
 80079b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	32b0      	adds	r2, #176	@ 0xb0
 80079e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e065      	b.n	8007aba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	32b0      	adds	r2, #176	@ 0xb0
 80079f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80079fe:	78fb      	ldrb	r3, [r7, #3]
 8007a00:	f003 020f 	and.w	r2, r3, #15
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	440b      	add	r3, r1
 8007a10:	3318      	adds	r3, #24
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d02f      	beq.n	8007a78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	f003 020f 	and.w	r2, r3, #15
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	3318      	adds	r3, #24
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	78fb      	ldrb	r3, [r7, #3]
 8007a30:	f003 010f 	and.w	r1, r3, #15
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	460b      	mov	r3, r1
 8007a38:	00db      	lsls	r3, r3, #3
 8007a3a:	440b      	add	r3, r1
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4403      	add	r3, r0
 8007a40:	331c      	adds	r3, #28
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	fbb2 f1f3 	udiv	r1, r2, r3
 8007a48:	fb01 f303 	mul.w	r3, r1, r3
 8007a4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d112      	bne.n	8007a78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007a52:	78fb      	ldrb	r3, [r7, #3]
 8007a54:	f003 020f 	and.w	r2, r3, #15
 8007a58:	6879      	ldr	r1, [r7, #4]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	440b      	add	r3, r1
 8007a64:	3318      	adds	r3, #24
 8007a66:	2200      	movs	r2, #0
 8007a68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007a6a:	78f9      	ldrb	r1, [r7, #3]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	2200      	movs	r2, #0
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f002 f9ea 	bl	8009e4a <USBD_LL_Transmit>
 8007a76:	e01f      	b.n	8007ab8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	33b0      	adds	r3, #176	@ 0xb0
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d010      	beq.n	8007ab8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	33b0      	adds	r3, #176	@ 0xb0
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007ab4:	78fa      	ldrb	r2, [r7, #3]
 8007ab6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	32b0      	adds	r2, #176	@ 0xb0
 8007ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007adc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	32b0      	adds	r2, #176	@ 0xb0
 8007ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d101      	bne.n	8007af4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e01a      	b.n	8007b2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007af4:	78fb      	ldrb	r3, [r7, #3]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f002 f9e8 	bl	8009ece <USBD_LL_GetRxDataSize>
 8007afe:	4602      	mov	r2, r0
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	33b0      	adds	r3, #176	@ 0xb0
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007b24:	4611      	mov	r1, r2
 8007b26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b084      	sub	sp, #16
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	32b0      	adds	r2, #176	@ 0xb0
 8007b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e024      	b.n	8007b9e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	33b0      	adds	r3, #176	@ 0xb0
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d019      	beq.n	8007b9c <USBD_CDC_EP0_RxReady+0x6a>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007b6e:	2bff      	cmp	r3, #255	@ 0xff
 8007b70:	d014      	beq.n	8007b9c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	33b0      	adds	r3, #176	@ 0xb0
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007b8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007b92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	22ff      	movs	r2, #255	@ 0xff
 8007b98:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
	...

08007ba8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007bb0:	2182      	movs	r1, #130	@ 0x82
 8007bb2:	4818      	ldr	r0, [pc, #96]	@ (8007c14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007bb4:	f000 fd4f 	bl	8008656 <USBD_GetEpDesc>
 8007bb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007bba:	2101      	movs	r1, #1
 8007bbc:	4815      	ldr	r0, [pc, #84]	@ (8007c14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007bbe:	f000 fd4a 	bl	8008656 <USBD_GetEpDesc>
 8007bc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007bc4:	2181      	movs	r1, #129	@ 0x81
 8007bc6:	4813      	ldr	r0, [pc, #76]	@ (8007c14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007bc8:	f000 fd45 	bl	8008656 <USBD_GetEpDesc>
 8007bcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d002      	beq.n	8007bda <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	2210      	movs	r2, #16
 8007bd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d006      	beq.n	8007bee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007be8:	711a      	strb	r2, [r3, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d006      	beq.n	8007c02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bfc:	711a      	strb	r2, [r3, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2243      	movs	r2, #67	@ 0x43
 8007c06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c08:	4b02      	ldr	r3, [pc, #8]	@ (8007c14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20000050 	.word	0x20000050

08007c18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c20:	2182      	movs	r1, #130	@ 0x82
 8007c22:	4818      	ldr	r0, [pc, #96]	@ (8007c84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007c24:	f000 fd17 	bl	8008656 <USBD_GetEpDesc>
 8007c28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	4815      	ldr	r0, [pc, #84]	@ (8007c84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007c2e:	f000 fd12 	bl	8008656 <USBD_GetEpDesc>
 8007c32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c34:	2181      	movs	r1, #129	@ 0x81
 8007c36:	4813      	ldr	r0, [pc, #76]	@ (8007c84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007c38:	f000 fd0d 	bl	8008656 <USBD_GetEpDesc>
 8007c3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	2210      	movs	r2, #16
 8007c48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d006      	beq.n	8007c5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	2200      	movs	r2, #0
 8007c54:	711a      	strb	r2, [r3, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f042 0202 	orr.w	r2, r2, #2
 8007c5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d006      	beq.n	8007c72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	711a      	strb	r2, [r3, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f042 0202 	orr.w	r2, r2, #2
 8007c70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2243      	movs	r2, #67	@ 0x43
 8007c76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c78:	4b02      	ldr	r3, [pc, #8]	@ (8007c84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	20000050 	.word	0x20000050

08007c88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c90:	2182      	movs	r1, #130	@ 0x82
 8007c92:	4818      	ldr	r0, [pc, #96]	@ (8007cf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c94:	f000 fcdf 	bl	8008656 <USBD_GetEpDesc>
 8007c98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	4815      	ldr	r0, [pc, #84]	@ (8007cf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c9e:	f000 fcda 	bl	8008656 <USBD_GetEpDesc>
 8007ca2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ca4:	2181      	movs	r1, #129	@ 0x81
 8007ca6:	4813      	ldr	r0, [pc, #76]	@ (8007cf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ca8:	f000 fcd5 	bl	8008656 <USBD_GetEpDesc>
 8007cac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	2210      	movs	r2, #16
 8007cb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d006      	beq.n	8007cce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cc8:	711a      	strb	r2, [r3, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d006      	beq.n	8007ce2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cdc:	711a      	strb	r2, [r3, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2243      	movs	r2, #67	@ 0x43
 8007ce6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ce8:	4b02      	ldr	r3, [pc, #8]	@ (8007cf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3718      	adds	r7, #24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20000050 	.word	0x20000050

08007cf8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	220a      	movs	r2, #10
 8007d04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d06:	4b03      	ldr	r3, [pc, #12]	@ (8007d14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	2000000c 	.word	0x2000000c

08007d18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e009      	b.n	8007d40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	33b0      	adds	r3, #176	@ 0xb0
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b087      	sub	sp, #28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	32b0      	adds	r2, #176	@ 0xb0
 8007d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e008      	b.n	8007d84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	371c      	adds	r7, #28
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	32b0      	adds	r2, #176	@ 0xb0
 8007da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e004      	b.n	8007dbe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
	...

08007dcc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	32b0      	adds	r2, #176	@ 0xb0
 8007dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007de4:	2301      	movs	r3, #1
 8007de6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e025      	b.n	8007e3e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d11f      	bne.n	8007e3c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007e04:	4b10      	ldr	r3, [pc, #64]	@ (8007e48 <USBD_CDC_TransmitPacket+0x7c>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	f003 020f 	and.w	r2, r3, #15
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	4613      	mov	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4403      	add	r3, r0
 8007e1e:	3318      	adds	r3, #24
 8007e20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007e22:	4b09      	ldr	r3, [pc, #36]	@ (8007e48 <USBD_CDC_TransmitPacket+0x7c>)
 8007e24:	7819      	ldrb	r1, [r3, #0]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f002 f809 	bl	8009e4a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000093 	.word	0x20000093

08007e4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	32b0      	adds	r2, #176	@ 0xb0
 8007e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	32b0      	adds	r2, #176	@ 0xb0
 8007e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e018      	b.n	8007eac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	7c1b      	ldrb	r3, [r3, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10a      	bne.n	8007e98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e82:	4b0c      	ldr	r3, [pc, #48]	@ (8007eb4 <USBD_CDC_ReceivePacket+0x68>)
 8007e84:	7819      	ldrb	r1, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f001 fffb 	bl	8009e8c <USBD_LL_PrepareReceive>
 8007e96:	e008      	b.n	8007eaa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e98:	4b06      	ldr	r3, [pc, #24]	@ (8007eb4 <USBD_CDC_ReceivePacket+0x68>)
 8007e9a:	7819      	ldrb	r1, [r3, #0]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ea2:	2340      	movs	r3, #64	@ 0x40
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 fff1 	bl	8009e8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20000094 	.word	0x20000094

08007eb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e01f      	b.n	8007f10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	79fa      	ldrb	r2, [r7, #7]
 8007f02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f001 fe6b 	bl	8009be0 <USBD_LL_Init>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e025      	b.n	8007f7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	32ae      	adds	r2, #174	@ 0xae
 8007f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00f      	beq.n	8007f6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	32ae      	adds	r2, #174	@ 0xae
 8007f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5c:	f107 020e 	add.w	r2, r7, #14
 8007f60:	4610      	mov	r0, r2
 8007f62:	4798      	blx	r3
 8007f64:	4602      	mov	r2, r0
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007f72:	1c5a      	adds	r2, r3, #1
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 fe73 	bl	8009c78 <USBD_LL_Start>
 8007f92:	4603      	mov	r3, r0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fa4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d009      	beq.n	8007fe0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	78fa      	ldrb	r2, [r7, #3]
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	4798      	blx	r3
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	4611      	mov	r1, r2
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	4798      	blx	r3
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008010:	2303      	movs	r3, #3
 8008012:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008014:	7bfb      	ldrb	r3, [r7, #15]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b084      	sub	sp, #16
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	4618      	mov	r0, r3
 8008032:	f001 f90c 	bl	800924e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008044:	461a      	mov	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008052:	f003 031f 	and.w	r3, r3, #31
 8008056:	2b02      	cmp	r3, #2
 8008058:	d01a      	beq.n	8008090 <USBD_LL_SetupStage+0x72>
 800805a:	2b02      	cmp	r3, #2
 800805c:	d822      	bhi.n	80080a4 <USBD_LL_SetupStage+0x86>
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <USBD_LL_SetupStage+0x4a>
 8008062:	2b01      	cmp	r3, #1
 8008064:	d00a      	beq.n	800807c <USBD_LL_SetupStage+0x5e>
 8008066:	e01d      	b.n	80080a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fb63 	bl	800873c <USBD_StdDevReq>
 8008076:	4603      	mov	r3, r0
 8008078:	73fb      	strb	r3, [r7, #15]
      break;
 800807a:	e020      	b.n	80080be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fbcb 	bl	8008820 <USBD_StdItfReq>
 800808a:	4603      	mov	r3, r0
 800808c:	73fb      	strb	r3, [r7, #15]
      break;
 800808e:	e016      	b.n	80080be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fc2d 	bl	80088f8 <USBD_StdEPReq>
 800809e:	4603      	mov	r3, r0
 80080a0:	73fb      	strb	r3, [r7, #15]
      break;
 80080a2:	e00c      	b.n	80080be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80080aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f001 fe40 	bl	8009d38 <USBD_LL_StallEP>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73fb      	strb	r3, [r7, #15]
      break;
 80080bc:	bf00      	nop
  }

  return ret;
 80080be:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	460b      	mov	r3, r1
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80080da:	7afb      	ldrb	r3, [r7, #11]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d16e      	bne.n	80081be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80080e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	f040 8098 	bne.w	8008224 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d913      	bls.n	8008128 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	1ad2      	subs	r2, r2, r3
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	4293      	cmp	r3, r2
 8008118:	bf28      	it	cs
 800811a:	4613      	movcs	r3, r2
 800811c:	461a      	mov	r2, r3
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f001 f994 	bl	800944e <USBD_CtlContinueRx>
 8008126:	e07d      	b.n	8008224 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800812e:	f003 031f 	and.w	r3, r3, #31
 8008132:	2b02      	cmp	r3, #2
 8008134:	d014      	beq.n	8008160 <USBD_LL_DataOutStage+0x98>
 8008136:	2b02      	cmp	r3, #2
 8008138:	d81d      	bhi.n	8008176 <USBD_LL_DataOutStage+0xae>
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <USBD_LL_DataOutStage+0x7c>
 800813e:	2b01      	cmp	r3, #1
 8008140:	d003      	beq.n	800814a <USBD_LL_DataOutStage+0x82>
 8008142:	e018      	b.n	8008176 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	75bb      	strb	r3, [r7, #22]
            break;
 8008148:	e018      	b.n	800817c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008150:	b2db      	uxtb	r3, r3
 8008152:	4619      	mov	r1, r3
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 fa64 	bl	8008622 <USBD_CoreFindIF>
 800815a:	4603      	mov	r3, r0
 800815c:	75bb      	strb	r3, [r7, #22]
            break;
 800815e:	e00d      	b.n	800817c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008166:	b2db      	uxtb	r3, r3
 8008168:	4619      	mov	r1, r3
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 fa66 	bl	800863c <USBD_CoreFindEP>
 8008170:	4603      	mov	r3, r0
 8008172:	75bb      	strb	r3, [r7, #22]
            break;
 8008174:	e002      	b.n	800817c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	75bb      	strb	r3, [r7, #22]
            break;
 800817a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800817c:	7dbb      	ldrb	r3, [r7, #22]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d119      	bne.n	80081b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b03      	cmp	r3, #3
 800818c:	d113      	bne.n	80081b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800818e:	7dba      	ldrb	r2, [r7, #22]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	32ae      	adds	r2, #174	@ 0xae
 8008194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00b      	beq.n	80081b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800819e:	7dba      	ldrb	r2, [r7, #22]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80081a6:	7dba      	ldrb	r2, [r7, #22]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	32ae      	adds	r2, #174	@ 0xae
 80081ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f001 f95a 	bl	8009470 <USBD_CtlSendStatus>
 80081bc:	e032      	b.n	8008224 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80081be:	7afb      	ldrb	r3, [r7, #11]
 80081c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	4619      	mov	r1, r3
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 fa37 	bl	800863c <USBD_CoreFindEP>
 80081ce:	4603      	mov	r3, r0
 80081d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081d2:	7dbb      	ldrb	r3, [r7, #22]
 80081d4:	2bff      	cmp	r3, #255	@ 0xff
 80081d6:	d025      	beq.n	8008224 <USBD_LL_DataOutStage+0x15c>
 80081d8:	7dbb      	ldrb	r3, [r7, #22]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d122      	bne.n	8008224 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d117      	bne.n	800821a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80081ea:	7dba      	ldrb	r2, [r7, #22]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	32ae      	adds	r2, #174	@ 0xae
 80081f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00f      	beq.n	800821a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80081fa:	7dba      	ldrb	r2, [r7, #22]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008202:	7dba      	ldrb	r2, [r7, #22]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	32ae      	adds	r2, #174	@ 0xae
 8008208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	7afa      	ldrb	r2, [r7, #11]
 8008210:	4611      	mov	r1, r2
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	4798      	blx	r3
 8008216:	4603      	mov	r3, r0
 8008218:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	e000      	b.n	8008226 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b086      	sub	sp, #24
 8008232:	af00      	add	r7, sp, #0
 8008234:	60f8      	str	r0, [r7, #12]
 8008236:	460b      	mov	r3, r1
 8008238:	607a      	str	r2, [r7, #4]
 800823a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800823c:	7afb      	ldrb	r3, [r7, #11]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d16f      	bne.n	8008322 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3314      	adds	r3, #20
 8008246:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800824e:	2b02      	cmp	r3, #2
 8008250:	d15a      	bne.n	8008308 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	429a      	cmp	r2, r3
 800825c:	d914      	bls.n	8008288 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	689a      	ldr	r2, [r3, #8]
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	1ad2      	subs	r2, r2, r3
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	461a      	mov	r2, r3
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f001 f8bc 	bl	80093f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800827a:	2300      	movs	r3, #0
 800827c:	2200      	movs	r2, #0
 800827e:	2100      	movs	r1, #0
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f001 fe03 	bl	8009e8c <USBD_LL_PrepareReceive>
 8008286:	e03f      	b.n	8008308 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	68da      	ldr	r2, [r3, #12]
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	429a      	cmp	r2, r3
 8008292:	d11c      	bne.n	80082ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800829c:	429a      	cmp	r2, r3
 800829e:	d316      	bcc.n	80082ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d20f      	bcs.n	80082ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082ae:	2200      	movs	r2, #0
 80082b0:	2100      	movs	r1, #0
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f001 f89d 	bl	80093f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082c0:	2300      	movs	r3, #0
 80082c2:	2200      	movs	r2, #0
 80082c4:	2100      	movs	r1, #0
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f001 fde0 	bl	8009e8c <USBD_LL_PrepareReceive>
 80082cc:	e01c      	b.n	8008308 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d10f      	bne.n	80082fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d009      	beq.n	80082fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80082fa:	2180      	movs	r1, #128	@ 0x80
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f001 fd1b 	bl	8009d38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f001 f8c7 	bl	8009496 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d03a      	beq.n	8008388 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f7ff fe42 	bl	8007f9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008320:	e032      	b.n	8008388 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008322:	7afb      	ldrb	r3, [r7, #11]
 8008324:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008328:	b2db      	uxtb	r3, r3
 800832a:	4619      	mov	r1, r3
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 f985 	bl	800863c <USBD_CoreFindEP>
 8008332:	4603      	mov	r3, r0
 8008334:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008336:	7dfb      	ldrb	r3, [r7, #23]
 8008338:	2bff      	cmp	r3, #255	@ 0xff
 800833a:	d025      	beq.n	8008388 <USBD_LL_DataInStage+0x15a>
 800833c:	7dfb      	ldrb	r3, [r7, #23]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d122      	bne.n	8008388 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b03      	cmp	r3, #3
 800834c:	d11c      	bne.n	8008388 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800834e:	7dfa      	ldrb	r2, [r7, #23]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	32ae      	adds	r2, #174	@ 0xae
 8008354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d014      	beq.n	8008388 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800835e:	7dfa      	ldrb	r2, [r7, #23]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008366:	7dfa      	ldrb	r2, [r7, #23]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	32ae      	adds	r2, #174	@ 0xae
 800836c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	7afa      	ldrb	r2, [r7, #11]
 8008374:	4611      	mov	r1, r2
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	4798      	blx	r3
 800837a:	4603      	mov	r3, r0
 800837c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800837e:	7dbb      	ldrb	r3, [r7, #22]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008384:	7dbb      	ldrb	r3, [r7, #22]
 8008386:	e000      	b.n	800838a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3718      	adds	r7, #24
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d014      	beq.n	80083f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00e      	beq.n	80083f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	6852      	ldr	r2, [r2, #4]
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	4611      	mov	r1, r2
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	4798      	blx	r3
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80083f4:	2303      	movs	r3, #3
 80083f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083f8:	2340      	movs	r3, #64	@ 0x40
 80083fa:	2200      	movs	r2, #0
 80083fc:	2100      	movs	r1, #0
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f001 fc55 	bl	8009cae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2240      	movs	r2, #64	@ 0x40
 8008410:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008414:	2340      	movs	r3, #64	@ 0x40
 8008416:	2200      	movs	r2, #0
 8008418:	2180      	movs	r1, #128	@ 0x80
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f001 fc47 	bl	8009cae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2240      	movs	r2, #64	@ 0x40
 800842a:	621a      	str	r2, [r3, #32]

  return ret;
 800842c:	7bfb      	ldrb	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	460b      	mov	r3, r1
 8008440:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	78fa      	ldrb	r2, [r7, #3]
 8008446:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b04      	cmp	r3, #4
 8008468:	d006      	beq.n	8008478 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008470:	b2da      	uxtb	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2204      	movs	r2, #4
 800847c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d106      	bne.n	80084b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b082      	sub	sp, #8
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d110      	bne.n	80084f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00b      	beq.n	80084f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084e2:	69db      	ldr	r3, [r3, #28]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d005      	beq.n	80084f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084ee:	69db      	ldr	r3, [r3, #28]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	460b      	mov	r3, r1
 8008508:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	32ae      	adds	r2, #174	@ 0xae
 8008514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800851c:	2303      	movs	r3, #3
 800851e:	e01c      	b.n	800855a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b03      	cmp	r3, #3
 800852a:	d115      	bne.n	8008558 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	32ae      	adds	r2, #174	@ 0xae
 8008536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	32ae      	adds	r2, #174	@ 0xae
 800854a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800854e:	6a1b      	ldr	r3, [r3, #32]
 8008550:	78fa      	ldrb	r2, [r7, #3]
 8008552:	4611      	mov	r1, r2
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	460b      	mov	r3, r1
 800856c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	32ae      	adds	r2, #174	@ 0xae
 8008578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008580:	2303      	movs	r3, #3
 8008582:	e01c      	b.n	80085be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b03      	cmp	r3, #3
 800858e:	d115      	bne.n	80085bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	32ae      	adds	r2, #174	@ 0xae
 800859a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00b      	beq.n	80085bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	32ae      	adds	r2, #174	@ 0xae
 80085ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085b4:	78fa      	ldrb	r2, [r7, #3]
 80085b6:	4611      	mov	r1, r2
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b083      	sub	sp, #12
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00e      	beq.n	8008618 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	6852      	ldr	r2, [r2, #4]
 8008606:	b2d2      	uxtb	r2, r2
 8008608:	4611      	mov	r1, r2
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	4798      	blx	r3
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008614:	2303      	movs	r3, #3
 8008616:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008618:	7bfb      	ldrb	r3, [r7, #15]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	460b      	mov	r3, r1
 800862c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800862e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008648:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800864a:	4618      	mov	r0, r3
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b086      	sub	sp, #24
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	460b      	mov	r3, r1
 8008660:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800866a:	2300      	movs	r3, #0
 800866c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	885b      	ldrh	r3, [r3, #2]
 8008672:	b29b      	uxth	r3, r3
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	7812      	ldrb	r2, [r2, #0]
 8008678:	4293      	cmp	r3, r2
 800867a:	d91f      	bls.n	80086bc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008682:	e013      	b.n	80086ac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008684:	f107 030a 	add.w	r3, r7, #10
 8008688:	4619      	mov	r1, r3
 800868a:	6978      	ldr	r0, [r7, #20]
 800868c:	f000 f81b 	bl	80086c6 <USBD_GetNextDesc>
 8008690:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	785b      	ldrb	r3, [r3, #1]
 8008696:	2b05      	cmp	r3, #5
 8008698:	d108      	bne.n	80086ac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	789b      	ldrb	r3, [r3, #2]
 80086a2:	78fa      	ldrb	r2, [r7, #3]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d008      	beq.n	80086ba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80086a8:	2300      	movs	r3, #0
 80086aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	885b      	ldrh	r3, [r3, #2]
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	897b      	ldrh	r3, [r7, #10]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d8e5      	bhi.n	8008684 <USBD_GetEpDesc+0x2e>
 80086b8:	e000      	b.n	80086bc <USBD_GetEpDesc+0x66>
          break;
 80086ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80086bc:	693b      	ldr	r3, [r7, #16]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3718      	adds	r7, #24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b085      	sub	sp, #20
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	7812      	ldrb	r2, [r2, #0]
 80086dc:	4413      	add	r3, r2
 80086de:	b29a      	uxth	r2, r3
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	461a      	mov	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4413      	add	r3, r2
 80086ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086f0:	68fb      	ldr	r3, [r7, #12]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086fe:	b480      	push	{r7}
 8008700:	b087      	sub	sp, #28
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	3301      	adds	r3, #1
 8008714:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800871c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008720:	021b      	lsls	r3, r3, #8
 8008722:	b21a      	sxth	r2, r3
 8008724:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008728:	4313      	orrs	r3, r2
 800872a:	b21b      	sxth	r3, r3
 800872c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800872e:	89fb      	ldrh	r3, [r7, #14]
}
 8008730:	4618      	mov	r0, r3
 8008732:	371c      	adds	r7, #28
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008752:	2b40      	cmp	r3, #64	@ 0x40
 8008754:	d005      	beq.n	8008762 <USBD_StdDevReq+0x26>
 8008756:	2b40      	cmp	r3, #64	@ 0x40
 8008758:	d857      	bhi.n	800880a <USBD_StdDevReq+0xce>
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00f      	beq.n	800877e <USBD_StdDevReq+0x42>
 800875e:	2b20      	cmp	r3, #32
 8008760:	d153      	bne.n	800880a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	32ae      	adds	r2, #174	@ 0xae
 800876c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	6839      	ldr	r1, [r7, #0]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	4798      	blx	r3
 8008778:	4603      	mov	r3, r0
 800877a:	73fb      	strb	r3, [r7, #15]
      break;
 800877c:	e04a      	b.n	8008814 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	785b      	ldrb	r3, [r3, #1]
 8008782:	2b09      	cmp	r3, #9
 8008784:	d83b      	bhi.n	80087fe <USBD_StdDevReq+0xc2>
 8008786:	a201      	add	r2, pc, #4	@ (adr r2, 800878c <USBD_StdDevReq+0x50>)
 8008788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878c:	080087e1 	.word	0x080087e1
 8008790:	080087f5 	.word	0x080087f5
 8008794:	080087ff 	.word	0x080087ff
 8008798:	080087eb 	.word	0x080087eb
 800879c:	080087ff 	.word	0x080087ff
 80087a0:	080087bf 	.word	0x080087bf
 80087a4:	080087b5 	.word	0x080087b5
 80087a8:	080087ff 	.word	0x080087ff
 80087ac:	080087d7 	.word	0x080087d7
 80087b0:	080087c9 	.word	0x080087c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fa3c 	bl	8008c34 <USBD_GetDescriptor>
          break;
 80087bc:	e024      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fba1 	bl	8008f08 <USBD_SetAddress>
          break;
 80087c6:	e01f      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fbe0 	bl	8008f90 <USBD_SetConfig>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73fb      	strb	r3, [r7, #15]
          break;
 80087d4:	e018      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fc83 	bl	80090e4 <USBD_GetConfig>
          break;
 80087de:	e013      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fcb4 	bl	8009150 <USBD_GetStatus>
          break;
 80087e8:	e00e      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fce3 	bl	80091b8 <USBD_SetFeature>
          break;
 80087f2:	e009      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fd07 	bl	800920a <USBD_ClrFeature>
          break;
 80087fc:	e004      	b.n	8008808 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fd5e 	bl	80092c2 <USBD_CtlError>
          break;
 8008806:	bf00      	nop
      }
      break;
 8008808:	e004      	b.n	8008814 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fd58 	bl	80092c2 <USBD_CtlError>
      break;
 8008812:	bf00      	nop
  }

  return ret;
 8008814:	7bfb      	ldrb	r3, [r7, #15]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop

08008820 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008836:	2b40      	cmp	r3, #64	@ 0x40
 8008838:	d005      	beq.n	8008846 <USBD_StdItfReq+0x26>
 800883a:	2b40      	cmp	r3, #64	@ 0x40
 800883c:	d852      	bhi.n	80088e4 <USBD_StdItfReq+0xc4>
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <USBD_StdItfReq+0x26>
 8008842:	2b20      	cmp	r3, #32
 8008844:	d14e      	bne.n	80088e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800884c:	b2db      	uxtb	r3, r3
 800884e:	3b01      	subs	r3, #1
 8008850:	2b02      	cmp	r3, #2
 8008852:	d840      	bhi.n	80088d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	889b      	ldrh	r3, [r3, #4]
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b01      	cmp	r3, #1
 800885c:	d836      	bhi.n	80088cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	889b      	ldrh	r3, [r3, #4]
 8008862:	b2db      	uxtb	r3, r3
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7ff fedb 	bl	8008622 <USBD_CoreFindIF>
 800886c:	4603      	mov	r3, r0
 800886e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	2bff      	cmp	r3, #255	@ 0xff
 8008874:	d01d      	beq.n	80088b2 <USBD_StdItfReq+0x92>
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d11a      	bne.n	80088b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800887c:	7bba      	ldrb	r2, [r7, #14]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	32ae      	adds	r2, #174	@ 0xae
 8008882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00f      	beq.n	80088ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800888c:	7bba      	ldrb	r2, [r7, #14]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008894:	7bba      	ldrb	r2, [r7, #14]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	32ae      	adds	r2, #174	@ 0xae
 800889a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	4798      	blx	r3
 80088a6:	4603      	mov	r3, r0
 80088a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088aa:	e004      	b.n	80088b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80088ac:	2303      	movs	r3, #3
 80088ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088b0:	e001      	b.n	80088b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80088b2:	2303      	movs	r3, #3
 80088b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	88db      	ldrh	r3, [r3, #6]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d110      	bne.n	80088e0 <USBD_StdItfReq+0xc0>
 80088be:	7bfb      	ldrb	r3, [r7, #15]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10d      	bne.n	80088e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fdd3 	bl	8009470 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088ca:	e009      	b.n	80088e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fcf7 	bl	80092c2 <USBD_CtlError>
          break;
 80088d4:	e004      	b.n	80088e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fcf2 	bl	80092c2 <USBD_CtlError>
          break;
 80088de:	e000      	b.n	80088e2 <USBD_StdItfReq+0xc2>
          break;
 80088e0:	bf00      	nop
      }
      break;
 80088e2:	e004      	b.n	80088ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fceb 	bl	80092c2 <USBD_CtlError>
      break;
 80088ec:	bf00      	nop
  }

  return ret;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	889b      	ldrh	r3, [r3, #4]
 800890a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008914:	2b40      	cmp	r3, #64	@ 0x40
 8008916:	d007      	beq.n	8008928 <USBD_StdEPReq+0x30>
 8008918:	2b40      	cmp	r3, #64	@ 0x40
 800891a:	f200 817f 	bhi.w	8008c1c <USBD_StdEPReq+0x324>
 800891e:	2b00      	cmp	r3, #0
 8008920:	d02a      	beq.n	8008978 <USBD_StdEPReq+0x80>
 8008922:	2b20      	cmp	r3, #32
 8008924:	f040 817a 	bne.w	8008c1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008928:	7bbb      	ldrb	r3, [r7, #14]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7ff fe85 	bl	800863c <USBD_CoreFindEP>
 8008932:	4603      	mov	r3, r0
 8008934:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008936:	7b7b      	ldrb	r3, [r7, #13]
 8008938:	2bff      	cmp	r3, #255	@ 0xff
 800893a:	f000 8174 	beq.w	8008c26 <USBD_StdEPReq+0x32e>
 800893e:	7b7b      	ldrb	r3, [r7, #13]
 8008940:	2b00      	cmp	r3, #0
 8008942:	f040 8170 	bne.w	8008c26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008946:	7b7a      	ldrb	r2, [r7, #13]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800894e:	7b7a      	ldrb	r2, [r7, #13]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	32ae      	adds	r2, #174	@ 0xae
 8008954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 8163 	beq.w	8008c26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008960:	7b7a      	ldrb	r2, [r7, #13]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	32ae      	adds	r2, #174	@ 0xae
 8008966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	4798      	blx	r3
 8008972:	4603      	mov	r3, r0
 8008974:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008976:	e156      	b.n	8008c26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	785b      	ldrb	r3, [r3, #1]
 800897c:	2b03      	cmp	r3, #3
 800897e:	d008      	beq.n	8008992 <USBD_StdEPReq+0x9a>
 8008980:	2b03      	cmp	r3, #3
 8008982:	f300 8145 	bgt.w	8008c10 <USBD_StdEPReq+0x318>
 8008986:	2b00      	cmp	r3, #0
 8008988:	f000 809b 	beq.w	8008ac2 <USBD_StdEPReq+0x1ca>
 800898c:	2b01      	cmp	r3, #1
 800898e:	d03c      	beq.n	8008a0a <USBD_StdEPReq+0x112>
 8008990:	e13e      	b.n	8008c10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b02      	cmp	r3, #2
 800899c:	d002      	beq.n	80089a4 <USBD_StdEPReq+0xac>
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d016      	beq.n	80089d0 <USBD_StdEPReq+0xd8>
 80089a2:	e02c      	b.n	80089fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089a4:	7bbb      	ldrb	r3, [r7, #14]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00d      	beq.n	80089c6 <USBD_StdEPReq+0xce>
 80089aa:	7bbb      	ldrb	r3, [r7, #14]
 80089ac:	2b80      	cmp	r3, #128	@ 0x80
 80089ae:	d00a      	beq.n	80089c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	4619      	mov	r1, r3
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f001 f9bf 	bl	8009d38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089ba:	2180      	movs	r1, #128	@ 0x80
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f001 f9bb 	bl	8009d38 <USBD_LL_StallEP>
 80089c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089c4:	e020      	b.n	8008a08 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fc7a 	bl	80092c2 <USBD_CtlError>
              break;
 80089ce:	e01b      	b.n	8008a08 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	885b      	ldrh	r3, [r3, #2]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10e      	bne.n	80089f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00b      	beq.n	80089f6 <USBD_StdEPReq+0xfe>
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	2b80      	cmp	r3, #128	@ 0x80
 80089e2:	d008      	beq.n	80089f6 <USBD_StdEPReq+0xfe>
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	88db      	ldrh	r3, [r3, #6]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d104      	bne.n	80089f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f001 f9a1 	bl	8009d38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fd3a 	bl	8009470 <USBD_CtlSendStatus>

              break;
 80089fc:	e004      	b.n	8008a08 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fc5e 	bl	80092c2 <USBD_CtlError>
              break;
 8008a06:	bf00      	nop
          }
          break;
 8008a08:	e107      	b.n	8008c1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d002      	beq.n	8008a1c <USBD_StdEPReq+0x124>
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	d016      	beq.n	8008a48 <USBD_StdEPReq+0x150>
 8008a1a:	e04b      	b.n	8008ab4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00d      	beq.n	8008a3e <USBD_StdEPReq+0x146>
 8008a22:	7bbb      	ldrb	r3, [r7, #14]
 8008a24:	2b80      	cmp	r3, #128	@ 0x80
 8008a26:	d00a      	beq.n	8008a3e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 f983 	bl	8009d38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a32:	2180      	movs	r1, #128	@ 0x80
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 f97f 	bl	8009d38 <USBD_LL_StallEP>
 8008a3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a3c:	e040      	b.n	8008ac0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fc3e 	bl	80092c2 <USBD_CtlError>
              break;
 8008a46:	e03b      	b.n	8008ac0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	885b      	ldrh	r3, [r3, #2]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d136      	bne.n	8008abe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a50:	7bbb      	ldrb	r3, [r7, #14]
 8008a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d004      	beq.n	8008a64 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f001 f989 	bl	8009d76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fd03 	bl	8009470 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff fde4 	bl	800863c <USBD_CoreFindEP>
 8008a74:	4603      	mov	r3, r0
 8008a76:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a78:	7b7b      	ldrb	r3, [r7, #13]
 8008a7a:	2bff      	cmp	r3, #255	@ 0xff
 8008a7c:	d01f      	beq.n	8008abe <USBD_StdEPReq+0x1c6>
 8008a7e:	7b7b      	ldrb	r3, [r7, #13]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d11c      	bne.n	8008abe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008a84:	7b7a      	ldrb	r2, [r7, #13]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008a8c:	7b7a      	ldrb	r2, [r7, #13]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	32ae      	adds	r2, #174	@ 0xae
 8008a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d010      	beq.n	8008abe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a9c:	7b7a      	ldrb	r2, [r7, #13]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	32ae      	adds	r2, #174	@ 0xae
 8008aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	4798      	blx	r3
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008ab2:	e004      	b.n	8008abe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fc03 	bl	80092c2 <USBD_CtlError>
              break;
 8008abc:	e000      	b.n	8008ac0 <USBD_StdEPReq+0x1c8>
              break;
 8008abe:	bf00      	nop
          }
          break;
 8008ac0:	e0ab      	b.n	8008c1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d002      	beq.n	8008ad4 <USBD_StdEPReq+0x1dc>
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d032      	beq.n	8008b38 <USBD_StdEPReq+0x240>
 8008ad2:	e097      	b.n	8008c04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d007      	beq.n	8008aea <USBD_StdEPReq+0x1f2>
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	2b80      	cmp	r3, #128	@ 0x80
 8008ade:	d004      	beq.n	8008aea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fbed 	bl	80092c2 <USBD_CtlError>
                break;
 8008ae8:	e091      	b.n	8008c0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	da0b      	bge.n	8008b0a <USBD_StdEPReq+0x212>
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008af8:	4613      	mov	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	3310      	adds	r3, #16
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	4413      	add	r3, r2
 8008b06:	3304      	adds	r3, #4
 8008b08:	e00b      	b.n	8008b22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b10:	4613      	mov	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	4413      	add	r3, r2
 8008b20:	3304      	adds	r3, #4
 8008b22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2200      	movs	r2, #0
 8008b28:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fc43 	bl	80093bc <USBD_CtlSendData>
              break;
 8008b36:	e06a      	b.n	8008c0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	da11      	bge.n	8008b64 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
 8008b42:	f003 020f 	and.w	r2, r3, #15
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	440b      	add	r3, r1
 8008b52:	3324      	adds	r3, #36	@ 0x24
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d117      	bne.n	8008b8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fbb0 	bl	80092c2 <USBD_CtlError>
                  break;
 8008b62:	e054      	b.n	8008c0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	f003 020f 	and.w	r2, r3, #15
 8008b6a:	6879      	ldr	r1, [r7, #4]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	440b      	add	r3, r1
 8008b76:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d104      	bne.n	8008b8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fb9d 	bl	80092c2 <USBD_CtlError>
                  break;
 8008b88:	e041      	b.n	8008c0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	da0b      	bge.n	8008baa <USBD_StdEPReq+0x2b2>
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
 8008b94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	3310      	adds	r3, #16
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	e00b      	b.n	8008bc2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
 8008bac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d002      	beq.n	8008bd0 <USBD_StdEPReq+0x2d8>
 8008bca:	7bbb      	ldrb	r3, [r7, #14]
 8008bcc:	2b80      	cmp	r3, #128	@ 0x80
 8008bce:	d103      	bne.n	8008bd8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]
 8008bd6:	e00e      	b.n	8008bf6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 f8e9 	bl	8009db4 <USBD_LL_IsStallEP>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2201      	movs	r2, #1
 8008bec:	601a      	str	r2, [r3, #0]
 8008bee:	e002      	b.n	8008bf6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2202      	movs	r2, #2
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fbdd 	bl	80093bc <USBD_CtlSendData>
              break;
 8008c02:	e004      	b.n	8008c0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fb5b 	bl	80092c2 <USBD_CtlError>
              break;
 8008c0c:	bf00      	nop
          }
          break;
 8008c0e:	e004      	b.n	8008c1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fb55 	bl	80092c2 <USBD_CtlError>
          break;
 8008c18:	bf00      	nop
      }
      break;
 8008c1a:	e005      	b.n	8008c28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fb4f 	bl	80092c2 <USBD_CtlError>
      break;
 8008c24:	e000      	b.n	8008c28 <USBD_StdEPReq+0x330>
      break;
 8008c26:	bf00      	nop
  }

  return ret;
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c42:	2300      	movs	r3, #0
 8008c44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	885b      	ldrh	r3, [r3, #2]
 8008c4e:	0a1b      	lsrs	r3, r3, #8
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	3b01      	subs	r3, #1
 8008c54:	2b06      	cmp	r3, #6
 8008c56:	f200 8128 	bhi.w	8008eaa <USBD_GetDescriptor+0x276>
 8008c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c60 <USBD_GetDescriptor+0x2c>)
 8008c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c60:	08008c7d 	.word	0x08008c7d
 8008c64:	08008c95 	.word	0x08008c95
 8008c68:	08008cd5 	.word	0x08008cd5
 8008c6c:	08008eab 	.word	0x08008eab
 8008c70:	08008eab 	.word	0x08008eab
 8008c74:	08008e4b 	.word	0x08008e4b
 8008c78:	08008e77 	.word	0x08008e77
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	7c12      	ldrb	r2, [r2, #16]
 8008c88:	f107 0108 	add.w	r1, r7, #8
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	4798      	blx	r3
 8008c90:	60f8      	str	r0, [r7, #12]
      break;
 8008c92:	e112      	b.n	8008eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	7c1b      	ldrb	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10d      	bne.n	8008cb8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca4:	f107 0208 	add.w	r2, r7, #8
 8008ca8:	4610      	mov	r0, r2
 8008caa:	4798      	blx	r3
 8008cac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008cb6:	e100      	b.n	8008eba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc0:	f107 0208 	add.w	r2, r7, #8
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	4798      	blx	r3
 8008cc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	2202      	movs	r2, #2
 8008cd0:	701a      	strb	r2, [r3, #0]
      break;
 8008cd2:	e0f2      	b.n	8008eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	885b      	ldrh	r3, [r3, #2]
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b05      	cmp	r3, #5
 8008cdc:	f200 80ac 	bhi.w	8008e38 <USBD_GetDescriptor+0x204>
 8008ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ce8 <USBD_GetDescriptor+0xb4>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008d01 	.word	0x08008d01
 8008cec:	08008d35 	.word	0x08008d35
 8008cf0:	08008d69 	.word	0x08008d69
 8008cf4:	08008d9d 	.word	0x08008d9d
 8008cf8:	08008dd1 	.word	0x08008dd1
 8008cfc:	08008e05 	.word	0x08008e05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00b      	beq.n	8008d24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	7c12      	ldrb	r2, [r2, #16]
 8008d18:	f107 0108 	add.w	r1, r7, #8
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4798      	blx	r3
 8008d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d22:	e091      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 facb 	bl	80092c2 <USBD_CtlError>
            err++;
 8008d2c:	7afb      	ldrb	r3, [r7, #11]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	72fb      	strb	r3, [r7, #11]
          break;
 8008d32:	e089      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00b      	beq.n	8008d58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	7c12      	ldrb	r2, [r2, #16]
 8008d4c:	f107 0108 	add.w	r1, r7, #8
 8008d50:	4610      	mov	r0, r2
 8008d52:	4798      	blx	r3
 8008d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d56:	e077      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fab1 	bl	80092c2 <USBD_CtlError>
            err++;
 8008d60:	7afb      	ldrb	r3, [r7, #11]
 8008d62:	3301      	adds	r3, #1
 8008d64:	72fb      	strb	r3, [r7, #11]
          break;
 8008d66:	e06f      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00b      	beq.n	8008d8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	7c12      	ldrb	r2, [r2, #16]
 8008d80:	f107 0108 	add.w	r1, r7, #8
 8008d84:	4610      	mov	r0, r2
 8008d86:	4798      	blx	r3
 8008d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d8a:	e05d      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fa97 	bl	80092c2 <USBD_CtlError>
            err++;
 8008d94:	7afb      	ldrb	r3, [r7, #11]
 8008d96:	3301      	adds	r3, #1
 8008d98:	72fb      	strb	r3, [r7, #11]
          break;
 8008d9a:	e055      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00b      	beq.n	8008dc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	7c12      	ldrb	r2, [r2, #16]
 8008db4:	f107 0108 	add.w	r1, r7, #8
 8008db8:	4610      	mov	r0, r2
 8008dba:	4798      	blx	r3
 8008dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dbe:	e043      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fa7d 	bl	80092c2 <USBD_CtlError>
            err++;
 8008dc8:	7afb      	ldrb	r3, [r7, #11]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8008dce:	e03b      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00b      	beq.n	8008df4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	7c12      	ldrb	r2, [r2, #16]
 8008de8:	f107 0108 	add.w	r1, r7, #8
 8008dec:	4610      	mov	r0, r2
 8008dee:	4798      	blx	r3
 8008df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008df2:	e029      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa63 	bl	80092c2 <USBD_CtlError>
            err++;
 8008dfc:	7afb      	ldrb	r3, [r7, #11]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	72fb      	strb	r3, [r7, #11]
          break;
 8008e02:	e021      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00b      	beq.n	8008e28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	7c12      	ldrb	r2, [r2, #16]
 8008e1c:	f107 0108 	add.w	r1, r7, #8
 8008e20:	4610      	mov	r0, r2
 8008e22:	4798      	blx	r3
 8008e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e26:	e00f      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fa49 	bl	80092c2 <USBD_CtlError>
            err++;
 8008e30:	7afb      	ldrb	r3, [r7, #11]
 8008e32:	3301      	adds	r3, #1
 8008e34:	72fb      	strb	r3, [r7, #11]
          break;
 8008e36:	e007      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fa41 	bl	80092c2 <USBD_CtlError>
          err++;
 8008e40:	7afb      	ldrb	r3, [r7, #11]
 8008e42:	3301      	adds	r3, #1
 8008e44:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008e46:	bf00      	nop
      }
      break;
 8008e48:	e037      	b.n	8008eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	7c1b      	ldrb	r3, [r3, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d109      	bne.n	8008e66 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e5a:	f107 0208 	add.w	r2, r7, #8
 8008e5e:	4610      	mov	r0, r2
 8008e60:	4798      	blx	r3
 8008e62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e64:	e029      	b.n	8008eba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fa2a 	bl	80092c2 <USBD_CtlError>
        err++;
 8008e6e:	7afb      	ldrb	r3, [r7, #11]
 8008e70:	3301      	adds	r3, #1
 8008e72:	72fb      	strb	r3, [r7, #11]
      break;
 8008e74:	e021      	b.n	8008eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	7c1b      	ldrb	r3, [r3, #16]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10d      	bne.n	8008e9a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e86:	f107 0208 	add.w	r2, r7, #8
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4798      	blx	r3
 8008e8e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3301      	adds	r3, #1
 8008e94:	2207      	movs	r2, #7
 8008e96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e98:	e00f      	b.n	8008eba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fa10 	bl	80092c2 <USBD_CtlError>
        err++;
 8008ea2:	7afb      	ldrb	r3, [r7, #11]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ea8:	e007      	b.n	8008eba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fa08 	bl	80092c2 <USBD_CtlError>
      err++;
 8008eb2:	7afb      	ldrb	r3, [r7, #11]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	72fb      	strb	r3, [r7, #11]
      break;
 8008eb8:	bf00      	nop
  }

  if (err != 0U)
 8008eba:	7afb      	ldrb	r3, [r7, #11]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d11e      	bne.n	8008efe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	88db      	ldrh	r3, [r3, #6]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d016      	beq.n	8008ef6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008ec8:	893b      	ldrh	r3, [r7, #8]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00e      	beq.n	8008eec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	88da      	ldrh	r2, [r3, #6]
 8008ed2:	893b      	ldrh	r3, [r7, #8]
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	bf28      	it	cs
 8008ed8:	4613      	movcs	r3, r2
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ede:	893b      	ldrh	r3, [r7, #8]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	68f9      	ldr	r1, [r7, #12]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fa69 	bl	80093bc <USBD_CtlSendData>
 8008eea:	e009      	b.n	8008f00 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f9e7 	bl	80092c2 <USBD_CtlError>
 8008ef4:	e004      	b.n	8008f00 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 faba 	bl	8009470 <USBD_CtlSendStatus>
 8008efc:	e000      	b.n	8008f00 <USBD_GetDescriptor+0x2cc>
    return;
 8008efe:	bf00      	nop
  }
}
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop

08008f08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	889b      	ldrh	r3, [r3, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d131      	bne.n	8008f7e <USBD_SetAddress+0x76>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	88db      	ldrh	r3, [r3, #6]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d12d      	bne.n	8008f7e <USBD_SetAddress+0x76>
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	885b      	ldrh	r3, [r3, #2]
 8008f26:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f28:	d829      	bhi.n	8008f7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	885b      	ldrh	r3, [r3, #2]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d104      	bne.n	8008f4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f9bc 	bl	80092c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4a:	e01d      	b.n	8008f88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	7bfa      	ldrb	r2, [r7, #15]
 8008f50:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 ff57 	bl	8009e0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fa86 	bl	8009470 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d004      	beq.n	8008f74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f72:	e009      	b.n	8008f88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f7c:	e004      	b.n	8008f88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f99e 	bl	80092c2 <USBD_CtlError>
  }
}
 8008f86:	bf00      	nop
 8008f88:	bf00      	nop
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	885b      	ldrh	r3, [r3, #2]
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	4b4e      	ldr	r3, [pc, #312]	@ (80090e0 <USBD_SetConfig+0x150>)
 8008fa6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80090e0 <USBD_SetConfig+0x150>)
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d905      	bls.n	8008fbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f985 	bl	80092c2 <USBD_CtlError>
    return USBD_FAIL;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e08c      	b.n	80090d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d002      	beq.n	8008fce <USBD_SetConfig+0x3e>
 8008fc8:	2b03      	cmp	r3, #3
 8008fca:	d029      	beq.n	8009020 <USBD_SetConfig+0x90>
 8008fcc:	e075      	b.n	80090ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008fce:	4b44      	ldr	r3, [pc, #272]	@ (80090e0 <USBD_SetConfig+0x150>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d020      	beq.n	8009018 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008fd6:	4b42      	ldr	r3, [pc, #264]	@ (80090e0 <USBD_SetConfig+0x150>)
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80090e0 <USBD_SetConfig+0x150>)
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7fe ffe3 	bl	8007fb2 <USBD_SetClassConfig>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d008      	beq.n	8009008 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008ff6:	6839      	ldr	r1, [r7, #0]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f962 	bl	80092c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2202      	movs	r2, #2
 8009002:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009006:	e065      	b.n	80090d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fa31 	bl	8009470 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2203      	movs	r2, #3
 8009012:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009016:	e05d      	b.n	80090d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fa29 	bl	8009470 <USBD_CtlSendStatus>
      break;
 800901e:	e059      	b.n	80090d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009020:	4b2f      	ldr	r3, [pc, #188]	@ (80090e0 <USBD_SetConfig+0x150>)
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d112      	bne.n	800904e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009030:	4b2b      	ldr	r3, [pc, #172]	@ (80090e0 <USBD_SetConfig+0x150>)
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	461a      	mov	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800903a:	4b29      	ldr	r3, [pc, #164]	@ (80090e0 <USBD_SetConfig+0x150>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7fe ffd2 	bl	8007fea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fa12 	bl	8009470 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800904c:	e042      	b.n	80090d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800904e:	4b24      	ldr	r3, [pc, #144]	@ (80090e0 <USBD_SetConfig+0x150>)
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	429a      	cmp	r2, r3
 800905a:	d02a      	beq.n	80090b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	b2db      	uxtb	r3, r3
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7fe ffc0 	bl	8007fea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800906a:	4b1d      	ldr	r3, [pc, #116]	@ (80090e0 <USBD_SetConfig+0x150>)
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	461a      	mov	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009074:	4b1a      	ldr	r3, [pc, #104]	@ (80090e0 <USBD_SetConfig+0x150>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7fe ff99 	bl	8007fb2 <USBD_SetClassConfig>
 8009080:	4603      	mov	r3, r0
 8009082:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00f      	beq.n	80090aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f918 	bl	80092c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	b2db      	uxtb	r3, r3
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7fe ffa5 	bl	8007fea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2202      	movs	r2, #2
 80090a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80090a8:	e014      	b.n	80090d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f9e0 	bl	8009470 <USBD_CtlSendStatus>
      break;
 80090b0:	e010      	b.n	80090d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f9dc 	bl	8009470 <USBD_CtlSendStatus>
      break;
 80090b8:	e00c      	b.n	80090d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f900 	bl	80092c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090c2:	4b07      	ldr	r3, [pc, #28]	@ (80090e0 <USBD_SetConfig+0x150>)
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7fe ff8e 	bl	8007fea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80090ce:	2303      	movs	r3, #3
 80090d0:	73fb      	strb	r3, [r7, #15]
      break;
 80090d2:	bf00      	nop
  }

  return ret;
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	20000474 	.word	0x20000474

080090e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	88db      	ldrh	r3, [r3, #6]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d004      	beq.n	8009100 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f8e2 	bl	80092c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80090fe:	e023      	b.n	8009148 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b02      	cmp	r3, #2
 800910a:	dc02      	bgt.n	8009112 <USBD_GetConfig+0x2e>
 800910c:	2b00      	cmp	r3, #0
 800910e:	dc03      	bgt.n	8009118 <USBD_GetConfig+0x34>
 8009110:	e015      	b.n	800913e <USBD_GetConfig+0x5a>
 8009112:	2b03      	cmp	r3, #3
 8009114:	d00b      	beq.n	800912e <USBD_GetConfig+0x4a>
 8009116:	e012      	b.n	800913e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	3308      	adds	r3, #8
 8009122:	2201      	movs	r2, #1
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f948 	bl	80093bc <USBD_CtlSendData>
        break;
 800912c:	e00c      	b.n	8009148 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	3304      	adds	r3, #4
 8009132:	2201      	movs	r2, #1
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f940 	bl	80093bc <USBD_CtlSendData>
        break;
 800913c:	e004      	b.n	8009148 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f8be 	bl	80092c2 <USBD_CtlError>
        break;
 8009146:	bf00      	nop
}
 8009148:	bf00      	nop
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009160:	b2db      	uxtb	r3, r3
 8009162:	3b01      	subs	r3, #1
 8009164:	2b02      	cmp	r3, #2
 8009166:	d81e      	bhi.n	80091a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	88db      	ldrh	r3, [r3, #6]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d004      	beq.n	800917a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f8a5 	bl	80092c2 <USBD_CtlError>
        break;
 8009178:	e01a      	b.n	80091b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009186:	2b00      	cmp	r3, #0
 8009188:	d005      	beq.n	8009196 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	f043 0202 	orr.w	r2, r3, #2
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	330c      	adds	r3, #12
 800919a:	2202      	movs	r2, #2
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f90c 	bl	80093bc <USBD_CtlSendData>
      break;
 80091a4:	e004      	b.n	80091b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f88a 	bl	80092c2 <USBD_CtlError>
      break;
 80091ae:	bf00      	nop
  }
}
 80091b0:	bf00      	nop
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	885b      	ldrh	r3, [r3, #2]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d107      	bne.n	80091da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f94c 	bl	8009470 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80091d8:	e013      	b.n	8009202 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	885b      	ldrh	r3, [r3, #2]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d10b      	bne.n	80091fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	889b      	ldrh	r3, [r3, #4]
 80091e6:	0a1b      	lsrs	r3, r3, #8
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f93c 	bl	8009470 <USBD_CtlSendStatus>
}
 80091f8:	e003      	b.n	8009202 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f860 	bl	80092c2 <USBD_CtlError>
}
 8009202:	bf00      	nop
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b082      	sub	sp, #8
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800921a:	b2db      	uxtb	r3, r3
 800921c:	3b01      	subs	r3, #1
 800921e:	2b02      	cmp	r3, #2
 8009220:	d80b      	bhi.n	800923a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	885b      	ldrh	r3, [r3, #2]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d10c      	bne.n	8009244 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f91c 	bl	8009470 <USBD_CtlSendStatus>
      }
      break;
 8009238:	e004      	b.n	8009244 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800923a:	6839      	ldr	r1, [r7, #0]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f840 	bl	80092c2 <USBD_CtlError>
      break;
 8009242:	e000      	b.n	8009246 <USBD_ClrFeature+0x3c>
      break;
 8009244:	bf00      	nop
  }
}
 8009246:	bf00      	nop
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b084      	sub	sp, #16
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	781a      	ldrb	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	3301      	adds	r3, #1
 8009268:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	781a      	ldrb	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	3301      	adds	r3, #1
 8009276:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f7ff fa40 	bl	80086fe <SWAPBYTE>
 800927e:	4603      	mov	r3, r0
 8009280:	461a      	mov	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	3301      	adds	r3, #1
 800928a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	3301      	adds	r3, #1
 8009290:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f7ff fa33 	bl	80086fe <SWAPBYTE>
 8009298:	4603      	mov	r3, r0
 800929a:	461a      	mov	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	3301      	adds	r3, #1
 80092a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	3301      	adds	r3, #1
 80092aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f7ff fa26 	bl	80086fe <SWAPBYTE>
 80092b2:	4603      	mov	r3, r0
 80092b4:	461a      	mov	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	80da      	strh	r2, [r3, #6]
}
 80092ba:	bf00      	nop
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80092cc:	2180      	movs	r1, #128	@ 0x80
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fd32 	bl	8009d38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80092d4:	2100      	movs	r1, #0
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fd2e 	bl	8009d38 <USBD_LL_StallEP>
}
 80092dc:	bf00      	nop
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092f0:	2300      	movs	r3, #0
 80092f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d042      	beq.n	8009380 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80092fe:	6938      	ldr	r0, [r7, #16]
 8009300:	f000 f842 	bl	8009388 <USBD_GetLen>
 8009304:	4603      	mov	r3, r0
 8009306:	3301      	adds	r3, #1
 8009308:	005b      	lsls	r3, r3, #1
 800930a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800930e:	d808      	bhi.n	8009322 <USBD_GetString+0x3e>
 8009310:	6938      	ldr	r0, [r7, #16]
 8009312:	f000 f839 	bl	8009388 <USBD_GetLen>
 8009316:	4603      	mov	r3, r0
 8009318:	3301      	adds	r3, #1
 800931a:	b29b      	uxth	r3, r3
 800931c:	005b      	lsls	r3, r3, #1
 800931e:	b29a      	uxth	r2, r3
 8009320:	e001      	b.n	8009326 <USBD_GetString+0x42>
 8009322:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800932a:	7dfb      	ldrb	r3, [r7, #23]
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	4413      	add	r3, r2
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	7812      	ldrb	r2, [r2, #0]
 8009334:	701a      	strb	r2, [r3, #0]
  idx++;
 8009336:	7dfb      	ldrb	r3, [r7, #23]
 8009338:	3301      	adds	r3, #1
 800933a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800933c:	7dfb      	ldrb	r3, [r7, #23]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	4413      	add	r3, r2
 8009342:	2203      	movs	r2, #3
 8009344:	701a      	strb	r2, [r3, #0]
  idx++;
 8009346:	7dfb      	ldrb	r3, [r7, #23]
 8009348:	3301      	adds	r3, #1
 800934a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800934c:	e013      	b.n	8009376 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800934e:	7dfb      	ldrb	r3, [r7, #23]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	4413      	add	r3, r2
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	7812      	ldrb	r2, [r2, #0]
 8009358:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	3301      	adds	r3, #1
 800935e:	613b      	str	r3, [r7, #16]
    idx++;
 8009360:	7dfb      	ldrb	r3, [r7, #23]
 8009362:	3301      	adds	r3, #1
 8009364:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009366:	7dfb      	ldrb	r3, [r7, #23]
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	4413      	add	r3, r2
 800936c:	2200      	movs	r2, #0
 800936e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009370:	7dfb      	ldrb	r3, [r7, #23]
 8009372:	3301      	adds	r3, #1
 8009374:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1e7      	bne.n	800934e <USBD_GetString+0x6a>
 800937e:	e000      	b.n	8009382 <USBD_GetString+0x9e>
    return;
 8009380:	bf00      	nop
  }
}
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009398:	e005      	b.n	80093a6 <USBD_GetLen+0x1e>
  {
    len++;
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	3301      	adds	r3, #1
 800939e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	3301      	adds	r3, #1
 80093a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1f5      	bne.n	800939a <USBD_GetLen+0x12>
  }

  return len;
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2202      	movs	r2, #2
 80093cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	2100      	movs	r1, #0
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 fd31 	bl	8009e4a <USBD_LL_Transmit>

  return USBD_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b084      	sub	sp, #16
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	2100      	movs	r1, #0
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 fd20 	bl	8009e4a <USBD_LL_Transmit>

  return USBD_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2203      	movs	r2, #3
 8009424:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	2100      	movs	r1, #0
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 fd24 	bl	8009e8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b084      	sub	sp, #16
 8009452:	af00      	add	r7, sp, #0
 8009454:	60f8      	str	r0, [r7, #12]
 8009456:	60b9      	str	r1, [r7, #8]
 8009458:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	2100      	movs	r1, #0
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f000 fd13 	bl	8009e8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2204      	movs	r2, #4
 800947c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009480:	2300      	movs	r3, #0
 8009482:	2200      	movs	r2, #0
 8009484:	2100      	movs	r1, #0
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fcdf 	bl	8009e4a <USBD_LL_Transmit>

  return USBD_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b082      	sub	sp, #8
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2205      	movs	r2, #5
 80094a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094a6:	2300      	movs	r3, #0
 80094a8:	2200      	movs	r2, #0
 80094aa:	2100      	movs	r1, #0
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fced 	bl	8009e8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80094c0:	2200      	movs	r2, #0
 80094c2:	4912      	ldr	r1, [pc, #72]	@ (800950c <MX_USB_DEVICE_Init+0x50>)
 80094c4:	4812      	ldr	r0, [pc, #72]	@ (8009510 <MX_USB_DEVICE_Init+0x54>)
 80094c6:	f7fe fcf7 	bl	8007eb8 <USBD_Init>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80094d0:	f7f8 f83a 	bl	8001548 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80094d4:	490f      	ldr	r1, [pc, #60]	@ (8009514 <MX_USB_DEVICE_Init+0x58>)
 80094d6:	480e      	ldr	r0, [pc, #56]	@ (8009510 <MX_USB_DEVICE_Init+0x54>)
 80094d8:	f7fe fd1e 	bl	8007f18 <USBD_RegisterClass>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d001      	beq.n	80094e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80094e2:	f7f8 f831 	bl	8001548 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80094e6:	490c      	ldr	r1, [pc, #48]	@ (8009518 <MX_USB_DEVICE_Init+0x5c>)
 80094e8:	4809      	ldr	r0, [pc, #36]	@ (8009510 <MX_USB_DEVICE_Init+0x54>)
 80094ea:	f7fe fc15 	bl	8007d18 <USBD_CDC_RegisterInterface>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80094f4:	f7f8 f828 	bl	8001548 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80094f8:	4805      	ldr	r0, [pc, #20]	@ (8009510 <MX_USB_DEVICE_Init+0x54>)
 80094fa:	f7fe fd43 	bl	8007f84 <USBD_Start>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d001      	beq.n	8009508 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009504:	f7f8 f820 	bl	8001548 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009508:	bf00      	nop
 800950a:	bd80      	pop	{r7, pc}
 800950c:	200000b4 	.word	0x200000b4
 8009510:	20000478 	.word	0x20000478
 8009514:	20000018 	.word	0x20000018
 8009518:	200000a0 	.word	0x200000a0

0800951c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009520:	2200      	movs	r2, #0
 8009522:	4905      	ldr	r1, [pc, #20]	@ (8009538 <CDC_Init_FS+0x1c>)
 8009524:	4805      	ldr	r0, [pc, #20]	@ (800953c <CDC_Init_FS+0x20>)
 8009526:	f7fe fc11 	bl	8007d4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800952a:	4905      	ldr	r1, [pc, #20]	@ (8009540 <CDC_Init_FS+0x24>)
 800952c:	4803      	ldr	r0, [pc, #12]	@ (800953c <CDC_Init_FS+0x20>)
 800952e:	f7fe fc2f 	bl	8007d90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009532:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009534:	4618      	mov	r0, r3
 8009536:	bd80      	pop	{r7, pc}
 8009538:	20000f54 	.word	0x20000f54
 800953c:	20000478 	.word	0x20000478
 8009540:	20000754 	.word	0x20000754

08009544 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009544:	b480      	push	{r7}
 8009546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009548:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800954a:	4618      	mov	r0, r3
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	6039      	str	r1, [r7, #0]
 800955e:	71fb      	strb	r3, [r7, #7]
 8009560:	4613      	mov	r3, r2
 8009562:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009564:	79fb      	ldrb	r3, [r7, #7]
 8009566:	2b23      	cmp	r3, #35	@ 0x23
 8009568:	f200 8098 	bhi.w	800969c <CDC_Control_FS+0x148>
 800956c:	a201      	add	r2, pc, #4	@ (adr r2, 8009574 <CDC_Control_FS+0x20>)
 800956e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009572:	bf00      	nop
 8009574:	0800969d 	.word	0x0800969d
 8009578:	0800969d 	.word	0x0800969d
 800957c:	0800969d 	.word	0x0800969d
 8009580:	0800969d 	.word	0x0800969d
 8009584:	0800969d 	.word	0x0800969d
 8009588:	0800969d 	.word	0x0800969d
 800958c:	0800969d 	.word	0x0800969d
 8009590:	0800969d 	.word	0x0800969d
 8009594:	0800969d 	.word	0x0800969d
 8009598:	0800969d 	.word	0x0800969d
 800959c:	0800969d 	.word	0x0800969d
 80095a0:	0800969d 	.word	0x0800969d
 80095a4:	0800969d 	.word	0x0800969d
 80095a8:	0800969d 	.word	0x0800969d
 80095ac:	0800969d 	.word	0x0800969d
 80095b0:	0800969d 	.word	0x0800969d
 80095b4:	0800969d 	.word	0x0800969d
 80095b8:	0800969d 	.word	0x0800969d
 80095bc:	0800969d 	.word	0x0800969d
 80095c0:	0800969d 	.word	0x0800969d
 80095c4:	0800969d 	.word	0x0800969d
 80095c8:	0800969d 	.word	0x0800969d
 80095cc:	0800969d 	.word	0x0800969d
 80095d0:	0800969d 	.word	0x0800969d
 80095d4:	0800969d 	.word	0x0800969d
 80095d8:	0800969d 	.word	0x0800969d
 80095dc:	0800969d 	.word	0x0800969d
 80095e0:	0800969d 	.word	0x0800969d
 80095e4:	0800969d 	.word	0x0800969d
 80095e8:	0800969d 	.word	0x0800969d
 80095ec:	0800969d 	.word	0x0800969d
 80095f0:	0800969d 	.word	0x0800969d
 80095f4:	08009605 	.word	0x08009605
 80095f8:	08009649 	.word	0x08009649
 80095fc:	0800969d 	.word	0x0800969d
 8009600:	0800969d 	.word	0x0800969d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	461a      	mov	r2, r3
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	3301      	adds	r3, #1
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	021b      	lsls	r3, r3, #8
 8009612:	431a      	orrs	r2, r3
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	3302      	adds	r3, #2
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	041b      	lsls	r3, r3, #16
 800961c:	431a      	orrs	r2, r3
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	3303      	adds	r3, #3
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	061b      	lsls	r3, r3, #24
 8009626:	4313      	orrs	r3, r2
 8009628:	461a      	mov	r2, r3
 800962a:	4b20      	ldr	r3, [pc, #128]	@ (80096ac <CDC_Control_FS+0x158>)
 800962c:	601a      	str	r2, [r3, #0]
      LineCoding.format = pbuf[4];
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	791a      	ldrb	r2, [r3, #4]
 8009632:	4b1e      	ldr	r3, [pc, #120]	@ (80096ac <CDC_Control_FS+0x158>)
 8009634:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	795a      	ldrb	r2, [r3, #5]
 800963a:	4b1c      	ldr	r3, [pc, #112]	@ (80096ac <CDC_Control_FS+0x158>)
 800963c:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype = pbuf[6];
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	799a      	ldrb	r2, [r3, #6]
 8009642:	4b1a      	ldr	r3, [pc, #104]	@ (80096ac <CDC_Control_FS+0x158>)
 8009644:	719a      	strb	r2, [r3, #6]
      break;
 8009646:	e02a      	b.n	800969e <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t) (LineCoding.bitrate);
 8009648:	4b18      	ldr	r3, [pc, #96]	@ (80096ac <CDC_Control_FS+0x158>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	b2da      	uxtb	r2, r3
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 8009652:	4b16      	ldr	r3, [pc, #88]	@ (80096ac <CDC_Control_FS+0x158>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	0a1a      	lsrs	r2, r3, #8
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	3301      	adds	r3, #1
 800965c:	b2d2      	uxtb	r2, r2
 800965e:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 8009660:	4b12      	ldr	r3, [pc, #72]	@ (80096ac <CDC_Control_FS+0x158>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	0c1a      	lsrs	r2, r3, #16
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	3302      	adds	r3, #2
 800966a:	b2d2      	uxtb	r2, r2
 800966c:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 800966e:	4b0f      	ldr	r3, [pc, #60]	@ (80096ac <CDC_Control_FS+0x158>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	0e1a      	lsrs	r2, r3, #24
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	3303      	adds	r3, #3
 8009678:	b2d2      	uxtb	r2, r2
 800967a:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	3304      	adds	r3, #4
 8009680:	4a0a      	ldr	r2, [pc, #40]	@ (80096ac <CDC_Control_FS+0x158>)
 8009682:	7912      	ldrb	r2, [r2, #4]
 8009684:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	3305      	adds	r3, #5
 800968a:	4a08      	ldr	r2, [pc, #32]	@ (80096ac <CDC_Control_FS+0x158>)
 800968c:	7952      	ldrb	r2, [r2, #5]
 800968e:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	3306      	adds	r3, #6
 8009694:	4a05      	ldr	r2, [pc, #20]	@ (80096ac <CDC_Control_FS+0x158>)
 8009696:	7992      	ldrb	r2, [r2, #6]
 8009698:	701a      	strb	r2, [r3, #0]
      break;
 800969a:	e000      	b.n	800969e <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800969c:	bf00      	nop
  }

  return (USBD_OK);
 800969e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	20000098 	.word	0x20000098

080096b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80096ba:	6879      	ldr	r1, [r7, #4]
 80096bc:	4805      	ldr	r0, [pc, #20]	@ (80096d4 <CDC_Receive_FS+0x24>)
 80096be:	f7fe fb67 	bl	8007d90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096c2:	4804      	ldr	r0, [pc, #16]	@ (80096d4 <CDC_Receive_FS+0x24>)
 80096c4:	f7fe fbc2 	bl	8007e4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80096c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	20000478 	.word	0x20000478

080096d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	460b      	mov	r3, r1
 80096e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80096e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009720 <CDC_Transmit_FS+0x48>)
 80096ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e00b      	b.n	8009716 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80096fe:	887b      	ldrh	r3, [r7, #2]
 8009700:	461a      	mov	r2, r3
 8009702:	6879      	ldr	r1, [r7, #4]
 8009704:	4806      	ldr	r0, [pc, #24]	@ (8009720 <CDC_Transmit_FS+0x48>)
 8009706:	f7fe fb21 	bl	8007d4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800970a:	4805      	ldr	r0, [pc, #20]	@ (8009720 <CDC_Transmit_FS+0x48>)
 800970c:	f7fe fb5e 	bl	8007dcc <USBD_CDC_TransmitPacket>
 8009710:	4603      	mov	r3, r0
 8009712:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009714:	7bfb      	ldrb	r3, [r7, #15]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	20000478 	.word	0x20000478

08009724 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009724:	b480      	push	{r7}
 8009726:	b087      	sub	sp, #28
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	4613      	mov	r3, r2
 8009730:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009736:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800973a:	4618      	mov	r0, r3
 800973c:	371c      	adds	r7, #28
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
	...

08009748 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	4603      	mov	r3, r0
 8009750:	6039      	str	r1, [r7, #0]
 8009752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	2212      	movs	r2, #18
 8009758:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800975a:	4b03      	ldr	r3, [pc, #12]	@ (8009768 <USBD_FS_DeviceDescriptor+0x20>)
}
 800975c:	4618      	mov	r0, r3
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	200000d0 	.word	0x200000d0

0800976c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	4603      	mov	r3, r0
 8009774:	6039      	str	r1, [r7, #0]
 8009776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	2204      	movs	r2, #4
 800977c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800977e:	4b03      	ldr	r3, [pc, #12]	@ (800978c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009780:	4618      	mov	r0, r3
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	200000e4 	.word	0x200000e4

08009790 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	4603      	mov	r3, r0
 8009798:	6039      	str	r1, [r7, #0]
 800979a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d105      	bne.n	80097ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	4907      	ldr	r1, [pc, #28]	@ (80097c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80097a6:	4808      	ldr	r0, [pc, #32]	@ (80097c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80097a8:	f7ff fd9c 	bl	80092e4 <USBD_GetString>
 80097ac:	e004      	b.n	80097b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	4904      	ldr	r1, [pc, #16]	@ (80097c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80097b2:	4805      	ldr	r0, [pc, #20]	@ (80097c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80097b4:	f7ff fd96 	bl	80092e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097b8:	4b02      	ldr	r3, [pc, #8]	@ (80097c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	20001754 	.word	0x20001754
 80097c8:	0800cc9c 	.word	0x0800cc9c

080097cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	6039      	str	r1, [r7, #0]
 80097d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097d8:	683a      	ldr	r2, [r7, #0]
 80097da:	4904      	ldr	r1, [pc, #16]	@ (80097ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097dc:	4804      	ldr	r0, [pc, #16]	@ (80097f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097de:	f7ff fd81 	bl	80092e4 <USBD_GetString>
  return USBD_StrDesc;
 80097e2:	4b02      	ldr	r3, [pc, #8]	@ (80097ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	20001754 	.word	0x20001754
 80097f0:	0800ccb4 	.word	0x0800ccb4

080097f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	6039      	str	r1, [r7, #0]
 80097fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	221a      	movs	r2, #26
 8009804:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009806:	f000 f843 	bl	8009890 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800980a:	4b02      	ldr	r3, [pc, #8]	@ (8009814 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800980c:	4618      	mov	r0, r3
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	200000e8 	.word	0x200000e8

08009818 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	4603      	mov	r3, r0
 8009820:	6039      	str	r1, [r7, #0]
 8009822:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d105      	bne.n	8009836 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	4907      	ldr	r1, [pc, #28]	@ (800984c <USBD_FS_ConfigStrDescriptor+0x34>)
 800982e:	4808      	ldr	r0, [pc, #32]	@ (8009850 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009830:	f7ff fd58 	bl	80092e4 <USBD_GetString>
 8009834:	e004      	b.n	8009840 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	4904      	ldr	r1, [pc, #16]	@ (800984c <USBD_FS_ConfigStrDescriptor+0x34>)
 800983a:	4805      	ldr	r0, [pc, #20]	@ (8009850 <USBD_FS_ConfigStrDescriptor+0x38>)
 800983c:	f7ff fd52 	bl	80092e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009840:	4b02      	ldr	r3, [pc, #8]	@ (800984c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009842:	4618      	mov	r0, r3
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	20001754 	.word	0x20001754
 8009850:	0800ccc8 	.word	0x0800ccc8

08009854 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	4603      	mov	r3, r0
 800985c:	6039      	str	r1, [r7, #0]
 800985e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009860:	79fb      	ldrb	r3, [r7, #7]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d105      	bne.n	8009872 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	4907      	ldr	r1, [pc, #28]	@ (8009888 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800986a:	4808      	ldr	r0, [pc, #32]	@ (800988c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800986c:	f7ff fd3a 	bl	80092e4 <USBD_GetString>
 8009870:	e004      	b.n	800987c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	4904      	ldr	r1, [pc, #16]	@ (8009888 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009876:	4805      	ldr	r0, [pc, #20]	@ (800988c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009878:	f7ff fd34 	bl	80092e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800987c:	4b02      	ldr	r3, [pc, #8]	@ (8009888 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20001754 	.word	0x20001754
 800988c:	0800ccd4 	.word	0x0800ccd4

08009890 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009896:	4b0f      	ldr	r3, [pc, #60]	@ (80098d4 <Get_SerialNum+0x44>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800989c:	4b0e      	ldr	r3, [pc, #56]	@ (80098d8 <Get_SerialNum+0x48>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80098a2:	4b0e      	ldr	r3, [pc, #56]	@ (80098dc <Get_SerialNum+0x4c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4413      	add	r3, r2
 80098ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d009      	beq.n	80098ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098b6:	2208      	movs	r2, #8
 80098b8:	4909      	ldr	r1, [pc, #36]	@ (80098e0 <Get_SerialNum+0x50>)
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 f814 	bl	80098e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098c0:	2204      	movs	r2, #4
 80098c2:	4908      	ldr	r1, [pc, #32]	@ (80098e4 <Get_SerialNum+0x54>)
 80098c4:	68b8      	ldr	r0, [r7, #8]
 80098c6:	f000 f80f 	bl	80098e8 <IntToUnicode>
  }
}
 80098ca:	bf00      	nop
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	1fff7a10 	.word	0x1fff7a10
 80098d8:	1fff7a14 	.word	0x1fff7a14
 80098dc:	1fff7a18 	.word	0x1fff7a18
 80098e0:	200000ea 	.word	0x200000ea
 80098e4:	200000fa 	.word	0x200000fa

080098e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	4613      	mov	r3, r2
 80098f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098fa:	2300      	movs	r3, #0
 80098fc:	75fb      	strb	r3, [r7, #23]
 80098fe:	e027      	b.n	8009950 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	0f1b      	lsrs	r3, r3, #28
 8009904:	2b09      	cmp	r3, #9
 8009906:	d80b      	bhi.n	8009920 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	0f1b      	lsrs	r3, r3, #28
 800990c:	b2da      	uxtb	r2, r3
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	005b      	lsls	r3, r3, #1
 8009912:	4619      	mov	r1, r3
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	440b      	add	r3, r1
 8009918:	3230      	adds	r2, #48	@ 0x30
 800991a:	b2d2      	uxtb	r2, r2
 800991c:	701a      	strb	r2, [r3, #0]
 800991e:	e00a      	b.n	8009936 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	0f1b      	lsrs	r3, r3, #28
 8009924:	b2da      	uxtb	r2, r3
 8009926:	7dfb      	ldrb	r3, [r7, #23]
 8009928:	005b      	lsls	r3, r3, #1
 800992a:	4619      	mov	r1, r3
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	440b      	add	r3, r1
 8009930:	3237      	adds	r2, #55	@ 0x37
 8009932:	b2d2      	uxtb	r2, r2
 8009934:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	011b      	lsls	r3, r3, #4
 800993a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800993c:	7dfb      	ldrb	r3, [r7, #23]
 800993e:	005b      	lsls	r3, r3, #1
 8009940:	3301      	adds	r3, #1
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	4413      	add	r3, r2
 8009946:	2200      	movs	r2, #0
 8009948:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800994a:	7dfb      	ldrb	r3, [r7, #23]
 800994c:	3301      	adds	r3, #1
 800994e:	75fb      	strb	r3, [r7, #23]
 8009950:	7dfa      	ldrb	r2, [r7, #23]
 8009952:	79fb      	ldrb	r3, [r7, #7]
 8009954:	429a      	cmp	r2, r3
 8009956:	d3d3      	bcc.n	8009900 <IntToUnicode+0x18>
  }
}
 8009958:	bf00      	nop
 800995a:	bf00      	nop
 800995c:	371c      	adds	r7, #28
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
	...

08009968 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b08a      	sub	sp, #40	@ 0x28
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009970:	f107 0314 	add.w	r3, r7, #20
 8009974:	2200      	movs	r2, #0
 8009976:	601a      	str	r2, [r3, #0]
 8009978:	605a      	str	r2, [r3, #4]
 800997a:	609a      	str	r2, [r3, #8]
 800997c:	60da      	str	r2, [r3, #12]
 800997e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009988:	d13a      	bne.n	8009a00 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800998a:	2300      	movs	r3, #0
 800998c:	613b      	str	r3, [r7, #16]
 800998e:	4b1e      	ldr	r3, [pc, #120]	@ (8009a08 <HAL_PCD_MspInit+0xa0>)
 8009990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009992:	4a1d      	ldr	r2, [pc, #116]	@ (8009a08 <HAL_PCD_MspInit+0xa0>)
 8009994:	f043 0301 	orr.w	r3, r3, #1
 8009998:	6313      	str	r3, [r2, #48]	@ 0x30
 800999a:	4b1b      	ldr	r3, [pc, #108]	@ (8009a08 <HAL_PCD_MspInit+0xa0>)
 800999c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800999e:	f003 0301 	and.w	r3, r3, #1
 80099a2:	613b      	str	r3, [r7, #16]
 80099a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80099a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80099aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099ac:	2302      	movs	r3, #2
 80099ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099b0:	2300      	movs	r3, #0
 80099b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099b4:	2303      	movs	r3, #3
 80099b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80099b8:	230a      	movs	r3, #10
 80099ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099bc:	f107 0314 	add.w	r3, r7, #20
 80099c0:	4619      	mov	r1, r3
 80099c2:	4812      	ldr	r0, [pc, #72]	@ (8009a0c <HAL_PCD_MspInit+0xa4>)
 80099c4:	f7f8 fb12 	bl	8001fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80099c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009a08 <HAL_PCD_MspInit+0xa0>)
 80099ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099cc:	4a0e      	ldr	r2, [pc, #56]	@ (8009a08 <HAL_PCD_MspInit+0xa0>)
 80099ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80099d4:	2300      	movs	r3, #0
 80099d6:	60fb      	str	r3, [r7, #12]
 80099d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009a08 <HAL_PCD_MspInit+0xa0>)
 80099da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099dc:	4a0a      	ldr	r2, [pc, #40]	@ (8009a08 <HAL_PCD_MspInit+0xa0>)
 80099de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80099e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80099e4:	4b08      	ldr	r3, [pc, #32]	@ (8009a08 <HAL_PCD_MspInit+0xa0>)
 80099e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099ec:	60fb      	str	r3, [r7, #12]
 80099ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80099f0:	2200      	movs	r2, #0
 80099f2:	2100      	movs	r1, #0
 80099f4:	2043      	movs	r0, #67	@ 0x43
 80099f6:	f7f8 fac2 	bl	8001f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80099fa:	2043      	movs	r0, #67	@ 0x43
 80099fc:	f7f8 fadb 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009a00:	bf00      	nop
 8009a02:	3728      	adds	r7, #40	@ 0x28
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	40023800 	.word	0x40023800
 8009a0c:	40020000 	.word	0x40020000

08009a10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009a24:	4619      	mov	r1, r3
 8009a26:	4610      	mov	r0, r2
 8009a28:	f7fe faf9 	bl	800801e <USBD_LL_SetupStage>
}
 8009a2c:	bf00      	nop
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009a46:	78fa      	ldrb	r2, [r7, #3]
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	00db      	lsls	r3, r3, #3
 8009a4e:	4413      	add	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	440b      	add	r3, r1
 8009a54:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	78fb      	ldrb	r3, [r7, #3]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	f7fe fb33 	bl	80080c8 <USBD_LL_DataOutStage>
}
 8009a62:	bf00      	nop
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b082      	sub	sp, #8
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	460b      	mov	r3, r1
 8009a74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009a7c:	78fa      	ldrb	r2, [r7, #3]
 8009a7e:	6879      	ldr	r1, [r7, #4]
 8009a80:	4613      	mov	r3, r2
 8009a82:	00db      	lsls	r3, r3, #3
 8009a84:	4413      	add	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	440b      	add	r3, r1
 8009a8a:	3320      	adds	r3, #32
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	78fb      	ldrb	r3, [r7, #3]
 8009a90:	4619      	mov	r1, r3
 8009a92:	f7fe fbcc 	bl	800822e <USBD_LL_DataInStage>
}
 8009a96:	bf00      	nop
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fe fd06 	bl	80084be <USBD_LL_SOF>
}
 8009ab2:	bf00      	nop
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b084      	sub	sp, #16
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	79db      	ldrb	r3, [r3, #7]
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d001      	beq.n	8009ad2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009ace:	f7f7 fd3b 	bl	8001548 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ad8:	7bfa      	ldrb	r2, [r7, #15]
 8009ada:	4611      	mov	r1, r2
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fe fcaa 	bl	8008436 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7fe fc52 	bl	8008392 <USBD_LL_Reset>
}
 8009aee:	bf00      	nop
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
	...

08009af8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fe fca5 	bl	8008456 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	6812      	ldr	r2, [r2, #0]
 8009b1a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009b1e:	f043 0301 	orr.w	r3, r3, #1
 8009b22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7adb      	ldrb	r3, [r3, #11]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d005      	beq.n	8009b38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b2c:	4b04      	ldr	r3, [pc, #16]	@ (8009b40 <HAL_PCD_SuspendCallback+0x48>)
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	4a03      	ldr	r2, [pc, #12]	@ (8009b40 <HAL_PCD_SuspendCallback+0x48>)
 8009b32:	f043 0306 	orr.w	r3, r3, #6
 8009b36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b38:	bf00      	nop
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	e000ed00 	.word	0xe000ed00

08009b44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fe fc9b 	bl	800848e <USBD_LL_Resume>
}
 8009b58:	bf00      	nop
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b72:	78fa      	ldrb	r2, [r7, #3]
 8009b74:	4611      	mov	r1, r2
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7fe fcf3 	bl	8008562 <USBD_LL_IsoOUTIncomplete>
}
 8009b7c:	bf00      	nop
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b96:	78fa      	ldrb	r2, [r7, #3]
 8009b98:	4611      	mov	r1, r2
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe fcaf 	bl	80084fe <USBD_LL_IsoINIncomplete>
}
 8009ba0:	bf00      	nop
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fe fd05 	bl	80085c6 <USBD_LL_DevConnected>
}
 8009bbc:	bf00      	nop
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe fd02 	bl	80085dc <USBD_LL_DevDisconnected>
}
 8009bd8:	bf00      	nop
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d13c      	bne.n	8009c6a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009bf0:	4a20      	ldr	r2, [pc, #128]	@ (8009c74 <USBD_LL_Init+0x94>)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8009c74 <USBD_LL_Init+0x94>)
 8009bfc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009c00:	4b1c      	ldr	r3, [pc, #112]	@ (8009c74 <USBD_LL_Init+0x94>)
 8009c02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009c06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009c08:	4b1a      	ldr	r3, [pc, #104]	@ (8009c74 <USBD_LL_Init+0x94>)
 8009c0a:	2204      	movs	r2, #4
 8009c0c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009c0e:	4b19      	ldr	r3, [pc, #100]	@ (8009c74 <USBD_LL_Init+0x94>)
 8009c10:	2202      	movs	r2, #2
 8009c12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009c14:	4b17      	ldr	r3, [pc, #92]	@ (8009c74 <USBD_LL_Init+0x94>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c1a:	4b16      	ldr	r3, [pc, #88]	@ (8009c74 <USBD_LL_Init+0x94>)
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009c20:	4b14      	ldr	r3, [pc, #80]	@ (8009c74 <USBD_LL_Init+0x94>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009c26:	4b13      	ldr	r3, [pc, #76]	@ (8009c74 <USBD_LL_Init+0x94>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009c2c:	4b11      	ldr	r3, [pc, #68]	@ (8009c74 <USBD_LL_Init+0x94>)
 8009c2e:	2200      	movs	r2, #0
 8009c30:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009c32:	4b10      	ldr	r3, [pc, #64]	@ (8009c74 <USBD_LL_Init+0x94>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009c38:	4b0e      	ldr	r3, [pc, #56]	@ (8009c74 <USBD_LL_Init+0x94>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009c3e:	480d      	ldr	r0, [pc, #52]	@ (8009c74 <USBD_LL_Init+0x94>)
 8009c40:	f7f9 fb6c 	bl	800331c <HAL_PCD_Init>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009c4a:	f7f7 fc7d 	bl	8001548 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009c4e:	2180      	movs	r1, #128	@ 0x80
 8009c50:	4808      	ldr	r0, [pc, #32]	@ (8009c74 <USBD_LL_Init+0x94>)
 8009c52:	f7fa fd98 	bl	8004786 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009c56:	2240      	movs	r2, #64	@ 0x40
 8009c58:	2100      	movs	r1, #0
 8009c5a:	4806      	ldr	r0, [pc, #24]	@ (8009c74 <USBD_LL_Init+0x94>)
 8009c5c:	f7fa fd4c 	bl	80046f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009c60:	2280      	movs	r2, #128	@ 0x80
 8009c62:	2101      	movs	r1, #1
 8009c64:	4803      	ldr	r0, [pc, #12]	@ (8009c74 <USBD_LL_Init+0x94>)
 8009c66:	f7fa fd47 	bl	80046f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	20001954 	.word	0x20001954

08009c78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7f9 fc53 	bl	800353a <HAL_PCD_Start>
 8009c94:	4603      	mov	r3, r0
 8009c96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 f942 	bl	8009f24 <USBD_Get_USB_Status>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	4608      	mov	r0, r1
 8009cb8:	4611      	mov	r1, r2
 8009cba:	461a      	mov	r2, r3
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	70fb      	strb	r3, [r7, #3]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	70bb      	strb	r3, [r7, #2]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009cd6:	78bb      	ldrb	r3, [r7, #2]
 8009cd8:	883a      	ldrh	r2, [r7, #0]
 8009cda:	78f9      	ldrb	r1, [r7, #3]
 8009cdc:	f7fa f927 	bl	8003f2e <HAL_PCD_EP_Open>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 f91c 	bl	8009f24 <USBD_Get_USB_Status>
 8009cec:	4603      	mov	r3, r0
 8009cee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	460b      	mov	r3, r1
 8009d04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d14:	78fa      	ldrb	r2, [r7, #3]
 8009d16:	4611      	mov	r1, r2
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fa f972 	bl	8004002 <HAL_PCD_EP_Close>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d22:	7bfb      	ldrb	r3, [r7, #15]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 f8fd 	bl	8009f24 <USBD_Get_USB_Status>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	460b      	mov	r3, r1
 8009d42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d44:	2300      	movs	r3, #0
 8009d46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d52:	78fa      	ldrb	r2, [r7, #3]
 8009d54:	4611      	mov	r1, r2
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fa fa2a 	bl	80041b0 <HAL_PCD_EP_SetStall>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	4618      	mov	r0, r3
 8009d64:	f000 f8de 	bl	8009f24 <USBD_Get_USB_Status>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d90:	78fa      	ldrb	r2, [r7, #3]
 8009d92:	4611      	mov	r1, r2
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fa fa6e 	bl	8004276 <HAL_PCD_EP_ClrStall>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d9e:	7bfb      	ldrb	r3, [r7, #15]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 f8bf 	bl	8009f24 <USBD_Get_USB_Status>
 8009da6:	4603      	mov	r3, r0
 8009da8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009daa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009dc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009dc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	da0b      	bge.n	8009de8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009dd0:	78fb      	ldrb	r3, [r7, #3]
 8009dd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009dd6:	68f9      	ldr	r1, [r7, #12]
 8009dd8:	4613      	mov	r3, r2
 8009dda:	00db      	lsls	r3, r3, #3
 8009ddc:	4413      	add	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	440b      	add	r3, r1
 8009de2:	3316      	adds	r3, #22
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	e00b      	b.n	8009e00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009de8:	78fb      	ldrb	r3, [r7, #3]
 8009dea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009dee:	68f9      	ldr	r1, [r7, #12]
 8009df0:	4613      	mov	r3, r2
 8009df2:	00db      	lsls	r3, r3, #3
 8009df4:	4413      	add	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	440b      	add	r3, r1
 8009dfa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009dfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	460b      	mov	r3, r1
 8009e16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e26:	78fa      	ldrb	r2, [r7, #3]
 8009e28:	4611      	mov	r1, r2
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fa f85b 	bl	8003ee6 <HAL_PCD_SetAddress>
 8009e30:	4603      	mov	r3, r0
 8009e32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 f874 	bl	8009f24 <USBD_Get_USB_Status>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e40:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b086      	sub	sp, #24
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	60f8      	str	r0, [r7, #12]
 8009e52:	607a      	str	r2, [r7, #4]
 8009e54:	603b      	str	r3, [r7, #0]
 8009e56:	460b      	mov	r3, r1
 8009e58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009e68:	7af9      	ldrb	r1, [r7, #11]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	f7fa f965 	bl	800413c <HAL_PCD_EP_Transmit>
 8009e72:	4603      	mov	r3, r0
 8009e74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e76:	7dfb      	ldrb	r3, [r7, #23]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f000 f853 	bl	8009f24 <USBD_Get_USB_Status>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e82:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	607a      	str	r2, [r7, #4]
 8009e96:	603b      	str	r3, [r7, #0]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009eaa:	7af9      	ldrb	r1, [r7, #11]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	f7fa f8f1 	bl	8004096 <HAL_PCD_EP_Receive>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eb8:	7dfb      	ldrb	r3, [r7, #23]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 f832 	bl	8009f24 <USBD_Get_USB_Status>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ec4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ee0:	78fa      	ldrb	r2, [r7, #3]
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7fa f911 	bl	800410c <HAL_PCD_EP_GetRxCount>
 8009eea:	4603      	mov	r3, r0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009efc:	4b03      	ldr	r3, [pc, #12]	@ (8009f0c <USBD_static_malloc+0x18>)
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	20001e38 	.word	0x20001e38

08009f10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]

}
 8009f18:	bf00      	nop
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f32:	79fb      	ldrb	r3, [r7, #7]
 8009f34:	2b03      	cmp	r3, #3
 8009f36:	d817      	bhi.n	8009f68 <USBD_Get_USB_Status+0x44>
 8009f38:	a201      	add	r2, pc, #4	@ (adr r2, 8009f40 <USBD_Get_USB_Status+0x1c>)
 8009f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3e:	bf00      	nop
 8009f40:	08009f51 	.word	0x08009f51
 8009f44:	08009f57 	.word	0x08009f57
 8009f48:	08009f5d 	.word	0x08009f5d
 8009f4c:	08009f63 	.word	0x08009f63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73fb      	strb	r3, [r7, #15]
    break;
 8009f54:	e00b      	b.n	8009f6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f56:	2303      	movs	r3, #3
 8009f58:	73fb      	strb	r3, [r7, #15]
    break;
 8009f5a:	e008      	b.n	8009f6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f60:	e005      	b.n	8009f6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f62:	2303      	movs	r3, #3
 8009f64:	73fb      	strb	r3, [r7, #15]
    break;
 8009f66:	e002      	b.n	8009f6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f6c:	bf00      	nop
  }
  return usb_status;
 8009f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <__cvt>:
 8009f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f80:	ec57 6b10 	vmov	r6, r7, d0
 8009f84:	2f00      	cmp	r7, #0
 8009f86:	460c      	mov	r4, r1
 8009f88:	4619      	mov	r1, r3
 8009f8a:	463b      	mov	r3, r7
 8009f8c:	bfbb      	ittet	lt
 8009f8e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009f92:	461f      	movlt	r7, r3
 8009f94:	2300      	movge	r3, #0
 8009f96:	232d      	movlt	r3, #45	@ 0x2d
 8009f98:	700b      	strb	r3, [r1, #0]
 8009f9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f9c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009fa0:	4691      	mov	r9, r2
 8009fa2:	f023 0820 	bic.w	r8, r3, #32
 8009fa6:	bfbc      	itt	lt
 8009fa8:	4632      	movlt	r2, r6
 8009faa:	4616      	movlt	r6, r2
 8009fac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009fb0:	d005      	beq.n	8009fbe <__cvt+0x42>
 8009fb2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009fb6:	d100      	bne.n	8009fba <__cvt+0x3e>
 8009fb8:	3401      	adds	r4, #1
 8009fba:	2102      	movs	r1, #2
 8009fbc:	e000      	b.n	8009fc0 <__cvt+0x44>
 8009fbe:	2103      	movs	r1, #3
 8009fc0:	ab03      	add	r3, sp, #12
 8009fc2:	9301      	str	r3, [sp, #4]
 8009fc4:	ab02      	add	r3, sp, #8
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	ec47 6b10 	vmov	d0, r6, r7
 8009fcc:	4653      	mov	r3, sl
 8009fce:	4622      	mov	r2, r4
 8009fd0:	f000 fe76 	bl	800acc0 <_dtoa_r>
 8009fd4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009fd8:	4605      	mov	r5, r0
 8009fda:	d119      	bne.n	800a010 <__cvt+0x94>
 8009fdc:	f019 0f01 	tst.w	r9, #1
 8009fe0:	d00e      	beq.n	800a000 <__cvt+0x84>
 8009fe2:	eb00 0904 	add.w	r9, r0, r4
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2300      	movs	r3, #0
 8009fea:	4630      	mov	r0, r6
 8009fec:	4639      	mov	r1, r7
 8009fee:	f7f6 fd73 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ff2:	b108      	cbz	r0, 8009ff8 <__cvt+0x7c>
 8009ff4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ff8:	2230      	movs	r2, #48	@ 0x30
 8009ffa:	9b03      	ldr	r3, [sp, #12]
 8009ffc:	454b      	cmp	r3, r9
 8009ffe:	d31e      	bcc.n	800a03e <__cvt+0xc2>
 800a000:	9b03      	ldr	r3, [sp, #12]
 800a002:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a004:	1b5b      	subs	r3, r3, r5
 800a006:	4628      	mov	r0, r5
 800a008:	6013      	str	r3, [r2, #0]
 800a00a:	b004      	add	sp, #16
 800a00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a010:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a014:	eb00 0904 	add.w	r9, r0, r4
 800a018:	d1e5      	bne.n	8009fe6 <__cvt+0x6a>
 800a01a:	7803      	ldrb	r3, [r0, #0]
 800a01c:	2b30      	cmp	r3, #48	@ 0x30
 800a01e:	d10a      	bne.n	800a036 <__cvt+0xba>
 800a020:	2200      	movs	r2, #0
 800a022:	2300      	movs	r3, #0
 800a024:	4630      	mov	r0, r6
 800a026:	4639      	mov	r1, r7
 800a028:	f7f6 fd56 	bl	8000ad8 <__aeabi_dcmpeq>
 800a02c:	b918      	cbnz	r0, 800a036 <__cvt+0xba>
 800a02e:	f1c4 0401 	rsb	r4, r4, #1
 800a032:	f8ca 4000 	str.w	r4, [sl]
 800a036:	f8da 3000 	ldr.w	r3, [sl]
 800a03a:	4499      	add	r9, r3
 800a03c:	e7d3      	b.n	8009fe6 <__cvt+0x6a>
 800a03e:	1c59      	adds	r1, r3, #1
 800a040:	9103      	str	r1, [sp, #12]
 800a042:	701a      	strb	r2, [r3, #0]
 800a044:	e7d9      	b.n	8009ffa <__cvt+0x7e>

0800a046 <__exponent>:
 800a046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a048:	2900      	cmp	r1, #0
 800a04a:	bfba      	itte	lt
 800a04c:	4249      	neglt	r1, r1
 800a04e:	232d      	movlt	r3, #45	@ 0x2d
 800a050:	232b      	movge	r3, #43	@ 0x2b
 800a052:	2909      	cmp	r1, #9
 800a054:	7002      	strb	r2, [r0, #0]
 800a056:	7043      	strb	r3, [r0, #1]
 800a058:	dd29      	ble.n	800a0ae <__exponent+0x68>
 800a05a:	f10d 0307 	add.w	r3, sp, #7
 800a05e:	461d      	mov	r5, r3
 800a060:	270a      	movs	r7, #10
 800a062:	461a      	mov	r2, r3
 800a064:	fbb1 f6f7 	udiv	r6, r1, r7
 800a068:	fb07 1416 	mls	r4, r7, r6, r1
 800a06c:	3430      	adds	r4, #48	@ 0x30
 800a06e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a072:	460c      	mov	r4, r1
 800a074:	2c63      	cmp	r4, #99	@ 0x63
 800a076:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a07a:	4631      	mov	r1, r6
 800a07c:	dcf1      	bgt.n	800a062 <__exponent+0x1c>
 800a07e:	3130      	adds	r1, #48	@ 0x30
 800a080:	1e94      	subs	r4, r2, #2
 800a082:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a086:	1c41      	adds	r1, r0, #1
 800a088:	4623      	mov	r3, r4
 800a08a:	42ab      	cmp	r3, r5
 800a08c:	d30a      	bcc.n	800a0a4 <__exponent+0x5e>
 800a08e:	f10d 0309 	add.w	r3, sp, #9
 800a092:	1a9b      	subs	r3, r3, r2
 800a094:	42ac      	cmp	r4, r5
 800a096:	bf88      	it	hi
 800a098:	2300      	movhi	r3, #0
 800a09a:	3302      	adds	r3, #2
 800a09c:	4403      	add	r3, r0
 800a09e:	1a18      	subs	r0, r3, r0
 800a0a0:	b003      	add	sp, #12
 800a0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a0a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a0ac:	e7ed      	b.n	800a08a <__exponent+0x44>
 800a0ae:	2330      	movs	r3, #48	@ 0x30
 800a0b0:	3130      	adds	r1, #48	@ 0x30
 800a0b2:	7083      	strb	r3, [r0, #2]
 800a0b4:	70c1      	strb	r1, [r0, #3]
 800a0b6:	1d03      	adds	r3, r0, #4
 800a0b8:	e7f1      	b.n	800a09e <__exponent+0x58>
	...

0800a0bc <_printf_float>:
 800a0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c0:	b08d      	sub	sp, #52	@ 0x34
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a0c8:	4616      	mov	r6, r2
 800a0ca:	461f      	mov	r7, r3
 800a0cc:	4605      	mov	r5, r0
 800a0ce:	f000 fcf5 	bl	800aabc <_localeconv_r>
 800a0d2:	6803      	ldr	r3, [r0, #0]
 800a0d4:	9304      	str	r3, [sp, #16]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7f6 f8d2 	bl	8000280 <strlen>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a0e4:	9005      	str	r0, [sp, #20]
 800a0e6:	3307      	adds	r3, #7
 800a0e8:	f023 0307 	bic.w	r3, r3, #7
 800a0ec:	f103 0208 	add.w	r2, r3, #8
 800a0f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a0f4:	f8d4 b000 	ldr.w	fp, [r4]
 800a0f8:	f8c8 2000 	str.w	r2, [r8]
 800a0fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a100:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a104:	9307      	str	r3, [sp, #28]
 800a106:	f8cd 8018 	str.w	r8, [sp, #24]
 800a10a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a10e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a112:	4b9c      	ldr	r3, [pc, #624]	@ (800a384 <_printf_float+0x2c8>)
 800a114:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a118:	f7f6 fd10 	bl	8000b3c <__aeabi_dcmpun>
 800a11c:	bb70      	cbnz	r0, 800a17c <_printf_float+0xc0>
 800a11e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a122:	4b98      	ldr	r3, [pc, #608]	@ (800a384 <_printf_float+0x2c8>)
 800a124:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a128:	f7f6 fcea 	bl	8000b00 <__aeabi_dcmple>
 800a12c:	bb30      	cbnz	r0, 800a17c <_printf_float+0xc0>
 800a12e:	2200      	movs	r2, #0
 800a130:	2300      	movs	r3, #0
 800a132:	4640      	mov	r0, r8
 800a134:	4649      	mov	r1, r9
 800a136:	f7f6 fcd9 	bl	8000aec <__aeabi_dcmplt>
 800a13a:	b110      	cbz	r0, 800a142 <_printf_float+0x86>
 800a13c:	232d      	movs	r3, #45	@ 0x2d
 800a13e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a142:	4a91      	ldr	r2, [pc, #580]	@ (800a388 <_printf_float+0x2cc>)
 800a144:	4b91      	ldr	r3, [pc, #580]	@ (800a38c <_printf_float+0x2d0>)
 800a146:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a14a:	bf8c      	ite	hi
 800a14c:	4690      	movhi	r8, r2
 800a14e:	4698      	movls	r8, r3
 800a150:	2303      	movs	r3, #3
 800a152:	6123      	str	r3, [r4, #16]
 800a154:	f02b 0304 	bic.w	r3, fp, #4
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	f04f 0900 	mov.w	r9, #0
 800a15e:	9700      	str	r7, [sp, #0]
 800a160:	4633      	mov	r3, r6
 800a162:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a164:	4621      	mov	r1, r4
 800a166:	4628      	mov	r0, r5
 800a168:	f000 f9d2 	bl	800a510 <_printf_common>
 800a16c:	3001      	adds	r0, #1
 800a16e:	f040 808d 	bne.w	800a28c <_printf_float+0x1d0>
 800a172:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a176:	b00d      	add	sp, #52	@ 0x34
 800a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17c:	4642      	mov	r2, r8
 800a17e:	464b      	mov	r3, r9
 800a180:	4640      	mov	r0, r8
 800a182:	4649      	mov	r1, r9
 800a184:	f7f6 fcda 	bl	8000b3c <__aeabi_dcmpun>
 800a188:	b140      	cbz	r0, 800a19c <_printf_float+0xe0>
 800a18a:	464b      	mov	r3, r9
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	bfbc      	itt	lt
 800a190:	232d      	movlt	r3, #45	@ 0x2d
 800a192:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a196:	4a7e      	ldr	r2, [pc, #504]	@ (800a390 <_printf_float+0x2d4>)
 800a198:	4b7e      	ldr	r3, [pc, #504]	@ (800a394 <_printf_float+0x2d8>)
 800a19a:	e7d4      	b.n	800a146 <_printf_float+0x8a>
 800a19c:	6863      	ldr	r3, [r4, #4]
 800a19e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a1a2:	9206      	str	r2, [sp, #24]
 800a1a4:	1c5a      	adds	r2, r3, #1
 800a1a6:	d13b      	bne.n	800a220 <_printf_float+0x164>
 800a1a8:	2306      	movs	r3, #6
 800a1aa:	6063      	str	r3, [r4, #4]
 800a1ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	6022      	str	r2, [r4, #0]
 800a1b4:	9303      	str	r3, [sp, #12]
 800a1b6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a1b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a1bc:	ab09      	add	r3, sp, #36	@ 0x24
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	6861      	ldr	r1, [r4, #4]
 800a1c2:	ec49 8b10 	vmov	d0, r8, r9
 800a1c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	f7ff fed6 	bl	8009f7c <__cvt>
 800a1d0:	9b06      	ldr	r3, [sp, #24]
 800a1d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a1d4:	2b47      	cmp	r3, #71	@ 0x47
 800a1d6:	4680      	mov	r8, r0
 800a1d8:	d129      	bne.n	800a22e <_printf_float+0x172>
 800a1da:	1cc8      	adds	r0, r1, #3
 800a1dc:	db02      	blt.n	800a1e4 <_printf_float+0x128>
 800a1de:	6863      	ldr	r3, [r4, #4]
 800a1e0:	4299      	cmp	r1, r3
 800a1e2:	dd41      	ble.n	800a268 <_printf_float+0x1ac>
 800a1e4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a1e8:	fa5f fa8a 	uxtb.w	sl, sl
 800a1ec:	3901      	subs	r1, #1
 800a1ee:	4652      	mov	r2, sl
 800a1f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a1f4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a1f6:	f7ff ff26 	bl	800a046 <__exponent>
 800a1fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1fc:	1813      	adds	r3, r2, r0
 800a1fe:	2a01      	cmp	r2, #1
 800a200:	4681      	mov	r9, r0
 800a202:	6123      	str	r3, [r4, #16]
 800a204:	dc02      	bgt.n	800a20c <_printf_float+0x150>
 800a206:	6822      	ldr	r2, [r4, #0]
 800a208:	07d2      	lsls	r2, r2, #31
 800a20a:	d501      	bpl.n	800a210 <_printf_float+0x154>
 800a20c:	3301      	adds	r3, #1
 800a20e:	6123      	str	r3, [r4, #16]
 800a210:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a214:	2b00      	cmp	r3, #0
 800a216:	d0a2      	beq.n	800a15e <_printf_float+0xa2>
 800a218:	232d      	movs	r3, #45	@ 0x2d
 800a21a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a21e:	e79e      	b.n	800a15e <_printf_float+0xa2>
 800a220:	9a06      	ldr	r2, [sp, #24]
 800a222:	2a47      	cmp	r2, #71	@ 0x47
 800a224:	d1c2      	bne.n	800a1ac <_printf_float+0xf0>
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1c0      	bne.n	800a1ac <_printf_float+0xf0>
 800a22a:	2301      	movs	r3, #1
 800a22c:	e7bd      	b.n	800a1aa <_printf_float+0xee>
 800a22e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a232:	d9db      	bls.n	800a1ec <_printf_float+0x130>
 800a234:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a238:	d118      	bne.n	800a26c <_printf_float+0x1b0>
 800a23a:	2900      	cmp	r1, #0
 800a23c:	6863      	ldr	r3, [r4, #4]
 800a23e:	dd0b      	ble.n	800a258 <_printf_float+0x19c>
 800a240:	6121      	str	r1, [r4, #16]
 800a242:	b913      	cbnz	r3, 800a24a <_printf_float+0x18e>
 800a244:	6822      	ldr	r2, [r4, #0]
 800a246:	07d0      	lsls	r0, r2, #31
 800a248:	d502      	bpl.n	800a250 <_printf_float+0x194>
 800a24a:	3301      	adds	r3, #1
 800a24c:	440b      	add	r3, r1
 800a24e:	6123      	str	r3, [r4, #16]
 800a250:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a252:	f04f 0900 	mov.w	r9, #0
 800a256:	e7db      	b.n	800a210 <_printf_float+0x154>
 800a258:	b913      	cbnz	r3, 800a260 <_printf_float+0x1a4>
 800a25a:	6822      	ldr	r2, [r4, #0]
 800a25c:	07d2      	lsls	r2, r2, #31
 800a25e:	d501      	bpl.n	800a264 <_printf_float+0x1a8>
 800a260:	3302      	adds	r3, #2
 800a262:	e7f4      	b.n	800a24e <_printf_float+0x192>
 800a264:	2301      	movs	r3, #1
 800a266:	e7f2      	b.n	800a24e <_printf_float+0x192>
 800a268:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a26c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a26e:	4299      	cmp	r1, r3
 800a270:	db05      	blt.n	800a27e <_printf_float+0x1c2>
 800a272:	6823      	ldr	r3, [r4, #0]
 800a274:	6121      	str	r1, [r4, #16]
 800a276:	07d8      	lsls	r0, r3, #31
 800a278:	d5ea      	bpl.n	800a250 <_printf_float+0x194>
 800a27a:	1c4b      	adds	r3, r1, #1
 800a27c:	e7e7      	b.n	800a24e <_printf_float+0x192>
 800a27e:	2900      	cmp	r1, #0
 800a280:	bfd4      	ite	le
 800a282:	f1c1 0202 	rsble	r2, r1, #2
 800a286:	2201      	movgt	r2, #1
 800a288:	4413      	add	r3, r2
 800a28a:	e7e0      	b.n	800a24e <_printf_float+0x192>
 800a28c:	6823      	ldr	r3, [r4, #0]
 800a28e:	055a      	lsls	r2, r3, #21
 800a290:	d407      	bmi.n	800a2a2 <_printf_float+0x1e6>
 800a292:	6923      	ldr	r3, [r4, #16]
 800a294:	4642      	mov	r2, r8
 800a296:	4631      	mov	r1, r6
 800a298:	4628      	mov	r0, r5
 800a29a:	47b8      	blx	r7
 800a29c:	3001      	adds	r0, #1
 800a29e:	d12b      	bne.n	800a2f8 <_printf_float+0x23c>
 800a2a0:	e767      	b.n	800a172 <_printf_float+0xb6>
 800a2a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a2a6:	f240 80dd 	bls.w	800a464 <_printf_float+0x3a8>
 800a2aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	f7f6 fc11 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d033      	beq.n	800a322 <_printf_float+0x266>
 800a2ba:	4a37      	ldr	r2, [pc, #220]	@ (800a398 <_printf_float+0x2dc>)
 800a2bc:	2301      	movs	r3, #1
 800a2be:	4631      	mov	r1, r6
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	47b8      	blx	r7
 800a2c4:	3001      	adds	r0, #1
 800a2c6:	f43f af54 	beq.w	800a172 <_printf_float+0xb6>
 800a2ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a2ce:	4543      	cmp	r3, r8
 800a2d0:	db02      	blt.n	800a2d8 <_printf_float+0x21c>
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	07d8      	lsls	r0, r3, #31
 800a2d6:	d50f      	bpl.n	800a2f8 <_printf_float+0x23c>
 800a2d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2dc:	4631      	mov	r1, r6
 800a2de:	4628      	mov	r0, r5
 800a2e0:	47b8      	blx	r7
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	f43f af45 	beq.w	800a172 <_printf_float+0xb6>
 800a2e8:	f04f 0900 	mov.w	r9, #0
 800a2ec:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a2f0:	f104 0a1a 	add.w	sl, r4, #26
 800a2f4:	45c8      	cmp	r8, r9
 800a2f6:	dc09      	bgt.n	800a30c <_printf_float+0x250>
 800a2f8:	6823      	ldr	r3, [r4, #0]
 800a2fa:	079b      	lsls	r3, r3, #30
 800a2fc:	f100 8103 	bmi.w	800a506 <_printf_float+0x44a>
 800a300:	68e0      	ldr	r0, [r4, #12]
 800a302:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a304:	4298      	cmp	r0, r3
 800a306:	bfb8      	it	lt
 800a308:	4618      	movlt	r0, r3
 800a30a:	e734      	b.n	800a176 <_printf_float+0xba>
 800a30c:	2301      	movs	r3, #1
 800a30e:	4652      	mov	r2, sl
 800a310:	4631      	mov	r1, r6
 800a312:	4628      	mov	r0, r5
 800a314:	47b8      	blx	r7
 800a316:	3001      	adds	r0, #1
 800a318:	f43f af2b 	beq.w	800a172 <_printf_float+0xb6>
 800a31c:	f109 0901 	add.w	r9, r9, #1
 800a320:	e7e8      	b.n	800a2f4 <_printf_float+0x238>
 800a322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a324:	2b00      	cmp	r3, #0
 800a326:	dc39      	bgt.n	800a39c <_printf_float+0x2e0>
 800a328:	4a1b      	ldr	r2, [pc, #108]	@ (800a398 <_printf_float+0x2dc>)
 800a32a:	2301      	movs	r3, #1
 800a32c:	4631      	mov	r1, r6
 800a32e:	4628      	mov	r0, r5
 800a330:	47b8      	blx	r7
 800a332:	3001      	adds	r0, #1
 800a334:	f43f af1d 	beq.w	800a172 <_printf_float+0xb6>
 800a338:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a33c:	ea59 0303 	orrs.w	r3, r9, r3
 800a340:	d102      	bne.n	800a348 <_printf_float+0x28c>
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	07d9      	lsls	r1, r3, #31
 800a346:	d5d7      	bpl.n	800a2f8 <_printf_float+0x23c>
 800a348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a34c:	4631      	mov	r1, r6
 800a34e:	4628      	mov	r0, r5
 800a350:	47b8      	blx	r7
 800a352:	3001      	adds	r0, #1
 800a354:	f43f af0d 	beq.w	800a172 <_printf_float+0xb6>
 800a358:	f04f 0a00 	mov.w	sl, #0
 800a35c:	f104 0b1a 	add.w	fp, r4, #26
 800a360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a362:	425b      	negs	r3, r3
 800a364:	4553      	cmp	r3, sl
 800a366:	dc01      	bgt.n	800a36c <_printf_float+0x2b0>
 800a368:	464b      	mov	r3, r9
 800a36a:	e793      	b.n	800a294 <_printf_float+0x1d8>
 800a36c:	2301      	movs	r3, #1
 800a36e:	465a      	mov	r2, fp
 800a370:	4631      	mov	r1, r6
 800a372:	4628      	mov	r0, r5
 800a374:	47b8      	blx	r7
 800a376:	3001      	adds	r0, #1
 800a378:	f43f aefb 	beq.w	800a172 <_printf_float+0xb6>
 800a37c:	f10a 0a01 	add.w	sl, sl, #1
 800a380:	e7ee      	b.n	800a360 <_printf_float+0x2a4>
 800a382:	bf00      	nop
 800a384:	7fefffff 	.word	0x7fefffff
 800a388:	0800cd00 	.word	0x0800cd00
 800a38c:	0800ccfc 	.word	0x0800ccfc
 800a390:	0800cd08 	.word	0x0800cd08
 800a394:	0800cd04 	.word	0x0800cd04
 800a398:	0800cd0c 	.word	0x0800cd0c
 800a39c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a39e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a3a2:	4553      	cmp	r3, sl
 800a3a4:	bfa8      	it	ge
 800a3a6:	4653      	movge	r3, sl
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	4699      	mov	r9, r3
 800a3ac:	dc36      	bgt.n	800a41c <_printf_float+0x360>
 800a3ae:	f04f 0b00 	mov.w	fp, #0
 800a3b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3b6:	f104 021a 	add.w	r2, r4, #26
 800a3ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a3bc:	9306      	str	r3, [sp, #24]
 800a3be:	eba3 0309 	sub.w	r3, r3, r9
 800a3c2:	455b      	cmp	r3, fp
 800a3c4:	dc31      	bgt.n	800a42a <_printf_float+0x36e>
 800a3c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c8:	459a      	cmp	sl, r3
 800a3ca:	dc3a      	bgt.n	800a442 <_printf_float+0x386>
 800a3cc:	6823      	ldr	r3, [r4, #0]
 800a3ce:	07da      	lsls	r2, r3, #31
 800a3d0:	d437      	bmi.n	800a442 <_printf_float+0x386>
 800a3d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3d4:	ebaa 0903 	sub.w	r9, sl, r3
 800a3d8:	9b06      	ldr	r3, [sp, #24]
 800a3da:	ebaa 0303 	sub.w	r3, sl, r3
 800a3de:	4599      	cmp	r9, r3
 800a3e0:	bfa8      	it	ge
 800a3e2:	4699      	movge	r9, r3
 800a3e4:	f1b9 0f00 	cmp.w	r9, #0
 800a3e8:	dc33      	bgt.n	800a452 <_printf_float+0x396>
 800a3ea:	f04f 0800 	mov.w	r8, #0
 800a3ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3f2:	f104 0b1a 	add.w	fp, r4, #26
 800a3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3f8:	ebaa 0303 	sub.w	r3, sl, r3
 800a3fc:	eba3 0309 	sub.w	r3, r3, r9
 800a400:	4543      	cmp	r3, r8
 800a402:	f77f af79 	ble.w	800a2f8 <_printf_float+0x23c>
 800a406:	2301      	movs	r3, #1
 800a408:	465a      	mov	r2, fp
 800a40a:	4631      	mov	r1, r6
 800a40c:	4628      	mov	r0, r5
 800a40e:	47b8      	blx	r7
 800a410:	3001      	adds	r0, #1
 800a412:	f43f aeae 	beq.w	800a172 <_printf_float+0xb6>
 800a416:	f108 0801 	add.w	r8, r8, #1
 800a41a:	e7ec      	b.n	800a3f6 <_printf_float+0x33a>
 800a41c:	4642      	mov	r2, r8
 800a41e:	4631      	mov	r1, r6
 800a420:	4628      	mov	r0, r5
 800a422:	47b8      	blx	r7
 800a424:	3001      	adds	r0, #1
 800a426:	d1c2      	bne.n	800a3ae <_printf_float+0x2f2>
 800a428:	e6a3      	b.n	800a172 <_printf_float+0xb6>
 800a42a:	2301      	movs	r3, #1
 800a42c:	4631      	mov	r1, r6
 800a42e:	4628      	mov	r0, r5
 800a430:	9206      	str	r2, [sp, #24]
 800a432:	47b8      	blx	r7
 800a434:	3001      	adds	r0, #1
 800a436:	f43f ae9c 	beq.w	800a172 <_printf_float+0xb6>
 800a43a:	9a06      	ldr	r2, [sp, #24]
 800a43c:	f10b 0b01 	add.w	fp, fp, #1
 800a440:	e7bb      	b.n	800a3ba <_printf_float+0x2fe>
 800a442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a446:	4631      	mov	r1, r6
 800a448:	4628      	mov	r0, r5
 800a44a:	47b8      	blx	r7
 800a44c:	3001      	adds	r0, #1
 800a44e:	d1c0      	bne.n	800a3d2 <_printf_float+0x316>
 800a450:	e68f      	b.n	800a172 <_printf_float+0xb6>
 800a452:	9a06      	ldr	r2, [sp, #24]
 800a454:	464b      	mov	r3, r9
 800a456:	4442      	add	r2, r8
 800a458:	4631      	mov	r1, r6
 800a45a:	4628      	mov	r0, r5
 800a45c:	47b8      	blx	r7
 800a45e:	3001      	adds	r0, #1
 800a460:	d1c3      	bne.n	800a3ea <_printf_float+0x32e>
 800a462:	e686      	b.n	800a172 <_printf_float+0xb6>
 800a464:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a468:	f1ba 0f01 	cmp.w	sl, #1
 800a46c:	dc01      	bgt.n	800a472 <_printf_float+0x3b6>
 800a46e:	07db      	lsls	r3, r3, #31
 800a470:	d536      	bpl.n	800a4e0 <_printf_float+0x424>
 800a472:	2301      	movs	r3, #1
 800a474:	4642      	mov	r2, r8
 800a476:	4631      	mov	r1, r6
 800a478:	4628      	mov	r0, r5
 800a47a:	47b8      	blx	r7
 800a47c:	3001      	adds	r0, #1
 800a47e:	f43f ae78 	beq.w	800a172 <_printf_float+0xb6>
 800a482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a486:	4631      	mov	r1, r6
 800a488:	4628      	mov	r0, r5
 800a48a:	47b8      	blx	r7
 800a48c:	3001      	adds	r0, #1
 800a48e:	f43f ae70 	beq.w	800a172 <_printf_float+0xb6>
 800a492:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a496:	2200      	movs	r2, #0
 800a498:	2300      	movs	r3, #0
 800a49a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a49e:	f7f6 fb1b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4a2:	b9c0      	cbnz	r0, 800a4d6 <_printf_float+0x41a>
 800a4a4:	4653      	mov	r3, sl
 800a4a6:	f108 0201 	add.w	r2, r8, #1
 800a4aa:	4631      	mov	r1, r6
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	47b8      	blx	r7
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	d10c      	bne.n	800a4ce <_printf_float+0x412>
 800a4b4:	e65d      	b.n	800a172 <_printf_float+0xb6>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	465a      	mov	r2, fp
 800a4ba:	4631      	mov	r1, r6
 800a4bc:	4628      	mov	r0, r5
 800a4be:	47b8      	blx	r7
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	f43f ae56 	beq.w	800a172 <_printf_float+0xb6>
 800a4c6:	f108 0801 	add.w	r8, r8, #1
 800a4ca:	45d0      	cmp	r8, sl
 800a4cc:	dbf3      	blt.n	800a4b6 <_printf_float+0x3fa>
 800a4ce:	464b      	mov	r3, r9
 800a4d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a4d4:	e6df      	b.n	800a296 <_printf_float+0x1da>
 800a4d6:	f04f 0800 	mov.w	r8, #0
 800a4da:	f104 0b1a 	add.w	fp, r4, #26
 800a4de:	e7f4      	b.n	800a4ca <_printf_float+0x40e>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	4642      	mov	r2, r8
 800a4e4:	e7e1      	b.n	800a4aa <_printf_float+0x3ee>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	464a      	mov	r2, r9
 800a4ea:	4631      	mov	r1, r6
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	47b8      	blx	r7
 800a4f0:	3001      	adds	r0, #1
 800a4f2:	f43f ae3e 	beq.w	800a172 <_printf_float+0xb6>
 800a4f6:	f108 0801 	add.w	r8, r8, #1
 800a4fa:	68e3      	ldr	r3, [r4, #12]
 800a4fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a4fe:	1a5b      	subs	r3, r3, r1
 800a500:	4543      	cmp	r3, r8
 800a502:	dcf0      	bgt.n	800a4e6 <_printf_float+0x42a>
 800a504:	e6fc      	b.n	800a300 <_printf_float+0x244>
 800a506:	f04f 0800 	mov.w	r8, #0
 800a50a:	f104 0919 	add.w	r9, r4, #25
 800a50e:	e7f4      	b.n	800a4fa <_printf_float+0x43e>

0800a510 <_printf_common>:
 800a510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a514:	4616      	mov	r6, r2
 800a516:	4698      	mov	r8, r3
 800a518:	688a      	ldr	r2, [r1, #8]
 800a51a:	690b      	ldr	r3, [r1, #16]
 800a51c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a520:	4293      	cmp	r3, r2
 800a522:	bfb8      	it	lt
 800a524:	4613      	movlt	r3, r2
 800a526:	6033      	str	r3, [r6, #0]
 800a528:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a52c:	4607      	mov	r7, r0
 800a52e:	460c      	mov	r4, r1
 800a530:	b10a      	cbz	r2, 800a536 <_printf_common+0x26>
 800a532:	3301      	adds	r3, #1
 800a534:	6033      	str	r3, [r6, #0]
 800a536:	6823      	ldr	r3, [r4, #0]
 800a538:	0699      	lsls	r1, r3, #26
 800a53a:	bf42      	ittt	mi
 800a53c:	6833      	ldrmi	r3, [r6, #0]
 800a53e:	3302      	addmi	r3, #2
 800a540:	6033      	strmi	r3, [r6, #0]
 800a542:	6825      	ldr	r5, [r4, #0]
 800a544:	f015 0506 	ands.w	r5, r5, #6
 800a548:	d106      	bne.n	800a558 <_printf_common+0x48>
 800a54a:	f104 0a19 	add.w	sl, r4, #25
 800a54e:	68e3      	ldr	r3, [r4, #12]
 800a550:	6832      	ldr	r2, [r6, #0]
 800a552:	1a9b      	subs	r3, r3, r2
 800a554:	42ab      	cmp	r3, r5
 800a556:	dc26      	bgt.n	800a5a6 <_printf_common+0x96>
 800a558:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a55c:	6822      	ldr	r2, [r4, #0]
 800a55e:	3b00      	subs	r3, #0
 800a560:	bf18      	it	ne
 800a562:	2301      	movne	r3, #1
 800a564:	0692      	lsls	r2, r2, #26
 800a566:	d42b      	bmi.n	800a5c0 <_printf_common+0xb0>
 800a568:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a56c:	4641      	mov	r1, r8
 800a56e:	4638      	mov	r0, r7
 800a570:	47c8      	blx	r9
 800a572:	3001      	adds	r0, #1
 800a574:	d01e      	beq.n	800a5b4 <_printf_common+0xa4>
 800a576:	6823      	ldr	r3, [r4, #0]
 800a578:	6922      	ldr	r2, [r4, #16]
 800a57a:	f003 0306 	and.w	r3, r3, #6
 800a57e:	2b04      	cmp	r3, #4
 800a580:	bf02      	ittt	eq
 800a582:	68e5      	ldreq	r5, [r4, #12]
 800a584:	6833      	ldreq	r3, [r6, #0]
 800a586:	1aed      	subeq	r5, r5, r3
 800a588:	68a3      	ldr	r3, [r4, #8]
 800a58a:	bf0c      	ite	eq
 800a58c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a590:	2500      	movne	r5, #0
 800a592:	4293      	cmp	r3, r2
 800a594:	bfc4      	itt	gt
 800a596:	1a9b      	subgt	r3, r3, r2
 800a598:	18ed      	addgt	r5, r5, r3
 800a59a:	2600      	movs	r6, #0
 800a59c:	341a      	adds	r4, #26
 800a59e:	42b5      	cmp	r5, r6
 800a5a0:	d11a      	bne.n	800a5d8 <_printf_common+0xc8>
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	e008      	b.n	800a5b8 <_printf_common+0xa8>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	4652      	mov	r2, sl
 800a5aa:	4641      	mov	r1, r8
 800a5ac:	4638      	mov	r0, r7
 800a5ae:	47c8      	blx	r9
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	d103      	bne.n	800a5bc <_printf_common+0xac>
 800a5b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5bc:	3501      	adds	r5, #1
 800a5be:	e7c6      	b.n	800a54e <_printf_common+0x3e>
 800a5c0:	18e1      	adds	r1, r4, r3
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	2030      	movs	r0, #48	@ 0x30
 800a5c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5ca:	4422      	add	r2, r4
 800a5cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5d4:	3302      	adds	r3, #2
 800a5d6:	e7c7      	b.n	800a568 <_printf_common+0x58>
 800a5d8:	2301      	movs	r3, #1
 800a5da:	4622      	mov	r2, r4
 800a5dc:	4641      	mov	r1, r8
 800a5de:	4638      	mov	r0, r7
 800a5e0:	47c8      	blx	r9
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	d0e6      	beq.n	800a5b4 <_printf_common+0xa4>
 800a5e6:	3601      	adds	r6, #1
 800a5e8:	e7d9      	b.n	800a59e <_printf_common+0x8e>
	...

0800a5ec <_printf_i>:
 800a5ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f0:	7e0f      	ldrb	r7, [r1, #24]
 800a5f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5f4:	2f78      	cmp	r7, #120	@ 0x78
 800a5f6:	4691      	mov	r9, r2
 800a5f8:	4680      	mov	r8, r0
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	469a      	mov	sl, r3
 800a5fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a602:	d807      	bhi.n	800a614 <_printf_i+0x28>
 800a604:	2f62      	cmp	r7, #98	@ 0x62
 800a606:	d80a      	bhi.n	800a61e <_printf_i+0x32>
 800a608:	2f00      	cmp	r7, #0
 800a60a:	f000 80d1 	beq.w	800a7b0 <_printf_i+0x1c4>
 800a60e:	2f58      	cmp	r7, #88	@ 0x58
 800a610:	f000 80b8 	beq.w	800a784 <_printf_i+0x198>
 800a614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a618:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a61c:	e03a      	b.n	800a694 <_printf_i+0xa8>
 800a61e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a622:	2b15      	cmp	r3, #21
 800a624:	d8f6      	bhi.n	800a614 <_printf_i+0x28>
 800a626:	a101      	add	r1, pc, #4	@ (adr r1, 800a62c <_printf_i+0x40>)
 800a628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a62c:	0800a685 	.word	0x0800a685
 800a630:	0800a699 	.word	0x0800a699
 800a634:	0800a615 	.word	0x0800a615
 800a638:	0800a615 	.word	0x0800a615
 800a63c:	0800a615 	.word	0x0800a615
 800a640:	0800a615 	.word	0x0800a615
 800a644:	0800a699 	.word	0x0800a699
 800a648:	0800a615 	.word	0x0800a615
 800a64c:	0800a615 	.word	0x0800a615
 800a650:	0800a615 	.word	0x0800a615
 800a654:	0800a615 	.word	0x0800a615
 800a658:	0800a797 	.word	0x0800a797
 800a65c:	0800a6c3 	.word	0x0800a6c3
 800a660:	0800a751 	.word	0x0800a751
 800a664:	0800a615 	.word	0x0800a615
 800a668:	0800a615 	.word	0x0800a615
 800a66c:	0800a7b9 	.word	0x0800a7b9
 800a670:	0800a615 	.word	0x0800a615
 800a674:	0800a6c3 	.word	0x0800a6c3
 800a678:	0800a615 	.word	0x0800a615
 800a67c:	0800a615 	.word	0x0800a615
 800a680:	0800a759 	.word	0x0800a759
 800a684:	6833      	ldr	r3, [r6, #0]
 800a686:	1d1a      	adds	r2, r3, #4
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6032      	str	r2, [r6, #0]
 800a68c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a690:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a694:	2301      	movs	r3, #1
 800a696:	e09c      	b.n	800a7d2 <_printf_i+0x1e6>
 800a698:	6833      	ldr	r3, [r6, #0]
 800a69a:	6820      	ldr	r0, [r4, #0]
 800a69c:	1d19      	adds	r1, r3, #4
 800a69e:	6031      	str	r1, [r6, #0]
 800a6a0:	0606      	lsls	r6, r0, #24
 800a6a2:	d501      	bpl.n	800a6a8 <_printf_i+0xbc>
 800a6a4:	681d      	ldr	r5, [r3, #0]
 800a6a6:	e003      	b.n	800a6b0 <_printf_i+0xc4>
 800a6a8:	0645      	lsls	r5, r0, #25
 800a6aa:	d5fb      	bpl.n	800a6a4 <_printf_i+0xb8>
 800a6ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a6b0:	2d00      	cmp	r5, #0
 800a6b2:	da03      	bge.n	800a6bc <_printf_i+0xd0>
 800a6b4:	232d      	movs	r3, #45	@ 0x2d
 800a6b6:	426d      	negs	r5, r5
 800a6b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6bc:	4858      	ldr	r0, [pc, #352]	@ (800a820 <_printf_i+0x234>)
 800a6be:	230a      	movs	r3, #10
 800a6c0:	e011      	b.n	800a6e6 <_printf_i+0xfa>
 800a6c2:	6821      	ldr	r1, [r4, #0]
 800a6c4:	6833      	ldr	r3, [r6, #0]
 800a6c6:	0608      	lsls	r0, r1, #24
 800a6c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6cc:	d402      	bmi.n	800a6d4 <_printf_i+0xe8>
 800a6ce:	0649      	lsls	r1, r1, #25
 800a6d0:	bf48      	it	mi
 800a6d2:	b2ad      	uxthmi	r5, r5
 800a6d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6d6:	4852      	ldr	r0, [pc, #328]	@ (800a820 <_printf_i+0x234>)
 800a6d8:	6033      	str	r3, [r6, #0]
 800a6da:	bf14      	ite	ne
 800a6dc:	230a      	movne	r3, #10
 800a6de:	2308      	moveq	r3, #8
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6e6:	6866      	ldr	r6, [r4, #4]
 800a6e8:	60a6      	str	r6, [r4, #8]
 800a6ea:	2e00      	cmp	r6, #0
 800a6ec:	db05      	blt.n	800a6fa <_printf_i+0x10e>
 800a6ee:	6821      	ldr	r1, [r4, #0]
 800a6f0:	432e      	orrs	r6, r5
 800a6f2:	f021 0104 	bic.w	r1, r1, #4
 800a6f6:	6021      	str	r1, [r4, #0]
 800a6f8:	d04b      	beq.n	800a792 <_printf_i+0x1a6>
 800a6fa:	4616      	mov	r6, r2
 800a6fc:	fbb5 f1f3 	udiv	r1, r5, r3
 800a700:	fb03 5711 	mls	r7, r3, r1, r5
 800a704:	5dc7      	ldrb	r7, [r0, r7]
 800a706:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a70a:	462f      	mov	r7, r5
 800a70c:	42bb      	cmp	r3, r7
 800a70e:	460d      	mov	r5, r1
 800a710:	d9f4      	bls.n	800a6fc <_printf_i+0x110>
 800a712:	2b08      	cmp	r3, #8
 800a714:	d10b      	bne.n	800a72e <_printf_i+0x142>
 800a716:	6823      	ldr	r3, [r4, #0]
 800a718:	07df      	lsls	r7, r3, #31
 800a71a:	d508      	bpl.n	800a72e <_printf_i+0x142>
 800a71c:	6923      	ldr	r3, [r4, #16]
 800a71e:	6861      	ldr	r1, [r4, #4]
 800a720:	4299      	cmp	r1, r3
 800a722:	bfde      	ittt	le
 800a724:	2330      	movle	r3, #48	@ 0x30
 800a726:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a72a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a72e:	1b92      	subs	r2, r2, r6
 800a730:	6122      	str	r2, [r4, #16]
 800a732:	f8cd a000 	str.w	sl, [sp]
 800a736:	464b      	mov	r3, r9
 800a738:	aa03      	add	r2, sp, #12
 800a73a:	4621      	mov	r1, r4
 800a73c:	4640      	mov	r0, r8
 800a73e:	f7ff fee7 	bl	800a510 <_printf_common>
 800a742:	3001      	adds	r0, #1
 800a744:	d14a      	bne.n	800a7dc <_printf_i+0x1f0>
 800a746:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a74a:	b004      	add	sp, #16
 800a74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a750:	6823      	ldr	r3, [r4, #0]
 800a752:	f043 0320 	orr.w	r3, r3, #32
 800a756:	6023      	str	r3, [r4, #0]
 800a758:	4832      	ldr	r0, [pc, #200]	@ (800a824 <_printf_i+0x238>)
 800a75a:	2778      	movs	r7, #120	@ 0x78
 800a75c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a760:	6823      	ldr	r3, [r4, #0]
 800a762:	6831      	ldr	r1, [r6, #0]
 800a764:	061f      	lsls	r7, r3, #24
 800a766:	f851 5b04 	ldr.w	r5, [r1], #4
 800a76a:	d402      	bmi.n	800a772 <_printf_i+0x186>
 800a76c:	065f      	lsls	r7, r3, #25
 800a76e:	bf48      	it	mi
 800a770:	b2ad      	uxthmi	r5, r5
 800a772:	6031      	str	r1, [r6, #0]
 800a774:	07d9      	lsls	r1, r3, #31
 800a776:	bf44      	itt	mi
 800a778:	f043 0320 	orrmi.w	r3, r3, #32
 800a77c:	6023      	strmi	r3, [r4, #0]
 800a77e:	b11d      	cbz	r5, 800a788 <_printf_i+0x19c>
 800a780:	2310      	movs	r3, #16
 800a782:	e7ad      	b.n	800a6e0 <_printf_i+0xf4>
 800a784:	4826      	ldr	r0, [pc, #152]	@ (800a820 <_printf_i+0x234>)
 800a786:	e7e9      	b.n	800a75c <_printf_i+0x170>
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	f023 0320 	bic.w	r3, r3, #32
 800a78e:	6023      	str	r3, [r4, #0]
 800a790:	e7f6      	b.n	800a780 <_printf_i+0x194>
 800a792:	4616      	mov	r6, r2
 800a794:	e7bd      	b.n	800a712 <_printf_i+0x126>
 800a796:	6833      	ldr	r3, [r6, #0]
 800a798:	6825      	ldr	r5, [r4, #0]
 800a79a:	6961      	ldr	r1, [r4, #20]
 800a79c:	1d18      	adds	r0, r3, #4
 800a79e:	6030      	str	r0, [r6, #0]
 800a7a0:	062e      	lsls	r6, r5, #24
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	d501      	bpl.n	800a7aa <_printf_i+0x1be>
 800a7a6:	6019      	str	r1, [r3, #0]
 800a7a8:	e002      	b.n	800a7b0 <_printf_i+0x1c4>
 800a7aa:	0668      	lsls	r0, r5, #25
 800a7ac:	d5fb      	bpl.n	800a7a6 <_printf_i+0x1ba>
 800a7ae:	8019      	strh	r1, [r3, #0]
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	6123      	str	r3, [r4, #16]
 800a7b4:	4616      	mov	r6, r2
 800a7b6:	e7bc      	b.n	800a732 <_printf_i+0x146>
 800a7b8:	6833      	ldr	r3, [r6, #0]
 800a7ba:	1d1a      	adds	r2, r3, #4
 800a7bc:	6032      	str	r2, [r6, #0]
 800a7be:	681e      	ldr	r6, [r3, #0]
 800a7c0:	6862      	ldr	r2, [r4, #4]
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f7f5 fd0b 	bl	80001e0 <memchr>
 800a7ca:	b108      	cbz	r0, 800a7d0 <_printf_i+0x1e4>
 800a7cc:	1b80      	subs	r0, r0, r6
 800a7ce:	6060      	str	r0, [r4, #4]
 800a7d0:	6863      	ldr	r3, [r4, #4]
 800a7d2:	6123      	str	r3, [r4, #16]
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7da:	e7aa      	b.n	800a732 <_printf_i+0x146>
 800a7dc:	6923      	ldr	r3, [r4, #16]
 800a7de:	4632      	mov	r2, r6
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	4640      	mov	r0, r8
 800a7e4:	47d0      	blx	sl
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	d0ad      	beq.n	800a746 <_printf_i+0x15a>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	079b      	lsls	r3, r3, #30
 800a7ee:	d413      	bmi.n	800a818 <_printf_i+0x22c>
 800a7f0:	68e0      	ldr	r0, [r4, #12]
 800a7f2:	9b03      	ldr	r3, [sp, #12]
 800a7f4:	4298      	cmp	r0, r3
 800a7f6:	bfb8      	it	lt
 800a7f8:	4618      	movlt	r0, r3
 800a7fa:	e7a6      	b.n	800a74a <_printf_i+0x15e>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	4632      	mov	r2, r6
 800a800:	4649      	mov	r1, r9
 800a802:	4640      	mov	r0, r8
 800a804:	47d0      	blx	sl
 800a806:	3001      	adds	r0, #1
 800a808:	d09d      	beq.n	800a746 <_printf_i+0x15a>
 800a80a:	3501      	adds	r5, #1
 800a80c:	68e3      	ldr	r3, [r4, #12]
 800a80e:	9903      	ldr	r1, [sp, #12]
 800a810:	1a5b      	subs	r3, r3, r1
 800a812:	42ab      	cmp	r3, r5
 800a814:	dcf2      	bgt.n	800a7fc <_printf_i+0x210>
 800a816:	e7eb      	b.n	800a7f0 <_printf_i+0x204>
 800a818:	2500      	movs	r5, #0
 800a81a:	f104 0619 	add.w	r6, r4, #25
 800a81e:	e7f5      	b.n	800a80c <_printf_i+0x220>
 800a820:	0800cd0e 	.word	0x0800cd0e
 800a824:	0800cd1f 	.word	0x0800cd1f

0800a828 <std>:
 800a828:	2300      	movs	r3, #0
 800a82a:	b510      	push	{r4, lr}
 800a82c:	4604      	mov	r4, r0
 800a82e:	e9c0 3300 	strd	r3, r3, [r0]
 800a832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a836:	6083      	str	r3, [r0, #8]
 800a838:	8181      	strh	r1, [r0, #12]
 800a83a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a83c:	81c2      	strh	r2, [r0, #14]
 800a83e:	6183      	str	r3, [r0, #24]
 800a840:	4619      	mov	r1, r3
 800a842:	2208      	movs	r2, #8
 800a844:	305c      	adds	r0, #92	@ 0x5c
 800a846:	f000 f931 	bl	800aaac <memset>
 800a84a:	4b0d      	ldr	r3, [pc, #52]	@ (800a880 <std+0x58>)
 800a84c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a84e:	4b0d      	ldr	r3, [pc, #52]	@ (800a884 <std+0x5c>)
 800a850:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a852:	4b0d      	ldr	r3, [pc, #52]	@ (800a888 <std+0x60>)
 800a854:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a856:	4b0d      	ldr	r3, [pc, #52]	@ (800a88c <std+0x64>)
 800a858:	6323      	str	r3, [r4, #48]	@ 0x30
 800a85a:	4b0d      	ldr	r3, [pc, #52]	@ (800a890 <std+0x68>)
 800a85c:	6224      	str	r4, [r4, #32]
 800a85e:	429c      	cmp	r4, r3
 800a860:	d006      	beq.n	800a870 <std+0x48>
 800a862:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a866:	4294      	cmp	r4, r2
 800a868:	d002      	beq.n	800a870 <std+0x48>
 800a86a:	33d0      	adds	r3, #208	@ 0xd0
 800a86c:	429c      	cmp	r4, r3
 800a86e:	d105      	bne.n	800a87c <std+0x54>
 800a870:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a878:	f000 b994 	b.w	800aba4 <__retarget_lock_init_recursive>
 800a87c:	bd10      	pop	{r4, pc}
 800a87e:	bf00      	nop
 800a880:	0800a9ad 	.word	0x0800a9ad
 800a884:	0800a9cf 	.word	0x0800a9cf
 800a888:	0800aa07 	.word	0x0800aa07
 800a88c:	0800aa2b 	.word	0x0800aa2b
 800a890:	20002058 	.word	0x20002058

0800a894 <stdio_exit_handler>:
 800a894:	4a02      	ldr	r2, [pc, #8]	@ (800a8a0 <stdio_exit_handler+0xc>)
 800a896:	4903      	ldr	r1, [pc, #12]	@ (800a8a4 <stdio_exit_handler+0x10>)
 800a898:	4803      	ldr	r0, [pc, #12]	@ (800a8a8 <stdio_exit_handler+0x14>)
 800a89a:	f000 b869 	b.w	800a970 <_fwalk_sglue>
 800a89e:	bf00      	nop
 800a8a0:	20000104 	.word	0x20000104
 800a8a4:	0800c50d 	.word	0x0800c50d
 800a8a8:	20000114 	.word	0x20000114

0800a8ac <cleanup_stdio>:
 800a8ac:	6841      	ldr	r1, [r0, #4]
 800a8ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e0 <cleanup_stdio+0x34>)
 800a8b0:	4299      	cmp	r1, r3
 800a8b2:	b510      	push	{r4, lr}
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	d001      	beq.n	800a8bc <cleanup_stdio+0x10>
 800a8b8:	f001 fe28 	bl	800c50c <_fflush_r>
 800a8bc:	68a1      	ldr	r1, [r4, #8]
 800a8be:	4b09      	ldr	r3, [pc, #36]	@ (800a8e4 <cleanup_stdio+0x38>)
 800a8c0:	4299      	cmp	r1, r3
 800a8c2:	d002      	beq.n	800a8ca <cleanup_stdio+0x1e>
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f001 fe21 	bl	800c50c <_fflush_r>
 800a8ca:	68e1      	ldr	r1, [r4, #12]
 800a8cc:	4b06      	ldr	r3, [pc, #24]	@ (800a8e8 <cleanup_stdio+0x3c>)
 800a8ce:	4299      	cmp	r1, r3
 800a8d0:	d004      	beq.n	800a8dc <cleanup_stdio+0x30>
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8d8:	f001 be18 	b.w	800c50c <_fflush_r>
 800a8dc:	bd10      	pop	{r4, pc}
 800a8de:	bf00      	nop
 800a8e0:	20002058 	.word	0x20002058
 800a8e4:	200020c0 	.word	0x200020c0
 800a8e8:	20002128 	.word	0x20002128

0800a8ec <global_stdio_init.part.0>:
 800a8ec:	b510      	push	{r4, lr}
 800a8ee:	4b0b      	ldr	r3, [pc, #44]	@ (800a91c <global_stdio_init.part.0+0x30>)
 800a8f0:	4c0b      	ldr	r4, [pc, #44]	@ (800a920 <global_stdio_init.part.0+0x34>)
 800a8f2:	4a0c      	ldr	r2, [pc, #48]	@ (800a924 <global_stdio_init.part.0+0x38>)
 800a8f4:	601a      	str	r2, [r3, #0]
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	2104      	movs	r1, #4
 800a8fc:	f7ff ff94 	bl	800a828 <std>
 800a900:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a904:	2201      	movs	r2, #1
 800a906:	2109      	movs	r1, #9
 800a908:	f7ff ff8e 	bl	800a828 <std>
 800a90c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a910:	2202      	movs	r2, #2
 800a912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a916:	2112      	movs	r1, #18
 800a918:	f7ff bf86 	b.w	800a828 <std>
 800a91c:	20002190 	.word	0x20002190
 800a920:	20002058 	.word	0x20002058
 800a924:	0800a895 	.word	0x0800a895

0800a928 <__sfp_lock_acquire>:
 800a928:	4801      	ldr	r0, [pc, #4]	@ (800a930 <__sfp_lock_acquire+0x8>)
 800a92a:	f000 b93c 	b.w	800aba6 <__retarget_lock_acquire_recursive>
 800a92e:	bf00      	nop
 800a930:	20002199 	.word	0x20002199

0800a934 <__sfp_lock_release>:
 800a934:	4801      	ldr	r0, [pc, #4]	@ (800a93c <__sfp_lock_release+0x8>)
 800a936:	f000 b937 	b.w	800aba8 <__retarget_lock_release_recursive>
 800a93a:	bf00      	nop
 800a93c:	20002199 	.word	0x20002199

0800a940 <__sinit>:
 800a940:	b510      	push	{r4, lr}
 800a942:	4604      	mov	r4, r0
 800a944:	f7ff fff0 	bl	800a928 <__sfp_lock_acquire>
 800a948:	6a23      	ldr	r3, [r4, #32]
 800a94a:	b11b      	cbz	r3, 800a954 <__sinit+0x14>
 800a94c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a950:	f7ff bff0 	b.w	800a934 <__sfp_lock_release>
 800a954:	4b04      	ldr	r3, [pc, #16]	@ (800a968 <__sinit+0x28>)
 800a956:	6223      	str	r3, [r4, #32]
 800a958:	4b04      	ldr	r3, [pc, #16]	@ (800a96c <__sinit+0x2c>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1f5      	bne.n	800a94c <__sinit+0xc>
 800a960:	f7ff ffc4 	bl	800a8ec <global_stdio_init.part.0>
 800a964:	e7f2      	b.n	800a94c <__sinit+0xc>
 800a966:	bf00      	nop
 800a968:	0800a8ad 	.word	0x0800a8ad
 800a96c:	20002190 	.word	0x20002190

0800a970 <_fwalk_sglue>:
 800a970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a974:	4607      	mov	r7, r0
 800a976:	4688      	mov	r8, r1
 800a978:	4614      	mov	r4, r2
 800a97a:	2600      	movs	r6, #0
 800a97c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a980:	f1b9 0901 	subs.w	r9, r9, #1
 800a984:	d505      	bpl.n	800a992 <_fwalk_sglue+0x22>
 800a986:	6824      	ldr	r4, [r4, #0]
 800a988:	2c00      	cmp	r4, #0
 800a98a:	d1f7      	bne.n	800a97c <_fwalk_sglue+0xc>
 800a98c:	4630      	mov	r0, r6
 800a98e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a992:	89ab      	ldrh	r3, [r5, #12]
 800a994:	2b01      	cmp	r3, #1
 800a996:	d907      	bls.n	800a9a8 <_fwalk_sglue+0x38>
 800a998:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a99c:	3301      	adds	r3, #1
 800a99e:	d003      	beq.n	800a9a8 <_fwalk_sglue+0x38>
 800a9a0:	4629      	mov	r1, r5
 800a9a2:	4638      	mov	r0, r7
 800a9a4:	47c0      	blx	r8
 800a9a6:	4306      	orrs	r6, r0
 800a9a8:	3568      	adds	r5, #104	@ 0x68
 800a9aa:	e7e9      	b.n	800a980 <_fwalk_sglue+0x10>

0800a9ac <__sread>:
 800a9ac:	b510      	push	{r4, lr}
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b4:	f000 f8a8 	bl	800ab08 <_read_r>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	bfab      	itete	ge
 800a9bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a9be:	89a3      	ldrhlt	r3, [r4, #12]
 800a9c0:	181b      	addge	r3, r3, r0
 800a9c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a9c6:	bfac      	ite	ge
 800a9c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a9ca:	81a3      	strhlt	r3, [r4, #12]
 800a9cc:	bd10      	pop	{r4, pc}

0800a9ce <__swrite>:
 800a9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d2:	461f      	mov	r7, r3
 800a9d4:	898b      	ldrh	r3, [r1, #12]
 800a9d6:	05db      	lsls	r3, r3, #23
 800a9d8:	4605      	mov	r5, r0
 800a9da:	460c      	mov	r4, r1
 800a9dc:	4616      	mov	r6, r2
 800a9de:	d505      	bpl.n	800a9ec <__swrite+0x1e>
 800a9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f000 f87c 	bl	800aae4 <_lseek_r>
 800a9ec:	89a3      	ldrh	r3, [r4, #12]
 800a9ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9f6:	81a3      	strh	r3, [r4, #12]
 800a9f8:	4632      	mov	r2, r6
 800a9fa:	463b      	mov	r3, r7
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa02:	f000 b893 	b.w	800ab2c <_write_r>

0800aa06 <__sseek>:
 800aa06:	b510      	push	{r4, lr}
 800aa08:	460c      	mov	r4, r1
 800aa0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa0e:	f000 f869 	bl	800aae4 <_lseek_r>
 800aa12:	1c43      	adds	r3, r0, #1
 800aa14:	89a3      	ldrh	r3, [r4, #12]
 800aa16:	bf15      	itete	ne
 800aa18:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aa1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aa1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aa22:	81a3      	strheq	r3, [r4, #12]
 800aa24:	bf18      	it	ne
 800aa26:	81a3      	strhne	r3, [r4, #12]
 800aa28:	bd10      	pop	{r4, pc}

0800aa2a <__sclose>:
 800aa2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa2e:	f000 b849 	b.w	800aac4 <_close_r>

0800aa32 <_vsniprintf_r>:
 800aa32:	b530      	push	{r4, r5, lr}
 800aa34:	4614      	mov	r4, r2
 800aa36:	2c00      	cmp	r4, #0
 800aa38:	b09b      	sub	sp, #108	@ 0x6c
 800aa3a:	4605      	mov	r5, r0
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	da05      	bge.n	800aa4c <_vsniprintf_r+0x1a>
 800aa40:	238b      	movs	r3, #139	@ 0x8b
 800aa42:	6003      	str	r3, [r0, #0]
 800aa44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa48:	b01b      	add	sp, #108	@ 0x6c
 800aa4a:	bd30      	pop	{r4, r5, pc}
 800aa4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800aa50:	f8ad 300c 	strh.w	r3, [sp, #12]
 800aa54:	f04f 0300 	mov.w	r3, #0
 800aa58:	9319      	str	r3, [sp, #100]	@ 0x64
 800aa5a:	bf14      	ite	ne
 800aa5c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800aa60:	4623      	moveq	r3, r4
 800aa62:	9302      	str	r3, [sp, #8]
 800aa64:	9305      	str	r3, [sp, #20]
 800aa66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aa6a:	9100      	str	r1, [sp, #0]
 800aa6c:	9104      	str	r1, [sp, #16]
 800aa6e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800aa72:	4669      	mov	r1, sp
 800aa74:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800aa76:	f001 fbc9 	bl	800c20c <_svfiprintf_r>
 800aa7a:	1c43      	adds	r3, r0, #1
 800aa7c:	bfbc      	itt	lt
 800aa7e:	238b      	movlt	r3, #139	@ 0x8b
 800aa80:	602b      	strlt	r3, [r5, #0]
 800aa82:	2c00      	cmp	r4, #0
 800aa84:	d0e0      	beq.n	800aa48 <_vsniprintf_r+0x16>
 800aa86:	9b00      	ldr	r3, [sp, #0]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	701a      	strb	r2, [r3, #0]
 800aa8c:	e7dc      	b.n	800aa48 <_vsniprintf_r+0x16>
	...

0800aa90 <vsniprintf>:
 800aa90:	b507      	push	{r0, r1, r2, lr}
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	4613      	mov	r3, r2
 800aa96:	460a      	mov	r2, r1
 800aa98:	4601      	mov	r1, r0
 800aa9a:	4803      	ldr	r0, [pc, #12]	@ (800aaa8 <vsniprintf+0x18>)
 800aa9c:	6800      	ldr	r0, [r0, #0]
 800aa9e:	f7ff ffc8 	bl	800aa32 <_vsniprintf_r>
 800aaa2:	b003      	add	sp, #12
 800aaa4:	f85d fb04 	ldr.w	pc, [sp], #4
 800aaa8:	20000110 	.word	0x20000110

0800aaac <memset>:
 800aaac:	4402      	add	r2, r0
 800aaae:	4603      	mov	r3, r0
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d100      	bne.n	800aab6 <memset+0xa>
 800aab4:	4770      	bx	lr
 800aab6:	f803 1b01 	strb.w	r1, [r3], #1
 800aaba:	e7f9      	b.n	800aab0 <memset+0x4>

0800aabc <_localeconv_r>:
 800aabc:	4800      	ldr	r0, [pc, #0]	@ (800aac0 <_localeconv_r+0x4>)
 800aabe:	4770      	bx	lr
 800aac0:	20000250 	.word	0x20000250

0800aac4 <_close_r>:
 800aac4:	b538      	push	{r3, r4, r5, lr}
 800aac6:	4d06      	ldr	r5, [pc, #24]	@ (800aae0 <_close_r+0x1c>)
 800aac8:	2300      	movs	r3, #0
 800aaca:	4604      	mov	r4, r0
 800aacc:	4608      	mov	r0, r1
 800aace:	602b      	str	r3, [r5, #0]
 800aad0:	f7f6 ff66 	bl	80019a0 <_close>
 800aad4:	1c43      	adds	r3, r0, #1
 800aad6:	d102      	bne.n	800aade <_close_r+0x1a>
 800aad8:	682b      	ldr	r3, [r5, #0]
 800aada:	b103      	cbz	r3, 800aade <_close_r+0x1a>
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	bd38      	pop	{r3, r4, r5, pc}
 800aae0:	20002194 	.word	0x20002194

0800aae4 <_lseek_r>:
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	4d07      	ldr	r5, [pc, #28]	@ (800ab04 <_lseek_r+0x20>)
 800aae8:	4604      	mov	r4, r0
 800aaea:	4608      	mov	r0, r1
 800aaec:	4611      	mov	r1, r2
 800aaee:	2200      	movs	r2, #0
 800aaf0:	602a      	str	r2, [r5, #0]
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	f7f6 ff7b 	bl	80019ee <_lseek>
 800aaf8:	1c43      	adds	r3, r0, #1
 800aafa:	d102      	bne.n	800ab02 <_lseek_r+0x1e>
 800aafc:	682b      	ldr	r3, [r5, #0]
 800aafe:	b103      	cbz	r3, 800ab02 <_lseek_r+0x1e>
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	bd38      	pop	{r3, r4, r5, pc}
 800ab04:	20002194 	.word	0x20002194

0800ab08 <_read_r>:
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	4d07      	ldr	r5, [pc, #28]	@ (800ab28 <_read_r+0x20>)
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	4608      	mov	r0, r1
 800ab10:	4611      	mov	r1, r2
 800ab12:	2200      	movs	r2, #0
 800ab14:	602a      	str	r2, [r5, #0]
 800ab16:	461a      	mov	r2, r3
 800ab18:	f7f6 ff09 	bl	800192e <_read>
 800ab1c:	1c43      	adds	r3, r0, #1
 800ab1e:	d102      	bne.n	800ab26 <_read_r+0x1e>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	b103      	cbz	r3, 800ab26 <_read_r+0x1e>
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	bd38      	pop	{r3, r4, r5, pc}
 800ab28:	20002194 	.word	0x20002194

0800ab2c <_write_r>:
 800ab2c:	b538      	push	{r3, r4, r5, lr}
 800ab2e:	4d07      	ldr	r5, [pc, #28]	@ (800ab4c <_write_r+0x20>)
 800ab30:	4604      	mov	r4, r0
 800ab32:	4608      	mov	r0, r1
 800ab34:	4611      	mov	r1, r2
 800ab36:	2200      	movs	r2, #0
 800ab38:	602a      	str	r2, [r5, #0]
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	f7f6 ff14 	bl	8001968 <_write>
 800ab40:	1c43      	adds	r3, r0, #1
 800ab42:	d102      	bne.n	800ab4a <_write_r+0x1e>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	b103      	cbz	r3, 800ab4a <_write_r+0x1e>
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	bd38      	pop	{r3, r4, r5, pc}
 800ab4c:	20002194 	.word	0x20002194

0800ab50 <__errno>:
 800ab50:	4b01      	ldr	r3, [pc, #4]	@ (800ab58 <__errno+0x8>)
 800ab52:	6818      	ldr	r0, [r3, #0]
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	20000110 	.word	0x20000110

0800ab5c <__libc_init_array>:
 800ab5c:	b570      	push	{r4, r5, r6, lr}
 800ab5e:	4d0d      	ldr	r5, [pc, #52]	@ (800ab94 <__libc_init_array+0x38>)
 800ab60:	4c0d      	ldr	r4, [pc, #52]	@ (800ab98 <__libc_init_array+0x3c>)
 800ab62:	1b64      	subs	r4, r4, r5
 800ab64:	10a4      	asrs	r4, r4, #2
 800ab66:	2600      	movs	r6, #0
 800ab68:	42a6      	cmp	r6, r4
 800ab6a:	d109      	bne.n	800ab80 <__libc_init_array+0x24>
 800ab6c:	4d0b      	ldr	r5, [pc, #44]	@ (800ab9c <__libc_init_array+0x40>)
 800ab6e:	4c0c      	ldr	r4, [pc, #48]	@ (800aba0 <__libc_init_array+0x44>)
 800ab70:	f002 f86a 	bl	800cc48 <_init>
 800ab74:	1b64      	subs	r4, r4, r5
 800ab76:	10a4      	asrs	r4, r4, #2
 800ab78:	2600      	movs	r6, #0
 800ab7a:	42a6      	cmp	r6, r4
 800ab7c:	d105      	bne.n	800ab8a <__libc_init_array+0x2e>
 800ab7e:	bd70      	pop	{r4, r5, r6, pc}
 800ab80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab84:	4798      	blx	r3
 800ab86:	3601      	adds	r6, #1
 800ab88:	e7ee      	b.n	800ab68 <__libc_init_array+0xc>
 800ab8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab8e:	4798      	blx	r3
 800ab90:	3601      	adds	r6, #1
 800ab92:	e7f2      	b.n	800ab7a <__libc_init_array+0x1e>
 800ab94:	0800d07c 	.word	0x0800d07c
 800ab98:	0800d07c 	.word	0x0800d07c
 800ab9c:	0800d07c 	.word	0x0800d07c
 800aba0:	0800d080 	.word	0x0800d080

0800aba4 <__retarget_lock_init_recursive>:
 800aba4:	4770      	bx	lr

0800aba6 <__retarget_lock_acquire_recursive>:
 800aba6:	4770      	bx	lr

0800aba8 <__retarget_lock_release_recursive>:
 800aba8:	4770      	bx	lr

0800abaa <quorem>:
 800abaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abae:	6903      	ldr	r3, [r0, #16]
 800abb0:	690c      	ldr	r4, [r1, #16]
 800abb2:	42a3      	cmp	r3, r4
 800abb4:	4607      	mov	r7, r0
 800abb6:	db7e      	blt.n	800acb6 <quorem+0x10c>
 800abb8:	3c01      	subs	r4, #1
 800abba:	f101 0814 	add.w	r8, r1, #20
 800abbe:	00a3      	lsls	r3, r4, #2
 800abc0:	f100 0514 	add.w	r5, r0, #20
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abca:	9301      	str	r3, [sp, #4]
 800abcc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800abd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abd4:	3301      	adds	r3, #1
 800abd6:	429a      	cmp	r2, r3
 800abd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abdc:	fbb2 f6f3 	udiv	r6, r2, r3
 800abe0:	d32e      	bcc.n	800ac40 <quorem+0x96>
 800abe2:	f04f 0a00 	mov.w	sl, #0
 800abe6:	46c4      	mov	ip, r8
 800abe8:	46ae      	mov	lr, r5
 800abea:	46d3      	mov	fp, sl
 800abec:	f85c 3b04 	ldr.w	r3, [ip], #4
 800abf0:	b298      	uxth	r0, r3
 800abf2:	fb06 a000 	mla	r0, r6, r0, sl
 800abf6:	0c02      	lsrs	r2, r0, #16
 800abf8:	0c1b      	lsrs	r3, r3, #16
 800abfa:	fb06 2303 	mla	r3, r6, r3, r2
 800abfe:	f8de 2000 	ldr.w	r2, [lr]
 800ac02:	b280      	uxth	r0, r0
 800ac04:	b292      	uxth	r2, r2
 800ac06:	1a12      	subs	r2, r2, r0
 800ac08:	445a      	add	r2, fp
 800ac0a:	f8de 0000 	ldr.w	r0, [lr]
 800ac0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ac18:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ac1c:	b292      	uxth	r2, r2
 800ac1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ac22:	45e1      	cmp	r9, ip
 800ac24:	f84e 2b04 	str.w	r2, [lr], #4
 800ac28:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ac2c:	d2de      	bcs.n	800abec <quorem+0x42>
 800ac2e:	9b00      	ldr	r3, [sp, #0]
 800ac30:	58eb      	ldr	r3, [r5, r3]
 800ac32:	b92b      	cbnz	r3, 800ac40 <quorem+0x96>
 800ac34:	9b01      	ldr	r3, [sp, #4]
 800ac36:	3b04      	subs	r3, #4
 800ac38:	429d      	cmp	r5, r3
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	d32f      	bcc.n	800ac9e <quorem+0xf4>
 800ac3e:	613c      	str	r4, [r7, #16]
 800ac40:	4638      	mov	r0, r7
 800ac42:	f001 f97f 	bl	800bf44 <__mcmp>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	db25      	blt.n	800ac96 <quorem+0xec>
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac52:	f8d1 c000 	ldr.w	ip, [r1]
 800ac56:	fa1f fe82 	uxth.w	lr, r2
 800ac5a:	fa1f f38c 	uxth.w	r3, ip
 800ac5e:	eba3 030e 	sub.w	r3, r3, lr
 800ac62:	4403      	add	r3, r0
 800ac64:	0c12      	lsrs	r2, r2, #16
 800ac66:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ac6a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac74:	45c1      	cmp	r9, r8
 800ac76:	f841 3b04 	str.w	r3, [r1], #4
 800ac7a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac7e:	d2e6      	bcs.n	800ac4e <quorem+0xa4>
 800ac80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac88:	b922      	cbnz	r2, 800ac94 <quorem+0xea>
 800ac8a:	3b04      	subs	r3, #4
 800ac8c:	429d      	cmp	r5, r3
 800ac8e:	461a      	mov	r2, r3
 800ac90:	d30b      	bcc.n	800acaa <quorem+0x100>
 800ac92:	613c      	str	r4, [r7, #16]
 800ac94:	3601      	adds	r6, #1
 800ac96:	4630      	mov	r0, r6
 800ac98:	b003      	add	sp, #12
 800ac9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9e:	6812      	ldr	r2, [r2, #0]
 800aca0:	3b04      	subs	r3, #4
 800aca2:	2a00      	cmp	r2, #0
 800aca4:	d1cb      	bne.n	800ac3e <quorem+0x94>
 800aca6:	3c01      	subs	r4, #1
 800aca8:	e7c6      	b.n	800ac38 <quorem+0x8e>
 800acaa:	6812      	ldr	r2, [r2, #0]
 800acac:	3b04      	subs	r3, #4
 800acae:	2a00      	cmp	r2, #0
 800acb0:	d1ef      	bne.n	800ac92 <quorem+0xe8>
 800acb2:	3c01      	subs	r4, #1
 800acb4:	e7ea      	b.n	800ac8c <quorem+0xe2>
 800acb6:	2000      	movs	r0, #0
 800acb8:	e7ee      	b.n	800ac98 <quorem+0xee>
 800acba:	0000      	movs	r0, r0
 800acbc:	0000      	movs	r0, r0
	...

0800acc0 <_dtoa_r>:
 800acc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc4:	69c7      	ldr	r7, [r0, #28]
 800acc6:	b097      	sub	sp, #92	@ 0x5c
 800acc8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800accc:	ec55 4b10 	vmov	r4, r5, d0
 800acd0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800acd2:	9107      	str	r1, [sp, #28]
 800acd4:	4681      	mov	r9, r0
 800acd6:	920c      	str	r2, [sp, #48]	@ 0x30
 800acd8:	9311      	str	r3, [sp, #68]	@ 0x44
 800acda:	b97f      	cbnz	r7, 800acfc <_dtoa_r+0x3c>
 800acdc:	2010      	movs	r0, #16
 800acde:	f000 fe09 	bl	800b8f4 <malloc>
 800ace2:	4602      	mov	r2, r0
 800ace4:	f8c9 001c 	str.w	r0, [r9, #28]
 800ace8:	b920      	cbnz	r0, 800acf4 <_dtoa_r+0x34>
 800acea:	4ba9      	ldr	r3, [pc, #676]	@ (800af90 <_dtoa_r+0x2d0>)
 800acec:	21ef      	movs	r1, #239	@ 0xef
 800acee:	48a9      	ldr	r0, [pc, #676]	@ (800af94 <_dtoa_r+0x2d4>)
 800acf0:	f001 fc6c 	bl	800c5cc <__assert_func>
 800acf4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800acf8:	6007      	str	r7, [r0, #0]
 800acfa:	60c7      	str	r7, [r0, #12]
 800acfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ad00:	6819      	ldr	r1, [r3, #0]
 800ad02:	b159      	cbz	r1, 800ad1c <_dtoa_r+0x5c>
 800ad04:	685a      	ldr	r2, [r3, #4]
 800ad06:	604a      	str	r2, [r1, #4]
 800ad08:	2301      	movs	r3, #1
 800ad0a:	4093      	lsls	r3, r2
 800ad0c:	608b      	str	r3, [r1, #8]
 800ad0e:	4648      	mov	r0, r9
 800ad10:	f000 fee6 	bl	800bae0 <_Bfree>
 800ad14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	601a      	str	r2, [r3, #0]
 800ad1c:	1e2b      	subs	r3, r5, #0
 800ad1e:	bfb9      	ittee	lt
 800ad20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ad24:	9305      	strlt	r3, [sp, #20]
 800ad26:	2300      	movge	r3, #0
 800ad28:	6033      	strge	r3, [r6, #0]
 800ad2a:	9f05      	ldr	r7, [sp, #20]
 800ad2c:	4b9a      	ldr	r3, [pc, #616]	@ (800af98 <_dtoa_r+0x2d8>)
 800ad2e:	bfbc      	itt	lt
 800ad30:	2201      	movlt	r2, #1
 800ad32:	6032      	strlt	r2, [r6, #0]
 800ad34:	43bb      	bics	r3, r7
 800ad36:	d112      	bne.n	800ad5e <_dtoa_r+0x9e>
 800ad38:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ad3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ad3e:	6013      	str	r3, [r2, #0]
 800ad40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad44:	4323      	orrs	r3, r4
 800ad46:	f000 855a 	beq.w	800b7fe <_dtoa_r+0xb3e>
 800ad4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad4c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800afac <_dtoa_r+0x2ec>
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f000 855c 	beq.w	800b80e <_dtoa_r+0xb4e>
 800ad56:	f10a 0303 	add.w	r3, sl, #3
 800ad5a:	f000 bd56 	b.w	800b80a <_dtoa_r+0xb4a>
 800ad5e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ad62:	2200      	movs	r2, #0
 800ad64:	ec51 0b17 	vmov	r0, r1, d7
 800ad68:	2300      	movs	r3, #0
 800ad6a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ad6e:	f7f5 feb3 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad72:	4680      	mov	r8, r0
 800ad74:	b158      	cbz	r0, 800ad8e <_dtoa_r+0xce>
 800ad76:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ad78:	2301      	movs	r3, #1
 800ad7a:	6013      	str	r3, [r2, #0]
 800ad7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad7e:	b113      	cbz	r3, 800ad86 <_dtoa_r+0xc6>
 800ad80:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ad82:	4b86      	ldr	r3, [pc, #536]	@ (800af9c <_dtoa_r+0x2dc>)
 800ad84:	6013      	str	r3, [r2, #0]
 800ad86:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800afb0 <_dtoa_r+0x2f0>
 800ad8a:	f000 bd40 	b.w	800b80e <_dtoa_r+0xb4e>
 800ad8e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ad92:	aa14      	add	r2, sp, #80	@ 0x50
 800ad94:	a915      	add	r1, sp, #84	@ 0x54
 800ad96:	4648      	mov	r0, r9
 800ad98:	f001 f984 	bl	800c0a4 <__d2b>
 800ad9c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ada0:	9002      	str	r0, [sp, #8]
 800ada2:	2e00      	cmp	r6, #0
 800ada4:	d078      	beq.n	800ae98 <_dtoa_r+0x1d8>
 800ada6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ada8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800adac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800adb4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800adb8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800adbc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800adc0:	4619      	mov	r1, r3
 800adc2:	2200      	movs	r2, #0
 800adc4:	4b76      	ldr	r3, [pc, #472]	@ (800afa0 <_dtoa_r+0x2e0>)
 800adc6:	f7f5 fa67 	bl	8000298 <__aeabi_dsub>
 800adca:	a36b      	add	r3, pc, #428	@ (adr r3, 800af78 <_dtoa_r+0x2b8>)
 800adcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add0:	f7f5 fc1a 	bl	8000608 <__aeabi_dmul>
 800add4:	a36a      	add	r3, pc, #424	@ (adr r3, 800af80 <_dtoa_r+0x2c0>)
 800add6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adda:	f7f5 fa5f 	bl	800029c <__adddf3>
 800adde:	4604      	mov	r4, r0
 800ade0:	4630      	mov	r0, r6
 800ade2:	460d      	mov	r5, r1
 800ade4:	f7f5 fba6 	bl	8000534 <__aeabi_i2d>
 800ade8:	a367      	add	r3, pc, #412	@ (adr r3, 800af88 <_dtoa_r+0x2c8>)
 800adea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adee:	f7f5 fc0b 	bl	8000608 <__aeabi_dmul>
 800adf2:	4602      	mov	r2, r0
 800adf4:	460b      	mov	r3, r1
 800adf6:	4620      	mov	r0, r4
 800adf8:	4629      	mov	r1, r5
 800adfa:	f7f5 fa4f 	bl	800029c <__adddf3>
 800adfe:	4604      	mov	r4, r0
 800ae00:	460d      	mov	r5, r1
 800ae02:	f7f5 feb1 	bl	8000b68 <__aeabi_d2iz>
 800ae06:	2200      	movs	r2, #0
 800ae08:	4607      	mov	r7, r0
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	4629      	mov	r1, r5
 800ae10:	f7f5 fe6c 	bl	8000aec <__aeabi_dcmplt>
 800ae14:	b140      	cbz	r0, 800ae28 <_dtoa_r+0x168>
 800ae16:	4638      	mov	r0, r7
 800ae18:	f7f5 fb8c 	bl	8000534 <__aeabi_i2d>
 800ae1c:	4622      	mov	r2, r4
 800ae1e:	462b      	mov	r3, r5
 800ae20:	f7f5 fe5a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae24:	b900      	cbnz	r0, 800ae28 <_dtoa_r+0x168>
 800ae26:	3f01      	subs	r7, #1
 800ae28:	2f16      	cmp	r7, #22
 800ae2a:	d852      	bhi.n	800aed2 <_dtoa_r+0x212>
 800ae2c:	4b5d      	ldr	r3, [pc, #372]	@ (800afa4 <_dtoa_r+0x2e4>)
 800ae2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae3a:	f7f5 fe57 	bl	8000aec <__aeabi_dcmplt>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	d049      	beq.n	800aed6 <_dtoa_r+0x216>
 800ae42:	3f01      	subs	r7, #1
 800ae44:	2300      	movs	r3, #0
 800ae46:	9310      	str	r3, [sp, #64]	@ 0x40
 800ae48:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ae4a:	1b9b      	subs	r3, r3, r6
 800ae4c:	1e5a      	subs	r2, r3, #1
 800ae4e:	bf45      	ittet	mi
 800ae50:	f1c3 0301 	rsbmi	r3, r3, #1
 800ae54:	9300      	strmi	r3, [sp, #0]
 800ae56:	2300      	movpl	r3, #0
 800ae58:	2300      	movmi	r3, #0
 800ae5a:	9206      	str	r2, [sp, #24]
 800ae5c:	bf54      	ite	pl
 800ae5e:	9300      	strpl	r3, [sp, #0]
 800ae60:	9306      	strmi	r3, [sp, #24]
 800ae62:	2f00      	cmp	r7, #0
 800ae64:	db39      	blt.n	800aeda <_dtoa_r+0x21a>
 800ae66:	9b06      	ldr	r3, [sp, #24]
 800ae68:	970d      	str	r7, [sp, #52]	@ 0x34
 800ae6a:	443b      	add	r3, r7
 800ae6c:	9306      	str	r3, [sp, #24]
 800ae6e:	2300      	movs	r3, #0
 800ae70:	9308      	str	r3, [sp, #32]
 800ae72:	9b07      	ldr	r3, [sp, #28]
 800ae74:	2b09      	cmp	r3, #9
 800ae76:	d863      	bhi.n	800af40 <_dtoa_r+0x280>
 800ae78:	2b05      	cmp	r3, #5
 800ae7a:	bfc4      	itt	gt
 800ae7c:	3b04      	subgt	r3, #4
 800ae7e:	9307      	strgt	r3, [sp, #28]
 800ae80:	9b07      	ldr	r3, [sp, #28]
 800ae82:	f1a3 0302 	sub.w	r3, r3, #2
 800ae86:	bfcc      	ite	gt
 800ae88:	2400      	movgt	r4, #0
 800ae8a:	2401      	movle	r4, #1
 800ae8c:	2b03      	cmp	r3, #3
 800ae8e:	d863      	bhi.n	800af58 <_dtoa_r+0x298>
 800ae90:	e8df f003 	tbb	[pc, r3]
 800ae94:	2b375452 	.word	0x2b375452
 800ae98:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ae9c:	441e      	add	r6, r3
 800ae9e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aea2:	2b20      	cmp	r3, #32
 800aea4:	bfc1      	itttt	gt
 800aea6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aeaa:	409f      	lslgt	r7, r3
 800aeac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aeb0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aeb4:	bfd6      	itet	le
 800aeb6:	f1c3 0320 	rsble	r3, r3, #32
 800aeba:	ea47 0003 	orrgt.w	r0, r7, r3
 800aebe:	fa04 f003 	lslle.w	r0, r4, r3
 800aec2:	f7f5 fb27 	bl	8000514 <__aeabi_ui2d>
 800aec6:	2201      	movs	r2, #1
 800aec8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aecc:	3e01      	subs	r6, #1
 800aece:	9212      	str	r2, [sp, #72]	@ 0x48
 800aed0:	e776      	b.n	800adc0 <_dtoa_r+0x100>
 800aed2:	2301      	movs	r3, #1
 800aed4:	e7b7      	b.n	800ae46 <_dtoa_r+0x186>
 800aed6:	9010      	str	r0, [sp, #64]	@ 0x40
 800aed8:	e7b6      	b.n	800ae48 <_dtoa_r+0x188>
 800aeda:	9b00      	ldr	r3, [sp, #0]
 800aedc:	1bdb      	subs	r3, r3, r7
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	427b      	negs	r3, r7
 800aee2:	9308      	str	r3, [sp, #32]
 800aee4:	2300      	movs	r3, #0
 800aee6:	930d      	str	r3, [sp, #52]	@ 0x34
 800aee8:	e7c3      	b.n	800ae72 <_dtoa_r+0x1b2>
 800aeea:	2301      	movs	r3, #1
 800aeec:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aef0:	eb07 0b03 	add.w	fp, r7, r3
 800aef4:	f10b 0301 	add.w	r3, fp, #1
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	9303      	str	r3, [sp, #12]
 800aefc:	bfb8      	it	lt
 800aefe:	2301      	movlt	r3, #1
 800af00:	e006      	b.n	800af10 <_dtoa_r+0x250>
 800af02:	2301      	movs	r3, #1
 800af04:	9309      	str	r3, [sp, #36]	@ 0x24
 800af06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af08:	2b00      	cmp	r3, #0
 800af0a:	dd28      	ble.n	800af5e <_dtoa_r+0x29e>
 800af0c:	469b      	mov	fp, r3
 800af0e:	9303      	str	r3, [sp, #12]
 800af10:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800af14:	2100      	movs	r1, #0
 800af16:	2204      	movs	r2, #4
 800af18:	f102 0514 	add.w	r5, r2, #20
 800af1c:	429d      	cmp	r5, r3
 800af1e:	d926      	bls.n	800af6e <_dtoa_r+0x2ae>
 800af20:	6041      	str	r1, [r0, #4]
 800af22:	4648      	mov	r0, r9
 800af24:	f000 fd9c 	bl	800ba60 <_Balloc>
 800af28:	4682      	mov	sl, r0
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d142      	bne.n	800afb4 <_dtoa_r+0x2f4>
 800af2e:	4b1e      	ldr	r3, [pc, #120]	@ (800afa8 <_dtoa_r+0x2e8>)
 800af30:	4602      	mov	r2, r0
 800af32:	f240 11af 	movw	r1, #431	@ 0x1af
 800af36:	e6da      	b.n	800acee <_dtoa_r+0x2e>
 800af38:	2300      	movs	r3, #0
 800af3a:	e7e3      	b.n	800af04 <_dtoa_r+0x244>
 800af3c:	2300      	movs	r3, #0
 800af3e:	e7d5      	b.n	800aeec <_dtoa_r+0x22c>
 800af40:	2401      	movs	r4, #1
 800af42:	2300      	movs	r3, #0
 800af44:	9307      	str	r3, [sp, #28]
 800af46:	9409      	str	r4, [sp, #36]	@ 0x24
 800af48:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800af4c:	2200      	movs	r2, #0
 800af4e:	f8cd b00c 	str.w	fp, [sp, #12]
 800af52:	2312      	movs	r3, #18
 800af54:	920c      	str	r2, [sp, #48]	@ 0x30
 800af56:	e7db      	b.n	800af10 <_dtoa_r+0x250>
 800af58:	2301      	movs	r3, #1
 800af5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800af5c:	e7f4      	b.n	800af48 <_dtoa_r+0x288>
 800af5e:	f04f 0b01 	mov.w	fp, #1
 800af62:	f8cd b00c 	str.w	fp, [sp, #12]
 800af66:	465b      	mov	r3, fp
 800af68:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800af6c:	e7d0      	b.n	800af10 <_dtoa_r+0x250>
 800af6e:	3101      	adds	r1, #1
 800af70:	0052      	lsls	r2, r2, #1
 800af72:	e7d1      	b.n	800af18 <_dtoa_r+0x258>
 800af74:	f3af 8000 	nop.w
 800af78:	636f4361 	.word	0x636f4361
 800af7c:	3fd287a7 	.word	0x3fd287a7
 800af80:	8b60c8b3 	.word	0x8b60c8b3
 800af84:	3fc68a28 	.word	0x3fc68a28
 800af88:	509f79fb 	.word	0x509f79fb
 800af8c:	3fd34413 	.word	0x3fd34413
 800af90:	0800cd3d 	.word	0x0800cd3d
 800af94:	0800cd54 	.word	0x0800cd54
 800af98:	7ff00000 	.word	0x7ff00000
 800af9c:	0800cd0d 	.word	0x0800cd0d
 800afa0:	3ff80000 	.word	0x3ff80000
 800afa4:	0800cea8 	.word	0x0800cea8
 800afa8:	0800cdac 	.word	0x0800cdac
 800afac:	0800cd39 	.word	0x0800cd39
 800afb0:	0800cd0c 	.word	0x0800cd0c
 800afb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800afb8:	6018      	str	r0, [r3, #0]
 800afba:	9b03      	ldr	r3, [sp, #12]
 800afbc:	2b0e      	cmp	r3, #14
 800afbe:	f200 80a1 	bhi.w	800b104 <_dtoa_r+0x444>
 800afc2:	2c00      	cmp	r4, #0
 800afc4:	f000 809e 	beq.w	800b104 <_dtoa_r+0x444>
 800afc8:	2f00      	cmp	r7, #0
 800afca:	dd33      	ble.n	800b034 <_dtoa_r+0x374>
 800afcc:	4b9c      	ldr	r3, [pc, #624]	@ (800b240 <_dtoa_r+0x580>)
 800afce:	f007 020f 	and.w	r2, r7, #15
 800afd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afd6:	ed93 7b00 	vldr	d7, [r3]
 800afda:	05f8      	lsls	r0, r7, #23
 800afdc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800afe0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800afe4:	d516      	bpl.n	800b014 <_dtoa_r+0x354>
 800afe6:	4b97      	ldr	r3, [pc, #604]	@ (800b244 <_dtoa_r+0x584>)
 800afe8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800afec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aff0:	f7f5 fc34 	bl	800085c <__aeabi_ddiv>
 800aff4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aff8:	f004 040f 	and.w	r4, r4, #15
 800affc:	2603      	movs	r6, #3
 800affe:	4d91      	ldr	r5, [pc, #580]	@ (800b244 <_dtoa_r+0x584>)
 800b000:	b954      	cbnz	r4, 800b018 <_dtoa_r+0x358>
 800b002:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b006:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b00a:	f7f5 fc27 	bl	800085c <__aeabi_ddiv>
 800b00e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b012:	e028      	b.n	800b066 <_dtoa_r+0x3a6>
 800b014:	2602      	movs	r6, #2
 800b016:	e7f2      	b.n	800affe <_dtoa_r+0x33e>
 800b018:	07e1      	lsls	r1, r4, #31
 800b01a:	d508      	bpl.n	800b02e <_dtoa_r+0x36e>
 800b01c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b020:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b024:	f7f5 faf0 	bl	8000608 <__aeabi_dmul>
 800b028:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b02c:	3601      	adds	r6, #1
 800b02e:	1064      	asrs	r4, r4, #1
 800b030:	3508      	adds	r5, #8
 800b032:	e7e5      	b.n	800b000 <_dtoa_r+0x340>
 800b034:	f000 80af 	beq.w	800b196 <_dtoa_r+0x4d6>
 800b038:	427c      	negs	r4, r7
 800b03a:	4b81      	ldr	r3, [pc, #516]	@ (800b240 <_dtoa_r+0x580>)
 800b03c:	4d81      	ldr	r5, [pc, #516]	@ (800b244 <_dtoa_r+0x584>)
 800b03e:	f004 020f 	and.w	r2, r4, #15
 800b042:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b04e:	f7f5 fadb 	bl	8000608 <__aeabi_dmul>
 800b052:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b056:	1124      	asrs	r4, r4, #4
 800b058:	2300      	movs	r3, #0
 800b05a:	2602      	movs	r6, #2
 800b05c:	2c00      	cmp	r4, #0
 800b05e:	f040 808f 	bne.w	800b180 <_dtoa_r+0x4c0>
 800b062:	2b00      	cmp	r3, #0
 800b064:	d1d3      	bne.n	800b00e <_dtoa_r+0x34e>
 800b066:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b068:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f000 8094 	beq.w	800b19a <_dtoa_r+0x4da>
 800b072:	4b75      	ldr	r3, [pc, #468]	@ (800b248 <_dtoa_r+0x588>)
 800b074:	2200      	movs	r2, #0
 800b076:	4620      	mov	r0, r4
 800b078:	4629      	mov	r1, r5
 800b07a:	f7f5 fd37 	bl	8000aec <__aeabi_dcmplt>
 800b07e:	2800      	cmp	r0, #0
 800b080:	f000 808b 	beq.w	800b19a <_dtoa_r+0x4da>
 800b084:	9b03      	ldr	r3, [sp, #12]
 800b086:	2b00      	cmp	r3, #0
 800b088:	f000 8087 	beq.w	800b19a <_dtoa_r+0x4da>
 800b08c:	f1bb 0f00 	cmp.w	fp, #0
 800b090:	dd34      	ble.n	800b0fc <_dtoa_r+0x43c>
 800b092:	4620      	mov	r0, r4
 800b094:	4b6d      	ldr	r3, [pc, #436]	@ (800b24c <_dtoa_r+0x58c>)
 800b096:	2200      	movs	r2, #0
 800b098:	4629      	mov	r1, r5
 800b09a:	f7f5 fab5 	bl	8000608 <__aeabi_dmul>
 800b09e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0a2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b0a6:	3601      	adds	r6, #1
 800b0a8:	465c      	mov	r4, fp
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	f7f5 fa42 	bl	8000534 <__aeabi_i2d>
 800b0b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0b4:	f7f5 faa8 	bl	8000608 <__aeabi_dmul>
 800b0b8:	4b65      	ldr	r3, [pc, #404]	@ (800b250 <_dtoa_r+0x590>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f7f5 f8ee 	bl	800029c <__adddf3>
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b0c6:	2c00      	cmp	r4, #0
 800b0c8:	d16a      	bne.n	800b1a0 <_dtoa_r+0x4e0>
 800b0ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0ce:	4b61      	ldr	r3, [pc, #388]	@ (800b254 <_dtoa_r+0x594>)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f7f5 f8e1 	bl	8000298 <__aeabi_dsub>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	460b      	mov	r3, r1
 800b0da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0de:	462a      	mov	r2, r5
 800b0e0:	4633      	mov	r3, r6
 800b0e2:	f7f5 fd21 	bl	8000b28 <__aeabi_dcmpgt>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	f040 8298 	bne.w	800b61c <_dtoa_r+0x95c>
 800b0ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0f0:	462a      	mov	r2, r5
 800b0f2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b0f6:	f7f5 fcf9 	bl	8000aec <__aeabi_dcmplt>
 800b0fa:	bb38      	cbnz	r0, 800b14c <_dtoa_r+0x48c>
 800b0fc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b100:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b104:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b106:	2b00      	cmp	r3, #0
 800b108:	f2c0 8157 	blt.w	800b3ba <_dtoa_r+0x6fa>
 800b10c:	2f0e      	cmp	r7, #14
 800b10e:	f300 8154 	bgt.w	800b3ba <_dtoa_r+0x6fa>
 800b112:	4b4b      	ldr	r3, [pc, #300]	@ (800b240 <_dtoa_r+0x580>)
 800b114:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b118:	ed93 7b00 	vldr	d7, [r3]
 800b11c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b11e:	2b00      	cmp	r3, #0
 800b120:	ed8d 7b00 	vstr	d7, [sp]
 800b124:	f280 80e5 	bge.w	800b2f2 <_dtoa_r+0x632>
 800b128:	9b03      	ldr	r3, [sp, #12]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f300 80e1 	bgt.w	800b2f2 <_dtoa_r+0x632>
 800b130:	d10c      	bne.n	800b14c <_dtoa_r+0x48c>
 800b132:	4b48      	ldr	r3, [pc, #288]	@ (800b254 <_dtoa_r+0x594>)
 800b134:	2200      	movs	r2, #0
 800b136:	ec51 0b17 	vmov	r0, r1, d7
 800b13a:	f7f5 fa65 	bl	8000608 <__aeabi_dmul>
 800b13e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b142:	f7f5 fce7 	bl	8000b14 <__aeabi_dcmpge>
 800b146:	2800      	cmp	r0, #0
 800b148:	f000 8266 	beq.w	800b618 <_dtoa_r+0x958>
 800b14c:	2400      	movs	r4, #0
 800b14e:	4625      	mov	r5, r4
 800b150:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b152:	4656      	mov	r6, sl
 800b154:	ea6f 0803 	mvn.w	r8, r3
 800b158:	2700      	movs	r7, #0
 800b15a:	4621      	mov	r1, r4
 800b15c:	4648      	mov	r0, r9
 800b15e:	f000 fcbf 	bl	800bae0 <_Bfree>
 800b162:	2d00      	cmp	r5, #0
 800b164:	f000 80bd 	beq.w	800b2e2 <_dtoa_r+0x622>
 800b168:	b12f      	cbz	r7, 800b176 <_dtoa_r+0x4b6>
 800b16a:	42af      	cmp	r7, r5
 800b16c:	d003      	beq.n	800b176 <_dtoa_r+0x4b6>
 800b16e:	4639      	mov	r1, r7
 800b170:	4648      	mov	r0, r9
 800b172:	f000 fcb5 	bl	800bae0 <_Bfree>
 800b176:	4629      	mov	r1, r5
 800b178:	4648      	mov	r0, r9
 800b17a:	f000 fcb1 	bl	800bae0 <_Bfree>
 800b17e:	e0b0      	b.n	800b2e2 <_dtoa_r+0x622>
 800b180:	07e2      	lsls	r2, r4, #31
 800b182:	d505      	bpl.n	800b190 <_dtoa_r+0x4d0>
 800b184:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b188:	f7f5 fa3e 	bl	8000608 <__aeabi_dmul>
 800b18c:	3601      	adds	r6, #1
 800b18e:	2301      	movs	r3, #1
 800b190:	1064      	asrs	r4, r4, #1
 800b192:	3508      	adds	r5, #8
 800b194:	e762      	b.n	800b05c <_dtoa_r+0x39c>
 800b196:	2602      	movs	r6, #2
 800b198:	e765      	b.n	800b066 <_dtoa_r+0x3a6>
 800b19a:	9c03      	ldr	r4, [sp, #12]
 800b19c:	46b8      	mov	r8, r7
 800b19e:	e784      	b.n	800b0aa <_dtoa_r+0x3ea>
 800b1a0:	4b27      	ldr	r3, [pc, #156]	@ (800b240 <_dtoa_r+0x580>)
 800b1a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b1a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b1a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b1ac:	4454      	add	r4, sl
 800b1ae:	2900      	cmp	r1, #0
 800b1b0:	d054      	beq.n	800b25c <_dtoa_r+0x59c>
 800b1b2:	4929      	ldr	r1, [pc, #164]	@ (800b258 <_dtoa_r+0x598>)
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	f7f5 fb51 	bl	800085c <__aeabi_ddiv>
 800b1ba:	4633      	mov	r3, r6
 800b1bc:	462a      	mov	r2, r5
 800b1be:	f7f5 f86b 	bl	8000298 <__aeabi_dsub>
 800b1c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b1c6:	4656      	mov	r6, sl
 800b1c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1cc:	f7f5 fccc 	bl	8000b68 <__aeabi_d2iz>
 800b1d0:	4605      	mov	r5, r0
 800b1d2:	f7f5 f9af 	bl	8000534 <__aeabi_i2d>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	460b      	mov	r3, r1
 800b1da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1de:	f7f5 f85b 	bl	8000298 <__aeabi_dsub>
 800b1e2:	3530      	adds	r5, #48	@ 0x30
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b1ec:	f806 5b01 	strb.w	r5, [r6], #1
 800b1f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b1f4:	f7f5 fc7a 	bl	8000aec <__aeabi_dcmplt>
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d172      	bne.n	800b2e2 <_dtoa_r+0x622>
 800b1fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b200:	4911      	ldr	r1, [pc, #68]	@ (800b248 <_dtoa_r+0x588>)
 800b202:	2000      	movs	r0, #0
 800b204:	f7f5 f848 	bl	8000298 <__aeabi_dsub>
 800b208:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b20c:	f7f5 fc6e 	bl	8000aec <__aeabi_dcmplt>
 800b210:	2800      	cmp	r0, #0
 800b212:	f040 80b4 	bne.w	800b37e <_dtoa_r+0x6be>
 800b216:	42a6      	cmp	r6, r4
 800b218:	f43f af70 	beq.w	800b0fc <_dtoa_r+0x43c>
 800b21c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b220:	4b0a      	ldr	r3, [pc, #40]	@ (800b24c <_dtoa_r+0x58c>)
 800b222:	2200      	movs	r2, #0
 800b224:	f7f5 f9f0 	bl	8000608 <__aeabi_dmul>
 800b228:	4b08      	ldr	r3, [pc, #32]	@ (800b24c <_dtoa_r+0x58c>)
 800b22a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b22e:	2200      	movs	r2, #0
 800b230:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b234:	f7f5 f9e8 	bl	8000608 <__aeabi_dmul>
 800b238:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b23c:	e7c4      	b.n	800b1c8 <_dtoa_r+0x508>
 800b23e:	bf00      	nop
 800b240:	0800cea8 	.word	0x0800cea8
 800b244:	0800ce80 	.word	0x0800ce80
 800b248:	3ff00000 	.word	0x3ff00000
 800b24c:	40240000 	.word	0x40240000
 800b250:	401c0000 	.word	0x401c0000
 800b254:	40140000 	.word	0x40140000
 800b258:	3fe00000 	.word	0x3fe00000
 800b25c:	4631      	mov	r1, r6
 800b25e:	4628      	mov	r0, r5
 800b260:	f7f5 f9d2 	bl	8000608 <__aeabi_dmul>
 800b264:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b268:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b26a:	4656      	mov	r6, sl
 800b26c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b270:	f7f5 fc7a 	bl	8000b68 <__aeabi_d2iz>
 800b274:	4605      	mov	r5, r0
 800b276:	f7f5 f95d 	bl	8000534 <__aeabi_i2d>
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b282:	f7f5 f809 	bl	8000298 <__aeabi_dsub>
 800b286:	3530      	adds	r5, #48	@ 0x30
 800b288:	f806 5b01 	strb.w	r5, [r6], #1
 800b28c:	4602      	mov	r2, r0
 800b28e:	460b      	mov	r3, r1
 800b290:	42a6      	cmp	r6, r4
 800b292:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b296:	f04f 0200 	mov.w	r2, #0
 800b29a:	d124      	bne.n	800b2e6 <_dtoa_r+0x626>
 800b29c:	4baf      	ldr	r3, [pc, #700]	@ (800b55c <_dtoa_r+0x89c>)
 800b29e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b2a2:	f7f4 fffb 	bl	800029c <__adddf3>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2ae:	f7f5 fc3b 	bl	8000b28 <__aeabi_dcmpgt>
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	d163      	bne.n	800b37e <_dtoa_r+0x6be>
 800b2b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b2ba:	49a8      	ldr	r1, [pc, #672]	@ (800b55c <_dtoa_r+0x89c>)
 800b2bc:	2000      	movs	r0, #0
 800b2be:	f7f4 ffeb 	bl	8000298 <__aeabi_dsub>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2ca:	f7f5 fc0f 	bl	8000aec <__aeabi_dcmplt>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	f43f af14 	beq.w	800b0fc <_dtoa_r+0x43c>
 800b2d4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b2d6:	1e73      	subs	r3, r6, #1
 800b2d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2de:	2b30      	cmp	r3, #48	@ 0x30
 800b2e0:	d0f8      	beq.n	800b2d4 <_dtoa_r+0x614>
 800b2e2:	4647      	mov	r7, r8
 800b2e4:	e03b      	b.n	800b35e <_dtoa_r+0x69e>
 800b2e6:	4b9e      	ldr	r3, [pc, #632]	@ (800b560 <_dtoa_r+0x8a0>)
 800b2e8:	f7f5 f98e 	bl	8000608 <__aeabi_dmul>
 800b2ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2f0:	e7bc      	b.n	800b26c <_dtoa_r+0x5ac>
 800b2f2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b2f6:	4656      	mov	r6, sl
 800b2f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	4629      	mov	r1, r5
 800b300:	f7f5 faac 	bl	800085c <__aeabi_ddiv>
 800b304:	f7f5 fc30 	bl	8000b68 <__aeabi_d2iz>
 800b308:	4680      	mov	r8, r0
 800b30a:	f7f5 f913 	bl	8000534 <__aeabi_i2d>
 800b30e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b312:	f7f5 f979 	bl	8000608 <__aeabi_dmul>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4620      	mov	r0, r4
 800b31c:	4629      	mov	r1, r5
 800b31e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b322:	f7f4 ffb9 	bl	8000298 <__aeabi_dsub>
 800b326:	f806 4b01 	strb.w	r4, [r6], #1
 800b32a:	9d03      	ldr	r5, [sp, #12]
 800b32c:	eba6 040a 	sub.w	r4, r6, sl
 800b330:	42a5      	cmp	r5, r4
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	d133      	bne.n	800b3a0 <_dtoa_r+0x6e0>
 800b338:	f7f4 ffb0 	bl	800029c <__adddf3>
 800b33c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b340:	4604      	mov	r4, r0
 800b342:	460d      	mov	r5, r1
 800b344:	f7f5 fbf0 	bl	8000b28 <__aeabi_dcmpgt>
 800b348:	b9c0      	cbnz	r0, 800b37c <_dtoa_r+0x6bc>
 800b34a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b34e:	4620      	mov	r0, r4
 800b350:	4629      	mov	r1, r5
 800b352:	f7f5 fbc1 	bl	8000ad8 <__aeabi_dcmpeq>
 800b356:	b110      	cbz	r0, 800b35e <_dtoa_r+0x69e>
 800b358:	f018 0f01 	tst.w	r8, #1
 800b35c:	d10e      	bne.n	800b37c <_dtoa_r+0x6bc>
 800b35e:	9902      	ldr	r1, [sp, #8]
 800b360:	4648      	mov	r0, r9
 800b362:	f000 fbbd 	bl	800bae0 <_Bfree>
 800b366:	2300      	movs	r3, #0
 800b368:	7033      	strb	r3, [r6, #0]
 800b36a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b36c:	3701      	adds	r7, #1
 800b36e:	601f      	str	r7, [r3, #0]
 800b370:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 824b 	beq.w	800b80e <_dtoa_r+0xb4e>
 800b378:	601e      	str	r6, [r3, #0]
 800b37a:	e248      	b.n	800b80e <_dtoa_r+0xb4e>
 800b37c:	46b8      	mov	r8, r7
 800b37e:	4633      	mov	r3, r6
 800b380:	461e      	mov	r6, r3
 800b382:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b386:	2a39      	cmp	r2, #57	@ 0x39
 800b388:	d106      	bne.n	800b398 <_dtoa_r+0x6d8>
 800b38a:	459a      	cmp	sl, r3
 800b38c:	d1f8      	bne.n	800b380 <_dtoa_r+0x6c0>
 800b38e:	2230      	movs	r2, #48	@ 0x30
 800b390:	f108 0801 	add.w	r8, r8, #1
 800b394:	f88a 2000 	strb.w	r2, [sl]
 800b398:	781a      	ldrb	r2, [r3, #0]
 800b39a:	3201      	adds	r2, #1
 800b39c:	701a      	strb	r2, [r3, #0]
 800b39e:	e7a0      	b.n	800b2e2 <_dtoa_r+0x622>
 800b3a0:	4b6f      	ldr	r3, [pc, #444]	@ (800b560 <_dtoa_r+0x8a0>)
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f7f5 f930 	bl	8000608 <__aeabi_dmul>
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	460d      	mov	r5, r1
 800b3b0:	f7f5 fb92 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	d09f      	beq.n	800b2f8 <_dtoa_r+0x638>
 800b3b8:	e7d1      	b.n	800b35e <_dtoa_r+0x69e>
 800b3ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3bc:	2a00      	cmp	r2, #0
 800b3be:	f000 80ea 	beq.w	800b596 <_dtoa_r+0x8d6>
 800b3c2:	9a07      	ldr	r2, [sp, #28]
 800b3c4:	2a01      	cmp	r2, #1
 800b3c6:	f300 80cd 	bgt.w	800b564 <_dtoa_r+0x8a4>
 800b3ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b3cc:	2a00      	cmp	r2, #0
 800b3ce:	f000 80c1 	beq.w	800b554 <_dtoa_r+0x894>
 800b3d2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b3d6:	9c08      	ldr	r4, [sp, #32]
 800b3d8:	9e00      	ldr	r6, [sp, #0]
 800b3da:	9a00      	ldr	r2, [sp, #0]
 800b3dc:	441a      	add	r2, r3
 800b3de:	9200      	str	r2, [sp, #0]
 800b3e0:	9a06      	ldr	r2, [sp, #24]
 800b3e2:	2101      	movs	r1, #1
 800b3e4:	441a      	add	r2, r3
 800b3e6:	4648      	mov	r0, r9
 800b3e8:	9206      	str	r2, [sp, #24]
 800b3ea:	f000 fc2d 	bl	800bc48 <__i2b>
 800b3ee:	4605      	mov	r5, r0
 800b3f0:	b166      	cbz	r6, 800b40c <_dtoa_r+0x74c>
 800b3f2:	9b06      	ldr	r3, [sp, #24]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	dd09      	ble.n	800b40c <_dtoa_r+0x74c>
 800b3f8:	42b3      	cmp	r3, r6
 800b3fa:	9a00      	ldr	r2, [sp, #0]
 800b3fc:	bfa8      	it	ge
 800b3fe:	4633      	movge	r3, r6
 800b400:	1ad2      	subs	r2, r2, r3
 800b402:	9200      	str	r2, [sp, #0]
 800b404:	9a06      	ldr	r2, [sp, #24]
 800b406:	1af6      	subs	r6, r6, r3
 800b408:	1ad3      	subs	r3, r2, r3
 800b40a:	9306      	str	r3, [sp, #24]
 800b40c:	9b08      	ldr	r3, [sp, #32]
 800b40e:	b30b      	cbz	r3, 800b454 <_dtoa_r+0x794>
 800b410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b412:	2b00      	cmp	r3, #0
 800b414:	f000 80c6 	beq.w	800b5a4 <_dtoa_r+0x8e4>
 800b418:	2c00      	cmp	r4, #0
 800b41a:	f000 80c0 	beq.w	800b59e <_dtoa_r+0x8de>
 800b41e:	4629      	mov	r1, r5
 800b420:	4622      	mov	r2, r4
 800b422:	4648      	mov	r0, r9
 800b424:	f000 fcc8 	bl	800bdb8 <__pow5mult>
 800b428:	9a02      	ldr	r2, [sp, #8]
 800b42a:	4601      	mov	r1, r0
 800b42c:	4605      	mov	r5, r0
 800b42e:	4648      	mov	r0, r9
 800b430:	f000 fc20 	bl	800bc74 <__multiply>
 800b434:	9902      	ldr	r1, [sp, #8]
 800b436:	4680      	mov	r8, r0
 800b438:	4648      	mov	r0, r9
 800b43a:	f000 fb51 	bl	800bae0 <_Bfree>
 800b43e:	9b08      	ldr	r3, [sp, #32]
 800b440:	1b1b      	subs	r3, r3, r4
 800b442:	9308      	str	r3, [sp, #32]
 800b444:	f000 80b1 	beq.w	800b5aa <_dtoa_r+0x8ea>
 800b448:	9a08      	ldr	r2, [sp, #32]
 800b44a:	4641      	mov	r1, r8
 800b44c:	4648      	mov	r0, r9
 800b44e:	f000 fcb3 	bl	800bdb8 <__pow5mult>
 800b452:	9002      	str	r0, [sp, #8]
 800b454:	2101      	movs	r1, #1
 800b456:	4648      	mov	r0, r9
 800b458:	f000 fbf6 	bl	800bc48 <__i2b>
 800b45c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b45e:	4604      	mov	r4, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	f000 81d8 	beq.w	800b816 <_dtoa_r+0xb56>
 800b466:	461a      	mov	r2, r3
 800b468:	4601      	mov	r1, r0
 800b46a:	4648      	mov	r0, r9
 800b46c:	f000 fca4 	bl	800bdb8 <__pow5mult>
 800b470:	9b07      	ldr	r3, [sp, #28]
 800b472:	2b01      	cmp	r3, #1
 800b474:	4604      	mov	r4, r0
 800b476:	f300 809f 	bgt.w	800b5b8 <_dtoa_r+0x8f8>
 800b47a:	9b04      	ldr	r3, [sp, #16]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f040 8097 	bne.w	800b5b0 <_dtoa_r+0x8f0>
 800b482:	9b05      	ldr	r3, [sp, #20]
 800b484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f040 8093 	bne.w	800b5b4 <_dtoa_r+0x8f4>
 800b48e:	9b05      	ldr	r3, [sp, #20]
 800b490:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b494:	0d1b      	lsrs	r3, r3, #20
 800b496:	051b      	lsls	r3, r3, #20
 800b498:	b133      	cbz	r3, 800b4a8 <_dtoa_r+0x7e8>
 800b49a:	9b00      	ldr	r3, [sp, #0]
 800b49c:	3301      	adds	r3, #1
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	9b06      	ldr	r3, [sp, #24]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	9306      	str	r3, [sp, #24]
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	9308      	str	r3, [sp, #32]
 800b4aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f000 81b8 	beq.w	800b822 <_dtoa_r+0xb62>
 800b4b2:	6923      	ldr	r3, [r4, #16]
 800b4b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b4b8:	6918      	ldr	r0, [r3, #16]
 800b4ba:	f000 fb79 	bl	800bbb0 <__hi0bits>
 800b4be:	f1c0 0020 	rsb	r0, r0, #32
 800b4c2:	9b06      	ldr	r3, [sp, #24]
 800b4c4:	4418      	add	r0, r3
 800b4c6:	f010 001f 	ands.w	r0, r0, #31
 800b4ca:	f000 8082 	beq.w	800b5d2 <_dtoa_r+0x912>
 800b4ce:	f1c0 0320 	rsb	r3, r0, #32
 800b4d2:	2b04      	cmp	r3, #4
 800b4d4:	dd73      	ble.n	800b5be <_dtoa_r+0x8fe>
 800b4d6:	9b00      	ldr	r3, [sp, #0]
 800b4d8:	f1c0 001c 	rsb	r0, r0, #28
 800b4dc:	4403      	add	r3, r0
 800b4de:	9300      	str	r3, [sp, #0]
 800b4e0:	9b06      	ldr	r3, [sp, #24]
 800b4e2:	4403      	add	r3, r0
 800b4e4:	4406      	add	r6, r0
 800b4e6:	9306      	str	r3, [sp, #24]
 800b4e8:	9b00      	ldr	r3, [sp, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	dd05      	ble.n	800b4fa <_dtoa_r+0x83a>
 800b4ee:	9902      	ldr	r1, [sp, #8]
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	4648      	mov	r0, r9
 800b4f4:	f000 fcba 	bl	800be6c <__lshift>
 800b4f8:	9002      	str	r0, [sp, #8]
 800b4fa:	9b06      	ldr	r3, [sp, #24]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	dd05      	ble.n	800b50c <_dtoa_r+0x84c>
 800b500:	4621      	mov	r1, r4
 800b502:	461a      	mov	r2, r3
 800b504:	4648      	mov	r0, r9
 800b506:	f000 fcb1 	bl	800be6c <__lshift>
 800b50a:	4604      	mov	r4, r0
 800b50c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d061      	beq.n	800b5d6 <_dtoa_r+0x916>
 800b512:	9802      	ldr	r0, [sp, #8]
 800b514:	4621      	mov	r1, r4
 800b516:	f000 fd15 	bl	800bf44 <__mcmp>
 800b51a:	2800      	cmp	r0, #0
 800b51c:	da5b      	bge.n	800b5d6 <_dtoa_r+0x916>
 800b51e:	2300      	movs	r3, #0
 800b520:	9902      	ldr	r1, [sp, #8]
 800b522:	220a      	movs	r2, #10
 800b524:	4648      	mov	r0, r9
 800b526:	f000 fafd 	bl	800bb24 <__multadd>
 800b52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b52c:	9002      	str	r0, [sp, #8]
 800b52e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b532:	2b00      	cmp	r3, #0
 800b534:	f000 8177 	beq.w	800b826 <_dtoa_r+0xb66>
 800b538:	4629      	mov	r1, r5
 800b53a:	2300      	movs	r3, #0
 800b53c:	220a      	movs	r2, #10
 800b53e:	4648      	mov	r0, r9
 800b540:	f000 faf0 	bl	800bb24 <__multadd>
 800b544:	f1bb 0f00 	cmp.w	fp, #0
 800b548:	4605      	mov	r5, r0
 800b54a:	dc6f      	bgt.n	800b62c <_dtoa_r+0x96c>
 800b54c:	9b07      	ldr	r3, [sp, #28]
 800b54e:	2b02      	cmp	r3, #2
 800b550:	dc49      	bgt.n	800b5e6 <_dtoa_r+0x926>
 800b552:	e06b      	b.n	800b62c <_dtoa_r+0x96c>
 800b554:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b556:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b55a:	e73c      	b.n	800b3d6 <_dtoa_r+0x716>
 800b55c:	3fe00000 	.word	0x3fe00000
 800b560:	40240000 	.word	0x40240000
 800b564:	9b03      	ldr	r3, [sp, #12]
 800b566:	1e5c      	subs	r4, r3, #1
 800b568:	9b08      	ldr	r3, [sp, #32]
 800b56a:	42a3      	cmp	r3, r4
 800b56c:	db09      	blt.n	800b582 <_dtoa_r+0x8c2>
 800b56e:	1b1c      	subs	r4, r3, r4
 800b570:	9b03      	ldr	r3, [sp, #12]
 800b572:	2b00      	cmp	r3, #0
 800b574:	f6bf af30 	bge.w	800b3d8 <_dtoa_r+0x718>
 800b578:	9b00      	ldr	r3, [sp, #0]
 800b57a:	9a03      	ldr	r2, [sp, #12]
 800b57c:	1a9e      	subs	r6, r3, r2
 800b57e:	2300      	movs	r3, #0
 800b580:	e72b      	b.n	800b3da <_dtoa_r+0x71a>
 800b582:	9b08      	ldr	r3, [sp, #32]
 800b584:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b586:	9408      	str	r4, [sp, #32]
 800b588:	1ae3      	subs	r3, r4, r3
 800b58a:	441a      	add	r2, r3
 800b58c:	9e00      	ldr	r6, [sp, #0]
 800b58e:	9b03      	ldr	r3, [sp, #12]
 800b590:	920d      	str	r2, [sp, #52]	@ 0x34
 800b592:	2400      	movs	r4, #0
 800b594:	e721      	b.n	800b3da <_dtoa_r+0x71a>
 800b596:	9c08      	ldr	r4, [sp, #32]
 800b598:	9e00      	ldr	r6, [sp, #0]
 800b59a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b59c:	e728      	b.n	800b3f0 <_dtoa_r+0x730>
 800b59e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b5a2:	e751      	b.n	800b448 <_dtoa_r+0x788>
 800b5a4:	9a08      	ldr	r2, [sp, #32]
 800b5a6:	9902      	ldr	r1, [sp, #8]
 800b5a8:	e750      	b.n	800b44c <_dtoa_r+0x78c>
 800b5aa:	f8cd 8008 	str.w	r8, [sp, #8]
 800b5ae:	e751      	b.n	800b454 <_dtoa_r+0x794>
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	e779      	b.n	800b4a8 <_dtoa_r+0x7e8>
 800b5b4:	9b04      	ldr	r3, [sp, #16]
 800b5b6:	e777      	b.n	800b4a8 <_dtoa_r+0x7e8>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	9308      	str	r3, [sp, #32]
 800b5bc:	e779      	b.n	800b4b2 <_dtoa_r+0x7f2>
 800b5be:	d093      	beq.n	800b4e8 <_dtoa_r+0x828>
 800b5c0:	9a00      	ldr	r2, [sp, #0]
 800b5c2:	331c      	adds	r3, #28
 800b5c4:	441a      	add	r2, r3
 800b5c6:	9200      	str	r2, [sp, #0]
 800b5c8:	9a06      	ldr	r2, [sp, #24]
 800b5ca:	441a      	add	r2, r3
 800b5cc:	441e      	add	r6, r3
 800b5ce:	9206      	str	r2, [sp, #24]
 800b5d0:	e78a      	b.n	800b4e8 <_dtoa_r+0x828>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	e7f4      	b.n	800b5c0 <_dtoa_r+0x900>
 800b5d6:	9b03      	ldr	r3, [sp, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	46b8      	mov	r8, r7
 800b5dc:	dc20      	bgt.n	800b620 <_dtoa_r+0x960>
 800b5de:	469b      	mov	fp, r3
 800b5e0:	9b07      	ldr	r3, [sp, #28]
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	dd1e      	ble.n	800b624 <_dtoa_r+0x964>
 800b5e6:	f1bb 0f00 	cmp.w	fp, #0
 800b5ea:	f47f adb1 	bne.w	800b150 <_dtoa_r+0x490>
 800b5ee:	4621      	mov	r1, r4
 800b5f0:	465b      	mov	r3, fp
 800b5f2:	2205      	movs	r2, #5
 800b5f4:	4648      	mov	r0, r9
 800b5f6:	f000 fa95 	bl	800bb24 <__multadd>
 800b5fa:	4601      	mov	r1, r0
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	9802      	ldr	r0, [sp, #8]
 800b600:	f000 fca0 	bl	800bf44 <__mcmp>
 800b604:	2800      	cmp	r0, #0
 800b606:	f77f ada3 	ble.w	800b150 <_dtoa_r+0x490>
 800b60a:	4656      	mov	r6, sl
 800b60c:	2331      	movs	r3, #49	@ 0x31
 800b60e:	f806 3b01 	strb.w	r3, [r6], #1
 800b612:	f108 0801 	add.w	r8, r8, #1
 800b616:	e59f      	b.n	800b158 <_dtoa_r+0x498>
 800b618:	9c03      	ldr	r4, [sp, #12]
 800b61a:	46b8      	mov	r8, r7
 800b61c:	4625      	mov	r5, r4
 800b61e:	e7f4      	b.n	800b60a <_dtoa_r+0x94a>
 800b620:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b626:	2b00      	cmp	r3, #0
 800b628:	f000 8101 	beq.w	800b82e <_dtoa_r+0xb6e>
 800b62c:	2e00      	cmp	r6, #0
 800b62e:	dd05      	ble.n	800b63c <_dtoa_r+0x97c>
 800b630:	4629      	mov	r1, r5
 800b632:	4632      	mov	r2, r6
 800b634:	4648      	mov	r0, r9
 800b636:	f000 fc19 	bl	800be6c <__lshift>
 800b63a:	4605      	mov	r5, r0
 800b63c:	9b08      	ldr	r3, [sp, #32]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d05c      	beq.n	800b6fc <_dtoa_r+0xa3c>
 800b642:	6869      	ldr	r1, [r5, #4]
 800b644:	4648      	mov	r0, r9
 800b646:	f000 fa0b 	bl	800ba60 <_Balloc>
 800b64a:	4606      	mov	r6, r0
 800b64c:	b928      	cbnz	r0, 800b65a <_dtoa_r+0x99a>
 800b64e:	4b82      	ldr	r3, [pc, #520]	@ (800b858 <_dtoa_r+0xb98>)
 800b650:	4602      	mov	r2, r0
 800b652:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b656:	f7ff bb4a 	b.w	800acee <_dtoa_r+0x2e>
 800b65a:	692a      	ldr	r2, [r5, #16]
 800b65c:	3202      	adds	r2, #2
 800b65e:	0092      	lsls	r2, r2, #2
 800b660:	f105 010c 	add.w	r1, r5, #12
 800b664:	300c      	adds	r0, #12
 800b666:	f000 ffa3 	bl	800c5b0 <memcpy>
 800b66a:	2201      	movs	r2, #1
 800b66c:	4631      	mov	r1, r6
 800b66e:	4648      	mov	r0, r9
 800b670:	f000 fbfc 	bl	800be6c <__lshift>
 800b674:	f10a 0301 	add.w	r3, sl, #1
 800b678:	9300      	str	r3, [sp, #0]
 800b67a:	eb0a 030b 	add.w	r3, sl, fp
 800b67e:	9308      	str	r3, [sp, #32]
 800b680:	9b04      	ldr	r3, [sp, #16]
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	462f      	mov	r7, r5
 800b688:	9306      	str	r3, [sp, #24]
 800b68a:	4605      	mov	r5, r0
 800b68c:	9b00      	ldr	r3, [sp, #0]
 800b68e:	9802      	ldr	r0, [sp, #8]
 800b690:	4621      	mov	r1, r4
 800b692:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800b696:	f7ff fa88 	bl	800abaa <quorem>
 800b69a:	4603      	mov	r3, r0
 800b69c:	3330      	adds	r3, #48	@ 0x30
 800b69e:	9003      	str	r0, [sp, #12]
 800b6a0:	4639      	mov	r1, r7
 800b6a2:	9802      	ldr	r0, [sp, #8]
 800b6a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6a6:	f000 fc4d 	bl	800bf44 <__mcmp>
 800b6aa:	462a      	mov	r2, r5
 800b6ac:	9004      	str	r0, [sp, #16]
 800b6ae:	4621      	mov	r1, r4
 800b6b0:	4648      	mov	r0, r9
 800b6b2:	f000 fc63 	bl	800bf7c <__mdiff>
 800b6b6:	68c2      	ldr	r2, [r0, #12]
 800b6b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6ba:	4606      	mov	r6, r0
 800b6bc:	bb02      	cbnz	r2, 800b700 <_dtoa_r+0xa40>
 800b6be:	4601      	mov	r1, r0
 800b6c0:	9802      	ldr	r0, [sp, #8]
 800b6c2:	f000 fc3f 	bl	800bf44 <__mcmp>
 800b6c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	4631      	mov	r1, r6
 800b6cc:	4648      	mov	r0, r9
 800b6ce:	920c      	str	r2, [sp, #48]	@ 0x30
 800b6d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6d2:	f000 fa05 	bl	800bae0 <_Bfree>
 800b6d6:	9b07      	ldr	r3, [sp, #28]
 800b6d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b6da:	9e00      	ldr	r6, [sp, #0]
 800b6dc:	ea42 0103 	orr.w	r1, r2, r3
 800b6e0:	9b06      	ldr	r3, [sp, #24]
 800b6e2:	4319      	orrs	r1, r3
 800b6e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6e6:	d10d      	bne.n	800b704 <_dtoa_r+0xa44>
 800b6e8:	2b39      	cmp	r3, #57	@ 0x39
 800b6ea:	d027      	beq.n	800b73c <_dtoa_r+0xa7c>
 800b6ec:	9a04      	ldr	r2, [sp, #16]
 800b6ee:	2a00      	cmp	r2, #0
 800b6f0:	dd01      	ble.n	800b6f6 <_dtoa_r+0xa36>
 800b6f2:	9b03      	ldr	r3, [sp, #12]
 800b6f4:	3331      	adds	r3, #49	@ 0x31
 800b6f6:	f88b 3000 	strb.w	r3, [fp]
 800b6fa:	e52e      	b.n	800b15a <_dtoa_r+0x49a>
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	e7b9      	b.n	800b674 <_dtoa_r+0x9b4>
 800b700:	2201      	movs	r2, #1
 800b702:	e7e2      	b.n	800b6ca <_dtoa_r+0xa0a>
 800b704:	9904      	ldr	r1, [sp, #16]
 800b706:	2900      	cmp	r1, #0
 800b708:	db04      	blt.n	800b714 <_dtoa_r+0xa54>
 800b70a:	9807      	ldr	r0, [sp, #28]
 800b70c:	4301      	orrs	r1, r0
 800b70e:	9806      	ldr	r0, [sp, #24]
 800b710:	4301      	orrs	r1, r0
 800b712:	d120      	bne.n	800b756 <_dtoa_r+0xa96>
 800b714:	2a00      	cmp	r2, #0
 800b716:	ddee      	ble.n	800b6f6 <_dtoa_r+0xa36>
 800b718:	9902      	ldr	r1, [sp, #8]
 800b71a:	9300      	str	r3, [sp, #0]
 800b71c:	2201      	movs	r2, #1
 800b71e:	4648      	mov	r0, r9
 800b720:	f000 fba4 	bl	800be6c <__lshift>
 800b724:	4621      	mov	r1, r4
 800b726:	9002      	str	r0, [sp, #8]
 800b728:	f000 fc0c 	bl	800bf44 <__mcmp>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	9b00      	ldr	r3, [sp, #0]
 800b730:	dc02      	bgt.n	800b738 <_dtoa_r+0xa78>
 800b732:	d1e0      	bne.n	800b6f6 <_dtoa_r+0xa36>
 800b734:	07da      	lsls	r2, r3, #31
 800b736:	d5de      	bpl.n	800b6f6 <_dtoa_r+0xa36>
 800b738:	2b39      	cmp	r3, #57	@ 0x39
 800b73a:	d1da      	bne.n	800b6f2 <_dtoa_r+0xa32>
 800b73c:	2339      	movs	r3, #57	@ 0x39
 800b73e:	f88b 3000 	strb.w	r3, [fp]
 800b742:	4633      	mov	r3, r6
 800b744:	461e      	mov	r6, r3
 800b746:	3b01      	subs	r3, #1
 800b748:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b74c:	2a39      	cmp	r2, #57	@ 0x39
 800b74e:	d04e      	beq.n	800b7ee <_dtoa_r+0xb2e>
 800b750:	3201      	adds	r2, #1
 800b752:	701a      	strb	r2, [r3, #0]
 800b754:	e501      	b.n	800b15a <_dtoa_r+0x49a>
 800b756:	2a00      	cmp	r2, #0
 800b758:	dd03      	ble.n	800b762 <_dtoa_r+0xaa2>
 800b75a:	2b39      	cmp	r3, #57	@ 0x39
 800b75c:	d0ee      	beq.n	800b73c <_dtoa_r+0xa7c>
 800b75e:	3301      	adds	r3, #1
 800b760:	e7c9      	b.n	800b6f6 <_dtoa_r+0xa36>
 800b762:	9a00      	ldr	r2, [sp, #0]
 800b764:	9908      	ldr	r1, [sp, #32]
 800b766:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b76a:	428a      	cmp	r2, r1
 800b76c:	d028      	beq.n	800b7c0 <_dtoa_r+0xb00>
 800b76e:	9902      	ldr	r1, [sp, #8]
 800b770:	2300      	movs	r3, #0
 800b772:	220a      	movs	r2, #10
 800b774:	4648      	mov	r0, r9
 800b776:	f000 f9d5 	bl	800bb24 <__multadd>
 800b77a:	42af      	cmp	r7, r5
 800b77c:	9002      	str	r0, [sp, #8]
 800b77e:	f04f 0300 	mov.w	r3, #0
 800b782:	f04f 020a 	mov.w	r2, #10
 800b786:	4639      	mov	r1, r7
 800b788:	4648      	mov	r0, r9
 800b78a:	d107      	bne.n	800b79c <_dtoa_r+0xadc>
 800b78c:	f000 f9ca 	bl	800bb24 <__multadd>
 800b790:	4607      	mov	r7, r0
 800b792:	4605      	mov	r5, r0
 800b794:	9b00      	ldr	r3, [sp, #0]
 800b796:	3301      	adds	r3, #1
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	e777      	b.n	800b68c <_dtoa_r+0x9cc>
 800b79c:	f000 f9c2 	bl	800bb24 <__multadd>
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	4607      	mov	r7, r0
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	220a      	movs	r2, #10
 800b7a8:	4648      	mov	r0, r9
 800b7aa:	f000 f9bb 	bl	800bb24 <__multadd>
 800b7ae:	4605      	mov	r5, r0
 800b7b0:	e7f0      	b.n	800b794 <_dtoa_r+0xad4>
 800b7b2:	f1bb 0f00 	cmp.w	fp, #0
 800b7b6:	bfcc      	ite	gt
 800b7b8:	465e      	movgt	r6, fp
 800b7ba:	2601      	movle	r6, #1
 800b7bc:	4456      	add	r6, sl
 800b7be:	2700      	movs	r7, #0
 800b7c0:	9902      	ldr	r1, [sp, #8]
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	4648      	mov	r0, r9
 800b7c8:	f000 fb50 	bl	800be6c <__lshift>
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	9002      	str	r0, [sp, #8]
 800b7d0:	f000 fbb8 	bl	800bf44 <__mcmp>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	dcb4      	bgt.n	800b742 <_dtoa_r+0xa82>
 800b7d8:	d102      	bne.n	800b7e0 <_dtoa_r+0xb20>
 800b7da:	9b00      	ldr	r3, [sp, #0]
 800b7dc:	07db      	lsls	r3, r3, #31
 800b7de:	d4b0      	bmi.n	800b742 <_dtoa_r+0xa82>
 800b7e0:	4633      	mov	r3, r6
 800b7e2:	461e      	mov	r6, r3
 800b7e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7e8:	2a30      	cmp	r2, #48	@ 0x30
 800b7ea:	d0fa      	beq.n	800b7e2 <_dtoa_r+0xb22>
 800b7ec:	e4b5      	b.n	800b15a <_dtoa_r+0x49a>
 800b7ee:	459a      	cmp	sl, r3
 800b7f0:	d1a8      	bne.n	800b744 <_dtoa_r+0xa84>
 800b7f2:	2331      	movs	r3, #49	@ 0x31
 800b7f4:	f108 0801 	add.w	r8, r8, #1
 800b7f8:	f88a 3000 	strb.w	r3, [sl]
 800b7fc:	e4ad      	b.n	800b15a <_dtoa_r+0x49a>
 800b7fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b800:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b85c <_dtoa_r+0xb9c>
 800b804:	b11b      	cbz	r3, 800b80e <_dtoa_r+0xb4e>
 800b806:	f10a 0308 	add.w	r3, sl, #8
 800b80a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b80c:	6013      	str	r3, [r2, #0]
 800b80e:	4650      	mov	r0, sl
 800b810:	b017      	add	sp, #92	@ 0x5c
 800b812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b816:	9b07      	ldr	r3, [sp, #28]
 800b818:	2b01      	cmp	r3, #1
 800b81a:	f77f ae2e 	ble.w	800b47a <_dtoa_r+0x7ba>
 800b81e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b820:	9308      	str	r3, [sp, #32]
 800b822:	2001      	movs	r0, #1
 800b824:	e64d      	b.n	800b4c2 <_dtoa_r+0x802>
 800b826:	f1bb 0f00 	cmp.w	fp, #0
 800b82a:	f77f aed9 	ble.w	800b5e0 <_dtoa_r+0x920>
 800b82e:	4656      	mov	r6, sl
 800b830:	9802      	ldr	r0, [sp, #8]
 800b832:	4621      	mov	r1, r4
 800b834:	f7ff f9b9 	bl	800abaa <quorem>
 800b838:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b83c:	f806 3b01 	strb.w	r3, [r6], #1
 800b840:	eba6 020a 	sub.w	r2, r6, sl
 800b844:	4593      	cmp	fp, r2
 800b846:	ddb4      	ble.n	800b7b2 <_dtoa_r+0xaf2>
 800b848:	9902      	ldr	r1, [sp, #8]
 800b84a:	2300      	movs	r3, #0
 800b84c:	220a      	movs	r2, #10
 800b84e:	4648      	mov	r0, r9
 800b850:	f000 f968 	bl	800bb24 <__multadd>
 800b854:	9002      	str	r0, [sp, #8]
 800b856:	e7eb      	b.n	800b830 <_dtoa_r+0xb70>
 800b858:	0800cdac 	.word	0x0800cdac
 800b85c:	0800cd30 	.word	0x0800cd30

0800b860 <_free_r>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	4605      	mov	r5, r0
 800b864:	2900      	cmp	r1, #0
 800b866:	d041      	beq.n	800b8ec <_free_r+0x8c>
 800b868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b86c:	1f0c      	subs	r4, r1, #4
 800b86e:	2b00      	cmp	r3, #0
 800b870:	bfb8      	it	lt
 800b872:	18e4      	addlt	r4, r4, r3
 800b874:	f000 f8e8 	bl	800ba48 <__malloc_lock>
 800b878:	4a1d      	ldr	r2, [pc, #116]	@ (800b8f0 <_free_r+0x90>)
 800b87a:	6813      	ldr	r3, [r2, #0]
 800b87c:	b933      	cbnz	r3, 800b88c <_free_r+0x2c>
 800b87e:	6063      	str	r3, [r4, #4]
 800b880:	6014      	str	r4, [r2, #0]
 800b882:	4628      	mov	r0, r5
 800b884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b888:	f000 b8e4 	b.w	800ba54 <__malloc_unlock>
 800b88c:	42a3      	cmp	r3, r4
 800b88e:	d908      	bls.n	800b8a2 <_free_r+0x42>
 800b890:	6820      	ldr	r0, [r4, #0]
 800b892:	1821      	adds	r1, r4, r0
 800b894:	428b      	cmp	r3, r1
 800b896:	bf01      	itttt	eq
 800b898:	6819      	ldreq	r1, [r3, #0]
 800b89a:	685b      	ldreq	r3, [r3, #4]
 800b89c:	1809      	addeq	r1, r1, r0
 800b89e:	6021      	streq	r1, [r4, #0]
 800b8a0:	e7ed      	b.n	800b87e <_free_r+0x1e>
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	b10b      	cbz	r3, 800b8ac <_free_r+0x4c>
 800b8a8:	42a3      	cmp	r3, r4
 800b8aa:	d9fa      	bls.n	800b8a2 <_free_r+0x42>
 800b8ac:	6811      	ldr	r1, [r2, #0]
 800b8ae:	1850      	adds	r0, r2, r1
 800b8b0:	42a0      	cmp	r0, r4
 800b8b2:	d10b      	bne.n	800b8cc <_free_r+0x6c>
 800b8b4:	6820      	ldr	r0, [r4, #0]
 800b8b6:	4401      	add	r1, r0
 800b8b8:	1850      	adds	r0, r2, r1
 800b8ba:	4283      	cmp	r3, r0
 800b8bc:	6011      	str	r1, [r2, #0]
 800b8be:	d1e0      	bne.n	800b882 <_free_r+0x22>
 800b8c0:	6818      	ldr	r0, [r3, #0]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	6053      	str	r3, [r2, #4]
 800b8c6:	4408      	add	r0, r1
 800b8c8:	6010      	str	r0, [r2, #0]
 800b8ca:	e7da      	b.n	800b882 <_free_r+0x22>
 800b8cc:	d902      	bls.n	800b8d4 <_free_r+0x74>
 800b8ce:	230c      	movs	r3, #12
 800b8d0:	602b      	str	r3, [r5, #0]
 800b8d2:	e7d6      	b.n	800b882 <_free_r+0x22>
 800b8d4:	6820      	ldr	r0, [r4, #0]
 800b8d6:	1821      	adds	r1, r4, r0
 800b8d8:	428b      	cmp	r3, r1
 800b8da:	bf04      	itt	eq
 800b8dc:	6819      	ldreq	r1, [r3, #0]
 800b8de:	685b      	ldreq	r3, [r3, #4]
 800b8e0:	6063      	str	r3, [r4, #4]
 800b8e2:	bf04      	itt	eq
 800b8e4:	1809      	addeq	r1, r1, r0
 800b8e6:	6021      	streq	r1, [r4, #0]
 800b8e8:	6054      	str	r4, [r2, #4]
 800b8ea:	e7ca      	b.n	800b882 <_free_r+0x22>
 800b8ec:	bd38      	pop	{r3, r4, r5, pc}
 800b8ee:	bf00      	nop
 800b8f0:	200021a0 	.word	0x200021a0

0800b8f4 <malloc>:
 800b8f4:	4b02      	ldr	r3, [pc, #8]	@ (800b900 <malloc+0xc>)
 800b8f6:	4601      	mov	r1, r0
 800b8f8:	6818      	ldr	r0, [r3, #0]
 800b8fa:	f000 b825 	b.w	800b948 <_malloc_r>
 800b8fe:	bf00      	nop
 800b900:	20000110 	.word	0x20000110

0800b904 <sbrk_aligned>:
 800b904:	b570      	push	{r4, r5, r6, lr}
 800b906:	4e0f      	ldr	r6, [pc, #60]	@ (800b944 <sbrk_aligned+0x40>)
 800b908:	460c      	mov	r4, r1
 800b90a:	6831      	ldr	r1, [r6, #0]
 800b90c:	4605      	mov	r5, r0
 800b90e:	b911      	cbnz	r1, 800b916 <sbrk_aligned+0x12>
 800b910:	f000 fe3e 	bl	800c590 <_sbrk_r>
 800b914:	6030      	str	r0, [r6, #0]
 800b916:	4621      	mov	r1, r4
 800b918:	4628      	mov	r0, r5
 800b91a:	f000 fe39 	bl	800c590 <_sbrk_r>
 800b91e:	1c43      	adds	r3, r0, #1
 800b920:	d103      	bne.n	800b92a <sbrk_aligned+0x26>
 800b922:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b926:	4620      	mov	r0, r4
 800b928:	bd70      	pop	{r4, r5, r6, pc}
 800b92a:	1cc4      	adds	r4, r0, #3
 800b92c:	f024 0403 	bic.w	r4, r4, #3
 800b930:	42a0      	cmp	r0, r4
 800b932:	d0f8      	beq.n	800b926 <sbrk_aligned+0x22>
 800b934:	1a21      	subs	r1, r4, r0
 800b936:	4628      	mov	r0, r5
 800b938:	f000 fe2a 	bl	800c590 <_sbrk_r>
 800b93c:	3001      	adds	r0, #1
 800b93e:	d1f2      	bne.n	800b926 <sbrk_aligned+0x22>
 800b940:	e7ef      	b.n	800b922 <sbrk_aligned+0x1e>
 800b942:	bf00      	nop
 800b944:	2000219c 	.word	0x2000219c

0800b948 <_malloc_r>:
 800b948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b94c:	1ccd      	adds	r5, r1, #3
 800b94e:	f025 0503 	bic.w	r5, r5, #3
 800b952:	3508      	adds	r5, #8
 800b954:	2d0c      	cmp	r5, #12
 800b956:	bf38      	it	cc
 800b958:	250c      	movcc	r5, #12
 800b95a:	2d00      	cmp	r5, #0
 800b95c:	4606      	mov	r6, r0
 800b95e:	db01      	blt.n	800b964 <_malloc_r+0x1c>
 800b960:	42a9      	cmp	r1, r5
 800b962:	d904      	bls.n	800b96e <_malloc_r+0x26>
 800b964:	230c      	movs	r3, #12
 800b966:	6033      	str	r3, [r6, #0]
 800b968:	2000      	movs	r0, #0
 800b96a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b96e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ba44 <_malloc_r+0xfc>
 800b972:	f000 f869 	bl	800ba48 <__malloc_lock>
 800b976:	f8d8 3000 	ldr.w	r3, [r8]
 800b97a:	461c      	mov	r4, r3
 800b97c:	bb44      	cbnz	r4, 800b9d0 <_malloc_r+0x88>
 800b97e:	4629      	mov	r1, r5
 800b980:	4630      	mov	r0, r6
 800b982:	f7ff ffbf 	bl	800b904 <sbrk_aligned>
 800b986:	1c43      	adds	r3, r0, #1
 800b988:	4604      	mov	r4, r0
 800b98a:	d158      	bne.n	800ba3e <_malloc_r+0xf6>
 800b98c:	f8d8 4000 	ldr.w	r4, [r8]
 800b990:	4627      	mov	r7, r4
 800b992:	2f00      	cmp	r7, #0
 800b994:	d143      	bne.n	800ba1e <_malloc_r+0xd6>
 800b996:	2c00      	cmp	r4, #0
 800b998:	d04b      	beq.n	800ba32 <_malloc_r+0xea>
 800b99a:	6823      	ldr	r3, [r4, #0]
 800b99c:	4639      	mov	r1, r7
 800b99e:	4630      	mov	r0, r6
 800b9a0:	eb04 0903 	add.w	r9, r4, r3
 800b9a4:	f000 fdf4 	bl	800c590 <_sbrk_r>
 800b9a8:	4581      	cmp	r9, r0
 800b9aa:	d142      	bne.n	800ba32 <_malloc_r+0xea>
 800b9ac:	6821      	ldr	r1, [r4, #0]
 800b9ae:	1a6d      	subs	r5, r5, r1
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f7ff ffa6 	bl	800b904 <sbrk_aligned>
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	d03a      	beq.n	800ba32 <_malloc_r+0xea>
 800b9bc:	6823      	ldr	r3, [r4, #0]
 800b9be:	442b      	add	r3, r5
 800b9c0:	6023      	str	r3, [r4, #0]
 800b9c2:	f8d8 3000 	ldr.w	r3, [r8]
 800b9c6:	685a      	ldr	r2, [r3, #4]
 800b9c8:	bb62      	cbnz	r2, 800ba24 <_malloc_r+0xdc>
 800b9ca:	f8c8 7000 	str.w	r7, [r8]
 800b9ce:	e00f      	b.n	800b9f0 <_malloc_r+0xa8>
 800b9d0:	6822      	ldr	r2, [r4, #0]
 800b9d2:	1b52      	subs	r2, r2, r5
 800b9d4:	d420      	bmi.n	800ba18 <_malloc_r+0xd0>
 800b9d6:	2a0b      	cmp	r2, #11
 800b9d8:	d917      	bls.n	800ba0a <_malloc_r+0xc2>
 800b9da:	1961      	adds	r1, r4, r5
 800b9dc:	42a3      	cmp	r3, r4
 800b9de:	6025      	str	r5, [r4, #0]
 800b9e0:	bf18      	it	ne
 800b9e2:	6059      	strne	r1, [r3, #4]
 800b9e4:	6863      	ldr	r3, [r4, #4]
 800b9e6:	bf08      	it	eq
 800b9e8:	f8c8 1000 	streq.w	r1, [r8]
 800b9ec:	5162      	str	r2, [r4, r5]
 800b9ee:	604b      	str	r3, [r1, #4]
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	f000 f82f 	bl	800ba54 <__malloc_unlock>
 800b9f6:	f104 000b 	add.w	r0, r4, #11
 800b9fa:	1d23      	adds	r3, r4, #4
 800b9fc:	f020 0007 	bic.w	r0, r0, #7
 800ba00:	1ac2      	subs	r2, r0, r3
 800ba02:	bf1c      	itt	ne
 800ba04:	1a1b      	subne	r3, r3, r0
 800ba06:	50a3      	strne	r3, [r4, r2]
 800ba08:	e7af      	b.n	800b96a <_malloc_r+0x22>
 800ba0a:	6862      	ldr	r2, [r4, #4]
 800ba0c:	42a3      	cmp	r3, r4
 800ba0e:	bf0c      	ite	eq
 800ba10:	f8c8 2000 	streq.w	r2, [r8]
 800ba14:	605a      	strne	r2, [r3, #4]
 800ba16:	e7eb      	b.n	800b9f0 <_malloc_r+0xa8>
 800ba18:	4623      	mov	r3, r4
 800ba1a:	6864      	ldr	r4, [r4, #4]
 800ba1c:	e7ae      	b.n	800b97c <_malloc_r+0x34>
 800ba1e:	463c      	mov	r4, r7
 800ba20:	687f      	ldr	r7, [r7, #4]
 800ba22:	e7b6      	b.n	800b992 <_malloc_r+0x4a>
 800ba24:	461a      	mov	r2, r3
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	42a3      	cmp	r3, r4
 800ba2a:	d1fb      	bne.n	800ba24 <_malloc_r+0xdc>
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	6053      	str	r3, [r2, #4]
 800ba30:	e7de      	b.n	800b9f0 <_malloc_r+0xa8>
 800ba32:	230c      	movs	r3, #12
 800ba34:	6033      	str	r3, [r6, #0]
 800ba36:	4630      	mov	r0, r6
 800ba38:	f000 f80c 	bl	800ba54 <__malloc_unlock>
 800ba3c:	e794      	b.n	800b968 <_malloc_r+0x20>
 800ba3e:	6005      	str	r5, [r0, #0]
 800ba40:	e7d6      	b.n	800b9f0 <_malloc_r+0xa8>
 800ba42:	bf00      	nop
 800ba44:	200021a0 	.word	0x200021a0

0800ba48 <__malloc_lock>:
 800ba48:	4801      	ldr	r0, [pc, #4]	@ (800ba50 <__malloc_lock+0x8>)
 800ba4a:	f7ff b8ac 	b.w	800aba6 <__retarget_lock_acquire_recursive>
 800ba4e:	bf00      	nop
 800ba50:	20002198 	.word	0x20002198

0800ba54 <__malloc_unlock>:
 800ba54:	4801      	ldr	r0, [pc, #4]	@ (800ba5c <__malloc_unlock+0x8>)
 800ba56:	f7ff b8a7 	b.w	800aba8 <__retarget_lock_release_recursive>
 800ba5a:	bf00      	nop
 800ba5c:	20002198 	.word	0x20002198

0800ba60 <_Balloc>:
 800ba60:	b570      	push	{r4, r5, r6, lr}
 800ba62:	69c6      	ldr	r6, [r0, #28]
 800ba64:	4604      	mov	r4, r0
 800ba66:	460d      	mov	r5, r1
 800ba68:	b976      	cbnz	r6, 800ba88 <_Balloc+0x28>
 800ba6a:	2010      	movs	r0, #16
 800ba6c:	f7ff ff42 	bl	800b8f4 <malloc>
 800ba70:	4602      	mov	r2, r0
 800ba72:	61e0      	str	r0, [r4, #28]
 800ba74:	b920      	cbnz	r0, 800ba80 <_Balloc+0x20>
 800ba76:	4b18      	ldr	r3, [pc, #96]	@ (800bad8 <_Balloc+0x78>)
 800ba78:	4818      	ldr	r0, [pc, #96]	@ (800badc <_Balloc+0x7c>)
 800ba7a:	216b      	movs	r1, #107	@ 0x6b
 800ba7c:	f000 fda6 	bl	800c5cc <__assert_func>
 800ba80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba84:	6006      	str	r6, [r0, #0]
 800ba86:	60c6      	str	r6, [r0, #12]
 800ba88:	69e6      	ldr	r6, [r4, #28]
 800ba8a:	68f3      	ldr	r3, [r6, #12]
 800ba8c:	b183      	cbz	r3, 800bab0 <_Balloc+0x50>
 800ba8e:	69e3      	ldr	r3, [r4, #28]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba96:	b9b8      	cbnz	r0, 800bac8 <_Balloc+0x68>
 800ba98:	2101      	movs	r1, #1
 800ba9a:	fa01 f605 	lsl.w	r6, r1, r5
 800ba9e:	1d72      	adds	r2, r6, #5
 800baa0:	0092      	lsls	r2, r2, #2
 800baa2:	4620      	mov	r0, r4
 800baa4:	f000 fdb0 	bl	800c608 <_calloc_r>
 800baa8:	b160      	cbz	r0, 800bac4 <_Balloc+0x64>
 800baaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800baae:	e00e      	b.n	800bace <_Balloc+0x6e>
 800bab0:	2221      	movs	r2, #33	@ 0x21
 800bab2:	2104      	movs	r1, #4
 800bab4:	4620      	mov	r0, r4
 800bab6:	f000 fda7 	bl	800c608 <_calloc_r>
 800baba:	69e3      	ldr	r3, [r4, #28]
 800babc:	60f0      	str	r0, [r6, #12]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d1e4      	bne.n	800ba8e <_Balloc+0x2e>
 800bac4:	2000      	movs	r0, #0
 800bac6:	bd70      	pop	{r4, r5, r6, pc}
 800bac8:	6802      	ldr	r2, [r0, #0]
 800baca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bace:	2300      	movs	r3, #0
 800bad0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bad4:	e7f7      	b.n	800bac6 <_Balloc+0x66>
 800bad6:	bf00      	nop
 800bad8:	0800cd3d 	.word	0x0800cd3d
 800badc:	0800cdbd 	.word	0x0800cdbd

0800bae0 <_Bfree>:
 800bae0:	b570      	push	{r4, r5, r6, lr}
 800bae2:	69c6      	ldr	r6, [r0, #28]
 800bae4:	4605      	mov	r5, r0
 800bae6:	460c      	mov	r4, r1
 800bae8:	b976      	cbnz	r6, 800bb08 <_Bfree+0x28>
 800baea:	2010      	movs	r0, #16
 800baec:	f7ff ff02 	bl	800b8f4 <malloc>
 800baf0:	4602      	mov	r2, r0
 800baf2:	61e8      	str	r0, [r5, #28]
 800baf4:	b920      	cbnz	r0, 800bb00 <_Bfree+0x20>
 800baf6:	4b09      	ldr	r3, [pc, #36]	@ (800bb1c <_Bfree+0x3c>)
 800baf8:	4809      	ldr	r0, [pc, #36]	@ (800bb20 <_Bfree+0x40>)
 800bafa:	218f      	movs	r1, #143	@ 0x8f
 800bafc:	f000 fd66 	bl	800c5cc <__assert_func>
 800bb00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb04:	6006      	str	r6, [r0, #0]
 800bb06:	60c6      	str	r6, [r0, #12]
 800bb08:	b13c      	cbz	r4, 800bb1a <_Bfree+0x3a>
 800bb0a:	69eb      	ldr	r3, [r5, #28]
 800bb0c:	6862      	ldr	r2, [r4, #4]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb14:	6021      	str	r1, [r4, #0]
 800bb16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb1a:	bd70      	pop	{r4, r5, r6, pc}
 800bb1c:	0800cd3d 	.word	0x0800cd3d
 800bb20:	0800cdbd 	.word	0x0800cdbd

0800bb24 <__multadd>:
 800bb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb28:	690d      	ldr	r5, [r1, #16]
 800bb2a:	4607      	mov	r7, r0
 800bb2c:	460c      	mov	r4, r1
 800bb2e:	461e      	mov	r6, r3
 800bb30:	f101 0c14 	add.w	ip, r1, #20
 800bb34:	2000      	movs	r0, #0
 800bb36:	f8dc 3000 	ldr.w	r3, [ip]
 800bb3a:	b299      	uxth	r1, r3
 800bb3c:	fb02 6101 	mla	r1, r2, r1, r6
 800bb40:	0c1e      	lsrs	r6, r3, #16
 800bb42:	0c0b      	lsrs	r3, r1, #16
 800bb44:	fb02 3306 	mla	r3, r2, r6, r3
 800bb48:	b289      	uxth	r1, r1
 800bb4a:	3001      	adds	r0, #1
 800bb4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb50:	4285      	cmp	r5, r0
 800bb52:	f84c 1b04 	str.w	r1, [ip], #4
 800bb56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb5a:	dcec      	bgt.n	800bb36 <__multadd+0x12>
 800bb5c:	b30e      	cbz	r6, 800bba2 <__multadd+0x7e>
 800bb5e:	68a3      	ldr	r3, [r4, #8]
 800bb60:	42ab      	cmp	r3, r5
 800bb62:	dc19      	bgt.n	800bb98 <__multadd+0x74>
 800bb64:	6861      	ldr	r1, [r4, #4]
 800bb66:	4638      	mov	r0, r7
 800bb68:	3101      	adds	r1, #1
 800bb6a:	f7ff ff79 	bl	800ba60 <_Balloc>
 800bb6e:	4680      	mov	r8, r0
 800bb70:	b928      	cbnz	r0, 800bb7e <__multadd+0x5a>
 800bb72:	4602      	mov	r2, r0
 800bb74:	4b0c      	ldr	r3, [pc, #48]	@ (800bba8 <__multadd+0x84>)
 800bb76:	480d      	ldr	r0, [pc, #52]	@ (800bbac <__multadd+0x88>)
 800bb78:	21ba      	movs	r1, #186	@ 0xba
 800bb7a:	f000 fd27 	bl	800c5cc <__assert_func>
 800bb7e:	6922      	ldr	r2, [r4, #16]
 800bb80:	3202      	adds	r2, #2
 800bb82:	f104 010c 	add.w	r1, r4, #12
 800bb86:	0092      	lsls	r2, r2, #2
 800bb88:	300c      	adds	r0, #12
 800bb8a:	f000 fd11 	bl	800c5b0 <memcpy>
 800bb8e:	4621      	mov	r1, r4
 800bb90:	4638      	mov	r0, r7
 800bb92:	f7ff ffa5 	bl	800bae0 <_Bfree>
 800bb96:	4644      	mov	r4, r8
 800bb98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb9c:	3501      	adds	r5, #1
 800bb9e:	615e      	str	r6, [r3, #20]
 800bba0:	6125      	str	r5, [r4, #16]
 800bba2:	4620      	mov	r0, r4
 800bba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bba8:	0800cdac 	.word	0x0800cdac
 800bbac:	0800cdbd 	.word	0x0800cdbd

0800bbb0 <__hi0bits>:
 800bbb0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	bf36      	itet	cc
 800bbb8:	0403      	lslcc	r3, r0, #16
 800bbba:	2000      	movcs	r0, #0
 800bbbc:	2010      	movcc	r0, #16
 800bbbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bbc2:	bf3c      	itt	cc
 800bbc4:	021b      	lslcc	r3, r3, #8
 800bbc6:	3008      	addcc	r0, #8
 800bbc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbcc:	bf3c      	itt	cc
 800bbce:	011b      	lslcc	r3, r3, #4
 800bbd0:	3004      	addcc	r0, #4
 800bbd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbd6:	bf3c      	itt	cc
 800bbd8:	009b      	lslcc	r3, r3, #2
 800bbda:	3002      	addcc	r0, #2
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	db05      	blt.n	800bbec <__hi0bits+0x3c>
 800bbe0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bbe4:	f100 0001 	add.w	r0, r0, #1
 800bbe8:	bf08      	it	eq
 800bbea:	2020      	moveq	r0, #32
 800bbec:	4770      	bx	lr

0800bbee <__lo0bits>:
 800bbee:	6803      	ldr	r3, [r0, #0]
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	f013 0007 	ands.w	r0, r3, #7
 800bbf6:	d00b      	beq.n	800bc10 <__lo0bits+0x22>
 800bbf8:	07d9      	lsls	r1, r3, #31
 800bbfa:	d421      	bmi.n	800bc40 <__lo0bits+0x52>
 800bbfc:	0798      	lsls	r0, r3, #30
 800bbfe:	bf49      	itett	mi
 800bc00:	085b      	lsrmi	r3, r3, #1
 800bc02:	089b      	lsrpl	r3, r3, #2
 800bc04:	2001      	movmi	r0, #1
 800bc06:	6013      	strmi	r3, [r2, #0]
 800bc08:	bf5c      	itt	pl
 800bc0a:	6013      	strpl	r3, [r2, #0]
 800bc0c:	2002      	movpl	r0, #2
 800bc0e:	4770      	bx	lr
 800bc10:	b299      	uxth	r1, r3
 800bc12:	b909      	cbnz	r1, 800bc18 <__lo0bits+0x2a>
 800bc14:	0c1b      	lsrs	r3, r3, #16
 800bc16:	2010      	movs	r0, #16
 800bc18:	b2d9      	uxtb	r1, r3
 800bc1a:	b909      	cbnz	r1, 800bc20 <__lo0bits+0x32>
 800bc1c:	3008      	adds	r0, #8
 800bc1e:	0a1b      	lsrs	r3, r3, #8
 800bc20:	0719      	lsls	r1, r3, #28
 800bc22:	bf04      	itt	eq
 800bc24:	091b      	lsreq	r3, r3, #4
 800bc26:	3004      	addeq	r0, #4
 800bc28:	0799      	lsls	r1, r3, #30
 800bc2a:	bf04      	itt	eq
 800bc2c:	089b      	lsreq	r3, r3, #2
 800bc2e:	3002      	addeq	r0, #2
 800bc30:	07d9      	lsls	r1, r3, #31
 800bc32:	d403      	bmi.n	800bc3c <__lo0bits+0x4e>
 800bc34:	085b      	lsrs	r3, r3, #1
 800bc36:	f100 0001 	add.w	r0, r0, #1
 800bc3a:	d003      	beq.n	800bc44 <__lo0bits+0x56>
 800bc3c:	6013      	str	r3, [r2, #0]
 800bc3e:	4770      	bx	lr
 800bc40:	2000      	movs	r0, #0
 800bc42:	4770      	bx	lr
 800bc44:	2020      	movs	r0, #32
 800bc46:	4770      	bx	lr

0800bc48 <__i2b>:
 800bc48:	b510      	push	{r4, lr}
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	2101      	movs	r1, #1
 800bc4e:	f7ff ff07 	bl	800ba60 <_Balloc>
 800bc52:	4602      	mov	r2, r0
 800bc54:	b928      	cbnz	r0, 800bc62 <__i2b+0x1a>
 800bc56:	4b05      	ldr	r3, [pc, #20]	@ (800bc6c <__i2b+0x24>)
 800bc58:	4805      	ldr	r0, [pc, #20]	@ (800bc70 <__i2b+0x28>)
 800bc5a:	f240 1145 	movw	r1, #325	@ 0x145
 800bc5e:	f000 fcb5 	bl	800c5cc <__assert_func>
 800bc62:	2301      	movs	r3, #1
 800bc64:	6144      	str	r4, [r0, #20]
 800bc66:	6103      	str	r3, [r0, #16]
 800bc68:	bd10      	pop	{r4, pc}
 800bc6a:	bf00      	nop
 800bc6c:	0800cdac 	.word	0x0800cdac
 800bc70:	0800cdbd 	.word	0x0800cdbd

0800bc74 <__multiply>:
 800bc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc78:	4617      	mov	r7, r2
 800bc7a:	690a      	ldr	r2, [r1, #16]
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	bfa8      	it	ge
 800bc82:	463b      	movge	r3, r7
 800bc84:	4689      	mov	r9, r1
 800bc86:	bfa4      	itt	ge
 800bc88:	460f      	movge	r7, r1
 800bc8a:	4699      	movge	r9, r3
 800bc8c:	693d      	ldr	r5, [r7, #16]
 800bc8e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	6879      	ldr	r1, [r7, #4]
 800bc96:	eb05 060a 	add.w	r6, r5, sl
 800bc9a:	42b3      	cmp	r3, r6
 800bc9c:	b085      	sub	sp, #20
 800bc9e:	bfb8      	it	lt
 800bca0:	3101      	addlt	r1, #1
 800bca2:	f7ff fedd 	bl	800ba60 <_Balloc>
 800bca6:	b930      	cbnz	r0, 800bcb6 <__multiply+0x42>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	4b41      	ldr	r3, [pc, #260]	@ (800bdb0 <__multiply+0x13c>)
 800bcac:	4841      	ldr	r0, [pc, #260]	@ (800bdb4 <__multiply+0x140>)
 800bcae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bcb2:	f000 fc8b 	bl	800c5cc <__assert_func>
 800bcb6:	f100 0414 	add.w	r4, r0, #20
 800bcba:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bcbe:	4623      	mov	r3, r4
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	4573      	cmp	r3, lr
 800bcc4:	d320      	bcc.n	800bd08 <__multiply+0x94>
 800bcc6:	f107 0814 	add.w	r8, r7, #20
 800bcca:	f109 0114 	add.w	r1, r9, #20
 800bcce:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bcd2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bcd6:	9302      	str	r3, [sp, #8]
 800bcd8:	1beb      	subs	r3, r5, r7
 800bcda:	3b15      	subs	r3, #21
 800bcdc:	f023 0303 	bic.w	r3, r3, #3
 800bce0:	3304      	adds	r3, #4
 800bce2:	3715      	adds	r7, #21
 800bce4:	42bd      	cmp	r5, r7
 800bce6:	bf38      	it	cc
 800bce8:	2304      	movcc	r3, #4
 800bcea:	9301      	str	r3, [sp, #4]
 800bcec:	9b02      	ldr	r3, [sp, #8]
 800bcee:	9103      	str	r1, [sp, #12]
 800bcf0:	428b      	cmp	r3, r1
 800bcf2:	d80c      	bhi.n	800bd0e <__multiply+0x9a>
 800bcf4:	2e00      	cmp	r6, #0
 800bcf6:	dd03      	ble.n	800bd00 <__multiply+0x8c>
 800bcf8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d055      	beq.n	800bdac <__multiply+0x138>
 800bd00:	6106      	str	r6, [r0, #16]
 800bd02:	b005      	add	sp, #20
 800bd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd08:	f843 2b04 	str.w	r2, [r3], #4
 800bd0c:	e7d9      	b.n	800bcc2 <__multiply+0x4e>
 800bd0e:	f8b1 a000 	ldrh.w	sl, [r1]
 800bd12:	f1ba 0f00 	cmp.w	sl, #0
 800bd16:	d01f      	beq.n	800bd58 <__multiply+0xe4>
 800bd18:	46c4      	mov	ip, r8
 800bd1a:	46a1      	mov	r9, r4
 800bd1c:	2700      	movs	r7, #0
 800bd1e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bd22:	f8d9 3000 	ldr.w	r3, [r9]
 800bd26:	fa1f fb82 	uxth.w	fp, r2
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	fb0a 330b 	mla	r3, sl, fp, r3
 800bd30:	443b      	add	r3, r7
 800bd32:	f8d9 7000 	ldr.w	r7, [r9]
 800bd36:	0c12      	lsrs	r2, r2, #16
 800bd38:	0c3f      	lsrs	r7, r7, #16
 800bd3a:	fb0a 7202 	mla	r2, sl, r2, r7
 800bd3e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd48:	4565      	cmp	r5, ip
 800bd4a:	f849 3b04 	str.w	r3, [r9], #4
 800bd4e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bd52:	d8e4      	bhi.n	800bd1e <__multiply+0xaa>
 800bd54:	9b01      	ldr	r3, [sp, #4]
 800bd56:	50e7      	str	r7, [r4, r3]
 800bd58:	9b03      	ldr	r3, [sp, #12]
 800bd5a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bd5e:	3104      	adds	r1, #4
 800bd60:	f1b9 0f00 	cmp.w	r9, #0
 800bd64:	d020      	beq.n	800bda8 <__multiply+0x134>
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	4647      	mov	r7, r8
 800bd6a:	46a4      	mov	ip, r4
 800bd6c:	f04f 0a00 	mov.w	sl, #0
 800bd70:	f8b7 b000 	ldrh.w	fp, [r7]
 800bd74:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bd78:	fb09 220b 	mla	r2, r9, fp, r2
 800bd7c:	4452      	add	r2, sl
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd84:	f84c 3b04 	str.w	r3, [ip], #4
 800bd88:	f857 3b04 	ldr.w	r3, [r7], #4
 800bd8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd90:	f8bc 3000 	ldrh.w	r3, [ip]
 800bd94:	fb09 330a 	mla	r3, r9, sl, r3
 800bd98:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bd9c:	42bd      	cmp	r5, r7
 800bd9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bda2:	d8e5      	bhi.n	800bd70 <__multiply+0xfc>
 800bda4:	9a01      	ldr	r2, [sp, #4]
 800bda6:	50a3      	str	r3, [r4, r2]
 800bda8:	3404      	adds	r4, #4
 800bdaa:	e79f      	b.n	800bcec <__multiply+0x78>
 800bdac:	3e01      	subs	r6, #1
 800bdae:	e7a1      	b.n	800bcf4 <__multiply+0x80>
 800bdb0:	0800cdac 	.word	0x0800cdac
 800bdb4:	0800cdbd 	.word	0x0800cdbd

0800bdb8 <__pow5mult>:
 800bdb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdbc:	4615      	mov	r5, r2
 800bdbe:	f012 0203 	ands.w	r2, r2, #3
 800bdc2:	4607      	mov	r7, r0
 800bdc4:	460e      	mov	r6, r1
 800bdc6:	d007      	beq.n	800bdd8 <__pow5mult+0x20>
 800bdc8:	4c25      	ldr	r4, [pc, #148]	@ (800be60 <__pow5mult+0xa8>)
 800bdca:	3a01      	subs	r2, #1
 800bdcc:	2300      	movs	r3, #0
 800bdce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdd2:	f7ff fea7 	bl	800bb24 <__multadd>
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	10ad      	asrs	r5, r5, #2
 800bdda:	d03d      	beq.n	800be58 <__pow5mult+0xa0>
 800bddc:	69fc      	ldr	r4, [r7, #28]
 800bdde:	b97c      	cbnz	r4, 800be00 <__pow5mult+0x48>
 800bde0:	2010      	movs	r0, #16
 800bde2:	f7ff fd87 	bl	800b8f4 <malloc>
 800bde6:	4602      	mov	r2, r0
 800bde8:	61f8      	str	r0, [r7, #28]
 800bdea:	b928      	cbnz	r0, 800bdf8 <__pow5mult+0x40>
 800bdec:	4b1d      	ldr	r3, [pc, #116]	@ (800be64 <__pow5mult+0xac>)
 800bdee:	481e      	ldr	r0, [pc, #120]	@ (800be68 <__pow5mult+0xb0>)
 800bdf0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bdf4:	f000 fbea 	bl	800c5cc <__assert_func>
 800bdf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bdfc:	6004      	str	r4, [r0, #0]
 800bdfe:	60c4      	str	r4, [r0, #12]
 800be00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800be04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be08:	b94c      	cbnz	r4, 800be1e <__pow5mult+0x66>
 800be0a:	f240 2171 	movw	r1, #625	@ 0x271
 800be0e:	4638      	mov	r0, r7
 800be10:	f7ff ff1a 	bl	800bc48 <__i2b>
 800be14:	2300      	movs	r3, #0
 800be16:	f8c8 0008 	str.w	r0, [r8, #8]
 800be1a:	4604      	mov	r4, r0
 800be1c:	6003      	str	r3, [r0, #0]
 800be1e:	f04f 0900 	mov.w	r9, #0
 800be22:	07eb      	lsls	r3, r5, #31
 800be24:	d50a      	bpl.n	800be3c <__pow5mult+0x84>
 800be26:	4631      	mov	r1, r6
 800be28:	4622      	mov	r2, r4
 800be2a:	4638      	mov	r0, r7
 800be2c:	f7ff ff22 	bl	800bc74 <__multiply>
 800be30:	4631      	mov	r1, r6
 800be32:	4680      	mov	r8, r0
 800be34:	4638      	mov	r0, r7
 800be36:	f7ff fe53 	bl	800bae0 <_Bfree>
 800be3a:	4646      	mov	r6, r8
 800be3c:	106d      	asrs	r5, r5, #1
 800be3e:	d00b      	beq.n	800be58 <__pow5mult+0xa0>
 800be40:	6820      	ldr	r0, [r4, #0]
 800be42:	b938      	cbnz	r0, 800be54 <__pow5mult+0x9c>
 800be44:	4622      	mov	r2, r4
 800be46:	4621      	mov	r1, r4
 800be48:	4638      	mov	r0, r7
 800be4a:	f7ff ff13 	bl	800bc74 <__multiply>
 800be4e:	6020      	str	r0, [r4, #0]
 800be50:	f8c0 9000 	str.w	r9, [r0]
 800be54:	4604      	mov	r4, r0
 800be56:	e7e4      	b.n	800be22 <__pow5mult+0x6a>
 800be58:	4630      	mov	r0, r6
 800be5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be5e:	bf00      	nop
 800be60:	0800ce70 	.word	0x0800ce70
 800be64:	0800cd3d 	.word	0x0800cd3d
 800be68:	0800cdbd 	.word	0x0800cdbd

0800be6c <__lshift>:
 800be6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be70:	460c      	mov	r4, r1
 800be72:	6849      	ldr	r1, [r1, #4]
 800be74:	6923      	ldr	r3, [r4, #16]
 800be76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be7a:	68a3      	ldr	r3, [r4, #8]
 800be7c:	4607      	mov	r7, r0
 800be7e:	4691      	mov	r9, r2
 800be80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be84:	f108 0601 	add.w	r6, r8, #1
 800be88:	42b3      	cmp	r3, r6
 800be8a:	db0b      	blt.n	800bea4 <__lshift+0x38>
 800be8c:	4638      	mov	r0, r7
 800be8e:	f7ff fde7 	bl	800ba60 <_Balloc>
 800be92:	4605      	mov	r5, r0
 800be94:	b948      	cbnz	r0, 800beaa <__lshift+0x3e>
 800be96:	4602      	mov	r2, r0
 800be98:	4b28      	ldr	r3, [pc, #160]	@ (800bf3c <__lshift+0xd0>)
 800be9a:	4829      	ldr	r0, [pc, #164]	@ (800bf40 <__lshift+0xd4>)
 800be9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bea0:	f000 fb94 	bl	800c5cc <__assert_func>
 800bea4:	3101      	adds	r1, #1
 800bea6:	005b      	lsls	r3, r3, #1
 800bea8:	e7ee      	b.n	800be88 <__lshift+0x1c>
 800beaa:	2300      	movs	r3, #0
 800beac:	f100 0114 	add.w	r1, r0, #20
 800beb0:	f100 0210 	add.w	r2, r0, #16
 800beb4:	4618      	mov	r0, r3
 800beb6:	4553      	cmp	r3, sl
 800beb8:	db33      	blt.n	800bf22 <__lshift+0xb6>
 800beba:	6920      	ldr	r0, [r4, #16]
 800bebc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bec0:	f104 0314 	add.w	r3, r4, #20
 800bec4:	f019 091f 	ands.w	r9, r9, #31
 800bec8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800becc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bed0:	d02b      	beq.n	800bf2a <__lshift+0xbe>
 800bed2:	f1c9 0e20 	rsb	lr, r9, #32
 800bed6:	468a      	mov	sl, r1
 800bed8:	2200      	movs	r2, #0
 800beda:	6818      	ldr	r0, [r3, #0]
 800bedc:	fa00 f009 	lsl.w	r0, r0, r9
 800bee0:	4310      	orrs	r0, r2
 800bee2:	f84a 0b04 	str.w	r0, [sl], #4
 800bee6:	f853 2b04 	ldr.w	r2, [r3], #4
 800beea:	459c      	cmp	ip, r3
 800beec:	fa22 f20e 	lsr.w	r2, r2, lr
 800bef0:	d8f3      	bhi.n	800beda <__lshift+0x6e>
 800bef2:	ebac 0304 	sub.w	r3, ip, r4
 800bef6:	3b15      	subs	r3, #21
 800bef8:	f023 0303 	bic.w	r3, r3, #3
 800befc:	3304      	adds	r3, #4
 800befe:	f104 0015 	add.w	r0, r4, #21
 800bf02:	4560      	cmp	r0, ip
 800bf04:	bf88      	it	hi
 800bf06:	2304      	movhi	r3, #4
 800bf08:	50ca      	str	r2, [r1, r3]
 800bf0a:	b10a      	cbz	r2, 800bf10 <__lshift+0xa4>
 800bf0c:	f108 0602 	add.w	r6, r8, #2
 800bf10:	3e01      	subs	r6, #1
 800bf12:	4638      	mov	r0, r7
 800bf14:	612e      	str	r6, [r5, #16]
 800bf16:	4621      	mov	r1, r4
 800bf18:	f7ff fde2 	bl	800bae0 <_Bfree>
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf22:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf26:	3301      	adds	r3, #1
 800bf28:	e7c5      	b.n	800beb6 <__lshift+0x4a>
 800bf2a:	3904      	subs	r1, #4
 800bf2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf30:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf34:	459c      	cmp	ip, r3
 800bf36:	d8f9      	bhi.n	800bf2c <__lshift+0xc0>
 800bf38:	e7ea      	b.n	800bf10 <__lshift+0xa4>
 800bf3a:	bf00      	nop
 800bf3c:	0800cdac 	.word	0x0800cdac
 800bf40:	0800cdbd 	.word	0x0800cdbd

0800bf44 <__mcmp>:
 800bf44:	690a      	ldr	r2, [r1, #16]
 800bf46:	4603      	mov	r3, r0
 800bf48:	6900      	ldr	r0, [r0, #16]
 800bf4a:	1a80      	subs	r0, r0, r2
 800bf4c:	b530      	push	{r4, r5, lr}
 800bf4e:	d10e      	bne.n	800bf6e <__mcmp+0x2a>
 800bf50:	3314      	adds	r3, #20
 800bf52:	3114      	adds	r1, #20
 800bf54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bf58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bf5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bf60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bf64:	4295      	cmp	r5, r2
 800bf66:	d003      	beq.n	800bf70 <__mcmp+0x2c>
 800bf68:	d205      	bcs.n	800bf76 <__mcmp+0x32>
 800bf6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf6e:	bd30      	pop	{r4, r5, pc}
 800bf70:	42a3      	cmp	r3, r4
 800bf72:	d3f3      	bcc.n	800bf5c <__mcmp+0x18>
 800bf74:	e7fb      	b.n	800bf6e <__mcmp+0x2a>
 800bf76:	2001      	movs	r0, #1
 800bf78:	e7f9      	b.n	800bf6e <__mcmp+0x2a>
	...

0800bf7c <__mdiff>:
 800bf7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf80:	4689      	mov	r9, r1
 800bf82:	4606      	mov	r6, r0
 800bf84:	4611      	mov	r1, r2
 800bf86:	4648      	mov	r0, r9
 800bf88:	4614      	mov	r4, r2
 800bf8a:	f7ff ffdb 	bl	800bf44 <__mcmp>
 800bf8e:	1e05      	subs	r5, r0, #0
 800bf90:	d112      	bne.n	800bfb8 <__mdiff+0x3c>
 800bf92:	4629      	mov	r1, r5
 800bf94:	4630      	mov	r0, r6
 800bf96:	f7ff fd63 	bl	800ba60 <_Balloc>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	b928      	cbnz	r0, 800bfaa <__mdiff+0x2e>
 800bf9e:	4b3f      	ldr	r3, [pc, #252]	@ (800c09c <__mdiff+0x120>)
 800bfa0:	f240 2137 	movw	r1, #567	@ 0x237
 800bfa4:	483e      	ldr	r0, [pc, #248]	@ (800c0a0 <__mdiff+0x124>)
 800bfa6:	f000 fb11 	bl	800c5cc <__assert_func>
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfb0:	4610      	mov	r0, r2
 800bfb2:	b003      	add	sp, #12
 800bfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb8:	bfbc      	itt	lt
 800bfba:	464b      	movlt	r3, r9
 800bfbc:	46a1      	movlt	r9, r4
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bfc4:	bfba      	itte	lt
 800bfc6:	461c      	movlt	r4, r3
 800bfc8:	2501      	movlt	r5, #1
 800bfca:	2500      	movge	r5, #0
 800bfcc:	f7ff fd48 	bl	800ba60 <_Balloc>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	b918      	cbnz	r0, 800bfdc <__mdiff+0x60>
 800bfd4:	4b31      	ldr	r3, [pc, #196]	@ (800c09c <__mdiff+0x120>)
 800bfd6:	f240 2145 	movw	r1, #581	@ 0x245
 800bfda:	e7e3      	b.n	800bfa4 <__mdiff+0x28>
 800bfdc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bfe0:	6926      	ldr	r6, [r4, #16]
 800bfe2:	60c5      	str	r5, [r0, #12]
 800bfe4:	f109 0310 	add.w	r3, r9, #16
 800bfe8:	f109 0514 	add.w	r5, r9, #20
 800bfec:	f104 0e14 	add.w	lr, r4, #20
 800bff0:	f100 0b14 	add.w	fp, r0, #20
 800bff4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bff8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bffc:	9301      	str	r3, [sp, #4]
 800bffe:	46d9      	mov	r9, fp
 800c000:	f04f 0c00 	mov.w	ip, #0
 800c004:	9b01      	ldr	r3, [sp, #4]
 800c006:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c00a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c00e:	9301      	str	r3, [sp, #4]
 800c010:	fa1f f38a 	uxth.w	r3, sl
 800c014:	4619      	mov	r1, r3
 800c016:	b283      	uxth	r3, r0
 800c018:	1acb      	subs	r3, r1, r3
 800c01a:	0c00      	lsrs	r0, r0, #16
 800c01c:	4463      	add	r3, ip
 800c01e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c022:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c026:	b29b      	uxth	r3, r3
 800c028:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c02c:	4576      	cmp	r6, lr
 800c02e:	f849 3b04 	str.w	r3, [r9], #4
 800c032:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c036:	d8e5      	bhi.n	800c004 <__mdiff+0x88>
 800c038:	1b33      	subs	r3, r6, r4
 800c03a:	3b15      	subs	r3, #21
 800c03c:	f023 0303 	bic.w	r3, r3, #3
 800c040:	3415      	adds	r4, #21
 800c042:	3304      	adds	r3, #4
 800c044:	42a6      	cmp	r6, r4
 800c046:	bf38      	it	cc
 800c048:	2304      	movcc	r3, #4
 800c04a:	441d      	add	r5, r3
 800c04c:	445b      	add	r3, fp
 800c04e:	461e      	mov	r6, r3
 800c050:	462c      	mov	r4, r5
 800c052:	4544      	cmp	r4, r8
 800c054:	d30e      	bcc.n	800c074 <__mdiff+0xf8>
 800c056:	f108 0103 	add.w	r1, r8, #3
 800c05a:	1b49      	subs	r1, r1, r5
 800c05c:	f021 0103 	bic.w	r1, r1, #3
 800c060:	3d03      	subs	r5, #3
 800c062:	45a8      	cmp	r8, r5
 800c064:	bf38      	it	cc
 800c066:	2100      	movcc	r1, #0
 800c068:	440b      	add	r3, r1
 800c06a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c06e:	b191      	cbz	r1, 800c096 <__mdiff+0x11a>
 800c070:	6117      	str	r7, [r2, #16]
 800c072:	e79d      	b.n	800bfb0 <__mdiff+0x34>
 800c074:	f854 1b04 	ldr.w	r1, [r4], #4
 800c078:	46e6      	mov	lr, ip
 800c07a:	0c08      	lsrs	r0, r1, #16
 800c07c:	fa1c fc81 	uxtah	ip, ip, r1
 800c080:	4471      	add	r1, lr
 800c082:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c086:	b289      	uxth	r1, r1
 800c088:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c08c:	f846 1b04 	str.w	r1, [r6], #4
 800c090:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c094:	e7dd      	b.n	800c052 <__mdiff+0xd6>
 800c096:	3f01      	subs	r7, #1
 800c098:	e7e7      	b.n	800c06a <__mdiff+0xee>
 800c09a:	bf00      	nop
 800c09c:	0800cdac 	.word	0x0800cdac
 800c0a0:	0800cdbd 	.word	0x0800cdbd

0800c0a4 <__d2b>:
 800c0a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0a8:	460f      	mov	r7, r1
 800c0aa:	2101      	movs	r1, #1
 800c0ac:	ec59 8b10 	vmov	r8, r9, d0
 800c0b0:	4616      	mov	r6, r2
 800c0b2:	f7ff fcd5 	bl	800ba60 <_Balloc>
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	b930      	cbnz	r0, 800c0c8 <__d2b+0x24>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	4b23      	ldr	r3, [pc, #140]	@ (800c14c <__d2b+0xa8>)
 800c0be:	4824      	ldr	r0, [pc, #144]	@ (800c150 <__d2b+0xac>)
 800c0c0:	f240 310f 	movw	r1, #783	@ 0x30f
 800c0c4:	f000 fa82 	bl	800c5cc <__assert_func>
 800c0c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c0cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0d0:	b10d      	cbz	r5, 800c0d6 <__d2b+0x32>
 800c0d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c0d6:	9301      	str	r3, [sp, #4]
 800c0d8:	f1b8 0300 	subs.w	r3, r8, #0
 800c0dc:	d023      	beq.n	800c126 <__d2b+0x82>
 800c0de:	4668      	mov	r0, sp
 800c0e0:	9300      	str	r3, [sp, #0]
 800c0e2:	f7ff fd84 	bl	800bbee <__lo0bits>
 800c0e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c0ea:	b1d0      	cbz	r0, 800c122 <__d2b+0x7e>
 800c0ec:	f1c0 0320 	rsb	r3, r0, #32
 800c0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0f4:	430b      	orrs	r3, r1
 800c0f6:	40c2      	lsrs	r2, r0
 800c0f8:	6163      	str	r3, [r4, #20]
 800c0fa:	9201      	str	r2, [sp, #4]
 800c0fc:	9b01      	ldr	r3, [sp, #4]
 800c0fe:	61a3      	str	r3, [r4, #24]
 800c100:	2b00      	cmp	r3, #0
 800c102:	bf0c      	ite	eq
 800c104:	2201      	moveq	r2, #1
 800c106:	2202      	movne	r2, #2
 800c108:	6122      	str	r2, [r4, #16]
 800c10a:	b1a5      	cbz	r5, 800c136 <__d2b+0x92>
 800c10c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c110:	4405      	add	r5, r0
 800c112:	603d      	str	r5, [r7, #0]
 800c114:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c118:	6030      	str	r0, [r6, #0]
 800c11a:	4620      	mov	r0, r4
 800c11c:	b003      	add	sp, #12
 800c11e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c122:	6161      	str	r1, [r4, #20]
 800c124:	e7ea      	b.n	800c0fc <__d2b+0x58>
 800c126:	a801      	add	r0, sp, #4
 800c128:	f7ff fd61 	bl	800bbee <__lo0bits>
 800c12c:	9b01      	ldr	r3, [sp, #4]
 800c12e:	6163      	str	r3, [r4, #20]
 800c130:	3020      	adds	r0, #32
 800c132:	2201      	movs	r2, #1
 800c134:	e7e8      	b.n	800c108 <__d2b+0x64>
 800c136:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c13a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c13e:	6038      	str	r0, [r7, #0]
 800c140:	6918      	ldr	r0, [r3, #16]
 800c142:	f7ff fd35 	bl	800bbb0 <__hi0bits>
 800c146:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c14a:	e7e5      	b.n	800c118 <__d2b+0x74>
 800c14c:	0800cdac 	.word	0x0800cdac
 800c150:	0800cdbd 	.word	0x0800cdbd

0800c154 <__ssputs_r>:
 800c154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c158:	688e      	ldr	r6, [r1, #8]
 800c15a:	461f      	mov	r7, r3
 800c15c:	42be      	cmp	r6, r7
 800c15e:	680b      	ldr	r3, [r1, #0]
 800c160:	4682      	mov	sl, r0
 800c162:	460c      	mov	r4, r1
 800c164:	4690      	mov	r8, r2
 800c166:	d82d      	bhi.n	800c1c4 <__ssputs_r+0x70>
 800c168:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c16c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c170:	d026      	beq.n	800c1c0 <__ssputs_r+0x6c>
 800c172:	6965      	ldr	r5, [r4, #20]
 800c174:	6909      	ldr	r1, [r1, #16]
 800c176:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c17a:	eba3 0901 	sub.w	r9, r3, r1
 800c17e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c182:	1c7b      	adds	r3, r7, #1
 800c184:	444b      	add	r3, r9
 800c186:	106d      	asrs	r5, r5, #1
 800c188:	429d      	cmp	r5, r3
 800c18a:	bf38      	it	cc
 800c18c:	461d      	movcc	r5, r3
 800c18e:	0553      	lsls	r3, r2, #21
 800c190:	d527      	bpl.n	800c1e2 <__ssputs_r+0x8e>
 800c192:	4629      	mov	r1, r5
 800c194:	f7ff fbd8 	bl	800b948 <_malloc_r>
 800c198:	4606      	mov	r6, r0
 800c19a:	b360      	cbz	r0, 800c1f6 <__ssputs_r+0xa2>
 800c19c:	6921      	ldr	r1, [r4, #16]
 800c19e:	464a      	mov	r2, r9
 800c1a0:	f000 fa06 	bl	800c5b0 <memcpy>
 800c1a4:	89a3      	ldrh	r3, [r4, #12]
 800c1a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c1aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1ae:	81a3      	strh	r3, [r4, #12]
 800c1b0:	6126      	str	r6, [r4, #16]
 800c1b2:	6165      	str	r5, [r4, #20]
 800c1b4:	444e      	add	r6, r9
 800c1b6:	eba5 0509 	sub.w	r5, r5, r9
 800c1ba:	6026      	str	r6, [r4, #0]
 800c1bc:	60a5      	str	r5, [r4, #8]
 800c1be:	463e      	mov	r6, r7
 800c1c0:	42be      	cmp	r6, r7
 800c1c2:	d900      	bls.n	800c1c6 <__ssputs_r+0x72>
 800c1c4:	463e      	mov	r6, r7
 800c1c6:	6820      	ldr	r0, [r4, #0]
 800c1c8:	4632      	mov	r2, r6
 800c1ca:	4641      	mov	r1, r8
 800c1cc:	f000 f9c6 	bl	800c55c <memmove>
 800c1d0:	68a3      	ldr	r3, [r4, #8]
 800c1d2:	1b9b      	subs	r3, r3, r6
 800c1d4:	60a3      	str	r3, [r4, #8]
 800c1d6:	6823      	ldr	r3, [r4, #0]
 800c1d8:	4433      	add	r3, r6
 800c1da:	6023      	str	r3, [r4, #0]
 800c1dc:	2000      	movs	r0, #0
 800c1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1e2:	462a      	mov	r2, r5
 800c1e4:	f000 fa36 	bl	800c654 <_realloc_r>
 800c1e8:	4606      	mov	r6, r0
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d1e0      	bne.n	800c1b0 <__ssputs_r+0x5c>
 800c1ee:	6921      	ldr	r1, [r4, #16]
 800c1f0:	4650      	mov	r0, sl
 800c1f2:	f7ff fb35 	bl	800b860 <_free_r>
 800c1f6:	230c      	movs	r3, #12
 800c1f8:	f8ca 3000 	str.w	r3, [sl]
 800c1fc:	89a3      	ldrh	r3, [r4, #12]
 800c1fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c202:	81a3      	strh	r3, [r4, #12]
 800c204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c208:	e7e9      	b.n	800c1de <__ssputs_r+0x8a>
	...

0800c20c <_svfiprintf_r>:
 800c20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c210:	4698      	mov	r8, r3
 800c212:	898b      	ldrh	r3, [r1, #12]
 800c214:	061b      	lsls	r3, r3, #24
 800c216:	b09d      	sub	sp, #116	@ 0x74
 800c218:	4607      	mov	r7, r0
 800c21a:	460d      	mov	r5, r1
 800c21c:	4614      	mov	r4, r2
 800c21e:	d510      	bpl.n	800c242 <_svfiprintf_r+0x36>
 800c220:	690b      	ldr	r3, [r1, #16]
 800c222:	b973      	cbnz	r3, 800c242 <_svfiprintf_r+0x36>
 800c224:	2140      	movs	r1, #64	@ 0x40
 800c226:	f7ff fb8f 	bl	800b948 <_malloc_r>
 800c22a:	6028      	str	r0, [r5, #0]
 800c22c:	6128      	str	r0, [r5, #16]
 800c22e:	b930      	cbnz	r0, 800c23e <_svfiprintf_r+0x32>
 800c230:	230c      	movs	r3, #12
 800c232:	603b      	str	r3, [r7, #0]
 800c234:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c238:	b01d      	add	sp, #116	@ 0x74
 800c23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c23e:	2340      	movs	r3, #64	@ 0x40
 800c240:	616b      	str	r3, [r5, #20]
 800c242:	2300      	movs	r3, #0
 800c244:	9309      	str	r3, [sp, #36]	@ 0x24
 800c246:	2320      	movs	r3, #32
 800c248:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c24c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c250:	2330      	movs	r3, #48	@ 0x30
 800c252:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c3f0 <_svfiprintf_r+0x1e4>
 800c256:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c25a:	f04f 0901 	mov.w	r9, #1
 800c25e:	4623      	mov	r3, r4
 800c260:	469a      	mov	sl, r3
 800c262:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c266:	b10a      	cbz	r2, 800c26c <_svfiprintf_r+0x60>
 800c268:	2a25      	cmp	r2, #37	@ 0x25
 800c26a:	d1f9      	bne.n	800c260 <_svfiprintf_r+0x54>
 800c26c:	ebba 0b04 	subs.w	fp, sl, r4
 800c270:	d00b      	beq.n	800c28a <_svfiprintf_r+0x7e>
 800c272:	465b      	mov	r3, fp
 800c274:	4622      	mov	r2, r4
 800c276:	4629      	mov	r1, r5
 800c278:	4638      	mov	r0, r7
 800c27a:	f7ff ff6b 	bl	800c154 <__ssputs_r>
 800c27e:	3001      	adds	r0, #1
 800c280:	f000 80a7 	beq.w	800c3d2 <_svfiprintf_r+0x1c6>
 800c284:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c286:	445a      	add	r2, fp
 800c288:	9209      	str	r2, [sp, #36]	@ 0x24
 800c28a:	f89a 3000 	ldrb.w	r3, [sl]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	f000 809f 	beq.w	800c3d2 <_svfiprintf_r+0x1c6>
 800c294:	2300      	movs	r3, #0
 800c296:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c29a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c29e:	f10a 0a01 	add.w	sl, sl, #1
 800c2a2:	9304      	str	r3, [sp, #16]
 800c2a4:	9307      	str	r3, [sp, #28]
 800c2a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2ac:	4654      	mov	r4, sl
 800c2ae:	2205      	movs	r2, #5
 800c2b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2b4:	484e      	ldr	r0, [pc, #312]	@ (800c3f0 <_svfiprintf_r+0x1e4>)
 800c2b6:	f7f3 ff93 	bl	80001e0 <memchr>
 800c2ba:	9a04      	ldr	r2, [sp, #16]
 800c2bc:	b9d8      	cbnz	r0, 800c2f6 <_svfiprintf_r+0xea>
 800c2be:	06d0      	lsls	r0, r2, #27
 800c2c0:	bf44      	itt	mi
 800c2c2:	2320      	movmi	r3, #32
 800c2c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2c8:	0711      	lsls	r1, r2, #28
 800c2ca:	bf44      	itt	mi
 800c2cc:	232b      	movmi	r3, #43	@ 0x2b
 800c2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c2d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2d8:	d015      	beq.n	800c306 <_svfiprintf_r+0xfa>
 800c2da:	9a07      	ldr	r2, [sp, #28]
 800c2dc:	4654      	mov	r4, sl
 800c2de:	2000      	movs	r0, #0
 800c2e0:	f04f 0c0a 	mov.w	ip, #10
 800c2e4:	4621      	mov	r1, r4
 800c2e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2ea:	3b30      	subs	r3, #48	@ 0x30
 800c2ec:	2b09      	cmp	r3, #9
 800c2ee:	d94b      	bls.n	800c388 <_svfiprintf_r+0x17c>
 800c2f0:	b1b0      	cbz	r0, 800c320 <_svfiprintf_r+0x114>
 800c2f2:	9207      	str	r2, [sp, #28]
 800c2f4:	e014      	b.n	800c320 <_svfiprintf_r+0x114>
 800c2f6:	eba0 0308 	sub.w	r3, r0, r8
 800c2fa:	fa09 f303 	lsl.w	r3, r9, r3
 800c2fe:	4313      	orrs	r3, r2
 800c300:	9304      	str	r3, [sp, #16]
 800c302:	46a2      	mov	sl, r4
 800c304:	e7d2      	b.n	800c2ac <_svfiprintf_r+0xa0>
 800c306:	9b03      	ldr	r3, [sp, #12]
 800c308:	1d19      	adds	r1, r3, #4
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	9103      	str	r1, [sp, #12]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	bfbb      	ittet	lt
 800c312:	425b      	neglt	r3, r3
 800c314:	f042 0202 	orrlt.w	r2, r2, #2
 800c318:	9307      	strge	r3, [sp, #28]
 800c31a:	9307      	strlt	r3, [sp, #28]
 800c31c:	bfb8      	it	lt
 800c31e:	9204      	strlt	r2, [sp, #16]
 800c320:	7823      	ldrb	r3, [r4, #0]
 800c322:	2b2e      	cmp	r3, #46	@ 0x2e
 800c324:	d10a      	bne.n	800c33c <_svfiprintf_r+0x130>
 800c326:	7863      	ldrb	r3, [r4, #1]
 800c328:	2b2a      	cmp	r3, #42	@ 0x2a
 800c32a:	d132      	bne.n	800c392 <_svfiprintf_r+0x186>
 800c32c:	9b03      	ldr	r3, [sp, #12]
 800c32e:	1d1a      	adds	r2, r3, #4
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	9203      	str	r2, [sp, #12]
 800c334:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c338:	3402      	adds	r4, #2
 800c33a:	9305      	str	r3, [sp, #20]
 800c33c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c400 <_svfiprintf_r+0x1f4>
 800c340:	7821      	ldrb	r1, [r4, #0]
 800c342:	2203      	movs	r2, #3
 800c344:	4650      	mov	r0, sl
 800c346:	f7f3 ff4b 	bl	80001e0 <memchr>
 800c34a:	b138      	cbz	r0, 800c35c <_svfiprintf_r+0x150>
 800c34c:	9b04      	ldr	r3, [sp, #16]
 800c34e:	eba0 000a 	sub.w	r0, r0, sl
 800c352:	2240      	movs	r2, #64	@ 0x40
 800c354:	4082      	lsls	r2, r0
 800c356:	4313      	orrs	r3, r2
 800c358:	3401      	adds	r4, #1
 800c35a:	9304      	str	r3, [sp, #16]
 800c35c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c360:	4824      	ldr	r0, [pc, #144]	@ (800c3f4 <_svfiprintf_r+0x1e8>)
 800c362:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c366:	2206      	movs	r2, #6
 800c368:	f7f3 ff3a 	bl	80001e0 <memchr>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d036      	beq.n	800c3de <_svfiprintf_r+0x1d2>
 800c370:	4b21      	ldr	r3, [pc, #132]	@ (800c3f8 <_svfiprintf_r+0x1ec>)
 800c372:	bb1b      	cbnz	r3, 800c3bc <_svfiprintf_r+0x1b0>
 800c374:	9b03      	ldr	r3, [sp, #12]
 800c376:	3307      	adds	r3, #7
 800c378:	f023 0307 	bic.w	r3, r3, #7
 800c37c:	3308      	adds	r3, #8
 800c37e:	9303      	str	r3, [sp, #12]
 800c380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c382:	4433      	add	r3, r6
 800c384:	9309      	str	r3, [sp, #36]	@ 0x24
 800c386:	e76a      	b.n	800c25e <_svfiprintf_r+0x52>
 800c388:	fb0c 3202 	mla	r2, ip, r2, r3
 800c38c:	460c      	mov	r4, r1
 800c38e:	2001      	movs	r0, #1
 800c390:	e7a8      	b.n	800c2e4 <_svfiprintf_r+0xd8>
 800c392:	2300      	movs	r3, #0
 800c394:	3401      	adds	r4, #1
 800c396:	9305      	str	r3, [sp, #20]
 800c398:	4619      	mov	r1, r3
 800c39a:	f04f 0c0a 	mov.w	ip, #10
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3a4:	3a30      	subs	r2, #48	@ 0x30
 800c3a6:	2a09      	cmp	r2, #9
 800c3a8:	d903      	bls.n	800c3b2 <_svfiprintf_r+0x1a6>
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d0c6      	beq.n	800c33c <_svfiprintf_r+0x130>
 800c3ae:	9105      	str	r1, [sp, #20]
 800c3b0:	e7c4      	b.n	800c33c <_svfiprintf_r+0x130>
 800c3b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e7f0      	b.n	800c39e <_svfiprintf_r+0x192>
 800c3bc:	ab03      	add	r3, sp, #12
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	462a      	mov	r2, r5
 800c3c2:	4b0e      	ldr	r3, [pc, #56]	@ (800c3fc <_svfiprintf_r+0x1f0>)
 800c3c4:	a904      	add	r1, sp, #16
 800c3c6:	4638      	mov	r0, r7
 800c3c8:	f7fd fe78 	bl	800a0bc <_printf_float>
 800c3cc:	1c42      	adds	r2, r0, #1
 800c3ce:	4606      	mov	r6, r0
 800c3d0:	d1d6      	bne.n	800c380 <_svfiprintf_r+0x174>
 800c3d2:	89ab      	ldrh	r3, [r5, #12]
 800c3d4:	065b      	lsls	r3, r3, #25
 800c3d6:	f53f af2d 	bmi.w	800c234 <_svfiprintf_r+0x28>
 800c3da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3dc:	e72c      	b.n	800c238 <_svfiprintf_r+0x2c>
 800c3de:	ab03      	add	r3, sp, #12
 800c3e0:	9300      	str	r3, [sp, #0]
 800c3e2:	462a      	mov	r2, r5
 800c3e4:	4b05      	ldr	r3, [pc, #20]	@ (800c3fc <_svfiprintf_r+0x1f0>)
 800c3e6:	a904      	add	r1, sp, #16
 800c3e8:	4638      	mov	r0, r7
 800c3ea:	f7fe f8ff 	bl	800a5ec <_printf_i>
 800c3ee:	e7ed      	b.n	800c3cc <_svfiprintf_r+0x1c0>
 800c3f0:	0800ce16 	.word	0x0800ce16
 800c3f4:	0800ce20 	.word	0x0800ce20
 800c3f8:	0800a0bd 	.word	0x0800a0bd
 800c3fc:	0800c155 	.word	0x0800c155
 800c400:	0800ce1c 	.word	0x0800ce1c

0800c404 <__sflush_r>:
 800c404:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c40c:	0716      	lsls	r6, r2, #28
 800c40e:	4605      	mov	r5, r0
 800c410:	460c      	mov	r4, r1
 800c412:	d454      	bmi.n	800c4be <__sflush_r+0xba>
 800c414:	684b      	ldr	r3, [r1, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	dc02      	bgt.n	800c420 <__sflush_r+0x1c>
 800c41a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	dd48      	ble.n	800c4b2 <__sflush_r+0xae>
 800c420:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c422:	2e00      	cmp	r6, #0
 800c424:	d045      	beq.n	800c4b2 <__sflush_r+0xae>
 800c426:	2300      	movs	r3, #0
 800c428:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c42c:	682f      	ldr	r7, [r5, #0]
 800c42e:	6a21      	ldr	r1, [r4, #32]
 800c430:	602b      	str	r3, [r5, #0]
 800c432:	d030      	beq.n	800c496 <__sflush_r+0x92>
 800c434:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c436:	89a3      	ldrh	r3, [r4, #12]
 800c438:	0759      	lsls	r1, r3, #29
 800c43a:	d505      	bpl.n	800c448 <__sflush_r+0x44>
 800c43c:	6863      	ldr	r3, [r4, #4]
 800c43e:	1ad2      	subs	r2, r2, r3
 800c440:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c442:	b10b      	cbz	r3, 800c448 <__sflush_r+0x44>
 800c444:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c446:	1ad2      	subs	r2, r2, r3
 800c448:	2300      	movs	r3, #0
 800c44a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c44c:	6a21      	ldr	r1, [r4, #32]
 800c44e:	4628      	mov	r0, r5
 800c450:	47b0      	blx	r6
 800c452:	1c43      	adds	r3, r0, #1
 800c454:	89a3      	ldrh	r3, [r4, #12]
 800c456:	d106      	bne.n	800c466 <__sflush_r+0x62>
 800c458:	6829      	ldr	r1, [r5, #0]
 800c45a:	291d      	cmp	r1, #29
 800c45c:	d82b      	bhi.n	800c4b6 <__sflush_r+0xb2>
 800c45e:	4a2a      	ldr	r2, [pc, #168]	@ (800c508 <__sflush_r+0x104>)
 800c460:	40ca      	lsrs	r2, r1
 800c462:	07d6      	lsls	r6, r2, #31
 800c464:	d527      	bpl.n	800c4b6 <__sflush_r+0xb2>
 800c466:	2200      	movs	r2, #0
 800c468:	6062      	str	r2, [r4, #4]
 800c46a:	04d9      	lsls	r1, r3, #19
 800c46c:	6922      	ldr	r2, [r4, #16]
 800c46e:	6022      	str	r2, [r4, #0]
 800c470:	d504      	bpl.n	800c47c <__sflush_r+0x78>
 800c472:	1c42      	adds	r2, r0, #1
 800c474:	d101      	bne.n	800c47a <__sflush_r+0x76>
 800c476:	682b      	ldr	r3, [r5, #0]
 800c478:	b903      	cbnz	r3, 800c47c <__sflush_r+0x78>
 800c47a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c47c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c47e:	602f      	str	r7, [r5, #0]
 800c480:	b1b9      	cbz	r1, 800c4b2 <__sflush_r+0xae>
 800c482:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c486:	4299      	cmp	r1, r3
 800c488:	d002      	beq.n	800c490 <__sflush_r+0x8c>
 800c48a:	4628      	mov	r0, r5
 800c48c:	f7ff f9e8 	bl	800b860 <_free_r>
 800c490:	2300      	movs	r3, #0
 800c492:	6363      	str	r3, [r4, #52]	@ 0x34
 800c494:	e00d      	b.n	800c4b2 <__sflush_r+0xae>
 800c496:	2301      	movs	r3, #1
 800c498:	4628      	mov	r0, r5
 800c49a:	47b0      	blx	r6
 800c49c:	4602      	mov	r2, r0
 800c49e:	1c50      	adds	r0, r2, #1
 800c4a0:	d1c9      	bne.n	800c436 <__sflush_r+0x32>
 800c4a2:	682b      	ldr	r3, [r5, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d0c6      	beq.n	800c436 <__sflush_r+0x32>
 800c4a8:	2b1d      	cmp	r3, #29
 800c4aa:	d001      	beq.n	800c4b0 <__sflush_r+0xac>
 800c4ac:	2b16      	cmp	r3, #22
 800c4ae:	d11e      	bne.n	800c4ee <__sflush_r+0xea>
 800c4b0:	602f      	str	r7, [r5, #0]
 800c4b2:	2000      	movs	r0, #0
 800c4b4:	e022      	b.n	800c4fc <__sflush_r+0xf8>
 800c4b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4ba:	b21b      	sxth	r3, r3
 800c4bc:	e01b      	b.n	800c4f6 <__sflush_r+0xf2>
 800c4be:	690f      	ldr	r7, [r1, #16]
 800c4c0:	2f00      	cmp	r7, #0
 800c4c2:	d0f6      	beq.n	800c4b2 <__sflush_r+0xae>
 800c4c4:	0793      	lsls	r3, r2, #30
 800c4c6:	680e      	ldr	r6, [r1, #0]
 800c4c8:	bf08      	it	eq
 800c4ca:	694b      	ldreq	r3, [r1, #20]
 800c4cc:	600f      	str	r7, [r1, #0]
 800c4ce:	bf18      	it	ne
 800c4d0:	2300      	movne	r3, #0
 800c4d2:	eba6 0807 	sub.w	r8, r6, r7
 800c4d6:	608b      	str	r3, [r1, #8]
 800c4d8:	f1b8 0f00 	cmp.w	r8, #0
 800c4dc:	dde9      	ble.n	800c4b2 <__sflush_r+0xae>
 800c4de:	6a21      	ldr	r1, [r4, #32]
 800c4e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c4e2:	4643      	mov	r3, r8
 800c4e4:	463a      	mov	r2, r7
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	47b0      	blx	r6
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	dc08      	bgt.n	800c500 <__sflush_r+0xfc>
 800c4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4f6:	81a3      	strh	r3, [r4, #12]
 800c4f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c500:	4407      	add	r7, r0
 800c502:	eba8 0800 	sub.w	r8, r8, r0
 800c506:	e7e7      	b.n	800c4d8 <__sflush_r+0xd4>
 800c508:	20400001 	.word	0x20400001

0800c50c <_fflush_r>:
 800c50c:	b538      	push	{r3, r4, r5, lr}
 800c50e:	690b      	ldr	r3, [r1, #16]
 800c510:	4605      	mov	r5, r0
 800c512:	460c      	mov	r4, r1
 800c514:	b913      	cbnz	r3, 800c51c <_fflush_r+0x10>
 800c516:	2500      	movs	r5, #0
 800c518:	4628      	mov	r0, r5
 800c51a:	bd38      	pop	{r3, r4, r5, pc}
 800c51c:	b118      	cbz	r0, 800c526 <_fflush_r+0x1a>
 800c51e:	6a03      	ldr	r3, [r0, #32]
 800c520:	b90b      	cbnz	r3, 800c526 <_fflush_r+0x1a>
 800c522:	f7fe fa0d 	bl	800a940 <__sinit>
 800c526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d0f3      	beq.n	800c516 <_fflush_r+0xa>
 800c52e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c530:	07d0      	lsls	r0, r2, #31
 800c532:	d404      	bmi.n	800c53e <_fflush_r+0x32>
 800c534:	0599      	lsls	r1, r3, #22
 800c536:	d402      	bmi.n	800c53e <_fflush_r+0x32>
 800c538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c53a:	f7fe fb34 	bl	800aba6 <__retarget_lock_acquire_recursive>
 800c53e:	4628      	mov	r0, r5
 800c540:	4621      	mov	r1, r4
 800c542:	f7ff ff5f 	bl	800c404 <__sflush_r>
 800c546:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c548:	07da      	lsls	r2, r3, #31
 800c54a:	4605      	mov	r5, r0
 800c54c:	d4e4      	bmi.n	800c518 <_fflush_r+0xc>
 800c54e:	89a3      	ldrh	r3, [r4, #12]
 800c550:	059b      	lsls	r3, r3, #22
 800c552:	d4e1      	bmi.n	800c518 <_fflush_r+0xc>
 800c554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c556:	f7fe fb27 	bl	800aba8 <__retarget_lock_release_recursive>
 800c55a:	e7dd      	b.n	800c518 <_fflush_r+0xc>

0800c55c <memmove>:
 800c55c:	4288      	cmp	r0, r1
 800c55e:	b510      	push	{r4, lr}
 800c560:	eb01 0402 	add.w	r4, r1, r2
 800c564:	d902      	bls.n	800c56c <memmove+0x10>
 800c566:	4284      	cmp	r4, r0
 800c568:	4623      	mov	r3, r4
 800c56a:	d807      	bhi.n	800c57c <memmove+0x20>
 800c56c:	1e43      	subs	r3, r0, #1
 800c56e:	42a1      	cmp	r1, r4
 800c570:	d008      	beq.n	800c584 <memmove+0x28>
 800c572:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c57a:	e7f8      	b.n	800c56e <memmove+0x12>
 800c57c:	4402      	add	r2, r0
 800c57e:	4601      	mov	r1, r0
 800c580:	428a      	cmp	r2, r1
 800c582:	d100      	bne.n	800c586 <memmove+0x2a>
 800c584:	bd10      	pop	{r4, pc}
 800c586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c58a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c58e:	e7f7      	b.n	800c580 <memmove+0x24>

0800c590 <_sbrk_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	4d06      	ldr	r5, [pc, #24]	@ (800c5ac <_sbrk_r+0x1c>)
 800c594:	2300      	movs	r3, #0
 800c596:	4604      	mov	r4, r0
 800c598:	4608      	mov	r0, r1
 800c59a:	602b      	str	r3, [r5, #0]
 800c59c:	f7f5 fa34 	bl	8001a08 <_sbrk>
 800c5a0:	1c43      	adds	r3, r0, #1
 800c5a2:	d102      	bne.n	800c5aa <_sbrk_r+0x1a>
 800c5a4:	682b      	ldr	r3, [r5, #0]
 800c5a6:	b103      	cbz	r3, 800c5aa <_sbrk_r+0x1a>
 800c5a8:	6023      	str	r3, [r4, #0]
 800c5aa:	bd38      	pop	{r3, r4, r5, pc}
 800c5ac:	20002194 	.word	0x20002194

0800c5b0 <memcpy>:
 800c5b0:	440a      	add	r2, r1
 800c5b2:	4291      	cmp	r1, r2
 800c5b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c5b8:	d100      	bne.n	800c5bc <memcpy+0xc>
 800c5ba:	4770      	bx	lr
 800c5bc:	b510      	push	{r4, lr}
 800c5be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5c6:	4291      	cmp	r1, r2
 800c5c8:	d1f9      	bne.n	800c5be <memcpy+0xe>
 800c5ca:	bd10      	pop	{r4, pc}

0800c5cc <__assert_func>:
 800c5cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5ce:	4614      	mov	r4, r2
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	4b09      	ldr	r3, [pc, #36]	@ (800c5f8 <__assert_func+0x2c>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4605      	mov	r5, r0
 800c5d8:	68d8      	ldr	r0, [r3, #12]
 800c5da:	b14c      	cbz	r4, 800c5f0 <__assert_func+0x24>
 800c5dc:	4b07      	ldr	r3, [pc, #28]	@ (800c5fc <__assert_func+0x30>)
 800c5de:	9100      	str	r1, [sp, #0]
 800c5e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5e4:	4906      	ldr	r1, [pc, #24]	@ (800c600 <__assert_func+0x34>)
 800c5e6:	462b      	mov	r3, r5
 800c5e8:	f000 f870 	bl	800c6cc <fiprintf>
 800c5ec:	f000 f880 	bl	800c6f0 <abort>
 800c5f0:	4b04      	ldr	r3, [pc, #16]	@ (800c604 <__assert_func+0x38>)
 800c5f2:	461c      	mov	r4, r3
 800c5f4:	e7f3      	b.n	800c5de <__assert_func+0x12>
 800c5f6:	bf00      	nop
 800c5f8:	20000110 	.word	0x20000110
 800c5fc:	0800ce31 	.word	0x0800ce31
 800c600:	0800ce3e 	.word	0x0800ce3e
 800c604:	0800ce6c 	.word	0x0800ce6c

0800c608 <_calloc_r>:
 800c608:	b570      	push	{r4, r5, r6, lr}
 800c60a:	fba1 5402 	umull	r5, r4, r1, r2
 800c60e:	b934      	cbnz	r4, 800c61e <_calloc_r+0x16>
 800c610:	4629      	mov	r1, r5
 800c612:	f7ff f999 	bl	800b948 <_malloc_r>
 800c616:	4606      	mov	r6, r0
 800c618:	b928      	cbnz	r0, 800c626 <_calloc_r+0x1e>
 800c61a:	4630      	mov	r0, r6
 800c61c:	bd70      	pop	{r4, r5, r6, pc}
 800c61e:	220c      	movs	r2, #12
 800c620:	6002      	str	r2, [r0, #0]
 800c622:	2600      	movs	r6, #0
 800c624:	e7f9      	b.n	800c61a <_calloc_r+0x12>
 800c626:	462a      	mov	r2, r5
 800c628:	4621      	mov	r1, r4
 800c62a:	f7fe fa3f 	bl	800aaac <memset>
 800c62e:	e7f4      	b.n	800c61a <_calloc_r+0x12>

0800c630 <__ascii_mbtowc>:
 800c630:	b082      	sub	sp, #8
 800c632:	b901      	cbnz	r1, 800c636 <__ascii_mbtowc+0x6>
 800c634:	a901      	add	r1, sp, #4
 800c636:	b142      	cbz	r2, 800c64a <__ascii_mbtowc+0x1a>
 800c638:	b14b      	cbz	r3, 800c64e <__ascii_mbtowc+0x1e>
 800c63a:	7813      	ldrb	r3, [r2, #0]
 800c63c:	600b      	str	r3, [r1, #0]
 800c63e:	7812      	ldrb	r2, [r2, #0]
 800c640:	1e10      	subs	r0, r2, #0
 800c642:	bf18      	it	ne
 800c644:	2001      	movne	r0, #1
 800c646:	b002      	add	sp, #8
 800c648:	4770      	bx	lr
 800c64a:	4610      	mov	r0, r2
 800c64c:	e7fb      	b.n	800c646 <__ascii_mbtowc+0x16>
 800c64e:	f06f 0001 	mvn.w	r0, #1
 800c652:	e7f8      	b.n	800c646 <__ascii_mbtowc+0x16>

0800c654 <_realloc_r>:
 800c654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c658:	4607      	mov	r7, r0
 800c65a:	4614      	mov	r4, r2
 800c65c:	460d      	mov	r5, r1
 800c65e:	b921      	cbnz	r1, 800c66a <_realloc_r+0x16>
 800c660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c664:	4611      	mov	r1, r2
 800c666:	f7ff b96f 	b.w	800b948 <_malloc_r>
 800c66a:	b92a      	cbnz	r2, 800c678 <_realloc_r+0x24>
 800c66c:	f7ff f8f8 	bl	800b860 <_free_r>
 800c670:	4625      	mov	r5, r4
 800c672:	4628      	mov	r0, r5
 800c674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c678:	f000 f841 	bl	800c6fe <_malloc_usable_size_r>
 800c67c:	4284      	cmp	r4, r0
 800c67e:	4606      	mov	r6, r0
 800c680:	d802      	bhi.n	800c688 <_realloc_r+0x34>
 800c682:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c686:	d8f4      	bhi.n	800c672 <_realloc_r+0x1e>
 800c688:	4621      	mov	r1, r4
 800c68a:	4638      	mov	r0, r7
 800c68c:	f7ff f95c 	bl	800b948 <_malloc_r>
 800c690:	4680      	mov	r8, r0
 800c692:	b908      	cbnz	r0, 800c698 <_realloc_r+0x44>
 800c694:	4645      	mov	r5, r8
 800c696:	e7ec      	b.n	800c672 <_realloc_r+0x1e>
 800c698:	42b4      	cmp	r4, r6
 800c69a:	4622      	mov	r2, r4
 800c69c:	4629      	mov	r1, r5
 800c69e:	bf28      	it	cs
 800c6a0:	4632      	movcs	r2, r6
 800c6a2:	f7ff ff85 	bl	800c5b0 <memcpy>
 800c6a6:	4629      	mov	r1, r5
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	f7ff f8d9 	bl	800b860 <_free_r>
 800c6ae:	e7f1      	b.n	800c694 <_realloc_r+0x40>

0800c6b0 <__ascii_wctomb>:
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	4608      	mov	r0, r1
 800c6b4:	b141      	cbz	r1, 800c6c8 <__ascii_wctomb+0x18>
 800c6b6:	2aff      	cmp	r2, #255	@ 0xff
 800c6b8:	d904      	bls.n	800c6c4 <__ascii_wctomb+0x14>
 800c6ba:	228a      	movs	r2, #138	@ 0x8a
 800c6bc:	601a      	str	r2, [r3, #0]
 800c6be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c6c2:	4770      	bx	lr
 800c6c4:	700a      	strb	r2, [r1, #0]
 800c6c6:	2001      	movs	r0, #1
 800c6c8:	4770      	bx	lr
	...

0800c6cc <fiprintf>:
 800c6cc:	b40e      	push	{r1, r2, r3}
 800c6ce:	b503      	push	{r0, r1, lr}
 800c6d0:	4601      	mov	r1, r0
 800c6d2:	ab03      	add	r3, sp, #12
 800c6d4:	4805      	ldr	r0, [pc, #20]	@ (800c6ec <fiprintf+0x20>)
 800c6d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6da:	6800      	ldr	r0, [r0, #0]
 800c6dc:	9301      	str	r3, [sp, #4]
 800c6de:	f000 f83f 	bl	800c760 <_vfiprintf_r>
 800c6e2:	b002      	add	sp, #8
 800c6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6e8:	b003      	add	sp, #12
 800c6ea:	4770      	bx	lr
 800c6ec:	20000110 	.word	0x20000110

0800c6f0 <abort>:
 800c6f0:	b508      	push	{r3, lr}
 800c6f2:	2006      	movs	r0, #6
 800c6f4:	f000 fa08 	bl	800cb08 <raise>
 800c6f8:	2001      	movs	r0, #1
 800c6fa:	f7f5 f90d 	bl	8001918 <_exit>

0800c6fe <_malloc_usable_size_r>:
 800c6fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c702:	1f18      	subs	r0, r3, #4
 800c704:	2b00      	cmp	r3, #0
 800c706:	bfbc      	itt	lt
 800c708:	580b      	ldrlt	r3, [r1, r0]
 800c70a:	18c0      	addlt	r0, r0, r3
 800c70c:	4770      	bx	lr

0800c70e <__sfputc_r>:
 800c70e:	6893      	ldr	r3, [r2, #8]
 800c710:	3b01      	subs	r3, #1
 800c712:	2b00      	cmp	r3, #0
 800c714:	b410      	push	{r4}
 800c716:	6093      	str	r3, [r2, #8]
 800c718:	da08      	bge.n	800c72c <__sfputc_r+0x1e>
 800c71a:	6994      	ldr	r4, [r2, #24]
 800c71c:	42a3      	cmp	r3, r4
 800c71e:	db01      	blt.n	800c724 <__sfputc_r+0x16>
 800c720:	290a      	cmp	r1, #10
 800c722:	d103      	bne.n	800c72c <__sfputc_r+0x1e>
 800c724:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c728:	f000 b932 	b.w	800c990 <__swbuf_r>
 800c72c:	6813      	ldr	r3, [r2, #0]
 800c72e:	1c58      	adds	r0, r3, #1
 800c730:	6010      	str	r0, [r2, #0]
 800c732:	7019      	strb	r1, [r3, #0]
 800c734:	4608      	mov	r0, r1
 800c736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <__sfputs_r>:
 800c73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c73e:	4606      	mov	r6, r0
 800c740:	460f      	mov	r7, r1
 800c742:	4614      	mov	r4, r2
 800c744:	18d5      	adds	r5, r2, r3
 800c746:	42ac      	cmp	r4, r5
 800c748:	d101      	bne.n	800c74e <__sfputs_r+0x12>
 800c74a:	2000      	movs	r0, #0
 800c74c:	e007      	b.n	800c75e <__sfputs_r+0x22>
 800c74e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c752:	463a      	mov	r2, r7
 800c754:	4630      	mov	r0, r6
 800c756:	f7ff ffda 	bl	800c70e <__sfputc_r>
 800c75a:	1c43      	adds	r3, r0, #1
 800c75c:	d1f3      	bne.n	800c746 <__sfputs_r+0xa>
 800c75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c760 <_vfiprintf_r>:
 800c760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c764:	460d      	mov	r5, r1
 800c766:	b09d      	sub	sp, #116	@ 0x74
 800c768:	4614      	mov	r4, r2
 800c76a:	4698      	mov	r8, r3
 800c76c:	4606      	mov	r6, r0
 800c76e:	b118      	cbz	r0, 800c778 <_vfiprintf_r+0x18>
 800c770:	6a03      	ldr	r3, [r0, #32]
 800c772:	b90b      	cbnz	r3, 800c778 <_vfiprintf_r+0x18>
 800c774:	f7fe f8e4 	bl	800a940 <__sinit>
 800c778:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c77a:	07d9      	lsls	r1, r3, #31
 800c77c:	d405      	bmi.n	800c78a <_vfiprintf_r+0x2a>
 800c77e:	89ab      	ldrh	r3, [r5, #12]
 800c780:	059a      	lsls	r2, r3, #22
 800c782:	d402      	bmi.n	800c78a <_vfiprintf_r+0x2a>
 800c784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c786:	f7fe fa0e 	bl	800aba6 <__retarget_lock_acquire_recursive>
 800c78a:	89ab      	ldrh	r3, [r5, #12]
 800c78c:	071b      	lsls	r3, r3, #28
 800c78e:	d501      	bpl.n	800c794 <_vfiprintf_r+0x34>
 800c790:	692b      	ldr	r3, [r5, #16]
 800c792:	b99b      	cbnz	r3, 800c7bc <_vfiprintf_r+0x5c>
 800c794:	4629      	mov	r1, r5
 800c796:	4630      	mov	r0, r6
 800c798:	f000 f938 	bl	800ca0c <__swsetup_r>
 800c79c:	b170      	cbz	r0, 800c7bc <_vfiprintf_r+0x5c>
 800c79e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7a0:	07dc      	lsls	r4, r3, #31
 800c7a2:	d504      	bpl.n	800c7ae <_vfiprintf_r+0x4e>
 800c7a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7a8:	b01d      	add	sp, #116	@ 0x74
 800c7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ae:	89ab      	ldrh	r3, [r5, #12]
 800c7b0:	0598      	lsls	r0, r3, #22
 800c7b2:	d4f7      	bmi.n	800c7a4 <_vfiprintf_r+0x44>
 800c7b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7b6:	f7fe f9f7 	bl	800aba8 <__retarget_lock_release_recursive>
 800c7ba:	e7f3      	b.n	800c7a4 <_vfiprintf_r+0x44>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7c0:	2320      	movs	r3, #32
 800c7c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c7c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7ca:	2330      	movs	r3, #48	@ 0x30
 800c7cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c97c <_vfiprintf_r+0x21c>
 800c7d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c7d4:	f04f 0901 	mov.w	r9, #1
 800c7d8:	4623      	mov	r3, r4
 800c7da:	469a      	mov	sl, r3
 800c7dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7e0:	b10a      	cbz	r2, 800c7e6 <_vfiprintf_r+0x86>
 800c7e2:	2a25      	cmp	r2, #37	@ 0x25
 800c7e4:	d1f9      	bne.n	800c7da <_vfiprintf_r+0x7a>
 800c7e6:	ebba 0b04 	subs.w	fp, sl, r4
 800c7ea:	d00b      	beq.n	800c804 <_vfiprintf_r+0xa4>
 800c7ec:	465b      	mov	r3, fp
 800c7ee:	4622      	mov	r2, r4
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	f7ff ffa2 	bl	800c73c <__sfputs_r>
 800c7f8:	3001      	adds	r0, #1
 800c7fa:	f000 80a7 	beq.w	800c94c <_vfiprintf_r+0x1ec>
 800c7fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c800:	445a      	add	r2, fp
 800c802:	9209      	str	r2, [sp, #36]	@ 0x24
 800c804:	f89a 3000 	ldrb.w	r3, [sl]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f000 809f 	beq.w	800c94c <_vfiprintf_r+0x1ec>
 800c80e:	2300      	movs	r3, #0
 800c810:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c818:	f10a 0a01 	add.w	sl, sl, #1
 800c81c:	9304      	str	r3, [sp, #16]
 800c81e:	9307      	str	r3, [sp, #28]
 800c820:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c824:	931a      	str	r3, [sp, #104]	@ 0x68
 800c826:	4654      	mov	r4, sl
 800c828:	2205      	movs	r2, #5
 800c82a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c82e:	4853      	ldr	r0, [pc, #332]	@ (800c97c <_vfiprintf_r+0x21c>)
 800c830:	f7f3 fcd6 	bl	80001e0 <memchr>
 800c834:	9a04      	ldr	r2, [sp, #16]
 800c836:	b9d8      	cbnz	r0, 800c870 <_vfiprintf_r+0x110>
 800c838:	06d1      	lsls	r1, r2, #27
 800c83a:	bf44      	itt	mi
 800c83c:	2320      	movmi	r3, #32
 800c83e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c842:	0713      	lsls	r3, r2, #28
 800c844:	bf44      	itt	mi
 800c846:	232b      	movmi	r3, #43	@ 0x2b
 800c848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c84c:	f89a 3000 	ldrb.w	r3, [sl]
 800c850:	2b2a      	cmp	r3, #42	@ 0x2a
 800c852:	d015      	beq.n	800c880 <_vfiprintf_r+0x120>
 800c854:	9a07      	ldr	r2, [sp, #28]
 800c856:	4654      	mov	r4, sl
 800c858:	2000      	movs	r0, #0
 800c85a:	f04f 0c0a 	mov.w	ip, #10
 800c85e:	4621      	mov	r1, r4
 800c860:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c864:	3b30      	subs	r3, #48	@ 0x30
 800c866:	2b09      	cmp	r3, #9
 800c868:	d94b      	bls.n	800c902 <_vfiprintf_r+0x1a2>
 800c86a:	b1b0      	cbz	r0, 800c89a <_vfiprintf_r+0x13a>
 800c86c:	9207      	str	r2, [sp, #28]
 800c86e:	e014      	b.n	800c89a <_vfiprintf_r+0x13a>
 800c870:	eba0 0308 	sub.w	r3, r0, r8
 800c874:	fa09 f303 	lsl.w	r3, r9, r3
 800c878:	4313      	orrs	r3, r2
 800c87a:	9304      	str	r3, [sp, #16]
 800c87c:	46a2      	mov	sl, r4
 800c87e:	e7d2      	b.n	800c826 <_vfiprintf_r+0xc6>
 800c880:	9b03      	ldr	r3, [sp, #12]
 800c882:	1d19      	adds	r1, r3, #4
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	9103      	str	r1, [sp, #12]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	bfbb      	ittet	lt
 800c88c:	425b      	neglt	r3, r3
 800c88e:	f042 0202 	orrlt.w	r2, r2, #2
 800c892:	9307      	strge	r3, [sp, #28]
 800c894:	9307      	strlt	r3, [sp, #28]
 800c896:	bfb8      	it	lt
 800c898:	9204      	strlt	r2, [sp, #16]
 800c89a:	7823      	ldrb	r3, [r4, #0]
 800c89c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c89e:	d10a      	bne.n	800c8b6 <_vfiprintf_r+0x156>
 800c8a0:	7863      	ldrb	r3, [r4, #1]
 800c8a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8a4:	d132      	bne.n	800c90c <_vfiprintf_r+0x1ac>
 800c8a6:	9b03      	ldr	r3, [sp, #12]
 800c8a8:	1d1a      	adds	r2, r3, #4
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	9203      	str	r2, [sp, #12]
 800c8ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c8b2:	3402      	adds	r4, #2
 800c8b4:	9305      	str	r3, [sp, #20]
 800c8b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c98c <_vfiprintf_r+0x22c>
 800c8ba:	7821      	ldrb	r1, [r4, #0]
 800c8bc:	2203      	movs	r2, #3
 800c8be:	4650      	mov	r0, sl
 800c8c0:	f7f3 fc8e 	bl	80001e0 <memchr>
 800c8c4:	b138      	cbz	r0, 800c8d6 <_vfiprintf_r+0x176>
 800c8c6:	9b04      	ldr	r3, [sp, #16]
 800c8c8:	eba0 000a 	sub.w	r0, r0, sl
 800c8cc:	2240      	movs	r2, #64	@ 0x40
 800c8ce:	4082      	lsls	r2, r0
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	3401      	adds	r4, #1
 800c8d4:	9304      	str	r3, [sp, #16]
 800c8d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8da:	4829      	ldr	r0, [pc, #164]	@ (800c980 <_vfiprintf_r+0x220>)
 800c8dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c8e0:	2206      	movs	r2, #6
 800c8e2:	f7f3 fc7d 	bl	80001e0 <memchr>
 800c8e6:	2800      	cmp	r0, #0
 800c8e8:	d03f      	beq.n	800c96a <_vfiprintf_r+0x20a>
 800c8ea:	4b26      	ldr	r3, [pc, #152]	@ (800c984 <_vfiprintf_r+0x224>)
 800c8ec:	bb1b      	cbnz	r3, 800c936 <_vfiprintf_r+0x1d6>
 800c8ee:	9b03      	ldr	r3, [sp, #12]
 800c8f0:	3307      	adds	r3, #7
 800c8f2:	f023 0307 	bic.w	r3, r3, #7
 800c8f6:	3308      	adds	r3, #8
 800c8f8:	9303      	str	r3, [sp, #12]
 800c8fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8fc:	443b      	add	r3, r7
 800c8fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800c900:	e76a      	b.n	800c7d8 <_vfiprintf_r+0x78>
 800c902:	fb0c 3202 	mla	r2, ip, r2, r3
 800c906:	460c      	mov	r4, r1
 800c908:	2001      	movs	r0, #1
 800c90a:	e7a8      	b.n	800c85e <_vfiprintf_r+0xfe>
 800c90c:	2300      	movs	r3, #0
 800c90e:	3401      	adds	r4, #1
 800c910:	9305      	str	r3, [sp, #20]
 800c912:	4619      	mov	r1, r3
 800c914:	f04f 0c0a 	mov.w	ip, #10
 800c918:	4620      	mov	r0, r4
 800c91a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c91e:	3a30      	subs	r2, #48	@ 0x30
 800c920:	2a09      	cmp	r2, #9
 800c922:	d903      	bls.n	800c92c <_vfiprintf_r+0x1cc>
 800c924:	2b00      	cmp	r3, #0
 800c926:	d0c6      	beq.n	800c8b6 <_vfiprintf_r+0x156>
 800c928:	9105      	str	r1, [sp, #20]
 800c92a:	e7c4      	b.n	800c8b6 <_vfiprintf_r+0x156>
 800c92c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c930:	4604      	mov	r4, r0
 800c932:	2301      	movs	r3, #1
 800c934:	e7f0      	b.n	800c918 <_vfiprintf_r+0x1b8>
 800c936:	ab03      	add	r3, sp, #12
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	462a      	mov	r2, r5
 800c93c:	4b12      	ldr	r3, [pc, #72]	@ (800c988 <_vfiprintf_r+0x228>)
 800c93e:	a904      	add	r1, sp, #16
 800c940:	4630      	mov	r0, r6
 800c942:	f7fd fbbb 	bl	800a0bc <_printf_float>
 800c946:	4607      	mov	r7, r0
 800c948:	1c78      	adds	r0, r7, #1
 800c94a:	d1d6      	bne.n	800c8fa <_vfiprintf_r+0x19a>
 800c94c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c94e:	07d9      	lsls	r1, r3, #31
 800c950:	d405      	bmi.n	800c95e <_vfiprintf_r+0x1fe>
 800c952:	89ab      	ldrh	r3, [r5, #12]
 800c954:	059a      	lsls	r2, r3, #22
 800c956:	d402      	bmi.n	800c95e <_vfiprintf_r+0x1fe>
 800c958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c95a:	f7fe f925 	bl	800aba8 <__retarget_lock_release_recursive>
 800c95e:	89ab      	ldrh	r3, [r5, #12]
 800c960:	065b      	lsls	r3, r3, #25
 800c962:	f53f af1f 	bmi.w	800c7a4 <_vfiprintf_r+0x44>
 800c966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c968:	e71e      	b.n	800c7a8 <_vfiprintf_r+0x48>
 800c96a:	ab03      	add	r3, sp, #12
 800c96c:	9300      	str	r3, [sp, #0]
 800c96e:	462a      	mov	r2, r5
 800c970:	4b05      	ldr	r3, [pc, #20]	@ (800c988 <_vfiprintf_r+0x228>)
 800c972:	a904      	add	r1, sp, #16
 800c974:	4630      	mov	r0, r6
 800c976:	f7fd fe39 	bl	800a5ec <_printf_i>
 800c97a:	e7e4      	b.n	800c946 <_vfiprintf_r+0x1e6>
 800c97c:	0800ce16 	.word	0x0800ce16
 800c980:	0800ce20 	.word	0x0800ce20
 800c984:	0800a0bd 	.word	0x0800a0bd
 800c988:	0800c73d 	.word	0x0800c73d
 800c98c:	0800ce1c 	.word	0x0800ce1c

0800c990 <__swbuf_r>:
 800c990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c992:	460e      	mov	r6, r1
 800c994:	4614      	mov	r4, r2
 800c996:	4605      	mov	r5, r0
 800c998:	b118      	cbz	r0, 800c9a2 <__swbuf_r+0x12>
 800c99a:	6a03      	ldr	r3, [r0, #32]
 800c99c:	b90b      	cbnz	r3, 800c9a2 <__swbuf_r+0x12>
 800c99e:	f7fd ffcf 	bl	800a940 <__sinit>
 800c9a2:	69a3      	ldr	r3, [r4, #24]
 800c9a4:	60a3      	str	r3, [r4, #8]
 800c9a6:	89a3      	ldrh	r3, [r4, #12]
 800c9a8:	071a      	lsls	r2, r3, #28
 800c9aa:	d501      	bpl.n	800c9b0 <__swbuf_r+0x20>
 800c9ac:	6923      	ldr	r3, [r4, #16]
 800c9ae:	b943      	cbnz	r3, 800c9c2 <__swbuf_r+0x32>
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	f000 f82a 	bl	800ca0c <__swsetup_r>
 800c9b8:	b118      	cbz	r0, 800c9c2 <__swbuf_r+0x32>
 800c9ba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c9be:	4638      	mov	r0, r7
 800c9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	6922      	ldr	r2, [r4, #16]
 800c9c6:	1a98      	subs	r0, r3, r2
 800c9c8:	6963      	ldr	r3, [r4, #20]
 800c9ca:	b2f6      	uxtb	r6, r6
 800c9cc:	4283      	cmp	r3, r0
 800c9ce:	4637      	mov	r7, r6
 800c9d0:	dc05      	bgt.n	800c9de <__swbuf_r+0x4e>
 800c9d2:	4621      	mov	r1, r4
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	f7ff fd99 	bl	800c50c <_fflush_r>
 800c9da:	2800      	cmp	r0, #0
 800c9dc:	d1ed      	bne.n	800c9ba <__swbuf_r+0x2a>
 800c9de:	68a3      	ldr	r3, [r4, #8]
 800c9e0:	3b01      	subs	r3, #1
 800c9e2:	60a3      	str	r3, [r4, #8]
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	1c5a      	adds	r2, r3, #1
 800c9e8:	6022      	str	r2, [r4, #0]
 800c9ea:	701e      	strb	r6, [r3, #0]
 800c9ec:	6962      	ldr	r2, [r4, #20]
 800c9ee:	1c43      	adds	r3, r0, #1
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d004      	beq.n	800c9fe <__swbuf_r+0x6e>
 800c9f4:	89a3      	ldrh	r3, [r4, #12]
 800c9f6:	07db      	lsls	r3, r3, #31
 800c9f8:	d5e1      	bpl.n	800c9be <__swbuf_r+0x2e>
 800c9fa:	2e0a      	cmp	r6, #10
 800c9fc:	d1df      	bne.n	800c9be <__swbuf_r+0x2e>
 800c9fe:	4621      	mov	r1, r4
 800ca00:	4628      	mov	r0, r5
 800ca02:	f7ff fd83 	bl	800c50c <_fflush_r>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d0d9      	beq.n	800c9be <__swbuf_r+0x2e>
 800ca0a:	e7d6      	b.n	800c9ba <__swbuf_r+0x2a>

0800ca0c <__swsetup_r>:
 800ca0c:	b538      	push	{r3, r4, r5, lr}
 800ca0e:	4b29      	ldr	r3, [pc, #164]	@ (800cab4 <__swsetup_r+0xa8>)
 800ca10:	4605      	mov	r5, r0
 800ca12:	6818      	ldr	r0, [r3, #0]
 800ca14:	460c      	mov	r4, r1
 800ca16:	b118      	cbz	r0, 800ca20 <__swsetup_r+0x14>
 800ca18:	6a03      	ldr	r3, [r0, #32]
 800ca1a:	b90b      	cbnz	r3, 800ca20 <__swsetup_r+0x14>
 800ca1c:	f7fd ff90 	bl	800a940 <__sinit>
 800ca20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca24:	0719      	lsls	r1, r3, #28
 800ca26:	d422      	bmi.n	800ca6e <__swsetup_r+0x62>
 800ca28:	06da      	lsls	r2, r3, #27
 800ca2a:	d407      	bmi.n	800ca3c <__swsetup_r+0x30>
 800ca2c:	2209      	movs	r2, #9
 800ca2e:	602a      	str	r2, [r5, #0]
 800ca30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca34:	81a3      	strh	r3, [r4, #12]
 800ca36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca3a:	e033      	b.n	800caa4 <__swsetup_r+0x98>
 800ca3c:	0758      	lsls	r0, r3, #29
 800ca3e:	d512      	bpl.n	800ca66 <__swsetup_r+0x5a>
 800ca40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca42:	b141      	cbz	r1, 800ca56 <__swsetup_r+0x4a>
 800ca44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca48:	4299      	cmp	r1, r3
 800ca4a:	d002      	beq.n	800ca52 <__swsetup_r+0x46>
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	f7fe ff07 	bl	800b860 <_free_r>
 800ca52:	2300      	movs	r3, #0
 800ca54:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca56:	89a3      	ldrh	r3, [r4, #12]
 800ca58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ca5c:	81a3      	strh	r3, [r4, #12]
 800ca5e:	2300      	movs	r3, #0
 800ca60:	6063      	str	r3, [r4, #4]
 800ca62:	6923      	ldr	r3, [r4, #16]
 800ca64:	6023      	str	r3, [r4, #0]
 800ca66:	89a3      	ldrh	r3, [r4, #12]
 800ca68:	f043 0308 	orr.w	r3, r3, #8
 800ca6c:	81a3      	strh	r3, [r4, #12]
 800ca6e:	6923      	ldr	r3, [r4, #16]
 800ca70:	b94b      	cbnz	r3, 800ca86 <__swsetup_r+0x7a>
 800ca72:	89a3      	ldrh	r3, [r4, #12]
 800ca74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ca78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca7c:	d003      	beq.n	800ca86 <__swsetup_r+0x7a>
 800ca7e:	4621      	mov	r1, r4
 800ca80:	4628      	mov	r0, r5
 800ca82:	f000 f883 	bl	800cb8c <__smakebuf_r>
 800ca86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca8a:	f013 0201 	ands.w	r2, r3, #1
 800ca8e:	d00a      	beq.n	800caa6 <__swsetup_r+0x9a>
 800ca90:	2200      	movs	r2, #0
 800ca92:	60a2      	str	r2, [r4, #8]
 800ca94:	6962      	ldr	r2, [r4, #20]
 800ca96:	4252      	negs	r2, r2
 800ca98:	61a2      	str	r2, [r4, #24]
 800ca9a:	6922      	ldr	r2, [r4, #16]
 800ca9c:	b942      	cbnz	r2, 800cab0 <__swsetup_r+0xa4>
 800ca9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800caa2:	d1c5      	bne.n	800ca30 <__swsetup_r+0x24>
 800caa4:	bd38      	pop	{r3, r4, r5, pc}
 800caa6:	0799      	lsls	r1, r3, #30
 800caa8:	bf58      	it	pl
 800caaa:	6962      	ldrpl	r2, [r4, #20]
 800caac:	60a2      	str	r2, [r4, #8]
 800caae:	e7f4      	b.n	800ca9a <__swsetup_r+0x8e>
 800cab0:	2000      	movs	r0, #0
 800cab2:	e7f7      	b.n	800caa4 <__swsetup_r+0x98>
 800cab4:	20000110 	.word	0x20000110

0800cab8 <_raise_r>:
 800cab8:	291f      	cmp	r1, #31
 800caba:	b538      	push	{r3, r4, r5, lr}
 800cabc:	4605      	mov	r5, r0
 800cabe:	460c      	mov	r4, r1
 800cac0:	d904      	bls.n	800cacc <_raise_r+0x14>
 800cac2:	2316      	movs	r3, #22
 800cac4:	6003      	str	r3, [r0, #0]
 800cac6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800caca:	bd38      	pop	{r3, r4, r5, pc}
 800cacc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cace:	b112      	cbz	r2, 800cad6 <_raise_r+0x1e>
 800cad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cad4:	b94b      	cbnz	r3, 800caea <_raise_r+0x32>
 800cad6:	4628      	mov	r0, r5
 800cad8:	f000 f830 	bl	800cb3c <_getpid_r>
 800cadc:	4622      	mov	r2, r4
 800cade:	4601      	mov	r1, r0
 800cae0:	4628      	mov	r0, r5
 800cae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cae6:	f000 b817 	b.w	800cb18 <_kill_r>
 800caea:	2b01      	cmp	r3, #1
 800caec:	d00a      	beq.n	800cb04 <_raise_r+0x4c>
 800caee:	1c59      	adds	r1, r3, #1
 800caf0:	d103      	bne.n	800cafa <_raise_r+0x42>
 800caf2:	2316      	movs	r3, #22
 800caf4:	6003      	str	r3, [r0, #0]
 800caf6:	2001      	movs	r0, #1
 800caf8:	e7e7      	b.n	800caca <_raise_r+0x12>
 800cafa:	2100      	movs	r1, #0
 800cafc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cb00:	4620      	mov	r0, r4
 800cb02:	4798      	blx	r3
 800cb04:	2000      	movs	r0, #0
 800cb06:	e7e0      	b.n	800caca <_raise_r+0x12>

0800cb08 <raise>:
 800cb08:	4b02      	ldr	r3, [pc, #8]	@ (800cb14 <raise+0xc>)
 800cb0a:	4601      	mov	r1, r0
 800cb0c:	6818      	ldr	r0, [r3, #0]
 800cb0e:	f7ff bfd3 	b.w	800cab8 <_raise_r>
 800cb12:	bf00      	nop
 800cb14:	20000110 	.word	0x20000110

0800cb18 <_kill_r>:
 800cb18:	b538      	push	{r3, r4, r5, lr}
 800cb1a:	4d07      	ldr	r5, [pc, #28]	@ (800cb38 <_kill_r+0x20>)
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	4604      	mov	r4, r0
 800cb20:	4608      	mov	r0, r1
 800cb22:	4611      	mov	r1, r2
 800cb24:	602b      	str	r3, [r5, #0]
 800cb26:	f7f4 fee7 	bl	80018f8 <_kill>
 800cb2a:	1c43      	adds	r3, r0, #1
 800cb2c:	d102      	bne.n	800cb34 <_kill_r+0x1c>
 800cb2e:	682b      	ldr	r3, [r5, #0]
 800cb30:	b103      	cbz	r3, 800cb34 <_kill_r+0x1c>
 800cb32:	6023      	str	r3, [r4, #0]
 800cb34:	bd38      	pop	{r3, r4, r5, pc}
 800cb36:	bf00      	nop
 800cb38:	20002194 	.word	0x20002194

0800cb3c <_getpid_r>:
 800cb3c:	f7f4 bed4 	b.w	80018e8 <_getpid>

0800cb40 <__swhatbuf_r>:
 800cb40:	b570      	push	{r4, r5, r6, lr}
 800cb42:	460c      	mov	r4, r1
 800cb44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb48:	2900      	cmp	r1, #0
 800cb4a:	b096      	sub	sp, #88	@ 0x58
 800cb4c:	4615      	mov	r5, r2
 800cb4e:	461e      	mov	r6, r3
 800cb50:	da0d      	bge.n	800cb6e <__swhatbuf_r+0x2e>
 800cb52:	89a3      	ldrh	r3, [r4, #12]
 800cb54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb58:	f04f 0100 	mov.w	r1, #0
 800cb5c:	bf14      	ite	ne
 800cb5e:	2340      	movne	r3, #64	@ 0x40
 800cb60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cb64:	2000      	movs	r0, #0
 800cb66:	6031      	str	r1, [r6, #0]
 800cb68:	602b      	str	r3, [r5, #0]
 800cb6a:	b016      	add	sp, #88	@ 0x58
 800cb6c:	bd70      	pop	{r4, r5, r6, pc}
 800cb6e:	466a      	mov	r2, sp
 800cb70:	f000 f848 	bl	800cc04 <_fstat_r>
 800cb74:	2800      	cmp	r0, #0
 800cb76:	dbec      	blt.n	800cb52 <__swhatbuf_r+0x12>
 800cb78:	9901      	ldr	r1, [sp, #4]
 800cb7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb82:	4259      	negs	r1, r3
 800cb84:	4159      	adcs	r1, r3
 800cb86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb8a:	e7eb      	b.n	800cb64 <__swhatbuf_r+0x24>

0800cb8c <__smakebuf_r>:
 800cb8c:	898b      	ldrh	r3, [r1, #12]
 800cb8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb90:	079d      	lsls	r5, r3, #30
 800cb92:	4606      	mov	r6, r0
 800cb94:	460c      	mov	r4, r1
 800cb96:	d507      	bpl.n	800cba8 <__smakebuf_r+0x1c>
 800cb98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb9c:	6023      	str	r3, [r4, #0]
 800cb9e:	6123      	str	r3, [r4, #16]
 800cba0:	2301      	movs	r3, #1
 800cba2:	6163      	str	r3, [r4, #20]
 800cba4:	b003      	add	sp, #12
 800cba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cba8:	ab01      	add	r3, sp, #4
 800cbaa:	466a      	mov	r2, sp
 800cbac:	f7ff ffc8 	bl	800cb40 <__swhatbuf_r>
 800cbb0:	9f00      	ldr	r7, [sp, #0]
 800cbb2:	4605      	mov	r5, r0
 800cbb4:	4639      	mov	r1, r7
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	f7fe fec6 	bl	800b948 <_malloc_r>
 800cbbc:	b948      	cbnz	r0, 800cbd2 <__smakebuf_r+0x46>
 800cbbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbc2:	059a      	lsls	r2, r3, #22
 800cbc4:	d4ee      	bmi.n	800cba4 <__smakebuf_r+0x18>
 800cbc6:	f023 0303 	bic.w	r3, r3, #3
 800cbca:	f043 0302 	orr.w	r3, r3, #2
 800cbce:	81a3      	strh	r3, [r4, #12]
 800cbd0:	e7e2      	b.n	800cb98 <__smakebuf_r+0xc>
 800cbd2:	89a3      	ldrh	r3, [r4, #12]
 800cbd4:	6020      	str	r0, [r4, #0]
 800cbd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbda:	81a3      	strh	r3, [r4, #12]
 800cbdc:	9b01      	ldr	r3, [sp, #4]
 800cbde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cbe2:	b15b      	cbz	r3, 800cbfc <__smakebuf_r+0x70>
 800cbe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbe8:	4630      	mov	r0, r6
 800cbea:	f000 f81d 	bl	800cc28 <_isatty_r>
 800cbee:	b128      	cbz	r0, 800cbfc <__smakebuf_r+0x70>
 800cbf0:	89a3      	ldrh	r3, [r4, #12]
 800cbf2:	f023 0303 	bic.w	r3, r3, #3
 800cbf6:	f043 0301 	orr.w	r3, r3, #1
 800cbfa:	81a3      	strh	r3, [r4, #12]
 800cbfc:	89a3      	ldrh	r3, [r4, #12]
 800cbfe:	431d      	orrs	r5, r3
 800cc00:	81a5      	strh	r5, [r4, #12]
 800cc02:	e7cf      	b.n	800cba4 <__smakebuf_r+0x18>

0800cc04 <_fstat_r>:
 800cc04:	b538      	push	{r3, r4, r5, lr}
 800cc06:	4d07      	ldr	r5, [pc, #28]	@ (800cc24 <_fstat_r+0x20>)
 800cc08:	2300      	movs	r3, #0
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	4608      	mov	r0, r1
 800cc0e:	4611      	mov	r1, r2
 800cc10:	602b      	str	r3, [r5, #0]
 800cc12:	f7f4 fed1 	bl	80019b8 <_fstat>
 800cc16:	1c43      	adds	r3, r0, #1
 800cc18:	d102      	bne.n	800cc20 <_fstat_r+0x1c>
 800cc1a:	682b      	ldr	r3, [r5, #0]
 800cc1c:	b103      	cbz	r3, 800cc20 <_fstat_r+0x1c>
 800cc1e:	6023      	str	r3, [r4, #0]
 800cc20:	bd38      	pop	{r3, r4, r5, pc}
 800cc22:	bf00      	nop
 800cc24:	20002194 	.word	0x20002194

0800cc28 <_isatty_r>:
 800cc28:	b538      	push	{r3, r4, r5, lr}
 800cc2a:	4d06      	ldr	r5, [pc, #24]	@ (800cc44 <_isatty_r+0x1c>)
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	4604      	mov	r4, r0
 800cc30:	4608      	mov	r0, r1
 800cc32:	602b      	str	r3, [r5, #0]
 800cc34:	f7f4 fed0 	bl	80019d8 <_isatty>
 800cc38:	1c43      	adds	r3, r0, #1
 800cc3a:	d102      	bne.n	800cc42 <_isatty_r+0x1a>
 800cc3c:	682b      	ldr	r3, [r5, #0]
 800cc3e:	b103      	cbz	r3, 800cc42 <_isatty_r+0x1a>
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	bd38      	pop	{r3, r4, r5, pc}
 800cc44:	20002194 	.word	0x20002194

0800cc48 <_init>:
 800cc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4a:	bf00      	nop
 800cc4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc4e:	bc08      	pop	{r3}
 800cc50:	469e      	mov	lr, r3
 800cc52:	4770      	bx	lr

0800cc54 <_fini>:
 800cc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc56:	bf00      	nop
 800cc58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc5a:	bc08      	pop	{r3}
 800cc5c:	469e      	mov	lr, r3
 800cc5e:	4770      	bx	lr
