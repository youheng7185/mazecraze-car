
mazecrase-car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff28  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e24  080100c8  080100c8  000110c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010eec  08010eec  000122e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010eec  08010eec  00011eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ef4  08010ef4  000122e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ef4  08010ef4  00011ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010ef8  08010ef8  00011ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e4  20000000  08010efc  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002308  200002e4  080111e0  000122e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025ec  080111e0  000125ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000122e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e32  00000000  00000000  00012314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047df  00000000  00000000  00036146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001eb8  00000000  00000000  0003a928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017a6  00000000  00000000  0003c7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c2c0  00000000  00000000  0003df86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020265  00000000  00000000  0005a246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b6c4  00000000  00000000  0007a4ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115b6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009494  00000000  00000000  00115bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011f048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e4 	.word	0x200002e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080100b0 	.word	0x080100b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e8 	.word	0x200002e8
 80001dc:	080100b0 	.word	0x080100b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <my_printf>:
#define BUFFER_LEN 128
//uint8_t tx_buffer[BUFFER_LEN];
//uint16_t usbTxLength;

static inline void my_printf(const char *format, ...)
{
 8000ee4:	b40f      	push	{r0, r1, r2, r3}
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b0a2      	sub	sp, #136	@ 0x88
 8000eea:	af00      	add	r7, sp, #0
    char tx_buffer[BUFFER_LEN];
    va_list args;
    va_start(args, format);
 8000eec:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ef0:	603b      	str	r3, [r7, #0]
    int usbTxLength = vsnprintf(tx_buffer, BUFFER_LEN, format, args);
 8000ef2:	1d38      	adds	r0, r7, #4
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000efa:	2180      	movs	r1, #128	@ 0x80
 8000efc:	f00c fffa 	bl	800def4 <vsniprintf>
 8000f00:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    va_end(args);

    if (usbTxLength > 0 && usbTxLength < BUFFER_LEN)
 8000f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	dd0b      	ble.n	8000f24 <my_printf+0x40>
 8000f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f10:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f12:	dc07      	bgt.n	8000f24 <my_printf+0x40>
    {
        CDC_Transmit_FS((uint8_t *)tx_buffer, usbTxLength);
 8000f14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f00b fd9c 	bl	800ca5c <CDC_Transmit_FS>
    }
}
 8000f24:	bf00      	nop
 8000f26:	3788      	adds	r7, #136	@ 0x88
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f2e:	b004      	add	sp, #16
 8000f30:	4770      	bx	lr
	...

08000f34 <lsm6dsl_read_data_polling>:
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len);
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len);
static void platform_delay(uint32_t ms);

void lsm6dsl_read_data_polling(void)
{
 8000f34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f38:	b08a      	sub	sp, #40	@ 0x28
 8000f3a:	af04      	add	r7, sp, #16
  /* Initialize mems driver interface */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8000f3c:	4b9c      	ldr	r3, [pc, #624]	@ (80011b0 <lsm6dsl_read_data_polling+0x27c>)
 8000f3e:	60bb      	str	r3, [r7, #8]
  dev_ctx.read_reg = platform_read;
 8000f40:	4b9c      	ldr	r3, [pc, #624]	@ (80011b4 <lsm6dsl_read_data_polling+0x280>)
 8000f42:	60fb      	str	r3, [r7, #12]
  dev_ctx.mdelay = platform_delay;
 8000f44:	4b9c      	ldr	r3, [pc, #624]	@ (80011b8 <lsm6dsl_read_data_polling+0x284>)
 8000f46:	613b      	str	r3, [r7, #16]
  dev_ctx.handle = &SENSOR_BUS;
 8000f48:	4b9c      	ldr	r3, [pc, #624]	@ (80011bc <lsm6dsl_read_data_polling+0x288>)
 8000f4a:	617b      	str	r3, [r7, #20]

  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 8000f4c:	200f      	movs	r0, #15
 8000f4e:	f000 f991 	bl	8001274 <platform_delay>
  /* Check device ID */
  whoamI = 0;
 8000f52:	4b9b      	ldr	r3, [pc, #620]	@ (80011c0 <lsm6dsl_read_data_polling+0x28c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
  lsm6dsl_device_id_get(&dev_ctx, &whoamI);
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	4998      	ldr	r1, [pc, #608]	@ (80011c0 <lsm6dsl_read_data_polling+0x28c>)
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fb9d 	bl	800169e <lsm6dsl_device_id_get>

  if ( whoamI != LSM6DSL_ID ) {
 8000f64:	4b96      	ldr	r3, [pc, #600]	@ (80011c0 <lsm6dsl_read_data_polling+0x28c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b6a      	cmp	r3, #106	@ 0x6a
 8000f6a:	d007      	beq.n	8000f7c <lsm6dsl_read_data_polling+0x48>
	  my_printf("device id is wrong: %d\r\n", whoamI);
 8000f6c:	4b94      	ldr	r3, [pc, #592]	@ (80011c0 <lsm6dsl_read_data_polling+0x28c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	4894      	ldr	r0, [pc, #592]	@ (80011c4 <lsm6dsl_read_data_polling+0x290>)
 8000f74:	f7ff ffb6 	bl	8000ee4 <my_printf>
	  while (1);
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <lsm6dsl_read_data_polling+0x44>
	  /*manage here device not found */
  } else {
	  my_printf("device id correct\r\n");
 8000f7c:	4892      	ldr	r0, [pc, #584]	@ (80011c8 <lsm6dsl_read_data_polling+0x294>)
 8000f7e:	f7ff ffb1 	bl	8000ee4 <my_printf>
  }


  /* Restore default configuration */
  lsm6dsl_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	2101      	movs	r1, #1
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 fb99 	bl	80016c0 <lsm6dsl_reset_set>
  my_printf("restore default config correct\r\n");
 8000f8e:	488f      	ldr	r0, [pc, #572]	@ (80011cc <lsm6dsl_read_data_polling+0x298>)
 8000f90:	f7ff ffa8 	bl	8000ee4 <my_printf>
  do {
    lsm6dsl_reset_get(&dev_ctx, &rst);
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	498d      	ldr	r1, [pc, #564]	@ (80011d0 <lsm6dsl_read_data_polling+0x29c>)
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fbb6 	bl	800170c <lsm6dsl_reset_get>
  } while (rst);
 8000fa0:	4b8b      	ldr	r3, [pc, #556]	@ (80011d0 <lsm6dsl_read_data_polling+0x29c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f5      	bne.n	8000f94 <lsm6dsl_read_data_polling+0x60>
  my_printf("reset done\r\n");
 8000fa8:	488a      	ldr	r0, [pc, #552]	@ (80011d4 <lsm6dsl_read_data_polling+0x2a0>)
 8000faa:	f7ff ff9b 	bl	8000ee4 <my_printf>
  /* Enable Block Data Update */
  lsm6dsl_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 fa89 	bl	80014cc <lsm6dsl_block_data_update_set>
  /* Set Output Data Rate */
  lsm6dsl_xl_data_rate_set(&dev_ctx, LSM6DSL_XL_ODR_12Hz5);
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 fa11 	bl	80013e8 <lsm6dsl_xl_data_rate_set>
  lsm6dsl_gy_data_rate_set(&dev_ctx, LSM6DSL_GY_ODR_12Hz5);
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	2101      	movs	r1, #1
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fa57 	bl	8001480 <lsm6dsl_gy_data_rate_set>
  /* Set full scale */
  lsm6dsl_xl_full_scale_set(&dev_ctx, LSM6DSL_2g);
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 f9df 	bl	800139c <lsm6dsl_xl_full_scale_set>
  lsm6dsl_gy_full_scale_set(&dev_ctx, LSM6DSL_2000dps);
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	2106      	movs	r1, #6
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fa25 	bl	8001434 <lsm6dsl_gy_full_scale_set>
  /* Configure filtering chain(No aux interface) */
  /* Accelerometer - analog filter */
  lsm6dsl_xl_filter_analog_set(&dev_ctx, LSM6DSL_XL_ANA_BW_400Hz);
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	2101      	movs	r1, #1
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fba4 	bl	800173e <lsm6dsl_xl_filter_analog_set>
  /* Accelerometer - LPF1 path ( LPF2 not used )*/
  //lsm6dsl_xl_lp1_bandwidth_set(&dev_ctx, LSM6DSL_XL_LP1_ODR_DIV_4);
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx,
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	2111      	movs	r1, #17
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fbc4 	bl	800178a <lsm6dsl_xl_lp2_bandwidth_set>
                               LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
  /* Accelerometer - High Pass / Slope path */
  //lsm6dsl_xl_reference_mode_set(&dev_ctx, PROPERTY_DISABLE);
  //lsm6dsl_xl_hp_bandwidth_set(&dev_ctx, LSM6DSL_XL_HP_ODR_DIV_100);
  /* Gyroscope - filtering chain */
  lsm6dsl_gy_band_pass_set(&dev_ctx, LSM6DSL_HP_260mHz_LP1_STRONG);
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	21a8      	movs	r1, #168	@ 0xa8
 8001008:	4618      	mov	r0, r3
 800100a:	f000 fbf5 	bl	80017f8 <lsm6dsl_gy_band_pass_set>
  my_printf("setup parameter done\r\n");
 800100e:	4872      	ldr	r0, [pc, #456]	@ (80011d8 <lsm6dsl_read_data_polling+0x2a4>)
 8001010:	f7ff ff68 	bl	8000ee4 <my_printf>

  /* Read samples in polling mode (no int) */
  while (1) {
    /* Read output only if new value is available */
    lsm6dsl_reg_t reg;
    lsm6dsl_status_reg_get(&dev_ctx, &reg.status_reg);
 8001014:	1d3a      	adds	r2, r7, #4
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fa7b 	bl	8001518 <lsm6dsl_status_reg_get>

    if (reg.status_reg.xlda) {
 8001022:	793b      	ldrb	r3, [r7, #4]
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d049      	beq.n	80010c2 <lsm6dsl_read_data_polling+0x18e>
      /* Read magnetic field data */
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800102e:	2206      	movs	r2, #6
 8001030:	2100      	movs	r1, #0
 8001032:	486a      	ldr	r0, [pc, #424]	@ (80011dc <lsm6dsl_read_data_polling+0x2a8>)
 8001034:	f00d f800 	bl	800e038 <memset>
      lsm6dsl_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	4967      	ldr	r1, [pc, #412]	@ (80011dc <lsm6dsl_read_data_polling+0x2a8>)
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fae5 	bl	800160e <lsm6dsl_acceleration_raw_get>
      acceleration_mg[0] = lsm6dsl_from_fs2g_to_mg(
 8001044:	4b65      	ldr	r3, [pc, #404]	@ (80011dc <lsm6dsl_read_data_polling+0x2a8>)
 8001046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f95a 	bl	8001304 <lsm6dsl_from_fs2g_to_mg>
 8001050:	eef0 7a40 	vmov.f32	s15, s0
 8001054:	4b62      	ldr	r3, [pc, #392]	@ (80011e0 <lsm6dsl_read_data_polling+0x2ac>)
 8001056:	edc3 7a00 	vstr	s15, [r3]
                             data_raw_acceleration[0]);
      acceleration_mg[1] = lsm6dsl_from_fs2g_to_mg(
 800105a:	4b60      	ldr	r3, [pc, #384]	@ (80011dc <lsm6dsl_read_data_polling+0x2a8>)
 800105c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001060:	4618      	mov	r0, r3
 8001062:	f000 f94f 	bl	8001304 <lsm6dsl_from_fs2g_to_mg>
 8001066:	eef0 7a40 	vmov.f32	s15, s0
 800106a:	4b5d      	ldr	r3, [pc, #372]	@ (80011e0 <lsm6dsl_read_data_polling+0x2ac>)
 800106c:	edc3 7a01 	vstr	s15, [r3, #4]
                             data_raw_acceleration[1]);
      acceleration_mg[2] = lsm6dsl_from_fs2g_to_mg(
 8001070:	4b5a      	ldr	r3, [pc, #360]	@ (80011dc <lsm6dsl_read_data_polling+0x2a8>)
 8001072:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f944 	bl	8001304 <lsm6dsl_from_fs2g_to_mg>
 800107c:	eef0 7a40 	vmov.f32	s15, s0
 8001080:	4b57      	ldr	r3, [pc, #348]	@ (80011e0 <lsm6dsl_read_data_polling+0x2ac>)
 8001082:	edc3 7a02 	vstr	s15, [r3, #8]
                             data_raw_acceleration[2]);
      my_printf( "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001086:	4b56      	ldr	r3, [pc, #344]	@ (80011e0 <lsm6dsl_read_data_polling+0x2ac>)
 8001088:	681b      	ldr	r3, [r3, #0]
      my_printf( "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa64 	bl	8000558 <__aeabi_f2d>
 8001090:	4680      	mov	r8, r0
 8001092:	4689      	mov	r9, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001094:	4b52      	ldr	r3, [pc, #328]	@ (80011e0 <lsm6dsl_read_data_polling+0x2ac>)
 8001096:	685b      	ldr	r3, [r3, #4]
      my_printf( "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fa5d 	bl	8000558 <__aeabi_f2d>
 800109e:	4604      	mov	r4, r0
 80010a0:	460d      	mov	r5, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80010a2:	4b4f      	ldr	r3, [pc, #316]	@ (80011e0 <lsm6dsl_read_data_polling+0x2ac>)
 80010a4:	689b      	ldr	r3, [r3, #8]
      my_printf( "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa56 	bl	8000558 <__aeabi_f2d>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010b4:	e9cd 4500 	strd	r4, r5, [sp]
 80010b8:	4642      	mov	r2, r8
 80010ba:	464b      	mov	r3, r9
 80010bc:	4849      	ldr	r0, [pc, #292]	@ (80011e4 <lsm6dsl_read_data_polling+0x2b0>)
 80010be:	f7ff ff11 	bl	8000ee4 <my_printf>
    }

    if (reg.status_reg.gda) {
 80010c2:	793b      	ldrb	r3, [r7, #4]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d049      	beq.n	8001162 <lsm6dsl_read_data_polling+0x22e>
      /* Read magnetic field data */
      memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80010ce:	2206      	movs	r2, #6
 80010d0:	2100      	movs	r1, #0
 80010d2:	4845      	ldr	r0, [pc, #276]	@ (80011e8 <lsm6dsl_read_data_polling+0x2b4>)
 80010d4:	f00c ffb0 	bl	800e038 <memset>
      lsm6dsl_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 80010d8:	f107 0308 	add.w	r3, r7, #8
 80010dc:	4942      	ldr	r1, [pc, #264]	@ (80011e8 <lsm6dsl_read_data_polling+0x2b4>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fa4d 	bl	800157e <lsm6dsl_angular_rate_raw_get>
      angular_rate_mdps[0] = lsm6dsl_from_fs2000dps_to_mdps(
 80010e4:	4b40      	ldr	r3, [pc, #256]	@ (80011e8 <lsm6dsl_read_data_polling+0x2b4>)
 80010e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f922 	bl	8001334 <lsm6dsl_from_fs2000dps_to_mdps>
 80010f0:	eef0 7a40 	vmov.f32	s15, s0
 80010f4:	4b3d      	ldr	r3, [pc, #244]	@ (80011ec <lsm6dsl_read_data_polling+0x2b8>)
 80010f6:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_angular_rate[0]);
      angular_rate_mdps[1] = lsm6dsl_from_fs2000dps_to_mdps(
 80010fa:	4b3b      	ldr	r3, [pc, #236]	@ (80011e8 <lsm6dsl_read_data_polling+0x2b4>)
 80010fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f917 	bl	8001334 <lsm6dsl_from_fs2000dps_to_mdps>
 8001106:	eef0 7a40 	vmov.f32	s15, s0
 800110a:	4b38      	ldr	r3, [pc, #224]	@ (80011ec <lsm6dsl_read_data_polling+0x2b8>)
 800110c:	edc3 7a01 	vstr	s15, [r3, #4]
                               data_raw_angular_rate[1]);
      angular_rate_mdps[2] = lsm6dsl_from_fs2000dps_to_mdps(
 8001110:	4b35      	ldr	r3, [pc, #212]	@ (80011e8 <lsm6dsl_read_data_polling+0x2b4>)
 8001112:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f90c 	bl	8001334 <lsm6dsl_from_fs2000dps_to_mdps>
 800111c:	eef0 7a40 	vmov.f32	s15, s0
 8001120:	4b32      	ldr	r3, [pc, #200]	@ (80011ec <lsm6dsl_read_data_polling+0x2b8>)
 8001122:	edc3 7a02 	vstr	s15, [r3, #8]
                               data_raw_angular_rate[2]);
      my_printf("Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001126:	4b31      	ldr	r3, [pc, #196]	@ (80011ec <lsm6dsl_read_data_polling+0x2b8>)
 8001128:	681b      	ldr	r3, [r3, #0]
      my_printf("Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa14 	bl	8000558 <__aeabi_f2d>
 8001130:	4680      	mov	r8, r0
 8001132:	4689      	mov	r9, r1
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001134:	4b2d      	ldr	r3, [pc, #180]	@ (80011ec <lsm6dsl_read_data_polling+0x2b8>)
 8001136:	685b      	ldr	r3, [r3, #4]
      my_printf("Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fa0d 	bl	8000558 <__aeabi_f2d>
 800113e:	4604      	mov	r4, r0
 8001140:	460d      	mov	r5, r1
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001142:	4b2a      	ldr	r3, [pc, #168]	@ (80011ec <lsm6dsl_read_data_polling+0x2b8>)
 8001144:	689b      	ldr	r3, [r3, #8]
      my_printf("Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fa06 	bl	8000558 <__aeabi_f2d>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001154:	e9cd 4500 	strd	r4, r5, [sp]
 8001158:	4642      	mov	r2, r8
 800115a:	464b      	mov	r3, r9
 800115c:	4824      	ldr	r0, [pc, #144]	@ (80011f0 <lsm6dsl_read_data_polling+0x2bc>)
 800115e:	f7ff fec1 	bl	8000ee4 <my_printf>
    }

    if (reg.status_reg.tda) {
 8001162:	793b      	ldrb	r3, [r7, #4]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	f43f af52 	beq.w	8001014 <lsm6dsl_read_data_polling+0xe0>
      /* Read temperature data */
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8001170:	4b20      	ldr	r3, [pc, #128]	@ (80011f4 <lsm6dsl_read_data_polling+0x2c0>)
 8001172:	2200      	movs	r2, #0
 8001174:	801a      	strh	r2, [r3, #0]
      lsm6dsl_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	491e      	ldr	r1, [pc, #120]	@ (80011f4 <lsm6dsl_read_data_polling+0x2c0>)
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f9dc 	bl	800153a <lsm6dsl_temperature_raw_get>
      temperature_degC = lsm6dsl_from_lsb_to_celsius(
 8001182:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <lsm6dsl_read_data_polling+0x2c0>)
 8001184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f8eb 	bl	8001364 <lsm6dsl_from_lsb_to_celsius>
 800118e:	eef0 7a40 	vmov.f32	s15, s0
 8001192:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <lsm6dsl_read_data_polling+0x2c4>)
 8001194:	edc3 7a00 	vstr	s15, [r3]
                           data_raw_temperature );
      my_printf("Temperature [degC]:%6.2f\r\n", temperature_degC );
 8001198:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <lsm6dsl_read_data_polling+0x2c4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9db 	bl	8000558 <__aeabi_f2d>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4815      	ldr	r0, [pc, #84]	@ (80011fc <lsm6dsl_read_data_polling+0x2c8>)
 80011a8:	f7ff fe9c 	bl	8000ee4 <my_printf>
  while (1) {
 80011ac:	e732      	b.n	8001014 <lsm6dsl_read_data_polling+0xe0>
 80011ae:	bf00      	nop
 80011b0:	08001201 	.word	0x08001201
 80011b4:	0800123b 	.word	0x0800123b
 80011b8:	08001275 	.word	0x08001275
 80011bc:	20000384 	.word	0x20000384
 80011c0:	2000032c 	.word	0x2000032c
 80011c4:	080100c8 	.word	0x080100c8
 80011c8:	080100e4 	.word	0x080100e4
 80011cc:	080100f8 	.word	0x080100f8
 80011d0:	2000032d 	.word	0x2000032d
 80011d4:	0801011c 	.word	0x0801011c
 80011d8:	0801012c 	.word	0x0801012c
 80011dc:	20000300 	.word	0x20000300
 80011e0:	20000310 	.word	0x20000310
 80011e4:	08010144 	.word	0x08010144
 80011e8:	20000308 	.word	0x20000308
 80011ec:	2000031c 	.word	0x2000031c
 80011f0:	0801016c 	.word	0x0801016c
 80011f4:	2000030e 	.word	0x2000030e
 80011f8:	20000328 	.word	0x20000328
 80011fc:	08010194 	.word	0x08010194

08001200 <platform_write>:
    }
  }
}

static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af04      	add	r7, sp, #16
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	461a      	mov	r2, r3
 800120c:	460b      	mov	r3, r1
 800120e:	72fb      	strb	r3, [r7, #11]
 8001210:	4613      	mov	r3, r2
 8001212:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_H, reg,
 8001214:	7afb      	ldrb	r3, [r7, #11]
 8001216:	b29a      	uxth	r2, r3
 8001218:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	893b      	ldrh	r3, [r7, #8]
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	21d7      	movs	r1, #215	@ 0xd7
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f004 f97a 	bl	8005524 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b088      	sub	sp, #32
 800123e:	af04      	add	r7, sp, #16
 8001240:	60f8      	str	r0, [r7, #12]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	461a      	mov	r2, r3
 8001246:	460b      	mov	r3, r1
 8001248:	72fb      	strb	r3, [r7, #11]
 800124a:	4613      	mov	r3, r2
 800124c:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_H, reg,
 800124e:	7afb      	ldrb	r3, [r7, #11]
 8001250:	b29a      	uxth	r2, r3
 8001252:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	893b      	ldrh	r3, [r7, #8]
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2301      	movs	r3, #1
 8001262:	21d7      	movs	r1, #215	@ 0xd7
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f004 fa57 	bl	8005718 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <platform_delay>:

static void platform_delay(uint32_t ms)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f003 fa09 	bl	8004694 <HAL_Delay>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <lsm6dsl_read_reg>:
  *
  */
int32_t __weak lsm6dsl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800128a:	b590      	push	{r4, r7, lr}
 800128c:	b087      	sub	sp, #28
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	461a      	mov	r2, r3
 8001296:	460b      	mov	r3, r1
 8001298:	72fb      	strb	r3, [r7, #11]
 800129a:	4613      	mov	r3, r2
 800129c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <lsm6dsl_read_reg+0x20>
  {
    return -1;
 80012a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012a8:	e009      	b.n	80012be <lsm6dsl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	685c      	ldr	r4, [r3, #4]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	68d8      	ldr	r0, [r3, #12]
 80012b2:	893b      	ldrh	r3, [r7, #8]
 80012b4:	7af9      	ldrb	r1, [r7, #11]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	47a0      	blx	r4
 80012ba:	6178      	str	r0, [r7, #20]

  return ret;
 80012bc:	697b      	ldr	r3, [r7, #20]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	371c      	adds	r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd90      	pop	{r4, r7, pc}

080012c6 <lsm6dsl_write_reg>:
  *
  */
int32_t __weak lsm6dsl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80012c6:	b590      	push	{r4, r7, lr}
 80012c8:	b087      	sub	sp, #28
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	461a      	mov	r2, r3
 80012d2:	460b      	mov	r3, r1
 80012d4:	72fb      	strb	r3, [r7, #11]
 80012d6:	4613      	mov	r3, r2
 80012d8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <lsm6dsl_write_reg+0x20>
  {
    return -1;
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012e4:	e009      	b.n	80012fa <lsm6dsl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681c      	ldr	r4, [r3, #0]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	68d8      	ldr	r0, [r3, #12]
 80012ee:	893b      	ldrh	r3, [r7, #8]
 80012f0:	7af9      	ldrb	r1, [r7, #11]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	47a0      	blx	r4
 80012f6:	6178      	str	r0, [r7, #20]

  return ret;
 80012f8:	697b      	ldr	r3, [r7, #20]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	371c      	adds	r7, #28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd90      	pop	{r4, r7, pc}
	...

08001304 <lsm6dsl_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsl_from_fs2g_to_mg(int16_t lsb)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 800130e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800131a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001330 <lsm6dsl_from_fs2g_to_mg+0x2c>
 800131e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	3d79db23 	.word	0x3d79db23

08001334 <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 800133e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001360 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 800134e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001352:	eeb0 0a67 	vmov.f32	s0, s15
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	428c0000 	.word	0x428c0000

08001364 <lsm6dsl_from_lsb_to_celsius>:

float_t lsm6dsl_from_lsb_to_celsius(int16_t lsb)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 800136e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800137a:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001398 <lsm6dsl_from_lsb_to_celsius+0x34>
 800137e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001382:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001386:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800138a:	eeb0 0a67 	vmov.f32	s0, s15
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	43800000 	.word	0x43800000

0800139c <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80013a8:	f107 0208 	add.w	r2, r7, #8
 80013ac:	2301      	movs	r3, #1
 80013ae:	2110      	movs	r1, #16
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff6a 	bl	800128a <lsm6dsl_read_reg>
 80013b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10f      	bne.n	80013de <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	7a3b      	ldrb	r3, [r7, #8]
 80013c8:	f362 0383 	bfi	r3, r2, #2, #2
 80013cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80013ce:	f107 0208 	add.w	r2, r7, #8
 80013d2:	2301      	movs	r3, #1
 80013d4:	2110      	movs	r1, #16
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ff75 	bl	80012c6 <lsm6dsl_write_reg>
 80013dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80013f4:	f107 0208 	add.w	r2, r7, #8
 80013f8:	2301      	movs	r3, #1
 80013fa:	2110      	movs	r1, #16
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff44 	bl	800128a <lsm6dsl_read_reg>
 8001402:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10f      	bne.n	800142a <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	f003 030f 	and.w	r3, r3, #15
 8001410:	b2da      	uxtb	r2, r3
 8001412:	7a3b      	ldrb	r3, [r7, #8]
 8001414:	f362 1307 	bfi	r3, r2, #4, #4
 8001418:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800141a:	f107 0208 	add.w	r2, r7, #8
 800141e:	2301      	movs	r3, #1
 8001420:	2110      	movs	r1, #16
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff4f 	bl	80012c6 <lsm6dsl_write_reg>
 8001428:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001440:	f107 0208 	add.w	r2, r7, #8
 8001444:	2301      	movs	r3, #1
 8001446:	2111      	movs	r1, #17
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff1e 	bl	800128a <lsm6dsl_read_reg>
 800144e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10f      	bne.n	8001476 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	b2da      	uxtb	r2, r3
 800145e:	7a3b      	ldrb	r3, [r7, #8]
 8001460:	f362 0343 	bfi	r3, r2, #1, #3
 8001464:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001466:	f107 0208 	add.w	r2, r7, #8
 800146a:	2301      	movs	r3, #1
 800146c:	2111      	movs	r1, #17
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff29 	bl	80012c6 <lsm6dsl_write_reg>
 8001474:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800148c:	f107 0208 	add.w	r2, r7, #8
 8001490:	2301      	movs	r3, #1
 8001492:	2111      	movs	r1, #17
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fef8 	bl	800128a <lsm6dsl_read_reg>
 800149a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10f      	bne.n	80014c2 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	f003 030f 	and.w	r3, r3, #15
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	7a3b      	ldrb	r3, [r7, #8]
 80014ac:	f362 1307 	bfi	r3, r2, #4, #4
 80014b0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80014b2:	f107 0208 	add.w	r2, r7, #8
 80014b6:	2301      	movs	r3, #1
 80014b8:	2111      	movs	r1, #17
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff03 	bl	80012c6 <lsm6dsl_write_reg>
 80014c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80014d8:	f107 0208 	add.w	r2, r7, #8
 80014dc:	2301      	movs	r3, #1
 80014de:	2112      	movs	r1, #18
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff fed2 	bl	800128a <lsm6dsl_read_reg>
 80014e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10f      	bne.n	800150e <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	7a3b      	ldrb	r3, [r7, #8]
 80014f8:	f362 1386 	bfi	r3, r2, #6, #1
 80014fc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80014fe:	f107 0208 	add.w	r2, r7, #8
 8001502:	2301      	movs	r3, #1
 8001504:	2112      	movs	r1, #18
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fedd 	bl	80012c6 <lsm6dsl_write_reg>
 800150c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <lsm6dsl_status_reg_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_status_reg_get(const stmdev_ctx_t *ctx,
                               lsm6dsl_status_reg_t *val)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t *) val, 1);
 8001522:	2301      	movs	r3, #1
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	211e      	movs	r1, #30
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff feae 	bl	800128a <lsm6dsl_read_reg>
 800152e:	60f8      	str	r0, [r7, #12]

  return ret;
 8001530:	68fb      	ldr	r3, [r7, #12]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <lsm6dsl_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUT_TEMP_L, buff, 2);
 8001544:	f107 0208 	add.w	r2, r7, #8
 8001548:	2302      	movs	r3, #2
 800154a:	2120      	movs	r1, #32
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff fe9c 	bl	800128a <lsm6dsl_read_reg>
 8001552:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8001554:	7a7b      	ldrb	r3, [r7, #9]
 8001556:	b21a      	sxth	r2, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001562:	b29b      	uxth	r3, r3
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b29b      	uxth	r3, r3
 8001568:	7a3a      	ldrb	r2, [r7, #8]
 800156a:	4413      	add	r3, r2
 800156c:	b29b      	uxth	r3, r3
 800156e:	b21a      	sxth	r2, r3
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	801a      	strh	r2, [r3, #0]

  return ret;
 8001574:	68fb      	ldr	r3, [r7, #12]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8001588:	f107 020c 	add.w	r2, r7, #12
 800158c:	2306      	movs	r3, #6
 800158e:	2122      	movs	r1, #34	@ 0x22
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fe7a 	bl	800128a <lsm6dsl_read_reg>
 8001596:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001598:	7b7b      	ldrb	r3, [r7, #13]
 800159a:	b21a      	sxth	r2, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	7b3a      	ldrb	r2, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	3302      	adds	r3, #2
 80015be:	b212      	sxth	r2, r2
 80015c0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	3302      	adds	r3, #2
 80015c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	7bba      	ldrb	r2, [r7, #14]
 80015d2:	4413      	add	r3, r2
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	3302      	adds	r3, #2
 80015da:	b212      	sxth	r2, r2
 80015dc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80015de:	7c7a      	ldrb	r2, [r7, #17]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	3304      	adds	r3, #4
 80015e4:	b212      	sxth	r2, r2
 80015e6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	3304      	adds	r3, #4
 80015ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	7c3a      	ldrb	r2, [r7, #16]
 80015f8:	4413      	add	r3, r2
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	3304      	adds	r3, #4
 8001600:	b212      	sxth	r2, r2
 8001602:	801a      	strh	r2, [r3, #0]

  return ret;
 8001604:	697b      	ldr	r3, [r7, #20]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001618:	f107 020c 	add.w	r2, r7, #12
 800161c:	2306      	movs	r3, #6
 800161e:	2128      	movs	r1, #40	@ 0x28
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff fe32 	bl	800128a <lsm6dsl_read_reg>
 8001626:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001628:	7b7b      	ldrb	r3, [r7, #13]
 800162a:	b21a      	sxth	r2, r3
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	b29b      	uxth	r3, r3
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b29b      	uxth	r3, r3
 800163c:	7b3a      	ldrb	r2, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	b29b      	uxth	r3, r3
 8001642:	b21a      	sxth	r2, r3
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001648:	7bfa      	ldrb	r2, [r7, #15]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	3302      	adds	r3, #2
 800164e:	b212      	sxth	r2, r2
 8001650:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	3302      	adds	r3, #2
 8001656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165a:	b29b      	uxth	r3, r3
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	b29b      	uxth	r3, r3
 8001660:	7bba      	ldrb	r2, [r7, #14]
 8001662:	4413      	add	r3, r2
 8001664:	b29a      	uxth	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	3302      	adds	r3, #2
 800166a:	b212      	sxth	r2, r2
 800166c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800166e:	7c7a      	ldrb	r2, [r7, #17]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	3304      	adds	r3, #4
 8001674:	b212      	sxth	r2, r2
 8001676:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	3304      	adds	r3, #4
 800167c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001680:	b29b      	uxth	r3, r3
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	b29b      	uxth	r3, r3
 8001686:	7c3a      	ldrb	r2, [r7, #16]
 8001688:	4413      	add	r3, r2
 800168a:	b29a      	uxth	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	3304      	adds	r3, #4
 8001690:	b212      	sxth	r2, r2
 8001692:	801a      	strh	r2, [r3, #0]

  return ret;
 8001694:	697b      	ldr	r3, [r7, #20]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80016a8:	2301      	movs	r3, #1
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	210f      	movs	r1, #15
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fdeb 	bl	800128a <lsm6dsl_read_reg>
 80016b4:	60f8      	str	r0, [r7, #12]

  return ret;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80016cc:	f107 0208 	add.w	r2, r7, #8
 80016d0:	2301      	movs	r3, #1
 80016d2:	2112      	movs	r1, #18
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fdd8 	bl	800128a <lsm6dsl_read_reg>
 80016da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10f      	bne.n	8001702 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	7a3b      	ldrb	r3, [r7, #8]
 80016ec:	f362 0300 	bfi	r3, r2, #0, #1
 80016f0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80016f2:	f107 0208 	add.w	r2, r7, #8
 80016f6:	2301      	movs	r3, #1
 80016f8:	2112      	movs	r1, #18
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fde3 	bl	80012c6 <lsm6dsl_write_reg>
 8001700:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001702:	68fb      	ldr	r3, [r7, #12]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001716:	f107 0208 	add.w	r2, r7, #8
 800171a:	2301      	movs	r3, #1
 800171c:	2112      	movs	r1, #18
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fdb3 	bl	800128a <lsm6dsl_read_reg>
 8001724:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8001726:	7a3b      	ldrb	r3, [r7, #8]
 8001728:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800172c:	b2db      	uxtb	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	701a      	strb	r2, [r3, #0]

  return ret;
 8001734:	68fb      	ldr	r3, [r7, #12]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <lsm6dsl_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_filter_analog_set(const stmdev_ctx_t *ctx,
                                     lsm6dsl_bw0_xl_t val)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800174a:	f107 0208 	add.w	r2, r7, #8
 800174e:	2301      	movs	r3, #1
 8001750:	2110      	movs	r1, #16
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fd99 	bl	800128a <lsm6dsl_read_reg>
 8001758:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10f      	bne.n	8001780 <lsm6dsl_xl_filter_analog_set+0x42>
  {
    ctrl1_xl.bw0_xl = (uint8_t) val;
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	b2da      	uxtb	r2, r3
 8001768:	7a3b      	ldrb	r3, [r7, #8]
 800176a:	f362 0300 	bfi	r3, r2, #0, #1
 800176e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001770:	f107 0208 	add.w	r2, r7, #8
 8001774:	2301      	movs	r3, #1
 8001776:	2110      	movs	r1, #16
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fda4 	bl	80012c6 <lsm6dsl_write_reg>
 800177e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001780:	68fb      	ldr	r3, [r7, #12]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(const stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	460b      	mov	r3, r1
 8001794:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001796:	f107 0208 	add.w	r2, r7, #8
 800179a:	2301      	movs	r3, #1
 800179c:	2117      	movs	r1, #23
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fd73 	bl	800128a <lsm6dsl_read_reg>
 80017a4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d120      	bne.n	80017ee <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	7a3b      	ldrb	r3, [r7, #8]
 80017b8:	f362 03c3 	bfi	r3, r2, #3, #1
 80017bc:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	7a3b      	ldrb	r3, [r7, #8]
 80017c8:	f362 1346 	bfi	r3, r2, #5, #2
 80017cc:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 80017ce:	7a3b      	ldrb	r3, [r7, #8]
 80017d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017d4:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 80017d6:	7a3b      	ldrb	r3, [r7, #8]
 80017d8:	f023 0304 	bic.w	r3, r3, #4
 80017dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 80017de:	f107 0208 	add.w	r2, r7, #8
 80017e2:	2301      	movs	r3, #1
 80017e4:	2117      	movs	r1, #23
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fd6d 	bl	80012c6 <lsm6dsl_write_reg>
 80017ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(const stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001804:	f107 0208 	add.w	r2, r7, #8
 8001808:	2301      	movs	r3, #1
 800180a:	2116      	movs	r1, #22
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff fd3c 	bl	800128a <lsm6dsl_read_reg>
 8001812:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d157      	bne.n	80018ca <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	b2da      	uxtb	r2, r3
 8001824:	7a3b      	ldrb	r3, [r7, #8]
 8001826:	f362 1305 	bfi	r3, r2, #4, #2
 800182a:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	09db      	lsrs	r3, r3, #7
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	b2da      	uxtb	r2, r3
 8001838:	7a3b      	ldrb	r3, [r7, #8]
 800183a:	f362 1386 	bfi	r3, r2, #6, #1
 800183e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001840:	f107 0208 	add.w	r2, r7, #8
 8001844:	2301      	movs	r3, #1
 8001846:	2116      	movs	r1, #22
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff fd3c 	bl	80012c6 <lsm6dsl_write_reg>
 800184e:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d139      	bne.n	80018ca <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001856:	f107 020c 	add.w	r2, r7, #12
 800185a:	2301      	movs	r3, #1
 800185c:	2115      	movs	r1, #21
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fd13 	bl	800128a <lsm6dsl_read_reg>
 8001864:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d12e      	bne.n	80018ca <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	b2da      	uxtb	r2, r3
 8001874:	7b3b      	ldrb	r3, [r7, #12]
 8001876:	f362 0301 	bfi	r3, r2, #0, #2
 800187a:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800187c:	f107 020c 	add.w	r2, r7, #12
 8001880:	2301      	movs	r3, #1
 8001882:	2115      	movs	r1, #21
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff fd1e 	bl	80012c6 <lsm6dsl_write_reg>
 800188a:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d11b      	bne.n	80018ca <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8001892:	f107 0210 	add.w	r2, r7, #16
 8001896:	2301      	movs	r3, #1
 8001898:	2113      	movs	r1, #19
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff fcf5 	bl	800128a <lsm6dsl_read_reg>
 80018a0:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d110      	bne.n	80018ca <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	08db      	lsrs	r3, r3, #3
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	7c3b      	ldrb	r3, [r7, #16]
 80018b4:	f362 0341 	bfi	r3, r2, #1, #1
 80018b8:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 80018ba:	f107 0210 	add.w	r2, r7, #16
 80018be:	2301      	movs	r3, #1
 80018c0:	2113      	movs	r1, #19
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fcff 	bl	80012c6 <lsm6dsl_write_reg>
 80018c8:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 80018ca:	697b      	ldr	r3, [r7, #20]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <my_printf>:
{
 80018d4:	b40f      	push	{r0, r1, r2, r3}
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b0a2      	sub	sp, #136	@ 0x88
 80018da:	af00      	add	r7, sp, #0
    va_start(args, format);
 80018dc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80018e0:	603b      	str	r3, [r7, #0]
    int usbTxLength = vsnprintf(tx_buffer, BUFFER_LEN, format, args);
 80018e2:	1d38      	adds	r0, r7, #4
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80018ea:	2180      	movs	r1, #128	@ 0x80
 80018ec:	f00c fb02 	bl	800def4 <vsniprintf>
 80018f0:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (usbTxLength > 0 && usbTxLength < BUFFER_LEN)
 80018f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	dd0b      	ble.n	8001914 <my_printf+0x40>
 80018fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001900:	2b7f      	cmp	r3, #127	@ 0x7f
 8001902:	dc07      	bgt.n	8001914 <my_printf+0x40>
        CDC_Transmit_FS((uint8_t *)tx_buffer, usbTxLength);
 8001904:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001908:	b29a      	uxth	r2, r3
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f00b f8a4 	bl	800ca5c <CDC_Transmit_FS>
}
 8001914:	bf00      	nop
 8001916:	3788      	adds	r7, #136	@ 0x88
 8001918:	46bd      	mov	sp, r7
 800191a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800191e:	b004      	add	sp, #16
 8001920:	4770      	bx	lr
	...

08001924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b090      	sub	sp, #64	@ 0x40
 8001928:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800192a:	f002 fe41 	bl	80045b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800192e:	f000 f919 	bl	8001b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001932:	f000 fb2f 	bl	8001f94 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001936:	f000 f97d 	bl	8001c34 <MX_I2C1_Init>
  MX_I2C2_Init();
 800193a:	f000 f9a9 	bl	8001c90 <MX_I2C2_Init>
  MX_TIM1_Init();
 800193e:	f000 f9d5 	bl	8001cec <MX_TIM1_Init>
  MX_TIM4_Init();
 8001942:	f000 fa7f 	bl	8001e44 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001946:	f000 fad1 	bl	8001eec <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 800194a:	f00a ff79 	bl	800c840 <MX_USB_DEVICE_Init>
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // PB13 HIGH
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // PB12 LOW
//  HAL_GPIO_WritePin(GPIOA, motor_stdby_Pin, GPIO_PIN_SET); // make standby pin high, activate the motor driver


  selectTCAChannel(0);
 800194e:	2000      	movs	r0, #0
 8001950:	f001 f894 	bl	8002a7c <selectTCAChannel>
  TCS34725_t tcs34725_sensor;
  tcs32725_begin(&tcs34725_sensor, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8001954:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001958:	2200      	movs	r2, #0
 800195a:	21f6      	movs	r1, #246	@ 0xf6
 800195c:	4618      	mov	r0, r3
 800195e:	f001 f953 	bl	8002c08 <tcs32725_begin>
  selectTCAChannel(1);
 8001962:	2001      	movs	r0, #1
 8001964:	f001 f88a 	bl	8002a7c <selectTCAChannel>
  TCS34725_t tcs34725_sensor1;
  tcs32725_begin(&tcs34725_sensor1, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8001968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196c:	2200      	movs	r2, #0
 800196e:	21f6      	movs	r1, #246	@ 0xf6
 8001970:	4618      	mov	r0, r3
 8001972:	f001 f949 	bl	8002c08 <tcs32725_begin>
  selectTCAChannel(2);
 8001976:	2002      	movs	r0, #2
 8001978:	f001 f880 	bl	8002a7c <selectTCAChannel>
  TCS34725_t tcs34725_sensor2;
  tcs32725_begin(&tcs34725_sensor2, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 800197c:	f107 0320 	add.w	r3, r7, #32
 8001980:	2200      	movs	r2, #0
 8001982:	21f6      	movs	r1, #246	@ 0xf6
 8001984:	4618      	mov	r0, r3
 8001986:	f001 f93f 	bl	8002c08 <tcs32725_begin>
  float r, g, b;
  uint32_t count = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	637b      	str	r3, [r7, #52]	@ 0x34


  uint8_t dev_id = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	74fb      	strb	r3, [r7, #19]
  uint8_t whoami = 0x0F;
 8001992:	230f      	movs	r3, #15
 8001994:	74bb      	strb	r3, [r7, #18]
  HAL_I2C_Master_Transmit(&hi2c2, 0x6B << 1, &whoami, 1, 100);
 8001996:	f107 0212 	add.w	r2, r7, #18
 800199a:	2364      	movs	r3, #100	@ 0x64
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2301      	movs	r3, #1
 80019a0:	21d6      	movs	r1, #214	@ 0xd6
 80019a2:	4869      	ldr	r0, [pc, #420]	@ (8001b48 <main+0x224>)
 80019a4:	f003 fa8e 	bl	8004ec4 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c2, 0x6B << 1, &dev_id, 1, 100);
 80019a8:	f107 0213 	add.w	r2, r7, #19
 80019ac:	2364      	movs	r3, #100	@ 0x64
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2301      	movs	r3, #1
 80019b2:	21d6      	movs	r1, #214	@ 0xd6
 80019b4:	4864      	ldr	r0, [pc, #400]	@ (8001b48 <main+0x224>)
 80019b6:	f003 fb83 	bl	80050c0 <HAL_I2C_Master_Receive>
  my_printf("my id: %d", dev_id);
 80019ba:	7cfb      	ldrb	r3, [r7, #19]
 80019bc:	4619      	mov	r1, r3
 80019be:	4863      	ldr	r0, [pc, #396]	@ (8001b4c <main+0x228>)
 80019c0:	f7ff ff88 	bl	80018d4 <my_printf>

  motor_init();
 80019c4:	f000 fb56 	bl	8002074 <motor_init>
  uint8_t speed = 25;
 80019c8:	2319      	movs	r3, #25
 80019ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  motor_direction_t dir_A = REVERSE;
 80019ce:	2301      	movs	r3, #1
 80019d0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  motor_direction_t dir_B = FORWARD;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  int32_t tick_m_a = 0, tick_m_b = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
  int16_t tick_m_a_short = 0, tick_m_b_short = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80019e6:	2300      	movs	r3, #0
 80019e8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  vl53l0x_init();
 80019ea:	f002 fcab 	bl	8004344 <vl53l0x_init>
  uint16_t range_a = 0, range_b = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	80fb      	strh	r3, [r7, #6]
 80019f2:	2300      	movs	r3, #0
 80019f4:	80bb      	strh	r3, [r7, #4]

  sh1106_init();
 80019f6:	f000 fc73 	bl	80022e0 <sh1106_init>
  sh1106_setAll(0);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f000 fd00 	bl	8002400 <sh1106_setAll>
  sh1106_sendBuffer();
 8001a00:	f000 fc90 	bl	8002324 <sh1106_sendBuffer>
  sh1106_print(10, 10, "hello world");
 8001a04:	4a52      	ldr	r2, [pc, #328]	@ (8001b50 <main+0x22c>)
 8001a06:	210a      	movs	r1, #10
 8001a08:	200a      	movs	r0, #10
 8001a0a:	f000 fd6f 	bl	80024ec <sh1106_print>
  sh1106_sendBuffer();
 8001a0e:	f000 fc89 	bl	8002324 <sh1106_sendBuffer>
  lsm6dsl_read_data_polling();
 8001a12:	f7ff fa8f 	bl	8000f34 <lsm6dsl_read_data_polling>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  vl53l0x_read_range_single(0, &range_a);
 8001a16:	1dbb      	adds	r3, r7, #6
 8001a18:	4619      	mov	r1, r3
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f002 fcc2 	bl	80043a4 <vl53l0x_read_range_single>
	  vl53l0x_read_range_single(1, &range_b);
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	4619      	mov	r1, r3
 8001a24:	2001      	movs	r0, #1
 8001a26:	f002 fcbd 	bl	80043a4 <vl53l0x_read_range_single>
	  my_printf("vl53l0x 0: %d, vl53lox 1: %d\r\n", range_a, range_b);
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	88bb      	ldrh	r3, [r7, #4]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4848      	ldr	r0, [pc, #288]	@ (8001b54 <main+0x230>)
 8001a34:	f7ff ff4e 	bl	80018d4 <my_printf>

	  selectTCAChannel(count % 3);
 8001a38:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001a3a:	4b47      	ldr	r3, [pc, #284]	@ (8001b58 <main+0x234>)
 8001a3c:	fba3 2301 	umull	r2, r3, r3, r1
 8001a40:	085a      	lsrs	r2, r3, #1
 8001a42:	4613      	mov	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	1aca      	subs	r2, r1, r3
 8001a4a:	b2d3      	uxtb	r3, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 f815 	bl	8002a7c <selectTCAChannel>
	  getRGB(&r, &g, &b);
 8001a52:	f107 0214 	add.w	r2, r7, #20
 8001a56:	f107 0118 	add.w	r1, r7, #24
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f001 f990 	bl	8002d84 <getRGB>
	  my_printf("RGB Values from %d: R = %d, G = %d, B = %d\r\n", count%3, (int)(r), (int)(g), (int)(b));
 8001a64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a66:	4b3c      	ldr	r3, [pc, #240]	@ (8001b58 <main+0x234>)
 8001a68:	fba3 1302 	umull	r1, r3, r3, r2
 8001a6c:	0859      	lsrs	r1, r3, #1
 8001a6e:	460b      	mov	r3, r1
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	440b      	add	r3, r1
 8001a74:	1ad1      	subs	r1, r2, r3
 8001a76:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a7a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001a7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a82:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001a86:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a8e:	ee17 3a90 	vmov	r3, s15
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	ee16 3a90 	vmov	r3, s13
 8001a98:	ee17 2a10 	vmov	r2, s14
 8001a9c:	482f      	ldr	r0, [pc, #188]	@ (8001b5c <main+0x238>)
 8001a9e:	f7ff ff19 	bl	80018d4 <my_printf>
	  count++;
 8001aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	637b      	str	r3, [r7, #52]	@ 0x34

      motor_set_speed(MOTOR_A, speed);
 8001aa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001aac:	4619      	mov	r1, r3
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f000 fba6 	bl	8002200 <motor_set_speed>
      motor_set_speed(MOTOR_B, speed);
 8001ab4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ab8:	4619      	mov	r1, r3
 8001aba:	2001      	movs	r0, #1
 8001abc:	f000 fba0 	bl	8002200 <motor_set_speed>

      motor_control(MOTOR_A, dir_A);
 8001ac0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f000 fafe 	bl	80020c8 <motor_control>
      motor_control(MOTOR_B, dir_B);
 8001acc:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f000 faf8 	bl	80020c8 <motor_control>

      encoder_get_tick(MOTOR_A, &tick_m_a);
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	4619      	mov	r1, r3
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f000 fbb2 	bl	8002248 <encoder_get_tick>
      encoder_get_tick(MOTOR_B, &tick_m_b);
 8001ae4:	f107 0308 	add.w	r3, r7, #8
 8001ae8:	4619      	mov	r1, r3
 8001aea:	2001      	movs	r0, #1
 8001aec:	f000 fbac 	bl	8002248 <encoder_get_tick>

      tick_m_a_short = (int16_t)(tick_m_a);  // Direct cast
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      tick_m_b_short = (int16_t)(tick_m_b);  // Direct cast
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	85bb      	strh	r3, [r7, #44]	@ 0x2c

      my_printf("motor a tick: %d, motor b tick: %d\r\n", tick_m_a_short, tick_m_b_short);
 8001af8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001afc:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8001b00:	4619      	mov	r1, r3
 8001b02:	4817      	ldr	r0, [pc, #92]	@ (8001b60 <main+0x23c>)
 8001b04:	f7ff fee6 	bl	80018d4 <my_printf>

      HAL_Delay(1000);
 8001b08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b0c:	f002 fdc2 	bl	8004694 <HAL_Delay>

      // Toggle direction
      dir_A = (dir_A == FORWARD) ? REVERSE : FORWARD;
 8001b10:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
      dir_B = (dir_B == FORWARD) ? REVERSE : FORWARD;
 8001b22:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	bf0c      	ite	eq
 8001b2a:	2301      	moveq	r3, #1
 8001b2c:	2300      	movne	r3, #0
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

      // Toggle speed between 25 and 50
      speed = (speed == 25) ? 40 : 25;
 8001b34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b38:	2b19      	cmp	r3, #25
 8001b3a:	d101      	bne.n	8001b40 <main+0x21c>
 8001b3c:	2328      	movs	r3, #40	@ 0x28
 8001b3e:	e000      	b.n	8001b42 <main+0x21e>
 8001b40:	2319      	movs	r3, #25
 8001b42:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	  vl53l0x_read_range_single(0, &range_a);
 8001b46:	e766      	b.n	8001a16 <main+0xf2>
 8001b48:	20000384 	.word	0x20000384
 8001b4c:	080101b0 	.word	0x080101b0
 8001b50:	080101bc 	.word	0x080101bc
 8001b54:	080101c8 	.word	0x080101c8
 8001b58:	aaaaaaab 	.word	0xaaaaaaab
 8001b5c:	080101e8 	.word	0x080101e8
 8001b60:	08010218 	.word	0x08010218

08001b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b094      	sub	sp, #80	@ 0x50
 8001b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6a:	f107 0320 	add.w	r3, r7, #32
 8001b6e:	2230      	movs	r2, #48	@ 0x30
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f00c fa60 	bl	800e038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	4b27      	ldr	r3, [pc, #156]	@ (8001c2c <SystemClock_Config+0xc8>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b90:	4a26      	ldr	r2, [pc, #152]	@ (8001c2c <SystemClock_Config+0xc8>)
 8001b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b98:	4b24      	ldr	r3, [pc, #144]	@ (8001c2c <SystemClock_Config+0xc8>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	4b21      	ldr	r3, [pc, #132]	@ (8001c30 <SystemClock_Config+0xcc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a20      	ldr	r2, [pc, #128]	@ (8001c30 <SystemClock_Config+0xcc>)
 8001bae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c30 <SystemClock_Config+0xcc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001bd4:	2319      	movs	r3, #25
 8001bd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001bd8:	23c0      	movs	r3, #192	@ 0xc0
 8001bda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001be0:	2304      	movs	r3, #4
 8001be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be4:	f107 0320 	add.w	r3, r7, #32
 8001be8:	4618      	mov	r0, r3
 8001bea:	f005 ff1d 	bl	8007a28 <HAL_RCC_OscConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bf4:	f000 fa38 	bl	8002068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	2103      	movs	r1, #3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f006 f97f 	bl	8007f18 <HAL_RCC_ClockConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c20:	f000 fa22 	bl	8002068 <Error_Handler>
  }
}
 8001c24:	bf00      	nop
 8001c26:	3750      	adds	r7, #80	@ 0x50
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40007000 	.word	0x40007000

08001c34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c38:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <MX_I2C1_Init+0x50>)
 8001c3a:	4a13      	ldr	r2, [pc, #76]	@ (8001c88 <MX_I2C1_Init+0x54>)
 8001c3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <MX_I2C1_Init+0x50>)
 8001c40:	4a12      	ldr	r2, [pc, #72]	@ (8001c8c <MX_I2C1_Init+0x58>)
 8001c42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <MX_I2C1_Init+0x50>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <MX_I2C1_Init+0x50>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <MX_I2C1_Init+0x50>)
 8001c52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <MX_I2C1_Init+0x50>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <MX_I2C1_Init+0x50>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c64:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <MX_I2C1_Init+0x50>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <MX_I2C1_Init+0x50>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c70:	4804      	ldr	r0, [pc, #16]	@ (8001c84 <MX_I2C1_Init+0x50>)
 8001c72:	f002 ffe3 	bl	8004c3c <HAL_I2C_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c7c:	f000 f9f4 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000330 	.word	0x20000330
 8001c88:	40005400 	.word	0x40005400
 8001c8c:	000186a0 	.word	0x000186a0

08001c90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c94:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <MX_I2C2_Init+0x50>)
 8001c96:	4a13      	ldr	r2, [pc, #76]	@ (8001ce4 <MX_I2C2_Init+0x54>)
 8001c98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <MX_I2C2_Init+0x50>)
 8001c9c:	4a12      	ldr	r2, [pc, #72]	@ (8001ce8 <MX_I2C2_Init+0x58>)
 8001c9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce0 <MX_I2C2_Init+0x50>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <MX_I2C2_Init+0x50>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <MX_I2C2_Init+0x50>)
 8001cae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cb2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <MX_I2C2_Init+0x50>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cba:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <MX_I2C2_Init+0x50>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cc0:	4b07      	ldr	r3, [pc, #28]	@ (8001ce0 <MX_I2C2_Init+0x50>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cc6:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <MX_I2C2_Init+0x50>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ccc:	4804      	ldr	r0, [pc, #16]	@ (8001ce0 <MX_I2C2_Init+0x50>)
 8001cce:	f002 ffb5 	bl	8004c3c <HAL_I2C_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001cd8:	f000 f9c6 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000384 	.word	0x20000384
 8001ce4:	40005800 	.word	0x40005800
 8001ce8:	000186a0 	.word	0x000186a0

08001cec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b096      	sub	sp, #88	@ 0x58
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d00:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]
 8001d1a:	615a      	str	r2, [r3, #20]
 8001d1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	2220      	movs	r2, #32
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f00c f987 	bl	800e038 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d2a:	4b44      	ldr	r3, [pc, #272]	@ (8001e3c <MX_TIM1_Init+0x150>)
 8001d2c:	4a44      	ldr	r2, [pc, #272]	@ (8001e40 <MX_TIM1_Init+0x154>)
 8001d2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8001d30:	4b42      	ldr	r3, [pc, #264]	@ (8001e3c <MX_TIM1_Init+0x150>)
 8001d32:	225f      	movs	r2, #95	@ 0x5f
 8001d34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d36:	4b41      	ldr	r3, [pc, #260]	@ (8001e3c <MX_TIM1_Init+0x150>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 8001d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e3c <MX_TIM1_Init+0x150>)
 8001d3e:	2231      	movs	r2, #49	@ 0x31
 8001d40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d42:	4b3e      	ldr	r3, [pc, #248]	@ (8001e3c <MX_TIM1_Init+0x150>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d48:	4b3c      	ldr	r3, [pc, #240]	@ (8001e3c <MX_TIM1_Init+0x150>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e3c <MX_TIM1_Init+0x150>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d54:	4839      	ldr	r0, [pc, #228]	@ (8001e3c <MX_TIM1_Init+0x150>)
 8001d56:	f006 faab 	bl	80082b0 <HAL_TIM_Base_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001d60:	f000 f982 	bl	8002068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d68:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d6a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4832      	ldr	r0, [pc, #200]	@ (8001e3c <MX_TIM1_Init+0x150>)
 8001d72:	f006 fdeb 	bl	800894c <HAL_TIM_ConfigClockSource>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001d7c:	f000 f974 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d80:	482e      	ldr	r0, [pc, #184]	@ (8001e3c <MX_TIM1_Init+0x150>)
 8001d82:	f006 fae4 	bl	800834e <HAL_TIM_PWM_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001d8c:	f000 f96c 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d90:	2300      	movs	r3, #0
 8001d92:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d98:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4827      	ldr	r0, [pc, #156]	@ (8001e3c <MX_TIM1_Init+0x150>)
 8001da0:	f007 f974 	bl	800908c <HAL_TIMEx_MasterConfigSynchronization>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001daa:	f000 f95d 	bl	8002068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dae:	2360      	movs	r3, #96	@ 0x60
 8001db0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001db6:	2300      	movs	r3, #0
 8001db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dce:	2200      	movs	r2, #0
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	481a      	ldr	r0, [pc, #104]	@ (8001e3c <MX_TIM1_Init+0x150>)
 8001dd4:	f006 fcf8 	bl	80087c8 <HAL_TIM_PWM_ConfigChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001dde:	f000 f943 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001de6:	2204      	movs	r2, #4
 8001de8:	4619      	mov	r1, r3
 8001dea:	4814      	ldr	r0, [pc, #80]	@ (8001e3c <MX_TIM1_Init+0x150>)
 8001dec:	f006 fcec 	bl	80087c8 <HAL_TIM_PWM_ConfigChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001df6:	f000 f937 	bl	8002068 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4807      	ldr	r0, [pc, #28]	@ (8001e3c <MX_TIM1_Init+0x150>)
 8001e1e:	f007 f9a3 	bl	8009168 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001e28:	f000 f91e 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e2c:	4803      	ldr	r0, [pc, #12]	@ (8001e3c <MX_TIM1_Init+0x150>)
 8001e2e:	f000 fcd9 	bl	80027e4 <HAL_TIM_MspPostInit>

}
 8001e32:	bf00      	nop
 8001e34:	3758      	adds	r7, #88	@ 0x58
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200003d8 	.word	0x200003d8
 8001e40:	40010000 	.word	0x40010000

08001e44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08c      	sub	sp, #48	@ 0x30
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	2224      	movs	r2, #36	@ 0x24
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f00c f8f0 	bl	800e038 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e60:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <MX_TIM4_Init+0xa0>)
 8001e62:	4a21      	ldr	r2, [pc, #132]	@ (8001ee8 <MX_TIM4_Init+0xa4>)
 8001e64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <MX_TIM4_Init+0xa0>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <MX_TIM4_Init+0xa0>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee4 <MX_TIM4_Init+0xa0>)
 8001e74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <MX_TIM4_Init+0xa0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e80:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <MX_TIM4_Init+0xa0>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	4619      	mov	r1, r3
 8001eb0:	480c      	ldr	r0, [pc, #48]	@ (8001ee4 <MX_TIM4_Init+0xa0>)
 8001eb2:	f006 fb55 	bl	8008560 <HAL_TIM_Encoder_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ebc:	f000 f8d4 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <MX_TIM4_Init+0xa0>)
 8001ece:	f007 f8dd 	bl	800908c <HAL_TIMEx_MasterConfigSynchronization>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001ed8:	f000 f8c6 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	3730      	adds	r7, #48	@ 0x30
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000420 	.word	0x20000420
 8001ee8:	40000800 	.word	0x40000800

08001eec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08c      	sub	sp, #48	@ 0x30
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	2224      	movs	r2, #36	@ 0x24
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f00c f89c 	bl	800e038 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f08:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <MX_TIM5_Init+0xa0>)
 8001f0a:	4a21      	ldr	r2, [pc, #132]	@ (8001f90 <MX_TIM5_Init+0xa4>)
 8001f0c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <MX_TIM5_Init+0xa0>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <MX_TIM5_Init+0xa0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f8c <MX_TIM5_Init+0xa0>)
 8001f1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f20:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f22:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <MX_TIM5_Init+0xa0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f28:	4b18      	ldr	r3, [pc, #96]	@ (8001f8c <MX_TIM5_Init+0xa0>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f36:	2301      	movs	r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f46:	2301      	movs	r3, #1
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001f52:	f107 030c 	add.w	r3, r7, #12
 8001f56:	4619      	mov	r1, r3
 8001f58:	480c      	ldr	r0, [pc, #48]	@ (8001f8c <MX_TIM5_Init+0xa0>)
 8001f5a:	f006 fb01 	bl	8008560 <HAL_TIM_Encoder_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001f64:	f000 f880 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	4619      	mov	r1, r3
 8001f74:	4805      	ldr	r0, [pc, #20]	@ (8001f8c <MX_TIM5_Init+0xa0>)
 8001f76:	f007 f889 	bl	800908c <HAL_TIMEx_MasterConfigSynchronization>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001f80:	f000 f872 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	3730      	adds	r7, #48	@ 0x30
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000468 	.word	0x20000468
 8001f90:	40000c00 	.word	0x40000c00

08001f94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
 8001fa8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	4b2b      	ldr	r3, [pc, #172]	@ (800205c <MX_GPIO_Init+0xc8>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800205c <MX_GPIO_Init+0xc8>)
 8001fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	4b28      	ldr	r3, [pc, #160]	@ (800205c <MX_GPIO_Init+0xc8>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	4b24      	ldr	r3, [pc, #144]	@ (800205c <MX_GPIO_Init+0xc8>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	4a23      	ldr	r2, [pc, #140]	@ (800205c <MX_GPIO_Init+0xc8>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd6:	4b21      	ldr	r3, [pc, #132]	@ (800205c <MX_GPIO_Init+0xc8>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <MX_GPIO_Init+0xc8>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	4a1c      	ldr	r2, [pc, #112]	@ (800205c <MX_GPIO_Init+0xc8>)
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <MX_GPIO_Init+0xc8>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_h2_Pin|a_h1_Pin|b_h2_Pin|b_h1_Pin, GPIO_PIN_RESET);
 8001ffe:	2200      	movs	r2, #0
 8002000:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002004:	4816      	ldr	r0, [pc, #88]	@ (8002060 <MX_GPIO_Init+0xcc>)
 8002006:	f002 fdff 	bl	8004c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(motor_stdby_GPIO_Port, motor_stdby_Pin, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
 800200c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002010:	4814      	ldr	r0, [pc, #80]	@ (8002064 <MX_GPIO_Init+0xd0>)
 8002012:	f002 fdf9 	bl	8004c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : a_h2_Pin a_h1_Pin b_h2_Pin b_h1_Pin */
  GPIO_InitStruct.Pin = a_h2_Pin|a_h1_Pin|b_h2_Pin|b_h1_Pin;
 8002016:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800201a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201c:	2301      	movs	r3, #1
 800201e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	4619      	mov	r1, r3
 800202e:	480c      	ldr	r0, [pc, #48]	@ (8002060 <MX_GPIO_Init+0xcc>)
 8002030:	f002 fc66 	bl	8004900 <HAL_GPIO_Init>

  /*Configure GPIO pin : motor_stdby_Pin */
  GPIO_InitStruct.Pin = motor_stdby_Pin;
 8002034:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002038:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(motor_stdby_GPIO_Port, &GPIO_InitStruct);
 8002046:	f107 030c 	add.w	r3, r7, #12
 800204a:	4619      	mov	r1, r3
 800204c:	4805      	ldr	r0, [pc, #20]	@ (8002064 <MX_GPIO_Init+0xd0>)
 800204e:	f002 fc57 	bl	8004900 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002052:	bf00      	nop
 8002054:	3720      	adds	r7, #32
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800
 8002060:	40020400 	.word	0x40020400
 8002064:	40020000 	.word	0x40020000

08002068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800206c:	b672      	cpsid	i
}
 800206e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <Error_Handler+0x8>

08002074 <motor_init>:
#include "main.h"
#include "stm32f4xx_hal.h"
#include "motor_ll.h"

void motor_init()
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002078:	2100      	movs	r1, #0
 800207a:	480f      	ldr	r0, [pc, #60]	@ (80020b8 <motor_init+0x44>)
 800207c:	f006 f9c0 	bl	8008400 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002080:	2104      	movs	r1, #4
 8002082:	480d      	ldr	r0, [pc, #52]	@ (80020b8 <motor_init+0x44>)
 8002084:	f006 f9bc 	bl	8008400 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002088:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <motor_init+0x44>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2200      	movs	r2, #0
 800208e:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0); // make it stop
 8002090:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <motor_init+0x44>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2200      	movs	r2, #0
 8002096:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_GPIO_WritePin(GPIOA, motor_stdby_Pin, GPIO_PIN_SET); // make standby pin high, activate the motor driver
 8002098:	2201      	movs	r2, #1
 800209a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800209e:	4807      	ldr	r0, [pc, #28]	@ (80020bc <motor_init+0x48>)
 80020a0:	f002 fdb2 	bl	8004c08 <HAL_GPIO_WritePin>
	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80020a4:	213c      	movs	r1, #60	@ 0x3c
 80020a6:	4806      	ldr	r0, [pc, #24]	@ (80020c0 <motor_init+0x4c>)
 80020a8:	f006 fb00 	bl	80086ac <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80020ac:	213c      	movs	r1, #60	@ 0x3c
 80020ae:	4805      	ldr	r0, [pc, #20]	@ (80020c4 <motor_init+0x50>)
 80020b0:	f006 fafc 	bl	80086ac <HAL_TIM_Encoder_Start>
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	200003d8 	.word	0x200003d8
 80020bc:	40020000 	.word	0x40020000
 80020c0:	20000420 	.word	0x20000420
 80020c4:	20000468 	.word	0x20000468

080020c8 <motor_control>:

void motor_control(motor_id_t motor_id, motor_direction_t motor_direction)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	460a      	mov	r2, r1
 80020d2:	71fb      	strb	r3, [r7, #7]
 80020d4:	4613      	mov	r3, r2
 80020d6:	71bb      	strb	r3, [r7, #6]
    switch (motor_id)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <motor_control+0x1c>
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d044      	beq.n	800216c <motor_control+0xa4>
			default:
				break;
        }
        break;
    default:
        break;
 80020e2:	e087      	b.n	80021f4 <motor_control+0x12c>
        switch (motor_direction)
 80020e4:	79bb      	ldrb	r3, [r7, #6]
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d83e      	bhi.n	8002168 <motor_control+0xa0>
 80020ea:	a201      	add	r2, pc, #4	@ (adr r2, 80020f0 <motor_control+0x28>)
 80020ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f0:	08002101 	.word	0x08002101
 80020f4:	0800211b 	.word	0x0800211b
 80020f8:	0800214f 	.word	0x0800214f
 80020fc:	08002135 	.word	0x08002135
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);  // PB13 HIGH
 8002100:	2201      	movs	r2, #1
 8002102:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002106:	483d      	ldr	r0, [pc, #244]	@ (80021fc <motor_control+0x134>)
 8002108:	f002 fd7e 	bl	8004c08 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // PB12 LOW
 800210c:	2200      	movs	r2, #0
 800210e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002112:	483a      	ldr	r0, [pc, #232]	@ (80021fc <motor_control+0x134>)
 8002114:	f002 fd78 	bl	8004c08 <HAL_GPIO_WritePin>
				break;
 8002118:	e027      	b.n	800216a <motor_control+0xa2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);  // PB13 LOW
 800211a:	2200      	movs	r2, #0
 800211c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002120:	4836      	ldr	r0, [pc, #216]	@ (80021fc <motor_control+0x134>)
 8002122:	f002 fd71 	bl	8004c08 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // PB12 HIGH
 8002126:	2201      	movs	r2, #1
 8002128:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800212c:	4833      	ldr	r0, [pc, #204]	@ (80021fc <motor_control+0x134>)
 800212e:	f002 fd6b 	bl	8004c08 <HAL_GPIO_WritePin>
				break;
 8002132:	e01a      	b.n	800216a <motor_control+0xa2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);  // PB13 HIGH
 8002134:	2201      	movs	r2, #1
 8002136:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800213a:	4830      	ldr	r0, [pc, #192]	@ (80021fc <motor_control+0x134>)
 800213c:	f002 fd64 	bl	8004c08 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // PB12 HIGH
 8002140:	2201      	movs	r2, #1
 8002142:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002146:	482d      	ldr	r0, [pc, #180]	@ (80021fc <motor_control+0x134>)
 8002148:	f002 fd5e 	bl	8004c08 <HAL_GPIO_WritePin>
				break;
 800214c:	e00d      	b.n	800216a <motor_control+0xa2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);  // PB13 LOW
 800214e:	2200      	movs	r2, #0
 8002150:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002154:	4829      	ldr	r0, [pc, #164]	@ (80021fc <motor_control+0x134>)
 8002156:	f002 fd57 	bl	8004c08 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // PB12 LOW
 800215a:	2200      	movs	r2, #0
 800215c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002160:	4826      	ldr	r0, [pc, #152]	@ (80021fc <motor_control+0x134>)
 8002162:	f002 fd51 	bl	8004c08 <HAL_GPIO_WritePin>
				break;
 8002166:	e000      	b.n	800216a <motor_control+0xa2>
				break;
 8002168:	bf00      	nop
        break;
 800216a:	e043      	b.n	80021f4 <motor_control+0x12c>
        switch (motor_direction)
 800216c:	79bb      	ldrb	r3, [r7, #6]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d83e      	bhi.n	80021f0 <motor_control+0x128>
 8002172:	a201      	add	r2, pc, #4	@ (adr r2, 8002178 <motor_control+0xb0>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	08002189 	.word	0x08002189
 800217c:	080021a3 	.word	0x080021a3
 8002180:	080021d7 	.word	0x080021d7
 8002184:	080021bd 	.word	0x080021bd
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);  // PB13 HIGH
 8002188:	2201      	movs	r2, #1
 800218a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800218e:	481b      	ldr	r0, [pc, #108]	@ (80021fc <motor_control+0x134>)
 8002190:	f002 fd3a 	bl	8004c08 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // PB12 LOW
 8002194:	2200      	movs	r2, #0
 8002196:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800219a:	4818      	ldr	r0, [pc, #96]	@ (80021fc <motor_control+0x134>)
 800219c:	f002 fd34 	bl	8004c08 <HAL_GPIO_WritePin>
				break;
 80021a0:	e027      	b.n	80021f2 <motor_control+0x12a>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);  // PB13 LOW
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021a8:	4814      	ldr	r0, [pc, #80]	@ (80021fc <motor_control+0x134>)
 80021aa:	f002 fd2d 	bl	8004c08 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // PB12 HIGH
 80021ae:	2201      	movs	r2, #1
 80021b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021b4:	4811      	ldr	r0, [pc, #68]	@ (80021fc <motor_control+0x134>)
 80021b6:	f002 fd27 	bl	8004c08 <HAL_GPIO_WritePin>
				break;
 80021ba:	e01a      	b.n	80021f2 <motor_control+0x12a>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);  // PB13 HIGH
 80021bc:	2201      	movs	r2, #1
 80021be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021c2:	480e      	ldr	r0, [pc, #56]	@ (80021fc <motor_control+0x134>)
 80021c4:	f002 fd20 	bl	8004c08 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // PB12 HIGH
 80021c8:	2201      	movs	r2, #1
 80021ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021ce:	480b      	ldr	r0, [pc, #44]	@ (80021fc <motor_control+0x134>)
 80021d0:	f002 fd1a 	bl	8004c08 <HAL_GPIO_WritePin>
				break;
 80021d4:	e00d      	b.n	80021f2 <motor_control+0x12a>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);  // PB13 LOW
 80021d6:	2200      	movs	r2, #0
 80021d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021dc:	4807      	ldr	r0, [pc, #28]	@ (80021fc <motor_control+0x134>)
 80021de:	f002 fd13 	bl	8004c08 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // PB12 LOW
 80021e2:	2200      	movs	r2, #0
 80021e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021e8:	4804      	ldr	r0, [pc, #16]	@ (80021fc <motor_control+0x134>)
 80021ea:	f002 fd0d 	bl	8004c08 <HAL_GPIO_WritePin>
				break;
 80021ee:	e000      	b.n	80021f2 <motor_control+0x12a>
				break;
 80021f0:	bf00      	nop
        break;
 80021f2:	bf00      	nop
    }
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40020400 	.word	0x40020400

08002200 <motor_set_speed>:
/*
 *  pls set speed from 0 to 49 only
 */

void motor_set_speed(motor_id_t motor_id, uint8_t speed)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	460a      	mov	r2, r1
 800220a:	71fb      	strb	r3, [r7, #7]
 800220c:	4613      	mov	r3, r2
 800220e:	71bb      	strb	r3, [r7, #6]
	if (speed > 49) return;
 8002210:	79bb      	ldrb	r3, [r7, #6]
 8002212:	2b31      	cmp	r3, #49	@ 0x31
 8002214:	d80f      	bhi.n	8002236 <motor_set_speed+0x36>

	switch(motor_id) {
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <motor_set_speed+0x22>
 800221c:	2b01      	cmp	r3, #1
 800221e:	d005      	beq.n	800222c <motor_set_speed+0x2c>
		break;
	case MOTOR_B:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
		break;
	default:
		break;
 8002220:	e00a      	b.n	8002238 <motor_set_speed+0x38>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8002222:	4b08      	ldr	r3, [pc, #32]	@ (8002244 <motor_set_speed+0x44>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	79ba      	ldrb	r2, [r7, #6]
 8002228:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 800222a:	e005      	b.n	8002238 <motor_set_speed+0x38>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
 800222c:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <motor_set_speed+0x44>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	79ba      	ldrb	r2, [r7, #6]
 8002232:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8002234:	e000      	b.n	8002238 <motor_set_speed+0x38>
	if (speed > 49) return;
 8002236:	bf00      	nop
	}
}
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	200003d8 	.word	0x200003d8

08002248 <encoder_get_tick>:

void encoder_get_tick(motor_id_t motor_id, int32_t *tick)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	71fb      	strb	r3, [r7, #7]
	if (tick == NULL) return;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d017      	beq.n	800228a <encoder_get_tick+0x42>

	switch(motor_id)
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <encoder_get_tick+0x1e>
 8002260:	2b01      	cmp	r3, #1
 8002262:	d007      	beq.n	8002274 <encoder_get_tick+0x2c>
 8002264:	e00d      	b.n	8002282 <encoder_get_tick+0x3a>
	{
		case MOTOR_A:
			*tick = __HAL_TIM_GET_COUNTER(&htim4);
 8002266:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <encoder_get_tick+0x50>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	461a      	mov	r2, r3
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	601a      	str	r2, [r3, #0]
			break;
 8002272:	e00b      	b.n	800228c <encoder_get_tick+0x44>
		case MOTOR_B:
			*tick = __HAL_TIM_GET_COUNTER(&htim5);
 8002274:	4b09      	ldr	r3, [pc, #36]	@ (800229c <encoder_get_tick+0x54>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227a:	461a      	mov	r2, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	601a      	str	r2, [r3, #0]
			break;
 8002280:	e004      	b.n	800228c <encoder_get_tick+0x44>
		default:
			*tick = 0;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
			break;
 8002288:	e000      	b.n	800228c <encoder_get_tick+0x44>
	if (tick == NULL) return;
 800228a:	bf00      	nop
	}
}
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000420 	.word	0x20000420
 800229c:	20000468 	.word	0x20000468

080022a0 <sendCommand>:
#define OLED_ADDR 0x3C

extern I2C_HandleTypeDef hi2c1;

bool sendCommand(uint8_t cmd)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
	uint8_t stuff[2] = {0x80, cmd};
 80022aa:	2380      	movs	r3, #128	@ 0x80
 80022ac:	733b      	strb	r3, [r7, #12]
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	737b      	strb	r3, [r7, #13]
	return (HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, stuff, 2, HAL_MAX_DELAY) == HAL_OK);
 80022b2:	f107 020c 	add.w	r2, r7, #12
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2302      	movs	r3, #2
 80022be:	2178      	movs	r1, #120	@ 0x78
 80022c0:	4806      	ldr	r0, [pc, #24]	@ (80022dc <sendCommand+0x3c>)
 80022c2:	f002 fdff 	bl	8004ec4 <HAL_I2C_Master_Transmit>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf0c      	ite	eq
 80022cc:	2301      	moveq	r3, #1
 80022ce:	2300      	movne	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000330 	.word	0x20000330

080022e0 <sh1106_init>:

uint8_t oled64_initbuf[]={0x00,0xae,0xa8,0x3f,0xd3,0x00,0x40,0xa1,0xc8,
      0xda,0x12,0x81,0xff,0xa4,0xa6,0xd5,0x80,0x8d,0x14,
      0xaf,0x20,0x02};

bool sh1106_init() {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < sizeof(oled64_initbuf); i++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	71fb      	strb	r3, [r7, #7]
 80022ea:	e010      	b.n	800230e <sh1106_init+0x2e>
	{
		if(!sendCommand(oled64_initbuf[i]))
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002320 <sh1106_init+0x40>)
 80022f0:	5cd3      	ldrb	r3, [r2, r3]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ffd4 	bl	80022a0 <sendCommand>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f083 0301 	eor.w	r3, r3, #1
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <sh1106_init+0x28>
		{
			return false;
 8002304:	2300      	movs	r3, #0
 8002306:	e006      	b.n	8002316 <sh1106_init+0x36>
	for (uint8_t i = 0; i < sizeof(oled64_initbuf); i++)
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	3301      	adds	r3, #1
 800230c:	71fb      	strb	r3, [r7, #7]
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2b15      	cmp	r3, #21
 8002312:	d9eb      	bls.n	80022ec <sh1106_init+0xc>
		}
	}
	return true;
 8002314:	2301      	movs	r3, #1
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000000 	.word	0x20000000

08002324 <sh1106_sendBuffer>:

uint8_t framebuffer[8][128] = {0};

void sh1106_sendBuffer()
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b0a4      	sub	sp, #144	@ 0x90
 8002328:	af02      	add	r7, sp, #8
	for (uint8_t page = 0; page < 8; page++)
 800232a:	2300      	movs	r3, #0
 800232c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002330:	e028      	b.n	8002384 <sh1106_sendBuffer+0x60>
	{
		sendCommand(0xB0 | page);
 8002332:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002336:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800233a:	b2db      	uxtb	r3, r3
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ffaf 	bl	80022a0 <sendCommand>

		sendCommand(0x02);
 8002342:	2002      	movs	r0, #2
 8002344:	f7ff ffac 	bl	80022a0 <sendCommand>
		sendCommand(0x10);
 8002348:	2010      	movs	r0, #16
 800234a:	f7ff ffa9 	bl	80022a0 <sendCommand>

		uint8_t buf[129];
		buf[0] = 0x40;
 800234e:	2340      	movs	r3, #64	@ 0x40
 8002350:	713b      	strb	r3, [r7, #4]

		memcpy(&buf[1], framebuffer[page], 128);
 8002352:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002356:	01db      	lsls	r3, r3, #7
 8002358:	4a0f      	ldr	r2, [pc, #60]	@ (8002398 <sh1106_sendBuffer+0x74>)
 800235a:	1899      	adds	r1, r3, r2
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	3301      	adds	r3, #1
 8002360:	2280      	movs	r2, #128	@ 0x80
 8002362:	4618      	mov	r0, r3
 8002364:	f00b fee7 	bl	800e136 <memcpy>

		HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, buf, sizeof(buf), HAL_MAX_DELAY);
 8002368:	1d3a      	adds	r2, r7, #4
 800236a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2381      	movs	r3, #129	@ 0x81
 8002372:	2178      	movs	r1, #120	@ 0x78
 8002374:	4809      	ldr	r0, [pc, #36]	@ (800239c <sh1106_sendBuffer+0x78>)
 8002376:	f002 fda5 	bl	8004ec4 <HAL_I2C_Master_Transmit>
	for (uint8_t page = 0; page < 8; page++)
 800237a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800237e:	3301      	adds	r3, #1
 8002380:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002384:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002388:	2b07      	cmp	r3, #7
 800238a:	d9d2      	bls.n	8002332 <sh1106_sendBuffer+0xe>
	}
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3788      	adds	r7, #136	@ 0x88
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200004b0 	.word	0x200004b0
 800239c:	20000330 	.word	0x20000330

080023a0 <sh1106_drawPixel>:

void sh1106_drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t colour) {
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
 80023aa:	460b      	mov	r3, r1
 80023ac:	71bb      	strb	r3, [r7, #6]
 80023ae:	4613      	mov	r3, r2
 80023b0:	717b      	strb	r3, [r7, #5]
	uint8_t page = pos_y / 8;
 80023b2:	79bb      	ldrb	r3, [r7, #6]
 80023b4:	08db      	lsrs	r3, r3, #3
 80023b6:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_pos = pos_y % 8;
 80023b8:	79bb      	ldrb	r3, [r7, #6]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	73bb      	strb	r3, [r7, #14]

	framebuffer[page][pos_x] |= (colour << bit_pos);
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	490d      	ldr	r1, [pc, #52]	@ (80023fc <sh1106_drawPixel+0x5c>)
 80023c6:	01d2      	lsls	r2, r2, #7
 80023c8:	440a      	add	r2, r1
 80023ca:	4413      	add	r3, r2
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	b25a      	sxtb	r2, r3
 80023d0:	7979      	ldrb	r1, [r7, #5]
 80023d2:	7bbb      	ldrb	r3, [r7, #14]
 80023d4:	fa01 f303 	lsl.w	r3, r1, r3
 80023d8:	b25b      	sxtb	r3, r3
 80023da:	4313      	orrs	r3, r2
 80023dc:	b259      	sxtb	r1, r3
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	b2c8      	uxtb	r0, r1
 80023e4:	4905      	ldr	r1, [pc, #20]	@ (80023fc <sh1106_drawPixel+0x5c>)
 80023e6:	01d2      	lsls	r2, r2, #7
 80023e8:	440a      	add	r2, r1
 80023ea:	4413      	add	r3, r2
 80023ec:	4602      	mov	r2, r0
 80023ee:	701a      	strb	r2, [r3, #0]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	200004b0 	.word	0x200004b0

08002400 <sh1106_setAll>:

void sh1106_setAll(uint8_t colour)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
	switch(colour)
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <sh1106_setAll+0x22>
 8002410:	2b01      	cmp	r3, #1
 8002412:	d10d      	bne.n	8002430 <sh1106_setAll+0x30>
	{
		case 1:
			memset(framebuffer, 0xFF, sizeof(framebuffer));
 8002414:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002418:	21ff      	movs	r1, #255	@ 0xff
 800241a:	4807      	ldr	r0, [pc, #28]	@ (8002438 <sh1106_setAll+0x38>)
 800241c:	f00b fe0c 	bl	800e038 <memset>
			break;
 8002420:	e006      	b.n	8002430 <sh1106_setAll+0x30>
		case 0:
			memset(framebuffer, 0x00, sizeof(framebuffer));
 8002422:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002426:	2100      	movs	r1, #0
 8002428:	4803      	ldr	r0, [pc, #12]	@ (8002438 <sh1106_setAll+0x38>)
 800242a:	f00b fe05 	bl	800e038 <memset>
			break;
 800242e:	bf00      	nop
	}
	//sh1106_sendBuffer();
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200004b0 	.word	0x200004b0

0800243c <sh1106_drawChar>:
            d += 2 * (x - y) + 1;
        }
    }
}

void sh1106_drawChar(uint8_t x, uint8_t y, char c) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
 8002446:	460b      	mov	r3, r1
 8002448:	71bb      	strb	r3, [r7, #6]
 800244a:	4613      	mov	r3, r2
 800244c:	717b      	strb	r3, [r7, #5]
	if (c < 32 || c > 126) return;
 800244e:	797b      	ldrb	r3, [r7, #5]
 8002450:	2b1f      	cmp	r3, #31
 8002452:	d945      	bls.n	80024e0 <sh1106_drawChar+0xa4>
 8002454:	797b      	ldrb	r3, [r7, #5]
 8002456:	2b7e      	cmp	r3, #126	@ 0x7e
 8002458:	d842      	bhi.n	80024e0 <sh1106_drawChar+0xa4>
    uint8_t charIndex = (c - 32);
 800245a:	797b      	ldrb	r3, [r7, #5]
 800245c:	3b20      	subs	r3, #32
 800245e:	737b      	strb	r3, [r7, #13]

    for (uint8_t row = 0; row < 5; row++)
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	e038      	b.n	80024d8 <sh1106_drawChar+0x9c>
    {
        for (uint8_t col = 0; col < 7; col++)
 8002466:	2300      	movs	r3, #0
 8002468:	73bb      	strb	r3, [r7, #14]
 800246a:	e02f      	b.n	80024cc <sh1106_drawChar+0x90>
        {
        	uint8_t fontByte = fontdata[charIndex][col];
 800246c:	7b7a      	ldrb	r2, [r7, #13]
 800246e:	7bb9      	ldrb	r1, [r7, #14]
 8002470:	481d      	ldr	r0, [pc, #116]	@ (80024e8 <sh1106_drawChar+0xac>)
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	4403      	add	r3, r0
 800247a:	440b      	add	r3, r1
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	733b      	strb	r3, [r7, #12]
            //if (fontByte & (1 << row))
        	if (fontByte & (1 << (4 - row)))
 8002480:	7b3a      	ldrb	r2, [r7, #12]
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	f1c3 0304 	rsb	r3, r3, #4
 8002488:	fa42 f303 	asr.w	r3, r2, r3
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00c      	beq.n	80024ae <sh1106_drawChar+0x72>
            {
                sh1106_drawPixel(x + row, y + col, 1);
 8002494:	79fa      	ldrb	r2, [r7, #7]
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	4413      	add	r3, r2
 800249a:	b2d8      	uxtb	r0, r3
 800249c:	79ba      	ldrb	r2, [r7, #6]
 800249e:	7bbb      	ldrb	r3, [r7, #14]
 80024a0:	4413      	add	r3, r2
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2201      	movs	r2, #1
 80024a6:	4619      	mov	r1, r3
 80024a8:	f7ff ff7a 	bl	80023a0 <sh1106_drawPixel>
 80024ac:	e00b      	b.n	80024c6 <sh1106_drawChar+0x8a>
            } else {
            	sh1106_drawPixel(x + row, y + col, 0);
 80024ae:	79fa      	ldrb	r2, [r7, #7]
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	4413      	add	r3, r2
 80024b4:	b2d8      	uxtb	r0, r3
 80024b6:	79ba      	ldrb	r2, [r7, #6]
 80024b8:	7bbb      	ldrb	r3, [r7, #14]
 80024ba:	4413      	add	r3, r2
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2200      	movs	r2, #0
 80024c0:	4619      	mov	r1, r3
 80024c2:	f7ff ff6d 	bl	80023a0 <sh1106_drawPixel>
        for (uint8_t col = 0; col < 7; col++)
 80024c6:	7bbb      	ldrb	r3, [r7, #14]
 80024c8:	3301      	adds	r3, #1
 80024ca:	73bb      	strb	r3, [r7, #14]
 80024cc:	7bbb      	ldrb	r3, [r7, #14]
 80024ce:	2b06      	cmp	r3, #6
 80024d0:	d9cc      	bls.n	800246c <sh1106_drawChar+0x30>
    for (uint8_t row = 0; row < 5; row++)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	3301      	adds	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d9c3      	bls.n	8002466 <sh1106_drawChar+0x2a>
 80024de:	e000      	b.n	80024e2 <sh1106_drawChar+0xa6>
	if (c < 32 || c > 126) return;
 80024e0:	bf00      	nop
            }
        }
    }

}
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	0801061c 	.word	0x0801061c

080024ec <sh1106_print>:

void sh1106_print(uint8_t x, uint8_t y, const char* str)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	603a      	str	r2, [r7, #0]
 80024f6:	71fb      	strb	r3, [r7, #7]
 80024f8:	460b      	mov	r3, r1
 80024fa:	71bb      	strb	r3, [r7, #6]
	while(*str)
 80024fc:	e013      	b.n	8002526 <sh1106_print+0x3a>
	{
		sh1106_drawChar(x, y, *str++);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	603a      	str	r2, [r7, #0]
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	79b9      	ldrb	r1, [r7, #6]
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ff96 	bl	800243c <sh1106_drawChar>
		x+=6;
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	3306      	adds	r3, #6
 8002514:	71fb      	strb	r3, [r7, #7]
		if(x > 122)
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	2b7a      	cmp	r3, #122	@ 0x7a
 800251a:	d904      	bls.n	8002526 <sh1106_print+0x3a>
		{
			y+=8;
 800251c:	79bb      	ldrb	r3, [r7, #6]
 800251e:	3308      	adds	r3, #8
 8002520:	71bb      	strb	r3, [r7, #6]
			x=0;
 8002522:	2300      	movs	r3, #0
 8002524:	71fb      	strb	r3, [r7, #7]
	while(*str)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1e7      	bne.n	80024fe <sh1106_print+0x12>
		}
	}
}
 800252e:	bf00      	nop
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	4b10      	ldr	r3, [pc, #64]	@ (8002584 <HAL_MspInit+0x4c>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	4a0f      	ldr	r2, [pc, #60]	@ (8002584 <HAL_MspInit+0x4c>)
 8002548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800254c:	6453      	str	r3, [r2, #68]	@ 0x44
 800254e:	4b0d      	ldr	r3, [pc, #52]	@ (8002584 <HAL_MspInit+0x4c>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <HAL_MspInit+0x4c>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	4a08      	ldr	r2, [pc, #32]	@ (8002584 <HAL_MspInit+0x4c>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002568:	6413      	str	r3, [r2, #64]	@ 0x40
 800256a:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <HAL_MspInit+0x4c>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800

08002588 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08c      	sub	sp, #48	@ 0x30
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 031c 	add.w	r3, r7, #28
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a3b      	ldr	r2, [pc, #236]	@ (8002694 <HAL_I2C_MspInit+0x10c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d12d      	bne.n	8002606 <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
 80025ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002698 <HAL_I2C_MspInit+0x110>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	4a39      	ldr	r2, [pc, #228]	@ (8002698 <HAL_I2C_MspInit+0x110>)
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ba:	4b37      	ldr	r3, [pc, #220]	@ (8002698 <HAL_I2C_MspInit+0x110>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025cc:	2312      	movs	r3, #18
 80025ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d4:	2303      	movs	r3, #3
 80025d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025d8:	2304      	movs	r3, #4
 80025da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025dc:	f107 031c 	add.w	r3, r7, #28
 80025e0:	4619      	mov	r1, r3
 80025e2:	482e      	ldr	r0, [pc, #184]	@ (800269c <HAL_I2C_MspInit+0x114>)
 80025e4:	f002 f98c 	bl	8004900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002698 <HAL_I2C_MspInit+0x110>)
 80025ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f0:	4a29      	ldr	r2, [pc, #164]	@ (8002698 <HAL_I2C_MspInit+0x110>)
 80025f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f8:	4b27      	ldr	r3, [pc, #156]	@ (8002698 <HAL_I2C_MspInit+0x110>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002604:	e041      	b.n	800268a <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a25      	ldr	r2, [pc, #148]	@ (80026a0 <HAL_I2C_MspInit+0x118>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d13c      	bne.n	800268a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002610:	2300      	movs	r3, #0
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	4b20      	ldr	r3, [pc, #128]	@ (8002698 <HAL_I2C_MspInit+0x110>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002618:	4a1f      	ldr	r2, [pc, #124]	@ (8002698 <HAL_I2C_MspInit+0x110>)
 800261a:	f043 0302 	orr.w	r3, r3, #2
 800261e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002620:	4b1d      	ldr	r3, [pc, #116]	@ (8002698 <HAL_I2C_MspInit+0x110>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800262c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002632:	2312      	movs	r3, #18
 8002634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002636:	2301      	movs	r3, #1
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263a:	2303      	movs	r3, #3
 800263c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800263e:	2304      	movs	r3, #4
 8002640:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002642:	f107 031c 	add.w	r3, r7, #28
 8002646:	4619      	mov	r1, r3
 8002648:	4814      	ldr	r0, [pc, #80]	@ (800269c <HAL_I2C_MspInit+0x114>)
 800264a:	f002 f959 	bl	8004900 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800264e:	2308      	movs	r3, #8
 8002650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002652:	2312      	movs	r3, #18
 8002654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002656:	2301      	movs	r3, #1
 8002658:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265a:	2303      	movs	r3, #3
 800265c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800265e:	2309      	movs	r3, #9
 8002660:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	480c      	ldr	r0, [pc, #48]	@ (800269c <HAL_I2C_MspInit+0x114>)
 800266a:	f002 f949 	bl	8004900 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <HAL_I2C_MspInit+0x110>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	4a08      	ldr	r2, [pc, #32]	@ (8002698 <HAL_I2C_MspInit+0x110>)
 8002678:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800267c:	6413      	str	r3, [r2, #64]	@ 0x40
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <HAL_I2C_MspInit+0x110>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
}
 800268a:	bf00      	nop
 800268c:	3730      	adds	r7, #48	@ 0x30
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40005400 	.word	0x40005400
 8002698:	40023800 	.word	0x40023800
 800269c:	40020400 	.word	0x40020400
 80026a0:	40005800 	.word	0x40005800

080026a4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0b      	ldr	r2, [pc, #44]	@ (80026e0 <HAL_TIM_Base_MspInit+0x3c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10d      	bne.n	80026d2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <HAL_TIM_Base_MspInit+0x40>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026be:	4a09      	ldr	r2, [pc, #36]	@ (80026e4 <HAL_TIM_Base_MspInit+0x40>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026c6:	4b07      	ldr	r3, [pc, #28]	@ (80026e4 <HAL_TIM_Base_MspInit+0x40>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40010000 	.word	0x40010000
 80026e4:	40023800 	.word	0x40023800

080026e8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08c      	sub	sp, #48	@ 0x30
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	f107 031c 	add.w	r3, r7, #28
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a32      	ldr	r2, [pc, #200]	@ (80027d0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d12c      	bne.n	8002764 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	4b31      	ldr	r3, [pc, #196]	@ (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	4a30      	ldr	r2, [pc, #192]	@ (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	6413      	str	r3, [r2, #64]	@ 0x40
 800271a:	4b2e      	ldr	r3, [pc, #184]	@ (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	61bb      	str	r3, [r7, #24]
 8002724:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	4b2a      	ldr	r3, [pc, #168]	@ (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	4a29      	ldr	r2, [pc, #164]	@ (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	6313      	str	r3, [r2, #48]	@ 0x30
 8002736:	4b27      	ldr	r3, [pc, #156]	@ (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002742:	23c0      	movs	r3, #192	@ 0xc0
 8002744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002752:	2302      	movs	r3, #2
 8002754:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002756:	f107 031c 	add.w	r3, r7, #28
 800275a:	4619      	mov	r1, r3
 800275c:	481e      	ldr	r0, [pc, #120]	@ (80027d8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800275e:	f002 f8cf 	bl	8004900 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002762:	e030      	b.n	80027c6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1c      	ldr	r2, [pc, #112]	@ (80027dc <HAL_TIM_Encoder_MspInit+0xf4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d12b      	bne.n	80027c6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	4b18      	ldr	r3, [pc, #96]	@ (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	4a17      	ldr	r2, [pc, #92]	@ (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002778:	f043 0308 	orr.w	r3, r3, #8
 800277c:	6413      	str	r3, [r2, #64]	@ 0x40
 800277e:	4b15      	ldr	r3, [pc, #84]	@ (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	4a10      	ldr	r2, [pc, #64]	@ (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6313      	str	r3, [r2, #48]	@ 0x30
 800279a:	4b0e      	ldr	r3, [pc, #56]	@ (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027a6:	2303      	movs	r3, #3
 80027a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80027b6:	2302      	movs	r3, #2
 80027b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ba:	f107 031c 	add.w	r3, r7, #28
 80027be:	4619      	mov	r1, r3
 80027c0:	4807      	ldr	r0, [pc, #28]	@ (80027e0 <HAL_TIM_Encoder_MspInit+0xf8>)
 80027c2:	f002 f89d 	bl	8004900 <HAL_GPIO_Init>
}
 80027c6:	bf00      	nop
 80027c8:	3730      	adds	r7, #48	@ 0x30
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40000800 	.word	0x40000800
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40020400 	.word	0x40020400
 80027dc:	40000c00 	.word	0x40000c00
 80027e0:	40020000 	.word	0x40020000

080027e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 030c 	add.w	r3, r7, #12
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a12      	ldr	r2, [pc, #72]	@ (800284c <HAL_TIM_MspPostInit+0x68>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d11e      	bne.n	8002844 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <HAL_TIM_MspPostInit+0x6c>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	4a10      	ldr	r2, [pc, #64]	@ (8002850 <HAL_TIM_MspPostInit+0x6c>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6313      	str	r3, [r2, #48]	@ 0x30
 8002816:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <HAL_TIM_MspPostInit+0x6c>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002822:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002826:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002830:	2300      	movs	r3, #0
 8002832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002834:	2301      	movs	r3, #1
 8002836:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002838:	f107 030c 	add.w	r3, r7, #12
 800283c:	4619      	mov	r1, r3
 800283e:	4805      	ldr	r0, [pc, #20]	@ (8002854 <HAL_TIM_MspPostInit+0x70>)
 8002840:	f002 f85e 	bl	8004900 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002844:	bf00      	nop
 8002846:	3720      	adds	r7, #32
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40010000 	.word	0x40010000
 8002850:	40023800 	.word	0x40023800
 8002854:	40020000 	.word	0x40020000

08002858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800285c:	bf00      	nop
 800285e:	e7fd      	b.n	800285c <NMI_Handler+0x4>

08002860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002864:	bf00      	nop
 8002866:	e7fd      	b.n	8002864 <HardFault_Handler+0x4>

08002868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800286c:	bf00      	nop
 800286e:	e7fd      	b.n	800286c <MemManage_Handler+0x4>

08002870 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002874:	bf00      	nop
 8002876:	e7fd      	b.n	8002874 <BusFault_Handler+0x4>

08002878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800287c:	bf00      	nop
 800287e:	e7fd      	b.n	800287c <UsageFault_Handler+0x4>

08002880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ae:	f001 fed1 	bl	8004654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80028bc:	4802      	ldr	r0, [pc, #8]	@ (80028c8 <OTG_FS_IRQHandler+0x10>)
 80028be:	f003 ffa5 	bl	800680c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20001d9c 	.word	0x20001d9c

080028cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return 1;
 80028d0:	2301      	movs	r3, #1
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <_kill>:

int _kill(int pid, int sig)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028e6:	f00b fbf9 	bl	800e0dc <__errno>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2216      	movs	r2, #22
 80028ee:	601a      	str	r2, [r3, #0]
  return -1;
 80028f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <_exit>:

void _exit (int status)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002904:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ffe7 	bl	80028dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800290e:	bf00      	nop
 8002910:	e7fd      	b.n	800290e <_exit+0x12>

08002912 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	e00a      	b.n	800293a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002924:	f3af 8000 	nop.w
 8002928:	4601      	mov	r1, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	60ba      	str	r2, [r7, #8]
 8002930:	b2ca      	uxtb	r2, r1
 8002932:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	3301      	adds	r3, #1
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	429a      	cmp	r2, r3
 8002940:	dbf0      	blt.n	8002924 <_read+0x12>
  }

  return len;
 8002942:	687b      	ldr	r3, [r7, #4]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	e009      	b.n	8002972 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	60ba      	str	r2, [r7, #8]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	3301      	adds	r3, #1
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	429a      	cmp	r2, r3
 8002978:	dbf1      	blt.n	800295e <_write+0x12>
  }
  return len;
 800297a:	687b      	ldr	r3, [r7, #4]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <_close>:

int _close(int file)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800298c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029ac:	605a      	str	r2, [r3, #4]
  return 0;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <_isatty>:

int _isatty(int file)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029c4:	2301      	movs	r3, #1
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b085      	sub	sp, #20
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029f4:	4a14      	ldr	r2, [pc, #80]	@ (8002a48 <_sbrk+0x5c>)
 80029f6:	4b15      	ldr	r3, [pc, #84]	@ (8002a4c <_sbrk+0x60>)
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a00:	4b13      	ldr	r3, [pc, #76]	@ (8002a50 <_sbrk+0x64>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a08:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <_sbrk+0x64>)
 8002a0a:	4a12      	ldr	r2, [pc, #72]	@ (8002a54 <_sbrk+0x68>)
 8002a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a0e:	4b10      	ldr	r3, [pc, #64]	@ (8002a50 <_sbrk+0x64>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d207      	bcs.n	8002a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a1c:	f00b fb5e 	bl	800e0dc <__errno>
 8002a20:	4603      	mov	r3, r0
 8002a22:	220c      	movs	r2, #12
 8002a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a2a:	e009      	b.n	8002a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a2c:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <_sbrk+0x64>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a32:	4b07      	ldr	r3, [pc, #28]	@ (8002a50 <_sbrk+0x64>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	4a05      	ldr	r2, [pc, #20]	@ (8002a50 <_sbrk+0x64>)
 8002a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20020000 	.word	0x20020000
 8002a4c:	00000400 	.word	0x00000400
 8002a50:	200008b0 	.word	0x200008b0
 8002a54:	200025f0 	.word	0x200025f0

08002a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a5c:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <SystemInit+0x20>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a62:	4a05      	ldr	r2, [pc, #20]	@ (8002a78 <SystemInit+0x20>)
 8002a64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <selectTCAChannel>:
 */
#include "stm32f4xx_hal.h"
#include "main.h"
#include "tca9548.h"

void selectTCAChannel(uint8_t channel) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = (1 << channel);  // Enable only the selected channel
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, 0x77 << 1, &cmd, 1, HAL_MAX_DELAY);
 8002a92:	f107 020f 	add.w	r2, r7, #15
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	21ee      	movs	r1, #238	@ 0xee
 8002aa0:	4803      	ldr	r0, [pc, #12]	@ (8002ab0 <selectTCAChannel+0x34>)
 8002aa2:	f002 fa0f 	bl	8004ec4 <HAL_I2C_Master_Transmit>
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000330 	.word	0x20000330

08002ab4 <my_printf>:
{
 8002ab4:	b40f      	push	{r0, r1, r2, r3}
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b0a2      	sub	sp, #136	@ 0x88
 8002aba:	af00      	add	r7, sp, #0
    va_start(args, format);
 8002abc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002ac0:	603b      	str	r3, [r7, #0]
    int usbTxLength = vsnprintf(tx_buffer, BUFFER_LEN, format, args);
 8002ac2:	1d38      	adds	r0, r7, #4
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002aca:	2180      	movs	r1, #128	@ 0x80
 8002acc:	f00b fa12 	bl	800def4 <vsniprintf>
 8002ad0:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (usbTxLength > 0 && usbTxLength < BUFFER_LEN)
 8002ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	dd0b      	ble.n	8002af4 <my_printf+0x40>
 8002adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ae0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ae2:	dc07      	bgt.n	8002af4 <my_printf+0x40>
        CDC_Transmit_FS((uint8_t *)tx_buffer, usbTxLength);
 8002ae4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	4611      	mov	r1, r2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f009 ffb4 	bl	800ca5c <CDC_Transmit_FS>
}
 8002af4:	bf00      	nop
 8002af6:	3788      	adds	r7, #136	@ 0x88
 8002af8:	46bd      	mov	sp, r7
 8002afa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002afe:	b004      	add	sp, #16
 8002b00:	4770      	bx	lr
	...

08002b04 <tcs34725_write8>:
/**************************************************************************/
/*!
    @brief  Writes a register and an 8 bit value over I2C
*/
/**************************************************************************/
void tcs34725_write8(uint8_t reg, uint8_t value) {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	71fb      	strb	r3, [r7, #7]
 8002b10:	4613      	mov	r3, r2
 8002b12:	71bb      	strb	r3, [r7, #6]
    Wire.send(TCS34725_COMMAND_BIT | reg);
    Wire.send(value & 0xFF);
    #endif
    Wire.endTransmission();
    */
    uint8_t buffer[2] = {TCS34725_COMMAND_BIT | reg, value};
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	733b      	strb	r3, [r7, #12]
 8002b1e:	79bb      	ldrb	r3, [r7, #6]
 8002b20:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8002b22:	f107 020c 	add.w	r2, r7, #12
 8002b26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	2152      	movs	r1, #82	@ 0x52
 8002b30:	4803      	ldr	r0, [pc, #12]	@ (8002b40 <tcs34725_write8+0x3c>)
 8002b32:	f002 f9c7 	bl	8004ec4 <HAL_I2C_Master_Transmit>
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000330 	.word	0x20000330

08002b44 <read8>:
/**************************************************************************/
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
uint8_t read8(uint8_t reg) {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
    return Wire.read();
    #else
    return Wire.receive();
    #endif
    */
    uint8_t cmd = TCS34725_COMMAND_BIT | reg;
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	73fb      	strb	r3, [r7, #15]
    uint8_t value = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 8002b5c:	f107 020f 	add.w	r2, r7, #15
 8002b60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	2301      	movs	r3, #1
 8002b68:	2152      	movs	r1, #82	@ 0x52
 8002b6a:	4809      	ldr	r0, [pc, #36]	@ (8002b90 <read8+0x4c>)
 8002b6c:	f002 f9aa 	bl	8004ec4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, &value, 1, HAL_MAX_DELAY);
 8002b70:	f107 020e 	add.w	r2, r7, #14
 8002b74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	2152      	movs	r1, #82	@ 0x52
 8002b7e:	4804      	ldr	r0, [pc, #16]	@ (8002b90 <read8+0x4c>)
 8002b80:	f002 fa9e 	bl	80050c0 <HAL_I2C_Master_Receive>
    return value;
 8002b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000330 	.word	0x20000330

08002b94 <read16>:
/**************************************************************************/
/*!
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
uint16_t read16(uint8_t reg) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
    #endif
    x <<= 8;
    x |= t;
    return x;
    */
	uint8_t cmd = TCS34725_COMMAND_BIT | reg;
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[2];
	HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 8002ba8:	f107 020f 	add.w	r2, r7, #15
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	2152      	movs	r1, #82	@ 0x52
 8002bb6:	480b      	ldr	r0, [pc, #44]	@ (8002be4 <read16+0x50>)
 8002bb8:	f002 f984 	bl	8004ec4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8002bbc:	f107 020c 	add.w	r2, r7, #12
 8002bc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	2152      	movs	r1, #82	@ 0x52
 8002bca:	4806      	ldr	r0, [pc, #24]	@ (8002be4 <read16+0x50>)
 8002bcc:	f002 fa78 	bl	80050c0 <HAL_I2C_Master_Receive>
	return (uint16_t)(buffer[1] << 8) | buffer[0];
 8002bd0:	7b7b      	ldrb	r3, [r7, #13]
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	7b3a      	ldrb	r2, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	b29b      	uxth	r3, r3
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000330 	.word	0x20000330

08002be8 <enable>:
/**************************************************************************/
/*!
    Enables the device
*/
/**************************************************************************/
void enable(void) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
    tcs34725_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 8002bec:	2101      	movs	r1, #1
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7ff ff88 	bl	8002b04 <tcs34725_write8>
    HAL_Delay(3);
 8002bf4:	2003      	movs	r0, #3
 8002bf6:	f001 fd4d 	bl	8004694 <HAL_Delay>
    tcs34725_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 8002bfa:	2103      	movs	r1, #3
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f7ff ff81 	bl	8002b04 <tcs34725_write8>
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <tcs32725_begin>:
    doing anything else)
*/
/**************************************************************************/


bool tcs32725_begin(TCS34725_t *sensor, tcs34725IntegrationTime_t it, tcs34725Gain_t gain) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	70fb      	strb	r3, [r7, #3]
 8002c14:	4613      	mov	r3, r2
 8002c16:	70bb      	strb	r3, [r7, #2]
    //Wire.begin();

    /* Make sure we're actually connected */
    uint8_t x = read8(TCS34725_ID);
 8002c18:	2012      	movs	r0, #18
 8002c1a:	f7ff ff93 	bl	8002b44 <read8>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	73fb      	strb	r3, [r7, #15]
    my_printf("device id: %d", x);
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	4619      	mov	r1, r3
 8002c26:	480d      	ldr	r0, [pc, #52]	@ (8002c5c <tcs32725_begin+0x54>)
 8002c28:	f7ff ff44 	bl	8002ab4 <my_printf>
    if (x != 0x4D) {
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b4d      	cmp	r3, #77	@ 0x4d
 8002c30:	d001      	beq.n	8002c36 <tcs32725_begin+0x2e>
        return false;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e00d      	b.n	8002c52 <tcs32725_begin+0x4a>
    }
    _tcs34725Initialised = true;
 8002c36:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <tcs32725_begin+0x58>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]

    /* Set default integration time and gain */
    setIntegrationTime(it);
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f810 	bl	8002c64 <setIntegrationTime>
    setGain(gain);
 8002c44:	78bb      	ldrb	r3, [r7, #2]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f82e 	bl	8002ca8 <setGain>

    /* Note: by default, the device is in power down mode on bootup */
    enable();
 8002c4c:	f7ff ffcc 	bl	8002be8 <enable>

    return true;
 8002c50:	2301      	movs	r3, #1
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	08010240 	.word	0x08010240
 8002c60:	200008b4 	.word	0x200008b4

08002c64 <setIntegrationTime>:
/**************************************************************************/
/*!
    Sets the integration time for the TC34725
*/
/**************************************************************************/
void setIntegrationTime(tcs34725IntegrationTime_t it) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]
    if (!_tcs34725Initialised) {
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <setIntegrationTime+0x38>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	f083 0301 	eor.w	r3, r3, #1
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <setIntegrationTime+0x1e>
        //begin();
    	my_printf("set integration time go wrong\r\n");
 8002c7c:	4808      	ldr	r0, [pc, #32]	@ (8002ca0 <setIntegrationTime+0x3c>)
 8002c7e:	f7ff ff19 	bl	8002ab4 <my_printf>
    }

    /* Update the timing register */
    tcs34725_write8(TCS34725_ATIME, it);
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	4619      	mov	r1, r3
 8002c86:	2001      	movs	r0, #1
 8002c88:	f7ff ff3c 	bl	8002b04 <tcs34725_write8>

    /* Update value placeholder */
    _tcs34725IntegrationTime = it;
 8002c8c:	4a05      	ldr	r2, [pc, #20]	@ (8002ca4 <setIntegrationTime+0x40>)
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	7013      	strb	r3, [r2, #0]
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200008b4 	.word	0x200008b4
 8002ca0:	08010250 	.word	0x08010250
 8002ca4:	200008b6 	.word	0x200008b6

08002ca8 <setGain>:
/**************************************************************************/
/*!
    Adjusts the gain on the TCS34725 (adjusts the sensitivity to light)
*/
/**************************************************************************/
void setGain(tcs34725Gain_t gain) {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	71fb      	strb	r3, [r7, #7]
        begin();
    }
    */

    /* Update the timing register */
    tcs34725_write8(TCS34725_CONTROL, gain);
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	200f      	movs	r0, #15
 8002cb8:	f7ff ff24 	bl	8002b04 <tcs34725_write8>

    /* Update value placeholders */
    _tcs34725Gain = gain;
 8002cbc:	4a03      	ldr	r2, [pc, #12]	@ (8002ccc <setGain+0x24>)
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	7013      	strb	r3, [r2, #0]
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	200008b5 	.word	0x200008b5

08002cd0 <getRawData>:
/**************************************************************************/
/*!
    @brief  Reads the raw red, green, blue and clear channel values
*/
/**************************************************************************/
void getRawData(uint16_t* r, uint16_t* g, uint16_t* b, uint16_t* c) {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	603b      	str	r3, [r7, #0]
	/*
    if (!_tcs34725Initialised) {
        begin();
    }
	*/
    *c = read16(TCS34725_CDATAL);
 8002cde:	2014      	movs	r0, #20
 8002ce0:	f7ff ff58 	bl	8002b94 <read16>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	801a      	strh	r2, [r3, #0]
    *r = read16(TCS34725_RDATAL);
 8002cec:	2016      	movs	r0, #22
 8002cee:	f7ff ff51 	bl	8002b94 <read16>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	801a      	strh	r2, [r3, #0]
    *g = read16(TCS34725_GDATAL);
 8002cfa:	2018      	movs	r0, #24
 8002cfc:	f7ff ff4a 	bl	8002b94 <read16>
 8002d00:	4603      	mov	r3, r0
 8002d02:	461a      	mov	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	801a      	strh	r2, [r3, #0]
    *b = read16(TCS34725_BDATAL);
 8002d08:	201a      	movs	r0, #26
 8002d0a:	f7ff ff43 	bl	8002b94 <read16>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	801a      	strh	r2, [r3, #0]

    /* Set a delay for the integration time */
    switch (_tcs34725IntegrationTime) {
 8002d16:	4b1a      	ldr	r3, [pc, #104]	@ (8002d80 <getRawData+0xb0>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2bff      	cmp	r3, #255	@ 0xff
 8002d1c:	d012      	beq.n	8002d44 <getRawData+0x74>
 8002d1e:	2bff      	cmp	r3, #255	@ 0xff
 8002d20:	dc29      	bgt.n	8002d76 <getRawData+0xa6>
 8002d22:	2bf6      	cmp	r3, #246	@ 0xf6
 8002d24:	d012      	beq.n	8002d4c <getRawData+0x7c>
 8002d26:	2bf6      	cmp	r3, #246	@ 0xf6
 8002d28:	dc25      	bgt.n	8002d76 <getRawData+0xa6>
 8002d2a:	2beb      	cmp	r3, #235	@ 0xeb
 8002d2c:	d012      	beq.n	8002d54 <getRawData+0x84>
 8002d2e:	2beb      	cmp	r3, #235	@ 0xeb
 8002d30:	dc21      	bgt.n	8002d76 <getRawData+0xa6>
 8002d32:	2bd5      	cmp	r3, #213	@ 0xd5
 8002d34:	d012      	beq.n	8002d5c <getRawData+0x8c>
 8002d36:	2bd5      	cmp	r3, #213	@ 0xd5
 8002d38:	dc1d      	bgt.n	8002d76 <getRawData+0xa6>
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d016      	beq.n	8002d6c <getRawData+0x9c>
 8002d3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d40:	d010      	beq.n	8002d64 <getRawData+0x94>
            break;
        case TCS34725_INTEGRATIONTIME_700MS:
        	HAL_Delay(700);
            break;
    }
}
 8002d42:	e018      	b.n	8002d76 <getRawData+0xa6>
            HAL_Delay(3);
 8002d44:	2003      	movs	r0, #3
 8002d46:	f001 fca5 	bl	8004694 <HAL_Delay>
            break;
 8002d4a:	e014      	b.n	8002d76 <getRawData+0xa6>
        	HAL_Delay(24);
 8002d4c:	2018      	movs	r0, #24
 8002d4e:	f001 fca1 	bl	8004694 <HAL_Delay>
            break;
 8002d52:	e010      	b.n	8002d76 <getRawData+0xa6>
        	HAL_Delay(50);
 8002d54:	2032      	movs	r0, #50	@ 0x32
 8002d56:	f001 fc9d 	bl	8004694 <HAL_Delay>
            break;
 8002d5a:	e00c      	b.n	8002d76 <getRawData+0xa6>
        	HAL_Delay(101);
 8002d5c:	2065      	movs	r0, #101	@ 0x65
 8002d5e:	f001 fc99 	bl	8004694 <HAL_Delay>
            break;
 8002d62:	e008      	b.n	8002d76 <getRawData+0xa6>
        	HAL_Delay(154);
 8002d64:	209a      	movs	r0, #154	@ 0x9a
 8002d66:	f001 fc95 	bl	8004694 <HAL_Delay>
            break;
 8002d6a:	e004      	b.n	8002d76 <getRawData+0xa6>
        	HAL_Delay(700);
 8002d6c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002d70:	f001 fc90 	bl	8004694 <HAL_Delay>
            break;
 8002d74:	bf00      	nop
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	200008b6 	.word	0x200008b6

08002d84 <getRGB>:

void getRGB(float *r, float *g, float *b) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  uint16_t red, green, blue, clear;
  getRawData(&red, &green, &blue, &clear);
 8002d90:	f107 0314 	add.w	r3, r7, #20
 8002d94:	f107 0216 	add.w	r2, r7, #22
 8002d98:	f107 0118 	add.w	r1, r7, #24
 8002d9c:	f107 001a 	add.w	r0, r7, #26
 8002da0:	f7ff ff96 	bl	8002cd0 <getRawData>
  uint32_t sum = clear;
 8002da4:	8abb      	ldrh	r3, [r7, #20]
 8002da6:	61fb      	str	r3, [r7, #28]

  // Avoid divide by zero errors ... if clear = 0 return black
  if (clear == 0) {
 8002da8:	8abb      	ldrh	r3, [r7, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10c      	bne.n	8002dc8 <getRGB+0x44>
    *r = *g = *b = 0;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	e038      	b.n	8002e3a <getRGB+0xb6>
    return;
  }

  *r = (float)red / sum * 255.0;
 8002dc8:	8b7b      	ldrh	r3, [r7, #26]
 8002dca:	ee07 3a90 	vmov	s15, r3
 8002dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	ee07 3a90 	vmov	s15, r3
 8002dd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002de0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002e40 <getRGB+0xbc>
 8002de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	edc3 7a00 	vstr	s15, [r3]
  *g = (float)green / sum * 255.0;
 8002dee:	8b3b      	ldrh	r3, [r7, #24]
 8002df0:	ee07 3a90 	vmov	s15, r3
 8002df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	ee07 3a90 	vmov	s15, r3
 8002dfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e06:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002e40 <getRGB+0xbc>
 8002e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	edc3 7a00 	vstr	s15, [r3]
  *b = (float)blue / sum * 255.0;
 8002e14:	8afb      	ldrh	r3, [r7, #22]
 8002e16:	ee07 3a90 	vmov	s15, r3
 8002e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	ee07 3a90 	vmov	s15, r3
 8002e24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e2c:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8002e40 <getRGB+0xbc>
 8002e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	edc3 7a00 	vstr	s15, [r3]
}
 8002e3a:	3720      	adds	r7, #32
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	437f0000 	.word	0x437f0000

08002e44 <my_printf>:
{
 8002e44:	b40f      	push	{r0, r1, r2, r3}
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b0a2      	sub	sp, #136	@ 0x88
 8002e4a:	af00      	add	r7, sp, #0
    va_start(args, format);
 8002e4c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002e50:	603b      	str	r3, [r7, #0]
    int usbTxLength = vsnprintf(tx_buffer, BUFFER_LEN, format, args);
 8002e52:	1d38      	adds	r0, r7, #4
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002e5a:	2180      	movs	r1, #128	@ 0x80
 8002e5c:	f00b f84a 	bl	800def4 <vsniprintf>
 8002e60:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (usbTxLength > 0 && usbTxLength < BUFFER_LEN)
 8002e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	dd0b      	ble.n	8002e84 <my_printf+0x40>
 8002e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e70:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e72:	dc07      	bgt.n	8002e84 <my_printf+0x40>
        CDC_Transmit_FS((uint8_t *)tx_buffer, usbTxLength);
 8002e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	1d3b      	adds	r3, r7, #4
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f009 fdec 	bl	800ca5c <CDC_Transmit_FS>
}
 8002e84:	bf00      	nop
 8002e86:	3788      	adds	r7, #136	@ 0x88
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e8e:	b004      	add	sp, #16
 8002e90:	4770      	bx	lr
	...

08002e94 <i2c_read_addr8_data8>:
 * moved from i2c.h, these are all i2c function needed
 **/

extern I2C_HandleTypeDef hi2c1;

bool i2c_read_addr8_data8(uint8_t addr, uint8_t *data) {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	6039      	str	r1, [r7, #0]
 8002e9e:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002ea0:	1dfa      	adds	r2, r7, #7
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	2152      	movs	r1, #82	@ 0x52
 8002eac:	4812      	ldr	r0, [pc, #72]	@ (8002ef8 <i2c_read_addr8_data8+0x64>)
 8002eae:	f002 f809 	bl	8004ec4 <HAL_I2C_Master_Transmit>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d006      	beq.n	8002ec6 <i2c_read_addr8_data8+0x32>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_data8 (register 0x%X)\r\n", addr);
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	480f      	ldr	r0, [pc, #60]	@ (8002efc <i2c_read_addr8_data8+0x68>)
 8002ebe:	f7ff ffc1 	bl	8002e44 <my_printf>
        return false;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e013      	b.n	8002eee <i2c_read_addr8_data8+0x5a>
    }
    if (HAL_I2C_Master_Receive(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	2301      	movs	r3, #1
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	2152      	movs	r1, #82	@ 0x52
 8002ed2:	4809      	ldr	r0, [pc, #36]	@ (8002ef8 <i2c_read_addr8_data8+0x64>)
 8002ed4:	f002 f8f4 	bl	80050c0 <HAL_I2C_Master_Receive>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <i2c_read_addr8_data8+0x58>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_data8 (register 0x%X)\r\n", addr);
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4807      	ldr	r0, [pc, #28]	@ (8002f00 <i2c_read_addr8_data8+0x6c>)
 8002ee4:	f7ff ffae 	bl	8002e44 <my_printf>
        return false;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e000      	b.n	8002eee <i2c_read_addr8_data8+0x5a>
    }
    return true;
 8002eec:	2301      	movs	r3, #1
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000330 	.word	0x20000330
 8002efc:	08010270 	.word	0x08010270
 8002f00:	080102b4 	.word	0x080102b4

08002f04 <i2c_read_addr8_data16>:

bool i2c_read_addr8_data16(uint8_t addr, uint16_t *data) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	6039      	str	r1, [r7, #0]
 8002f0e:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002f10:	1dfa      	adds	r2, r7, #7
 8002f12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2301      	movs	r3, #1
 8002f1a:	2152      	movs	r1, #82	@ 0x52
 8002f1c:	4818      	ldr	r0, [pc, #96]	@ (8002f80 <i2c_read_addr8_data16+0x7c>)
 8002f1e:	f001 ffd1 	bl	8004ec4 <HAL_I2C_Master_Transmit>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d006      	beq.n	8002f36 <i2c_read_addr8_data16+0x32>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_data16 (register 0x%X)\r\n", addr);
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4815      	ldr	r0, [pc, #84]	@ (8002f84 <i2c_read_addr8_data16+0x80>)
 8002f2e:	f7ff ff89 	bl	8002e44 <my_printf>
        return false;
 8002f32:	2300      	movs	r3, #0
 8002f34:	e01f      	b.n	8002f76 <i2c_read_addr8_data16+0x72>
    }
    uint8_t buf[2];
    if (HAL_I2C_Master_Receive(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, buf, 2, HAL_MAX_DELAY) != HAL_OK) {
 8002f36:	f107 020c 	add.w	r2, r7, #12
 8002f3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2302      	movs	r3, #2
 8002f42:	2152      	movs	r1, #82	@ 0x52
 8002f44:	480e      	ldr	r0, [pc, #56]	@ (8002f80 <i2c_read_addr8_data16+0x7c>)
 8002f46:	f002 f8bb 	bl	80050c0 <HAL_I2C_Master_Receive>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d006      	beq.n	8002f5e <i2c_read_addr8_data16+0x5a>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_data16 (register 0x%X)\r\n", addr);
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	4619      	mov	r1, r3
 8002f54:	480c      	ldr	r0, [pc, #48]	@ (8002f88 <i2c_read_addr8_data16+0x84>)
 8002f56:	f7ff ff75 	bl	8002e44 <my_printf>
        return false;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e00b      	b.n	8002f76 <i2c_read_addr8_data16+0x72>
    }
    *data = (buf[0] << 8) | buf[1];
 8002f5e:	7b3b      	ldrb	r3, [r7, #12]
 8002f60:	b21b      	sxth	r3, r3
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	b21a      	sxth	r2, r3
 8002f66:	7b7b      	ldrb	r3, [r7, #13]
 8002f68:	b21b      	sxth	r3, r3
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	b21b      	sxth	r3, r3
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	801a      	strh	r2, [r3, #0]
    return true;
 8002f74:	2301      	movs	r3, #1
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000330 	.word	0x20000330
 8002f84:	080102f8 	.word	0x080102f8
 8002f88:	08010340 	.word	0x08010340

08002f8c <i2c_write_addr8_data8>:

bool i2c_write_addr8_data8(uint8_t addr, uint8_t data) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	4603      	mov	r3, r0
 8002f94:	460a      	mov	r2, r1
 8002f96:	71fb      	strb	r3, [r7, #7]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {addr, data};
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	733b      	strb	r3, [r7, #12]
 8002fa0:	79bb      	ldrb	r3, [r7, #6]
 8002fa2:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, buf, 2, HAL_MAX_DELAY) != HAL_OK) {
 8002fa4:	f107 020c 	add.w	r2, r7, #12
 8002fa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	2302      	movs	r3, #2
 8002fb0:	2152      	movs	r1, #82	@ 0x52
 8002fb2:	4809      	ldr	r0, [pc, #36]	@ (8002fd8 <i2c_write_addr8_data8+0x4c>)
 8002fb4:	f001 ff86 	bl	8004ec4 <HAL_I2C_Master_Transmit>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d007      	beq.n	8002fce <i2c_write_addr8_data8+0x42>
        my_printf("[I2C] ERROR: Write failed i2c_write_addr8_data8 (register 0x%X) on device 0x%X\r\n", addr, VL53L0X_DEFAULT_ADDRESS);
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	2229      	movs	r2, #41	@ 0x29
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4805      	ldr	r0, [pc, #20]	@ (8002fdc <i2c_write_addr8_data8+0x50>)
 8002fc6:	f7ff ff3d 	bl	8002e44 <my_printf>
        return false;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e000      	b.n	8002fd0 <i2c_write_addr8_data8+0x44>
    }
    return true;
 8002fce:	2301      	movs	r3, #1
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20000330 	.word	0x20000330
 8002fdc:	08010384 	.word	0x08010384

08002fe0 <i2c_read_addr8_data32>:

bool i2c_read_addr8_data32(uint8_t addr, uint32_t *data) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	6039      	str	r1, [r7, #0]
 8002fea:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002fec:	1dfa      	adds	r2, r7, #7
 8002fee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	2152      	movs	r1, #82	@ 0x52
 8002ff8:	4819      	ldr	r0, [pc, #100]	@ (8003060 <i2c_read_addr8_data32+0x80>)
 8002ffa:	f001 ff63 	bl	8004ec4 <HAL_I2C_Master_Transmit>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d006      	beq.n	8003012 <i2c_read_addr8_data32+0x32>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_data32 (register 0x%X)\r\n", addr);
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	4619      	mov	r1, r3
 8003008:	4816      	ldr	r0, [pc, #88]	@ (8003064 <i2c_read_addr8_data32+0x84>)
 800300a:	f7ff ff1b 	bl	8002e44 <my_printf>
        return false;
 800300e:	2300      	movs	r3, #0
 8003010:	e021      	b.n	8003056 <i2c_read_addr8_data32+0x76>
    }
    uint8_t buf[4];
    if (HAL_I2C_Master_Receive(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, buf, 4, HAL_MAX_DELAY) != HAL_OK) {
 8003012:	f107 020c 	add.w	r2, r7, #12
 8003016:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	2304      	movs	r3, #4
 800301e:	2152      	movs	r1, #82	@ 0x52
 8003020:	480f      	ldr	r0, [pc, #60]	@ (8003060 <i2c_read_addr8_data32+0x80>)
 8003022:	f002 f84d 	bl	80050c0 <HAL_I2C_Master_Receive>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <i2c_read_addr8_data32+0x5a>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_data32 (register 0x%X)\r\n", addr);
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	4619      	mov	r1, r3
 8003030:	480d      	ldr	r0, [pc, #52]	@ (8003068 <i2c_read_addr8_data32+0x88>)
 8003032:	f7ff ff07 	bl	8002e44 <my_printf>
        return false;
 8003036:	2300      	movs	r3, #0
 8003038:	e00d      	b.n	8003056 <i2c_read_addr8_data32+0x76>
    }
    *data = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 800303a:	7b3b      	ldrb	r3, [r7, #12]
 800303c:	061a      	lsls	r2, r3, #24
 800303e:	7b7b      	ldrb	r3, [r7, #13]
 8003040:	041b      	lsls	r3, r3, #16
 8003042:	431a      	orrs	r2, r3
 8003044:	7bbb      	ldrb	r3, [r7, #14]
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	4313      	orrs	r3, r2
 800304a:	7bfa      	ldrb	r2, [r7, #15]
 800304c:	4313      	orrs	r3, r2
 800304e:	461a      	mov	r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	601a      	str	r2, [r3, #0]
    return true;
 8003054:	2301      	movs	r3, #1
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000330 	.word	0x20000330
 8003064:	080103d8 	.word	0x080103d8
 8003068:	08010420 	.word	0x08010420

0800306c <i2c_write_addr8_bytes>:

bool i2c_write_addr8_bytes(uint8_t addr, const uint8_t *data, uint8_t length) {
 800306c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003070:	b087      	sub	sp, #28
 8003072:	af02      	add	r7, sp, #8
 8003074:	4603      	mov	r3, r0
 8003076:	6039      	str	r1, [r7, #0]
 8003078:	71fb      	strb	r3, [r7, #7]
 800307a:	4613      	mov	r3, r2
 800307c:	71bb      	strb	r3, [r7, #6]
 800307e:	466b      	mov	r3, sp
 8003080:	461e      	mov	r6, r3
    uint8_t buf[1 + length];
 8003082:	79bb      	ldrb	r3, [r7, #6]
 8003084:	1c59      	adds	r1, r3, #1
 8003086:	1e4b      	subs	r3, r1, #1
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	460a      	mov	r2, r1
 800308c:	2300      	movs	r3, #0
 800308e:	4690      	mov	r8, r2
 8003090:	4699      	mov	r9, r3
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800309e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030a6:	460a      	mov	r2, r1
 80030a8:	2300      	movs	r3, #0
 80030aa:	4614      	mov	r4, r2
 80030ac:	461d      	mov	r5, r3
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	00eb      	lsls	r3, r5, #3
 80030b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030bc:	00e2      	lsls	r2, r4, #3
 80030be:	460b      	mov	r3, r1
 80030c0:	3307      	adds	r3, #7
 80030c2:	08db      	lsrs	r3, r3, #3
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	ebad 0d03 	sub.w	sp, sp, r3
 80030ca:	ab02      	add	r3, sp, #8
 80030cc:	3300      	adds	r3, #0
 80030ce:	60bb      	str	r3, [r7, #8]
    buf[0] = addr;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	79fa      	ldrb	r2, [r7, #7]
 80030d4:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[1], data, length);
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	3301      	adds	r3, #1
 80030da:	79ba      	ldrb	r2, [r7, #6]
 80030dc:	6839      	ldr	r1, [r7, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f00b f829 	bl	800e136 <memcpy>

    if (HAL_I2C_Master_Transmit(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, buf, length + 1, HAL_MAX_DELAY) != HAL_OK) {
 80030e4:	79bb      	ldrb	r3, [r7, #6]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3301      	adds	r3, #1
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030f0:	9200      	str	r2, [sp, #0]
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	2152      	movs	r1, #82	@ 0x52
 80030f6:	480a      	ldr	r0, [pc, #40]	@ (8003120 <i2c_write_addr8_bytes+0xb4>)
 80030f8:	f001 fee4 	bl	8004ec4 <HAL_I2C_Master_Transmit>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d006      	beq.n	8003110 <i2c_write_addr8_bytes+0xa4>
        my_printf("[I2C] ERROR: Write failed i2c_write_addr8_bytes (register 0x%X)\r\n", addr);
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	4619      	mov	r1, r3
 8003106:	4807      	ldr	r0, [pc, #28]	@ (8003124 <i2c_write_addr8_bytes+0xb8>)
 8003108:	f7ff fe9c 	bl	8002e44 <my_printf>
        return false;
 800310c:	2300      	movs	r3, #0
 800310e:	e000      	b.n	8003112 <i2c_write_addr8_bytes+0xa6>
    }
    return true;
 8003110:	2301      	movs	r3, #1
 8003112:	46b5      	mov	sp, r6
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800311e:	bf00      	nop
 8003120:	20000330 	.word	0x20000330
 8003124:	08010464 	.word	0x08010464

08003128 <i2c_read_addr8_bytes>:

bool i2c_read_addr8_bytes(uint8_t addr, uint8_t *data, uint8_t length) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af02      	add	r7, sp, #8
 800312e:	4603      	mov	r3, r0
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	71fb      	strb	r3, [r7, #7]
 8003134:	4613      	mov	r3, r2
 8003136:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Master_Transmit(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 8003138:	1dfa      	adds	r2, r7, #7
 800313a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	2301      	movs	r3, #1
 8003142:	2152      	movs	r1, #82	@ 0x52
 8003144:	4812      	ldr	r0, [pc, #72]	@ (8003190 <i2c_read_addr8_bytes+0x68>)
 8003146:	f001 febd 	bl	8004ec4 <HAL_I2C_Master_Transmit>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d006      	beq.n	800315e <i2c_read_addr8_bytes+0x36>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_bytes (register 0x%X)\r\n", addr);
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	4619      	mov	r1, r3
 8003154:	480f      	ldr	r0, [pc, #60]	@ (8003194 <i2c_read_addr8_bytes+0x6c>)
 8003156:	f7ff fe75 	bl	8002e44 <my_printf>
        return false;
 800315a:	2300      	movs	r3, #0
 800315c:	e014      	b.n	8003188 <i2c_read_addr8_bytes+0x60>
    }
    if (HAL_I2C_Master_Receive(&hi2c1, VL53L0X_DEFAULT_ADDRESS << 1, data, length, HAL_MAX_DELAY) != HAL_OK) {
 800315e:	79bb      	ldrb	r3, [r7, #6]
 8003160:	b29b      	uxth	r3, r3
 8003162:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003166:	9200      	str	r2, [sp, #0]
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	2152      	movs	r1, #82	@ 0x52
 800316c:	4808      	ldr	r0, [pc, #32]	@ (8003190 <i2c_read_addr8_bytes+0x68>)
 800316e:	f001 ffa7 	bl	80050c0 <HAL_I2C_Master_Receive>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d006      	beq.n	8003186 <i2c_read_addr8_bytes+0x5e>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_bytes (register 0x%X)\r\n", addr);
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	4619      	mov	r1, r3
 800317c:	4806      	ldr	r0, [pc, #24]	@ (8003198 <i2c_read_addr8_bytes+0x70>)
 800317e:	f7ff fe61 	bl	8002e44 <my_printf>
        return false;
 8003182:	2300      	movs	r3, #0
 8003184:	e000      	b.n	8003188 <i2c_read_addr8_bytes+0x60>
    }
    return true;
 8003186:	2301      	movs	r3, #1
}
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000330 	.word	0x20000330
 8003194:	080104a8 	.word	0x080104a8
 8003198:	080104ec 	.word	0x080104ec

0800319c <device_is_booted>:
/**
 * We can read the model id to confirm that the device is booted.
 * (There is no fresh_out_of_reset as on the vl6180x)
 */
static bool device_is_booted()
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
    printf("check device is booted\r\n");
 80031a2:	4813      	ldr	r0, [pc, #76]	@ (80031f0 <device_is_booted+0x54>)
 80031a4:	f00a fe2c 	bl	800de00 <puts>
    uint8_t device_id = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	71fb      	strb	r3, [r7, #7]
    if (!i2c_read_addr8_data8(REG_IDENTIFICATION_MODEL_ID, &device_id)) {
 80031ac:	1dfb      	adds	r3, r7, #7
 80031ae:	4619      	mov	r1, r3
 80031b0:	20c0      	movs	r0, #192	@ 0xc0
 80031b2:	f7ff fe6f 	bl	8002e94 <i2c_read_addr8_data8>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f083 0301 	eor.w	r3, r3, #1
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d006      	beq.n	80031d0 <device_is_booted+0x34>
        printf("current device id: %d", device_id);
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	4619      	mov	r1, r3
 80031c6:	480b      	ldr	r0, [pc, #44]	@ (80031f4 <device_is_booted+0x58>)
 80031c8:	f00a fdb2 	bl	800dd30 <iprintf>
        return false;
 80031cc:	2300      	movs	r3, #0
 80031ce:	e00a      	b.n	80031e6 <device_is_booted+0x4a>
    } else {
        printf("device id: %d", device_id);
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	4619      	mov	r1, r3
 80031d4:	4808      	ldr	r0, [pc, #32]	@ (80031f8 <device_is_booted+0x5c>)
 80031d6:	f00a fdab 	bl	800dd30 <iprintf>
    }
    return device_id == VL53L0X_EXPECTED_DEVICE_ID;
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	2bee      	cmp	r3, #238	@ 0xee
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	08010530 	.word	0x08010530
 80031f4:	08010548 	.word	0x08010548
 80031f8:	08010560 	.word	0x08010560

080031fc <data_init>:

/**
 * One time device initialization
 */
static bool data_init()
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
    bool success = false;
 8003202:	2300      	movs	r3, #0
 8003204:	71fb      	strb	r3, [r7, #7]

    /* Set 2v8 mode */
    uint8_t vhv_config_scl_sda = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	71bb      	strb	r3, [r7, #6]
    if (!i2c_read_addr8_data8(REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, &vhv_config_scl_sda)) {
 800320a:	1dbb      	adds	r3, r7, #6
 800320c:	4619      	mov	r1, r3
 800320e:	2089      	movs	r0, #137	@ 0x89
 8003210:	f7ff fe40 	bl	8002e94 <i2c_read_addr8_data8>
 8003214:	4603      	mov	r3, r0
 8003216:	f083 0301 	eor.w	r3, r3, #1
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <data_init+0x28>
        return false;
 8003220:	2300      	movs	r3, #0
 8003222:	e073      	b.n	800330c <data_init+0x110>
    }
    vhv_config_scl_sda |= 0x01;
 8003224:	79bb      	ldrb	r3, [r7, #6]
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	b2db      	uxtb	r3, r3
 800322c:	71bb      	strb	r3, [r7, #6]
    if (!i2c_write_addr8_data8(REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, vhv_config_scl_sda)) {
 800322e:	79bb      	ldrb	r3, [r7, #6]
 8003230:	4619      	mov	r1, r3
 8003232:	2089      	movs	r0, #137	@ 0x89
 8003234:	f7ff feaa 	bl	8002f8c <i2c_write_addr8_data8>
 8003238:	4603      	mov	r3, r0
 800323a:	f083 0301 	eor.w	r3, r3, #1
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <data_init+0x4c>
        return false;
 8003244:	2300      	movs	r3, #0
 8003246:	e061      	b.n	800330c <data_init+0x110>
    }

    /* Set I2C standard mode */
    success = i2c_write_addr8_data8(0x88, 0x00);
 8003248:	2100      	movs	r1, #0
 800324a:	2088      	movs	r0, #136	@ 0x88
 800324c:	f7ff fe9e 	bl	8002f8c <i2c_write_addr8_data8>
 8003250:	4603      	mov	r3, r0
 8003252:	71fb      	strb	r3, [r7, #7]

    success &= i2c_write_addr8_data8(0x80, 0x01);
 8003254:	2101      	movs	r1, #1
 8003256:	2080      	movs	r0, #128	@ 0x80
 8003258:	f7ff fe98 	bl	8002f8c <i2c_write_addr8_data8>
 800325c:	4603      	mov	r3, r0
 800325e:	461a      	mov	r2, r3
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	4013      	ands	r3, r2
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf14      	ite	ne
 8003268:	2301      	movne	r3, #1
 800326a:	2300      	moveq	r3, #0
 800326c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 800326e:	2101      	movs	r1, #1
 8003270:	20ff      	movs	r0, #255	@ 0xff
 8003272:	f7ff fe8b 	bl	8002f8c <i2c_write_addr8_data8>
 8003276:	4603      	mov	r3, r0
 8003278:	461a      	mov	r2, r3
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	bf14      	ite	ne
 8003282:	2301      	movne	r3, #1
 8003284:	2300      	moveq	r3, #0
 8003286:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8003288:	2100      	movs	r1, #0
 800328a:	2000      	movs	r0, #0
 800328c:	f7ff fe7e 	bl	8002f8c <i2c_write_addr8_data8>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	4013      	ands	r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf14      	ite	ne
 800329c:	2301      	movne	r3, #1
 800329e:	2300      	moveq	r3, #0
 80032a0:	71fb      	strb	r3, [r7, #7]
    /* It may be unnecessary to retrieve the stop variable for each sensor */
    success &= i2c_read_addr8_data8(0x91, &stop_variable);
 80032a2:	491c      	ldr	r1, [pc, #112]	@ (8003314 <data_init+0x118>)
 80032a4:	2091      	movs	r0, #145	@ 0x91
 80032a6:	f7ff fdf5 	bl	8002e94 <i2c_read_addr8_data8>
 80032aa:	4603      	mov	r3, r0
 80032ac:	461a      	mov	r2, r3
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	bf14      	ite	ne
 80032b6:	2301      	movne	r3, #1
 80032b8:	2300      	moveq	r3, #0
 80032ba:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x01);
 80032bc:	2101      	movs	r1, #1
 80032be:	2000      	movs	r0, #0
 80032c0:	f7ff fe64 	bl	8002f8c <i2c_write_addr8_data8>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461a      	mov	r2, r3
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80032d6:	2100      	movs	r1, #0
 80032d8:	20ff      	movs	r0, #255	@ 0xff
 80032da:	f7ff fe57 	bl	8002f8c <i2c_write_addr8_data8>
 80032de:	4603      	mov	r3, r0
 80032e0:	461a      	mov	r2, r3
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	bf14      	ite	ne
 80032ea:	2301      	movne	r3, #1
 80032ec:	2300      	moveq	r3, #0
 80032ee:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x00);
 80032f0:	2100      	movs	r1, #0
 80032f2:	2080      	movs	r0, #128	@ 0x80
 80032f4:	f7ff fe4a 	bl	8002f8c <i2c_write_addr8_data8>
 80032f8:	4603      	mov	r3, r0
 80032fa:	461a      	mov	r2, r3
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf14      	ite	ne
 8003304:	2301      	movne	r3, #1
 8003306:	2300      	moveq	r3, #0
 8003308:	71fb      	strb	r3, [r7, #7]

    return success;
 800330a:	79fb      	ldrb	r3, [r7, #7]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	200008b7 	.word	0x200008b7

08003318 <read_strobe>:
/**
 * Wait for strobe value to be set. This is used when we read values
 * from NVM (non volatile memory).
 */
static bool read_strobe()
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
    bool success = false;
 800331e:	2300      	movs	r3, #0
 8003320:	71fb      	strb	r3, [r7, #7]
    uint8_t strobe = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	71bb      	strb	r3, [r7, #6]
    if (!i2c_write_addr8_data8(0x83, 0x00)) {
 8003326:	2100      	movs	r1, #0
 8003328:	2083      	movs	r0, #131	@ 0x83
 800332a:	f7ff fe2f 	bl	8002f8c <i2c_write_addr8_data8>
 800332e:	4603      	mov	r3, r0
 8003330:	f083 0301 	eor.w	r3, r3, #1
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <read_strobe+0x26>
        return false;
 800333a:	2300      	movs	r3, #0
 800333c:	e021      	b.n	8003382 <read_strobe+0x6a>
    }
    do {
        success = i2c_read_addr8_data8(0x83, &strobe);
 800333e:	1dbb      	adds	r3, r7, #6
 8003340:	4619      	mov	r1, r3
 8003342:	2083      	movs	r0, #131	@ 0x83
 8003344:	f7ff fda6 	bl	8002e94 <i2c_read_addr8_data8>
 8003348:	4603      	mov	r3, r0
 800334a:	71fb      	strb	r3, [r7, #7]
    } while (success && (strobe == 0));
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <read_strobe+0x40>
 8003352:	79bb      	ldrb	r3, [r7, #6]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f2      	beq.n	800333e <read_strobe+0x26>
    if (!success) {
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	f083 0301 	eor.w	r3, r3, #1
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <read_strobe+0x50>
        return false;
 8003364:	2300      	movs	r3, #0
 8003366:	e00c      	b.n	8003382 <read_strobe+0x6a>
    }
    if (!i2c_write_addr8_data8(0x83, 0x01)) {
 8003368:	2101      	movs	r1, #1
 800336a:	2083      	movs	r0, #131	@ 0x83
 800336c:	f7ff fe0e 	bl	8002f8c <i2c_write_addr8_data8>
 8003370:	4603      	mov	r3, r0
 8003372:	f083 0301 	eor.w	r3, r3, #1
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <read_strobe+0x68>
        return false;
 800337c:	2300      	movs	r3, #0
 800337e:	e000      	b.n	8003382 <read_strobe+0x6a>
    }
    return true;
 8003380:	2301      	movs	r3, #1
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <get_spad_info_from_nvm>:
 * or only non-aperture SPADs. The number of SPADs to enable and which type
 * are also saved during the calibration step at ST factory and can be retrieved
 * from NVM.
 */
static bool get_spad_info_from_nvm(uint8_t *spad_count, uint8_t *spad_type, uint8_t good_spad_map[6])
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b086      	sub	sp, #24
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
    bool success = false;
 8003396:	2300      	movs	r3, #0
 8003398:	75fb      	strb	r3, [r7, #23]
    uint8_t tmp_data8 = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	75bb      	strb	r3, [r7, #22]
    uint32_t tmp_data32 = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]

    /* Setup to read from NVM */
    success  = i2c_write_addr8_data8(0x80, 0x01);
 80033a2:	2101      	movs	r1, #1
 80033a4:	2080      	movs	r0, #128	@ 0x80
 80033a6:	f7ff fdf1 	bl	8002f8c <i2c_write_addr8_data8>
 80033aa:	4603      	mov	r3, r0
 80033ac:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 80033ae:	2101      	movs	r1, #1
 80033b0:	20ff      	movs	r0, #255	@ 0xff
 80033b2:	f7ff fdeb 	bl	8002f8c <i2c_write_addr8_data8>
 80033b6:	4603      	mov	r3, r0
 80033b8:	461a      	mov	r2, r3
 80033ba:	7dfb      	ldrb	r3, [r7, #23]
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	bf14      	ite	ne
 80033c2:	2301      	movne	r3, #1
 80033c4:	2300      	moveq	r3, #0
 80033c6:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 80033c8:	2100      	movs	r1, #0
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7ff fdde 	bl	8002f8c <i2c_write_addr8_data8>
 80033d0:	4603      	mov	r3, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	7dfb      	ldrb	r3, [r7, #23]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf14      	ite	ne
 80033dc:	2301      	movne	r3, #1
 80033de:	2300      	moveq	r3, #0
 80033e0:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x06);
 80033e2:	2106      	movs	r1, #6
 80033e4:	20ff      	movs	r0, #255	@ 0xff
 80033e6:	f7ff fdd1 	bl	8002f8c <i2c_write_addr8_data8>
 80033ea:	4603      	mov	r3, r0
 80033ec:	461a      	mov	r2, r3
 80033ee:	7dfb      	ldrb	r3, [r7, #23]
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bf14      	ite	ne
 80033f6:	2301      	movne	r3, #1
 80033f8:	2300      	moveq	r3, #0
 80033fa:	75fb      	strb	r3, [r7, #23]
    success &= i2c_read_addr8_data8(0x83, &tmp_data8);
 80033fc:	f107 0316 	add.w	r3, r7, #22
 8003400:	4619      	mov	r1, r3
 8003402:	2083      	movs	r0, #131	@ 0x83
 8003404:	f7ff fd46 	bl	8002e94 <i2c_read_addr8_data8>
 8003408:	4603      	mov	r3, r0
 800340a:	461a      	mov	r2, r3
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf14      	ite	ne
 8003414:	2301      	movne	r3, #1
 8003416:	2300      	moveq	r3, #0
 8003418:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x83, tmp_data8 | 0x04);
 800341a:	7dbb      	ldrb	r3, [r7, #22]
 800341c:	f043 0304 	orr.w	r3, r3, #4
 8003420:	b2db      	uxtb	r3, r3
 8003422:	4619      	mov	r1, r3
 8003424:	2083      	movs	r0, #131	@ 0x83
 8003426:	f7ff fdb1 	bl	8002f8c <i2c_write_addr8_data8>
 800342a:	4603      	mov	r3, r0
 800342c:	461a      	mov	r2, r3
 800342e:	7dfb      	ldrb	r3, [r7, #23]
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	bf14      	ite	ne
 8003436:	2301      	movne	r3, #1
 8003438:	2300      	moveq	r3, #0
 800343a:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x07);
 800343c:	2107      	movs	r1, #7
 800343e:	20ff      	movs	r0, #255	@ 0xff
 8003440:	f7ff fda4 	bl	8002f8c <i2c_write_addr8_data8>
 8003444:	4603      	mov	r3, r0
 8003446:	461a      	mov	r2, r3
 8003448:	7dfb      	ldrb	r3, [r7, #23]
 800344a:	4013      	ands	r3, r2
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf14      	ite	ne
 8003450:	2301      	movne	r3, #1
 8003452:	2300      	moveq	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x81, 0x01);
 8003456:	2101      	movs	r1, #1
 8003458:	2081      	movs	r0, #129	@ 0x81
 800345a:	f7ff fd97 	bl	8002f8c <i2c_write_addr8_data8>
 800345e:	4603      	mov	r3, r0
 8003460:	461a      	mov	r2, r3
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	bf14      	ite	ne
 800346a:	2301      	movne	r3, #1
 800346c:	2300      	moveq	r3, #0
 800346e:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x80, 0x01);
 8003470:	2101      	movs	r1, #1
 8003472:	2080      	movs	r0, #128	@ 0x80
 8003474:	f7ff fd8a 	bl	8002f8c <i2c_write_addr8_data8>
 8003478:	4603      	mov	r3, r0
 800347a:	461a      	mov	r2, r3
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 800348a:	7dfb      	ldrb	r3, [r7, #23]
 800348c:	f083 0301 	eor.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <get_spad_info_from_nvm+0x110>
      return false;
 8003496:	2300      	movs	r3, #0
 8003498:	e0c1      	b.n	800361e <get_spad_info_from_nvm+0x294>
    }

    /* Get the SPAD count and type */
    success &= i2c_write_addr8_data8(0x94, 0x6b);
 800349a:	216b      	movs	r1, #107	@ 0x6b
 800349c:	2094      	movs	r0, #148	@ 0x94
 800349e:	f7ff fd75 	bl	8002f8c <i2c_write_addr8_data8>
 80034a2:	4603      	mov	r3, r0
 80034a4:	461a      	mov	r2, r3
 80034a6:	7dfb      	ldrb	r3, [r7, #23]
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	bf14      	ite	ne
 80034ae:	2301      	movne	r3, #1
 80034b0:	2300      	moveq	r3, #0
 80034b2:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
 80034b6:	f083 0301 	eor.w	r3, r3, #1
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <get_spad_info_from_nvm+0x13a>
        return false;
 80034c0:	2300      	movs	r3, #0
 80034c2:	e0ac      	b.n	800361e <get_spad_info_from_nvm+0x294>
    }
    if (!read_strobe()) {
 80034c4:	f7ff ff28 	bl	8003318 <read_strobe>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f083 0301 	eor.w	r3, r3, #1
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <get_spad_info_from_nvm+0x14e>
        return false;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e0a2      	b.n	800361e <get_spad_info_from_nvm+0x294>
    }
    success &= i2c_read_addr8_data32(0x90, &tmp_data32);
 80034d8:	f107 0310 	add.w	r3, r7, #16
 80034dc:	4619      	mov	r1, r3
 80034de:	2090      	movs	r0, #144	@ 0x90
 80034e0:	f7ff fd7e 	bl	8002fe0 <i2c_read_addr8_data32>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
 80034f8:	f083 0301 	eor.w	r3, r3, #1
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <get_spad_info_from_nvm+0x17c>
        return false;
 8003502:	2300      	movs	r3, #0
 8003504:	e08b      	b.n	800361e <get_spad_info_from_nvm+0x294>
    }
    *spad_count = (tmp_data32 >> 8) & 0x7f;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	b2db      	uxtb	r3, r3
 800350c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003510:	b2da      	uxtb	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	701a      	strb	r2, [r3, #0]
    *spad_type = (tmp_data32 >> 15) & 0x01;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	0bdb      	lsrs	r3, r3, #15
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	b2da      	uxtb	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	701a      	strb	r2, [r3, #0]
    good_spad_map[5] = (uint8_t)((tmp_data32 >> 16) & 0xFF);

#endif

    /* Restore after reading from NVM */
    success &=i2c_write_addr8_data8(0x81, 0x00);
 8003526:	2100      	movs	r1, #0
 8003528:	2081      	movs	r0, #129	@ 0x81
 800352a:	f7ff fd2f 	bl	8002f8c <i2c_write_addr8_data8>
 800352e:	4603      	mov	r3, r0
 8003530:	461a      	mov	r2, r3
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	4013      	ands	r3, r2
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf14      	ite	ne
 800353a:	2301      	movne	r3, #1
 800353c:	2300      	moveq	r3, #0
 800353e:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x06);
 8003540:	2106      	movs	r1, #6
 8003542:	20ff      	movs	r0, #255	@ 0xff
 8003544:	f7ff fd22 	bl	8002f8c <i2c_write_addr8_data8>
 8003548:	4603      	mov	r3, r0
 800354a:	461a      	mov	r2, r3
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf14      	ite	ne
 8003554:	2301      	movne	r3, #1
 8003556:	2300      	moveq	r3, #0
 8003558:	75fb      	strb	r3, [r7, #23]
    success &=i2c_read_addr8_data8(0x83, &tmp_data8);
 800355a:	f107 0316 	add.w	r3, r7, #22
 800355e:	4619      	mov	r1, r3
 8003560:	2083      	movs	r0, #131	@ 0x83
 8003562:	f7ff fc97 	bl	8002e94 <i2c_read_addr8_data8>
 8003566:	4603      	mov	r3, r0
 8003568:	461a      	mov	r2, r3
 800356a:	7dfb      	ldrb	r3, [r7, #23]
 800356c:	4013      	ands	r3, r2
 800356e:	2b00      	cmp	r3, #0
 8003570:	bf14      	ite	ne
 8003572:	2301      	movne	r3, #1
 8003574:	2300      	moveq	r3, #0
 8003576:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x83, tmp_data8 & 0xfb);
 8003578:	7dbb      	ldrb	r3, [r7, #22]
 800357a:	f023 0304 	bic.w	r3, r3, #4
 800357e:	b2db      	uxtb	r3, r3
 8003580:	4619      	mov	r1, r3
 8003582:	2083      	movs	r0, #131	@ 0x83
 8003584:	f7ff fd02 	bl	8002f8c <i2c_write_addr8_data8>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf14      	ite	ne
 8003594:	2301      	movne	r3, #1
 8003596:	2300      	moveq	r3, #0
 8003598:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x01);
 800359a:	2101      	movs	r1, #1
 800359c:	20ff      	movs	r0, #255	@ 0xff
 800359e:	f7ff fcf5 	bl	8002f8c <i2c_write_addr8_data8>
 80035a2:	4603      	mov	r3, r0
 80035a4:	461a      	mov	r2, r3
 80035a6:	7dfb      	ldrb	r3, [r7, #23]
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	bf14      	ite	ne
 80035ae:	2301      	movne	r3, #1
 80035b0:	2300      	moveq	r3, #0
 80035b2:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x00, 0x01);
 80035b4:	2101      	movs	r1, #1
 80035b6:	2000      	movs	r0, #0
 80035b8:	f7ff fce8 	bl	8002f8c <i2c_write_addr8_data8>
 80035bc:	4603      	mov	r3, r0
 80035be:	461a      	mov	r2, r3
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf14      	ite	ne
 80035c8:	2301      	movne	r3, #1
 80035ca:	2300      	moveq	r3, #0
 80035cc:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x00);
 80035ce:	2100      	movs	r1, #0
 80035d0:	20ff      	movs	r0, #255	@ 0xff
 80035d2:	f7ff fcdb 	bl	8002f8c <i2c_write_addr8_data8>
 80035d6:	4603      	mov	r3, r0
 80035d8:	461a      	mov	r2, r3
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	4013      	ands	r3, r2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	bf14      	ite	ne
 80035e2:	2301      	movne	r3, #1
 80035e4:	2300      	moveq	r3, #0
 80035e6:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x80, 0x00);
 80035e8:	2100      	movs	r1, #0
 80035ea:	2080      	movs	r0, #128	@ 0x80
 80035ec:	f7ff fcce 	bl	8002f8c <i2c_write_addr8_data8>
 80035f0:	4603      	mov	r3, r0
 80035f2:	461a      	mov	r2, r3
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf14      	ite	ne
 80035fc:	2301      	movne	r3, #1
 80035fe:	2300      	moveq	r3, #0
 8003600:	75fb      	strb	r3, [r7, #23]

    /* When we haven't configured the SPAD map yet, the SPAD map register actually
     * contains the good SPAD map, so we can retrieve it straight from this register
     * instead of reading it from the NVM. */
    if (!i2c_read_addr8_bytes(REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, good_spad_map, 6)) {
 8003602:	2206      	movs	r2, #6
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	20b0      	movs	r0, #176	@ 0xb0
 8003608:	f7ff fd8e 	bl	8003128 <i2c_read_addr8_bytes>
 800360c:	4603      	mov	r3, r0
 800360e:	f083 0301 	eor.w	r3, r3, #1
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <get_spad_info_from_nvm+0x292>
        return false;
 8003618:	2300      	movs	r3, #0
 800361a:	e000      	b.n	800361e <get_spad_info_from_nvm+0x294>
    }
    return success;
 800361c:	7dfb      	ldrb	r3, [r7, #23]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <set_spads_from_nvm>:
 * Sets the SPADs according to the value saved to NVM by ST during production. Assuming
 * similar conditions (e.g. no cover glass), this should give reasonable readings and we
 * can avoid running ref spad management (tedious code).
 */
static bool set_spads_from_nvm()
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b08c      	sub	sp, #48	@ 0x30
 800362a:	af00      	add	r7, sp, #0
    uint8_t spad_map[SPAD_MAP_ROW_COUNT] = { 0 };
 800362c:	f107 0310 	add.w	r3, r7, #16
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	809a      	strh	r2, [r3, #4]
    uint8_t good_spad_map[SPAD_MAP_ROW_COUNT] = { 0 };
 8003636:	f107 0308 	add.w	r3, r7, #8
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	809a      	strh	r2, [r3, #4]
    uint8_t spads_enabled_count = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t spads_to_enable_count = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	71fb      	strb	r3, [r7, #7]
    uint8_t spad_type = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	71bb      	strb	r3, [r7, #6]
    volatile uint32_t total_val = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	603b      	str	r3, [r7, #0]

    if (!get_spad_info_from_nvm(&spads_to_enable_count, &spad_type, good_spad_map)) {
 8003652:	f107 0208 	add.w	r2, r7, #8
 8003656:	1db9      	adds	r1, r7, #6
 8003658:	1dfb      	adds	r3, r7, #7
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fe95 	bl	800338a <get_spad_info_from_nvm>
 8003660:	4603      	mov	r3, r0
 8003662:	f083 0301 	eor.w	r3, r3, #1
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <set_spads_from_nvm+0x4a>
        return false;
 800366c:	2300      	movs	r3, #0
 800366e:	e0c7      	b.n	8003800 <set_spads_from_nvm+0x1da>
    }

    for (int i = 0; i < 6; i++) {
 8003670:	2300      	movs	r3, #0
 8003672:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003674:	e00b      	b.n	800368e <set_spads_from_nvm+0x68>
        total_val += good_spad_map[i];
 8003676:	f107 0208 	add.w	r2, r7, #8
 800367a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367c:	4413      	add	r3, r2
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	4413      	add	r3, r2
 8003686:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 6; i++) {
 8003688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368a:	3301      	adds	r3, #1
 800368c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800368e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003690:	2b05      	cmp	r3, #5
 8003692:	ddf0      	ble.n	8003676 <set_spads_from_nvm+0x50>
    }

    bool success = i2c_write_addr8_data8(0xFF, 0x01);
 8003694:	2101      	movs	r1, #1
 8003696:	20ff      	movs	r0, #255	@ 0xff
 8003698:	f7ff fc78 	bl	8002f8c <i2c_write_addr8_data8>
 800369c:	4603      	mov	r3, r0
 800369e:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80036a0:	2100      	movs	r1, #0
 80036a2:	204f      	movs	r0, #79	@ 0x4f
 80036a4:	f7ff fc72 	bl	8002f8c <i2c_write_addr8_data8>
 80036a8:	4603      	mov	r3, r0
 80036aa:	461a      	mov	r2, r3
 80036ac:	7ffb      	ldrb	r3, [r7, #31]
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80036ba:	212c      	movs	r1, #44	@ 0x2c
 80036bc:	204e      	movs	r0, #78	@ 0x4e
 80036be:	f7ff fc65 	bl	8002f8c <i2c_write_addr8_data8>
 80036c2:	4603      	mov	r3, r0
 80036c4:	461a      	mov	r2, r3
 80036c6:	7ffb      	ldrb	r3, [r7, #31]
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf14      	ite	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	2300      	moveq	r3, #0
 80036d2:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80036d4:	2100      	movs	r1, #0
 80036d6:	20ff      	movs	r0, #255	@ 0xff
 80036d8:	f7ff fc58 	bl	8002f8c <i2c_write_addr8_data8>
 80036dc:	4603      	mov	r3, r0
 80036de:	461a      	mov	r2, r3
 80036e0:	7ffb      	ldrb	r3, [r7, #31]
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_GLOBAL_CONFIG_REF_EN_START_SELECT, SPAD_START_SELECT);
 80036ee:	21b4      	movs	r1, #180	@ 0xb4
 80036f0:	20b6      	movs	r0, #182	@ 0xb6
 80036f2:	f7ff fc4b 	bl	8002f8c <i2c_write_addr8_data8>
 80036f6:	4603      	mov	r3, r0
 80036f8:	461a      	mov	r2, r3
 80036fa:	7ffb      	ldrb	r3, [r7, #31]
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bf14      	ite	ne
 8003702:	2301      	movne	r3, #1
 8003704:	2300      	moveq	r3, #0
 8003706:	77fb      	strb	r3, [r7, #31]
    if (!success) {
 8003708:	7ffb      	ldrb	r3, [r7, #31]
 800370a:	f083 0301 	eor.w	r3, r3, #1
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <set_spads_from_nvm+0xf2>
        return false;
 8003714:	2300      	movs	r3, #0
 8003716:	e073      	b.n	8003800 <set_spads_from_nvm+0x1da>
    }

    uint8_t offset = (spad_type == SPAD_TYPE_APERTURE) ? SPAD_APERTURE_START_INDEX : 0;
 8003718:	79bb      	ldrb	r3, [r7, #6]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <set_spads_from_nvm+0xfc>
 800371e:	230c      	movs	r3, #12
 8003720:	e000      	b.n	8003724 <set_spads_from_nvm+0xfe>
 8003722:	2300      	movs	r3, #0
 8003724:	77bb      	strb	r3, [r7, #30]

    /* Create a new SPAD array by selecting a subset of the SPADs suggested by the good SPAD map.
     * The subset should only have the number of type enabled as suggested by the reading from
     * the NVM (spads_to_enable_count and spad_type). */
    for (int row = 0; row < SPAD_MAP_ROW_COUNT; row++) {
 8003726:	2300      	movs	r3, #0
 8003728:	627b      	str	r3, [r7, #36]	@ 0x24
 800372a:	e04d      	b.n	80037c8 <set_spads_from_nvm+0x1a2>
        for (int column = 0; column < SPAD_ROW_SIZE; column++) {
 800372c:	2300      	movs	r3, #0
 800372e:	623b      	str	r3, [r7, #32]
 8003730:	e03d      	b.n	80037ae <set_spads_from_nvm+0x188>
            int index = (row * SPAD_ROW_SIZE) + column;
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	6a3a      	ldr	r2, [r7, #32]
 8003738:	4413      	add	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
            if (index >= SPAD_MAX_COUNT) {
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b2b      	cmp	r3, #43	@ 0x2b
 8003740:	dd01      	ble.n	8003746 <set_spads_from_nvm+0x120>
                return false;
 8003742:	2300      	movs	r3, #0
 8003744:	e05c      	b.n	8003800 <set_spads_from_nvm+0x1da>
            }
            if (spads_enabled_count == spads_to_enable_count) {
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800374c:	429a      	cmp	r2, r3
 800374e:	d032      	beq.n	80037b6 <set_spads_from_nvm+0x190>
                /* We are done */
                break;
            }
            if (index < offset) {
 8003750:	7fbb      	ldrb	r3, [r7, #30]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	429a      	cmp	r2, r3
 8003756:	db26      	blt.n	80037a6 <set_spads_from_nvm+0x180>
                continue;
            }
            if ((good_spad_map[row] >> column) & 0x1) {
 8003758:	f107 0208 	add.w	r2, r7, #8
 800375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375e:	4413      	add	r3, r2
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	fa42 f303 	asr.w	r3, r2, r3
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d01a      	beq.n	80037a8 <set_spads_from_nvm+0x182>
                spad_map[row] |= (1 << column);
 8003772:	f107 0210 	add.w	r2, r7, #16
 8003776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003778:	4413      	add	r3, r2
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	b25a      	sxtb	r2, r3
 800377e:	2101      	movs	r1, #1
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	fa01 f303 	lsl.w	r3, r1, r3
 8003786:	b25b      	sxtb	r3, r3
 8003788:	4313      	orrs	r3, r2
 800378a:	b25b      	sxtb	r3, r3
 800378c:	b2d9      	uxtb	r1, r3
 800378e:	f107 0210 	add.w	r2, r7, #16
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	4413      	add	r3, r2
 8003796:	460a      	mov	r2, r1
 8003798:	701a      	strb	r2, [r3, #0]
                spads_enabled_count++;
 800379a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800379e:	3301      	adds	r3, #1
 80037a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80037a4:	e000      	b.n	80037a8 <set_spads_from_nvm+0x182>
                continue;
 80037a6:	bf00      	nop
        for (int column = 0; column < SPAD_ROW_SIZE; column++) {
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	3301      	adds	r3, #1
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	2b07      	cmp	r3, #7
 80037b2:	ddbe      	ble.n	8003732 <set_spads_from_nvm+0x10c>
 80037b4:	e000      	b.n	80037b8 <set_spads_from_nvm+0x192>
                break;
 80037b6:	bf00      	nop
            }
        }
        if (spads_enabled_count == spads_to_enable_count) {
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80037be:	429a      	cmp	r2, r3
 80037c0:	d006      	beq.n	80037d0 <set_spads_from_nvm+0x1aa>
    for (int row = 0; row < SPAD_MAP_ROW_COUNT; row++) {
 80037c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c4:	3301      	adds	r3, #1
 80037c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ca:	2b05      	cmp	r3, #5
 80037cc:	ddae      	ble.n	800372c <set_spads_from_nvm+0x106>
 80037ce:	e000      	b.n	80037d2 <set_spads_from_nvm+0x1ac>
            /* To avoid looping unnecessarily when we are already done. */
            break;
 80037d0:	bf00      	nop
        }
    }

    if (spads_enabled_count != spads_to_enable_count) {
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <set_spads_from_nvm+0x1ba>
        return false;
 80037dc:	2300      	movs	r3, #0
 80037de:	e00f      	b.n	8003800 <set_spads_from_nvm+0x1da>
    }

    /* Write the new SPAD configuration */
    if (!i2c_write_addr8_bytes(REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, spad_map, SPAD_MAP_ROW_COUNT)) {
 80037e0:	f107 0310 	add.w	r3, r7, #16
 80037e4:	2206      	movs	r2, #6
 80037e6:	4619      	mov	r1, r3
 80037e8:	20b0      	movs	r0, #176	@ 0xb0
 80037ea:	f7ff fc3f 	bl	800306c <i2c_write_addr8_bytes>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f083 0301 	eor.w	r3, r3, #1
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <set_spads_from_nvm+0x1d8>
        return false;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e000      	b.n	8003800 <set_spads_from_nvm+0x1da>
    }

    return true;
 80037fe:	2301      	movs	r3, #1
}
 8003800:	4618      	mov	r0, r3
 8003802:	3730      	adds	r7, #48	@ 0x30
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <load_default_tuning_settings>:

/**
 * Load tuning settings (same as default tuning settings provided by ST api code)
 */
static bool load_default_tuning_settings()
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
    bool success = i2c_write_addr8_data8(0xFF, 0x01);
 800380e:	2101      	movs	r1, #1
 8003810:	20ff      	movs	r0, #255	@ 0xff
 8003812:	f7ff fbbb 	bl	8002f8c <i2c_write_addr8_data8>
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 800381a:	2100      	movs	r1, #0
 800381c:	2000      	movs	r0, #0
 800381e:	f7ff fbb5 	bl	8002f8c <i2c_write_addr8_data8>
 8003822:	4603      	mov	r3, r0
 8003824:	461a      	mov	r2, r3
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	bf14      	ite	ne
 800382e:	2301      	movne	r3, #1
 8003830:	2300      	moveq	r3, #0
 8003832:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003834:	2100      	movs	r1, #0
 8003836:	20ff      	movs	r0, #255	@ 0xff
 8003838:	f7ff fba8 	bl	8002f8c <i2c_write_addr8_data8>
 800383c:	4603      	mov	r3, r0
 800383e:	461a      	mov	r2, r3
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	4013      	ands	r3, r2
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf14      	ite	ne
 8003848:	2301      	movne	r3, #1
 800384a:	2300      	moveq	r3, #0
 800384c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x09, 0x00);
 800384e:	2100      	movs	r1, #0
 8003850:	2009      	movs	r0, #9
 8003852:	f7ff fb9b 	bl	8002f8c <i2c_write_addr8_data8>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	bf14      	ite	ne
 8003862:	2301      	movne	r3, #1
 8003864:	2300      	moveq	r3, #0
 8003866:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x10, 0x00);
 8003868:	2100      	movs	r1, #0
 800386a:	2010      	movs	r0, #16
 800386c:	f7ff fb8e 	bl	8002f8c <i2c_write_addr8_data8>
 8003870:	4603      	mov	r3, r0
 8003872:	461a      	mov	r2, r3
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf14      	ite	ne
 800387c:	2301      	movne	r3, #1
 800387e:	2300      	moveq	r3, #0
 8003880:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x11, 0x00);
 8003882:	2100      	movs	r1, #0
 8003884:	2011      	movs	r0, #17
 8003886:	f7ff fb81 	bl	8002f8c <i2c_write_addr8_data8>
 800388a:	4603      	mov	r3, r0
 800388c:	461a      	mov	r2, r3
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	4013      	ands	r3, r2
 8003892:	2b00      	cmp	r3, #0
 8003894:	bf14      	ite	ne
 8003896:	2301      	movne	r3, #1
 8003898:	2300      	moveq	r3, #0
 800389a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x24, 0x01);
 800389c:	2101      	movs	r1, #1
 800389e:	2024      	movs	r0, #36	@ 0x24
 80038a0:	f7ff fb74 	bl	8002f8c <i2c_write_addr8_data8>
 80038a4:	4603      	mov	r3, r0
 80038a6:	461a      	mov	r2, r3
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x25, 0xFF);
 80038b6:	21ff      	movs	r1, #255	@ 0xff
 80038b8:	2025      	movs	r0, #37	@ 0x25
 80038ba:	f7ff fb67 	bl	8002f8c <i2c_write_addr8_data8>
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	bf14      	ite	ne
 80038ca:	2301      	movne	r3, #1
 80038cc:	2300      	moveq	r3, #0
 80038ce:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x75, 0x00);
 80038d0:	2100      	movs	r1, #0
 80038d2:	2075      	movs	r0, #117	@ 0x75
 80038d4:	f7ff fb5a 	bl	8002f8c <i2c_write_addr8_data8>
 80038d8:	4603      	mov	r3, r0
 80038da:	461a      	mov	r2, r3
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bf14      	ite	ne
 80038e4:	2301      	movne	r3, #1
 80038e6:	2300      	moveq	r3, #0
 80038e8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 80038ea:	2101      	movs	r1, #1
 80038ec:	20ff      	movs	r0, #255	@ 0xff
 80038ee:	f7ff fb4d 	bl	8002f8c <i2c_write_addr8_data8>
 80038f2:	4603      	mov	r3, r0
 80038f4:	461a      	mov	r2, r3
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	bf14      	ite	ne
 80038fe:	2301      	movne	r3, #1
 8003900:	2300      	moveq	r3, #0
 8003902:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4E, 0x2C);
 8003904:	212c      	movs	r1, #44	@ 0x2c
 8003906:	204e      	movs	r0, #78	@ 0x4e
 8003908:	f7ff fb40 	bl	8002f8c <i2c_write_addr8_data8>
 800390c:	4603      	mov	r3, r0
 800390e:	461a      	mov	r2, r3
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	4013      	ands	r3, r2
 8003914:	2b00      	cmp	r3, #0
 8003916:	bf14      	ite	ne
 8003918:	2301      	movne	r3, #1
 800391a:	2300      	moveq	r3, #0
 800391c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x48, 0x00);
 800391e:	2100      	movs	r1, #0
 8003920:	2048      	movs	r0, #72	@ 0x48
 8003922:	f7ff fb33 	bl	8002f8c <i2c_write_addr8_data8>
 8003926:	4603      	mov	r3, r0
 8003928:	461a      	mov	r2, r3
 800392a:	79fb      	ldrb	r3, [r7, #7]
 800392c:	4013      	ands	r3, r2
 800392e:	2b00      	cmp	r3, #0
 8003930:	bf14      	ite	ne
 8003932:	2301      	movne	r3, #1
 8003934:	2300      	moveq	r3, #0
 8003936:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x30, 0x20);
 8003938:	2120      	movs	r1, #32
 800393a:	2030      	movs	r0, #48	@ 0x30
 800393c:	f7ff fb26 	bl	8002f8c <i2c_write_addr8_data8>
 8003940:	4603      	mov	r3, r0
 8003942:	461a      	mov	r2, r3
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	bf14      	ite	ne
 800394c:	2301      	movne	r3, #1
 800394e:	2300      	moveq	r3, #0
 8003950:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003952:	2100      	movs	r1, #0
 8003954:	20ff      	movs	r0, #255	@ 0xff
 8003956:	f7ff fb19 	bl	8002f8c <i2c_write_addr8_data8>
 800395a:	4603      	mov	r3, r0
 800395c:	461a      	mov	r2, r3
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	4013      	ands	r3, r2
 8003962:	2b00      	cmp	r3, #0
 8003964:	bf14      	ite	ne
 8003966:	2301      	movne	r3, #1
 8003968:	2300      	moveq	r3, #0
 800396a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x30, 0x09);
 800396c:	2109      	movs	r1, #9
 800396e:	2030      	movs	r0, #48	@ 0x30
 8003970:	f7ff fb0c 	bl	8002f8c <i2c_write_addr8_data8>
 8003974:	4603      	mov	r3, r0
 8003976:	461a      	mov	r2, r3
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf14      	ite	ne
 8003980:	2301      	movne	r3, #1
 8003982:	2300      	moveq	r3, #0
 8003984:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x54, 0x00);
 8003986:	2100      	movs	r1, #0
 8003988:	2054      	movs	r0, #84	@ 0x54
 800398a:	f7ff faff 	bl	8002f8c <i2c_write_addr8_data8>
 800398e:	4603      	mov	r3, r0
 8003990:	461a      	mov	r2, r3
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	4013      	ands	r3, r2
 8003996:	2b00      	cmp	r3, #0
 8003998:	bf14      	ite	ne
 800399a:	2301      	movne	r3, #1
 800399c:	2300      	moveq	r3, #0
 800399e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x31, 0x04);
 80039a0:	2104      	movs	r1, #4
 80039a2:	2031      	movs	r0, #49	@ 0x31
 80039a4:	f7ff faf2 	bl	8002f8c <i2c_write_addr8_data8>
 80039a8:	4603      	mov	r3, r0
 80039aa:	461a      	mov	r2, r3
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf14      	ite	ne
 80039b4:	2301      	movne	r3, #1
 80039b6:	2300      	moveq	r3, #0
 80039b8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x32, 0x03);
 80039ba:	2103      	movs	r1, #3
 80039bc:	2032      	movs	r0, #50	@ 0x32
 80039be:	f7ff fae5 	bl	8002f8c <i2c_write_addr8_data8>
 80039c2:	4603      	mov	r3, r0
 80039c4:	461a      	mov	r2, r3
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	bf14      	ite	ne
 80039ce:	2301      	movne	r3, #1
 80039d0:	2300      	moveq	r3, #0
 80039d2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x40, 0x83);
 80039d4:	2183      	movs	r1, #131	@ 0x83
 80039d6:	2040      	movs	r0, #64	@ 0x40
 80039d8:	f7ff fad8 	bl	8002f8c <i2c_write_addr8_data8>
 80039dc:	4603      	mov	r3, r0
 80039de:	461a      	mov	r2, r3
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf14      	ite	ne
 80039e8:	2301      	movne	r3, #1
 80039ea:	2300      	moveq	r3, #0
 80039ec:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x46, 0x25);
 80039ee:	2125      	movs	r1, #37	@ 0x25
 80039f0:	2046      	movs	r0, #70	@ 0x46
 80039f2:	f7ff facb 	bl	8002f8c <i2c_write_addr8_data8>
 80039f6:	4603      	mov	r3, r0
 80039f8:	461a      	mov	r2, r3
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bf14      	ite	ne
 8003a02:	2301      	movne	r3, #1
 8003a04:	2300      	moveq	r3, #0
 8003a06:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x60, 0x00);
 8003a08:	2100      	movs	r1, #0
 8003a0a:	2060      	movs	r0, #96	@ 0x60
 8003a0c:	f7ff fabe 	bl	8002f8c <i2c_write_addr8_data8>
 8003a10:	4603      	mov	r3, r0
 8003a12:	461a      	mov	r2, r3
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf14      	ite	ne
 8003a1c:	2301      	movne	r3, #1
 8003a1e:	2300      	moveq	r3, #0
 8003a20:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x27, 0x00);
 8003a22:	2100      	movs	r1, #0
 8003a24:	2027      	movs	r0, #39	@ 0x27
 8003a26:	f7ff fab1 	bl	8002f8c <i2c_write_addr8_data8>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	bf14      	ite	ne
 8003a36:	2301      	movne	r3, #1
 8003a38:	2300      	moveq	r3, #0
 8003a3a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x50, 0x06);
 8003a3c:	2106      	movs	r1, #6
 8003a3e:	2050      	movs	r0, #80	@ 0x50
 8003a40:	f7ff faa4 	bl	8002f8c <i2c_write_addr8_data8>
 8003a44:	4603      	mov	r3, r0
 8003a46:	461a      	mov	r2, r3
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf14      	ite	ne
 8003a50:	2301      	movne	r3, #1
 8003a52:	2300      	moveq	r3, #0
 8003a54:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x51, 0x00);
 8003a56:	2100      	movs	r1, #0
 8003a58:	2051      	movs	r0, #81	@ 0x51
 8003a5a:	f7ff fa97 	bl	8002f8c <i2c_write_addr8_data8>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	461a      	mov	r2, r3
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bf14      	ite	ne
 8003a6a:	2301      	movne	r3, #1
 8003a6c:	2300      	moveq	r3, #0
 8003a6e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x52, 0x96);
 8003a70:	2196      	movs	r1, #150	@ 0x96
 8003a72:	2052      	movs	r0, #82	@ 0x52
 8003a74:	f7ff fa8a 	bl	8002f8c <i2c_write_addr8_data8>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf14      	ite	ne
 8003a84:	2301      	movne	r3, #1
 8003a86:	2300      	moveq	r3, #0
 8003a88:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x56, 0x08);
 8003a8a:	2108      	movs	r1, #8
 8003a8c:	2056      	movs	r0, #86	@ 0x56
 8003a8e:	f7ff fa7d 	bl	8002f8c <i2c_write_addr8_data8>
 8003a92:	4603      	mov	r3, r0
 8003a94:	461a      	mov	r2, r3
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	bf14      	ite	ne
 8003a9e:	2301      	movne	r3, #1
 8003aa0:	2300      	moveq	r3, #0
 8003aa2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x57, 0x30);
 8003aa4:	2130      	movs	r1, #48	@ 0x30
 8003aa6:	2057      	movs	r0, #87	@ 0x57
 8003aa8:	f7ff fa70 	bl	8002f8c <i2c_write_addr8_data8>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x61, 0x00);
 8003abe:	2100      	movs	r1, #0
 8003ac0:	2061      	movs	r0, #97	@ 0x61
 8003ac2:	f7ff fa63 	bl	8002f8c <i2c_write_addr8_data8>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x62, 0x00);
 8003ad8:	2100      	movs	r1, #0
 8003ada:	2062      	movs	r0, #98	@ 0x62
 8003adc:	f7ff fa56 	bl	8002f8c <i2c_write_addr8_data8>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf14      	ite	ne
 8003aec:	2301      	movne	r3, #1
 8003aee:	2300      	moveq	r3, #0
 8003af0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x64, 0x00);
 8003af2:	2100      	movs	r1, #0
 8003af4:	2064      	movs	r0, #100	@ 0x64
 8003af6:	f7ff fa49 	bl	8002f8c <i2c_write_addr8_data8>
 8003afa:	4603      	mov	r3, r0
 8003afc:	461a      	mov	r2, r3
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bf14      	ite	ne
 8003b06:	2301      	movne	r3, #1
 8003b08:	2300      	moveq	r3, #0
 8003b0a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x65, 0x00);
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	2065      	movs	r0, #101	@ 0x65
 8003b10:	f7ff fa3c 	bl	8002f8c <i2c_write_addr8_data8>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf14      	ite	ne
 8003b20:	2301      	movne	r3, #1
 8003b22:	2300      	moveq	r3, #0
 8003b24:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x66, 0xA0);
 8003b26:	21a0      	movs	r1, #160	@ 0xa0
 8003b28:	2066      	movs	r0, #102	@ 0x66
 8003b2a:	f7ff fa2f 	bl	8002f8c <i2c_write_addr8_data8>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	461a      	mov	r2, r3
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bf14      	ite	ne
 8003b3a:	2301      	movne	r3, #1
 8003b3c:	2300      	moveq	r3, #0
 8003b3e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003b40:	2101      	movs	r1, #1
 8003b42:	20ff      	movs	r0, #255	@ 0xff
 8003b44:	f7ff fa22 	bl	8002f8c <i2c_write_addr8_data8>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf14      	ite	ne
 8003b54:	2301      	movne	r3, #1
 8003b56:	2300      	moveq	r3, #0
 8003b58:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x22, 0x32);
 8003b5a:	2132      	movs	r1, #50	@ 0x32
 8003b5c:	2022      	movs	r0, #34	@ 0x22
 8003b5e:	f7ff fa15 	bl	8002f8c <i2c_write_addr8_data8>
 8003b62:	4603      	mov	r3, r0
 8003b64:	461a      	mov	r2, r3
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bf14      	ite	ne
 8003b6e:	2301      	movne	r3, #1
 8003b70:	2300      	moveq	r3, #0
 8003b72:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x47, 0x14);
 8003b74:	2114      	movs	r1, #20
 8003b76:	2047      	movs	r0, #71	@ 0x47
 8003b78:	f7ff fa08 	bl	8002f8c <i2c_write_addr8_data8>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	461a      	mov	r2, r3
 8003b80:	79fb      	ldrb	r3, [r7, #7]
 8003b82:	4013      	ands	r3, r2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf14      	ite	ne
 8003b88:	2301      	movne	r3, #1
 8003b8a:	2300      	moveq	r3, #0
 8003b8c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x49, 0xFF);
 8003b8e:	21ff      	movs	r1, #255	@ 0xff
 8003b90:	2049      	movs	r0, #73	@ 0x49
 8003b92:	f7ff f9fb 	bl	8002f8c <i2c_write_addr8_data8>
 8003b96:	4603      	mov	r3, r0
 8003b98:	461a      	mov	r2, r3
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bf14      	ite	ne
 8003ba2:	2301      	movne	r3, #1
 8003ba4:	2300      	moveq	r3, #0
 8003ba6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4A, 0x00);
 8003ba8:	2100      	movs	r1, #0
 8003baa:	204a      	movs	r0, #74	@ 0x4a
 8003bac:	f7ff f9ee 	bl	8002f8c <i2c_write_addr8_data8>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	bf14      	ite	ne
 8003bbc:	2301      	movne	r3, #1
 8003bbe:	2300      	moveq	r3, #0
 8003bc0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	20ff      	movs	r0, #255	@ 0xff
 8003bc6:	f7ff f9e1 	bl	8002f8c <i2c_write_addr8_data8>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	461a      	mov	r2, r3
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	bf14      	ite	ne
 8003bd6:	2301      	movne	r3, #1
 8003bd8:	2300      	moveq	r3, #0
 8003bda:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x7A, 0x0A);
 8003bdc:	210a      	movs	r1, #10
 8003bde:	207a      	movs	r0, #122	@ 0x7a
 8003be0:	f7ff f9d4 	bl	8002f8c <i2c_write_addr8_data8>
 8003be4:	4603      	mov	r3, r0
 8003be6:	461a      	mov	r2, r3
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	4013      	ands	r3, r2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf14      	ite	ne
 8003bf0:	2301      	movne	r3, #1
 8003bf2:	2300      	moveq	r3, #0
 8003bf4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x7B, 0x00);
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	207b      	movs	r0, #123	@ 0x7b
 8003bfa:	f7ff f9c7 	bl	8002f8c <i2c_write_addr8_data8>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	461a      	mov	r2, r3
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bf14      	ite	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	2300      	moveq	r3, #0
 8003c0e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x78, 0x21);
 8003c10:	2121      	movs	r1, #33	@ 0x21
 8003c12:	2078      	movs	r0, #120	@ 0x78
 8003c14:	f7ff f9ba 	bl	8002f8c <i2c_write_addr8_data8>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf14      	ite	ne
 8003c24:	2301      	movne	r3, #1
 8003c26:	2300      	moveq	r3, #0
 8003c28:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	20ff      	movs	r0, #255	@ 0xff
 8003c2e:	f7ff f9ad 	bl	8002f8c <i2c_write_addr8_data8>
 8003c32:	4603      	mov	r3, r0
 8003c34:	461a      	mov	r2, r3
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	bf14      	ite	ne
 8003c3e:	2301      	movne	r3, #1
 8003c40:	2300      	moveq	r3, #0
 8003c42:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x23, 0x34);
 8003c44:	2134      	movs	r1, #52	@ 0x34
 8003c46:	2023      	movs	r0, #35	@ 0x23
 8003c48:	f7ff f9a0 	bl	8002f8c <i2c_write_addr8_data8>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	461a      	mov	r2, r3
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf14      	ite	ne
 8003c58:	2301      	movne	r3, #1
 8003c5a:	2300      	moveq	r3, #0
 8003c5c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x42, 0x00);
 8003c5e:	2100      	movs	r1, #0
 8003c60:	2042      	movs	r0, #66	@ 0x42
 8003c62:	f7ff f993 	bl	8002f8c <i2c_write_addr8_data8>
 8003c66:	4603      	mov	r3, r0
 8003c68:	461a      	mov	r2, r3
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bf14      	ite	ne
 8003c72:	2301      	movne	r3, #1
 8003c74:	2300      	moveq	r3, #0
 8003c76:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x44, 0xFF);
 8003c78:	21ff      	movs	r1, #255	@ 0xff
 8003c7a:	2044      	movs	r0, #68	@ 0x44
 8003c7c:	f7ff f986 	bl	8002f8c <i2c_write_addr8_data8>
 8003c80:	4603      	mov	r3, r0
 8003c82:	461a      	mov	r2, r3
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bf14      	ite	ne
 8003c8c:	2301      	movne	r3, #1
 8003c8e:	2300      	moveq	r3, #0
 8003c90:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x45, 0x26);
 8003c92:	2126      	movs	r1, #38	@ 0x26
 8003c94:	2045      	movs	r0, #69	@ 0x45
 8003c96:	f7ff f979 	bl	8002f8c <i2c_write_addr8_data8>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bf14      	ite	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	2300      	moveq	r3, #0
 8003caa:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x46, 0x05);
 8003cac:	2105      	movs	r1, #5
 8003cae:	2046      	movs	r0, #70	@ 0x46
 8003cb0:	f7ff f96c 	bl	8002f8c <i2c_write_addr8_data8>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x40, 0x40);
 8003cc6:	2140      	movs	r1, #64	@ 0x40
 8003cc8:	2040      	movs	r0, #64	@ 0x40
 8003cca:	f7ff f95f 	bl	8002f8c <i2c_write_addr8_data8>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bf14      	ite	ne
 8003cda:	2301      	movne	r3, #1
 8003cdc:	2300      	moveq	r3, #0
 8003cde:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x0E, 0x06);
 8003ce0:	2106      	movs	r1, #6
 8003ce2:	200e      	movs	r0, #14
 8003ce4:	f7ff f952 	bl	8002f8c <i2c_write_addr8_data8>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	461a      	mov	r2, r3
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf14      	ite	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x20, 0x1A);
 8003cfa:	211a      	movs	r1, #26
 8003cfc:	2020      	movs	r0, #32
 8003cfe:	f7ff f945 	bl	8002f8c <i2c_write_addr8_data8>
 8003d02:	4603      	mov	r3, r0
 8003d04:	461a      	mov	r2, r3
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	bf14      	ite	ne
 8003d0e:	2301      	movne	r3, #1
 8003d10:	2300      	moveq	r3, #0
 8003d12:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x43, 0x40);
 8003d14:	2140      	movs	r1, #64	@ 0x40
 8003d16:	2043      	movs	r0, #67	@ 0x43
 8003d18:	f7ff f938 	bl	8002f8c <i2c_write_addr8_data8>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	461a      	mov	r2, r3
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf14      	ite	ne
 8003d28:	2301      	movne	r3, #1
 8003d2a:	2300      	moveq	r3, #0
 8003d2c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003d2e:	2100      	movs	r1, #0
 8003d30:	20ff      	movs	r0, #255	@ 0xff
 8003d32:	f7ff f92b 	bl	8002f8c <i2c_write_addr8_data8>
 8003d36:	4603      	mov	r3, r0
 8003d38:	461a      	mov	r2, r3
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bf14      	ite	ne
 8003d42:	2301      	movne	r3, #1
 8003d44:	2300      	moveq	r3, #0
 8003d46:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x34, 0x03);
 8003d48:	2103      	movs	r1, #3
 8003d4a:	2034      	movs	r0, #52	@ 0x34
 8003d4c:	f7ff f91e 	bl	8002f8c <i2c_write_addr8_data8>
 8003d50:	4603      	mov	r3, r0
 8003d52:	461a      	mov	r2, r3
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf14      	ite	ne
 8003d5c:	2301      	movne	r3, #1
 8003d5e:	2300      	moveq	r3, #0
 8003d60:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x35, 0x44);
 8003d62:	2144      	movs	r1, #68	@ 0x44
 8003d64:	2035      	movs	r0, #53	@ 0x35
 8003d66:	f7ff f911 	bl	8002f8c <i2c_write_addr8_data8>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bf14      	ite	ne
 8003d76:	2301      	movne	r3, #1
 8003d78:	2300      	moveq	r3, #0
 8003d7a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	20ff      	movs	r0, #255	@ 0xff
 8003d80:	f7ff f904 	bl	8002f8c <i2c_write_addr8_data8>
 8003d84:	4603      	mov	r3, r0
 8003d86:	461a      	mov	r2, r3
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf14      	ite	ne
 8003d90:	2301      	movne	r3, #1
 8003d92:	2300      	moveq	r3, #0
 8003d94:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x31, 0x04);
 8003d96:	2104      	movs	r1, #4
 8003d98:	2031      	movs	r0, #49	@ 0x31
 8003d9a:	f7ff f8f7 	bl	8002f8c <i2c_write_addr8_data8>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	461a      	mov	r2, r3
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	bf14      	ite	ne
 8003daa:	2301      	movne	r3, #1
 8003dac:	2300      	moveq	r3, #0
 8003dae:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4B, 0x09);
 8003db0:	2109      	movs	r1, #9
 8003db2:	204b      	movs	r0, #75	@ 0x4b
 8003db4:	f7ff f8ea 	bl	8002f8c <i2c_write_addr8_data8>
 8003db8:	4603      	mov	r3, r0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4C, 0x05);
 8003dca:	2105      	movs	r1, #5
 8003dcc:	204c      	movs	r0, #76	@ 0x4c
 8003dce:	f7ff f8dd 	bl	8002f8c <i2c_write_addr8_data8>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	bf14      	ite	ne
 8003dde:	2301      	movne	r3, #1
 8003de0:	2300      	moveq	r3, #0
 8003de2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4D, 0x04);
 8003de4:	2104      	movs	r1, #4
 8003de6:	204d      	movs	r0, #77	@ 0x4d
 8003de8:	f7ff f8d0 	bl	8002f8c <i2c_write_addr8_data8>
 8003dec:	4603      	mov	r3, r0
 8003dee:	461a      	mov	r2, r3
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003dfe:	2100      	movs	r1, #0
 8003e00:	20ff      	movs	r0, #255	@ 0xff
 8003e02:	f7ff f8c3 	bl	8002f8c <i2c_write_addr8_data8>
 8003e06:	4603      	mov	r3, r0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	bf14      	ite	ne
 8003e12:	2301      	movne	r3, #1
 8003e14:	2300      	moveq	r3, #0
 8003e16:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x44, 0x00);
 8003e18:	2100      	movs	r1, #0
 8003e1a:	2044      	movs	r0, #68	@ 0x44
 8003e1c:	f7ff f8b6 	bl	8002f8c <i2c_write_addr8_data8>
 8003e20:	4603      	mov	r3, r0
 8003e22:	461a      	mov	r2, r3
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	bf14      	ite	ne
 8003e2c:	2301      	movne	r3, #1
 8003e2e:	2300      	moveq	r3, #0
 8003e30:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x45, 0x20);
 8003e32:	2120      	movs	r1, #32
 8003e34:	2045      	movs	r0, #69	@ 0x45
 8003e36:	f7ff f8a9 	bl	8002f8c <i2c_write_addr8_data8>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bf14      	ite	ne
 8003e46:	2301      	movne	r3, #1
 8003e48:	2300      	moveq	r3, #0
 8003e4a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x47, 0x08);
 8003e4c:	2108      	movs	r1, #8
 8003e4e:	2047      	movs	r0, #71	@ 0x47
 8003e50:	f7ff f89c 	bl	8002f8c <i2c_write_addr8_data8>
 8003e54:	4603      	mov	r3, r0
 8003e56:	461a      	mov	r2, r3
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	bf14      	ite	ne
 8003e60:	2301      	movne	r3, #1
 8003e62:	2300      	moveq	r3, #0
 8003e64:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x48, 0x28);
 8003e66:	2128      	movs	r1, #40	@ 0x28
 8003e68:	2048      	movs	r0, #72	@ 0x48
 8003e6a:	f7ff f88f 	bl	8002f8c <i2c_write_addr8_data8>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	461a      	mov	r2, r3
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	4013      	ands	r3, r2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	bf14      	ite	ne
 8003e7a:	2301      	movne	r3, #1
 8003e7c:	2300      	moveq	r3, #0
 8003e7e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x67, 0x00);
 8003e80:	2100      	movs	r1, #0
 8003e82:	2067      	movs	r0, #103	@ 0x67
 8003e84:	f7ff f882 	bl	8002f8c <i2c_write_addr8_data8>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bf14      	ite	ne
 8003e94:	2301      	movne	r3, #1
 8003e96:	2300      	moveq	r3, #0
 8003e98:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x70, 0x04);
 8003e9a:	2104      	movs	r1, #4
 8003e9c:	2070      	movs	r0, #112	@ 0x70
 8003e9e:	f7ff f875 	bl	8002f8c <i2c_write_addr8_data8>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	bf14      	ite	ne
 8003eae:	2301      	movne	r3, #1
 8003eb0:	2300      	moveq	r3, #0
 8003eb2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x71, 0x01);
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	2071      	movs	r0, #113	@ 0x71
 8003eb8:	f7ff f868 	bl	8002f8c <i2c_write_addr8_data8>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	79fb      	ldrb	r3, [r7, #7]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf14      	ite	ne
 8003ec8:	2301      	movne	r3, #1
 8003eca:	2300      	moveq	r3, #0
 8003ecc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x72, 0xFE);
 8003ece:	21fe      	movs	r1, #254	@ 0xfe
 8003ed0:	2072      	movs	r0, #114	@ 0x72
 8003ed2:	f7ff f85b 	bl	8002f8c <i2c_write_addr8_data8>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	461a      	mov	r2, r3
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bf14      	ite	ne
 8003ee2:	2301      	movne	r3, #1
 8003ee4:	2300      	moveq	r3, #0
 8003ee6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x76, 0x00);
 8003ee8:	2100      	movs	r1, #0
 8003eea:	2076      	movs	r0, #118	@ 0x76
 8003eec:	f7ff f84e 	bl	8002f8c <i2c_write_addr8_data8>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bf14      	ite	ne
 8003efc:	2301      	movne	r3, #1
 8003efe:	2300      	moveq	r3, #0
 8003f00:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x77, 0x00);
 8003f02:	2100      	movs	r1, #0
 8003f04:	2077      	movs	r0, #119	@ 0x77
 8003f06:	f7ff f841 	bl	8002f8c <i2c_write_addr8_data8>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bf14      	ite	ne
 8003f16:	2301      	movne	r3, #1
 8003f18:	2300      	moveq	r3, #0
 8003f1a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	20ff      	movs	r0, #255	@ 0xff
 8003f20:	f7ff f834 	bl	8002f8c <i2c_write_addr8_data8>
 8003f24:	4603      	mov	r3, r0
 8003f26:	461a      	mov	r2, r3
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x0D, 0x01);
 8003f36:	2101      	movs	r1, #1
 8003f38:	200d      	movs	r0, #13
 8003f3a:	f7ff f827 	bl	8002f8c <i2c_write_addr8_data8>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	461a      	mov	r2, r3
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bf14      	ite	ne
 8003f4a:	2301      	movne	r3, #1
 8003f4c:	2300      	moveq	r3, #0
 8003f4e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003f50:	2100      	movs	r1, #0
 8003f52:	20ff      	movs	r0, #255	@ 0xff
 8003f54:	f7ff f81a 	bl	8002f8c <i2c_write_addr8_data8>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x01);
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	2080      	movs	r0, #128	@ 0x80
 8003f6e:	f7ff f80d 	bl	8002f8c <i2c_write_addr8_data8>
 8003f72:	4603      	mov	r3, r0
 8003f74:	461a      	mov	r2, r3
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bf14      	ite	ne
 8003f7e:	2301      	movne	r3, #1
 8003f80:	2300      	moveq	r3, #0
 8003f82:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x01, 0xF8);
 8003f84:	21f8      	movs	r1, #248	@ 0xf8
 8003f86:	2001      	movs	r0, #1
 8003f88:	f7ff f800 	bl	8002f8c <i2c_write_addr8_data8>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	461a      	mov	r2, r3
 8003f90:	79fb      	ldrb	r3, [r7, #7]
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	bf14      	ite	ne
 8003f98:	2301      	movne	r3, #1
 8003f9a:	2300      	moveq	r3, #0
 8003f9c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	20ff      	movs	r0, #255	@ 0xff
 8003fa2:	f7fe fff3 	bl	8002f8c <i2c_write_addr8_data8>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	461a      	mov	r2, r3
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bf14      	ite	ne
 8003fb2:	2301      	movne	r3, #1
 8003fb4:	2300      	moveq	r3, #0
 8003fb6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x8E, 0x01);
 8003fb8:	2101      	movs	r1, #1
 8003fba:	208e      	movs	r0, #142	@ 0x8e
 8003fbc:	f7fe ffe6 	bl	8002f8c <i2c_write_addr8_data8>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf14      	ite	ne
 8003fcc:	2301      	movne	r3, #1
 8003fce:	2300      	moveq	r3, #0
 8003fd0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x01);
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	f7fe ffd9 	bl	8002f8c <i2c_write_addr8_data8>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	461a      	mov	r2, r3
 8003fde:	79fb      	ldrb	r3, [r7, #7]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bf14      	ite	ne
 8003fe6:	2301      	movne	r3, #1
 8003fe8:	2300      	moveq	r3, #0
 8003fea:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003fec:	2100      	movs	r1, #0
 8003fee:	20ff      	movs	r0, #255	@ 0xff
 8003ff0:	f7fe ffcc 	bl	8002f8c <i2c_write_addr8_data8>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bf14      	ite	ne
 8004000:	2301      	movne	r3, #1
 8004002:	2300      	moveq	r3, #0
 8004004:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x00);
 8004006:	2100      	movs	r1, #0
 8004008:	2080      	movs	r0, #128	@ 0x80
 800400a:	f7fe ffbf 	bl	8002f8c <i2c_write_addr8_data8>
 800400e:	4603      	mov	r3, r0
 8004010:	461a      	mov	r2, r3
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	4013      	ands	r3, r2
 8004016:	2b00      	cmp	r3, #0
 8004018:	bf14      	ite	ne
 800401a:	2301      	movne	r3, #1
 800401c:	2300      	moveq	r3, #0
 800401e:	71fb      	strb	r3, [r7, #7]
    return success;
 8004020:	79fb      	ldrb	r3, [r7, #7]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <configure_interrupt>:

static bool configure_interrupt()
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b082      	sub	sp, #8
 800402e:	af00      	add	r7, sp, #0
    /* Interrupt on new sample ready */
    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04)) {
 8004030:	2104      	movs	r1, #4
 8004032:	200a      	movs	r0, #10
 8004034:	f7fe ffaa 	bl	8002f8c <i2c_write_addr8_data8>
 8004038:	4603      	mov	r3, r0
 800403a:	f083 0301 	eor.w	r3, r3, #1
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <configure_interrupt+0x1e>
        return false;
 8004044:	2300      	movs	r3, #0
 8004046:	e02d      	b.n	80040a4 <configure_interrupt+0x7a>
    }

    /* Configure active low since the pin is pulled-up on most breakout boards */
    uint8_t gpio_hv_mux_active_high = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	71fb      	strb	r3, [r7, #7]
    if (!i2c_read_addr8_data8(REG_GPIO_HV_MUX_ACTIVE_HIGH, &gpio_hv_mux_active_high)) {
 800404c:	1dfb      	adds	r3, r7, #7
 800404e:	4619      	mov	r1, r3
 8004050:	2084      	movs	r0, #132	@ 0x84
 8004052:	f7fe ff1f 	bl	8002e94 <i2c_read_addr8_data8>
 8004056:	4603      	mov	r3, r0
 8004058:	f083 0301 	eor.w	r3, r3, #1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <configure_interrupt+0x3c>
        return false;
 8004062:	2300      	movs	r3, #0
 8004064:	e01e      	b.n	80040a4 <configure_interrupt+0x7a>
    }
    gpio_hv_mux_active_high &= ~0x10;
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	f023 0310 	bic.w	r3, r3, #16
 800406c:	b2db      	uxtb	r3, r3
 800406e:	71fb      	strb	r3, [r7, #7]
    if (!i2c_write_addr8_data8(REG_GPIO_HV_MUX_ACTIVE_HIGH, gpio_hv_mux_active_high)) {
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	4619      	mov	r1, r3
 8004074:	2084      	movs	r0, #132	@ 0x84
 8004076:	f7fe ff89 	bl	8002f8c <i2c_write_addr8_data8>
 800407a:	4603      	mov	r3, r0
 800407c:	f083 0301 	eor.w	r3, r3, #1
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <configure_interrupt+0x60>
        return false;
 8004086:	2300      	movs	r3, #0
 8004088:	e00c      	b.n	80040a4 <configure_interrupt+0x7a>
    }

    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CLEAR, 0x01)) {
 800408a:	2101      	movs	r1, #1
 800408c:	200b      	movs	r0, #11
 800408e:	f7fe ff7d 	bl	8002f8c <i2c_write_addr8_data8>
 8004092:	4603      	mov	r3, r0
 8004094:	f083 0301 	eor.w	r3, r3, #1
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <configure_interrupt+0x78>
        return false;
 800409e:	2300      	movs	r3, #0
 80040a0:	e000      	b.n	80040a4 <configure_interrupt+0x7a>
    }
    return true;
 80040a2:	2301      	movs	r3, #1
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <set_sequence_steps_enabled>:

/**
 * Enable (or disable) specific steps in the sequence
 */
static bool set_sequence_steps_enabled(uint8_t sequence_step)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	71fb      	strb	r3, [r7, #7]
    return i2c_write_addr8_data8(REG_SYSTEM_SEQUENCE_CONFIG, sequence_step);
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	4619      	mov	r1, r3
 80040ba:	2001      	movs	r0, #1
 80040bc:	f7fe ff66 	bl	8002f8c <i2c_write_addr8_data8>
 80040c0:	4603      	mov	r3, r0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <static_init>:

/**
 * Basic device initialization
 */
static bool static_init()
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	af00      	add	r7, sp, #0
    if (!set_spads_from_nvm()) {
 80040ce:	f7ff faaa 	bl	8003626 <set_spads_from_nvm>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f083 0301 	eor.w	r3, r3, #1
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <static_init+0x18>
        return false;
 80040de:	2300      	movs	r3, #0
 80040e0:	e01f      	b.n	8004122 <static_init+0x58>
    }

    if (!load_default_tuning_settings()) {
 80040e2:	f7ff fb91 	bl	8003808 <load_default_tuning_settings>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f083 0301 	eor.w	r3, r3, #1
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <static_init+0x2c>
        return false;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e015      	b.n	8004122 <static_init+0x58>
    }

    if (!configure_interrupt()) {
 80040f6:	f7ff ff98 	bl	800402a <configure_interrupt>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f083 0301 	eor.w	r3, r3, #1
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <static_init+0x40>
        return false;
 8004106:	2300      	movs	r3, #0
 8004108:	e00b      	b.n	8004122 <static_init+0x58>
    }

    if (!set_sequence_steps_enabled(RANGE_SEQUENCE_STEP_DSS +
 800410a:	20e8      	movs	r0, #232	@ 0xe8
 800410c:	f7ff ffce 	bl	80040ac <set_sequence_steps_enabled>
 8004110:	4603      	mov	r3, r0
 8004112:	f083 0301 	eor.w	r3, r3, #1
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <static_init+0x56>
                                    RANGE_SEQUENCE_STEP_PRE_RANGE +
                                    RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
        return false;
 800411c:	2300      	movs	r3, #0
 800411e:	e000      	b.n	8004122 <static_init+0x58>
    }

    return true;
 8004120:	2301      	movs	r3, #1
}
 8004122:	4618      	mov	r0, r3
 8004124:	bd80      	pop	{r7, pc}

08004126 <perform_single_ref_calibration>:

static bool perform_single_ref_calibration(calibration_type_t calib_type)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	4603      	mov	r3, r0
 800412e:	71fb      	strb	r3, [r7, #7]
    uint8_t sysrange_start = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	73fb      	strb	r3, [r7, #15]
    uint8_t sequence_config = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	73bb      	strb	r3, [r7, #14]
    switch (calib_type)
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <perform_single_ref_calibration+0x1e>
 800413e:	2b01      	cmp	r3, #1
 8004140:	d005      	beq.n	800414e <perform_single_ref_calibration+0x28>
 8004142:	e009      	b.n	8004158 <perform_single_ref_calibration+0x32>
    {
    case CALIBRATION_TYPE_VHV:
        sequence_config = 0x01;
 8004144:	2301      	movs	r3, #1
 8004146:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x40;
 8004148:	2341      	movs	r3, #65	@ 0x41
 800414a:	73fb      	strb	r3, [r7, #15]
        break;
 800414c:	e004      	b.n	8004158 <perform_single_ref_calibration+0x32>
    case CALIBRATION_TYPE_PHASE:
        sequence_config = 0x02;
 800414e:	2302      	movs	r3, #2
 8004150:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x00;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
        break;
 8004156:	bf00      	nop
    }
    if (!i2c_write_addr8_data8(REG_SYSTEM_SEQUENCE_CONFIG, sequence_config)) {
 8004158:	7bbb      	ldrb	r3, [r7, #14]
 800415a:	4619      	mov	r1, r3
 800415c:	2001      	movs	r0, #1
 800415e:	f7fe ff15 	bl	8002f8c <i2c_write_addr8_data8>
 8004162:	4603      	mov	r3, r0
 8004164:	f083 0301 	eor.w	r3, r3, #1
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <perform_single_ref_calibration+0x4c>
        return false;
 800416e:	2300      	movs	r3, #0
 8004170:	e041      	b.n	80041f6 <perform_single_ref_calibration+0xd0>
    }
    if (!i2c_write_addr8_data8(REG_SYSRANGE_START, sysrange_start)) {
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	4619      	mov	r1, r3
 8004176:	2000      	movs	r0, #0
 8004178:	f7fe ff08 	bl	8002f8c <i2c_write_addr8_data8>
 800417c:	4603      	mov	r3, r0
 800417e:	f083 0301 	eor.w	r3, r3, #1
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <perform_single_ref_calibration+0x66>
        return false;
 8004188:	2300      	movs	r3, #0
 800418a:	e034      	b.n	80041f6 <perform_single_ref_calibration+0xd0>
    }
    /* Wait for interrupt */
    uint8_t interrupt_status = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	733b      	strb	r3, [r7, #12]
    bool success = false;
 8004190:	2300      	movs	r3, #0
 8004192:	737b      	strb	r3, [r7, #13]
    do {
        success = i2c_read_addr8_data8(REG_RESULT_INTERRUPT_STATUS, &interrupt_status);
 8004194:	f107 030c 	add.w	r3, r7, #12
 8004198:	4619      	mov	r1, r3
 800419a:	2013      	movs	r0, #19
 800419c:	f7fe fe7a 	bl	8002e94 <i2c_read_addr8_data8>
 80041a0:	4603      	mov	r3, r0
 80041a2:	737b      	strb	r3, [r7, #13]
    } while (success && ((interrupt_status & 0x07) == 0));
 80041a4:	7b7b      	ldrb	r3, [r7, #13]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d004      	beq.n	80041b4 <perform_single_ref_calibration+0x8e>
 80041aa:	7b3b      	ldrb	r3, [r7, #12]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0ef      	beq.n	8004194 <perform_single_ref_calibration+0x6e>
    if (!success) {
 80041b4:	7b7b      	ldrb	r3, [r7, #13]
 80041b6:	f083 0301 	eor.w	r3, r3, #1
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <perform_single_ref_calibration+0x9e>
        return false;
 80041c0:	2300      	movs	r3, #0
 80041c2:	e018      	b.n	80041f6 <perform_single_ref_calibration+0xd0>
    }
    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CLEAR, 0x01)) {
 80041c4:	2101      	movs	r1, #1
 80041c6:	200b      	movs	r0, #11
 80041c8:	f7fe fee0 	bl	8002f8c <i2c_write_addr8_data8>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f083 0301 	eor.w	r3, r3, #1
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <perform_single_ref_calibration+0xb6>
        return false;
 80041d8:	2300      	movs	r3, #0
 80041da:	e00c      	b.n	80041f6 <perform_single_ref_calibration+0xd0>
    }

    if (!i2c_write_addr8_data8(REG_SYSRANGE_START, 0x00)) {
 80041dc:	2100      	movs	r1, #0
 80041de:	2000      	movs	r0, #0
 80041e0:	f7fe fed4 	bl	8002f8c <i2c_write_addr8_data8>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f083 0301 	eor.w	r3, r3, #1
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <perform_single_ref_calibration+0xce>
        return false;
 80041f0:	2300      	movs	r3, #0
 80041f2:	e000      	b.n	80041f6 <perform_single_ref_calibration+0xd0>
    }
    return true;
 80041f4:	2301      	movs	r3, #1
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <perform_ref_calibration>:
/**
 * Temperature calibration needs to be run again if the temperature changes by
 * more than 8 degrees according to the datasheet.
 */
static bool perform_ref_calibration()
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	af00      	add	r7, sp, #0
    if (!perform_single_ref_calibration(CALIBRATION_TYPE_VHV)) {
 8004202:	2000      	movs	r0, #0
 8004204:	f7ff ff8f 	bl	8004126 <perform_single_ref_calibration>
 8004208:	4603      	mov	r3, r0
 800420a:	f083 0301 	eor.w	r3, r3, #1
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <perform_ref_calibration+0x1a>
        return false;
 8004214:	2300      	movs	r3, #0
 8004216:	e016      	b.n	8004246 <perform_ref_calibration+0x48>
    }
    if (!perform_single_ref_calibration(CALIBRATION_TYPE_PHASE)) {
 8004218:	2001      	movs	r0, #1
 800421a:	f7ff ff84 	bl	8004126 <perform_single_ref_calibration>
 800421e:	4603      	mov	r3, r0
 8004220:	f083 0301 	eor.w	r3, r3, #1
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <perform_ref_calibration+0x30>
        return false;
 800422a:	2300      	movs	r3, #0
 800422c:	e00b      	b.n	8004246 <perform_ref_calibration+0x48>
    }
    /* Restore sequence steps enabled */
    if (!set_sequence_steps_enabled(RANGE_SEQUENCE_STEP_DSS +
 800422e:	20e8      	movs	r0, #232	@ 0xe8
 8004230:	f7ff ff3c 	bl	80040ac <set_sequence_steps_enabled>
 8004234:	4603      	mov	r3, r0
 8004236:	f083 0301 	eor.w	r3, r3, #1
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <perform_ref_calibration+0x46>
                                    RANGE_SEQUENCE_STEP_PRE_RANGE +
                                    RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
        return false;
 8004240:	2300      	movs	r3, #0
 8004242:	e000      	b.n	8004246 <perform_ref_calibration+0x48>
    }
    return true;
 8004244:	2301      	movs	r3, #1
}
 8004246:	4618      	mov	r0, r3
 8004248:	bd80      	pop	{r7, pc}

0800424a <configure_gpio>:
 * hardware standby after this function is called.
 *
 * NOTE: The pins are hard-coded to P1.0, P1.1, and P1.2.
 **/
static void configure_gpio()
{
 800424a:	b480      	push	{r7}
 800424c:	af00      	add	r7, sp, #0

}
 800424e:	bf00      	nop
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <init_address>:

/* Sets the address of a single VL53L0X sensor.
 * This functions assumes that all non-configured VL53L0X are still
 * in hardware standby. */
static bool init_address(vl53l0x_idx_t idx)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	71fb      	strb	r3, [r7, #7]
    //set_hardware_standby(idx, false);
    selectTCAChannel(vl53l0x_infos[idx].mux_channel);
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	4a0c      	ldr	r2, [pc, #48]	@ (8004298 <init_address+0x40>)
 8004266:	5cd3      	ldrb	r3, [r2, r3]
 8004268:	4618      	mov	r0, r3
 800426a:	f7fe fc07 	bl	8002a7c <selectTCAChannel>
    /* The datasheet doesn't say how long we must wait to leave hw standby,
     * but using the same delay as vl6180x seems to work fine. */
    HAL_Delay(1);
 800426e:	2001      	movs	r0, #1
 8004270:	f000 fa10 	bl	8004694 <HAL_Delay>

    if (!device_is_booted()) {
 8004274:	f7fe ff92 	bl	800319c <device_is_booted>
 8004278:	4603      	mov	r3, r0
 800427a:	f083 0301 	eor.w	r3, r3, #1
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d004      	beq.n	800428e <init_address+0x36>
        my_printf("device is not booted\n");
 8004284:	4805      	ldr	r0, [pc, #20]	@ (800429c <init_address+0x44>)
 8004286:	f7fe fddd 	bl	8002e44 <my_printf>
        return false;
 800428a:	2300      	movs	r3, #0
 800428c:	e000      	b.n	8004290 <init_address+0x38>
    }

    return true;
 800428e:	2301      	movs	r3, #1
}
 8004290:	4618      	mov	r0, r3
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	08010b74 	.word	0x08010b74
 800429c:	08010570 	.word	0x08010570

080042a0 <init_addresses>:
/**
 * Initializes the sensors by putting them in hw standby and then
 * waking them up one-by-one as described in AN4846.
 */
static bool init_addresses()
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
    /* Puts all sensors in hardware standby */
    configure_gpio();
 80042a4:	f7ff ffd1 	bl	800424a <configure_gpio>

    /* Wake each sensor up one by one and set a unique address for each one */
    if (!init_address(VL53L0X_IDX_FIRST)) {
 80042a8:	2000      	movs	r0, #0
 80042aa:	f7ff ffd5 	bl	8004258 <init_address>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f083 0301 	eor.w	r3, r3, #1
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d004      	beq.n	80042c4 <init_addresses+0x24>
        my_printf("fail init address first sensor\r\n");
 80042ba:	4809      	ldr	r0, [pc, #36]	@ (80042e0 <init_addresses+0x40>)
 80042bc:	f7fe fdc2 	bl	8002e44 <my_printf>
        return false;
 80042c0:	2300      	movs	r3, #0
 80042c2:	e00b      	b.n	80042dc <init_addresses+0x3c>
    }
    if (!init_address(VL53L0X_IDX_SECOND)) {
 80042c4:	2001      	movs	r0, #1
 80042c6:	f7ff ffc7 	bl	8004258 <init_address>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f083 0301 	eor.w	r3, r3, #1
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <init_addresses+0x3a>
        return false;
 80042d6:	2300      	movs	r3, #0
 80042d8:	e000      	b.n	80042dc <init_addresses+0x3c>
    }
    return true;
 80042da:	2301      	movs	r3, #1
}
 80042dc:	4618      	mov	r0, r3
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	08010588 	.word	0x08010588

080042e4 <init_config>:

static bool init_config(vl53l0x_idx_t idx)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	71fb      	strb	r3, [r7, #7]
    //i2c_set_slave_address(vl53l0x_infos[idx].addr);
	selectTCAChannel(vl53l0x_infos[idx].mux_channel);
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	4a13      	ldr	r2, [pc, #76]	@ (8004340 <init_config+0x5c>)
 80042f2:	5cd3      	ldrb	r3, [r2, r3]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fe fbc1 	bl	8002a7c <selectTCAChannel>

    if (!data_init()) {
 80042fa:	f7fe ff7f 	bl	80031fc <data_init>
 80042fe:	4603      	mov	r3, r0
 8004300:	f083 0301 	eor.w	r3, r3, #1
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <init_config+0x2a>
        return false;
 800430a:	2300      	movs	r3, #0
 800430c:	e014      	b.n	8004338 <init_config+0x54>
    }
    if (!static_init()) {
 800430e:	f7ff fedc 	bl	80040ca <static_init>
 8004312:	4603      	mov	r3, r0
 8004314:	f083 0301 	eor.w	r3, r3, #1
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <init_config+0x3e>
        return false;
 800431e:	2300      	movs	r3, #0
 8004320:	e00a      	b.n	8004338 <init_config+0x54>
    }
    if (!perform_ref_calibration()) {
 8004322:	f7ff ff6c 	bl	80041fe <perform_ref_calibration>
 8004326:	4603      	mov	r3, r0
 8004328:	f083 0301 	eor.w	r3, r3, #1
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <init_config+0x52>
        return false;
 8004332:	2300      	movs	r3, #0
 8004334:	e000      	b.n	8004338 <init_config+0x54>
    }
    return true;
 8004336:	2301      	movs	r3, #1
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	08010b74 	.word	0x08010b74

08004344 <vl53l0x_init>:

bool vl53l0x_init()
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
    if (!init_addresses()) {
 8004348:	f7ff ffaa 	bl	80042a0 <init_addresses>
 800434c:	4603      	mov	r3, r0
 800434e:	f083 0301 	eor.w	r3, r3, #1
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d004      	beq.n	8004362 <vl53l0x_init+0x1e>
        my_printf("fail init address\r\n");
 8004358:	4810      	ldr	r0, [pc, #64]	@ (800439c <vl53l0x_init+0x58>)
 800435a:	f7fe fd73 	bl	8002e44 <my_printf>
        return false;
 800435e:	2300      	movs	r3, #0
 8004360:	e019      	b.n	8004396 <vl53l0x_init+0x52>
    }
    if (!init_config(VL53L0X_IDX_FIRST)) {
 8004362:	2000      	movs	r0, #0
 8004364:	f7ff ffbe 	bl	80042e4 <init_config>
 8004368:	4603      	mov	r3, r0
 800436a:	f083 0301 	eor.w	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d004      	beq.n	800437e <vl53l0x_init+0x3a>
        my_printf("fail init first\r\n");
 8004374:	480a      	ldr	r0, [pc, #40]	@ (80043a0 <vl53l0x_init+0x5c>)
 8004376:	f7fe fd65 	bl	8002e44 <my_printf>
        return false;
 800437a:	2300      	movs	r3, #0
 800437c:	e00b      	b.n	8004396 <vl53l0x_init+0x52>
    }
    if (!init_config(VL53L0X_IDX_SECOND)) {
 800437e:	2001      	movs	r0, #1
 8004380:	f7ff ffb0 	bl	80042e4 <init_config>
 8004384:	4603      	mov	r3, r0
 8004386:	f083 0301 	eor.w	r3, r3, #1
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <vl53l0x_init+0x50>
        return false;
 8004390:	2300      	movs	r3, #0
 8004392:	e000      	b.n	8004396 <vl53l0x_init+0x52>
    }
    return true;
 8004394:	2301      	movs	r3, #1
}
 8004396:	4618      	mov	r0, r3
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	080105ac 	.word	0x080105ac
 80043a0:	080105c0 	.word	0x080105c0

080043a4 <vl53l0x_read_range_single>:

bool vl53l0x_read_range_single(vl53l0x_idx_t idx, uint16_t *range)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	6039      	str	r1, [r7, #0]
 80043ae:	71fb      	strb	r3, [r7, #7]
	selectTCAChannel(vl53l0x_infos[idx].mux_channel);
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	4a68      	ldr	r2, [pc, #416]	@ (8004554 <vl53l0x_read_range_single+0x1b0>)
 80043b4:	5cd3      	ldrb	r3, [r2, r3]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fe fb60 	bl	8002a7c <selectTCAChannel>

    //i2c_set_slave_address(vl53l0x_infos[idx].addr);
    bool success = i2c_write_addr8_data8(0x80, 0x01);
 80043bc:	2101      	movs	r1, #1
 80043be:	2080      	movs	r0, #128	@ 0x80
 80043c0:	f7fe fde4 	bl	8002f8c <i2c_write_addr8_data8>
 80043c4:	4603      	mov	r3, r0
 80043c6:	73fb      	strb	r3, [r7, #15]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 80043c8:	2101      	movs	r1, #1
 80043ca:	20ff      	movs	r0, #255	@ 0xff
 80043cc:	f7fe fdde 	bl	8002f8c <i2c_write_addr8_data8>
 80043d0:	4603      	mov	r3, r0
 80043d2:	461a      	mov	r2, r3
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf14      	ite	ne
 80043dc:	2301      	movne	r3, #1
 80043de:	2300      	moveq	r3, #0
 80043e0:	73fb      	strb	r3, [r7, #15]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 80043e2:	2100      	movs	r1, #0
 80043e4:	2000      	movs	r0, #0
 80043e6:	f7fe fdd1 	bl	8002f8c <i2c_write_addr8_data8>
 80043ea:	4603      	mov	r3, r0
 80043ec:	461a      	mov	r2, r3
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bf14      	ite	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	2300      	moveq	r3, #0
 80043fa:	73fb      	strb	r3, [r7, #15]
    success &= i2c_write_addr8_data8(0x91, stop_variable);
 80043fc:	4b56      	ldr	r3, [pc, #344]	@ (8004558 <vl53l0x_read_range_single+0x1b4>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	4619      	mov	r1, r3
 8004402:	2091      	movs	r0, #145	@ 0x91
 8004404:	f7fe fdc2 	bl	8002f8c <i2c_write_addr8_data8>
 8004408:	4603      	mov	r3, r0
 800440a:	461a      	mov	r2, r3
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	4013      	ands	r3, r2
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf14      	ite	ne
 8004414:	2301      	movne	r3, #1
 8004416:	2300      	moveq	r3, #0
 8004418:	73fb      	strb	r3, [r7, #15]
    success &= i2c_write_addr8_data8(0x00, 0x01);
 800441a:	2101      	movs	r1, #1
 800441c:	2000      	movs	r0, #0
 800441e:	f7fe fdb5 	bl	8002f8c <i2c_write_addr8_data8>
 8004422:	4603      	mov	r3, r0
 8004424:	461a      	mov	r2, r3
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	4013      	ands	r3, r2
 800442a:	2b00      	cmp	r3, #0
 800442c:	bf14      	ite	ne
 800442e:	2301      	movne	r3, #1
 8004430:	2300      	moveq	r3, #0
 8004432:	73fb      	strb	r3, [r7, #15]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8004434:	2100      	movs	r1, #0
 8004436:	20ff      	movs	r0, #255	@ 0xff
 8004438:	f7fe fda8 	bl	8002f8c <i2c_write_addr8_data8>
 800443c:	4603      	mov	r3, r0
 800443e:	461a      	mov	r2, r3
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	73fb      	strb	r3, [r7, #15]
    success &= i2c_write_addr8_data8(0x80, 0x00);
 800444e:	2100      	movs	r1, #0
 8004450:	2080      	movs	r0, #128	@ 0x80
 8004452:	f7fe fd9b 	bl	8002f8c <i2c_write_addr8_data8>
 8004456:	4603      	mov	r3, r0
 8004458:	461a      	mov	r2, r3
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	bf14      	ite	ne
 8004462:	2301      	movne	r3, #1
 8004464:	2300      	moveq	r3, #0
 8004466:	73fb      	strb	r3, [r7, #15]
    if (!success) {
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	f083 0301 	eor.w	r3, r3, #1
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <vl53l0x_read_range_single+0xd4>
        return false;
 8004474:	2300      	movs	r3, #0
 8004476:	e068      	b.n	800454a <vl53l0x_read_range_single+0x1a6>
    }

    if (!i2c_write_addr8_data8(REG_SYSRANGE_START, 0x01)) {
 8004478:	2101      	movs	r1, #1
 800447a:	2000      	movs	r0, #0
 800447c:	f7fe fd86 	bl	8002f8c <i2c_write_addr8_data8>
 8004480:	4603      	mov	r3, r0
 8004482:	f083 0301 	eor.w	r3, r3, #1
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <vl53l0x_read_range_single+0xec>
        return false;
 800448c:	2300      	movs	r3, #0
 800448e:	e05c      	b.n	800454a <vl53l0x_read_range_single+0x1a6>
    }

    uint8_t sysrange_start = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	73bb      	strb	r3, [r7, #14]
    do {
        success = i2c_read_addr8_data8(REG_SYSRANGE_START, &sysrange_start);
 8004494:	f107 030e 	add.w	r3, r7, #14
 8004498:	4619      	mov	r1, r3
 800449a:	2000      	movs	r0, #0
 800449c:	f7fe fcfa 	bl	8002e94 <i2c_read_addr8_data8>
 80044a0:	4603      	mov	r3, r0
 80044a2:	73fb      	strb	r3, [r7, #15]
    } while (success && (sysrange_start & 0x01));
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d004      	beq.n	80044b4 <vl53l0x_read_range_single+0x110>
 80044aa:	7bbb      	ldrb	r3, [r7, #14]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1ef      	bne.n	8004494 <vl53l0x_read_range_single+0xf0>
    if (!success) {
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	f083 0301 	eor.w	r3, r3, #1
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <vl53l0x_read_range_single+0x120>
        return false;
 80044c0:	2300      	movs	r3, #0
 80044c2:	e042      	b.n	800454a <vl53l0x_read_range_single+0x1a6>
    }

    uint8_t interrupt_status = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	737b      	strb	r3, [r7, #13]
    do {
        success = i2c_read_addr8_data8(REG_RESULT_INTERRUPT_STATUS, &interrupt_status);
 80044c8:	f107 030d 	add.w	r3, r7, #13
 80044cc:	4619      	mov	r1, r3
 80044ce:	2013      	movs	r0, #19
 80044d0:	f7fe fce0 	bl	8002e94 <i2c_read_addr8_data8>
 80044d4:	4603      	mov	r3, r0
 80044d6:	73fb      	strb	r3, [r7, #15]
    } while (success && ((interrupt_status & 0x07) == 0));
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d004      	beq.n	80044e8 <vl53l0x_read_range_single+0x144>
 80044de:	7b7b      	ldrb	r3, [r7, #13]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0ef      	beq.n	80044c8 <vl53l0x_read_range_single+0x124>
    if (!success) {
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	f083 0301 	eor.w	r3, r3, #1
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <vl53l0x_read_range_single+0x154>
        return false;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e028      	b.n	800454a <vl53l0x_read_range_single+0x1a6>
    }

    if (!i2c_read_addr8_data16(REG_RESULT_RANGE_STATUS + 10, range)) {
 80044f8:	6839      	ldr	r1, [r7, #0]
 80044fa:	201e      	movs	r0, #30
 80044fc:	f7fe fd02 	bl	8002f04 <i2c_read_addr8_data16>
 8004500:	4603      	mov	r3, r0
 8004502:	f083 0301 	eor.w	r3, r3, #1
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <vl53l0x_read_range_single+0x16c>
        return false;
 800450c:	2300      	movs	r3, #0
 800450e:	e01c      	b.n	800454a <vl53l0x_read_range_single+0x1a6>
    }

    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CLEAR, 0x01)) {
 8004510:	2101      	movs	r1, #1
 8004512:	200b      	movs	r0, #11
 8004514:	f7fe fd3a 	bl	8002f8c <i2c_write_addr8_data8>
 8004518:	4603      	mov	r3, r0
 800451a:	f083 0301 	eor.w	r3, r3, #1
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <vl53l0x_read_range_single+0x184>
        return false;
 8004524:	2300      	movs	r3, #0
 8004526:	e010      	b.n	800454a <vl53l0x_read_range_single+0x1a6>
    }

    /* 8190 or 8191 may be returned when obstacle is out of range. */
    if (*range == 8190 || *range == 8191) {
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	f641 72fe 	movw	r2, #8190	@ 0x1ffe
 8004530:	4293      	cmp	r3, r2
 8004532:	d005      	beq.n	8004540 <vl53l0x_read_range_single+0x19c>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 800453c:	4293      	cmp	r3, r2
 800453e:	d103      	bne.n	8004548 <vl53l0x_read_range_single+0x1a4>
        *range = VL53L0X_OUT_OF_RANGE;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	f641 72fe 	movw	r2, #8190	@ 0x1ffe
 8004546:	801a      	strh	r2, [r3, #0]
    }

    return true;
 8004548:	2301      	movs	r3, #1
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	08010b74 	.word	0x08010b74
 8004558:	200008b7 	.word	0x200008b7

0800455c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800455c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004594 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004560:	f7fe fa7a 	bl	8002a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004564:	480c      	ldr	r0, [pc, #48]	@ (8004598 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004566:	490d      	ldr	r1, [pc, #52]	@ (800459c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004568:	4a0d      	ldr	r2, [pc, #52]	@ (80045a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800456a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800456c:	e002      	b.n	8004574 <LoopCopyDataInit>

0800456e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800456e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004572:	3304      	adds	r3, #4

08004574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004578:	d3f9      	bcc.n	800456e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800457a:	4a0a      	ldr	r2, [pc, #40]	@ (80045a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800457c:	4c0a      	ldr	r4, [pc, #40]	@ (80045a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800457e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004580:	e001      	b.n	8004586 <LoopFillZerobss>

08004582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004584:	3204      	adds	r2, #4

08004586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004588:	d3fb      	bcc.n	8004582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800458a:	f009 fdad 	bl	800e0e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800458e:	f7fd f9c9 	bl	8001924 <main>
  bx  lr    
 8004592:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004594:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800459c:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 80045a0:	08010efc 	.word	0x08010efc
  ldr r2, =_sbss
 80045a4:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 80045a8:	200025ec 	.word	0x200025ec

080045ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045ac:	e7fe      	b.n	80045ac <ADC_IRQHandler>
	...

080045b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045b4:	4b0e      	ldr	r3, [pc, #56]	@ (80045f0 <HAL_Init+0x40>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a0d      	ldr	r2, [pc, #52]	@ (80045f0 <HAL_Init+0x40>)
 80045ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045c0:	4b0b      	ldr	r3, [pc, #44]	@ (80045f0 <HAL_Init+0x40>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a0a      	ldr	r2, [pc, #40]	@ (80045f0 <HAL_Init+0x40>)
 80045c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045cc:	4b08      	ldr	r3, [pc, #32]	@ (80045f0 <HAL_Init+0x40>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a07      	ldr	r2, [pc, #28]	@ (80045f0 <HAL_Init+0x40>)
 80045d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045d8:	2003      	movs	r0, #3
 80045da:	f000 f94f 	bl	800487c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045de:	200f      	movs	r0, #15
 80045e0:	f000 f808 	bl	80045f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045e4:	f7fd ffa8 	bl	8002538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40023c00 	.word	0x40023c00

080045f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045fc:	4b12      	ldr	r3, [pc, #72]	@ (8004648 <HAL_InitTick+0x54>)
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	4b12      	ldr	r3, [pc, #72]	@ (800464c <HAL_InitTick+0x58>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	4619      	mov	r1, r3
 8004606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800460a:	fbb3 f3f1 	udiv	r3, r3, r1
 800460e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004612:	4618      	mov	r0, r3
 8004614:	f000 f967 	bl	80048e6 <HAL_SYSTICK_Config>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e00e      	b.n	8004640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b0f      	cmp	r3, #15
 8004626:	d80a      	bhi.n	800463e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004628:	2200      	movs	r2, #0
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004630:	f000 f92f 	bl	8004892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004634:	4a06      	ldr	r2, [pc, #24]	@ (8004650 <HAL_InitTick+0x5c>)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	e000      	b.n	8004640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
}
 8004640:	4618      	mov	r0, r3
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000018 	.word	0x20000018
 800464c:	20000020 	.word	0x20000020
 8004650:	2000001c 	.word	0x2000001c

08004654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004658:	4b06      	ldr	r3, [pc, #24]	@ (8004674 <HAL_IncTick+0x20>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	4b06      	ldr	r3, [pc, #24]	@ (8004678 <HAL_IncTick+0x24>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4413      	add	r3, r2
 8004664:	4a04      	ldr	r2, [pc, #16]	@ (8004678 <HAL_IncTick+0x24>)
 8004666:	6013      	str	r3, [r2, #0]
}
 8004668:	bf00      	nop
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20000020 	.word	0x20000020
 8004678:	200008b8 	.word	0x200008b8

0800467c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  return uwTick;
 8004680:	4b03      	ldr	r3, [pc, #12]	@ (8004690 <HAL_GetTick+0x14>)
 8004682:	681b      	ldr	r3, [r3, #0]
}
 8004684:	4618      	mov	r0, r3
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	200008b8 	.word	0x200008b8

08004694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800469c:	f7ff ffee 	bl	800467c <HAL_GetTick>
 80046a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046ac:	d005      	beq.n	80046ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046ae:	4b0a      	ldr	r3, [pc, #40]	@ (80046d8 <HAL_Delay+0x44>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046ba:	bf00      	nop
 80046bc:	f7ff ffde 	bl	800467c <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d8f7      	bhi.n	80046bc <HAL_Delay+0x28>
  {
  }
}
 80046cc:	bf00      	nop
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000020 	.word	0x20000020

080046dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <__NVIC_SetPriorityGrouping+0x44>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046f8:	4013      	ands	r3, r2
 80046fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004704:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800470c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800470e:	4a04      	ldr	r2, [pc, #16]	@ (8004720 <__NVIC_SetPriorityGrouping+0x44>)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	60d3      	str	r3, [r2, #12]
}
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	e000ed00 	.word	0xe000ed00

08004724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004728:	4b04      	ldr	r3, [pc, #16]	@ (800473c <__NVIC_GetPriorityGrouping+0x18>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	0a1b      	lsrs	r3, r3, #8
 800472e:	f003 0307 	and.w	r3, r3, #7
}
 8004732:	4618      	mov	r0, r3
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	e000ed00 	.word	0xe000ed00

08004740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800474a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800474e:	2b00      	cmp	r3, #0
 8004750:	db0b      	blt.n	800476a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	f003 021f 	and.w	r2, r3, #31
 8004758:	4907      	ldr	r1, [pc, #28]	@ (8004778 <__NVIC_EnableIRQ+0x38>)
 800475a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	2001      	movs	r0, #1
 8004762:	fa00 f202 	lsl.w	r2, r0, r2
 8004766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	e000e100 	.word	0xe000e100

0800477c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	6039      	str	r1, [r7, #0]
 8004786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478c:	2b00      	cmp	r3, #0
 800478e:	db0a      	blt.n	80047a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	b2da      	uxtb	r2, r3
 8004794:	490c      	ldr	r1, [pc, #48]	@ (80047c8 <__NVIC_SetPriority+0x4c>)
 8004796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479a:	0112      	lsls	r2, r2, #4
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	440b      	add	r3, r1
 80047a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047a4:	e00a      	b.n	80047bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	4908      	ldr	r1, [pc, #32]	@ (80047cc <__NVIC_SetPriority+0x50>)
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	3b04      	subs	r3, #4
 80047b4:	0112      	lsls	r2, r2, #4
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	440b      	add	r3, r1
 80047ba:	761a      	strb	r2, [r3, #24]
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	e000e100 	.word	0xe000e100
 80047cc:	e000ed00 	.word	0xe000ed00

080047d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b089      	sub	sp, #36	@ 0x24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f1c3 0307 	rsb	r3, r3, #7
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	bf28      	it	cs
 80047ee:	2304      	movcs	r3, #4
 80047f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	3304      	adds	r3, #4
 80047f6:	2b06      	cmp	r3, #6
 80047f8:	d902      	bls.n	8004800 <NVIC_EncodePriority+0x30>
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	3b03      	subs	r3, #3
 80047fe:	e000      	b.n	8004802 <NVIC_EncodePriority+0x32>
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004804:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43da      	mvns	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	401a      	ands	r2, r3
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004818:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	fa01 f303 	lsl.w	r3, r1, r3
 8004822:	43d9      	mvns	r1, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004828:	4313      	orrs	r3, r2
         );
}
 800482a:	4618      	mov	r0, r3
 800482c:	3724      	adds	r7, #36	@ 0x24
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3b01      	subs	r3, #1
 8004844:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004848:	d301      	bcc.n	800484e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800484a:	2301      	movs	r3, #1
 800484c:	e00f      	b.n	800486e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800484e:	4a0a      	ldr	r2, [pc, #40]	@ (8004878 <SysTick_Config+0x40>)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3b01      	subs	r3, #1
 8004854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004856:	210f      	movs	r1, #15
 8004858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800485c:	f7ff ff8e 	bl	800477c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004860:	4b05      	ldr	r3, [pc, #20]	@ (8004878 <SysTick_Config+0x40>)
 8004862:	2200      	movs	r2, #0
 8004864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004866:	4b04      	ldr	r3, [pc, #16]	@ (8004878 <SysTick_Config+0x40>)
 8004868:	2207      	movs	r2, #7
 800486a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	e000e010 	.word	0xe000e010

0800487c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff ff29 	bl	80046dc <__NVIC_SetPriorityGrouping>
}
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004892:	b580      	push	{r7, lr}
 8004894:	b086      	sub	sp, #24
 8004896:	af00      	add	r7, sp, #0
 8004898:	4603      	mov	r3, r0
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
 800489e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048a4:	f7ff ff3e 	bl	8004724 <__NVIC_GetPriorityGrouping>
 80048a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	6978      	ldr	r0, [r7, #20]
 80048b0:	f7ff ff8e 	bl	80047d0 <NVIC_EncodePriority>
 80048b4:	4602      	mov	r2, r0
 80048b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ba:	4611      	mov	r1, r2
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff ff5d 	bl	800477c <__NVIC_SetPriority>
}
 80048c2:	bf00      	nop
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	4603      	mov	r3, r0
 80048d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff ff31 	bl	8004740 <__NVIC_EnableIRQ>
}
 80048de:	bf00      	nop
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b082      	sub	sp, #8
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff ffa2 	bl	8004838 <SysTick_Config>
 80048f4:	4603      	mov	r3, r0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004900:	b480      	push	{r7}
 8004902:	b089      	sub	sp, #36	@ 0x24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800490e:	2300      	movs	r3, #0
 8004910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004912:	2300      	movs	r3, #0
 8004914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	e159      	b.n	8004bd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800491c:	2201      	movs	r2, #1
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	4013      	ands	r3, r2
 800492e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	429a      	cmp	r2, r3
 8004936:	f040 8148 	bne.w	8004bca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b01      	cmp	r3, #1
 8004944:	d005      	beq.n	8004952 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800494e:	2b02      	cmp	r3, #2
 8004950:	d130      	bne.n	80049b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	2203      	movs	r2, #3
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	43db      	mvns	r3, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4013      	ands	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	4313      	orrs	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004988:	2201      	movs	r2, #1
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	43db      	mvns	r3, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4013      	ands	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	f003 0201 	and.w	r2, r3, #1
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d017      	beq.n	80049f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	2203      	movs	r2, #3
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	43db      	mvns	r3, r3
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	4013      	ands	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d123      	bne.n	8004a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	08da      	lsrs	r2, r3, #3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3208      	adds	r2, #8
 8004a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	220f      	movs	r2, #15
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	08da      	lsrs	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3208      	adds	r2, #8
 8004a3e:	69b9      	ldr	r1, [r7, #24]
 8004a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	2203      	movs	r2, #3
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 0203 	and.w	r2, r3, #3
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 80a2 	beq.w	8004bca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	4b57      	ldr	r3, [pc, #348]	@ (8004be8 <HAL_GPIO_Init+0x2e8>)
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8e:	4a56      	ldr	r2, [pc, #344]	@ (8004be8 <HAL_GPIO_Init+0x2e8>)
 8004a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a96:	4b54      	ldr	r3, [pc, #336]	@ (8004be8 <HAL_GPIO_Init+0x2e8>)
 8004a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004aa2:	4a52      	ldr	r2, [pc, #328]	@ (8004bec <HAL_GPIO_Init+0x2ec>)
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	089b      	lsrs	r3, r3, #2
 8004aa8:	3302      	adds	r3, #2
 8004aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	220f      	movs	r2, #15
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a49      	ldr	r2, [pc, #292]	@ (8004bf0 <HAL_GPIO_Init+0x2f0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d019      	beq.n	8004b02 <HAL_GPIO_Init+0x202>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a48      	ldr	r2, [pc, #288]	@ (8004bf4 <HAL_GPIO_Init+0x2f4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d013      	beq.n	8004afe <HAL_GPIO_Init+0x1fe>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a47      	ldr	r2, [pc, #284]	@ (8004bf8 <HAL_GPIO_Init+0x2f8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00d      	beq.n	8004afa <HAL_GPIO_Init+0x1fa>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a46      	ldr	r2, [pc, #280]	@ (8004bfc <HAL_GPIO_Init+0x2fc>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d007      	beq.n	8004af6 <HAL_GPIO_Init+0x1f6>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a45      	ldr	r2, [pc, #276]	@ (8004c00 <HAL_GPIO_Init+0x300>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d101      	bne.n	8004af2 <HAL_GPIO_Init+0x1f2>
 8004aee:	2304      	movs	r3, #4
 8004af0:	e008      	b.n	8004b04 <HAL_GPIO_Init+0x204>
 8004af2:	2307      	movs	r3, #7
 8004af4:	e006      	b.n	8004b04 <HAL_GPIO_Init+0x204>
 8004af6:	2303      	movs	r3, #3
 8004af8:	e004      	b.n	8004b04 <HAL_GPIO_Init+0x204>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e002      	b.n	8004b04 <HAL_GPIO_Init+0x204>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <HAL_GPIO_Init+0x204>
 8004b02:	2300      	movs	r3, #0
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	f002 0203 	and.w	r2, r2, #3
 8004b0a:	0092      	lsls	r2, r2, #2
 8004b0c:	4093      	lsls	r3, r2
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b14:	4935      	ldr	r1, [pc, #212]	@ (8004bec <HAL_GPIO_Init+0x2ec>)
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	089b      	lsrs	r3, r3, #2
 8004b1a:	3302      	adds	r3, #2
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b22:	4b38      	ldr	r3, [pc, #224]	@ (8004c04 <HAL_GPIO_Init+0x304>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b46:	4a2f      	ldr	r2, [pc, #188]	@ (8004c04 <HAL_GPIO_Init+0x304>)
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8004c04 <HAL_GPIO_Init+0x304>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	43db      	mvns	r3, r3
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b70:	4a24      	ldr	r2, [pc, #144]	@ (8004c04 <HAL_GPIO_Init+0x304>)
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b76:	4b23      	ldr	r3, [pc, #140]	@ (8004c04 <HAL_GPIO_Init+0x304>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4013      	ands	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8004c04 <HAL_GPIO_Init+0x304>)
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ba0:	4b18      	ldr	r3, [pc, #96]	@ (8004c04 <HAL_GPIO_Init+0x304>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	4013      	ands	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8004c04 <HAL_GPIO_Init+0x304>)
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	61fb      	str	r3, [r7, #28]
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b0f      	cmp	r3, #15
 8004bd4:	f67f aea2 	bls.w	800491c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop
 8004bdc:	3724      	adds	r7, #36	@ 0x24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40023800 	.word	0x40023800
 8004bec:	40013800 	.word	0x40013800
 8004bf0:	40020000 	.word	0x40020000
 8004bf4:	40020400 	.word	0x40020400
 8004bf8:	40020800 	.word	0x40020800
 8004bfc:	40020c00 	.word	0x40020c00
 8004c00:	40021000 	.word	0x40021000
 8004c04:	40013c00 	.word	0x40013c00

08004c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	807b      	strh	r3, [r7, #2]
 8004c14:	4613      	mov	r3, r2
 8004c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c18:	787b      	ldrb	r3, [r7, #1]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c1e:	887a      	ldrh	r2, [r7, #2]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c24:	e003      	b.n	8004c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c26:	887b      	ldrh	r3, [r7, #2]
 8004c28:	041a      	lsls	r2, r3, #16
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	619a      	str	r2, [r3, #24]
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
	...

08004c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e12b      	b.n	8004ea6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fd fc90 	bl	8002588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2224      	movs	r2, #36	@ 0x24
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0201 	bic.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ca0:	f003 faf2 	bl	8008288 <HAL_RCC_GetPCLK1Freq>
 8004ca4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	4a81      	ldr	r2, [pc, #516]	@ (8004eb0 <HAL_I2C_Init+0x274>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d807      	bhi.n	8004cc0 <HAL_I2C_Init+0x84>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4a80      	ldr	r2, [pc, #512]	@ (8004eb4 <HAL_I2C_Init+0x278>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	bf94      	ite	ls
 8004cb8:	2301      	movls	r3, #1
 8004cba:	2300      	movhi	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	e006      	b.n	8004cce <HAL_I2C_Init+0x92>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4a7d      	ldr	r2, [pc, #500]	@ (8004eb8 <HAL_I2C_Init+0x27c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	bf94      	ite	ls
 8004cc8:	2301      	movls	r3, #1
 8004cca:	2300      	movhi	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e0e7      	b.n	8004ea6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4a78      	ldr	r2, [pc, #480]	@ (8004ebc <HAL_I2C_Init+0x280>)
 8004cda:	fba2 2303 	umull	r2, r3, r2, r3
 8004cde:	0c9b      	lsrs	r3, r3, #18
 8004ce0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	4a6a      	ldr	r2, [pc, #424]	@ (8004eb0 <HAL_I2C_Init+0x274>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d802      	bhi.n	8004d10 <HAL_I2C_Init+0xd4>
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	e009      	b.n	8004d24 <HAL_I2C_Init+0xe8>
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	4a69      	ldr	r2, [pc, #420]	@ (8004ec0 <HAL_I2C_Init+0x284>)
 8004d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d20:	099b      	lsrs	r3, r3, #6
 8004d22:	3301      	adds	r3, #1
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	495c      	ldr	r1, [pc, #368]	@ (8004eb0 <HAL_I2C_Init+0x274>)
 8004d40:	428b      	cmp	r3, r1
 8004d42:	d819      	bhi.n	8004d78 <HAL_I2C_Init+0x13c>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	1e59      	subs	r1, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d52:	1c59      	adds	r1, r3, #1
 8004d54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d58:	400b      	ands	r3, r1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_I2C_Init+0x138>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	1e59      	subs	r1, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d72:	e051      	b.n	8004e18 <HAL_I2C_Init+0x1dc>
 8004d74:	2304      	movs	r3, #4
 8004d76:	e04f      	b.n	8004e18 <HAL_I2C_Init+0x1dc>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d111      	bne.n	8004da4 <HAL_I2C_Init+0x168>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	1e58      	subs	r0, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6859      	ldr	r1, [r3, #4]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	440b      	add	r3, r1
 8004d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d92:	3301      	adds	r3, #1
 8004d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	bf0c      	ite	eq
 8004d9c:	2301      	moveq	r3, #1
 8004d9e:	2300      	movne	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	e012      	b.n	8004dca <HAL_I2C_Init+0x18e>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	1e58      	subs	r0, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6859      	ldr	r1, [r3, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	0099      	lsls	r1, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dba:	3301      	adds	r3, #1
 8004dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bf0c      	ite	eq
 8004dc4:	2301      	moveq	r3, #1
 8004dc6:	2300      	movne	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <HAL_I2C_Init+0x196>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e022      	b.n	8004e18 <HAL_I2C_Init+0x1dc>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10e      	bne.n	8004df8 <HAL_I2C_Init+0x1bc>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	1e58      	subs	r0, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6859      	ldr	r1, [r3, #4]
 8004de2:	460b      	mov	r3, r1
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	440b      	add	r3, r1
 8004de8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dec:	3301      	adds	r3, #1
 8004dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004df6:	e00f      	b.n	8004e18 <HAL_I2C_Init+0x1dc>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	1e58      	subs	r0, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6859      	ldr	r1, [r3, #4]
 8004e00:	460b      	mov	r3, r1
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	0099      	lsls	r1, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e0e:	3301      	adds	r3, #1
 8004e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	6809      	ldr	r1, [r1, #0]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69da      	ldr	r2, [r3, #28]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6911      	ldr	r1, [r2, #16]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68d2      	ldr	r2, [r2, #12]
 8004e52:	4311      	orrs	r1, r2
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6812      	ldr	r2, [r2, #0]
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695a      	ldr	r2, [r3, #20]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	000186a0 	.word	0x000186a0
 8004eb4:	001e847f 	.word	0x001e847f
 8004eb8:	003d08ff 	.word	0x003d08ff
 8004ebc:	431bde83 	.word	0x431bde83
 8004ec0:	10624dd3 	.word	0x10624dd3

08004ec4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	607a      	str	r2, [r7, #4]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	817b      	strh	r3, [r7, #10]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ed8:	f7ff fbd0 	bl	800467c <HAL_GetTick>
 8004edc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	f040 80e0 	bne.w	80050ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	2319      	movs	r3, #25
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	4970      	ldr	r1, [pc, #448]	@ (80050b8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f001 f90e 	bl	8006118 <I2C_WaitOnFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004f02:	2302      	movs	r3, #2
 8004f04:	e0d3      	b.n	80050ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_I2C_Master_Transmit+0x50>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e0cc      	b.n	80050ae <HAL_I2C_Master_Transmit+0x1ea>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d007      	beq.n	8004f3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 0201 	orr.w	r2, r2, #1
 8004f38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2221      	movs	r2, #33	@ 0x21
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2210      	movs	r2, #16
 8004f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	893a      	ldrh	r2, [r7, #8]
 8004f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4a50      	ldr	r2, [pc, #320]	@ (80050bc <HAL_I2C_Master_Transmit+0x1f8>)
 8004f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f7c:	8979      	ldrh	r1, [r7, #10]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	6a3a      	ldr	r2, [r7, #32]
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 fdfa 	bl	8005b7c <I2C_MasterRequestWrite>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e08d      	b.n	80050ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f92:	2300      	movs	r3, #0
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004fa8:	e066      	b.n	8005078 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	6a39      	ldr	r1, [r7, #32]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f001 f9cc 	bl	800634c <I2C_WaitOnTXEFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00d      	beq.n	8004fd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d107      	bne.n	8004fd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e06b      	b.n	80050ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fda:	781a      	ldrb	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b04      	cmp	r3, #4
 8005012:	d11b      	bne.n	800504c <HAL_I2C_Master_Transmit+0x188>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005018:	2b00      	cmp	r3, #0
 800501a:	d017      	beq.n	800504c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005020:	781a      	ldrb	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	6a39      	ldr	r1, [r7, #32]
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f001 f9c3 	bl	80063dc <I2C_WaitOnBTFFlagUntilTimeout>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00d      	beq.n	8005078 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005060:	2b04      	cmp	r3, #4
 8005062:	d107      	bne.n	8005074 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005072:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e01a      	b.n	80050ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800507c:	2b00      	cmp	r3, #0
 800507e:	d194      	bne.n	8004faa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800508e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	e000      	b.n	80050ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80050ac:	2302      	movs	r3, #2
  }
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	00100002 	.word	0x00100002
 80050bc:	ffff0000 	.word	0xffff0000

080050c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08c      	sub	sp, #48	@ 0x30
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	607a      	str	r2, [r7, #4]
 80050ca:	461a      	mov	r2, r3
 80050cc:	460b      	mov	r3, r1
 80050ce:	817b      	strh	r3, [r7, #10]
 80050d0:	4613      	mov	r3, r2
 80050d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050d4:	f7ff fad2 	bl	800467c <HAL_GetTick>
 80050d8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	f040 8217 	bne.w	8005516 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	2319      	movs	r3, #25
 80050ee:	2201      	movs	r2, #1
 80050f0:	497c      	ldr	r1, [pc, #496]	@ (80052e4 <HAL_I2C_Master_Receive+0x224>)
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f001 f810 	bl	8006118 <I2C_WaitOnFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80050fe:	2302      	movs	r3, #2
 8005100:	e20a      	b.n	8005518 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005108:	2b01      	cmp	r3, #1
 800510a:	d101      	bne.n	8005110 <HAL_I2C_Master_Receive+0x50>
 800510c:	2302      	movs	r3, #2
 800510e:	e203      	b.n	8005518 <HAL_I2C_Master_Receive+0x458>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b01      	cmp	r3, #1
 8005124:	d007      	beq.n	8005136 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0201 	orr.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005144:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2222      	movs	r2, #34	@ 0x22
 800514a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2210      	movs	r2, #16
 8005152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	893a      	ldrh	r2, [r7, #8]
 8005166:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4a5c      	ldr	r2, [pc, #368]	@ (80052e8 <HAL_I2C_Master_Receive+0x228>)
 8005176:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005178:	8979      	ldrh	r1, [r7, #10]
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 fd7e 	bl	8005c80 <I2C_MasterRequestRead>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e1c4      	b.n	8005518 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005192:	2b00      	cmp	r3, #0
 8005194:	d113      	bne.n	80051be <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005196:	2300      	movs	r3, #0
 8005198:	623b      	str	r3, [r7, #32]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	623b      	str	r3, [r7, #32]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	623b      	str	r3, [r7, #32]
 80051aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e198      	b.n	80054f0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d11b      	bne.n	80051fe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d6:	2300      	movs	r3, #0
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	61fb      	str	r3, [r7, #28]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	61fb      	str	r3, [r7, #28]
 80051ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	e178      	b.n	80054f0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005202:	2b02      	cmp	r3, #2
 8005204:	d11b      	bne.n	800523e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005214:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005224:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005226:	2300      	movs	r3, #0
 8005228:	61bb      	str	r3, [r7, #24]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	61bb      	str	r3, [r7, #24]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	61bb      	str	r3, [r7, #24]
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	e158      	b.n	80054f0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800524c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800524e:	2300      	movs	r3, #0
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005264:	e144      	b.n	80054f0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800526a:	2b03      	cmp	r3, #3
 800526c:	f200 80f1 	bhi.w	8005452 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005274:	2b01      	cmp	r3, #1
 8005276:	d123      	bne.n	80052c0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800527a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f001 f8f5 	bl	800646c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e145      	b.n	8005518 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691a      	ldr	r2, [r3, #16]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052be:	e117      	b.n	80054f0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d14e      	bne.n	8005366 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ce:	2200      	movs	r2, #0
 80052d0:	4906      	ldr	r1, [pc, #24]	@ (80052ec <HAL_I2C_Master_Receive+0x22c>)
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 ff20 	bl	8006118 <I2C_WaitOnFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d008      	beq.n	80052f0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e11a      	b.n	8005518 <HAL_I2C_Master_Receive+0x458>
 80052e2:	bf00      	nop
 80052e4:	00100002 	.word	0x00100002
 80052e8:	ffff0000 	.word	0xffff0000
 80052ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691a      	ldr	r2, [r3, #16]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005364:	e0c4      	b.n	80054f0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536c:	2200      	movs	r2, #0
 800536e:	496c      	ldr	r1, [pc, #432]	@ (8005520 <HAL_I2C_Master_Receive+0x460>)
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 fed1 	bl	8006118 <I2C_WaitOnFlagUntilTimeout>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e0cb      	b.n	8005518 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800538e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b29a      	uxth	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c8:	2200      	movs	r2, #0
 80053ca:	4955      	ldr	r1, [pc, #340]	@ (8005520 <HAL_I2C_Master_Receive+0x460>)
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 fea3 	bl	8006118 <I2C_WaitOnFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e09d      	b.n	8005518 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005450:	e04e      	b.n	80054f0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005454:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f001 f808 	bl	800646c <I2C_WaitOnRXNEFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e058      	b.n	8005518 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d124      	bne.n	80054f0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d107      	bne.n	80054be <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054bc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f47f aeb6 	bne.w	8005266 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	e000      	b.n	8005518 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005516:	2302      	movs	r3, #2
  }
}
 8005518:	4618      	mov	r0, r3
 800551a:	3728      	adds	r7, #40	@ 0x28
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	00010004 	.word	0x00010004

08005524 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af02      	add	r7, sp, #8
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	4608      	mov	r0, r1
 800552e:	4611      	mov	r1, r2
 8005530:	461a      	mov	r2, r3
 8005532:	4603      	mov	r3, r0
 8005534:	817b      	strh	r3, [r7, #10]
 8005536:	460b      	mov	r3, r1
 8005538:	813b      	strh	r3, [r7, #8]
 800553a:	4613      	mov	r3, r2
 800553c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800553e:	f7ff f89d 	bl	800467c <HAL_GetTick>
 8005542:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b20      	cmp	r3, #32
 800554e:	f040 80d9 	bne.w	8005704 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	2319      	movs	r3, #25
 8005558:	2201      	movs	r2, #1
 800555a:	496d      	ldr	r1, [pc, #436]	@ (8005710 <HAL_I2C_Mem_Write+0x1ec>)
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 fddb 	bl	8006118 <I2C_WaitOnFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005568:	2302      	movs	r3, #2
 800556a:	e0cc      	b.n	8005706 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_I2C_Mem_Write+0x56>
 8005576:	2302      	movs	r3, #2
 8005578:	e0c5      	b.n	8005706 <HAL_I2C_Mem_Write+0x1e2>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b01      	cmp	r3, #1
 800558e:	d007      	beq.n	80055a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0201 	orr.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2221      	movs	r2, #33	@ 0x21
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2240      	movs	r2, #64	@ 0x40
 80055bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a3a      	ldr	r2, [r7, #32]
 80055ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80055d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4a4d      	ldr	r2, [pc, #308]	@ (8005714 <HAL_I2C_Mem_Write+0x1f0>)
 80055e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055e2:	88f8      	ldrh	r0, [r7, #6]
 80055e4:	893a      	ldrh	r2, [r7, #8]
 80055e6:	8979      	ldrh	r1, [r7, #10]
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	4603      	mov	r3, r0
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 fc12 	bl	8005e1c <I2C_RequestMemoryWrite>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d052      	beq.n	80056a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e081      	b.n	8005706 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 fea0 	bl	800634c <I2C_WaitOnTXEFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00d      	beq.n	800562e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005616:	2b04      	cmp	r3, #4
 8005618:	d107      	bne.n	800562a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005628:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e06b      	b.n	8005706 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005632:	781a      	ldrb	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005648:	3b01      	subs	r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005654:	b29b      	uxth	r3, r3
 8005656:	3b01      	subs	r3, #1
 8005658:	b29a      	uxth	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b04      	cmp	r3, #4
 800566a:	d11b      	bne.n	80056a4 <HAL_I2C_Mem_Write+0x180>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005670:	2b00      	cmp	r3, #0
 8005672:	d017      	beq.n	80056a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005678:	781a      	ldrb	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800569a:	b29b      	uxth	r3, r3
 800569c:	3b01      	subs	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1aa      	bne.n	8005602 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fe93 	bl	80063dc <I2C_WaitOnBTFFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00d      	beq.n	80056d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d107      	bne.n	80056d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e016      	b.n	8005706 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	e000      	b.n	8005706 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005704:	2302      	movs	r3, #2
  }
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	00100002 	.word	0x00100002
 8005714:	ffff0000 	.word	0xffff0000

08005718 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08c      	sub	sp, #48	@ 0x30
 800571c:	af02      	add	r7, sp, #8
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	4608      	mov	r0, r1
 8005722:	4611      	mov	r1, r2
 8005724:	461a      	mov	r2, r3
 8005726:	4603      	mov	r3, r0
 8005728:	817b      	strh	r3, [r7, #10]
 800572a:	460b      	mov	r3, r1
 800572c:	813b      	strh	r3, [r7, #8]
 800572e:	4613      	mov	r3, r2
 8005730:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005732:	f7fe ffa3 	bl	800467c <HAL_GetTick>
 8005736:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b20      	cmp	r3, #32
 8005742:	f040 8214 	bne.w	8005b6e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	2319      	movs	r3, #25
 800574c:	2201      	movs	r2, #1
 800574e:	497b      	ldr	r1, [pc, #492]	@ (800593c <HAL_I2C_Mem_Read+0x224>)
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fce1 	bl	8006118 <I2C_WaitOnFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800575c:	2302      	movs	r3, #2
 800575e:	e207      	b.n	8005b70 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <HAL_I2C_Mem_Read+0x56>
 800576a:	2302      	movs	r3, #2
 800576c:	e200      	b.n	8005b70 <HAL_I2C_Mem_Read+0x458>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b01      	cmp	r3, #1
 8005782:	d007      	beq.n	8005794 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2222      	movs	r2, #34	@ 0x22
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2240      	movs	r2, #64	@ 0x40
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80057c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4a5b      	ldr	r2, [pc, #364]	@ (8005940 <HAL_I2C_Mem_Read+0x228>)
 80057d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057d6:	88f8      	ldrh	r0, [r7, #6]
 80057d8:	893a      	ldrh	r2, [r7, #8]
 80057da:	8979      	ldrh	r1, [r7, #10]
 80057dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	4603      	mov	r3, r0
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 fbae 	bl	8005f48 <I2C_RequestMemoryRead>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e1bc      	b.n	8005b70 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d113      	bne.n	8005826 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057fe:	2300      	movs	r3, #0
 8005800:	623b      	str	r3, [r7, #32]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	623b      	str	r3, [r7, #32]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	623b      	str	r3, [r7, #32]
 8005812:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	e190      	b.n	8005b48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800582a:	2b01      	cmp	r3, #1
 800582c:	d11b      	bne.n	8005866 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800583c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800583e:	2300      	movs	r3, #0
 8005840:	61fb      	str	r3, [r7, #28]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	61fb      	str	r3, [r7, #28]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	61fb      	str	r3, [r7, #28]
 8005852:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	e170      	b.n	8005b48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800586a:	2b02      	cmp	r3, #2
 800586c:	d11b      	bne.n	80058a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800587c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800588c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800588e:	2300      	movs	r3, #0
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	61bb      	str	r3, [r7, #24]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	61bb      	str	r3, [r7, #24]
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	e150      	b.n	8005b48 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80058bc:	e144      	b.n	8005b48 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058c2:	2b03      	cmp	r3, #3
 80058c4:	f200 80f1 	bhi.w	8005aaa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d123      	bne.n	8005918 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 fdc9 	bl	800646c <I2C_WaitOnRXNEFlagUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e145      	b.n	8005b70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691a      	ldr	r2, [r3, #16]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800590c:	b29b      	uxth	r3, r3
 800590e:	3b01      	subs	r3, #1
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005916:	e117      	b.n	8005b48 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800591c:	2b02      	cmp	r3, #2
 800591e:	d14e      	bne.n	80059be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005926:	2200      	movs	r2, #0
 8005928:	4906      	ldr	r1, [pc, #24]	@ (8005944 <HAL_I2C_Mem_Read+0x22c>)
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 fbf4 	bl	8006118 <I2C_WaitOnFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d008      	beq.n	8005948 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e11a      	b.n	8005b70 <HAL_I2C_Mem_Read+0x458>
 800593a:	bf00      	nop
 800593c:	00100002 	.word	0x00100002
 8005940:	ffff0000 	.word	0xffff0000
 8005944:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691a      	ldr	r2, [r3, #16]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80059bc:	e0c4      	b.n	8005b48 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c4:	2200      	movs	r2, #0
 80059c6:	496c      	ldr	r1, [pc, #432]	@ (8005b78 <HAL_I2C_Mem_Read+0x460>)
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 fba5 	bl	8006118 <I2C_WaitOnFlagUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e0cb      	b.n	8005b70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a20:	2200      	movs	r2, #0
 8005a22:	4955      	ldr	r1, [pc, #340]	@ (8005b78 <HAL_I2C_Mem_Read+0x460>)
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 fb77 	bl	8006118 <I2C_WaitOnFlagUntilTimeout>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e09d      	b.n	8005b70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691a      	ldr	r2, [r3, #16]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a92:	3b01      	subs	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005aa8:	e04e      	b.n	8005b48 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 fcdc 	bl	800646c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e058      	b.n	8005b70 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d124      	bne.n	8005b48 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d107      	bne.n	8005b16 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b14:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f47f aeb6 	bne.w	80058be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e000      	b.n	8005b70 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005b6e:	2302      	movs	r3, #2
  }
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3728      	adds	r7, #40	@ 0x28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	00010004 	.word	0x00010004

08005b7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b088      	sub	sp, #32
 8005b80:	af02      	add	r7, sp, #8
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	607a      	str	r2, [r7, #4]
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d006      	beq.n	8005ba6 <I2C_MasterRequestWrite+0x2a>
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d003      	beq.n	8005ba6 <I2C_MasterRequestWrite+0x2a>
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ba4:	d108      	bne.n	8005bb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	e00b      	b.n	8005bd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bbc:	2b12      	cmp	r3, #18
 8005bbe:	d107      	bne.n	8005bd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 fa9b 	bl	8006118 <I2C_WaitOnFlagUntilTimeout>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00d      	beq.n	8005c04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bf6:	d103      	bne.n	8005c00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bfe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e035      	b.n	8005c70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c0c:	d108      	bne.n	8005c20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c0e:	897b      	ldrh	r3, [r7, #10]
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	461a      	mov	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c1c:	611a      	str	r2, [r3, #16]
 8005c1e:	e01b      	b.n	8005c58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c20:	897b      	ldrh	r3, [r7, #10]
 8005c22:	11db      	asrs	r3, r3, #7
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	f003 0306 	and.w	r3, r3, #6
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f063 030f 	orn	r3, r3, #15
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	490e      	ldr	r1, [pc, #56]	@ (8005c78 <I2C_MasterRequestWrite+0xfc>)
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 fae4 	bl	800620c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e010      	b.n	8005c70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c4e:	897b      	ldrh	r3, [r7, #10]
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	4907      	ldr	r1, [pc, #28]	@ (8005c7c <I2C_MasterRequestWrite+0x100>)
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 fad4 	bl	800620c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	00010008 	.word	0x00010008
 8005c7c:	00010002 	.word	0x00010002

08005c80 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	607a      	str	r2, [r7, #4]
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c94:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ca4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d006      	beq.n	8005cba <I2C_MasterRequestRead+0x3a>
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d003      	beq.n	8005cba <I2C_MasterRequestRead+0x3a>
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005cb8:	d108      	bne.n	8005ccc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	e00b      	b.n	8005ce4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd0:	2b11      	cmp	r3, #17
 8005cd2:	d107      	bne.n	8005ce4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ce2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 fa11 	bl	8006118 <I2C_WaitOnFlagUntilTimeout>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00d      	beq.n	8005d18 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d0a:	d103      	bne.n	8005d14 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e079      	b.n	8005e0c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d20:	d108      	bne.n	8005d34 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d22:	897b      	ldrh	r3, [r7, #10]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	f043 0301 	orr.w	r3, r3, #1
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	611a      	str	r2, [r3, #16]
 8005d32:	e05f      	b.n	8005df4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d34:	897b      	ldrh	r3, [r7, #10]
 8005d36:	11db      	asrs	r3, r3, #7
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	f003 0306 	and.w	r3, r3, #6
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	f063 030f 	orn	r3, r3, #15
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	4930      	ldr	r1, [pc, #192]	@ (8005e14 <I2C_MasterRequestRead+0x194>)
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fa5a 	bl	800620c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e054      	b.n	8005e0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d62:	897b      	ldrh	r3, [r7, #10]
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	4929      	ldr	r1, [pc, #164]	@ (8005e18 <I2C_MasterRequestRead+0x198>)
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 fa4a 	bl	800620c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e044      	b.n	8005e0c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d82:	2300      	movs	r3, #0
 8005d84:	613b      	str	r3, [r7, #16]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	613b      	str	r3, [r7, #16]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005da6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 f9af 	bl	8006118 <I2C_WaitOnFlagUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00d      	beq.n	8005ddc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dce:	d103      	bne.n	8005dd8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dd6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e017      	b.n	8005e0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005ddc:	897b      	ldrh	r3, [r7, #10]
 8005dde:	11db      	asrs	r3, r3, #7
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	f003 0306 	and.w	r3, r3, #6
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	f063 030e 	orn	r3, r3, #14
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	4907      	ldr	r1, [pc, #28]	@ (8005e18 <I2C_MasterRequestRead+0x198>)
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 fa06 	bl	800620c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	00010008 	.word	0x00010008
 8005e18:	00010002 	.word	0x00010002

08005e1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	4608      	mov	r0, r1
 8005e26:	4611      	mov	r1, r2
 8005e28:	461a      	mov	r2, r3
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	817b      	strh	r3, [r7, #10]
 8005e2e:	460b      	mov	r3, r1
 8005e30:	813b      	strh	r3, [r7, #8]
 8005e32:	4613      	mov	r3, r2
 8005e34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 f960 	bl	8006118 <I2C_WaitOnFlagUntilTimeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00d      	beq.n	8005e7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e6c:	d103      	bne.n	8005e76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e74:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e05f      	b.n	8005f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e7a:	897b      	ldrh	r3, [r7, #10]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	461a      	mov	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8c:	6a3a      	ldr	r2, [r7, #32]
 8005e8e:	492d      	ldr	r1, [pc, #180]	@ (8005f44 <I2C_RequestMemoryWrite+0x128>)
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 f9bb 	bl	800620c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e04c      	b.n	8005f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb8:	6a39      	ldr	r1, [r7, #32]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fa46 	bl	800634c <I2C_WaitOnTXEFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00d      	beq.n	8005ee2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d107      	bne.n	8005ede <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005edc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e02b      	b.n	8005f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d105      	bne.n	8005ef4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ee8:	893b      	ldrh	r3, [r7, #8]
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	611a      	str	r2, [r3, #16]
 8005ef2:	e021      	b.n	8005f38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ef4:	893b      	ldrh	r3, [r7, #8]
 8005ef6:	0a1b      	lsrs	r3, r3, #8
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f04:	6a39      	ldr	r1, [r7, #32]
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 fa20 	bl	800634c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00d      	beq.n	8005f2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d107      	bne.n	8005f2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e005      	b.n	8005f3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f2e:	893b      	ldrh	r3, [r7, #8]
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	00010002 	.word	0x00010002

08005f48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	4608      	mov	r0, r1
 8005f52:	4611      	mov	r1, r2
 8005f54:	461a      	mov	r2, r3
 8005f56:	4603      	mov	r3, r0
 8005f58:	817b      	strh	r3, [r7, #10]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	813b      	strh	r3, [r7, #8]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 f8c2 	bl	8006118 <I2C_WaitOnFlagUntilTimeout>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00d      	beq.n	8005fb6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fa8:	d103      	bne.n	8005fb2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fb0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e0aa      	b.n	800610c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fb6:	897b      	ldrh	r3, [r7, #10]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	461a      	mov	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005fc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	6a3a      	ldr	r2, [r7, #32]
 8005fca:	4952      	ldr	r1, [pc, #328]	@ (8006114 <I2C_RequestMemoryRead+0x1cc>)
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f91d 	bl	800620c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e097      	b.n	800610c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fdc:	2300      	movs	r3, #0
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ff4:	6a39      	ldr	r1, [r7, #32]
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 f9a8 	bl	800634c <I2C_WaitOnTXEFlagUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00d      	beq.n	800601e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006006:	2b04      	cmp	r3, #4
 8006008:	d107      	bne.n	800601a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006018:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e076      	b.n	800610c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800601e:	88fb      	ldrh	r3, [r7, #6]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d105      	bne.n	8006030 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006024:	893b      	ldrh	r3, [r7, #8]
 8006026:	b2da      	uxtb	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	611a      	str	r2, [r3, #16]
 800602e:	e021      	b.n	8006074 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006030:	893b      	ldrh	r3, [r7, #8]
 8006032:	0a1b      	lsrs	r3, r3, #8
 8006034:	b29b      	uxth	r3, r3
 8006036:	b2da      	uxtb	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800603e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006040:	6a39      	ldr	r1, [r7, #32]
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f982 	bl	800634c <I2C_WaitOnTXEFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00d      	beq.n	800606a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006052:	2b04      	cmp	r3, #4
 8006054:	d107      	bne.n	8006066 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006064:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e050      	b.n	800610c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800606a:	893b      	ldrh	r3, [r7, #8]
 800606c:	b2da      	uxtb	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006076:	6a39      	ldr	r1, [r7, #32]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f967 	bl	800634c <I2C_WaitOnTXEFlagUntilTimeout>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00d      	beq.n	80060a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006088:	2b04      	cmp	r3, #4
 800608a:	d107      	bne.n	800609c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800609a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e035      	b.n	800610c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 f82b 	bl	8006118 <I2C_WaitOnFlagUntilTimeout>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00d      	beq.n	80060e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060d6:	d103      	bne.n	80060e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e013      	b.n	800610c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80060e4:	897b      	ldrh	r3, [r7, #10]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f043 0301 	orr.w	r3, r3, #1
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f6:	6a3a      	ldr	r2, [r7, #32]
 80060f8:	4906      	ldr	r1, [pc, #24]	@ (8006114 <I2C_RequestMemoryRead+0x1cc>)
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 f886 	bl	800620c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e000      	b.n	800610c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3718      	adds	r7, #24
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	00010002 	.word	0x00010002

08006118 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	4613      	mov	r3, r2
 8006126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006128:	e048      	b.n	80061bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006130:	d044      	beq.n	80061bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006132:	f7fe faa3 	bl	800467c <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	429a      	cmp	r2, r3
 8006140:	d302      	bcc.n	8006148 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d139      	bne.n	80061bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	0c1b      	lsrs	r3, r3, #16
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b01      	cmp	r3, #1
 8006150:	d10d      	bne.n	800616e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	43da      	mvns	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	4013      	ands	r3, r2
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	bf0c      	ite	eq
 8006164:	2301      	moveq	r3, #1
 8006166:	2300      	movne	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	461a      	mov	r2, r3
 800616c:	e00c      	b.n	8006188 <I2C_WaitOnFlagUntilTimeout+0x70>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	43da      	mvns	r2, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	4013      	ands	r3, r2
 800617a:	b29b      	uxth	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	bf0c      	ite	eq
 8006180:	2301      	moveq	r3, #1
 8006182:	2300      	movne	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	461a      	mov	r2, r3
 8006188:	79fb      	ldrb	r3, [r7, #7]
 800618a:	429a      	cmp	r2, r3
 800618c:	d116      	bne.n	80061bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a8:	f043 0220 	orr.w	r2, r3, #32
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e023      	b.n	8006204 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	0c1b      	lsrs	r3, r3, #16
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d10d      	bne.n	80061e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	43da      	mvns	r2, r3
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4013      	ands	r3, r2
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	bf0c      	ite	eq
 80061d8:	2301      	moveq	r3, #1
 80061da:	2300      	movne	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	461a      	mov	r2, r3
 80061e0:	e00c      	b.n	80061fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	43da      	mvns	r2, r3
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	4013      	ands	r3, r2
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	bf0c      	ite	eq
 80061f4:	2301      	moveq	r3, #1
 80061f6:	2300      	movne	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d093      	beq.n	800612a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800621a:	e071      	b.n	8006300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800622a:	d123      	bne.n	8006274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800623a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006244:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2220      	movs	r2, #32
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006260:	f043 0204 	orr.w	r2, r3, #4
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e067      	b.n	8006344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800627a:	d041      	beq.n	8006300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800627c:	f7fe f9fe 	bl	800467c <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	429a      	cmp	r2, r3
 800628a:	d302      	bcc.n	8006292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d136      	bne.n	8006300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	0c1b      	lsrs	r3, r3, #16
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b01      	cmp	r3, #1
 800629a:	d10c      	bne.n	80062b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	43da      	mvns	r2, r3
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4013      	ands	r3, r2
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	bf14      	ite	ne
 80062ae:	2301      	movne	r3, #1
 80062b0:	2300      	moveq	r3, #0
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	e00b      	b.n	80062ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	43da      	mvns	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4013      	ands	r3, r2
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	bf14      	ite	ne
 80062c8:	2301      	movne	r3, #1
 80062ca:	2300      	moveq	r3, #0
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d016      	beq.n	8006300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2220      	movs	r2, #32
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ec:	f043 0220 	orr.w	r2, r3, #32
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e021      	b.n	8006344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	0c1b      	lsrs	r3, r3, #16
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b01      	cmp	r3, #1
 8006308:	d10c      	bne.n	8006324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	43da      	mvns	r2, r3
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	4013      	ands	r3, r2
 8006316:	b29b      	uxth	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	bf14      	ite	ne
 800631c:	2301      	movne	r3, #1
 800631e:	2300      	moveq	r3, #0
 8006320:	b2db      	uxtb	r3, r3
 8006322:	e00b      	b.n	800633c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	43da      	mvns	r2, r3
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4013      	ands	r3, r2
 8006330:	b29b      	uxth	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	bf14      	ite	ne
 8006336:	2301      	movne	r3, #1
 8006338:	2300      	moveq	r3, #0
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b00      	cmp	r3, #0
 800633e:	f47f af6d 	bne.w	800621c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006358:	e034      	b.n	80063c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f8e3 	bl	8006526 <I2C_IsAcknowledgeFailed>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e034      	b.n	80063d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006370:	d028      	beq.n	80063c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006372:	f7fe f983 	bl	800467c <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	429a      	cmp	r2, r3
 8006380:	d302      	bcc.n	8006388 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d11d      	bne.n	80063c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006392:	2b80      	cmp	r3, #128	@ 0x80
 8006394:	d016      	beq.n	80063c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2220      	movs	r2, #32
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b0:	f043 0220 	orr.w	r2, r3, #32
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e007      	b.n	80063d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ce:	2b80      	cmp	r3, #128	@ 0x80
 80063d0:	d1c3      	bne.n	800635a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063e8:	e034      	b.n	8006454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 f89b 	bl	8006526 <I2C_IsAcknowledgeFailed>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e034      	b.n	8006464 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006400:	d028      	beq.n	8006454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006402:	f7fe f93b 	bl	800467c <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	429a      	cmp	r2, r3
 8006410:	d302      	bcc.n	8006418 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d11d      	bne.n	8006454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	2b04      	cmp	r3, #4
 8006424:	d016      	beq.n	8006454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2220      	movs	r2, #32
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006440:	f043 0220 	orr.w	r2, r3, #32
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e007      	b.n	8006464 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b04      	cmp	r3, #4
 8006460:	d1c3      	bne.n	80063ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006478:	e049      	b.n	800650e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	f003 0310 	and.w	r3, r3, #16
 8006484:	2b10      	cmp	r3, #16
 8006486:	d119      	bne.n	80064bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f06f 0210 	mvn.w	r2, #16
 8006490:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2220      	movs	r2, #32
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e030      	b.n	800651e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064bc:	f7fe f8de 	bl	800467c <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d302      	bcc.n	80064d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d11d      	bne.n	800650e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064dc:	2b40      	cmp	r3, #64	@ 0x40
 80064de:	d016      	beq.n	800650e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fa:	f043 0220 	orr.w	r2, r3, #32
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e007      	b.n	800651e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006518:	2b40      	cmp	r3, #64	@ 0x40
 800651a:	d1ae      	bne.n	800647a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006538:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800653c:	d11b      	bne.n	8006576 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006546:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006562:	f043 0204 	orr.w	r2, r3, #4
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af02      	add	r7, sp, #8
 800658a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e101      	b.n	800679a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d106      	bne.n	80065b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f006 fb9b 	bl	800ccec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2203      	movs	r2, #3
 80065ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065c4:	d102      	bne.n	80065cc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f002 ff32 	bl	800943a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	7c1a      	ldrb	r2, [r3, #16]
 80065de:	f88d 2000 	strb.w	r2, [sp]
 80065e2:	3304      	adds	r3, #4
 80065e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065e6:	f002 fe11 	bl	800920c <USB_CoreInit>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e0ce      	b.n	800679a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2100      	movs	r1, #0
 8006602:	4618      	mov	r0, r3
 8006604:	f002 ff2a 	bl	800945c <USB_SetCurrentMode>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2202      	movs	r2, #2
 8006612:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e0bf      	b.n	800679a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800661a:	2300      	movs	r3, #0
 800661c:	73fb      	strb	r3, [r7, #15]
 800661e:	e04a      	b.n	80066b6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006620:	7bfa      	ldrb	r2, [r7, #15]
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	4613      	mov	r3, r2
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	3315      	adds	r3, #21
 8006630:	2201      	movs	r2, #1
 8006632:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006634:	7bfa      	ldrb	r2, [r7, #15]
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	4613      	mov	r3, r2
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	440b      	add	r3, r1
 8006642:	3314      	adds	r3, #20
 8006644:	7bfa      	ldrb	r2, [r7, #15]
 8006646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006648:	7bfa      	ldrb	r2, [r7, #15]
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	b298      	uxth	r0, r3
 800664e:	6879      	ldr	r1, [r7, #4]
 8006650:	4613      	mov	r3, r2
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	4413      	add	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	440b      	add	r3, r1
 800665a:	332e      	adds	r3, #46	@ 0x2e
 800665c:	4602      	mov	r2, r0
 800665e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006660:	7bfa      	ldrb	r2, [r7, #15]
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	4613      	mov	r3, r2
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	4413      	add	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	440b      	add	r3, r1
 800666e:	3318      	adds	r3, #24
 8006670:	2200      	movs	r2, #0
 8006672:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006674:	7bfa      	ldrb	r2, [r7, #15]
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	4613      	mov	r3, r2
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	4413      	add	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	331c      	adds	r3, #28
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006688:	7bfa      	ldrb	r2, [r7, #15]
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	4613      	mov	r3, r2
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	4413      	add	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	440b      	add	r3, r1
 8006696:	3320      	adds	r3, #32
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800669c:	7bfa      	ldrb	r2, [r7, #15]
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	4613      	mov	r3, r2
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	4413      	add	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	440b      	add	r3, r1
 80066aa:	3324      	adds	r3, #36	@ 0x24
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	3301      	adds	r3, #1
 80066b4:	73fb      	strb	r3, [r7, #15]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	791b      	ldrb	r3, [r3, #4]
 80066ba:	7bfa      	ldrb	r2, [r7, #15]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d3af      	bcc.n	8006620 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066c0:	2300      	movs	r3, #0
 80066c2:	73fb      	strb	r3, [r7, #15]
 80066c4:	e044      	b.n	8006750 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80066c6:	7bfa      	ldrb	r2, [r7, #15]
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	4613      	mov	r3, r2
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	440b      	add	r3, r1
 80066d4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80066d8:	2200      	movs	r2, #0
 80066da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80066dc:	7bfa      	ldrb	r2, [r7, #15]
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	4613      	mov	r3, r2
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	4413      	add	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80066ee:	7bfa      	ldrb	r2, [r7, #15]
 80066f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80066f2:	7bfa      	ldrb	r2, [r7, #15]
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	4613      	mov	r3, r2
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006704:	2200      	movs	r2, #0
 8006706:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006708:	7bfa      	ldrb	r2, [r7, #15]
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	4613      	mov	r3, r2
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800671e:	7bfa      	ldrb	r2, [r7, #15]
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	4613      	mov	r3, r2
 8006724:	00db      	lsls	r3, r3, #3
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	440b      	add	r3, r1
 800672c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006730:	2200      	movs	r2, #0
 8006732:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006734:	7bfa      	ldrb	r2, [r7, #15]
 8006736:	6879      	ldr	r1, [r7, #4]
 8006738:	4613      	mov	r3, r2
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	4413      	add	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	440b      	add	r3, r1
 8006742:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006746:	2200      	movs	r2, #0
 8006748:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	3301      	adds	r3, #1
 800674e:	73fb      	strb	r3, [r7, #15]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	791b      	ldrb	r3, [r3, #4]
 8006754:	7bfa      	ldrb	r2, [r7, #15]
 8006756:	429a      	cmp	r2, r3
 8006758:	d3b5      	bcc.n	80066c6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	7c1a      	ldrb	r2, [r3, #16]
 8006762:	f88d 2000 	strb.w	r2, [sp]
 8006766:	3304      	adds	r3, #4
 8006768:	cb0e      	ldmia	r3, {r1, r2, r3}
 800676a:	f002 fec3 	bl	80094f4 <USB_DevInit>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e00c      	b.n	800679a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4618      	mov	r0, r3
 8006794:	f003 ff0d 	bl	800a5b2 <USB_DevDisconnect>

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d101      	bne.n	80067be <HAL_PCD_Start+0x1c>
 80067ba:	2302      	movs	r3, #2
 80067bc:	e022      	b.n	8006804 <HAL_PCD_Start+0x62>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d009      	beq.n	80067e6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d105      	bne.n	80067e6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067de:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f002 fe14 	bl	8009418 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f003 febb 	bl	800a570 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800680c:	b590      	push	{r4, r7, lr}
 800680e:	b08d      	sub	sp, #52	@ 0x34
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f003 ff79 	bl	800a71a <USB_GetMode>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	f040 848c 	bne.w	8007148 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4618      	mov	r0, r3
 8006836:	f003 fedd 	bl	800a5f4 <USB_ReadInterrupts>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 8482 	beq.w	8007146 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	0a1b      	lsrs	r3, r3, #8
 800684c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f003 feca 	bl	800a5f4 <USB_ReadInterrupts>
 8006860:	4603      	mov	r3, r0
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b02      	cmp	r3, #2
 8006868:	d107      	bne.n	800687a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695a      	ldr	r2, [r3, #20]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f002 0202 	and.w	r2, r2, #2
 8006878:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f003 feb8 	bl	800a5f4 <USB_ReadInterrupts>
 8006884:	4603      	mov	r3, r0
 8006886:	f003 0310 	and.w	r3, r3, #16
 800688a:	2b10      	cmp	r3, #16
 800688c:	d161      	bne.n	8006952 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	699a      	ldr	r2, [r3, #24]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0210 	bic.w	r2, r2, #16
 800689c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	f003 020f 	and.w	r2, r3, #15
 80068aa:	4613      	mov	r3, r2
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	4413      	add	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	4413      	add	r3, r2
 80068ba:	3304      	adds	r3, #4
 80068bc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80068c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80068c8:	d124      	bne.n	8006914 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80068d0:	4013      	ands	r3, r2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d035      	beq.n	8006942 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	091b      	lsrs	r3, r3, #4
 80068de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80068e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	461a      	mov	r2, r3
 80068e8:	6a38      	ldr	r0, [r7, #32]
 80068ea:	f003 fcef 	bl	800a2cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	091b      	lsrs	r3, r3, #4
 80068f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068fa:	441a      	add	r2, r3
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	695a      	ldr	r2, [r3, #20]
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	091b      	lsrs	r3, r3, #4
 8006908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800690c:	441a      	add	r2, r3
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	615a      	str	r2, [r3, #20]
 8006912:	e016      	b.n	8006942 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800691a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800691e:	d110      	bne.n	8006942 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006926:	2208      	movs	r2, #8
 8006928:	4619      	mov	r1, r3
 800692a:	6a38      	ldr	r0, [r7, #32]
 800692c:	f003 fcce 	bl	800a2cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	695a      	ldr	r2, [r3, #20]
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	091b      	lsrs	r3, r3, #4
 8006938:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800693c:	441a      	add	r2, r3
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	699a      	ldr	r2, [r3, #24]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f042 0210 	orr.w	r2, r2, #16
 8006950:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4618      	mov	r0, r3
 8006958:	f003 fe4c 	bl	800a5f4 <USB_ReadInterrupts>
 800695c:	4603      	mov	r3, r0
 800695e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006962:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006966:	f040 80a7 	bne.w	8006ab8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4618      	mov	r0, r3
 8006974:	f003 fe51 	bl	800a61a <USB_ReadDevAllOutEpInterrupt>
 8006978:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800697a:	e099      	b.n	8006ab0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800697c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 808e 	beq.w	8006aa4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800698e:	b2d2      	uxtb	r2, r2
 8006990:	4611      	mov	r1, r2
 8006992:	4618      	mov	r0, r3
 8006994:	f003 fe75 	bl	800a682 <USB_ReadDevOutEPInterrupt>
 8006998:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00c      	beq.n	80069be <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80069a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b0:	461a      	mov	r2, r3
 80069b2:	2301      	movs	r3, #1
 80069b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80069b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fea3 	bl	8007704 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f003 0308 	and.w	r3, r3, #8
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00c      	beq.n	80069e2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80069c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d4:	461a      	mov	r2, r3
 80069d6:	2308      	movs	r3, #8
 80069d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80069da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 ff79 	bl	80078d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f003 0310 	and.w	r3, r3, #16
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d008      	beq.n	80069fe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80069ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f8:	461a      	mov	r2, r3
 80069fa:	2310      	movs	r3, #16
 80069fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d030      	beq.n	8006a6a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a10:	2b80      	cmp	r3, #128	@ 0x80
 8006a12:	d109      	bne.n	8006a28 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	69fa      	ldr	r2, [r7, #28]
 8006a1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006a26:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	4413      	add	r3, r2
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	78db      	ldrb	r3, [r3, #3]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d108      	bne.n	8006a58 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f006 fa46 	bl	800cee4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a64:	461a      	mov	r2, r3
 8006a66:	2302      	movs	r3, #2
 8006a68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d008      	beq.n	8006a86 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a80:	461a      	mov	r2, r3
 8006a82:	2320      	movs	r3, #32
 8006a84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d009      	beq.n	8006aa4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006aa2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aac:	085b      	lsrs	r3, r3, #1
 8006aae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f47f af62 	bne.w	800697c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f003 fd99 	bl	800a5f4 <USB_ReadInterrupts>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ac8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006acc:	f040 80db 	bne.w	8006c86 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f003 fdba 	bl	800a64e <USB_ReadDevAllInEpInterrupt>
 8006ada:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006ae0:	e0cd      	b.n	8006c7e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 80c2 	beq.w	8006c72 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	4611      	mov	r1, r2
 8006af8:	4618      	mov	r0, r3
 8006afa:	f003 fde0 	bl	800a6be <USB_ReadDevInEPInterrupt>
 8006afe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d057      	beq.n	8006bba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0c:	f003 030f 	and.w	r3, r3, #15
 8006b10:	2201      	movs	r2, #1
 8006b12:	fa02 f303 	lsl.w	r3, r2, r3
 8006b16:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	43db      	mvns	r3, r3
 8006b24:	69f9      	ldr	r1, [r7, #28]
 8006b26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	799b      	ldrb	r3, [r3, #6]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d132      	bne.n	8006bae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006b48:	6879      	ldr	r1, [r7, #4]
 8006b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	4413      	add	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	440b      	add	r3, r1
 8006b56:	3320      	adds	r3, #32
 8006b58:	6819      	ldr	r1, [r3, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b5e:	4613      	mov	r3, r2
 8006b60:	00db      	lsls	r3, r3, #3
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4403      	add	r3, r0
 8006b68:	331c      	adds	r3, #28
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4419      	add	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b72:	4613      	mov	r3, r2
 8006b74:	00db      	lsls	r3, r3, #3
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4403      	add	r3, r0
 8006b7c:	3320      	adds	r3, #32
 8006b7e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d113      	bne.n	8006bae <HAL_PCD_IRQHandler+0x3a2>
 8006b86:	6879      	ldr	r1, [r7, #4]
 8006b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	440b      	add	r3, r1
 8006b94:	3324      	adds	r3, #36	@ 0x24
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d108      	bne.n	8006bae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6818      	ldr	r0, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	2101      	movs	r1, #1
 8006baa:	f003 fde7 	bl	800a77c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f006 f91a 	bl	800cdee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f003 0308 	and.w	r3, r3, #8
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d008      	beq.n	8006bd6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	2308      	movs	r3, #8
 8006bd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f003 0310 	and.w	r3, r3, #16
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d008      	beq.n	8006bf2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bec:	461a      	mov	r2, r3
 8006bee:	2310      	movs	r3, #16
 8006bf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d008      	beq.n	8006c0e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c08:	461a      	mov	r2, r3
 8006c0a:	2340      	movs	r3, #64	@ 0x40
 8006c0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d023      	beq.n	8006c60 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006c18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c1a:	6a38      	ldr	r0, [r7, #32]
 8006c1c:	f002 fdce 	bl	80097bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c22:	4613      	mov	r3, r2
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	3310      	adds	r3, #16
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	4413      	add	r3, r2
 8006c30:	3304      	adds	r3, #4
 8006c32:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	78db      	ldrb	r3, [r3, #3]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d108      	bne.n	8006c4e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f006 f95d 	bl	800cf08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006c6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fcbd 	bl	80075ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c74:	3301      	adds	r3, #1
 8006c76:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7a:	085b      	lsrs	r3, r3, #1
 8006c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f47f af2e 	bne.w	8006ae2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f003 fcb2 	bl	800a5f4 <USB_ReadInterrupts>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c9a:	d122      	bne.n	8006ce2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	69fa      	ldr	r2, [r7, #28]
 8006ca6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006caa:	f023 0301 	bic.w	r3, r3, #1
 8006cae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d108      	bne.n	8006ccc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fea3 	bl	8007a10 <HAL_PCDEx_LPM_Callback>
 8006cca:	e002      	b.n	8006cd2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f006 f8fb 	bl	800cec8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	695a      	ldr	r2, [r3, #20]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006ce0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f003 fc84 	bl	800a5f4 <USB_ReadInterrupts>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cf6:	d112      	bne.n	8006d1e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d102      	bne.n	8006d0e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f006 f8b7 	bl	800ce7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	695a      	ldr	r2, [r3, #20]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006d1c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f003 fc66 	bl	800a5f4 <USB_ReadInterrupts>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d32:	f040 80b7 	bne.w	8006ea4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	69fa      	ldr	r2, [r7, #28]
 8006d40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d44:	f023 0301 	bic.w	r3, r3, #1
 8006d48:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2110      	movs	r1, #16
 8006d50:	4618      	mov	r0, r3
 8006d52:	f002 fd33 	bl	80097bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d56:	2300      	movs	r3, #0
 8006d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d5a:	e046      	b.n	8006dea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d68:	461a      	mov	r2, r3
 8006d6a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d6e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d80:	0151      	lsls	r1, r2, #5
 8006d82:	69fa      	ldr	r2, [r7, #28]
 8006d84:	440a      	add	r2, r1
 8006d86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d8e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006da2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006db4:	0151      	lsls	r1, r2, #5
 8006db6:	69fa      	ldr	r2, [r7, #28]
 8006db8:	440a      	add	r2, r1
 8006dba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006dc2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	69fa      	ldr	r2, [r7, #28]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dde:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006de2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de6:	3301      	adds	r3, #1
 8006de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	791b      	ldrb	r3, [r3, #4]
 8006dee:	461a      	mov	r2, r3
 8006df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d3b2      	bcc.n	8006d5c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	69fa      	ldr	r2, [r7, #28]
 8006e00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e04:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006e08:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	7bdb      	ldrb	r3, [r3, #15]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d016      	beq.n	8006e40 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e22:	f043 030b 	orr.w	r3, r3, #11
 8006e26:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e38:	f043 030b 	orr.w	r3, r3, #11
 8006e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006e3e:	e015      	b.n	8006e6c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	69fa      	ldr	r2, [r7, #28]
 8006e4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e4e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006e52:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006e56:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	69fa      	ldr	r2, [r7, #28]
 8006e62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e66:	f043 030b 	orr.w	r3, r3, #11
 8006e6a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e7a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006e7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f003 fc74 	bl	800a77c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	695a      	ldr	r2, [r3, #20]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006ea2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f003 fba3 	bl	800a5f4 <USB_ReadInterrupts>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eb8:	d123      	bne.n	8006f02 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f003 fc39 	bl	800a736 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f002 fcf0 	bl	80098ae <USB_GetDevSpeed>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681c      	ldr	r4, [r3, #0]
 8006eda:	f001 f9c9 	bl	8008270 <HAL_RCC_GetHCLKFreq>
 8006ede:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f002 f9f4 	bl	80092d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f005 ffa6 	bl	800ce3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	695a      	ldr	r2, [r3, #20]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006f00:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f003 fb74 	bl	800a5f4 <USB_ReadInterrupts>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b08      	cmp	r3, #8
 8006f14:	d10a      	bne.n	8006f2c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f005 ff83 	bl	800ce22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	695a      	ldr	r2, [r3, #20]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f002 0208 	and.w	r2, r2, #8
 8006f2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f003 fb5f 	bl	800a5f4 <USB_ReadInterrupts>
 8006f36:	4603      	mov	r3, r0
 8006f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f3c:	2b80      	cmp	r3, #128	@ 0x80
 8006f3e:	d123      	bne.n	8006f88 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f50:	e014      	b.n	8006f7c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f56:	4613      	mov	r3, r2
 8006f58:	00db      	lsls	r3, r3, #3
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	440b      	add	r3, r1
 8006f60:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d105      	bne.n	8006f76 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fb0a 	bl	800758a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f78:	3301      	adds	r3, #1
 8006f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	791b      	ldrb	r3, [r3, #4]
 8006f80:	461a      	mov	r2, r3
 8006f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d3e4      	bcc.n	8006f52 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f003 fb31 	bl	800a5f4 <USB_ReadInterrupts>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f9c:	d13c      	bne.n	8007018 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fa2:	e02b      	b.n	8006ffc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fb8:	4613      	mov	r3, r2
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	3318      	adds	r3, #24
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d115      	bne.n	8006ff6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006fca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	da12      	bge.n	8006ff6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006fd0:	6879      	ldr	r1, [r7, #4]
 8006fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	440b      	add	r3, r1
 8006fde:	3317      	adds	r3, #23
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 faca 	bl	800758a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	791b      	ldrb	r3, [r3, #4]
 8007000:	461a      	mov	r2, r3
 8007002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007004:	4293      	cmp	r3, r2
 8007006:	d3cd      	bcc.n	8006fa4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	695a      	ldr	r2, [r3, #20]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007016:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4618      	mov	r0, r3
 800701e:	f003 fae9 	bl	800a5f4 <USB_ReadInterrupts>
 8007022:	4603      	mov	r3, r0
 8007024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007028:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800702c:	d156      	bne.n	80070dc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800702e:	2301      	movs	r3, #1
 8007030:	627b      	str	r3, [r7, #36]	@ 0x24
 8007032:	e045      	b.n	80070c0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007044:	6879      	ldr	r1, [r7, #4]
 8007046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007048:	4613      	mov	r3, r2
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	4413      	add	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	440b      	add	r3, r1
 8007052:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d12e      	bne.n	80070ba <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800705c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800705e:	2b00      	cmp	r3, #0
 8007060:	da2b      	bge.n	80070ba <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800706e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007072:	429a      	cmp	r2, r3
 8007074:	d121      	bne.n	80070ba <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800707a:	4613      	mov	r3, r2
 800707c:	00db      	lsls	r3, r3, #3
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	440b      	add	r3, r1
 8007084:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007088:	2201      	movs	r2, #1
 800708a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10a      	bne.n	80070ba <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	69fa      	ldr	r2, [r7, #28]
 80070ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80070b6:	6053      	str	r3, [r2, #4]
            break;
 80070b8:	e008      	b.n	80070cc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	3301      	adds	r3, #1
 80070be:	627b      	str	r3, [r7, #36]	@ 0x24
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	791b      	ldrb	r3, [r3, #4]
 80070c4:	461a      	mov	r2, r3
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d3b3      	bcc.n	8007034 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	695a      	ldr	r2, [r3, #20]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80070da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f003 fa87 	bl	800a5f4 <USB_ReadInterrupts>
 80070e6:	4603      	mov	r3, r0
 80070e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80070ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f0:	d10a      	bne.n	8007108 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f005 ff1a 	bl	800cf2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	695a      	ldr	r2, [r3, #20]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f003 fa71 	bl	800a5f4 <USB_ReadInterrupts>
 8007112:	4603      	mov	r3, r0
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b04      	cmp	r3, #4
 800711a:	d115      	bne.n	8007148 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f005 ff0a 	bl	800cf48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6859      	ldr	r1, [r3, #4]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	430a      	orrs	r2, r1
 8007142:	605a      	str	r2, [r3, #4]
 8007144:	e000      	b.n	8007148 <HAL_PCD_IRQHandler+0x93c>
      return;
 8007146:	bf00      	nop
    }
  }
}
 8007148:	3734      	adds	r7, #52	@ 0x34
 800714a:	46bd      	mov	sp, r7
 800714c:	bd90      	pop	{r4, r7, pc}

0800714e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	460b      	mov	r3, r1
 8007158:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007160:	2b01      	cmp	r3, #1
 8007162:	d101      	bne.n	8007168 <HAL_PCD_SetAddress+0x1a>
 8007164:	2302      	movs	r3, #2
 8007166:	e012      	b.n	800718e <HAL_PCD_SetAddress+0x40>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	78fa      	ldrb	r2, [r7, #3]
 8007174:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	78fa      	ldrb	r2, [r7, #3]
 800717c:	4611      	mov	r1, r2
 800717e:	4618      	mov	r0, r3
 8007180:	f003 f9d0 	bl	800a524 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	4608      	mov	r0, r1
 80071a0:	4611      	mov	r1, r2
 80071a2:	461a      	mov	r2, r3
 80071a4:	4603      	mov	r3, r0
 80071a6:	70fb      	strb	r3, [r7, #3]
 80071a8:	460b      	mov	r3, r1
 80071aa:	803b      	strh	r3, [r7, #0]
 80071ac:	4613      	mov	r3, r2
 80071ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80071b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	da0f      	bge.n	80071dc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071bc:	78fb      	ldrb	r3, [r7, #3]
 80071be:	f003 020f 	and.w	r2, r3, #15
 80071c2:	4613      	mov	r3, r2
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	4413      	add	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	3310      	adds	r3, #16
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	4413      	add	r3, r2
 80071d0:	3304      	adds	r3, #4
 80071d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2201      	movs	r2, #1
 80071d8:	705a      	strb	r2, [r3, #1]
 80071da:	e00f      	b.n	80071fc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071dc:	78fb      	ldrb	r3, [r7, #3]
 80071de:	f003 020f 	and.w	r2, r3, #15
 80071e2:	4613      	mov	r3, r2
 80071e4:	00db      	lsls	r3, r3, #3
 80071e6:	4413      	add	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	4413      	add	r3, r2
 80071f2:	3304      	adds	r3, #4
 80071f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	f003 030f 	and.w	r3, r3, #15
 8007202:	b2da      	uxtb	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007208:	883b      	ldrh	r3, [r7, #0]
 800720a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	78ba      	ldrb	r2, [r7, #2]
 8007216:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	785b      	ldrb	r3, [r3, #1]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	461a      	mov	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800722a:	78bb      	ldrb	r3, [r7, #2]
 800722c:	2b02      	cmp	r3, #2
 800722e:	d102      	bne.n	8007236 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <HAL_PCD_EP_Open+0xae>
 8007240:	2302      	movs	r3, #2
 8007242:	e00e      	b.n	8007262 <HAL_PCD_EP_Open+0xcc>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68f9      	ldr	r1, [r7, #12]
 8007252:	4618      	mov	r0, r3
 8007254:	f002 fb50 	bl	80098f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007260:	7afb      	ldrb	r3, [r7, #11]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	460b      	mov	r3, r1
 8007274:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007276:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800727a:	2b00      	cmp	r3, #0
 800727c:	da0f      	bge.n	800729e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800727e:	78fb      	ldrb	r3, [r7, #3]
 8007280:	f003 020f 	and.w	r2, r3, #15
 8007284:	4613      	mov	r3, r2
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	3310      	adds	r3, #16
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	4413      	add	r3, r2
 8007292:	3304      	adds	r3, #4
 8007294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2201      	movs	r2, #1
 800729a:	705a      	strb	r2, [r3, #1]
 800729c:	e00f      	b.n	80072be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800729e:	78fb      	ldrb	r3, [r7, #3]
 80072a0:	f003 020f 	and.w	r2, r3, #15
 80072a4:	4613      	mov	r3, r2
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	4413      	add	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	4413      	add	r3, r2
 80072b4:	3304      	adds	r3, #4
 80072b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80072be:	78fb      	ldrb	r3, [r7, #3]
 80072c0:	f003 030f 	and.w	r3, r3, #15
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d101      	bne.n	80072d8 <HAL_PCD_EP_Close+0x6e>
 80072d4:	2302      	movs	r3, #2
 80072d6:	e00e      	b.n	80072f6 <HAL_PCD_EP_Close+0x8c>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68f9      	ldr	r1, [r7, #12]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f002 fb8e 	bl	8009a08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b086      	sub	sp, #24
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]
 800730a:	460b      	mov	r3, r1
 800730c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800730e:	7afb      	ldrb	r3, [r7, #11]
 8007310:	f003 020f 	and.w	r2, r3, #15
 8007314:	4613      	mov	r3, r2
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	4413      	add	r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	3304      	adds	r3, #4
 8007326:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2200      	movs	r2, #0
 8007338:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2200      	movs	r2, #0
 800733e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007340:	7afb      	ldrb	r3, [r7, #11]
 8007342:	f003 030f 	and.w	r3, r3, #15
 8007346:	b2da      	uxtb	r2, r3
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	799b      	ldrb	r3, [r3, #6]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d102      	bne.n	800735a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6818      	ldr	r0, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	799b      	ldrb	r3, [r3, #6]
 8007362:	461a      	mov	r2, r3
 8007364:	6979      	ldr	r1, [r7, #20]
 8007366:	f002 fc2b 	bl	8009bc0 <USB_EPStartXfer>

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007380:	78fb      	ldrb	r3, [r7, #3]
 8007382:	f003 020f 	and.w	r2, r3, #15
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	4613      	mov	r3, r2
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	4413      	add	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	440b      	add	r3, r1
 8007392:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007396:	681b      	ldr	r3, [r3, #0]
}
 8007398:	4618      	mov	r0, r3
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	607a      	str	r2, [r7, #4]
 80073ae:	603b      	str	r3, [r7, #0]
 80073b0:	460b      	mov	r3, r1
 80073b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073b4:	7afb      	ldrb	r3, [r7, #11]
 80073b6:	f003 020f 	and.w	r2, r3, #15
 80073ba:	4613      	mov	r3, r2
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	4413      	add	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	3310      	adds	r3, #16
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4413      	add	r3, r2
 80073c8:	3304      	adds	r3, #4
 80073ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2200      	movs	r2, #0
 80073dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2201      	movs	r2, #1
 80073e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073e4:	7afb      	ldrb	r3, [r7, #11]
 80073e6:	f003 030f 	and.w	r3, r3, #15
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	799b      	ldrb	r3, [r3, #6]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d102      	bne.n	80073fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	799b      	ldrb	r3, [r3, #6]
 8007406:	461a      	mov	r2, r3
 8007408:	6979      	ldr	r1, [r7, #20]
 800740a:	f002 fbd9 	bl	8009bc0 <USB_EPStartXfer>

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	f003 030f 	and.w	r3, r3, #15
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	7912      	ldrb	r2, [r2, #4]
 800742e:	4293      	cmp	r3, r2
 8007430:	d901      	bls.n	8007436 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e04f      	b.n	80074d6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800743a:	2b00      	cmp	r3, #0
 800743c:	da0f      	bge.n	800745e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	f003 020f 	and.w	r2, r3, #15
 8007444:	4613      	mov	r3, r2
 8007446:	00db      	lsls	r3, r3, #3
 8007448:	4413      	add	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	3310      	adds	r3, #16
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	4413      	add	r3, r2
 8007452:	3304      	adds	r3, #4
 8007454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2201      	movs	r2, #1
 800745a:	705a      	strb	r2, [r3, #1]
 800745c:	e00d      	b.n	800747a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800745e:	78fa      	ldrb	r2, [r7, #3]
 8007460:	4613      	mov	r3, r2
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	4413      	add	r3, r2
 8007470:	3304      	adds	r3, #4
 8007472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2201      	movs	r2, #1
 800747e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	f003 030f 	and.w	r3, r3, #15
 8007486:	b2da      	uxtb	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007492:	2b01      	cmp	r3, #1
 8007494:	d101      	bne.n	800749a <HAL_PCD_EP_SetStall+0x82>
 8007496:	2302      	movs	r3, #2
 8007498:	e01d      	b.n	80074d6 <HAL_PCD_EP_SetStall+0xbe>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68f9      	ldr	r1, [r7, #12]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f002 ff67 	bl	800a37c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80074ae:	78fb      	ldrb	r3, [r7, #3]
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d109      	bne.n	80074cc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6818      	ldr	r0, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	7999      	ldrb	r1, [r3, #6]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80074c6:	461a      	mov	r2, r3
 80074c8:	f003 f958 	bl	800a77c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b084      	sub	sp, #16
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	460b      	mov	r3, r1
 80074e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80074ea:	78fb      	ldrb	r3, [r7, #3]
 80074ec:	f003 030f 	and.w	r3, r3, #15
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	7912      	ldrb	r2, [r2, #4]
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d901      	bls.n	80074fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e042      	b.n	8007582 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80074fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007500:	2b00      	cmp	r3, #0
 8007502:	da0f      	bge.n	8007524 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007504:	78fb      	ldrb	r3, [r7, #3]
 8007506:	f003 020f 	and.w	r2, r3, #15
 800750a:	4613      	mov	r3, r2
 800750c:	00db      	lsls	r3, r3, #3
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	3310      	adds	r3, #16
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	4413      	add	r3, r2
 8007518:	3304      	adds	r3, #4
 800751a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2201      	movs	r2, #1
 8007520:	705a      	strb	r2, [r3, #1]
 8007522:	e00f      	b.n	8007544 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	f003 020f 	and.w	r2, r3, #15
 800752a:	4613      	mov	r3, r2
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	4413      	add	r3, r2
 800753a:	3304      	adds	r3, #4
 800753c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	f003 030f 	and.w	r3, r3, #15
 8007550:	b2da      	uxtb	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800755c:	2b01      	cmp	r3, #1
 800755e:	d101      	bne.n	8007564 <HAL_PCD_EP_ClrStall+0x86>
 8007560:	2302      	movs	r3, #2
 8007562:	e00e      	b.n	8007582 <HAL_PCD_EP_ClrStall+0xa4>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68f9      	ldr	r1, [r7, #12]
 8007572:	4618      	mov	r0, r3
 8007574:	f002 ff70 	bl	800a458 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007596:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800759a:	2b00      	cmp	r3, #0
 800759c:	da0c      	bge.n	80075b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800759e:	78fb      	ldrb	r3, [r7, #3]
 80075a0:	f003 020f 	and.w	r2, r3, #15
 80075a4:	4613      	mov	r3, r2
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	4413      	add	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	3310      	adds	r3, #16
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	4413      	add	r3, r2
 80075b2:	3304      	adds	r3, #4
 80075b4:	60fb      	str	r3, [r7, #12]
 80075b6:	e00c      	b.n	80075d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075b8:	78fb      	ldrb	r3, [r7, #3]
 80075ba:	f003 020f 	and.w	r2, r3, #15
 80075be:	4613      	mov	r3, r2
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	4413      	add	r3, r2
 80075ce:	3304      	adds	r3, #4
 80075d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68f9      	ldr	r1, [r7, #12]
 80075d8:	4618      	mov	r0, r3
 80075da:	f002 fd8f 	bl	800a0fc <USB_EPStopXfer>
 80075de:	4603      	mov	r3, r0
 80075e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80075e2:	7afb      	ldrb	r3, [r7, #11]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08a      	sub	sp, #40	@ 0x28
 80075f0:	af02      	add	r7, sp, #8
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	4613      	mov	r3, r2
 8007604:	00db      	lsls	r3, r3, #3
 8007606:	4413      	add	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	3310      	adds	r3, #16
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	4413      	add	r3, r2
 8007610:	3304      	adds	r3, #4
 8007612:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	695a      	ldr	r2, [r3, #20]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	429a      	cmp	r2, r3
 800761e:	d901      	bls.n	8007624 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e06b      	b.n	80076fc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	691a      	ldr	r2, [r3, #16]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	429a      	cmp	r2, r3
 8007638:	d902      	bls.n	8007640 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	3303      	adds	r3, #3
 8007644:	089b      	lsrs	r3, r3, #2
 8007646:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007648:	e02a      	b.n	80076a0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	691a      	ldr	r2, [r3, #16]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	429a      	cmp	r2, r3
 800765e:	d902      	bls.n	8007666 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	3303      	adds	r3, #3
 800766a:	089b      	lsrs	r3, r3, #2
 800766c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	68d9      	ldr	r1, [r3, #12]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	b2da      	uxtb	r2, r3
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	4603      	mov	r3, r0
 8007682:	6978      	ldr	r0, [r7, #20]
 8007684:	f002 fde4 	bl	800a250 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	68da      	ldr	r2, [r3, #12]
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	441a      	add	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	695a      	ldr	r2, [r3, #20]
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	441a      	add	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d809      	bhi.n	80076ca <PCD_WriteEmptyTxFifo+0xde>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	695a      	ldr	r2, [r3, #20]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80076be:	429a      	cmp	r2, r3
 80076c0:	d203      	bcs.n	80076ca <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1bf      	bne.n	800764a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	691a      	ldr	r2, [r3, #16]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d811      	bhi.n	80076fa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	f003 030f 	and.w	r3, r3, #15
 80076dc:	2201      	movs	r2, #1
 80076de:	fa02 f303 	lsl.w	r3, r2, r3
 80076e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	43db      	mvns	r3, r3
 80076f0:	6939      	ldr	r1, [r7, #16]
 80076f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076f6:	4013      	ands	r3, r2
 80076f8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3720      	adds	r7, #32
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b088      	sub	sp, #32
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	333c      	adds	r3, #60	@ 0x3c
 800771c:	3304      	adds	r3, #4
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	799b      	ldrb	r3, [r3, #6]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d17b      	bne.n	8007832 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f003 0308 	and.w	r3, r3, #8
 8007740:	2b00      	cmp	r3, #0
 8007742:	d015      	beq.n	8007770 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	4a61      	ldr	r2, [pc, #388]	@ (80078cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007748:	4293      	cmp	r3, r2
 800774a:	f240 80b9 	bls.w	80078c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 80b3 	beq.w	80078c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	4413      	add	r3, r2
 8007762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007766:	461a      	mov	r2, r3
 8007768:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800776c:	6093      	str	r3, [r2, #8]
 800776e:	e0a7      	b.n	80078c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f003 0320 	and.w	r3, r3, #32
 8007776:	2b00      	cmp	r3, #0
 8007778:	d009      	beq.n	800778e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007786:	461a      	mov	r2, r3
 8007788:	2320      	movs	r3, #32
 800778a:	6093      	str	r3, [r2, #8]
 800778c:	e098      	b.n	80078c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007794:	2b00      	cmp	r3, #0
 8007796:	f040 8093 	bne.w	80078c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	4a4b      	ldr	r2, [pc, #300]	@ (80078cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d90f      	bls.n	80077c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00a      	beq.n	80077c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077b8:	461a      	mov	r2, r3
 80077ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077be:	6093      	str	r3, [r2, #8]
 80077c0:	e07e      	b.n	80078c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	4613      	mov	r3, r2
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	4413      	add	r3, r2
 80077d4:	3304      	adds	r3, #4
 80077d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6a1a      	ldr	r2, [r3, #32]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	0159      	lsls	r1, r3, #5
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	440b      	add	r3, r1
 80077e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077ee:	1ad2      	subs	r2, r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d114      	bne.n	8007824 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d109      	bne.n	8007816 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6818      	ldr	r0, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800780c:	461a      	mov	r2, r3
 800780e:	2101      	movs	r1, #1
 8007810:	f002 ffb4 	bl	800a77c <USB_EP0_OutStart>
 8007814:	e006      	b.n	8007824 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	68da      	ldr	r2, [r3, #12]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	441a      	add	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	b2db      	uxtb	r3, r3
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f005 fac4 	bl	800cdb8 <HAL_PCD_DataOutStageCallback>
 8007830:	e046      	b.n	80078c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	4a26      	ldr	r2, [pc, #152]	@ (80078d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d124      	bne.n	8007884 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00a      	beq.n	800785a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007850:	461a      	mov	r2, r3
 8007852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007856:	6093      	str	r3, [r2, #8]
 8007858:	e032      	b.n	80078c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f003 0320 	and.w	r3, r3, #32
 8007860:	2b00      	cmp	r3, #0
 8007862:	d008      	beq.n	8007876 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007870:	461a      	mov	r2, r3
 8007872:	2320      	movs	r3, #32
 8007874:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f005 fa9b 	bl	800cdb8 <HAL_PCD_DataOutStageCallback>
 8007882:	e01d      	b.n	80078c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d114      	bne.n	80078b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	4613      	mov	r3, r2
 8007890:	00db      	lsls	r3, r3, #3
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	440b      	add	r3, r1
 8007898:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d108      	bne.n	80078b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6818      	ldr	r0, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80078ac:	461a      	mov	r2, r3
 80078ae:	2100      	movs	r1, #0
 80078b0:	f002 ff64 	bl	800a77c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	4619      	mov	r1, r3
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f005 fa7c 	bl	800cdb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3720      	adds	r7, #32
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	4f54300a 	.word	0x4f54300a
 80078d0:	4f54310a 	.word	0x4f54310a

080078d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	333c      	adds	r3, #60	@ 0x3c
 80078ec:	3304      	adds	r3, #4
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4a15      	ldr	r2, [pc, #84]	@ (800795c <PCD_EP_OutSetupPacket_int+0x88>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d90e      	bls.n	8007928 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007910:	2b00      	cmp	r3, #0
 8007912:	d009      	beq.n	8007928 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007920:	461a      	mov	r2, r3
 8007922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007926:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f005 fa33 	bl	800cd94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	4a0a      	ldr	r2, [pc, #40]	@ (800795c <PCD_EP_OutSetupPacket_int+0x88>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d90c      	bls.n	8007950 <PCD_EP_OutSetupPacket_int+0x7c>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	799b      	ldrb	r3, [r3, #6]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d108      	bne.n	8007950 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6818      	ldr	r0, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007948:	461a      	mov	r2, r3
 800794a:	2101      	movs	r1, #1
 800794c:	f002 ff16 	bl	800a77c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	4f54300a 	.word	0x4f54300a

08007960 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
 800796c:	4613      	mov	r3, r2
 800796e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007976:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007978:	78fb      	ldrb	r3, [r7, #3]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d107      	bne.n	800798e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800797e:	883b      	ldrh	r3, [r7, #0]
 8007980:	0419      	lsls	r1, r3, #16
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	430a      	orrs	r2, r1
 800798a:	629a      	str	r2, [r3, #40]	@ 0x28
 800798c:	e028      	b.n	80079e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007994:	0c1b      	lsrs	r3, r3, #16
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	4413      	add	r3, r2
 800799a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800799c:	2300      	movs	r3, #0
 800799e:	73fb      	strb	r3, [r7, #15]
 80079a0:	e00d      	b.n	80079be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	3340      	adds	r3, #64	@ 0x40
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	0c1b      	lsrs	r3, r3, #16
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	4413      	add	r3, r2
 80079b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	3301      	adds	r3, #1
 80079bc:	73fb      	strb	r3, [r7, #15]
 80079be:	7bfa      	ldrb	r2, [r7, #15]
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d3ec      	bcc.n	80079a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80079c8:	883b      	ldrh	r3, [r7, #0]
 80079ca:	0418      	lsls	r0, r3, #16
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6819      	ldr	r1, [r3, #0]
 80079d0:	78fb      	ldrb	r3, [r7, #3]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	4302      	orrs	r2, r0
 80079d8:	3340      	adds	r3, #64	@ 0x40
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	440b      	add	r3, r1
 80079de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	460b      	mov	r3, r1
 80079f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	887a      	ldrh	r2, [r7, #2]
 8007a00:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e267      	b.n	8007f0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d075      	beq.n	8007b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007a46:	4b88      	ldr	r3, [pc, #544]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f003 030c 	and.w	r3, r3, #12
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d00c      	beq.n	8007a6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a52:	4b85      	ldr	r3, [pc, #532]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007a5a:	2b08      	cmp	r3, #8
 8007a5c:	d112      	bne.n	8007a84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a5e:	4b82      	ldr	r3, [pc, #520]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a6a:	d10b      	bne.n	8007a84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a6c:	4b7e      	ldr	r3, [pc, #504]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d05b      	beq.n	8007b30 <HAL_RCC_OscConfig+0x108>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d157      	bne.n	8007b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e242      	b.n	8007f0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a8c:	d106      	bne.n	8007a9c <HAL_RCC_OscConfig+0x74>
 8007a8e:	4b76      	ldr	r3, [pc, #472]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a75      	ldr	r2, [pc, #468]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a98:	6013      	str	r3, [r2, #0]
 8007a9a:	e01d      	b.n	8007ad8 <HAL_RCC_OscConfig+0xb0>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007aa4:	d10c      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x98>
 8007aa6:	4b70      	ldr	r3, [pc, #448]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a6f      	ldr	r2, [pc, #444]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a6c      	ldr	r2, [pc, #432]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	e00b      	b.n	8007ad8 <HAL_RCC_OscConfig+0xb0>
 8007ac0:	4b69      	ldr	r3, [pc, #420]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a68      	ldr	r2, [pc, #416]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007aca:	6013      	str	r3, [r2, #0]
 8007acc:	4b66      	ldr	r3, [pc, #408]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a65      	ldr	r2, [pc, #404]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d013      	beq.n	8007b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ae0:	f7fc fdcc 	bl	800467c <HAL_GetTick>
 8007ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ae6:	e008      	b.n	8007afa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ae8:	f7fc fdc8 	bl	800467c <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	2b64      	cmp	r3, #100	@ 0x64
 8007af4:	d901      	bls.n	8007afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e207      	b.n	8007f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007afa:	4b5b      	ldr	r3, [pc, #364]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0f0      	beq.n	8007ae8 <HAL_RCC_OscConfig+0xc0>
 8007b06:	e014      	b.n	8007b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b08:	f7fc fdb8 	bl	800467c <HAL_GetTick>
 8007b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b0e:	e008      	b.n	8007b22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b10:	f7fc fdb4 	bl	800467c <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	2b64      	cmp	r3, #100	@ 0x64
 8007b1c:	d901      	bls.n	8007b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e1f3      	b.n	8007f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b22:	4b51      	ldr	r3, [pc, #324]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1f0      	bne.n	8007b10 <HAL_RCC_OscConfig+0xe8>
 8007b2e:	e000      	b.n	8007b32 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d063      	beq.n	8007c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f003 030c 	and.w	r3, r3, #12
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00b      	beq.n	8007b62 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b4a:	4b47      	ldr	r3, [pc, #284]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007b52:	2b08      	cmp	r3, #8
 8007b54:	d11c      	bne.n	8007b90 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b56:	4b44      	ldr	r3, [pc, #272]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d116      	bne.n	8007b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b62:	4b41      	ldr	r3, [pc, #260]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d005      	beq.n	8007b7a <HAL_RCC_OscConfig+0x152>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d001      	beq.n	8007b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e1c7      	b.n	8007f0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	4937      	ldr	r1, [pc, #220]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b8e:	e03a      	b.n	8007c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d020      	beq.n	8007bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b98:	4b34      	ldr	r3, [pc, #208]	@ (8007c6c <HAL_RCC_OscConfig+0x244>)
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9e:	f7fc fd6d 	bl	800467c <HAL_GetTick>
 8007ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ba4:	e008      	b.n	8007bb8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ba6:	f7fc fd69 	bl	800467c <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d901      	bls.n	8007bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e1a8      	b.n	8007f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0f0      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bc4:	4b28      	ldr	r3, [pc, #160]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	00db      	lsls	r3, r3, #3
 8007bd2:	4925      	ldr	r1, [pc, #148]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	600b      	str	r3, [r1, #0]
 8007bd8:	e015      	b.n	8007c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bda:	4b24      	ldr	r3, [pc, #144]	@ (8007c6c <HAL_RCC_OscConfig+0x244>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be0:	f7fc fd4c 	bl	800467c <HAL_GetTick>
 8007be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007be8:	f7fc fd48 	bl	800467c <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e187      	b.n	8007f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1f0      	bne.n	8007be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0308 	and.w	r3, r3, #8
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d036      	beq.n	8007c80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d016      	beq.n	8007c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c1a:	4b15      	ldr	r3, [pc, #84]	@ (8007c70 <HAL_RCC_OscConfig+0x248>)
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c20:	f7fc fd2c 	bl	800467c <HAL_GetTick>
 8007c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c26:	e008      	b.n	8007c3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c28:	f7fc fd28 	bl	800467c <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d901      	bls.n	8007c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e167      	b.n	8007f0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007c68 <HAL_RCC_OscConfig+0x240>)
 8007c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0f0      	beq.n	8007c28 <HAL_RCC_OscConfig+0x200>
 8007c46:	e01b      	b.n	8007c80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c48:	4b09      	ldr	r3, [pc, #36]	@ (8007c70 <HAL_RCC_OscConfig+0x248>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c4e:	f7fc fd15 	bl	800467c <HAL_GetTick>
 8007c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c54:	e00e      	b.n	8007c74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c56:	f7fc fd11 	bl	800467c <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d907      	bls.n	8007c74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e150      	b.n	8007f0a <HAL_RCC_OscConfig+0x4e2>
 8007c68:	40023800 	.word	0x40023800
 8007c6c:	42470000 	.word	0x42470000
 8007c70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c74:	4b88      	ldr	r3, [pc, #544]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1ea      	bne.n	8007c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 8097 	beq.w	8007dbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c92:	4b81      	ldr	r3, [pc, #516]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10f      	bne.n	8007cbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60bb      	str	r3, [r7, #8]
 8007ca2:	4b7d      	ldr	r3, [pc, #500]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca6:	4a7c      	ldr	r2, [pc, #496]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8007cae:	4b7a      	ldr	r3, [pc, #488]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cb6:	60bb      	str	r3, [r7, #8]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cbe:	4b77      	ldr	r3, [pc, #476]	@ (8007e9c <HAL_RCC_OscConfig+0x474>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d118      	bne.n	8007cfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007cca:	4b74      	ldr	r3, [pc, #464]	@ (8007e9c <HAL_RCC_OscConfig+0x474>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a73      	ldr	r2, [pc, #460]	@ (8007e9c <HAL_RCC_OscConfig+0x474>)
 8007cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cd6:	f7fc fcd1 	bl	800467c <HAL_GetTick>
 8007cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cdc:	e008      	b.n	8007cf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cde:	f7fc fccd 	bl	800467c <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d901      	bls.n	8007cf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e10c      	b.n	8007f0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cf0:	4b6a      	ldr	r3, [pc, #424]	@ (8007e9c <HAL_RCC_OscConfig+0x474>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d0f0      	beq.n	8007cde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d106      	bne.n	8007d12 <HAL_RCC_OscConfig+0x2ea>
 8007d04:	4b64      	ldr	r3, [pc, #400]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d08:	4a63      	ldr	r2, [pc, #396]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007d0a:	f043 0301 	orr.w	r3, r3, #1
 8007d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d10:	e01c      	b.n	8007d4c <HAL_RCC_OscConfig+0x324>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	2b05      	cmp	r3, #5
 8007d18:	d10c      	bne.n	8007d34 <HAL_RCC_OscConfig+0x30c>
 8007d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d1e:	4a5e      	ldr	r2, [pc, #376]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007d20:	f043 0304 	orr.w	r3, r3, #4
 8007d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d26:	4b5c      	ldr	r3, [pc, #368]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d2a:	4a5b      	ldr	r2, [pc, #364]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007d2c:	f043 0301 	orr.w	r3, r3, #1
 8007d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d32:	e00b      	b.n	8007d4c <HAL_RCC_OscConfig+0x324>
 8007d34:	4b58      	ldr	r3, [pc, #352]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d38:	4a57      	ldr	r2, [pc, #348]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007d3a:	f023 0301 	bic.w	r3, r3, #1
 8007d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d40:	4b55      	ldr	r3, [pc, #340]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d44:	4a54      	ldr	r2, [pc, #336]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007d46:	f023 0304 	bic.w	r3, r3, #4
 8007d4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d015      	beq.n	8007d80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d54:	f7fc fc92 	bl	800467c <HAL_GetTick>
 8007d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d5a:	e00a      	b.n	8007d72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d5c:	f7fc fc8e 	bl	800467c <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d901      	bls.n	8007d72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e0cb      	b.n	8007f0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d72:	4b49      	ldr	r3, [pc, #292]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0ee      	beq.n	8007d5c <HAL_RCC_OscConfig+0x334>
 8007d7e:	e014      	b.n	8007daa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d80:	f7fc fc7c 	bl	800467c <HAL_GetTick>
 8007d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d86:	e00a      	b.n	8007d9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d88:	f7fc fc78 	bl	800467c <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d901      	bls.n	8007d9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e0b5      	b.n	8007f0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1ee      	bne.n	8007d88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d105      	bne.n	8007dbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007db0:	4b39      	ldr	r3, [pc, #228]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db4:	4a38      	ldr	r2, [pc, #224]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007db6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007dba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 80a1 	beq.w	8007f08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007dc6:	4b34      	ldr	r3, [pc, #208]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f003 030c 	and.w	r3, r3, #12
 8007dce:	2b08      	cmp	r3, #8
 8007dd0:	d05c      	beq.n	8007e8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d141      	bne.n	8007e5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dda:	4b31      	ldr	r3, [pc, #196]	@ (8007ea0 <HAL_RCC_OscConfig+0x478>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007de0:	f7fc fc4c 	bl	800467c <HAL_GetTick>
 8007de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007de6:	e008      	b.n	8007dfa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007de8:	f7fc fc48 	bl	800467c <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d901      	bls.n	8007dfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e087      	b.n	8007f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dfa:	4b27      	ldr	r3, [pc, #156]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1f0      	bne.n	8007de8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	69da      	ldr	r2, [r3, #28]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e14:	019b      	lsls	r3, r3, #6
 8007e16:	431a      	orrs	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e1c:	085b      	lsrs	r3, r3, #1
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	041b      	lsls	r3, r3, #16
 8007e22:	431a      	orrs	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e28:	061b      	lsls	r3, r3, #24
 8007e2a:	491b      	ldr	r1, [pc, #108]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e30:	4b1b      	ldr	r3, [pc, #108]	@ (8007ea0 <HAL_RCC_OscConfig+0x478>)
 8007e32:	2201      	movs	r2, #1
 8007e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e36:	f7fc fc21 	bl	800467c <HAL_GetTick>
 8007e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e3c:	e008      	b.n	8007e50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e3e:	f7fc fc1d 	bl	800467c <HAL_GetTick>
 8007e42:	4602      	mov	r2, r0
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d901      	bls.n	8007e50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e05c      	b.n	8007f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e50:	4b11      	ldr	r3, [pc, #68]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d0f0      	beq.n	8007e3e <HAL_RCC_OscConfig+0x416>
 8007e5c:	e054      	b.n	8007f08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e5e:	4b10      	ldr	r3, [pc, #64]	@ (8007ea0 <HAL_RCC_OscConfig+0x478>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e64:	f7fc fc0a 	bl	800467c <HAL_GetTick>
 8007e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e6a:	e008      	b.n	8007e7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e6c:	f7fc fc06 	bl	800467c <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e045      	b.n	8007f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e7e:	4b06      	ldr	r3, [pc, #24]	@ (8007e98 <HAL_RCC_OscConfig+0x470>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1f0      	bne.n	8007e6c <HAL_RCC_OscConfig+0x444>
 8007e8a:	e03d      	b.n	8007f08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d107      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e038      	b.n	8007f0a <HAL_RCC_OscConfig+0x4e2>
 8007e98:	40023800 	.word	0x40023800
 8007e9c:	40007000 	.word	0x40007000
 8007ea0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8007f14 <HAL_RCC_OscConfig+0x4ec>)
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d028      	beq.n	8007f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d121      	bne.n	8007f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d11a      	bne.n	8007f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007eda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d111      	bne.n	8007f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eea:	085b      	lsrs	r3, r3, #1
 8007eec:	3b01      	subs	r3, #1
 8007eee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d107      	bne.n	8007f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007efe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d001      	beq.n	8007f08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e000      	b.n	8007f0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	40023800 	.word	0x40023800

08007f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e0cc      	b.n	80080c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f2c:	4b68      	ldr	r3, [pc, #416]	@ (80080d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0307 	and.w	r3, r3, #7
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d90c      	bls.n	8007f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f3a:	4b65      	ldr	r3, [pc, #404]	@ (80080d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	b2d2      	uxtb	r2, r2
 8007f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f42:	4b63      	ldr	r3, [pc, #396]	@ (80080d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d001      	beq.n	8007f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e0b8      	b.n	80080c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d020      	beq.n	8007fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0304 	and.w	r3, r3, #4
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d005      	beq.n	8007f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f6c:	4b59      	ldr	r3, [pc, #356]	@ (80080d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	4a58      	ldr	r2, [pc, #352]	@ (80080d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007f76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0308 	and.w	r3, r3, #8
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d005      	beq.n	8007f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f84:	4b53      	ldr	r3, [pc, #332]	@ (80080d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	4a52      	ldr	r2, [pc, #328]	@ (80080d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f90:	4b50      	ldr	r3, [pc, #320]	@ (80080d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	494d      	ldr	r1, [pc, #308]	@ (80080d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d044      	beq.n	8008038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d107      	bne.n	8007fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fb6:	4b47      	ldr	r3, [pc, #284]	@ (80080d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d119      	bne.n	8007ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e07f      	b.n	80080c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d003      	beq.n	8007fd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d107      	bne.n	8007fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80080d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d109      	bne.n	8007ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e06f      	b.n	80080c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80080d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0302 	and.w	r3, r3, #2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e067      	b.n	80080c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ff6:	4b37      	ldr	r3, [pc, #220]	@ (80080d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f023 0203 	bic.w	r2, r3, #3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	4934      	ldr	r1, [pc, #208]	@ (80080d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008004:	4313      	orrs	r3, r2
 8008006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008008:	f7fc fb38 	bl	800467c <HAL_GetTick>
 800800c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800800e:	e00a      	b.n	8008026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008010:	f7fc fb34 	bl	800467c <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800801e:	4293      	cmp	r3, r2
 8008020:	d901      	bls.n	8008026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e04f      	b.n	80080c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008026:	4b2b      	ldr	r3, [pc, #172]	@ (80080d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f003 020c 	and.w	r2, r3, #12
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	429a      	cmp	r2, r3
 8008036:	d1eb      	bne.n	8008010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008038:	4b25      	ldr	r3, [pc, #148]	@ (80080d0 <HAL_RCC_ClockConfig+0x1b8>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0307 	and.w	r3, r3, #7
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	429a      	cmp	r2, r3
 8008044:	d20c      	bcs.n	8008060 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008046:	4b22      	ldr	r3, [pc, #136]	@ (80080d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	b2d2      	uxtb	r2, r2
 800804c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800804e:	4b20      	ldr	r3, [pc, #128]	@ (80080d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0307 	and.w	r3, r3, #7
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	429a      	cmp	r2, r3
 800805a:	d001      	beq.n	8008060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e032      	b.n	80080c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0304 	and.w	r3, r3, #4
 8008068:	2b00      	cmp	r3, #0
 800806a:	d008      	beq.n	800807e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800806c:	4b19      	ldr	r3, [pc, #100]	@ (80080d4 <HAL_RCC_ClockConfig+0x1bc>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	4916      	ldr	r1, [pc, #88]	@ (80080d4 <HAL_RCC_ClockConfig+0x1bc>)
 800807a:	4313      	orrs	r3, r2
 800807c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0308 	and.w	r3, r3, #8
 8008086:	2b00      	cmp	r3, #0
 8008088:	d009      	beq.n	800809e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800808a:	4b12      	ldr	r3, [pc, #72]	@ (80080d4 <HAL_RCC_ClockConfig+0x1bc>)
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	00db      	lsls	r3, r3, #3
 8008098:	490e      	ldr	r1, [pc, #56]	@ (80080d4 <HAL_RCC_ClockConfig+0x1bc>)
 800809a:	4313      	orrs	r3, r2
 800809c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800809e:	f000 f821 	bl	80080e4 <HAL_RCC_GetSysClockFreq>
 80080a2:	4602      	mov	r2, r0
 80080a4:	4b0b      	ldr	r3, [pc, #44]	@ (80080d4 <HAL_RCC_ClockConfig+0x1bc>)
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	091b      	lsrs	r3, r3, #4
 80080aa:	f003 030f 	and.w	r3, r3, #15
 80080ae:	490a      	ldr	r1, [pc, #40]	@ (80080d8 <HAL_RCC_ClockConfig+0x1c0>)
 80080b0:	5ccb      	ldrb	r3, [r1, r3]
 80080b2:	fa22 f303 	lsr.w	r3, r2, r3
 80080b6:	4a09      	ldr	r2, [pc, #36]	@ (80080dc <HAL_RCC_ClockConfig+0x1c4>)
 80080b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80080ba:	4b09      	ldr	r3, [pc, #36]	@ (80080e0 <HAL_RCC_ClockConfig+0x1c8>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fc fa98 	bl	80045f4 <HAL_InitTick>

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	40023c00 	.word	0x40023c00
 80080d4:	40023800 	.word	0x40023800
 80080d8:	08010b5c 	.word	0x08010b5c
 80080dc:	20000018 	.word	0x20000018
 80080e0:	2000001c 	.word	0x2000001c

080080e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080e8:	b090      	sub	sp, #64	@ 0x40
 80080ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80080f4:	2300      	movs	r3, #0
 80080f6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080fc:	4b59      	ldr	r3, [pc, #356]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x180>)
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	f003 030c 	and.w	r3, r3, #12
 8008104:	2b08      	cmp	r3, #8
 8008106:	d00d      	beq.n	8008124 <HAL_RCC_GetSysClockFreq+0x40>
 8008108:	2b08      	cmp	r3, #8
 800810a:	f200 80a1 	bhi.w	8008250 <HAL_RCC_GetSysClockFreq+0x16c>
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <HAL_RCC_GetSysClockFreq+0x34>
 8008112:	2b04      	cmp	r3, #4
 8008114:	d003      	beq.n	800811e <HAL_RCC_GetSysClockFreq+0x3a>
 8008116:	e09b      	b.n	8008250 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008118:	4b53      	ldr	r3, [pc, #332]	@ (8008268 <HAL_RCC_GetSysClockFreq+0x184>)
 800811a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800811c:	e09b      	b.n	8008256 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800811e:	4b53      	ldr	r3, [pc, #332]	@ (800826c <HAL_RCC_GetSysClockFreq+0x188>)
 8008120:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008122:	e098      	b.n	8008256 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008124:	4b4f      	ldr	r3, [pc, #316]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x180>)
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800812c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800812e:	4b4d      	ldr	r3, [pc, #308]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x180>)
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d028      	beq.n	800818c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800813a:	4b4a      	ldr	r3, [pc, #296]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x180>)
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	099b      	lsrs	r3, r3, #6
 8008140:	2200      	movs	r2, #0
 8008142:	623b      	str	r3, [r7, #32]
 8008144:	627a      	str	r2, [r7, #36]	@ 0x24
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800814c:	2100      	movs	r1, #0
 800814e:	4b47      	ldr	r3, [pc, #284]	@ (800826c <HAL_RCC_GetSysClockFreq+0x188>)
 8008150:	fb03 f201 	mul.w	r2, r3, r1
 8008154:	2300      	movs	r3, #0
 8008156:	fb00 f303 	mul.w	r3, r0, r3
 800815a:	4413      	add	r3, r2
 800815c:	4a43      	ldr	r2, [pc, #268]	@ (800826c <HAL_RCC_GetSysClockFreq+0x188>)
 800815e:	fba0 1202 	umull	r1, r2, r0, r2
 8008162:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008164:	460a      	mov	r2, r1
 8008166:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008168:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800816a:	4413      	add	r3, r2
 800816c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800816e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008170:	2200      	movs	r2, #0
 8008172:	61bb      	str	r3, [r7, #24]
 8008174:	61fa      	str	r2, [r7, #28]
 8008176:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800817a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800817e:	f7f8 fd1b 	bl	8000bb8 <__aeabi_uldivmod>
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	4613      	mov	r3, r2
 8008188:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800818a:	e053      	b.n	8008234 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800818c:	4b35      	ldr	r3, [pc, #212]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x180>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	099b      	lsrs	r3, r3, #6
 8008192:	2200      	movs	r2, #0
 8008194:	613b      	str	r3, [r7, #16]
 8008196:	617a      	str	r2, [r7, #20]
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800819e:	f04f 0b00 	mov.w	fp, #0
 80081a2:	4652      	mov	r2, sl
 80081a4:	465b      	mov	r3, fp
 80081a6:	f04f 0000 	mov.w	r0, #0
 80081aa:	f04f 0100 	mov.w	r1, #0
 80081ae:	0159      	lsls	r1, r3, #5
 80081b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081b4:	0150      	lsls	r0, r2, #5
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	ebb2 080a 	subs.w	r8, r2, sl
 80081be:	eb63 090b 	sbc.w	r9, r3, fp
 80081c2:	f04f 0200 	mov.w	r2, #0
 80081c6:	f04f 0300 	mov.w	r3, #0
 80081ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80081ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80081d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80081d6:	ebb2 0408 	subs.w	r4, r2, r8
 80081da:	eb63 0509 	sbc.w	r5, r3, r9
 80081de:	f04f 0200 	mov.w	r2, #0
 80081e2:	f04f 0300 	mov.w	r3, #0
 80081e6:	00eb      	lsls	r3, r5, #3
 80081e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081ec:	00e2      	lsls	r2, r4, #3
 80081ee:	4614      	mov	r4, r2
 80081f0:	461d      	mov	r5, r3
 80081f2:	eb14 030a 	adds.w	r3, r4, sl
 80081f6:	603b      	str	r3, [r7, #0]
 80081f8:	eb45 030b 	adc.w	r3, r5, fp
 80081fc:	607b      	str	r3, [r7, #4]
 80081fe:	f04f 0200 	mov.w	r2, #0
 8008202:	f04f 0300 	mov.w	r3, #0
 8008206:	e9d7 4500 	ldrd	r4, r5, [r7]
 800820a:	4629      	mov	r1, r5
 800820c:	028b      	lsls	r3, r1, #10
 800820e:	4621      	mov	r1, r4
 8008210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008214:	4621      	mov	r1, r4
 8008216:	028a      	lsls	r2, r1, #10
 8008218:	4610      	mov	r0, r2
 800821a:	4619      	mov	r1, r3
 800821c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800821e:	2200      	movs	r2, #0
 8008220:	60bb      	str	r3, [r7, #8]
 8008222:	60fa      	str	r2, [r7, #12]
 8008224:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008228:	f7f8 fcc6 	bl	8000bb8 <__aeabi_uldivmod>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	4613      	mov	r3, r2
 8008232:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008234:	4b0b      	ldr	r3, [pc, #44]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x180>)
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	0c1b      	lsrs	r3, r3, #16
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	3301      	adds	r3, #1
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008244:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008248:	fbb2 f3f3 	udiv	r3, r2, r3
 800824c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800824e:	e002      	b.n	8008256 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008250:	4b05      	ldr	r3, [pc, #20]	@ (8008268 <HAL_RCC_GetSysClockFreq+0x184>)
 8008252:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008258:	4618      	mov	r0, r3
 800825a:	3740      	adds	r7, #64	@ 0x40
 800825c:	46bd      	mov	sp, r7
 800825e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008262:	bf00      	nop
 8008264:	40023800 	.word	0x40023800
 8008268:	00f42400 	.word	0x00f42400
 800826c:	017d7840 	.word	0x017d7840

08008270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008270:	b480      	push	{r7}
 8008272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008274:	4b03      	ldr	r3, [pc, #12]	@ (8008284 <HAL_RCC_GetHCLKFreq+0x14>)
 8008276:	681b      	ldr	r3, [r3, #0]
}
 8008278:	4618      	mov	r0, r3
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	20000018 	.word	0x20000018

08008288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800828c:	f7ff fff0 	bl	8008270 <HAL_RCC_GetHCLKFreq>
 8008290:	4602      	mov	r2, r0
 8008292:	4b05      	ldr	r3, [pc, #20]	@ (80082a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	0a9b      	lsrs	r3, r3, #10
 8008298:	f003 0307 	and.w	r3, r3, #7
 800829c:	4903      	ldr	r1, [pc, #12]	@ (80082ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800829e:	5ccb      	ldrb	r3, [r1, r3]
 80082a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	40023800 	.word	0x40023800
 80082ac:	08010b6c 	.word	0x08010b6c

080082b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e041      	b.n	8008346 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d106      	bne.n	80082dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7fa f9e4 	bl	80026a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2202      	movs	r2, #2
 80082e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3304      	adds	r3, #4
 80082ec:	4619      	mov	r1, r3
 80082ee:	4610      	mov	r0, r2
 80082f0:	f000 fbf4 	bl	8008adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b082      	sub	sp, #8
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e041      	b.n	80083e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	d106      	bne.n	800837a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f839 	bl	80083ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2202      	movs	r2, #2
 800837e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	3304      	adds	r3, #4
 800838a:	4619      	mov	r1, r3
 800838c:	4610      	mov	r0, r2
 800838e:	f000 fba5 	bl	8008adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d109      	bne.n	8008424 <HAL_TIM_PWM_Start+0x24>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b01      	cmp	r3, #1
 800841a:	bf14      	ite	ne
 800841c:	2301      	movne	r3, #1
 800841e:	2300      	moveq	r3, #0
 8008420:	b2db      	uxtb	r3, r3
 8008422:	e022      	b.n	800846a <HAL_TIM_PWM_Start+0x6a>
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2b04      	cmp	r3, #4
 8008428:	d109      	bne.n	800843e <HAL_TIM_PWM_Start+0x3e>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b01      	cmp	r3, #1
 8008434:	bf14      	ite	ne
 8008436:	2301      	movne	r3, #1
 8008438:	2300      	moveq	r3, #0
 800843a:	b2db      	uxtb	r3, r3
 800843c:	e015      	b.n	800846a <HAL_TIM_PWM_Start+0x6a>
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b08      	cmp	r3, #8
 8008442:	d109      	bne.n	8008458 <HAL_TIM_PWM_Start+0x58>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b01      	cmp	r3, #1
 800844e:	bf14      	ite	ne
 8008450:	2301      	movne	r3, #1
 8008452:	2300      	moveq	r3, #0
 8008454:	b2db      	uxtb	r3, r3
 8008456:	e008      	b.n	800846a <HAL_TIM_PWM_Start+0x6a>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b01      	cmp	r3, #1
 8008462:	bf14      	ite	ne
 8008464:	2301      	movne	r3, #1
 8008466:	2300      	moveq	r3, #0
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e068      	b.n	8008544 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d104      	bne.n	8008482 <HAL_TIM_PWM_Start+0x82>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008480:	e013      	b.n	80084aa <HAL_TIM_PWM_Start+0xaa>
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2b04      	cmp	r3, #4
 8008486:	d104      	bne.n	8008492 <HAL_TIM_PWM_Start+0x92>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2202      	movs	r2, #2
 800848c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008490:	e00b      	b.n	80084aa <HAL_TIM_PWM_Start+0xaa>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2b08      	cmp	r3, #8
 8008496:	d104      	bne.n	80084a2 <HAL_TIM_PWM_Start+0xa2>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2202      	movs	r2, #2
 800849c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084a0:	e003      	b.n	80084aa <HAL_TIM_PWM_Start+0xaa>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2202      	movs	r2, #2
 80084a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2201      	movs	r2, #1
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 fdc4 	bl	8009040 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a23      	ldr	r2, [pc, #140]	@ (800854c <HAL_TIM_PWM_Start+0x14c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d107      	bne.n	80084d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a1d      	ldr	r2, [pc, #116]	@ (800854c <HAL_TIM_PWM_Start+0x14c>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d018      	beq.n	800850e <HAL_TIM_PWM_Start+0x10e>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084e4:	d013      	beq.n	800850e <HAL_TIM_PWM_Start+0x10e>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a19      	ldr	r2, [pc, #100]	@ (8008550 <HAL_TIM_PWM_Start+0x150>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d00e      	beq.n	800850e <HAL_TIM_PWM_Start+0x10e>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a17      	ldr	r2, [pc, #92]	@ (8008554 <HAL_TIM_PWM_Start+0x154>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d009      	beq.n	800850e <HAL_TIM_PWM_Start+0x10e>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a16      	ldr	r2, [pc, #88]	@ (8008558 <HAL_TIM_PWM_Start+0x158>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d004      	beq.n	800850e <HAL_TIM_PWM_Start+0x10e>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a14      	ldr	r2, [pc, #80]	@ (800855c <HAL_TIM_PWM_Start+0x15c>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d111      	bne.n	8008532 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f003 0307 	and.w	r3, r3, #7
 8008518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2b06      	cmp	r3, #6
 800851e:	d010      	beq.n	8008542 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f042 0201 	orr.w	r2, r2, #1
 800852e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008530:	e007      	b.n	8008542 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f042 0201 	orr.w	r2, r2, #1
 8008540:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	40010000 	.word	0x40010000
 8008550:	40000400 	.word	0x40000400
 8008554:	40000800 	.word	0x40000800
 8008558:	40000c00 	.word	0x40000c00
 800855c:	40014000 	.word	0x40014000

08008560 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e097      	b.n	80086a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	d106      	bne.n	800858e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7fa f8ad 	bl	80026e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2202      	movs	r2, #2
 8008592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	6812      	ldr	r2, [r2, #0]
 80085a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085a4:	f023 0307 	bic.w	r3, r3, #7
 80085a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	3304      	adds	r3, #4
 80085b2:	4619      	mov	r1, r3
 80085b4:	4610      	mov	r0, r2
 80085b6:	f000 fa91 	bl	8008adc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6a1b      	ldr	r3, [r3, #32]
 80085d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	4313      	orrs	r3, r2
 80085da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085e2:	f023 0303 	bic.w	r3, r3, #3
 80085e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	689a      	ldr	r2, [r3, #8]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	021b      	lsls	r3, r3, #8
 80085f2:	4313      	orrs	r3, r2
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008600:	f023 030c 	bic.w	r3, r3, #12
 8008604:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800860c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008610:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	68da      	ldr	r2, [r3, #12]
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	021b      	lsls	r3, r3, #8
 800861c:	4313      	orrs	r3, r2
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	4313      	orrs	r3, r2
 8008622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	011a      	lsls	r2, r3, #4
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	031b      	lsls	r3, r3, #12
 8008630:	4313      	orrs	r3, r2
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	4313      	orrs	r3, r2
 8008636:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800863e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008646:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	011b      	lsls	r3, r3, #4
 8008652:	4313      	orrs	r3, r2
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	4313      	orrs	r3, r2
 8008658:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3718      	adds	r7, #24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80086bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80086c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80086cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80086d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d110      	bne.n	80086fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d102      	bne.n	80086e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80086e2:	7b7b      	ldrb	r3, [r7, #13]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d001      	beq.n	80086ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e069      	b.n	80087c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2202      	movs	r2, #2
 80086f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086fc:	e031      	b.n	8008762 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	2b04      	cmp	r3, #4
 8008702:	d110      	bne.n	8008726 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d102      	bne.n	8008710 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800870a:	7b3b      	ldrb	r3, [r7, #12]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d001      	beq.n	8008714 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e055      	b.n	80087c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2202      	movs	r2, #2
 8008718:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2202      	movs	r2, #2
 8008720:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008724:	e01d      	b.n	8008762 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008726:	7bfb      	ldrb	r3, [r7, #15]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d108      	bne.n	800873e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800872c:	7bbb      	ldrb	r3, [r7, #14]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d105      	bne.n	800873e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008732:	7b7b      	ldrb	r3, [r7, #13]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d102      	bne.n	800873e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008738:	7b3b      	ldrb	r3, [r7, #12]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d001      	beq.n	8008742 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e03e      	b.n	80087c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2202      	movs	r2, #2
 8008746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2202      	movs	r2, #2
 800874e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2202      	movs	r2, #2
 8008756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2202      	movs	r2, #2
 800875e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d003      	beq.n	8008770 <HAL_TIM_Encoder_Start+0xc4>
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	2b04      	cmp	r3, #4
 800876c:	d008      	beq.n	8008780 <HAL_TIM_Encoder_Start+0xd4>
 800876e:	e00f      	b.n	8008790 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2201      	movs	r2, #1
 8008776:	2100      	movs	r1, #0
 8008778:	4618      	mov	r0, r3
 800877a:	f000 fc61 	bl	8009040 <TIM_CCxChannelCmd>
      break;
 800877e:	e016      	b.n	80087ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2201      	movs	r2, #1
 8008786:	2104      	movs	r1, #4
 8008788:	4618      	mov	r0, r3
 800878a:	f000 fc59 	bl	8009040 <TIM_CCxChannelCmd>
      break;
 800878e:	e00e      	b.n	80087ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2201      	movs	r2, #1
 8008796:	2100      	movs	r1, #0
 8008798:	4618      	mov	r0, r3
 800879a:	f000 fc51 	bl	8009040 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2201      	movs	r2, #1
 80087a4:	2104      	movs	r1, #4
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 fc4a 	bl	8009040 <TIM_CCxChannelCmd>
      break;
 80087ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f042 0201 	orr.w	r2, r2, #1
 80087bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087d4:	2300      	movs	r3, #0
 80087d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d101      	bne.n	80087e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087e2:	2302      	movs	r3, #2
 80087e4:	e0ae      	b.n	8008944 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b0c      	cmp	r3, #12
 80087f2:	f200 809f 	bhi.w	8008934 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80087f6:	a201      	add	r2, pc, #4	@ (adr r2, 80087fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fc:	08008831 	.word	0x08008831
 8008800:	08008935 	.word	0x08008935
 8008804:	08008935 	.word	0x08008935
 8008808:	08008935 	.word	0x08008935
 800880c:	08008871 	.word	0x08008871
 8008810:	08008935 	.word	0x08008935
 8008814:	08008935 	.word	0x08008935
 8008818:	08008935 	.word	0x08008935
 800881c:	080088b3 	.word	0x080088b3
 8008820:	08008935 	.word	0x08008935
 8008824:	08008935 	.word	0x08008935
 8008828:	08008935 	.word	0x08008935
 800882c:	080088f3 	.word	0x080088f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68b9      	ldr	r1, [r7, #8]
 8008836:	4618      	mov	r0, r3
 8008838:	f000 f9dc 	bl	8008bf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	699a      	ldr	r2, [r3, #24]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f042 0208 	orr.w	r2, r2, #8
 800884a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	699a      	ldr	r2, [r3, #24]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f022 0204 	bic.w	r2, r2, #4
 800885a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6999      	ldr	r1, [r3, #24]
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	691a      	ldr	r2, [r3, #16]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	430a      	orrs	r2, r1
 800886c:	619a      	str	r2, [r3, #24]
      break;
 800886e:	e064      	b.n	800893a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68b9      	ldr	r1, [r7, #8]
 8008876:	4618      	mov	r0, r3
 8008878:	f000 fa22 	bl	8008cc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	699a      	ldr	r2, [r3, #24]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800888a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	699a      	ldr	r2, [r3, #24]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800889a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6999      	ldr	r1, [r3, #24]
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	021a      	lsls	r2, r3, #8
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	619a      	str	r2, [r3, #24]
      break;
 80088b0:	e043      	b.n	800893a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68b9      	ldr	r1, [r7, #8]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f000 fa6d 	bl	8008d98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69da      	ldr	r2, [r3, #28]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f042 0208 	orr.w	r2, r2, #8
 80088cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69da      	ldr	r2, [r3, #28]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f022 0204 	bic.w	r2, r2, #4
 80088dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	69d9      	ldr	r1, [r3, #28]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	691a      	ldr	r2, [r3, #16]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	430a      	orrs	r2, r1
 80088ee:	61da      	str	r2, [r3, #28]
      break;
 80088f0:	e023      	b.n	800893a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68b9      	ldr	r1, [r7, #8]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 fab7 	bl	8008e6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69da      	ldr	r2, [r3, #28]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800890c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	69da      	ldr	r2, [r3, #28]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800891c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69d9      	ldr	r1, [r3, #28]
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	021a      	lsls	r2, r3, #8
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	61da      	str	r2, [r3, #28]
      break;
 8008932:	e002      	b.n	800893a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	75fb      	strb	r3, [r7, #23]
      break;
 8008938:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008942:	7dfb      	ldrb	r3, [r7, #23]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3718      	adds	r7, #24
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008960:	2b01      	cmp	r3, #1
 8008962:	d101      	bne.n	8008968 <HAL_TIM_ConfigClockSource+0x1c>
 8008964:	2302      	movs	r3, #2
 8008966:	e0b4      	b.n	8008ad2 <HAL_TIM_ConfigClockSource+0x186>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2202      	movs	r2, #2
 8008974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008986:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800898e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089a0:	d03e      	beq.n	8008a20 <HAL_TIM_ConfigClockSource+0xd4>
 80089a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089a6:	f200 8087 	bhi.w	8008ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80089aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ae:	f000 8086 	beq.w	8008abe <HAL_TIM_ConfigClockSource+0x172>
 80089b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089b6:	d87f      	bhi.n	8008ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80089b8:	2b70      	cmp	r3, #112	@ 0x70
 80089ba:	d01a      	beq.n	80089f2 <HAL_TIM_ConfigClockSource+0xa6>
 80089bc:	2b70      	cmp	r3, #112	@ 0x70
 80089be:	d87b      	bhi.n	8008ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80089c0:	2b60      	cmp	r3, #96	@ 0x60
 80089c2:	d050      	beq.n	8008a66 <HAL_TIM_ConfigClockSource+0x11a>
 80089c4:	2b60      	cmp	r3, #96	@ 0x60
 80089c6:	d877      	bhi.n	8008ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80089c8:	2b50      	cmp	r3, #80	@ 0x50
 80089ca:	d03c      	beq.n	8008a46 <HAL_TIM_ConfigClockSource+0xfa>
 80089cc:	2b50      	cmp	r3, #80	@ 0x50
 80089ce:	d873      	bhi.n	8008ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80089d0:	2b40      	cmp	r3, #64	@ 0x40
 80089d2:	d058      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x13a>
 80089d4:	2b40      	cmp	r3, #64	@ 0x40
 80089d6:	d86f      	bhi.n	8008ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80089d8:	2b30      	cmp	r3, #48	@ 0x30
 80089da:	d064      	beq.n	8008aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80089dc:	2b30      	cmp	r3, #48	@ 0x30
 80089de:	d86b      	bhi.n	8008ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80089e0:	2b20      	cmp	r3, #32
 80089e2:	d060      	beq.n	8008aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80089e4:	2b20      	cmp	r3, #32
 80089e6:	d867      	bhi.n	8008ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d05c      	beq.n	8008aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80089ec:	2b10      	cmp	r3, #16
 80089ee:	d05a      	beq.n	8008aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80089f0:	e062      	b.n	8008ab8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a02:	f000 fafd 	bl	8009000 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	609a      	str	r2, [r3, #8]
      break;
 8008a1e:	e04f      	b.n	8008ac0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a30:	f000 fae6 	bl	8009000 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689a      	ldr	r2, [r3, #8]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a42:	609a      	str	r2, [r3, #8]
      break;
 8008a44:	e03c      	b.n	8008ac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a52:	461a      	mov	r2, r3
 8008a54:	f000 fa5a 	bl	8008f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2150      	movs	r1, #80	@ 0x50
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 fab3 	bl	8008fca <TIM_ITRx_SetConfig>
      break;
 8008a64:	e02c      	b.n	8008ac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a72:	461a      	mov	r2, r3
 8008a74:	f000 fa79 	bl	8008f6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2160      	movs	r1, #96	@ 0x60
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 faa3 	bl	8008fca <TIM_ITRx_SetConfig>
      break;
 8008a84:	e01c      	b.n	8008ac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a92:	461a      	mov	r2, r3
 8008a94:	f000 fa3a 	bl	8008f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2140      	movs	r1, #64	@ 0x40
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 fa93 	bl	8008fca <TIM_ITRx_SetConfig>
      break;
 8008aa4:	e00c      	b.n	8008ac0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	f000 fa8a 	bl	8008fca <TIM_ITRx_SetConfig>
      break;
 8008ab6:	e003      	b.n	8008ac0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	73fb      	strb	r3, [r7, #15]
      break;
 8008abc:	e000      	b.n	8008ac0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008abe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
	...

08008adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a3a      	ldr	r2, [pc, #232]	@ (8008bd8 <TIM_Base_SetConfig+0xfc>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d00f      	beq.n	8008b14 <TIM_Base_SetConfig+0x38>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008afa:	d00b      	beq.n	8008b14 <TIM_Base_SetConfig+0x38>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a37      	ldr	r2, [pc, #220]	@ (8008bdc <TIM_Base_SetConfig+0x100>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d007      	beq.n	8008b14 <TIM_Base_SetConfig+0x38>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a36      	ldr	r2, [pc, #216]	@ (8008be0 <TIM_Base_SetConfig+0x104>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d003      	beq.n	8008b14 <TIM_Base_SetConfig+0x38>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a35      	ldr	r2, [pc, #212]	@ (8008be4 <TIM_Base_SetConfig+0x108>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d108      	bne.n	8008b26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a2b      	ldr	r2, [pc, #172]	@ (8008bd8 <TIM_Base_SetConfig+0xfc>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d01b      	beq.n	8008b66 <TIM_Base_SetConfig+0x8a>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b34:	d017      	beq.n	8008b66 <TIM_Base_SetConfig+0x8a>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a28      	ldr	r2, [pc, #160]	@ (8008bdc <TIM_Base_SetConfig+0x100>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d013      	beq.n	8008b66 <TIM_Base_SetConfig+0x8a>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a27      	ldr	r2, [pc, #156]	@ (8008be0 <TIM_Base_SetConfig+0x104>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d00f      	beq.n	8008b66 <TIM_Base_SetConfig+0x8a>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a26      	ldr	r2, [pc, #152]	@ (8008be4 <TIM_Base_SetConfig+0x108>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d00b      	beq.n	8008b66 <TIM_Base_SetConfig+0x8a>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a25      	ldr	r2, [pc, #148]	@ (8008be8 <TIM_Base_SetConfig+0x10c>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d007      	beq.n	8008b66 <TIM_Base_SetConfig+0x8a>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a24      	ldr	r2, [pc, #144]	@ (8008bec <TIM_Base_SetConfig+0x110>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d003      	beq.n	8008b66 <TIM_Base_SetConfig+0x8a>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a23      	ldr	r2, [pc, #140]	@ (8008bf0 <TIM_Base_SetConfig+0x114>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d108      	bne.n	8008b78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8008bd8 <TIM_Base_SetConfig+0xfc>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d103      	bne.n	8008bac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	691a      	ldr	r2, [r3, #16]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d105      	bne.n	8008bca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	f023 0201 	bic.w	r2, r3, #1
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	611a      	str	r2, [r3, #16]
  }
}
 8008bca:	bf00      	nop
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	40010000 	.word	0x40010000
 8008bdc:	40000400 	.word	0x40000400
 8008be0:	40000800 	.word	0x40000800
 8008be4:	40000c00 	.word	0x40000c00
 8008be8:	40014000 	.word	0x40014000
 8008bec:	40014400 	.word	0x40014400
 8008bf0:	40014800 	.word	0x40014800

08008bf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b087      	sub	sp, #28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a1b      	ldr	r3, [r3, #32]
 8008c02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a1b      	ldr	r3, [r3, #32]
 8008c08:	f023 0201 	bic.w	r2, r3, #1
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f023 0303 	bic.w	r3, r3, #3
 8008c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f023 0302 	bic.w	r3, r3, #2
 8008c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8008cbc <TIM_OC1_SetConfig+0xc8>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d10c      	bne.n	8008c6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f023 0308 	bic.w	r3, r3, #8
 8008c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f023 0304 	bic.w	r3, r3, #4
 8008c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a13      	ldr	r2, [pc, #76]	@ (8008cbc <TIM_OC1_SetConfig+0xc8>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d111      	bne.n	8008c96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	621a      	str	r2, [r3, #32]
}
 8008cb0:	bf00      	nop
 8008cb2:	371c      	adds	r7, #28
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	40010000 	.word	0x40010000

08008cc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a1b      	ldr	r3, [r3, #32]
 8008cd4:	f023 0210 	bic.w	r2, r3, #16
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	021b      	lsls	r3, r3, #8
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	f023 0320 	bic.w	r3, r3, #32
 8008d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	011b      	lsls	r3, r3, #4
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8008d94 <TIM_OC2_SetConfig+0xd4>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d10d      	bne.n	8008d3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	011b      	lsls	r3, r3, #4
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a15      	ldr	r2, [pc, #84]	@ (8008d94 <TIM_OC2_SetConfig+0xd4>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d113      	bne.n	8008d6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	685a      	ldr	r2, [r3, #4]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	621a      	str	r2, [r3, #32]
}
 8008d86:	bf00      	nop
 8008d88:	371c      	adds	r7, #28
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	40010000 	.word	0x40010000

08008d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b087      	sub	sp, #28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a1b      	ldr	r3, [r3, #32]
 8008dac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	69db      	ldr	r3, [r3, #28]
 8008dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f023 0303 	bic.w	r3, r3, #3
 8008dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	021b      	lsls	r3, r3, #8
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e68 <TIM_OC3_SetConfig+0xd0>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d10d      	bne.n	8008e12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	021b      	lsls	r3, r3, #8
 8008e04:	697a      	ldr	r2, [r7, #20]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a14      	ldr	r2, [pc, #80]	@ (8008e68 <TIM_OC3_SetConfig+0xd0>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d113      	bne.n	8008e42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	011b      	lsls	r3, r3, #4
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	011b      	lsls	r3, r3, #4
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	621a      	str	r2, [r3, #32]
}
 8008e5c:	bf00      	nop
 8008e5e:	371c      	adds	r7, #28
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	40010000 	.word	0x40010000

08008e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a1b      	ldr	r3, [r3, #32]
 8008e80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	69db      	ldr	r3, [r3, #28]
 8008e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	021b      	lsls	r3, r3, #8
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008eb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	031b      	lsls	r3, r3, #12
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a10      	ldr	r2, [pc, #64]	@ (8008f08 <TIM_OC4_SetConfig+0x9c>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d109      	bne.n	8008ee0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ed2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	695b      	ldr	r3, [r3, #20]
 8008ed8:	019b      	lsls	r3, r3, #6
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	693a      	ldr	r2, [r7, #16]
 8008ef8:	621a      	str	r2, [r3, #32]
}
 8008efa:	bf00      	nop
 8008efc:	371c      	adds	r7, #28
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	40010000 	.word	0x40010000

08008f0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6a1b      	ldr	r3, [r3, #32]
 8008f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6a1b      	ldr	r3, [r3, #32]
 8008f22:	f023 0201 	bic.w	r2, r3, #1
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	011b      	lsls	r3, r3, #4
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	f023 030a 	bic.w	r3, r3, #10
 8008f48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	621a      	str	r2, [r3, #32]
}
 8008f5e:	bf00      	nop
 8008f60:	371c      	adds	r7, #28
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b087      	sub	sp, #28
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	60f8      	str	r0, [r7, #12]
 8008f72:	60b9      	str	r1, [r7, #8]
 8008f74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6a1b      	ldr	r3, [r3, #32]
 8008f80:	f023 0210 	bic.w	r2, r3, #16
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	031b      	lsls	r3, r3, #12
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008fa6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	011b      	lsls	r3, r3, #4
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	621a      	str	r2, [r3, #32]
}
 8008fbe:	bf00      	nop
 8008fc0:	371c      	adds	r7, #28
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b085      	sub	sp, #20
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	f043 0307 	orr.w	r3, r3, #7
 8008fec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	609a      	str	r2, [r3, #8]
}
 8008ff4:	bf00      	nop
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009000:	b480      	push	{r7}
 8009002:	b087      	sub	sp, #28
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
 800900c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800901a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	021a      	lsls	r2, r3, #8
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	431a      	orrs	r2, r3
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	4313      	orrs	r3, r2
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	4313      	orrs	r3, r2
 800902c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	609a      	str	r2, [r3, #8]
}
 8009034:	bf00      	nop
 8009036:	371c      	adds	r7, #28
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009040:	b480      	push	{r7}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	f003 031f 	and.w	r3, r3, #31
 8009052:	2201      	movs	r2, #1
 8009054:	fa02 f303 	lsl.w	r3, r2, r3
 8009058:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6a1a      	ldr	r2, [r3, #32]
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	43db      	mvns	r3, r3
 8009062:	401a      	ands	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6a1a      	ldr	r2, [r3, #32]
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f003 031f 	and.w	r3, r3, #31
 8009072:	6879      	ldr	r1, [r7, #4]
 8009074:	fa01 f303 	lsl.w	r3, r1, r3
 8009078:	431a      	orrs	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	621a      	str	r2, [r3, #32]
}
 800907e:	bf00      	nop
 8009080:	371c      	adds	r7, #28
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
	...

0800908c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800909c:	2b01      	cmp	r3, #1
 800909e:	d101      	bne.n	80090a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090a0:	2302      	movs	r3, #2
 80090a2:	e050      	b.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2202      	movs	r2, #2
 80090b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a1c      	ldr	r2, [pc, #112]	@ (8009154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d018      	beq.n	800911a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090f0:	d013      	beq.n	800911a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a18      	ldr	r2, [pc, #96]	@ (8009158 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d00e      	beq.n	800911a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a16      	ldr	r2, [pc, #88]	@ (800915c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d009      	beq.n	800911a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a15      	ldr	r2, [pc, #84]	@ (8009160 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d004      	beq.n	800911a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a13      	ldr	r2, [pc, #76]	@ (8009164 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d10c      	bne.n	8009134 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009120:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	4313      	orrs	r3, r2
 800912a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	40010000 	.word	0x40010000
 8009158:	40000400 	.word	0x40000400
 800915c:	40000800 	.word	0x40000800
 8009160:	40000c00 	.word	0x40000c00
 8009164:	40014000 	.word	0x40014000

08009168 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009172:	2300      	movs	r3, #0
 8009174:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800917c:	2b01      	cmp	r3, #1
 800917e:	d101      	bne.n	8009184 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009180:	2302      	movs	r3, #2
 8009182:	e03d      	b.n	8009200 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	4313      	orrs	r3, r2
 8009198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	695b      	ldr	r3, [r3, #20]
 80091dc:	4313      	orrs	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	69db      	ldr	r3, [r3, #28]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3714      	adds	r7, #20
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800920c:	b084      	sub	sp, #16
 800920e:	b580      	push	{r7, lr}
 8009210:	b084      	sub	sp, #16
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	f107 001c 	add.w	r0, r7, #28
 800921a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800921e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009222:	2b01      	cmp	r3, #1
 8009224:	d123      	bne.n	800926e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800922a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800923a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800924e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009252:	2b01      	cmp	r3, #1
 8009254:	d105      	bne.n	8009262 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f001 fae8 	bl	800a838 <USB_CoreReset>
 8009268:	4603      	mov	r3, r0
 800926a:	73fb      	strb	r3, [r7, #15]
 800926c:	e01b      	b.n	80092a6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f001 fadc 	bl	800a838 <USB_CoreReset>
 8009280:	4603      	mov	r3, r0
 8009282:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009284:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009288:	2b00      	cmp	r3, #0
 800928a:	d106      	bne.n	800929a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009290:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	639a      	str	r2, [r3, #56]	@ 0x38
 8009298:	e005      	b.n	80092a6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800929e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80092a6:	7fbb      	ldrb	r3, [r7, #30]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d10b      	bne.n	80092c4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	f043 0206 	orr.w	r2, r3, #6
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	f043 0220 	orr.w	r2, r3, #32
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092d0:	b004      	add	sp, #16
 80092d2:	4770      	bx	lr

080092d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b087      	sub	sp, #28
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	4613      	mov	r3, r2
 80092e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80092e2:	79fb      	ldrb	r3, [r7, #7]
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d165      	bne.n	80093b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	4a41      	ldr	r2, [pc, #260]	@ (80093f0 <USB_SetTurnaroundTime+0x11c>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d906      	bls.n	80092fe <USB_SetTurnaroundTime+0x2a>
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	4a40      	ldr	r2, [pc, #256]	@ (80093f4 <USB_SetTurnaroundTime+0x120>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d202      	bcs.n	80092fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80092f8:	230f      	movs	r3, #15
 80092fa:	617b      	str	r3, [r7, #20]
 80092fc:	e062      	b.n	80093c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	4a3c      	ldr	r2, [pc, #240]	@ (80093f4 <USB_SetTurnaroundTime+0x120>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d306      	bcc.n	8009314 <USB_SetTurnaroundTime+0x40>
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	4a3b      	ldr	r2, [pc, #236]	@ (80093f8 <USB_SetTurnaroundTime+0x124>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d202      	bcs.n	8009314 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800930e:	230e      	movs	r3, #14
 8009310:	617b      	str	r3, [r7, #20]
 8009312:	e057      	b.n	80093c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	4a38      	ldr	r2, [pc, #224]	@ (80093f8 <USB_SetTurnaroundTime+0x124>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d306      	bcc.n	800932a <USB_SetTurnaroundTime+0x56>
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	4a37      	ldr	r2, [pc, #220]	@ (80093fc <USB_SetTurnaroundTime+0x128>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d202      	bcs.n	800932a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009324:	230d      	movs	r3, #13
 8009326:	617b      	str	r3, [r7, #20]
 8009328:	e04c      	b.n	80093c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	4a33      	ldr	r2, [pc, #204]	@ (80093fc <USB_SetTurnaroundTime+0x128>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d306      	bcc.n	8009340 <USB_SetTurnaroundTime+0x6c>
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	4a32      	ldr	r2, [pc, #200]	@ (8009400 <USB_SetTurnaroundTime+0x12c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d802      	bhi.n	8009340 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800933a:	230c      	movs	r3, #12
 800933c:	617b      	str	r3, [r7, #20]
 800933e:	e041      	b.n	80093c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	4a2f      	ldr	r2, [pc, #188]	@ (8009400 <USB_SetTurnaroundTime+0x12c>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d906      	bls.n	8009356 <USB_SetTurnaroundTime+0x82>
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	4a2e      	ldr	r2, [pc, #184]	@ (8009404 <USB_SetTurnaroundTime+0x130>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d802      	bhi.n	8009356 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009350:	230b      	movs	r3, #11
 8009352:	617b      	str	r3, [r7, #20]
 8009354:	e036      	b.n	80093c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	4a2a      	ldr	r2, [pc, #168]	@ (8009404 <USB_SetTurnaroundTime+0x130>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d906      	bls.n	800936c <USB_SetTurnaroundTime+0x98>
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	4a29      	ldr	r2, [pc, #164]	@ (8009408 <USB_SetTurnaroundTime+0x134>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d802      	bhi.n	800936c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009366:	230a      	movs	r3, #10
 8009368:	617b      	str	r3, [r7, #20]
 800936a:	e02b      	b.n	80093c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	4a26      	ldr	r2, [pc, #152]	@ (8009408 <USB_SetTurnaroundTime+0x134>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d906      	bls.n	8009382 <USB_SetTurnaroundTime+0xae>
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	4a25      	ldr	r2, [pc, #148]	@ (800940c <USB_SetTurnaroundTime+0x138>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d202      	bcs.n	8009382 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800937c:	2309      	movs	r3, #9
 800937e:	617b      	str	r3, [r7, #20]
 8009380:	e020      	b.n	80093c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	4a21      	ldr	r2, [pc, #132]	@ (800940c <USB_SetTurnaroundTime+0x138>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d306      	bcc.n	8009398 <USB_SetTurnaroundTime+0xc4>
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	4a20      	ldr	r2, [pc, #128]	@ (8009410 <USB_SetTurnaroundTime+0x13c>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d802      	bhi.n	8009398 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009392:	2308      	movs	r3, #8
 8009394:	617b      	str	r3, [r7, #20]
 8009396:	e015      	b.n	80093c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	4a1d      	ldr	r2, [pc, #116]	@ (8009410 <USB_SetTurnaroundTime+0x13c>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d906      	bls.n	80093ae <USB_SetTurnaroundTime+0xda>
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	4a1c      	ldr	r2, [pc, #112]	@ (8009414 <USB_SetTurnaroundTime+0x140>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d202      	bcs.n	80093ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80093a8:	2307      	movs	r3, #7
 80093aa:	617b      	str	r3, [r7, #20]
 80093ac:	e00a      	b.n	80093c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80093ae:	2306      	movs	r3, #6
 80093b0:	617b      	str	r3, [r7, #20]
 80093b2:	e007      	b.n	80093c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80093b4:	79fb      	ldrb	r3, [r7, #7]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d102      	bne.n	80093c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80093ba:	2309      	movs	r3, #9
 80093bc:	617b      	str	r3, [r7, #20]
 80093be:	e001      	b.n	80093c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80093c0:	2309      	movs	r3, #9
 80093c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	68da      	ldr	r2, [r3, #12]
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	029b      	lsls	r3, r3, #10
 80093d8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80093dc:	431a      	orrs	r2, r3
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	371c      	adds	r7, #28
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	00d8acbf 	.word	0x00d8acbf
 80093f4:	00e4e1c0 	.word	0x00e4e1c0
 80093f8:	00f42400 	.word	0x00f42400
 80093fc:	01067380 	.word	0x01067380
 8009400:	011a499f 	.word	0x011a499f
 8009404:	01312cff 	.word	0x01312cff
 8009408:	014ca43f 	.word	0x014ca43f
 800940c:	016e3600 	.word	0x016e3600
 8009410:	01a6ab1f 	.word	0x01a6ab1f
 8009414:	01e84800 	.word	0x01e84800

08009418 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f043 0201 	orr.w	r2, r3, #1
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800943a:	b480      	push	{r7}
 800943c:	b083      	sub	sp, #12
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f023 0201 	bic.w	r2, r3, #1
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009468:	2300      	movs	r3, #0
 800946a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009478:	78fb      	ldrb	r3, [r7, #3]
 800947a:	2b01      	cmp	r3, #1
 800947c:	d115      	bne.n	80094aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800948a:	200a      	movs	r0, #10
 800948c:	f7fb f902 	bl	8004694 <HAL_Delay>
      ms += 10U;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	330a      	adds	r3, #10
 8009494:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f001 f93f 	bl	800a71a <USB_GetMode>
 800949c:	4603      	mov	r3, r0
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d01e      	beq.n	80094e0 <USB_SetCurrentMode+0x84>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80094a6:	d9f0      	bls.n	800948a <USB_SetCurrentMode+0x2e>
 80094a8:	e01a      	b.n	80094e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80094aa:	78fb      	ldrb	r3, [r7, #3]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d115      	bne.n	80094dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80094bc:	200a      	movs	r0, #10
 80094be:	f7fb f8e9 	bl	8004694 <HAL_Delay>
      ms += 10U;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	330a      	adds	r3, #10
 80094c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f001 f926 	bl	800a71a <USB_GetMode>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d005      	beq.n	80094e0 <USB_SetCurrentMode+0x84>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2bc7      	cmp	r3, #199	@ 0xc7
 80094d8:	d9f0      	bls.n	80094bc <USB_SetCurrentMode+0x60>
 80094da:	e001      	b.n	80094e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e005      	b.n	80094ec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2bc8      	cmp	r3, #200	@ 0xc8
 80094e4:	d101      	bne.n	80094ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e000      	b.n	80094ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094f4:	b084      	sub	sp, #16
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b086      	sub	sp, #24
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009502:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800950e:	2300      	movs	r3, #0
 8009510:	613b      	str	r3, [r7, #16]
 8009512:	e009      	b.n	8009528 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	3340      	adds	r3, #64	@ 0x40
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	2200      	movs	r2, #0
 8009520:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	3301      	adds	r3, #1
 8009526:	613b      	str	r3, [r7, #16]
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	2b0e      	cmp	r3, #14
 800952c:	d9f2      	bls.n	8009514 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800952e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009532:	2b00      	cmp	r3, #0
 8009534:	d11c      	bne.n	8009570 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009544:	f043 0302 	orr.w	r3, r3, #2
 8009548:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800954e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800955a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009566:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	639a      	str	r2, [r3, #56]	@ 0x38
 800956e:	e00b      	b.n	8009588 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009574:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009580:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800958e:	461a      	mov	r2, r3
 8009590:	2300      	movs	r3, #0
 8009592:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009594:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009598:	2b01      	cmp	r3, #1
 800959a:	d10d      	bne.n	80095b8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800959c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d104      	bne.n	80095ae <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80095a4:	2100      	movs	r1, #0
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f968 	bl	800987c <USB_SetDevSpeed>
 80095ac:	e008      	b.n	80095c0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80095ae:	2101      	movs	r1, #1
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f963 	bl	800987c <USB_SetDevSpeed>
 80095b6:	e003      	b.n	80095c0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80095b8:	2103      	movs	r1, #3
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f95e 	bl	800987c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80095c0:	2110      	movs	r1, #16
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f8fa 	bl	80097bc <USB_FlushTxFifo>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d001      	beq.n	80095d2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f924 	bl	8009820 <USB_FlushRxFifo>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095e8:	461a      	mov	r2, r3
 80095ea:	2300      	movs	r3, #0
 80095ec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095f4:	461a      	mov	r2, r3
 80095f6:	2300      	movs	r3, #0
 80095f8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009600:	461a      	mov	r2, r3
 8009602:	2300      	movs	r3, #0
 8009604:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009606:	2300      	movs	r3, #0
 8009608:	613b      	str	r3, [r7, #16]
 800960a:	e043      	b.n	8009694 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	4413      	add	r3, r2
 8009614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800961e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009622:	d118      	bne.n	8009656 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10a      	bne.n	8009640 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	015a      	lsls	r2, r3, #5
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	4413      	add	r3, r2
 8009632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009636:	461a      	mov	r2, r3
 8009638:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800963c:	6013      	str	r3, [r2, #0]
 800963e:	e013      	b.n	8009668 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	015a      	lsls	r2, r3, #5
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	4413      	add	r3, r2
 8009648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800964c:	461a      	mov	r2, r3
 800964e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009652:	6013      	str	r3, [r2, #0]
 8009654:	e008      	b.n	8009668 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	015a      	lsls	r2, r3, #5
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	4413      	add	r3, r2
 800965e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009662:	461a      	mov	r2, r3
 8009664:	2300      	movs	r3, #0
 8009666:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4413      	add	r3, r2
 8009670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009674:	461a      	mov	r2, r3
 8009676:	2300      	movs	r3, #0
 8009678:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	015a      	lsls	r2, r3, #5
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	4413      	add	r3, r2
 8009682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009686:	461a      	mov	r2, r3
 8009688:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800968c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	3301      	adds	r3, #1
 8009692:	613b      	str	r3, [r7, #16]
 8009694:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009698:	461a      	mov	r2, r3
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	4293      	cmp	r3, r2
 800969e:	d3b5      	bcc.n	800960c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096a0:	2300      	movs	r3, #0
 80096a2:	613b      	str	r3, [r7, #16]
 80096a4:	e043      	b.n	800972e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80096b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096bc:	d118      	bne.n	80096f0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10a      	bne.n	80096da <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	015a      	lsls	r2, r3, #5
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	4413      	add	r3, r2
 80096cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096d0:	461a      	mov	r2, r3
 80096d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80096d6:	6013      	str	r3, [r2, #0]
 80096d8:	e013      	b.n	8009702 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	015a      	lsls	r2, r3, #5
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096e6:	461a      	mov	r2, r3
 80096e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80096ec:	6013      	str	r3, [r2, #0]
 80096ee:	e008      	b.n	8009702 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	015a      	lsls	r2, r3, #5
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	4413      	add	r3, r2
 80096f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096fc:	461a      	mov	r2, r3
 80096fe:	2300      	movs	r3, #0
 8009700:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	015a      	lsls	r2, r3, #5
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4413      	add	r3, r2
 800970a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800970e:	461a      	mov	r2, r3
 8009710:	2300      	movs	r3, #0
 8009712:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	4413      	add	r3, r2
 800971c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009720:	461a      	mov	r2, r3
 8009722:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009726:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	3301      	adds	r3, #1
 800972c:	613b      	str	r3, [r7, #16]
 800972e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009732:	461a      	mov	r2, r3
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	4293      	cmp	r3, r2
 8009738:	d3b5      	bcc.n	80096a6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800974c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800975a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800975c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009760:	2b00      	cmp	r3, #0
 8009762:	d105      	bne.n	8009770 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	f043 0210 	orr.w	r2, r3, #16
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	699a      	ldr	r2, [r3, #24]
 8009774:	4b10      	ldr	r3, [pc, #64]	@ (80097b8 <USB_DevInit+0x2c4>)
 8009776:	4313      	orrs	r3, r2
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800977c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009780:	2b00      	cmp	r3, #0
 8009782:	d005      	beq.n	8009790 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	f043 0208 	orr.w	r2, r3, #8
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009790:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009794:	2b01      	cmp	r3, #1
 8009796:	d107      	bne.n	80097a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097a0:	f043 0304 	orr.w	r3, r3, #4
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80097a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3718      	adds	r7, #24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097b4:	b004      	add	sp, #16
 80097b6:	4770      	bx	lr
 80097b8:	803c3800 	.word	0x803c3800

080097bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	3301      	adds	r3, #1
 80097ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097d6:	d901      	bls.n	80097dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80097d8:	2303      	movs	r3, #3
 80097da:	e01b      	b.n	8009814 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	daf2      	bge.n	80097ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80097e4:	2300      	movs	r3, #0
 80097e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	019b      	lsls	r3, r3, #6
 80097ec:	f043 0220 	orr.w	r2, r3, #32
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	3301      	adds	r3, #1
 80097f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009800:	d901      	bls.n	8009806 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009802:	2303      	movs	r3, #3
 8009804:	e006      	b.n	8009814 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	f003 0320 	and.w	r3, r3, #32
 800980e:	2b20      	cmp	r3, #32
 8009810:	d0f0      	beq.n	80097f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009828:	2300      	movs	r3, #0
 800982a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	3301      	adds	r3, #1
 8009830:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009838:	d901      	bls.n	800983e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800983a:	2303      	movs	r3, #3
 800983c:	e018      	b.n	8009870 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	daf2      	bge.n	800982c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009846:	2300      	movs	r3, #0
 8009848:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2210      	movs	r2, #16
 800984e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	3301      	adds	r3, #1
 8009854:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800985c:	d901      	bls.n	8009862 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e006      	b.n	8009870 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	f003 0310 	and.w	r3, r3, #16
 800986a:	2b10      	cmp	r3, #16
 800986c:	d0f0      	beq.n	8009850 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	460b      	mov	r3, r1
 8009886:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	78fb      	ldrb	r3, [r7, #3]
 8009896:	68f9      	ldr	r1, [r7, #12]
 8009898:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800989c:	4313      	orrs	r3, r2
 800989e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b087      	sub	sp, #28
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	f003 0306 	and.w	r3, r3, #6
 80098c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d102      	bne.n	80098d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80098ce:	2300      	movs	r3, #0
 80098d0:	75fb      	strb	r3, [r7, #23]
 80098d2:	e00a      	b.n	80098ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d002      	beq.n	80098e0 <USB_GetDevSpeed+0x32>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2b06      	cmp	r3, #6
 80098de:	d102      	bne.n	80098e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80098e0:	2302      	movs	r3, #2
 80098e2:	75fb      	strb	r3, [r7, #23]
 80098e4:	e001      	b.n	80098ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80098e6:	230f      	movs	r3, #15
 80098e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	371c      	adds	r7, #28
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	785b      	ldrb	r3, [r3, #1]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d13a      	bne.n	800998a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800991a:	69da      	ldr	r2, [r3, #28]
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	f003 030f 	and.w	r3, r3, #15
 8009924:	2101      	movs	r1, #1
 8009926:	fa01 f303 	lsl.w	r3, r1, r3
 800992a:	b29b      	uxth	r3, r3
 800992c:	68f9      	ldr	r1, [r7, #12]
 800992e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009932:	4313      	orrs	r3, r2
 8009934:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	015a      	lsls	r2, r3, #5
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	4413      	add	r3, r2
 800993e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d155      	bne.n	80099f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	4413      	add	r3, r2
 8009954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	791b      	ldrb	r3, [r3, #4]
 8009966:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009968:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	059b      	lsls	r3, r3, #22
 800996e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009970:	4313      	orrs	r3, r2
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	0151      	lsls	r1, r2, #5
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	440a      	add	r2, r1
 800997a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800997e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009986:	6013      	str	r3, [r2, #0]
 8009988:	e036      	b.n	80099f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009990:	69da      	ldr	r2, [r3, #28]
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	f003 030f 	and.w	r3, r3, #15
 800999a:	2101      	movs	r1, #1
 800999c:	fa01 f303 	lsl.w	r3, r1, r3
 80099a0:	041b      	lsls	r3, r3, #16
 80099a2:	68f9      	ldr	r1, [r7, #12]
 80099a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099a8:	4313      	orrs	r3, r2
 80099aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d11a      	bne.n	80099f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	015a      	lsls	r2, r3, #5
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	4413      	add	r3, r2
 80099ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	791b      	ldrb	r3, [r3, #4]
 80099dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80099de:	430b      	orrs	r3, r1
 80099e0:	4313      	orrs	r3, r2
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	0151      	lsls	r1, r2, #5
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	440a      	add	r2, r1
 80099ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3714      	adds	r7, #20
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
	...

08009a08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	785b      	ldrb	r3, [r3, #1]
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d161      	bne.n	8009ae8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	015a      	lsls	r2, r3, #5
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a3a:	d11f      	bne.n	8009a7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	015a      	lsls	r2, r3, #5
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	0151      	lsls	r1, r2, #5
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	440a      	add	r2, r1
 8009a52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009a5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	015a      	lsls	r2, r3, #5
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	0151      	lsls	r1, r2, #5
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	440a      	add	r2, r1
 8009a72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	f003 030f 	and.w	r3, r3, #15
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	43db      	mvns	r3, r3
 8009a96:	68f9      	ldr	r1, [r7, #12]
 8009a98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aa6:	69da      	ldr	r2, [r3, #28]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	f003 030f 	and.w	r3, r3, #15
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	43db      	mvns	r3, r3
 8009aba:	68f9      	ldr	r1, [r7, #12]
 8009abc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	015a      	lsls	r2, r3, #5
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	4413      	add	r3, r2
 8009acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	0159      	lsls	r1, r3, #5
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	440b      	add	r3, r1
 8009ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ade:	4619      	mov	r1, r3
 8009ae0:	4b35      	ldr	r3, [pc, #212]	@ (8009bb8 <USB_DeactivateEndpoint+0x1b0>)
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	600b      	str	r3, [r1, #0]
 8009ae6:	e060      	b.n	8009baa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	015a      	lsls	r2, r3, #5
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	4413      	add	r3, r2
 8009af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009afa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009afe:	d11f      	bne.n	8009b40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	015a      	lsls	r2, r3, #5
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	4413      	add	r3, r2
 8009b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68ba      	ldr	r2, [r7, #8]
 8009b10:	0151      	lsls	r1, r2, #5
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	440a      	add	r2, r1
 8009b16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009b1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	015a      	lsls	r2, r3, #5
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	0151      	lsls	r1, r2, #5
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	440a      	add	r2, r1
 8009b36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	f003 030f 	and.w	r3, r3, #15
 8009b50:	2101      	movs	r1, #1
 8009b52:	fa01 f303 	lsl.w	r3, r1, r3
 8009b56:	041b      	lsls	r3, r3, #16
 8009b58:	43db      	mvns	r3, r3
 8009b5a:	68f9      	ldr	r1, [r7, #12]
 8009b5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b60:	4013      	ands	r3, r2
 8009b62:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b6a:	69da      	ldr	r2, [r3, #28]
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	f003 030f 	and.w	r3, r3, #15
 8009b74:	2101      	movs	r1, #1
 8009b76:	fa01 f303 	lsl.w	r3, r1, r3
 8009b7a:	041b      	lsls	r3, r3, #16
 8009b7c:	43db      	mvns	r3, r3
 8009b7e:	68f9      	ldr	r1, [r7, #12]
 8009b80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b84:	4013      	ands	r3, r2
 8009b86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	0159      	lsls	r1, r3, #5
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	440b      	add	r3, r1
 8009b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	4b05      	ldr	r3, [pc, #20]	@ (8009bbc <USB_DeactivateEndpoint+0x1b4>)
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	ec337800 	.word	0xec337800
 8009bbc:	eff37800 	.word	0xeff37800

08009bc0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08a      	sub	sp, #40	@ 0x28
 8009bc4:	af02      	add	r7, sp, #8
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	785b      	ldrb	r3, [r3, #1]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	f040 817f 	bne.w	8009ee0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d132      	bne.n	8009c50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	015a      	lsls	r2, r3, #5
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	69ba      	ldr	r2, [r7, #24]
 8009bfa:	0151      	lsls	r1, r2, #5
 8009bfc:	69fa      	ldr	r2, [r7, #28]
 8009bfe:	440a      	add	r2, r1
 8009c00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c04:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009c08:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009c0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	015a      	lsls	r2, r3, #5
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	4413      	add	r3, r2
 8009c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	69ba      	ldr	r2, [r7, #24]
 8009c1e:	0151      	lsls	r1, r2, #5
 8009c20:	69fa      	ldr	r2, [r7, #28]
 8009c22:	440a      	add	r2, r1
 8009c24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	015a      	lsls	r2, r3, #5
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	4413      	add	r3, r2
 8009c36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	69ba      	ldr	r2, [r7, #24]
 8009c3e:	0151      	lsls	r1, r2, #5
 8009c40:	69fa      	ldr	r2, [r7, #28]
 8009c42:	440a      	add	r2, r1
 8009c44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c48:	0cdb      	lsrs	r3, r3, #19
 8009c4a:	04db      	lsls	r3, r3, #19
 8009c4c:	6113      	str	r3, [r2, #16]
 8009c4e:	e097      	b.n	8009d80 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	015a      	lsls	r2, r3, #5
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	4413      	add	r3, r2
 8009c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	69ba      	ldr	r2, [r7, #24]
 8009c60:	0151      	lsls	r1, r2, #5
 8009c62:	69fa      	ldr	r2, [r7, #28]
 8009c64:	440a      	add	r2, r1
 8009c66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c6a:	0cdb      	lsrs	r3, r3, #19
 8009c6c:	04db      	lsls	r3, r3, #19
 8009c6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	015a      	lsls	r2, r3, #5
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	4413      	add	r3, r2
 8009c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	69ba      	ldr	r2, [r7, #24]
 8009c80:	0151      	lsls	r1, r2, #5
 8009c82:	69fa      	ldr	r2, [r7, #28]
 8009c84:	440a      	add	r2, r1
 8009c86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c8a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009c8e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009c92:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d11a      	bne.n	8009cd0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	691a      	ldr	r2, [r3, #16]
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d903      	bls.n	8009cae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	689a      	ldr	r2, [r3, #8]
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	015a      	lsls	r2, r3, #5
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	69ba      	ldr	r2, [r7, #24]
 8009cbe:	0151      	lsls	r1, r2, #5
 8009cc0:	69fa      	ldr	r2, [r7, #28]
 8009cc2:	440a      	add	r2, r1
 8009cc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ccc:	6113      	str	r3, [r2, #16]
 8009cce:	e044      	b.n	8009d5a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	691a      	ldr	r2, [r3, #16]
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	4413      	add	r3, r2
 8009cda:	1e5a      	subs	r2, r3, #1
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cf2:	691a      	ldr	r2, [r3, #16]
 8009cf4:	8afb      	ldrh	r3, [r7, #22]
 8009cf6:	04d9      	lsls	r1, r3, #19
 8009cf8:	4ba4      	ldr	r3, [pc, #656]	@ (8009f8c <USB_EPStartXfer+0x3cc>)
 8009cfa:	400b      	ands	r3, r1
 8009cfc:	69b9      	ldr	r1, [r7, #24]
 8009cfe:	0148      	lsls	r0, r1, #5
 8009d00:	69f9      	ldr	r1, [r7, #28]
 8009d02:	4401      	add	r1, r0
 8009d04:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	791b      	ldrb	r3, [r3, #4]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d122      	bne.n	8009d5a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	015a      	lsls	r2, r3, #5
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	69ba      	ldr	r2, [r7, #24]
 8009d24:	0151      	lsls	r1, r2, #5
 8009d26:	69fa      	ldr	r2, [r7, #28]
 8009d28:	440a      	add	r2, r1
 8009d2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d2e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009d32:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	015a      	lsls	r2, r3, #5
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d40:	691a      	ldr	r2, [r3, #16]
 8009d42:	8afb      	ldrh	r3, [r7, #22]
 8009d44:	075b      	lsls	r3, r3, #29
 8009d46:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009d4a:	69b9      	ldr	r1, [r7, #24]
 8009d4c:	0148      	lsls	r0, r1, #5
 8009d4e:	69f9      	ldr	r1, [r7, #28]
 8009d50:	4401      	add	r1, r0
 8009d52:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009d56:	4313      	orrs	r3, r2
 8009d58:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	015a      	lsls	r2, r3, #5
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	4413      	add	r3, r2
 8009d62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d66:	691a      	ldr	r2, [r3, #16]
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d70:	69b9      	ldr	r1, [r7, #24]
 8009d72:	0148      	lsls	r0, r1, #5
 8009d74:	69f9      	ldr	r1, [r7, #28]
 8009d76:	4401      	add	r1, r0
 8009d78:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009d80:	79fb      	ldrb	r3, [r7, #7]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d14b      	bne.n	8009e1e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	69db      	ldr	r3, [r3, #28]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d009      	beq.n	8009da2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	015a      	lsls	r2, r3, #5
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	4413      	add	r3, r2
 8009d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	69db      	ldr	r3, [r3, #28]
 8009da0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	791b      	ldrb	r3, [r3, #4]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d128      	bne.n	8009dfc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d110      	bne.n	8009ddc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	015a      	lsls	r2, r3, #5
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	69ba      	ldr	r2, [r7, #24]
 8009dca:	0151      	lsls	r1, r2, #5
 8009dcc:	69fa      	ldr	r2, [r7, #28]
 8009dce:	440a      	add	r2, r1
 8009dd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dd4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009dd8:	6013      	str	r3, [r2, #0]
 8009dda:	e00f      	b.n	8009dfc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	69ba      	ldr	r2, [r7, #24]
 8009dec:	0151      	lsls	r1, r2, #5
 8009dee:	69fa      	ldr	r2, [r7, #28]
 8009df0:	440a      	add	r2, r1
 8009df2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009dfa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	015a      	lsls	r2, r3, #5
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	4413      	add	r3, r2
 8009e04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	69ba      	ldr	r2, [r7, #24]
 8009e0c:	0151      	lsls	r1, r2, #5
 8009e0e:	69fa      	ldr	r2, [r7, #28]
 8009e10:	440a      	add	r2, r1
 8009e12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009e1a:	6013      	str	r3, [r2, #0]
 8009e1c:	e166      	b.n	800a0ec <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	015a      	lsls	r2, r3, #5
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	4413      	add	r3, r2
 8009e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	69ba      	ldr	r2, [r7, #24]
 8009e2e:	0151      	lsls	r1, r2, #5
 8009e30:	69fa      	ldr	r2, [r7, #28]
 8009e32:	440a      	add	r2, r1
 8009e34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e38:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009e3c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	791b      	ldrb	r3, [r3, #4]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d015      	beq.n	8009e72 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	f000 814e 	beq.w	800a0ec <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	f003 030f 	and.w	r3, r3, #15
 8009e60:	2101      	movs	r1, #1
 8009e62:	fa01 f303 	lsl.w	r3, r1, r3
 8009e66:	69f9      	ldr	r1, [r7, #28]
 8009e68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	634b      	str	r3, [r1, #52]	@ 0x34
 8009e70:	e13c      	b.n	800a0ec <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d110      	bne.n	8009ea4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	015a      	lsls	r2, r3, #5
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	4413      	add	r3, r2
 8009e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	69ba      	ldr	r2, [r7, #24]
 8009e92:	0151      	lsls	r1, r2, #5
 8009e94:	69fa      	ldr	r2, [r7, #28]
 8009e96:	440a      	add	r2, r1
 8009e98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009ea0:	6013      	str	r3, [r2, #0]
 8009ea2:	e00f      	b.n	8009ec4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	015a      	lsls	r2, r3, #5
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	4413      	add	r3, r2
 8009eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	69ba      	ldr	r2, [r7, #24]
 8009eb4:	0151      	lsls	r1, r2, #5
 8009eb6:	69fa      	ldr	r2, [r7, #28]
 8009eb8:	440a      	add	r2, r1
 8009eba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ec2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	68d9      	ldr	r1, [r3, #12]
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	781a      	ldrb	r2, [r3, #0]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	b298      	uxth	r0, r3
 8009ed2:	79fb      	ldrb	r3, [r7, #7]
 8009ed4:	9300      	str	r3, [sp, #0]
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f000 f9b9 	bl	800a250 <USB_WritePacket>
 8009ede:	e105      	b.n	800a0ec <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	015a      	lsls	r2, r3, #5
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	69ba      	ldr	r2, [r7, #24]
 8009ef0:	0151      	lsls	r1, r2, #5
 8009ef2:	69fa      	ldr	r2, [r7, #28]
 8009ef4:	440a      	add	r2, r1
 8009ef6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009efa:	0cdb      	lsrs	r3, r3, #19
 8009efc:	04db      	lsls	r3, r3, #19
 8009efe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	015a      	lsls	r2, r3, #5
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	4413      	add	r3, r2
 8009f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	69ba      	ldr	r2, [r7, #24]
 8009f10:	0151      	lsls	r1, r2, #5
 8009f12:	69fa      	ldr	r2, [r7, #28]
 8009f14:	440a      	add	r2, r1
 8009f16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f1a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009f1e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009f22:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d132      	bne.n	8009f90 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d003      	beq.n	8009f3a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	689a      	ldr	r2, [r3, #8]
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	689a      	ldr	r2, [r3, #8]
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	015a      	lsls	r2, r3, #5
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	4413      	add	r3, r2
 8009f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f4e:	691a      	ldr	r2, [r3, #16]
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f58:	69b9      	ldr	r1, [r7, #24]
 8009f5a:	0148      	lsls	r0, r1, #5
 8009f5c:	69f9      	ldr	r1, [r7, #28]
 8009f5e:	4401      	add	r1, r0
 8009f60:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009f64:	4313      	orrs	r3, r2
 8009f66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	69ba      	ldr	r2, [r7, #24]
 8009f78:	0151      	lsls	r1, r2, #5
 8009f7a:	69fa      	ldr	r2, [r7, #28]
 8009f7c:	440a      	add	r2, r1
 8009f7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f86:	6113      	str	r3, [r2, #16]
 8009f88:	e062      	b.n	800a050 <USB_EPStartXfer+0x490>
 8009f8a:	bf00      	nop
 8009f8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d123      	bne.n	8009fe0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fa4:	691a      	ldr	r2, [r3, #16]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fae:	69b9      	ldr	r1, [r7, #24]
 8009fb0:	0148      	lsls	r0, r1, #5
 8009fb2:	69f9      	ldr	r1, [r7, #28]
 8009fb4:	4401      	add	r1, r0
 8009fb6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	015a      	lsls	r2, r3, #5
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	69ba      	ldr	r2, [r7, #24]
 8009fce:	0151      	lsls	r1, r2, #5
 8009fd0:	69fa      	ldr	r2, [r7, #28]
 8009fd2:	440a      	add	r2, r1
 8009fd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009fdc:	6113      	str	r3, [r2, #16]
 8009fde:	e037      	b.n	800a050 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	691a      	ldr	r2, [r3, #16]
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	4413      	add	r3, r2
 8009fea:	1e5a      	subs	r2, r3, #1
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ff4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	8afa      	ldrh	r2, [r7, #22]
 8009ffc:	fb03 f202 	mul.w	r2, r3, r2
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a010:	691a      	ldr	r2, [r3, #16]
 800a012:	8afb      	ldrh	r3, [r7, #22]
 800a014:	04d9      	lsls	r1, r3, #19
 800a016:	4b38      	ldr	r3, [pc, #224]	@ (800a0f8 <USB_EPStartXfer+0x538>)
 800a018:	400b      	ands	r3, r1
 800a01a:	69b9      	ldr	r1, [r7, #24]
 800a01c:	0148      	lsls	r0, r1, #5
 800a01e:	69f9      	ldr	r1, [r7, #28]
 800a020:	4401      	add	r1, r0
 800a022:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a026:	4313      	orrs	r3, r2
 800a028:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	015a      	lsls	r2, r3, #5
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	4413      	add	r3, r2
 800a032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a036:	691a      	ldr	r2, [r3, #16]
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	6a1b      	ldr	r3, [r3, #32]
 800a03c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a040:	69b9      	ldr	r1, [r7, #24]
 800a042:	0148      	lsls	r0, r1, #5
 800a044:	69f9      	ldr	r1, [r7, #28]
 800a046:	4401      	add	r1, r0
 800a048:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a04c:	4313      	orrs	r3, r2
 800a04e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a050:	79fb      	ldrb	r3, [r7, #7]
 800a052:	2b01      	cmp	r3, #1
 800a054:	d10d      	bne.n	800a072 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d009      	beq.n	800a072 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	68d9      	ldr	r1, [r3, #12]
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	015a      	lsls	r2, r3, #5
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	4413      	add	r3, r2
 800a06a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a06e:	460a      	mov	r2, r1
 800a070:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	791b      	ldrb	r3, [r3, #4]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d128      	bne.n	800a0cc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a086:	2b00      	cmp	r3, #0
 800a088:	d110      	bne.n	800a0ac <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	015a      	lsls	r2, r3, #5
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	4413      	add	r3, r2
 800a092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	69ba      	ldr	r2, [r7, #24]
 800a09a:	0151      	lsls	r1, r2, #5
 800a09c:	69fa      	ldr	r2, [r7, #28]
 800a09e:	440a      	add	r2, r1
 800a0a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a0a8:	6013      	str	r3, [r2, #0]
 800a0aa:	e00f      	b.n	800a0cc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	015a      	lsls	r2, r3, #5
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	69ba      	ldr	r2, [r7, #24]
 800a0bc:	0151      	lsls	r1, r2, #5
 800a0be:	69fa      	ldr	r2, [r7, #28]
 800a0c0:	440a      	add	r2, r1
 800a0c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	015a      	lsls	r2, r3, #5
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69ba      	ldr	r2, [r7, #24]
 800a0dc:	0151      	lsls	r1, r2, #5
 800a0de:	69fa      	ldr	r2, [r7, #28]
 800a0e0:	440a      	add	r2, r1
 800a0e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a0ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3720      	adds	r7, #32
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	1ff80000 	.word	0x1ff80000

0800a0fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b087      	sub	sp, #28
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a106:	2300      	movs	r3, #0
 800a108:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a10a:	2300      	movs	r3, #0
 800a10c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	785b      	ldrb	r3, [r3, #1]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d14a      	bne.n	800a1b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	015a      	lsls	r2, r3, #5
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	4413      	add	r3, r2
 800a124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a12e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a132:	f040 8086 	bne.w	800a242 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	015a      	lsls	r2, r3, #5
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	4413      	add	r3, r2
 800a140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	7812      	ldrb	r2, [r2, #0]
 800a14a:	0151      	lsls	r1, r2, #5
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	440a      	add	r2, r1
 800a150:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a154:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a158:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	015a      	lsls	r2, r3, #5
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	4413      	add	r3, r2
 800a164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	7812      	ldrb	r2, [r2, #0]
 800a16e:	0151      	lsls	r1, r2, #5
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	440a      	add	r2, r1
 800a174:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a178:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a17c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	3301      	adds	r3, #1
 800a182:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d902      	bls.n	800a194 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	75fb      	strb	r3, [r7, #23]
          break;
 800a192:	e056      	b.n	800a242 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	015a      	lsls	r2, r3, #5
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	4413      	add	r3, r2
 800a19e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a1a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1ac:	d0e7      	beq.n	800a17e <USB_EPStopXfer+0x82>
 800a1ae:	e048      	b.n	800a242 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	015a      	lsls	r2, r3, #5
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a1c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1c8:	d13b      	bne.n	800a242 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	015a      	lsls	r2, r3, #5
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	683a      	ldr	r2, [r7, #0]
 800a1dc:	7812      	ldrb	r2, [r2, #0]
 800a1de:	0151      	lsls	r1, r2, #5
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	440a      	add	r2, r1
 800a1e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a1ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	015a      	lsls	r2, r3, #5
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	7812      	ldrb	r2, [r2, #0]
 800a202:	0151      	lsls	r1, r2, #5
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	440a      	add	r2, r1
 800a208:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a20c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a210:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	3301      	adds	r3, #1
 800a216:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a21e:	4293      	cmp	r3, r2
 800a220:	d902      	bls.n	800a228 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	75fb      	strb	r3, [r7, #23]
          break;
 800a226:	e00c      	b.n	800a242 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	015a      	lsls	r2, r3, #5
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	4413      	add	r3, r2
 800a232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a23c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a240:	d0e7      	beq.n	800a212 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a242:	7dfb      	ldrb	r3, [r7, #23]
}
 800a244:	4618      	mov	r0, r3
 800a246:	371c      	adds	r7, #28
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a250:	b480      	push	{r7}
 800a252:	b089      	sub	sp, #36	@ 0x24
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	4611      	mov	r1, r2
 800a25c:	461a      	mov	r2, r3
 800a25e:	460b      	mov	r3, r1
 800a260:	71fb      	strb	r3, [r7, #7]
 800a262:	4613      	mov	r3, r2
 800a264:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a26e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a272:	2b00      	cmp	r3, #0
 800a274:	d123      	bne.n	800a2be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a276:	88bb      	ldrh	r3, [r7, #4]
 800a278:	3303      	adds	r3, #3
 800a27a:	089b      	lsrs	r3, r3, #2
 800a27c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a27e:	2300      	movs	r3, #0
 800a280:	61bb      	str	r3, [r7, #24]
 800a282:	e018      	b.n	800a2b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a284:	79fb      	ldrb	r3, [r7, #7]
 800a286:	031a      	lsls	r2, r3, #12
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a290:	461a      	mov	r2, r3
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	3301      	adds	r3, #1
 800a29c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	61bb      	str	r3, [r7, #24]
 800a2b6:	69ba      	ldr	r2, [r7, #24]
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d3e2      	bcc.n	800a284 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3724      	adds	r7, #36	@ 0x24
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b08b      	sub	sp, #44	@ 0x2c
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a2e2:	88fb      	ldrh	r3, [r7, #6]
 800a2e4:	089b      	lsrs	r3, r3, #2
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a2ea:	88fb      	ldrh	r3, [r7, #6]
 800a2ec:	f003 0303 	and.w	r3, r3, #3
 800a2f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	623b      	str	r3, [r7, #32]
 800a2f6:	e014      	b.n	800a322 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a302:	601a      	str	r2, [r3, #0]
    pDest++;
 800a304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a306:	3301      	adds	r3, #1
 800a308:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30c:	3301      	adds	r3, #1
 800a30e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a312:	3301      	adds	r3, #1
 800a314:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a318:	3301      	adds	r3, #1
 800a31a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	3301      	adds	r3, #1
 800a320:	623b      	str	r3, [r7, #32]
 800a322:	6a3a      	ldr	r2, [r7, #32]
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	429a      	cmp	r2, r3
 800a328:	d3e6      	bcc.n	800a2f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a32a:	8bfb      	ldrh	r3, [r7, #30]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d01e      	beq.n	800a36e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a330:	2300      	movs	r3, #0
 800a332:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a33a:	461a      	mov	r2, r3
 800a33c:	f107 0310 	add.w	r3, r7, #16
 800a340:	6812      	ldr	r2, [r2, #0]
 800a342:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	00db      	lsls	r3, r3, #3
 800a34c:	fa22 f303 	lsr.w	r3, r2, r3
 800a350:	b2da      	uxtb	r2, r3
 800a352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a354:	701a      	strb	r2, [r3, #0]
      i++;
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	3301      	adds	r3, #1
 800a35a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35e:	3301      	adds	r3, #1
 800a360:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a362:	8bfb      	ldrh	r3, [r7, #30]
 800a364:	3b01      	subs	r3, #1
 800a366:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a368:	8bfb      	ldrh	r3, [r7, #30]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1ea      	bne.n	800a344 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a370:	4618      	mov	r0, r3
 800a372:	372c      	adds	r7, #44	@ 0x2c
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	785b      	ldrb	r3, [r3, #1]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d12c      	bne.n	800a3f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	015a      	lsls	r2, r3, #5
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	4413      	add	r3, r2
 800a3a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	db12      	blt.n	800a3d0 <USB_EPSetStall+0x54>
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d00f      	beq.n	800a3d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	015a      	lsls	r2, r3, #5
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	0151      	lsls	r1, r2, #5
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	440a      	add	r2, r1
 800a3c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a3ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	015a      	lsls	r2, r3, #5
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	0151      	lsls	r1, r2, #5
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	440a      	add	r2, r1
 800a3e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a3ee:	6013      	str	r3, [r2, #0]
 800a3f0:	e02b      	b.n	800a44a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	015a      	lsls	r2, r3, #5
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	db12      	blt.n	800a42a <USB_EPSetStall+0xae>
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00f      	beq.n	800a42a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	015a      	lsls	r2, r3, #5
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	4413      	add	r3, r2
 800a412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	0151      	lsls	r1, r2, #5
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	440a      	add	r2, r1
 800a420:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a424:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a428:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	015a      	lsls	r2, r3, #5
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	4413      	add	r3, r2
 800a432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	68ba      	ldr	r2, [r7, #8]
 800a43a:	0151      	lsls	r1, r2, #5
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	440a      	add	r2, r1
 800a440:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a444:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a448:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	785b      	ldrb	r3, [r3, #1]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d128      	bne.n	800a4c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	015a      	lsls	r2, r3, #5
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	4413      	add	r3, r2
 800a47c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	0151      	lsls	r1, r2, #5
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	440a      	add	r2, r1
 800a48a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a48e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a492:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	791b      	ldrb	r3, [r3, #4]
 800a498:	2b03      	cmp	r3, #3
 800a49a:	d003      	beq.n	800a4a4 <USB_EPClearStall+0x4c>
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	791b      	ldrb	r3, [r3, #4]
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d138      	bne.n	800a516 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	015a      	lsls	r2, r3, #5
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	0151      	lsls	r1, r2, #5
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	440a      	add	r2, r1
 800a4ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4c2:	6013      	str	r3, [r2, #0]
 800a4c4:	e027      	b.n	800a516 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	015a      	lsls	r2, r3, #5
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68ba      	ldr	r2, [r7, #8]
 800a4d6:	0151      	lsls	r1, r2, #5
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	440a      	add	r2, r1
 800a4dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a4e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	791b      	ldrb	r3, [r3, #4]
 800a4ea:	2b03      	cmp	r3, #3
 800a4ec:	d003      	beq.n	800a4f6 <USB_EPClearStall+0x9e>
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	791b      	ldrb	r3, [r3, #4]
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d10f      	bne.n	800a516 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	015a      	lsls	r2, r3, #5
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	0151      	lsls	r1, r2, #5
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	440a      	add	r2, r1
 800a50c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a514:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	460b      	mov	r3, r1
 800a52e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a542:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a546:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	78fb      	ldrb	r3, [r7, #3]
 800a552:	011b      	lsls	r3, r3, #4
 800a554:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a558:	68f9      	ldr	r1, [r7, #12]
 800a55a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a55e:	4313      	orrs	r3, r2
 800a560:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a58a:	f023 0303 	bic.w	r3, r3, #3
 800a58e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a59e:	f023 0302 	bic.w	r3, r3, #2
 800a5a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b085      	sub	sp, #20
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a5cc:	f023 0303 	bic.w	r3, r3, #3
 800a5d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a5e0:	f043 0302 	orr.w	r3, r3, #2
 800a5e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3714      	adds	r7, #20
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	695b      	ldr	r3, [r3, #20]
 800a600:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	699b      	ldr	r3, [r3, #24]
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	4013      	ands	r3, r2
 800a60a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a60c:	68fb      	ldr	r3, [r7, #12]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3714      	adds	r7, #20
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b085      	sub	sp, #20
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a636:	69db      	ldr	r3, [r3, #28]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	4013      	ands	r3, r2
 800a63c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	0c1b      	lsrs	r3, r3, #16
}
 800a642:	4618      	mov	r0, r3
 800a644:	3714      	adds	r7, #20
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a64e:	b480      	push	{r7}
 800a650:	b085      	sub	sp, #20
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a66a:	69db      	ldr	r3, [r3, #28]
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	4013      	ands	r3, r2
 800a670:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	b29b      	uxth	r3, r3
}
 800a676:	4618      	mov	r0, r3
 800a678:	3714      	adds	r7, #20
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a682:	b480      	push	{r7}
 800a684:	b085      	sub	sp, #20
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	460b      	mov	r3, r1
 800a68c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a692:	78fb      	ldrb	r3, [r7, #3]
 800a694:	015a      	lsls	r2, r3, #5
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	4413      	add	r3, r2
 800a69a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6a8:	695b      	ldr	r3, [r3, #20]
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a6b0:	68bb      	ldr	r3, [r7, #8]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr

0800a6be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a6be:	b480      	push	{r7}
 800a6c0:	b087      	sub	sp, #28
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a6e2:	78fb      	ldrb	r3, [r7, #3]
 800a6e4:	f003 030f 	and.w	r3, r3, #15
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ee:	01db      	lsls	r3, r3, #7
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	693a      	ldr	r2, [r7, #16]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a6f8:	78fb      	ldrb	r3, [r7, #3]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	693a      	ldr	r2, [r7, #16]
 800a708:	4013      	ands	r3, r2
 800a70a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a70c:	68bb      	ldr	r3, [r7, #8]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	371c      	adds	r7, #28
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b083      	sub	sp, #12
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	f003 0301 	and.w	r3, r3, #1
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	370c      	adds	r7, #12
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a736:	b480      	push	{r7}
 800a738:	b085      	sub	sp, #20
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a750:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a754:	f023 0307 	bic.w	r3, r3, #7
 800a758:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a76c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3714      	adds	r7, #20
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b087      	sub	sp, #28
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	460b      	mov	r3, r1
 800a786:	607a      	str	r2, [r7, #4]
 800a788:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	333c      	adds	r3, #60	@ 0x3c
 800a792:	3304      	adds	r3, #4
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	4a26      	ldr	r2, [pc, #152]	@ (800a834 <USB_EP0_OutStart+0xb8>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d90a      	bls.n	800a7b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7b0:	d101      	bne.n	800a7b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	e037      	b.n	800a826 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7bc:	461a      	mov	r2, r3
 800a7be:	2300      	movs	r3, #0
 800a7c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a7d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	697a      	ldr	r2, [r7, #20]
 800a7e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7e4:	f043 0318 	orr.w	r3, r3, #24
 800a7e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7f8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a7fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a7fe:	7afb      	ldrb	r3, [r7, #11]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d10f      	bne.n	800a824 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a80a:	461a      	mov	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a81e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a822:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	371c      	adds	r7, #28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	4f54300a 	.word	0x4f54300a

0800a838 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a840:	2300      	movs	r3, #0
 800a842:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	3301      	adds	r3, #1
 800a848:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a850:	d901      	bls.n	800a856 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a852:	2303      	movs	r3, #3
 800a854:	e01b      	b.n	800a88e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	daf2      	bge.n	800a844 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a85e:	2300      	movs	r3, #0
 800a860:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	f043 0201 	orr.w	r2, r3, #1
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	3301      	adds	r3, #1
 800a872:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a87a:	d901      	bls.n	800a880 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a87c:	2303      	movs	r3, #3
 800a87e:	e006      	b.n	800a88e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	f003 0301 	and.w	r3, r3, #1
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d0f0      	beq.n	800a86e <USB_CoreReset+0x36>

  return HAL_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3714      	adds	r7, #20
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
	...

0800a89c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a8a8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a8ac:	f002 fce4 	bl	800d278 <USBD_static_malloc>
 800a8b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d109      	bne.n	800a8cc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	32b0      	adds	r2, #176	@ 0xb0
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	e0d4      	b.n	800aa76 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a8cc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f003 fbb0 	bl	800e038 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	32b0      	adds	r2, #176	@ 0xb0
 800a8e2:	68f9      	ldr	r1, [r7, #12]
 800a8e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	32b0      	adds	r2, #176	@ 0xb0
 800a8f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	7c1b      	ldrb	r3, [r3, #16]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d138      	bne.n	800a976 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a904:	4b5e      	ldr	r3, [pc, #376]	@ (800aa80 <USBD_CDC_Init+0x1e4>)
 800a906:	7819      	ldrb	r1, [r3, #0]
 800a908:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a90c:	2202      	movs	r2, #2
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f002 fb8f 	bl	800d032 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a914:	4b5a      	ldr	r3, [pc, #360]	@ (800aa80 <USBD_CDC_Init+0x1e4>)
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	f003 020f 	and.w	r2, r3, #15
 800a91c:	6879      	ldr	r1, [r7, #4]
 800a91e:	4613      	mov	r3, r2
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	4413      	add	r3, r2
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	440b      	add	r3, r1
 800a928:	3324      	adds	r3, #36	@ 0x24
 800a92a:	2201      	movs	r2, #1
 800a92c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a92e:	4b55      	ldr	r3, [pc, #340]	@ (800aa84 <USBD_CDC_Init+0x1e8>)
 800a930:	7819      	ldrb	r1, [r3, #0]
 800a932:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a936:	2202      	movs	r2, #2
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f002 fb7a 	bl	800d032 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a93e:	4b51      	ldr	r3, [pc, #324]	@ (800aa84 <USBD_CDC_Init+0x1e8>)
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	f003 020f 	and.w	r2, r3, #15
 800a946:	6879      	ldr	r1, [r7, #4]
 800a948:	4613      	mov	r3, r2
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4413      	add	r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	440b      	add	r3, r1
 800a952:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a956:	2201      	movs	r2, #1
 800a958:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a95a:	4b4b      	ldr	r3, [pc, #300]	@ (800aa88 <USBD_CDC_Init+0x1ec>)
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	f003 020f 	and.w	r2, r3, #15
 800a962:	6879      	ldr	r1, [r7, #4]
 800a964:	4613      	mov	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4413      	add	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	440b      	add	r3, r1
 800a96e:	3326      	adds	r3, #38	@ 0x26
 800a970:	2210      	movs	r2, #16
 800a972:	801a      	strh	r2, [r3, #0]
 800a974:	e035      	b.n	800a9e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a976:	4b42      	ldr	r3, [pc, #264]	@ (800aa80 <USBD_CDC_Init+0x1e4>)
 800a978:	7819      	ldrb	r1, [r3, #0]
 800a97a:	2340      	movs	r3, #64	@ 0x40
 800a97c:	2202      	movs	r2, #2
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f002 fb57 	bl	800d032 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a984:	4b3e      	ldr	r3, [pc, #248]	@ (800aa80 <USBD_CDC_Init+0x1e4>)
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	f003 020f 	and.w	r2, r3, #15
 800a98c:	6879      	ldr	r1, [r7, #4]
 800a98e:	4613      	mov	r3, r2
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	4413      	add	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	440b      	add	r3, r1
 800a998:	3324      	adds	r3, #36	@ 0x24
 800a99a:	2201      	movs	r2, #1
 800a99c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a99e:	4b39      	ldr	r3, [pc, #228]	@ (800aa84 <USBD_CDC_Init+0x1e8>)
 800a9a0:	7819      	ldrb	r1, [r3, #0]
 800a9a2:	2340      	movs	r3, #64	@ 0x40
 800a9a4:	2202      	movs	r2, #2
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f002 fb43 	bl	800d032 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a9ac:	4b35      	ldr	r3, [pc, #212]	@ (800aa84 <USBD_CDC_Init+0x1e8>)
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	f003 020f 	and.w	r2, r3, #15
 800a9b4:	6879      	ldr	r1, [r7, #4]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	4413      	add	r3, r2
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	440b      	add	r3, r1
 800a9c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a9c8:	4b2f      	ldr	r3, [pc, #188]	@ (800aa88 <USBD_CDC_Init+0x1ec>)
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	f003 020f 	and.w	r2, r3, #15
 800a9d0:	6879      	ldr	r1, [r7, #4]
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	440b      	add	r3, r1
 800a9dc:	3326      	adds	r3, #38	@ 0x26
 800a9de:	2210      	movs	r2, #16
 800a9e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a9e2:	4b29      	ldr	r3, [pc, #164]	@ (800aa88 <USBD_CDC_Init+0x1ec>)
 800a9e4:	7819      	ldrb	r1, [r3, #0]
 800a9e6:	2308      	movs	r3, #8
 800a9e8:	2203      	movs	r2, #3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f002 fb21 	bl	800d032 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a9f0:	4b25      	ldr	r3, [pc, #148]	@ (800aa88 <USBD_CDC_Init+0x1ec>)
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	f003 020f 	and.w	r2, r3, #15
 800a9f8:	6879      	ldr	r1, [r7, #4]
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4413      	add	r3, r2
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	440b      	add	r3, r1
 800aa04:	3324      	adds	r3, #36	@ 0x24
 800aa06:	2201      	movs	r2, #1
 800aa08:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	33b0      	adds	r3, #176	@ 0xb0
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4413      	add	r3, r2
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d101      	bne.n	800aa44 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800aa40:	2302      	movs	r3, #2
 800aa42:	e018      	b.n	800aa76 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	7c1b      	ldrb	r3, [r3, #16]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d10a      	bne.n	800aa62 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa4c:	4b0d      	ldr	r3, [pc, #52]	@ (800aa84 <USBD_CDC_Init+0x1e8>)
 800aa4e:	7819      	ldrb	r1, [r3, #0]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f002 fbd8 	bl	800d210 <USBD_LL_PrepareReceive>
 800aa60:	e008      	b.n	800aa74 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa62:	4b08      	ldr	r3, [pc, #32]	@ (800aa84 <USBD_CDC_Init+0x1e8>)
 800aa64:	7819      	ldrb	r1, [r3, #0]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa6c:	2340      	movs	r3, #64	@ 0x40
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f002 fbce 	bl	800d210 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	200000ab 	.word	0x200000ab
 800aa84:	200000ac 	.word	0x200000ac
 800aa88:	200000ad 	.word	0x200000ad

0800aa8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	460b      	mov	r3, r1
 800aa96:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aa98:	4b3a      	ldr	r3, [pc, #232]	@ (800ab84 <USBD_CDC_DeInit+0xf8>)
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f002 faed 	bl	800d07e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aaa4:	4b37      	ldr	r3, [pc, #220]	@ (800ab84 <USBD_CDC_DeInit+0xf8>)
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	f003 020f 	and.w	r2, r3, #15
 800aaac:	6879      	ldr	r1, [r7, #4]
 800aaae:	4613      	mov	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	440b      	add	r3, r1
 800aab8:	3324      	adds	r3, #36	@ 0x24
 800aaba:	2200      	movs	r2, #0
 800aabc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aabe:	4b32      	ldr	r3, [pc, #200]	@ (800ab88 <USBD_CDC_DeInit+0xfc>)
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f002 fada 	bl	800d07e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aaca:	4b2f      	ldr	r3, [pc, #188]	@ (800ab88 <USBD_CDC_DeInit+0xfc>)
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	f003 020f 	and.w	r2, r3, #15
 800aad2:	6879      	ldr	r1, [r7, #4]
 800aad4:	4613      	mov	r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	4413      	add	r3, r2
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	440b      	add	r3, r1
 800aade:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aae2:	2200      	movs	r2, #0
 800aae4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800aae6:	4b29      	ldr	r3, [pc, #164]	@ (800ab8c <USBD_CDC_DeInit+0x100>)
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	4619      	mov	r1, r3
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f002 fac6 	bl	800d07e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aaf2:	4b26      	ldr	r3, [pc, #152]	@ (800ab8c <USBD_CDC_DeInit+0x100>)
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	f003 020f 	and.w	r2, r3, #15
 800aafa:	6879      	ldr	r1, [r7, #4]
 800aafc:	4613      	mov	r3, r2
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	4413      	add	r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	440b      	add	r3, r1
 800ab06:	3324      	adds	r3, #36	@ 0x24
 800ab08:	2200      	movs	r2, #0
 800ab0a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ab0c:	4b1f      	ldr	r3, [pc, #124]	@ (800ab8c <USBD_CDC_DeInit+0x100>)
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	f003 020f 	and.w	r2, r3, #15
 800ab14:	6879      	ldr	r1, [r7, #4]
 800ab16:	4613      	mov	r3, r2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	4413      	add	r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	440b      	add	r3, r1
 800ab20:	3326      	adds	r3, #38	@ 0x26
 800ab22:	2200      	movs	r2, #0
 800ab24:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	32b0      	adds	r2, #176	@ 0xb0
 800ab30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d01f      	beq.n	800ab78 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	33b0      	adds	r3, #176	@ 0xb0
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	32b0      	adds	r2, #176	@ 0xb0
 800ab56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f002 fb9a 	bl	800d294 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	32b0      	adds	r2, #176	@ 0xb0
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	200000ab 	.word	0x200000ab
 800ab88:	200000ac 	.word	0x200000ac
 800ab8c:	200000ad 	.word	0x200000ad

0800ab90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b086      	sub	sp, #24
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	32b0      	adds	r2, #176	@ 0xb0
 800aba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800abaa:	2300      	movs	r3, #0
 800abac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800abae:	2300      	movs	r3, #0
 800abb0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800abb2:	2300      	movs	r3, #0
 800abb4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d101      	bne.n	800abc0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800abbc:	2303      	movs	r3, #3
 800abbe:	e0bf      	b.n	800ad40 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d050      	beq.n	800ac6e <USBD_CDC_Setup+0xde>
 800abcc:	2b20      	cmp	r3, #32
 800abce:	f040 80af 	bne.w	800ad30 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	88db      	ldrh	r3, [r3, #6]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d03a      	beq.n	800ac50 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	b25b      	sxtb	r3, r3
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	da1b      	bge.n	800ac1c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	33b0      	adds	r3, #176	@ 0xb0
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	4413      	add	r3, r2
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800abfa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	88d2      	ldrh	r2, [r2, #6]
 800ac00:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	88db      	ldrh	r3, [r3, #6]
 800ac06:	2b07      	cmp	r3, #7
 800ac08:	bf28      	it	cs
 800ac0a:	2307      	movcs	r3, #7
 800ac0c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	89fa      	ldrh	r2, [r7, #14]
 800ac12:	4619      	mov	r1, r3
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f001 fd93 	bl	800c740 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ac1a:	e090      	b.n	800ad3e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	785a      	ldrb	r2, [r3, #1]
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	88db      	ldrh	r3, [r3, #6]
 800ac2a:	2b3f      	cmp	r3, #63	@ 0x3f
 800ac2c:	d803      	bhi.n	800ac36 <USBD_CDC_Setup+0xa6>
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	88db      	ldrh	r3, [r3, #6]
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	e000      	b.n	800ac38 <USBD_CDC_Setup+0xa8>
 800ac36:	2240      	movs	r2, #64	@ 0x40
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ac3e:	6939      	ldr	r1, [r7, #16]
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ac46:	461a      	mov	r2, r3
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f001 fda5 	bl	800c798 <USBD_CtlPrepareRx>
      break;
 800ac4e:	e076      	b.n	800ad3e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	33b0      	adds	r3, #176	@ 0xb0
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4413      	add	r3, r2
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	689b      	ldr	r3, [r3, #8]
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	7850      	ldrb	r0, [r2, #1]
 800ac66:	2200      	movs	r2, #0
 800ac68:	6839      	ldr	r1, [r7, #0]
 800ac6a:	4798      	blx	r3
      break;
 800ac6c:	e067      	b.n	800ad3e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	785b      	ldrb	r3, [r3, #1]
 800ac72:	2b0b      	cmp	r3, #11
 800ac74:	d851      	bhi.n	800ad1a <USBD_CDC_Setup+0x18a>
 800ac76:	a201      	add	r2, pc, #4	@ (adr r2, 800ac7c <USBD_CDC_Setup+0xec>)
 800ac78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac7c:	0800acad 	.word	0x0800acad
 800ac80:	0800ad29 	.word	0x0800ad29
 800ac84:	0800ad1b 	.word	0x0800ad1b
 800ac88:	0800ad1b 	.word	0x0800ad1b
 800ac8c:	0800ad1b 	.word	0x0800ad1b
 800ac90:	0800ad1b 	.word	0x0800ad1b
 800ac94:	0800ad1b 	.word	0x0800ad1b
 800ac98:	0800ad1b 	.word	0x0800ad1b
 800ac9c:	0800ad1b 	.word	0x0800ad1b
 800aca0:	0800ad1b 	.word	0x0800ad1b
 800aca4:	0800acd7 	.word	0x0800acd7
 800aca8:	0800ad01 	.word	0x0800ad01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	2b03      	cmp	r3, #3
 800acb6:	d107      	bne.n	800acc8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800acb8:	f107 030a 	add.w	r3, r7, #10
 800acbc:	2202      	movs	r2, #2
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f001 fd3d 	bl	800c740 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800acc6:	e032      	b.n	800ad2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800acc8:	6839      	ldr	r1, [r7, #0]
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f001 fcbb 	bl	800c646 <USBD_CtlError>
            ret = USBD_FAIL;
 800acd0:	2303      	movs	r3, #3
 800acd2:	75fb      	strb	r3, [r7, #23]
          break;
 800acd4:	e02b      	b.n	800ad2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	2b03      	cmp	r3, #3
 800ace0:	d107      	bne.n	800acf2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ace2:	f107 030d 	add.w	r3, r7, #13
 800ace6:	2201      	movs	r2, #1
 800ace8:	4619      	mov	r1, r3
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f001 fd28 	bl	800c740 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800acf0:	e01d      	b.n	800ad2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f001 fca6 	bl	800c646 <USBD_CtlError>
            ret = USBD_FAIL;
 800acfa:	2303      	movs	r3, #3
 800acfc:	75fb      	strb	r3, [r7, #23]
          break;
 800acfe:	e016      	b.n	800ad2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	2b03      	cmp	r3, #3
 800ad0a:	d00f      	beq.n	800ad2c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ad0c:	6839      	ldr	r1, [r7, #0]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f001 fc99 	bl	800c646 <USBD_CtlError>
            ret = USBD_FAIL;
 800ad14:	2303      	movs	r3, #3
 800ad16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ad18:	e008      	b.n	800ad2c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f001 fc92 	bl	800c646 <USBD_CtlError>
          ret = USBD_FAIL;
 800ad22:	2303      	movs	r3, #3
 800ad24:	75fb      	strb	r3, [r7, #23]
          break;
 800ad26:	e002      	b.n	800ad2e <USBD_CDC_Setup+0x19e>
          break;
 800ad28:	bf00      	nop
 800ad2a:	e008      	b.n	800ad3e <USBD_CDC_Setup+0x1ae>
          break;
 800ad2c:	bf00      	nop
      }
      break;
 800ad2e:	e006      	b.n	800ad3e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ad30:	6839      	ldr	r1, [r7, #0]
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f001 fc87 	bl	800c646 <USBD_CtlError>
      ret = USBD_FAIL;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	75fb      	strb	r3, [r7, #23]
      break;
 800ad3c:	bf00      	nop
  }

  return (uint8_t)ret;
 800ad3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3718      	adds	r7, #24
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	32b0      	adds	r2, #176	@ 0xb0
 800ad66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d101      	bne.n	800ad72 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ad6e:	2303      	movs	r3, #3
 800ad70:	e065      	b.n	800ae3e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	32b0      	adds	r2, #176	@ 0xb0
 800ad7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad80:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad82:	78fb      	ldrb	r3, [r7, #3]
 800ad84:	f003 020f 	and.w	r2, r3, #15
 800ad88:	6879      	ldr	r1, [r7, #4]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4413      	add	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	440b      	add	r3, r1
 800ad94:	3318      	adds	r3, #24
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d02f      	beq.n	800adfc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ad9c:	78fb      	ldrb	r3, [r7, #3]
 800ad9e:	f003 020f 	and.w	r2, r3, #15
 800ada2:	6879      	ldr	r1, [r7, #4]
 800ada4:	4613      	mov	r3, r2
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4413      	add	r3, r2
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	440b      	add	r3, r1
 800adae:	3318      	adds	r3, #24
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	78fb      	ldrb	r3, [r7, #3]
 800adb4:	f003 010f 	and.w	r1, r3, #15
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	460b      	mov	r3, r1
 800adbc:	00db      	lsls	r3, r3, #3
 800adbe:	440b      	add	r3, r1
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4403      	add	r3, r0
 800adc4:	331c      	adds	r3, #28
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	fbb2 f1f3 	udiv	r1, r2, r3
 800adcc:	fb01 f303 	mul.w	r3, r1, r3
 800add0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800add2:	2b00      	cmp	r3, #0
 800add4:	d112      	bne.n	800adfc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800add6:	78fb      	ldrb	r3, [r7, #3]
 800add8:	f003 020f 	and.w	r2, r3, #15
 800addc:	6879      	ldr	r1, [r7, #4]
 800adde:	4613      	mov	r3, r2
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	4413      	add	r3, r2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	440b      	add	r3, r1
 800ade8:	3318      	adds	r3, #24
 800adea:	2200      	movs	r2, #0
 800adec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800adee:	78f9      	ldrb	r1, [r7, #3]
 800adf0:	2300      	movs	r3, #0
 800adf2:	2200      	movs	r2, #0
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f002 f9ea 	bl	800d1ce <USBD_LL_Transmit>
 800adfa:	e01f      	b.n	800ae3c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	33b0      	adds	r3, #176	@ 0xb0
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	4413      	add	r3, r2
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	691b      	ldr	r3, [r3, #16]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d010      	beq.n	800ae3c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	33b0      	adds	r3, #176	@ 0xb0
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4413      	add	r3, r2
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ae32:	68ba      	ldr	r2, [r7, #8]
 800ae34:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ae38:	78fa      	ldrb	r2, [r7, #3]
 800ae3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b084      	sub	sp, #16
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
 800ae4e:	460b      	mov	r3, r1
 800ae50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	32b0      	adds	r2, #176	@ 0xb0
 800ae5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	32b0      	adds	r2, #176	@ 0xb0
 800ae6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d101      	bne.n	800ae78 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ae74:	2303      	movs	r3, #3
 800ae76:	e01a      	b.n	800aeae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ae78:	78fb      	ldrb	r3, [r7, #3]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f002 f9e8 	bl	800d252 <USBD_LL_GetRxDataSize>
 800ae82:	4602      	mov	r2, r0
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	33b0      	adds	r3, #176	@ 0xb0
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	4413      	add	r3, r2
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800aea8:	4611      	mov	r1, r2
 800aeaa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b084      	sub	sp, #16
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	32b0      	adds	r2, #176	@ 0xb0
 800aec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aecc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d101      	bne.n	800aed8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aed4:	2303      	movs	r3, #3
 800aed6:	e024      	b.n	800af22 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	33b0      	adds	r3, #176	@ 0xb0
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d019      	beq.n	800af20 <USBD_CDC_EP0_RxReady+0x6a>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800aef2:	2bff      	cmp	r3, #255	@ 0xff
 800aef4:	d014      	beq.n	800af20 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	33b0      	adds	r3, #176	@ 0xb0
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	4413      	add	r3, r2
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800af0e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800af16:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	22ff      	movs	r2, #255	@ 0xff
 800af1c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
	...

0800af2c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b086      	sub	sp, #24
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af34:	2182      	movs	r1, #130	@ 0x82
 800af36:	4818      	ldr	r0, [pc, #96]	@ (800af98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af38:	f000 fd4f 	bl	800b9da <USBD_GetEpDesc>
 800af3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af3e:	2101      	movs	r1, #1
 800af40:	4815      	ldr	r0, [pc, #84]	@ (800af98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af42:	f000 fd4a 	bl	800b9da <USBD_GetEpDesc>
 800af46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af48:	2181      	movs	r1, #129	@ 0x81
 800af4a:	4813      	ldr	r0, [pc, #76]	@ (800af98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af4c:	f000 fd45 	bl	800b9da <USBD_GetEpDesc>
 800af50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d002      	beq.n	800af5e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	2210      	movs	r2, #16
 800af5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d006      	beq.n	800af72 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	2200      	movs	r2, #0
 800af68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af6c:	711a      	strb	r2, [r3, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d006      	beq.n	800af86 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af80:	711a      	strb	r2, [r3, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2243      	movs	r2, #67	@ 0x43
 800af8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af8c:	4b02      	ldr	r3, [pc, #8]	@ (800af98 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3718      	adds	r7, #24
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	20000068 	.word	0x20000068

0800af9c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800afa4:	2182      	movs	r1, #130	@ 0x82
 800afa6:	4818      	ldr	r0, [pc, #96]	@ (800b008 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800afa8:	f000 fd17 	bl	800b9da <USBD_GetEpDesc>
 800afac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800afae:	2101      	movs	r1, #1
 800afb0:	4815      	ldr	r0, [pc, #84]	@ (800b008 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800afb2:	f000 fd12 	bl	800b9da <USBD_GetEpDesc>
 800afb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800afb8:	2181      	movs	r1, #129	@ 0x81
 800afba:	4813      	ldr	r0, [pc, #76]	@ (800b008 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800afbc:	f000 fd0d 	bl	800b9da <USBD_GetEpDesc>
 800afc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d002      	beq.n	800afce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	2210      	movs	r2, #16
 800afcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d006      	beq.n	800afe2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	2200      	movs	r2, #0
 800afd8:	711a      	strb	r2, [r3, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	f042 0202 	orr.w	r2, r2, #2
 800afe0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d006      	beq.n	800aff6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	711a      	strb	r2, [r3, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	f042 0202 	orr.w	r2, r2, #2
 800aff4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2243      	movs	r2, #67	@ 0x43
 800affa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800affc:	4b02      	ldr	r3, [pc, #8]	@ (800b008 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800affe:	4618      	mov	r0, r3
 800b000:	3718      	adds	r7, #24
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	20000068 	.word	0x20000068

0800b00c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b086      	sub	sp, #24
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b014:	2182      	movs	r1, #130	@ 0x82
 800b016:	4818      	ldr	r0, [pc, #96]	@ (800b078 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b018:	f000 fcdf 	bl	800b9da <USBD_GetEpDesc>
 800b01c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b01e:	2101      	movs	r1, #1
 800b020:	4815      	ldr	r0, [pc, #84]	@ (800b078 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b022:	f000 fcda 	bl	800b9da <USBD_GetEpDesc>
 800b026:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b028:	2181      	movs	r1, #129	@ 0x81
 800b02a:	4813      	ldr	r0, [pc, #76]	@ (800b078 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b02c:	f000 fcd5 	bl	800b9da <USBD_GetEpDesc>
 800b030:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d002      	beq.n	800b03e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	2210      	movs	r2, #16
 800b03c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d006      	beq.n	800b052 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	2200      	movs	r2, #0
 800b048:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b04c:	711a      	strb	r2, [r3, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d006      	beq.n	800b066 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b060:	711a      	strb	r2, [r3, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2243      	movs	r2, #67	@ 0x43
 800b06a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b06c:	4b02      	ldr	r3, [pc, #8]	@ (800b078 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3718      	adds	r7, #24
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	20000068 	.word	0x20000068

0800b07c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	220a      	movs	r2, #10
 800b088:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b08a:	4b03      	ldr	r3, [pc, #12]	@ (800b098 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr
 800b098:	20000024 	.word	0x20000024

0800b09c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d101      	bne.n	800b0b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	e009      	b.n	800b0c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	33b0      	adds	r3, #176	@ 0xb0
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	683a      	ldr	r2, [r7, #0]
 800b0c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b0c2:	2300      	movs	r3, #0
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b087      	sub	sp, #28
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	32b0      	adds	r2, #176	@ 0xb0
 800b0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d101      	bne.n	800b0f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	e008      	b.n	800b108 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	371c      	adds	r7, #28
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	32b0      	adds	r2, #176	@ 0xb0
 800b128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b12c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d101      	bne.n	800b138 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b134:	2303      	movs	r3, #3
 800b136:	e004      	b.n	800b142 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3714      	adds	r7, #20
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr
	...

0800b150 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	32b0      	adds	r2, #176	@ 0xb0
 800b162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b166:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b168:	2301      	movs	r3, #1
 800b16a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d101      	bne.n	800b176 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b172:	2303      	movs	r3, #3
 800b174:	e025      	b.n	800b1c2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d11f      	bne.n	800b1c0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	2201      	movs	r2, #1
 800b184:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b188:	4b10      	ldr	r3, [pc, #64]	@ (800b1cc <USBD_CDC_TransmitPacket+0x7c>)
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	f003 020f 	and.w	r2, r3, #15
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	4613      	mov	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4403      	add	r3, r0
 800b1a2:	3318      	adds	r3, #24
 800b1a4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b1a6:	4b09      	ldr	r3, [pc, #36]	@ (800b1cc <USBD_CDC_TransmitPacket+0x7c>)
 800b1a8:	7819      	ldrb	r1, [r3, #0]
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f002 f809 	bl	800d1ce <USBD_LL_Transmit>

    ret = USBD_OK;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	200000ab 	.word	0x200000ab

0800b1d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	32b0      	adds	r2, #176	@ 0xb0
 800b1e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	32b0      	adds	r2, #176	@ 0xb0
 800b1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d101      	bne.n	800b1fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b1fa:	2303      	movs	r3, #3
 800b1fc:	e018      	b.n	800b230 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	7c1b      	ldrb	r3, [r3, #16]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d10a      	bne.n	800b21c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b206:	4b0c      	ldr	r3, [pc, #48]	@ (800b238 <USBD_CDC_ReceivePacket+0x68>)
 800b208:	7819      	ldrb	r1, [r3, #0]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b210:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f001 fffb 	bl	800d210 <USBD_LL_PrepareReceive>
 800b21a:	e008      	b.n	800b22e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b21c:	4b06      	ldr	r3, [pc, #24]	@ (800b238 <USBD_CDC_ReceivePacket+0x68>)
 800b21e:	7819      	ldrb	r1, [r3, #0]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b226:	2340      	movs	r3, #64	@ 0x40
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f001 fff1 	bl	800d210 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	200000ac 	.word	0x200000ac

0800b23c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	4613      	mov	r3, r2
 800b248:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d101      	bne.n	800b254 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b250:	2303      	movs	r3, #3
 800b252:	e01f      	b.n	800b294 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2200      	movs	r2, #0
 800b258:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2200      	movs	r2, #0
 800b260:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2200      	movs	r2, #0
 800b268:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d003      	beq.n	800b27a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2201      	movs	r2, #1
 800b27e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	79fa      	ldrb	r2, [r7, #7]
 800b286:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f001 fe6b 	bl	800cf64 <USBD_LL_Init>
 800b28e:	4603      	mov	r3, r0
 800b290:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b292:	7dfb      	ldrb	r3, [r7, #23]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3718      	adds	r7, #24
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d101      	bne.n	800b2b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b2b0:	2303      	movs	r3, #3
 800b2b2:	e025      	b.n	800b300 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	683a      	ldr	r2, [r7, #0]
 800b2b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	32ae      	adds	r2, #174	@ 0xae
 800b2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00f      	beq.n	800b2f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	32ae      	adds	r2, #174	@ 0xae
 800b2da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e0:	f107 020e 	add.w	r2, r7, #14
 800b2e4:	4610      	mov	r0, r2
 800b2e6:	4798      	blx	r3
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b2f6:	1c5a      	adds	r2, r3, #1
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f001 fe73 	bl	800cffc <USBD_LL_Start>
 800b316:	4603      	mov	r3, r0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b328:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	370c      	adds	r7, #12
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b084      	sub	sp, #16
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
 800b33e:	460b      	mov	r3, r1
 800b340:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d009      	beq.n	800b364 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	78fa      	ldrb	r2, [r7, #3]
 800b35a:	4611      	mov	r1, r2
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	4798      	blx	r3
 800b360:	4603      	mov	r3, r0
 800b362:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b364:	7bfb      	ldrb	r3, [r7, #15]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b084      	sub	sp, #16
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
 800b376:	460b      	mov	r3, r1
 800b378:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	78fa      	ldrb	r2, [r7, #3]
 800b388:	4611      	mov	r1, r2
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	4798      	blx	r3
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d001      	beq.n	800b398 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b394:	2303      	movs	r3, #3
 800b396:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b398:	7bfb      	ldrb	r3, [r7, #15]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b084      	sub	sp, #16
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b3b2:	6839      	ldr	r1, [r7, #0]
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f001 f90c 	bl	800c5d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b3d6:	f003 031f 	and.w	r3, r3, #31
 800b3da:	2b02      	cmp	r3, #2
 800b3dc:	d01a      	beq.n	800b414 <USBD_LL_SetupStage+0x72>
 800b3de:	2b02      	cmp	r3, #2
 800b3e0:	d822      	bhi.n	800b428 <USBD_LL_SetupStage+0x86>
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d002      	beq.n	800b3ec <USBD_LL_SetupStage+0x4a>
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d00a      	beq.n	800b400 <USBD_LL_SetupStage+0x5e>
 800b3ea:	e01d      	b.n	800b428 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 fb63 	bl	800bac0 <USBD_StdDevReq>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	73fb      	strb	r3, [r7, #15]
      break;
 800b3fe:	e020      	b.n	800b442 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b406:	4619      	mov	r1, r3
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 fbcb 	bl	800bba4 <USBD_StdItfReq>
 800b40e:	4603      	mov	r3, r0
 800b410:	73fb      	strb	r3, [r7, #15]
      break;
 800b412:	e016      	b.n	800b442 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b41a:	4619      	mov	r1, r3
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fc2d 	bl	800bc7c <USBD_StdEPReq>
 800b422:	4603      	mov	r3, r0
 800b424:	73fb      	strb	r3, [r7, #15]
      break;
 800b426:	e00c      	b.n	800b442 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b42e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b432:	b2db      	uxtb	r3, r3
 800b434:	4619      	mov	r1, r3
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f001 fe40 	bl	800d0bc <USBD_LL_StallEP>
 800b43c:	4603      	mov	r3, r0
 800b43e:	73fb      	strb	r3, [r7, #15]
      break;
 800b440:	bf00      	nop
  }

  return ret;
 800b442:	7bfb      	ldrb	r3, [r7, #15]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b086      	sub	sp, #24
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	460b      	mov	r3, r1
 800b456:	607a      	str	r2, [r7, #4]
 800b458:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b45e:	7afb      	ldrb	r3, [r7, #11]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d16e      	bne.n	800b542 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b46a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b472:	2b03      	cmp	r3, #3
 800b474:	f040 8098 	bne.w	800b5a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	689a      	ldr	r2, [r3, #8]
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	429a      	cmp	r2, r3
 800b482:	d913      	bls.n	800b4ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	689a      	ldr	r2, [r3, #8]
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	1ad2      	subs	r2, r2, r3
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	68da      	ldr	r2, [r3, #12]
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	4293      	cmp	r3, r2
 800b49c:	bf28      	it	cs
 800b49e:	4613      	movcs	r3, r2
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	6879      	ldr	r1, [r7, #4]
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f001 f994 	bl	800c7d2 <USBD_CtlContinueRx>
 800b4aa:	e07d      	b.n	800b5a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b4b2:	f003 031f 	and.w	r3, r3, #31
 800b4b6:	2b02      	cmp	r3, #2
 800b4b8:	d014      	beq.n	800b4e4 <USBD_LL_DataOutStage+0x98>
 800b4ba:	2b02      	cmp	r3, #2
 800b4bc:	d81d      	bhi.n	800b4fa <USBD_LL_DataOutStage+0xae>
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d002      	beq.n	800b4c8 <USBD_LL_DataOutStage+0x7c>
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d003      	beq.n	800b4ce <USBD_LL_DataOutStage+0x82>
 800b4c6:	e018      	b.n	800b4fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	75bb      	strb	r3, [r7, #22]
            break;
 800b4cc:	e018      	b.n	800b500 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b4d4:	b2db      	uxtb	r3, r3
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f000 fa64 	bl	800b9a6 <USBD_CoreFindIF>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	75bb      	strb	r3, [r7, #22]
            break;
 800b4e2:	e00d      	b.n	800b500 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	f000 fa66 	bl	800b9c0 <USBD_CoreFindEP>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	75bb      	strb	r3, [r7, #22]
            break;
 800b4f8:	e002      	b.n	800b500 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	75bb      	strb	r3, [r7, #22]
            break;
 800b4fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b500:	7dbb      	ldrb	r3, [r7, #22]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d119      	bne.n	800b53a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	2b03      	cmp	r3, #3
 800b510:	d113      	bne.n	800b53a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b512:	7dba      	ldrb	r2, [r7, #22]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	32ae      	adds	r2, #174	@ 0xae
 800b518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d00b      	beq.n	800b53a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b522:	7dba      	ldrb	r2, [r7, #22]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b52a:	7dba      	ldrb	r2, [r7, #22]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	32ae      	adds	r2, #174	@ 0xae
 800b530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f001 f95a 	bl	800c7f4 <USBD_CtlSendStatus>
 800b540:	e032      	b.n	800b5a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b542:	7afb      	ldrb	r3, [r7, #11]
 800b544:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	4619      	mov	r1, r3
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f000 fa37 	bl	800b9c0 <USBD_CoreFindEP>
 800b552:	4603      	mov	r3, r0
 800b554:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b556:	7dbb      	ldrb	r3, [r7, #22]
 800b558:	2bff      	cmp	r3, #255	@ 0xff
 800b55a:	d025      	beq.n	800b5a8 <USBD_LL_DataOutStage+0x15c>
 800b55c:	7dbb      	ldrb	r3, [r7, #22]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d122      	bne.n	800b5a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	2b03      	cmp	r3, #3
 800b56c:	d117      	bne.n	800b59e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b56e:	7dba      	ldrb	r2, [r7, #22]
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	32ae      	adds	r2, #174	@ 0xae
 800b574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b578:	699b      	ldr	r3, [r3, #24]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d00f      	beq.n	800b59e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b57e:	7dba      	ldrb	r2, [r7, #22]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b586:	7dba      	ldrb	r2, [r7, #22]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	32ae      	adds	r2, #174	@ 0xae
 800b58c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b590:	699b      	ldr	r3, [r3, #24]
 800b592:	7afa      	ldrb	r2, [r7, #11]
 800b594:	4611      	mov	r1, r2
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	4798      	blx	r3
 800b59a:	4603      	mov	r3, r0
 800b59c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b59e:	7dfb      	ldrb	r3, [r7, #23]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d001      	beq.n	800b5a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b5a4:	7dfb      	ldrb	r3, [r7, #23]
 800b5a6:	e000      	b.n	800b5aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3718      	adds	r7, #24
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b086      	sub	sp, #24
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	60f8      	str	r0, [r7, #12]
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	607a      	str	r2, [r7, #4]
 800b5be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b5c0:	7afb      	ldrb	r3, [r7, #11]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d16f      	bne.n	800b6a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	3314      	adds	r3, #20
 800b5ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b5d2:	2b02      	cmp	r3, #2
 800b5d4:	d15a      	bne.n	800b68c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	689a      	ldr	r2, [r3, #8]
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d914      	bls.n	800b60c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	689a      	ldr	r2, [r3, #8]
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	1ad2      	subs	r2, r2, r3
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	6879      	ldr	r1, [r7, #4]
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f001 f8bc 	bl	800c776 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5fe:	2300      	movs	r3, #0
 800b600:	2200      	movs	r2, #0
 800b602:	2100      	movs	r1, #0
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f001 fe03 	bl	800d210 <USBD_LL_PrepareReceive>
 800b60a:	e03f      	b.n	800b68c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	68da      	ldr	r2, [r3, #12]
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	429a      	cmp	r2, r3
 800b616:	d11c      	bne.n	800b652 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b620:	429a      	cmp	r2, r3
 800b622:	d316      	bcc.n	800b652 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	685a      	ldr	r2, [r3, #4]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b62e:	429a      	cmp	r2, r3
 800b630:	d20f      	bcs.n	800b652 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b632:	2200      	movs	r2, #0
 800b634:	2100      	movs	r1, #0
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f001 f89d 	bl	800c776 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2200      	movs	r2, #0
 800b640:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b644:	2300      	movs	r3, #0
 800b646:	2200      	movs	r2, #0
 800b648:	2100      	movs	r1, #0
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f001 fde0 	bl	800d210 <USBD_LL_PrepareReceive>
 800b650:	e01c      	b.n	800b68c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	2b03      	cmp	r3, #3
 800b65c:	d10f      	bne.n	800b67e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d009      	beq.n	800b67e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2200      	movs	r2, #0
 800b66e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b67e:	2180      	movs	r1, #128	@ 0x80
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f001 fd1b 	bl	800d0bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f001 f8c7 	bl	800c81a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d03a      	beq.n	800b70c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f7ff fe42 	bl	800b320 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b6a4:	e032      	b.n	800b70c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b6a6:	7afb      	ldrb	r3, [r7, #11]
 800b6a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f000 f985 	bl	800b9c0 <USBD_CoreFindEP>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
 800b6bc:	2bff      	cmp	r3, #255	@ 0xff
 800b6be:	d025      	beq.n	800b70c <USBD_LL_DataInStage+0x15a>
 800b6c0:	7dfb      	ldrb	r3, [r7, #23]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d122      	bne.n	800b70c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	2b03      	cmp	r3, #3
 800b6d0:	d11c      	bne.n	800b70c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b6d2:	7dfa      	ldrb	r2, [r7, #23]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	32ae      	adds	r2, #174	@ 0xae
 800b6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6dc:	695b      	ldr	r3, [r3, #20]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d014      	beq.n	800b70c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b6e2:	7dfa      	ldrb	r2, [r7, #23]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b6ea:	7dfa      	ldrb	r2, [r7, #23]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	32ae      	adds	r2, #174	@ 0xae
 800b6f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6f4:	695b      	ldr	r3, [r3, #20]
 800b6f6:	7afa      	ldrb	r2, [r7, #11]
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	68f8      	ldr	r0, [r7, #12]
 800b6fc:	4798      	blx	r3
 800b6fe:	4603      	mov	r3, r0
 800b700:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b702:	7dbb      	ldrb	r3, [r7, #22]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b708:	7dbb      	ldrb	r3, [r7, #22]
 800b70a:	e000      	b.n	800b70e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3718      	adds	r7, #24
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b084      	sub	sp, #16
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b71e:	2300      	movs	r3, #0
 800b720:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2201      	movs	r2, #1
 800b726:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d014      	beq.n	800b77c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00e      	beq.n	800b77c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	6852      	ldr	r2, [r2, #4]
 800b76a:	b2d2      	uxtb	r2, r2
 800b76c:	4611      	mov	r1, r2
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	4798      	blx	r3
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d001      	beq.n	800b77c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b778:	2303      	movs	r3, #3
 800b77a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b77c:	2340      	movs	r3, #64	@ 0x40
 800b77e:	2200      	movs	r2, #0
 800b780:	2100      	movs	r1, #0
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f001 fc55 	bl	800d032 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2240      	movs	r2, #64	@ 0x40
 800b794:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b798:	2340      	movs	r3, #64	@ 0x40
 800b79a:	2200      	movs	r2, #0
 800b79c:	2180      	movs	r1, #128	@ 0x80
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f001 fc47 	bl	800d032 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2240      	movs	r2, #64	@ 0x40
 800b7ae:	621a      	str	r2, [r3, #32]

  return ret;
 800b7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b7ba:	b480      	push	{r7}
 800b7bc:	b083      	sub	sp, #12
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	78fa      	ldrb	r2, [r7, #3]
 800b7ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b7cc:	2300      	movs	r3, #0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	370c      	adds	r7, #12
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr

0800b7da <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b083      	sub	sp, #12
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	2b04      	cmp	r3, #4
 800b7ec:	d006      	beq.n	800b7fc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7f4:	b2da      	uxtb	r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2204      	movs	r2, #4
 800b800:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b804:	2300      	movs	r3, #0
}
 800b806:	4618      	mov	r0, r3
 800b808:	370c      	adds	r7, #12
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr

0800b812 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b812:	b480      	push	{r7}
 800b814:	b083      	sub	sp, #12
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b820:	b2db      	uxtb	r3, r3
 800b822:	2b04      	cmp	r3, #4
 800b824:	d106      	bne.n	800b834 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b82c:	b2da      	uxtb	r2, r3
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	370c      	adds	r7, #12
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b082      	sub	sp, #8
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b850:	b2db      	uxtb	r3, r3
 800b852:	2b03      	cmp	r3, #3
 800b854:	d110      	bne.n	800b878 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00b      	beq.n	800b878 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b866:	69db      	ldr	r3, [r3, #28]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d005      	beq.n	800b878 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b872:	69db      	ldr	r3, [r3, #28]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b082      	sub	sp, #8
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
 800b88a:	460b      	mov	r3, r1
 800b88c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	32ae      	adds	r2, #174	@ 0xae
 800b898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d101      	bne.n	800b8a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	e01c      	b.n	800b8de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	d115      	bne.n	800b8dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	32ae      	adds	r2, #174	@ 0xae
 800b8ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8be:	6a1b      	ldr	r3, [r3, #32]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d00b      	beq.n	800b8dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	32ae      	adds	r2, #174	@ 0xae
 800b8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d2:	6a1b      	ldr	r3, [r3, #32]
 800b8d4:	78fa      	ldrb	r2, [r7, #3]
 800b8d6:	4611      	mov	r1, r2
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3708      	adds	r7, #8
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b082      	sub	sp, #8
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	32ae      	adds	r2, #174	@ 0xae
 800b8fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d101      	bne.n	800b908 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b904:	2303      	movs	r3, #3
 800b906:	e01c      	b.n	800b942 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	2b03      	cmp	r3, #3
 800b912:	d115      	bne.n	800b940 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	32ae      	adds	r2, #174	@ 0xae
 800b91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00b      	beq.n	800b940 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	32ae      	adds	r2, #174	@ 0xae
 800b932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b938:	78fa      	ldrb	r2, [r7, #3]
 800b93a:	4611      	mov	r1, r2
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b94a:	b480      	push	{r7}
 800b94c:	b083      	sub	sp, #12
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b968:	2300      	movs	r3, #0
 800b96a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2201      	movs	r2, #1
 800b970:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00e      	beq.n	800b99c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	6852      	ldr	r2, [r2, #4]
 800b98a:	b2d2      	uxtb	r2, r2
 800b98c:	4611      	mov	r1, r2
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	4798      	blx	r3
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d001      	beq.n	800b99c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b998:	2303      	movs	r3, #3
 800b99a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b9a6:	b480      	push	{r7}
 800b9a8:	b083      	sub	sp, #12
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b9b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b9cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	370c      	adds	r7, #12
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr

0800b9da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b086      	sub	sp, #24
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	885b      	ldrh	r3, [r3, #2]
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	7812      	ldrb	r2, [r2, #0]
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d91f      	bls.n	800ba40 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ba06:	e013      	b.n	800ba30 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ba08:	f107 030a 	add.w	r3, r7, #10
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	6978      	ldr	r0, [r7, #20]
 800ba10:	f000 f81b 	bl	800ba4a <USBD_GetNextDesc>
 800ba14:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	785b      	ldrb	r3, [r3, #1]
 800ba1a:	2b05      	cmp	r3, #5
 800ba1c:	d108      	bne.n	800ba30 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	789b      	ldrb	r3, [r3, #2]
 800ba26:	78fa      	ldrb	r2, [r7, #3]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d008      	beq.n	800ba3e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	885b      	ldrh	r3, [r3, #2]
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	897b      	ldrh	r3, [r7, #10]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d8e5      	bhi.n	800ba08 <USBD_GetEpDesc+0x2e>
 800ba3c:	e000      	b.n	800ba40 <USBD_GetEpDesc+0x66>
          break;
 800ba3e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ba40:	693b      	ldr	r3, [r7, #16]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3718      	adds	r7, #24
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ba4a:	b480      	push	{r7}
 800ba4c:	b085      	sub	sp, #20
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
 800ba52:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	881b      	ldrh	r3, [r3, #0]
 800ba5c:	68fa      	ldr	r2, [r7, #12]
 800ba5e:	7812      	ldrb	r2, [r2, #0]
 800ba60:	4413      	add	r3, r2
 800ba62:	b29a      	uxth	r2, r3
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4413      	add	r3, r2
 800ba72:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ba74:	68fb      	ldr	r3, [r7, #12]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3714      	adds	r7, #20
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr

0800ba82 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ba82:	b480      	push	{r7}
 800ba84:	b087      	sub	sp, #28
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	3301      	adds	r3, #1
 800ba98:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800baa0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800baa4:	021b      	lsls	r3, r3, #8
 800baa6:	b21a      	sxth	r2, r3
 800baa8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800baac:	4313      	orrs	r3, r2
 800baae:	b21b      	sxth	r3, r3
 800bab0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bab2:	89fb      	ldrh	r3, [r7, #14]
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	371c      	adds	r7, #28
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800baca:	2300      	movs	r3, #0
 800bacc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bad6:	2b40      	cmp	r3, #64	@ 0x40
 800bad8:	d005      	beq.n	800bae6 <USBD_StdDevReq+0x26>
 800bada:	2b40      	cmp	r3, #64	@ 0x40
 800badc:	d857      	bhi.n	800bb8e <USBD_StdDevReq+0xce>
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00f      	beq.n	800bb02 <USBD_StdDevReq+0x42>
 800bae2:	2b20      	cmp	r3, #32
 800bae4:	d153      	bne.n	800bb8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	32ae      	adds	r2, #174	@ 0xae
 800baf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	6839      	ldr	r1, [r7, #0]
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	4798      	blx	r3
 800bafc:	4603      	mov	r3, r0
 800bafe:	73fb      	strb	r3, [r7, #15]
      break;
 800bb00:	e04a      	b.n	800bb98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	785b      	ldrb	r3, [r3, #1]
 800bb06:	2b09      	cmp	r3, #9
 800bb08:	d83b      	bhi.n	800bb82 <USBD_StdDevReq+0xc2>
 800bb0a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb10 <USBD_StdDevReq+0x50>)
 800bb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb10:	0800bb65 	.word	0x0800bb65
 800bb14:	0800bb79 	.word	0x0800bb79
 800bb18:	0800bb83 	.word	0x0800bb83
 800bb1c:	0800bb6f 	.word	0x0800bb6f
 800bb20:	0800bb83 	.word	0x0800bb83
 800bb24:	0800bb43 	.word	0x0800bb43
 800bb28:	0800bb39 	.word	0x0800bb39
 800bb2c:	0800bb83 	.word	0x0800bb83
 800bb30:	0800bb5b 	.word	0x0800bb5b
 800bb34:	0800bb4d 	.word	0x0800bb4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bb38:	6839      	ldr	r1, [r7, #0]
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 fa3c 	bl	800bfb8 <USBD_GetDescriptor>
          break;
 800bb40:	e024      	b.n	800bb8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bb42:	6839      	ldr	r1, [r7, #0]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 fba1 	bl	800c28c <USBD_SetAddress>
          break;
 800bb4a:	e01f      	b.n	800bb8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bb4c:	6839      	ldr	r1, [r7, #0]
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 fbe0 	bl	800c314 <USBD_SetConfig>
 800bb54:	4603      	mov	r3, r0
 800bb56:	73fb      	strb	r3, [r7, #15]
          break;
 800bb58:	e018      	b.n	800bb8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bb5a:	6839      	ldr	r1, [r7, #0]
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 fc83 	bl	800c468 <USBD_GetConfig>
          break;
 800bb62:	e013      	b.n	800bb8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bb64:	6839      	ldr	r1, [r7, #0]
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fcb4 	bl	800c4d4 <USBD_GetStatus>
          break;
 800bb6c:	e00e      	b.n	800bb8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bb6e:	6839      	ldr	r1, [r7, #0]
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 fce3 	bl	800c53c <USBD_SetFeature>
          break;
 800bb76:	e009      	b.n	800bb8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bb78:	6839      	ldr	r1, [r7, #0]
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fd07 	bl	800c58e <USBD_ClrFeature>
          break;
 800bb80:	e004      	b.n	800bb8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bb82:	6839      	ldr	r1, [r7, #0]
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 fd5e 	bl	800c646 <USBD_CtlError>
          break;
 800bb8a:	bf00      	nop
      }
      break;
 800bb8c:	e004      	b.n	800bb98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bb8e:	6839      	ldr	r1, [r7, #0]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 fd58 	bl	800c646 <USBD_CtlError>
      break;
 800bb96:	bf00      	nop
  }

  return ret;
 800bb98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop

0800bba4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbba:	2b40      	cmp	r3, #64	@ 0x40
 800bbbc:	d005      	beq.n	800bbca <USBD_StdItfReq+0x26>
 800bbbe:	2b40      	cmp	r3, #64	@ 0x40
 800bbc0:	d852      	bhi.n	800bc68 <USBD_StdItfReq+0xc4>
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d001      	beq.n	800bbca <USBD_StdItfReq+0x26>
 800bbc6:	2b20      	cmp	r3, #32
 800bbc8:	d14e      	bne.n	800bc68 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	d840      	bhi.n	800bc5a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	889b      	ldrh	r3, [r3, #4]
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d836      	bhi.n	800bc50 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	889b      	ldrh	r3, [r3, #4]
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	4619      	mov	r1, r3
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7ff fedb 	bl	800b9a6 <USBD_CoreFindIF>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bbf4:	7bbb      	ldrb	r3, [r7, #14]
 800bbf6:	2bff      	cmp	r3, #255	@ 0xff
 800bbf8:	d01d      	beq.n	800bc36 <USBD_StdItfReq+0x92>
 800bbfa:	7bbb      	ldrb	r3, [r7, #14]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d11a      	bne.n	800bc36 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bc00:	7bba      	ldrb	r2, [r7, #14]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	32ae      	adds	r2, #174	@ 0xae
 800bc06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d00f      	beq.n	800bc30 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bc10:	7bba      	ldrb	r2, [r7, #14]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bc18:	7bba      	ldrb	r2, [r7, #14]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	32ae      	adds	r2, #174	@ 0xae
 800bc1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	6839      	ldr	r1, [r7, #0]
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	4798      	blx	r3
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bc2e:	e004      	b.n	800bc3a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bc30:	2303      	movs	r3, #3
 800bc32:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bc34:	e001      	b.n	800bc3a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bc36:	2303      	movs	r3, #3
 800bc38:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	88db      	ldrh	r3, [r3, #6]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d110      	bne.n	800bc64 <USBD_StdItfReq+0xc0>
 800bc42:	7bfb      	ldrb	r3, [r7, #15]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d10d      	bne.n	800bc64 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 fdd3 	bl	800c7f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bc4e:	e009      	b.n	800bc64 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bc50:	6839      	ldr	r1, [r7, #0]
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 fcf7 	bl	800c646 <USBD_CtlError>
          break;
 800bc58:	e004      	b.n	800bc64 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bc5a:	6839      	ldr	r1, [r7, #0]
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 fcf2 	bl	800c646 <USBD_CtlError>
          break;
 800bc62:	e000      	b.n	800bc66 <USBD_StdItfReq+0xc2>
          break;
 800bc64:	bf00      	nop
      }
      break;
 800bc66:	e004      	b.n	800bc72 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bc68:	6839      	ldr	r1, [r7, #0]
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 fceb 	bl	800c646 <USBD_CtlError>
      break;
 800bc70:	bf00      	nop
  }

  return ret;
 800bc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	889b      	ldrh	r3, [r3, #4]
 800bc8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bc98:	2b40      	cmp	r3, #64	@ 0x40
 800bc9a:	d007      	beq.n	800bcac <USBD_StdEPReq+0x30>
 800bc9c:	2b40      	cmp	r3, #64	@ 0x40
 800bc9e:	f200 817f 	bhi.w	800bfa0 <USBD_StdEPReq+0x324>
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d02a      	beq.n	800bcfc <USBD_StdEPReq+0x80>
 800bca6:	2b20      	cmp	r3, #32
 800bca8:	f040 817a 	bne.w	800bfa0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
 800bcae:	4619      	mov	r1, r3
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7ff fe85 	bl	800b9c0 <USBD_CoreFindEP>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcba:	7b7b      	ldrb	r3, [r7, #13]
 800bcbc:	2bff      	cmp	r3, #255	@ 0xff
 800bcbe:	f000 8174 	beq.w	800bfaa <USBD_StdEPReq+0x32e>
 800bcc2:	7b7b      	ldrb	r3, [r7, #13]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	f040 8170 	bne.w	800bfaa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bcca:	7b7a      	ldrb	r2, [r7, #13]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bcd2:	7b7a      	ldrb	r2, [r7, #13]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	32ae      	adds	r2, #174	@ 0xae
 800bcd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f000 8163 	beq.w	800bfaa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bce4:	7b7a      	ldrb	r2, [r7, #13]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	32ae      	adds	r2, #174	@ 0xae
 800bcea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcee:	689b      	ldr	r3, [r3, #8]
 800bcf0:	6839      	ldr	r1, [r7, #0]
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	4798      	blx	r3
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bcfa:	e156      	b.n	800bfaa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	785b      	ldrb	r3, [r3, #1]
 800bd00:	2b03      	cmp	r3, #3
 800bd02:	d008      	beq.n	800bd16 <USBD_StdEPReq+0x9a>
 800bd04:	2b03      	cmp	r3, #3
 800bd06:	f300 8145 	bgt.w	800bf94 <USBD_StdEPReq+0x318>
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	f000 809b 	beq.w	800be46 <USBD_StdEPReq+0x1ca>
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d03c      	beq.n	800bd8e <USBD_StdEPReq+0x112>
 800bd14:	e13e      	b.n	800bf94 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	2b02      	cmp	r3, #2
 800bd20:	d002      	beq.n	800bd28 <USBD_StdEPReq+0xac>
 800bd22:	2b03      	cmp	r3, #3
 800bd24:	d016      	beq.n	800bd54 <USBD_StdEPReq+0xd8>
 800bd26:	e02c      	b.n	800bd82 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd28:	7bbb      	ldrb	r3, [r7, #14]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00d      	beq.n	800bd4a <USBD_StdEPReq+0xce>
 800bd2e:	7bbb      	ldrb	r3, [r7, #14]
 800bd30:	2b80      	cmp	r3, #128	@ 0x80
 800bd32:	d00a      	beq.n	800bd4a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd34:	7bbb      	ldrb	r3, [r7, #14]
 800bd36:	4619      	mov	r1, r3
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f001 f9bf 	bl	800d0bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd3e:	2180      	movs	r1, #128	@ 0x80
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f001 f9bb 	bl	800d0bc <USBD_LL_StallEP>
 800bd46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd48:	e020      	b.n	800bd8c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bd4a:	6839      	ldr	r1, [r7, #0]
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 fc7a 	bl	800c646 <USBD_CtlError>
              break;
 800bd52:	e01b      	b.n	800bd8c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	885b      	ldrh	r3, [r3, #2]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d10e      	bne.n	800bd7a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bd5c:	7bbb      	ldrb	r3, [r7, #14]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d00b      	beq.n	800bd7a <USBD_StdEPReq+0xfe>
 800bd62:	7bbb      	ldrb	r3, [r7, #14]
 800bd64:	2b80      	cmp	r3, #128	@ 0x80
 800bd66:	d008      	beq.n	800bd7a <USBD_StdEPReq+0xfe>
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	88db      	ldrh	r3, [r3, #6]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d104      	bne.n	800bd7a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd70:	7bbb      	ldrb	r3, [r7, #14]
 800bd72:	4619      	mov	r1, r3
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f001 f9a1 	bl	800d0bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 fd3a 	bl	800c7f4 <USBD_CtlSendStatus>

              break;
 800bd80:	e004      	b.n	800bd8c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bd82:	6839      	ldr	r1, [r7, #0]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fc5e 	bl	800c646 <USBD_CtlError>
              break;
 800bd8a:	bf00      	nop
          }
          break;
 800bd8c:	e107      	b.n	800bf9e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	2b02      	cmp	r3, #2
 800bd98:	d002      	beq.n	800bda0 <USBD_StdEPReq+0x124>
 800bd9a:	2b03      	cmp	r3, #3
 800bd9c:	d016      	beq.n	800bdcc <USBD_StdEPReq+0x150>
 800bd9e:	e04b      	b.n	800be38 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bda0:	7bbb      	ldrb	r3, [r7, #14]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00d      	beq.n	800bdc2 <USBD_StdEPReq+0x146>
 800bda6:	7bbb      	ldrb	r3, [r7, #14]
 800bda8:	2b80      	cmp	r3, #128	@ 0x80
 800bdaa:	d00a      	beq.n	800bdc2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bdac:	7bbb      	ldrb	r3, [r7, #14]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f001 f983 	bl	800d0bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdb6:	2180      	movs	r1, #128	@ 0x80
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f001 f97f 	bl	800d0bc <USBD_LL_StallEP>
 800bdbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bdc0:	e040      	b.n	800be44 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bdc2:	6839      	ldr	r1, [r7, #0]
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f000 fc3e 	bl	800c646 <USBD_CtlError>
              break;
 800bdca:	e03b      	b.n	800be44 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	885b      	ldrh	r3, [r3, #2]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d136      	bne.n	800be42 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bdd4:	7bbb      	ldrb	r3, [r7, #14]
 800bdd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d004      	beq.n	800bde8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bdde:	7bbb      	ldrb	r3, [r7, #14]
 800bde0:	4619      	mov	r1, r3
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f001 f989 	bl	800d0fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 fd03 	bl	800c7f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bdee:	7bbb      	ldrb	r3, [r7, #14]
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f7ff fde4 	bl	800b9c0 <USBD_CoreFindEP>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bdfc:	7b7b      	ldrb	r3, [r7, #13]
 800bdfe:	2bff      	cmp	r3, #255	@ 0xff
 800be00:	d01f      	beq.n	800be42 <USBD_StdEPReq+0x1c6>
 800be02:	7b7b      	ldrb	r3, [r7, #13]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d11c      	bne.n	800be42 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800be08:	7b7a      	ldrb	r2, [r7, #13]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800be10:	7b7a      	ldrb	r2, [r7, #13]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	32ae      	adds	r2, #174	@ 0xae
 800be16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d010      	beq.n	800be42 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800be20:	7b7a      	ldrb	r2, [r7, #13]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	32ae      	adds	r2, #174	@ 0xae
 800be26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	6839      	ldr	r1, [r7, #0]
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	4798      	blx	r3
 800be32:	4603      	mov	r3, r0
 800be34:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800be36:	e004      	b.n	800be42 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800be38:	6839      	ldr	r1, [r7, #0]
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 fc03 	bl	800c646 <USBD_CtlError>
              break;
 800be40:	e000      	b.n	800be44 <USBD_StdEPReq+0x1c8>
              break;
 800be42:	bf00      	nop
          }
          break;
 800be44:	e0ab      	b.n	800bf9e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d002      	beq.n	800be58 <USBD_StdEPReq+0x1dc>
 800be52:	2b03      	cmp	r3, #3
 800be54:	d032      	beq.n	800bebc <USBD_StdEPReq+0x240>
 800be56:	e097      	b.n	800bf88 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be58:	7bbb      	ldrb	r3, [r7, #14]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d007      	beq.n	800be6e <USBD_StdEPReq+0x1f2>
 800be5e:	7bbb      	ldrb	r3, [r7, #14]
 800be60:	2b80      	cmp	r3, #128	@ 0x80
 800be62:	d004      	beq.n	800be6e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800be64:	6839      	ldr	r1, [r7, #0]
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fbed 	bl	800c646 <USBD_CtlError>
                break;
 800be6c:	e091      	b.n	800bf92 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be72:	2b00      	cmp	r3, #0
 800be74:	da0b      	bge.n	800be8e <USBD_StdEPReq+0x212>
 800be76:	7bbb      	ldrb	r3, [r7, #14]
 800be78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be7c:	4613      	mov	r3, r2
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	4413      	add	r3, r2
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	3310      	adds	r3, #16
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	4413      	add	r3, r2
 800be8a:	3304      	adds	r3, #4
 800be8c:	e00b      	b.n	800bea6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be8e:	7bbb      	ldrb	r3, [r7, #14]
 800be90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be94:	4613      	mov	r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	4413      	add	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	4413      	add	r3, r2
 800bea4:	3304      	adds	r3, #4
 800bea6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	2200      	movs	r2, #0
 800beac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	2202      	movs	r2, #2
 800beb2:	4619      	mov	r1, r3
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 fc43 	bl	800c740 <USBD_CtlSendData>
              break;
 800beba:	e06a      	b.n	800bf92 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bebc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	da11      	bge.n	800bee8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bec4:	7bbb      	ldrb	r3, [r7, #14]
 800bec6:	f003 020f 	and.w	r2, r3, #15
 800beca:	6879      	ldr	r1, [r7, #4]
 800becc:	4613      	mov	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	4413      	add	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	440b      	add	r3, r1
 800bed6:	3324      	adds	r3, #36	@ 0x24
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d117      	bne.n	800bf0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bede:	6839      	ldr	r1, [r7, #0]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 fbb0 	bl	800c646 <USBD_CtlError>
                  break;
 800bee6:	e054      	b.n	800bf92 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bee8:	7bbb      	ldrb	r3, [r7, #14]
 800beea:	f003 020f 	and.w	r2, r3, #15
 800beee:	6879      	ldr	r1, [r7, #4]
 800bef0:	4613      	mov	r3, r2
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	4413      	add	r3, r2
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	440b      	add	r3, r1
 800befa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800befe:	881b      	ldrh	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d104      	bne.n	800bf0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bf04:	6839      	ldr	r1, [r7, #0]
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 fb9d 	bl	800c646 <USBD_CtlError>
                  break;
 800bf0c:	e041      	b.n	800bf92 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	da0b      	bge.n	800bf2e <USBD_StdEPReq+0x2b2>
 800bf16:	7bbb      	ldrb	r3, [r7, #14]
 800bf18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	4413      	add	r3, r2
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	3310      	adds	r3, #16
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	4413      	add	r3, r2
 800bf2a:	3304      	adds	r3, #4
 800bf2c:	e00b      	b.n	800bf46 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf2e:	7bbb      	ldrb	r3, [r7, #14]
 800bf30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf34:	4613      	mov	r3, r2
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	4413      	add	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	4413      	add	r3, r2
 800bf44:	3304      	adds	r3, #4
 800bf46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bf48:	7bbb      	ldrb	r3, [r7, #14]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d002      	beq.n	800bf54 <USBD_StdEPReq+0x2d8>
 800bf4e:	7bbb      	ldrb	r3, [r7, #14]
 800bf50:	2b80      	cmp	r3, #128	@ 0x80
 800bf52:	d103      	bne.n	800bf5c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	2200      	movs	r2, #0
 800bf58:	601a      	str	r2, [r3, #0]
 800bf5a:	e00e      	b.n	800bf7a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bf5c:	7bbb      	ldrb	r3, [r7, #14]
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f001 f8e9 	bl	800d138 <USBD_LL_IsStallEP>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d003      	beq.n	800bf74 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	601a      	str	r2, [r3, #0]
 800bf72:	e002      	b.n	800bf7a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	2200      	movs	r2, #0
 800bf78:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	2202      	movs	r2, #2
 800bf7e:	4619      	mov	r1, r3
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fbdd 	bl	800c740 <USBD_CtlSendData>
              break;
 800bf86:	e004      	b.n	800bf92 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fb5b 	bl	800c646 <USBD_CtlError>
              break;
 800bf90:	bf00      	nop
          }
          break;
 800bf92:	e004      	b.n	800bf9e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bf94:	6839      	ldr	r1, [r7, #0]
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fb55 	bl	800c646 <USBD_CtlError>
          break;
 800bf9c:	bf00      	nop
      }
      break;
 800bf9e:	e005      	b.n	800bfac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 fb4f 	bl	800c646 <USBD_CtlError>
      break;
 800bfa8:	e000      	b.n	800bfac <USBD_StdEPReq+0x330>
      break;
 800bfaa:	bf00      	nop
  }

  return ret;
 800bfac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
	...

0800bfb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	885b      	ldrh	r3, [r3, #2]
 800bfd2:	0a1b      	lsrs	r3, r3, #8
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	2b06      	cmp	r3, #6
 800bfda:	f200 8128 	bhi.w	800c22e <USBD_GetDescriptor+0x276>
 800bfde:	a201      	add	r2, pc, #4	@ (adr r2, 800bfe4 <USBD_GetDescriptor+0x2c>)
 800bfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe4:	0800c001 	.word	0x0800c001
 800bfe8:	0800c019 	.word	0x0800c019
 800bfec:	0800c059 	.word	0x0800c059
 800bff0:	0800c22f 	.word	0x0800c22f
 800bff4:	0800c22f 	.word	0x0800c22f
 800bff8:	0800c1cf 	.word	0x0800c1cf
 800bffc:	0800c1fb 	.word	0x0800c1fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	7c12      	ldrb	r2, [r2, #16]
 800c00c:	f107 0108 	add.w	r1, r7, #8
 800c010:	4610      	mov	r0, r2
 800c012:	4798      	blx	r3
 800c014:	60f8      	str	r0, [r7, #12]
      break;
 800c016:	e112      	b.n	800c23e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	7c1b      	ldrb	r3, [r3, #16]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10d      	bne.n	800c03c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c028:	f107 0208 	add.w	r2, r7, #8
 800c02c:	4610      	mov	r0, r2
 800c02e:	4798      	blx	r3
 800c030:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	3301      	adds	r3, #1
 800c036:	2202      	movs	r2, #2
 800c038:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c03a:	e100      	b.n	800c23e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c044:	f107 0208 	add.w	r2, r7, #8
 800c048:	4610      	mov	r0, r2
 800c04a:	4798      	blx	r3
 800c04c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	3301      	adds	r3, #1
 800c052:	2202      	movs	r2, #2
 800c054:	701a      	strb	r2, [r3, #0]
      break;
 800c056:	e0f2      	b.n	800c23e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	885b      	ldrh	r3, [r3, #2]
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	2b05      	cmp	r3, #5
 800c060:	f200 80ac 	bhi.w	800c1bc <USBD_GetDescriptor+0x204>
 800c064:	a201      	add	r2, pc, #4	@ (adr r2, 800c06c <USBD_GetDescriptor+0xb4>)
 800c066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c06a:	bf00      	nop
 800c06c:	0800c085 	.word	0x0800c085
 800c070:	0800c0b9 	.word	0x0800c0b9
 800c074:	0800c0ed 	.word	0x0800c0ed
 800c078:	0800c121 	.word	0x0800c121
 800c07c:	0800c155 	.word	0x0800c155
 800c080:	0800c189 	.word	0x0800c189
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00b      	beq.n	800c0a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	7c12      	ldrb	r2, [r2, #16]
 800c09c:	f107 0108 	add.w	r1, r7, #8
 800c0a0:	4610      	mov	r0, r2
 800c0a2:	4798      	blx	r3
 800c0a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0a6:	e091      	b.n	800c1cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0a8:	6839      	ldr	r1, [r7, #0]
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 facb 	bl	800c646 <USBD_CtlError>
            err++;
 800c0b0:	7afb      	ldrb	r3, [r7, #11]
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c0b6:	e089      	b.n	800c1cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00b      	beq.n	800c0dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	7c12      	ldrb	r2, [r2, #16]
 800c0d0:	f107 0108 	add.w	r1, r7, #8
 800c0d4:	4610      	mov	r0, r2
 800c0d6:	4798      	blx	r3
 800c0d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0da:	e077      	b.n	800c1cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0dc:	6839      	ldr	r1, [r7, #0]
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 fab1 	bl	800c646 <USBD_CtlError>
            err++;
 800c0e4:	7afb      	ldrb	r3, [r7, #11]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c0ea:	e06f      	b.n	800c1cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d00b      	beq.n	800c110 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0fe:	68db      	ldr	r3, [r3, #12]
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	7c12      	ldrb	r2, [r2, #16]
 800c104:	f107 0108 	add.w	r1, r7, #8
 800c108:	4610      	mov	r0, r2
 800c10a:	4798      	blx	r3
 800c10c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c10e:	e05d      	b.n	800c1cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c110:	6839      	ldr	r1, [r7, #0]
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 fa97 	bl	800c646 <USBD_CtlError>
            err++;
 800c118:	7afb      	ldrb	r3, [r7, #11]
 800c11a:	3301      	adds	r3, #1
 800c11c:	72fb      	strb	r3, [r7, #11]
          break;
 800c11e:	e055      	b.n	800c1cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c126:	691b      	ldr	r3, [r3, #16]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00b      	beq.n	800c144 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c132:	691b      	ldr	r3, [r3, #16]
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	7c12      	ldrb	r2, [r2, #16]
 800c138:	f107 0108 	add.w	r1, r7, #8
 800c13c:	4610      	mov	r0, r2
 800c13e:	4798      	blx	r3
 800c140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c142:	e043      	b.n	800c1cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c144:	6839      	ldr	r1, [r7, #0]
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 fa7d 	bl	800c646 <USBD_CtlError>
            err++;
 800c14c:	7afb      	ldrb	r3, [r7, #11]
 800c14e:	3301      	adds	r3, #1
 800c150:	72fb      	strb	r3, [r7, #11]
          break;
 800c152:	e03b      	b.n	800c1cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c15a:	695b      	ldr	r3, [r3, #20]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d00b      	beq.n	800c178 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c166:	695b      	ldr	r3, [r3, #20]
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	7c12      	ldrb	r2, [r2, #16]
 800c16c:	f107 0108 	add.w	r1, r7, #8
 800c170:	4610      	mov	r0, r2
 800c172:	4798      	blx	r3
 800c174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c176:	e029      	b.n	800c1cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c178:	6839      	ldr	r1, [r7, #0]
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fa63 	bl	800c646 <USBD_CtlError>
            err++;
 800c180:	7afb      	ldrb	r3, [r7, #11]
 800c182:	3301      	adds	r3, #1
 800c184:	72fb      	strb	r3, [r7, #11]
          break;
 800c186:	e021      	b.n	800c1cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c18e:	699b      	ldr	r3, [r3, #24]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d00b      	beq.n	800c1ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c19a:	699b      	ldr	r3, [r3, #24]
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	7c12      	ldrb	r2, [r2, #16]
 800c1a0:	f107 0108 	add.w	r1, r7, #8
 800c1a4:	4610      	mov	r0, r2
 800c1a6:	4798      	blx	r3
 800c1a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1aa:	e00f      	b.n	800c1cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1ac:	6839      	ldr	r1, [r7, #0]
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 fa49 	bl	800c646 <USBD_CtlError>
            err++;
 800c1b4:	7afb      	ldrb	r3, [r7, #11]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c1ba:	e007      	b.n	800c1cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c1bc:	6839      	ldr	r1, [r7, #0]
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 fa41 	bl	800c646 <USBD_CtlError>
          err++;
 800c1c4:	7afb      	ldrb	r3, [r7, #11]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c1ca:	bf00      	nop
      }
      break;
 800c1cc:	e037      	b.n	800c23e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	7c1b      	ldrb	r3, [r3, #16]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d109      	bne.n	800c1ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1de:	f107 0208 	add.w	r2, r7, #8
 800c1e2:	4610      	mov	r0, r2
 800c1e4:	4798      	blx	r3
 800c1e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c1e8:	e029      	b.n	800c23e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c1ea:	6839      	ldr	r1, [r7, #0]
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 fa2a 	bl	800c646 <USBD_CtlError>
        err++;
 800c1f2:	7afb      	ldrb	r3, [r7, #11]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	72fb      	strb	r3, [r7, #11]
      break;
 800c1f8:	e021      	b.n	800c23e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	7c1b      	ldrb	r3, [r3, #16]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d10d      	bne.n	800c21e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c20a:	f107 0208 	add.w	r2, r7, #8
 800c20e:	4610      	mov	r0, r2
 800c210:	4798      	blx	r3
 800c212:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	3301      	adds	r3, #1
 800c218:	2207      	movs	r2, #7
 800c21a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c21c:	e00f      	b.n	800c23e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c21e:	6839      	ldr	r1, [r7, #0]
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 fa10 	bl	800c646 <USBD_CtlError>
        err++;
 800c226:	7afb      	ldrb	r3, [r7, #11]
 800c228:	3301      	adds	r3, #1
 800c22a:	72fb      	strb	r3, [r7, #11]
      break;
 800c22c:	e007      	b.n	800c23e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c22e:	6839      	ldr	r1, [r7, #0]
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 fa08 	bl	800c646 <USBD_CtlError>
      err++;
 800c236:	7afb      	ldrb	r3, [r7, #11]
 800c238:	3301      	adds	r3, #1
 800c23a:	72fb      	strb	r3, [r7, #11]
      break;
 800c23c:	bf00      	nop
  }

  if (err != 0U)
 800c23e:	7afb      	ldrb	r3, [r7, #11]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d11e      	bne.n	800c282 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	88db      	ldrh	r3, [r3, #6]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d016      	beq.n	800c27a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c24c:	893b      	ldrh	r3, [r7, #8]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00e      	beq.n	800c270 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	88da      	ldrh	r2, [r3, #6]
 800c256:	893b      	ldrh	r3, [r7, #8]
 800c258:	4293      	cmp	r3, r2
 800c25a:	bf28      	it	cs
 800c25c:	4613      	movcs	r3, r2
 800c25e:	b29b      	uxth	r3, r3
 800c260:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c262:	893b      	ldrh	r3, [r7, #8]
 800c264:	461a      	mov	r2, r3
 800c266:	68f9      	ldr	r1, [r7, #12]
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 fa69 	bl	800c740 <USBD_CtlSendData>
 800c26e:	e009      	b.n	800c284 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c270:	6839      	ldr	r1, [r7, #0]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 f9e7 	bl	800c646 <USBD_CtlError>
 800c278:	e004      	b.n	800c284 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 faba 	bl	800c7f4 <USBD_CtlSendStatus>
 800c280:	e000      	b.n	800c284 <USBD_GetDescriptor+0x2cc>
    return;
 800c282:	bf00      	nop
  }
}
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop

0800c28c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	889b      	ldrh	r3, [r3, #4]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d131      	bne.n	800c302 <USBD_SetAddress+0x76>
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	88db      	ldrh	r3, [r3, #6]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d12d      	bne.n	800c302 <USBD_SetAddress+0x76>
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	885b      	ldrh	r3, [r3, #2]
 800c2aa:	2b7f      	cmp	r3, #127	@ 0x7f
 800c2ac:	d829      	bhi.n	800c302 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	885b      	ldrh	r3, [r3, #2]
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	2b03      	cmp	r3, #3
 800c2c4:	d104      	bne.n	800c2d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 f9bc 	bl	800c646 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ce:	e01d      	b.n	800c30c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	7bfa      	ldrb	r2, [r7, #15]
 800c2d4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
 800c2da:	4619      	mov	r1, r3
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 ff57 	bl	800d190 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 fa86 	bl	800c7f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c2e8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d004      	beq.n	800c2f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2202      	movs	r2, #2
 800c2f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2f6:	e009      	b.n	800c30c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c300:	e004      	b.n	800c30c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c302:	6839      	ldr	r1, [r7, #0]
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 f99e 	bl	800c646 <USBD_CtlError>
  }
}
 800c30a:	bf00      	nop
 800c30c:	bf00      	nop
 800c30e:	3710      	adds	r7, #16
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c31e:	2300      	movs	r3, #0
 800c320:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	885b      	ldrh	r3, [r3, #2]
 800c326:	b2da      	uxtb	r2, r3
 800c328:	4b4e      	ldr	r3, [pc, #312]	@ (800c464 <USBD_SetConfig+0x150>)
 800c32a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c32c:	4b4d      	ldr	r3, [pc, #308]	@ (800c464 <USBD_SetConfig+0x150>)
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	2b01      	cmp	r3, #1
 800c332:	d905      	bls.n	800c340 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c334:	6839      	ldr	r1, [r7, #0]
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 f985 	bl	800c646 <USBD_CtlError>
    return USBD_FAIL;
 800c33c:	2303      	movs	r3, #3
 800c33e:	e08c      	b.n	800c45a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c346:	b2db      	uxtb	r3, r3
 800c348:	2b02      	cmp	r3, #2
 800c34a:	d002      	beq.n	800c352 <USBD_SetConfig+0x3e>
 800c34c:	2b03      	cmp	r3, #3
 800c34e:	d029      	beq.n	800c3a4 <USBD_SetConfig+0x90>
 800c350:	e075      	b.n	800c43e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c352:	4b44      	ldr	r3, [pc, #272]	@ (800c464 <USBD_SetConfig+0x150>)
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d020      	beq.n	800c39c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c35a:	4b42      	ldr	r3, [pc, #264]	@ (800c464 <USBD_SetConfig+0x150>)
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	461a      	mov	r2, r3
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c364:	4b3f      	ldr	r3, [pc, #252]	@ (800c464 <USBD_SetConfig+0x150>)
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	4619      	mov	r1, r3
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7fe ffe3 	bl	800b336 <USBD_SetClassConfig>
 800c370:	4603      	mov	r3, r0
 800c372:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c374:	7bfb      	ldrb	r3, [r7, #15]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d008      	beq.n	800c38c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c37a:	6839      	ldr	r1, [r7, #0]
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 f962 	bl	800c646 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2202      	movs	r2, #2
 800c386:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c38a:	e065      	b.n	800c458 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 fa31 	bl	800c7f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2203      	movs	r2, #3
 800c396:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c39a:	e05d      	b.n	800c458 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 fa29 	bl	800c7f4 <USBD_CtlSendStatus>
      break;
 800c3a2:	e059      	b.n	800c458 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c3a4:	4b2f      	ldr	r3, [pc, #188]	@ (800c464 <USBD_SetConfig+0x150>)
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d112      	bne.n	800c3d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2202      	movs	r2, #2
 800c3b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c3b4:	4b2b      	ldr	r3, [pc, #172]	@ (800c464 <USBD_SetConfig+0x150>)
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c3be:	4b29      	ldr	r3, [pc, #164]	@ (800c464 <USBD_SetConfig+0x150>)
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7fe ffd2 	bl	800b36e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 fa12 	bl	800c7f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c3d0:	e042      	b.n	800c458 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c3d2:	4b24      	ldr	r3, [pc, #144]	@ (800c464 <USBD_SetConfig+0x150>)
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d02a      	beq.n	800c436 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f7fe ffc0 	bl	800b36e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c3ee:	4b1d      	ldr	r3, [pc, #116]	@ (800c464 <USBD_SetConfig+0x150>)
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c3f8:	4b1a      	ldr	r3, [pc, #104]	@ (800c464 <USBD_SetConfig+0x150>)
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7fe ff99 	bl	800b336 <USBD_SetClassConfig>
 800c404:	4603      	mov	r3, r0
 800c406:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c408:	7bfb      	ldrb	r3, [r7, #15]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00f      	beq.n	800c42e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c40e:	6839      	ldr	r1, [r7, #0]
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f918 	bl	800c646 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	4619      	mov	r1, r3
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f7fe ffa5 	bl	800b36e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2202      	movs	r2, #2
 800c428:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c42c:	e014      	b.n	800c458 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f9e0 	bl	800c7f4 <USBD_CtlSendStatus>
      break;
 800c434:	e010      	b.n	800c458 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 f9dc 	bl	800c7f4 <USBD_CtlSendStatus>
      break;
 800c43c:	e00c      	b.n	800c458 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c43e:	6839      	ldr	r1, [r7, #0]
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 f900 	bl	800c646 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c446:	4b07      	ldr	r3, [pc, #28]	@ (800c464 <USBD_SetConfig+0x150>)
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	4619      	mov	r1, r3
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f7fe ff8e 	bl	800b36e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c452:	2303      	movs	r3, #3
 800c454:	73fb      	strb	r3, [r7, #15]
      break;
 800c456:	bf00      	nop
  }

  return ret;
 800c458:	7bfb      	ldrb	r3, [r7, #15]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	200008bc 	.word	0x200008bc

0800c468 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	88db      	ldrh	r3, [r3, #6]
 800c476:	2b01      	cmp	r3, #1
 800c478:	d004      	beq.n	800c484 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c47a:	6839      	ldr	r1, [r7, #0]
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 f8e2 	bl	800c646 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c482:	e023      	b.n	800c4cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	2b02      	cmp	r3, #2
 800c48e:	dc02      	bgt.n	800c496 <USBD_GetConfig+0x2e>
 800c490:	2b00      	cmp	r3, #0
 800c492:	dc03      	bgt.n	800c49c <USBD_GetConfig+0x34>
 800c494:	e015      	b.n	800c4c2 <USBD_GetConfig+0x5a>
 800c496:	2b03      	cmp	r3, #3
 800c498:	d00b      	beq.n	800c4b2 <USBD_GetConfig+0x4a>
 800c49a:	e012      	b.n	800c4c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	3308      	adds	r3, #8
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f948 	bl	800c740 <USBD_CtlSendData>
        break;
 800c4b0:	e00c      	b.n	800c4cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	3304      	adds	r3, #4
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 f940 	bl	800c740 <USBD_CtlSendData>
        break;
 800c4c0:	e004      	b.n	800c4cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c4c2:	6839      	ldr	r1, [r7, #0]
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f000 f8be 	bl	800c646 <USBD_CtlError>
        break;
 800c4ca:	bf00      	nop
}
 800c4cc:	bf00      	nop
 800c4ce:	3708      	adds	r7, #8
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	3b01      	subs	r3, #1
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	d81e      	bhi.n	800c52a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	88db      	ldrh	r3, [r3, #6]
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d004      	beq.n	800c4fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c4f4:	6839      	ldr	r1, [r7, #0]
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 f8a5 	bl	800c646 <USBD_CtlError>
        break;
 800c4fc:	e01a      	b.n	800c534 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2201      	movs	r2, #1
 800c502:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d005      	beq.n	800c51a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	f043 0202 	orr.w	r2, r3, #2
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	330c      	adds	r3, #12
 800c51e:	2202      	movs	r2, #2
 800c520:	4619      	mov	r1, r3
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 f90c 	bl	800c740 <USBD_CtlSendData>
      break;
 800c528:	e004      	b.n	800c534 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c52a:	6839      	ldr	r1, [r7, #0]
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 f88a 	bl	800c646 <USBD_CtlError>
      break;
 800c532:	bf00      	nop
  }
}
 800c534:	bf00      	nop
 800c536:	3708      	adds	r7, #8
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	885b      	ldrh	r3, [r3, #2]
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d107      	bne.n	800c55e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2201      	movs	r2, #1
 800c552:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 f94c 	bl	800c7f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c55c:	e013      	b.n	800c586 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	885b      	ldrh	r3, [r3, #2]
 800c562:	2b02      	cmp	r3, #2
 800c564:	d10b      	bne.n	800c57e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	889b      	ldrh	r3, [r3, #4]
 800c56a:	0a1b      	lsrs	r3, r3, #8
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	b2da      	uxtb	r2, r3
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 f93c 	bl	800c7f4 <USBD_CtlSendStatus>
}
 800c57c:	e003      	b.n	800c586 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c57e:	6839      	ldr	r1, [r7, #0]
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 f860 	bl	800c646 <USBD_CtlError>
}
 800c586:	bf00      	nop
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b082      	sub	sp, #8
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
 800c596:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	2b02      	cmp	r3, #2
 800c5a4:	d80b      	bhi.n	800c5be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	885b      	ldrh	r3, [r3, #2]
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d10c      	bne.n	800c5c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 f91c 	bl	800c7f4 <USBD_CtlSendStatus>
      }
      break;
 800c5bc:	e004      	b.n	800c5c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c5be:	6839      	ldr	r1, [r7, #0]
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 f840 	bl	800c646 <USBD_CtlError>
      break;
 800c5c6:	e000      	b.n	800c5ca <USBD_ClrFeature+0x3c>
      break;
 800c5c8:	bf00      	nop
  }
}
 800c5ca:	bf00      	nop
 800c5cc:	3708      	adds	r7, #8
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b084      	sub	sp, #16
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	781a      	ldrb	r2, [r3, #0]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	781a      	ldrb	r2, [r3, #0]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	f7ff fa40 	bl	800ba82 <SWAPBYTE>
 800c602:	4603      	mov	r3, r0
 800c604:	461a      	mov	r2, r3
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	3301      	adds	r3, #1
 800c60e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	3301      	adds	r3, #1
 800c614:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f7ff fa33 	bl	800ba82 <SWAPBYTE>
 800c61c:	4603      	mov	r3, r0
 800c61e:	461a      	mov	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	3301      	adds	r3, #1
 800c628:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	3301      	adds	r3, #1
 800c62e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f7ff fa26 	bl	800ba82 <SWAPBYTE>
 800c636:	4603      	mov	r3, r0
 800c638:	461a      	mov	r2, r3
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	80da      	strh	r2, [r3, #6]
}
 800c63e:	bf00      	nop
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b082      	sub	sp, #8
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
 800c64e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c650:	2180      	movs	r1, #128	@ 0x80
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 fd32 	bl	800d0bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c658:	2100      	movs	r1, #0
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 fd2e 	bl	800d0bc <USBD_LL_StallEP>
}
 800c660:	bf00      	nop
 800c662:	3708      	adds	r7, #8
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b086      	sub	sp, #24
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c674:	2300      	movs	r3, #0
 800c676:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d042      	beq.n	800c704 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c682:	6938      	ldr	r0, [r7, #16]
 800c684:	f000 f842 	bl	800c70c <USBD_GetLen>
 800c688:	4603      	mov	r3, r0
 800c68a:	3301      	adds	r3, #1
 800c68c:	005b      	lsls	r3, r3, #1
 800c68e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c692:	d808      	bhi.n	800c6a6 <USBD_GetString+0x3e>
 800c694:	6938      	ldr	r0, [r7, #16]
 800c696:	f000 f839 	bl	800c70c <USBD_GetLen>
 800c69a:	4603      	mov	r3, r0
 800c69c:	3301      	adds	r3, #1
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	005b      	lsls	r3, r3, #1
 800c6a2:	b29a      	uxth	r2, r3
 800c6a4:	e001      	b.n	800c6aa <USBD_GetString+0x42>
 800c6a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c6ae:	7dfb      	ldrb	r3, [r7, #23]
 800c6b0:	68ba      	ldr	r2, [r7, #8]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	7812      	ldrb	r2, [r2, #0]
 800c6b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c6ba:	7dfb      	ldrb	r3, [r7, #23]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c6c0:	7dfb      	ldrb	r3, [r7, #23]
 800c6c2:	68ba      	ldr	r2, [r7, #8]
 800c6c4:	4413      	add	r3, r2
 800c6c6:	2203      	movs	r2, #3
 800c6c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c6ca:	7dfb      	ldrb	r3, [r7, #23]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c6d0:	e013      	b.n	800c6fa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c6d2:	7dfb      	ldrb	r3, [r7, #23]
 800c6d4:	68ba      	ldr	r2, [r7, #8]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	693a      	ldr	r2, [r7, #16]
 800c6da:	7812      	ldrb	r2, [r2, #0]
 800c6dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	613b      	str	r3, [r7, #16]
    idx++;
 800c6e4:	7dfb      	ldrb	r3, [r7, #23]
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c6ea:	7dfb      	ldrb	r3, [r7, #23]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	701a      	strb	r2, [r3, #0]
    idx++;
 800c6f4:	7dfb      	ldrb	r3, [r7, #23]
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1e7      	bne.n	800c6d2 <USBD_GetString+0x6a>
 800c702:	e000      	b.n	800c706 <USBD_GetString+0x9e>
    return;
 800c704:	bf00      	nop
  }
}
 800c706:	3718      	adds	r7, #24
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b085      	sub	sp, #20
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c714:	2300      	movs	r3, #0
 800c716:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c71c:	e005      	b.n	800c72a <USBD_GetLen+0x1e>
  {
    len++;
 800c71e:	7bfb      	ldrb	r3, [r7, #15]
 800c720:	3301      	adds	r3, #1
 800c722:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	3301      	adds	r3, #1
 800c728:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1f5      	bne.n	800c71e <USBD_GetLen+0x12>
  }

  return len;
 800c732:	7bfb      	ldrb	r3, [r7, #15]
}
 800c734:	4618      	mov	r0, r3
 800c736:	3714      	adds	r7, #20
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2202      	movs	r2, #2
 800c750:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	2100      	movs	r1, #0
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f000 fd31 	bl	800d1ce <USBD_LL_Transmit>

  return USBD_OK;
 800c76c:	2300      	movs	r3, #0
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b084      	sub	sp, #16
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	60f8      	str	r0, [r7, #12]
 800c77e:	60b9      	str	r1, [r7, #8]
 800c780:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	2100      	movs	r1, #0
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f000 fd20 	bl	800d1ce <USBD_LL_Transmit>

  return USBD_OK;
 800c78e:	2300      	movs	r3, #0
}
 800c790:	4618      	mov	r0, r3
 800c792:	3710      	adds	r7, #16
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2203      	movs	r2, #3
 800c7a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	68ba      	ldr	r2, [r7, #8]
 800c7c0:	2100      	movs	r1, #0
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f000 fd24 	bl	800d210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b084      	sub	sp, #16
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	60f8      	str	r0, [r7, #12]
 800c7da:	60b9      	str	r1, [r7, #8]
 800c7dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	68ba      	ldr	r2, [r7, #8]
 800c7e2:	2100      	movs	r1, #0
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f000 fd13 	bl	800d210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7ea:	2300      	movs	r3, #0
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3710      	adds	r7, #16
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2204      	movs	r2, #4
 800c800:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c804:	2300      	movs	r3, #0
 800c806:	2200      	movs	r2, #0
 800c808:	2100      	movs	r1, #0
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 fcdf 	bl	800d1ce <USBD_LL_Transmit>

  return USBD_OK;
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	3708      	adds	r7, #8
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}

0800c81a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b082      	sub	sp, #8
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2205      	movs	r2, #5
 800c826:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c82a:	2300      	movs	r3, #0
 800c82c:	2200      	movs	r2, #0
 800c82e:	2100      	movs	r1, #0
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 fced 	bl	800d210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c836:	2300      	movs	r3, #0
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3708      	adds	r7, #8
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c844:	2200      	movs	r2, #0
 800c846:	4912      	ldr	r1, [pc, #72]	@ (800c890 <MX_USB_DEVICE_Init+0x50>)
 800c848:	4812      	ldr	r0, [pc, #72]	@ (800c894 <MX_USB_DEVICE_Init+0x54>)
 800c84a:	f7fe fcf7 	bl	800b23c <USBD_Init>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d001      	beq.n	800c858 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c854:	f7f5 fc08 	bl	8002068 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c858:	490f      	ldr	r1, [pc, #60]	@ (800c898 <MX_USB_DEVICE_Init+0x58>)
 800c85a:	480e      	ldr	r0, [pc, #56]	@ (800c894 <MX_USB_DEVICE_Init+0x54>)
 800c85c:	f7fe fd1e 	bl	800b29c <USBD_RegisterClass>
 800c860:	4603      	mov	r3, r0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d001      	beq.n	800c86a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c866:	f7f5 fbff 	bl	8002068 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c86a:	490c      	ldr	r1, [pc, #48]	@ (800c89c <MX_USB_DEVICE_Init+0x5c>)
 800c86c:	4809      	ldr	r0, [pc, #36]	@ (800c894 <MX_USB_DEVICE_Init+0x54>)
 800c86e:	f7fe fc15 	bl	800b09c <USBD_CDC_RegisterInterface>
 800c872:	4603      	mov	r3, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d001      	beq.n	800c87c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c878:	f7f5 fbf6 	bl	8002068 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c87c:	4805      	ldr	r0, [pc, #20]	@ (800c894 <MX_USB_DEVICE_Init+0x54>)
 800c87e:	f7fe fd43 	bl	800b308 <USBD_Start>
 800c882:	4603      	mov	r3, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	d001      	beq.n	800c88c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c888:	f7f5 fbee 	bl	8002068 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c88c:	bf00      	nop
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	200000cc 	.word	0x200000cc
 800c894:	200008c0 	.word	0x200008c0
 800c898:	20000030 	.word	0x20000030
 800c89c:	200000b8 	.word	0x200000b8

0800c8a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	4905      	ldr	r1, [pc, #20]	@ (800c8bc <CDC_Init_FS+0x1c>)
 800c8a8:	4805      	ldr	r0, [pc, #20]	@ (800c8c0 <CDC_Init_FS+0x20>)
 800c8aa:	f7fe fc11 	bl	800b0d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c8ae:	4905      	ldr	r1, [pc, #20]	@ (800c8c4 <CDC_Init_FS+0x24>)
 800c8b0:	4803      	ldr	r0, [pc, #12]	@ (800c8c0 <CDC_Init_FS+0x20>)
 800c8b2:	f7fe fc2f 	bl	800b114 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c8b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	2000139c 	.word	0x2000139c
 800c8c0:	200008c0 	.word	0x200008c0
 800c8c4:	20000b9c 	.word	0x20000b9c

0800c8c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c8cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	4603      	mov	r3, r0
 800c8e0:	6039      	str	r1, [r7, #0]
 800c8e2:	71fb      	strb	r3, [r7, #7]
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c8e8:	79fb      	ldrb	r3, [r7, #7]
 800c8ea:	2b23      	cmp	r3, #35	@ 0x23
 800c8ec:	f200 8098 	bhi.w	800ca20 <CDC_Control_FS+0x148>
 800c8f0:	a201      	add	r2, pc, #4	@ (adr r2, 800c8f8 <CDC_Control_FS+0x20>)
 800c8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f6:	bf00      	nop
 800c8f8:	0800ca21 	.word	0x0800ca21
 800c8fc:	0800ca21 	.word	0x0800ca21
 800c900:	0800ca21 	.word	0x0800ca21
 800c904:	0800ca21 	.word	0x0800ca21
 800c908:	0800ca21 	.word	0x0800ca21
 800c90c:	0800ca21 	.word	0x0800ca21
 800c910:	0800ca21 	.word	0x0800ca21
 800c914:	0800ca21 	.word	0x0800ca21
 800c918:	0800ca21 	.word	0x0800ca21
 800c91c:	0800ca21 	.word	0x0800ca21
 800c920:	0800ca21 	.word	0x0800ca21
 800c924:	0800ca21 	.word	0x0800ca21
 800c928:	0800ca21 	.word	0x0800ca21
 800c92c:	0800ca21 	.word	0x0800ca21
 800c930:	0800ca21 	.word	0x0800ca21
 800c934:	0800ca21 	.word	0x0800ca21
 800c938:	0800ca21 	.word	0x0800ca21
 800c93c:	0800ca21 	.word	0x0800ca21
 800c940:	0800ca21 	.word	0x0800ca21
 800c944:	0800ca21 	.word	0x0800ca21
 800c948:	0800ca21 	.word	0x0800ca21
 800c94c:	0800ca21 	.word	0x0800ca21
 800c950:	0800ca21 	.word	0x0800ca21
 800c954:	0800ca21 	.word	0x0800ca21
 800c958:	0800ca21 	.word	0x0800ca21
 800c95c:	0800ca21 	.word	0x0800ca21
 800c960:	0800ca21 	.word	0x0800ca21
 800c964:	0800ca21 	.word	0x0800ca21
 800c968:	0800ca21 	.word	0x0800ca21
 800c96c:	0800ca21 	.word	0x0800ca21
 800c970:	0800ca21 	.word	0x0800ca21
 800c974:	0800ca21 	.word	0x0800ca21
 800c978:	0800c989 	.word	0x0800c989
 800c97c:	0800c9cd 	.word	0x0800c9cd
 800c980:	0800ca21 	.word	0x0800ca21
 800c984:	0800ca21 	.word	0x0800ca21
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	461a      	mov	r2, r3
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	3301      	adds	r3, #1
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	021b      	lsls	r3, r3, #8
 800c996:	431a      	orrs	r2, r3
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	3302      	adds	r3, #2
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	041b      	lsls	r3, r3, #16
 800c9a0:	431a      	orrs	r2, r3
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	3303      	adds	r3, #3
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	061b      	lsls	r3, r3, #24
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	4b20      	ldr	r3, [pc, #128]	@ (800ca30 <CDC_Control_FS+0x158>)
 800c9b0:	601a      	str	r2, [r3, #0]
      LineCoding.format = pbuf[4];
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	791a      	ldrb	r2, [r3, #4]
 800c9b6:	4b1e      	ldr	r3, [pc, #120]	@ (800ca30 <CDC_Control_FS+0x158>)
 800c9b8:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	795a      	ldrb	r2, [r3, #5]
 800c9be:	4b1c      	ldr	r3, [pc, #112]	@ (800ca30 <CDC_Control_FS+0x158>)
 800c9c0:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype = pbuf[6];
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	799a      	ldrb	r2, [r3, #6]
 800c9c6:	4b1a      	ldr	r3, [pc, #104]	@ (800ca30 <CDC_Control_FS+0x158>)
 800c9c8:	719a      	strb	r2, [r3, #6]
      break;
 800c9ca:	e02a      	b.n	800ca22 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t) (LineCoding.bitrate);
 800c9cc:	4b18      	ldr	r3, [pc, #96]	@ (800ca30 <CDC_Control_FS+0x158>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	b2da      	uxtb	r2, r3
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 800c9d6:	4b16      	ldr	r3, [pc, #88]	@ (800ca30 <CDC_Control_FS+0x158>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	0a1a      	lsrs	r2, r3, #8
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	b2d2      	uxtb	r2, r2
 800c9e2:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 800c9e4:	4b12      	ldr	r3, [pc, #72]	@ (800ca30 <CDC_Control_FS+0x158>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	0c1a      	lsrs	r2, r3, #16
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	3302      	adds	r3, #2
 800c9ee:	b2d2      	uxtb	r2, r2
 800c9f0:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 800c9f2:	4b0f      	ldr	r3, [pc, #60]	@ (800ca30 <CDC_Control_FS+0x158>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	0e1a      	lsrs	r2, r3, #24
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	3303      	adds	r3, #3
 800c9fc:	b2d2      	uxtb	r2, r2
 800c9fe:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	3304      	adds	r3, #4
 800ca04:	4a0a      	ldr	r2, [pc, #40]	@ (800ca30 <CDC_Control_FS+0x158>)
 800ca06:	7912      	ldrb	r2, [r2, #4]
 800ca08:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	3305      	adds	r3, #5
 800ca0e:	4a08      	ldr	r2, [pc, #32]	@ (800ca30 <CDC_Control_FS+0x158>)
 800ca10:	7952      	ldrb	r2, [r2, #5]
 800ca12:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	3306      	adds	r3, #6
 800ca18:	4a05      	ldr	r2, [pc, #20]	@ (800ca30 <CDC_Control_FS+0x158>)
 800ca1a:	7992      	ldrb	r2, [r2, #6]
 800ca1c:	701a      	strb	r2, [r3, #0]
      break;
 800ca1e:	e000      	b.n	800ca22 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ca20:	bf00      	nop
  }

  return (USBD_OK);
 800ca22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr
 800ca30:	200000b0 	.word	0x200000b0

0800ca34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ca3e:	6879      	ldr	r1, [r7, #4]
 800ca40:	4805      	ldr	r0, [pc, #20]	@ (800ca58 <CDC_Receive_FS+0x24>)
 800ca42:	f7fe fb67 	bl	800b114 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ca46:	4804      	ldr	r0, [pc, #16]	@ (800ca58 <CDC_Receive_FS+0x24>)
 800ca48:	f7fe fbc2 	bl	800b1d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ca4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3708      	adds	r7, #8
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	200008c0 	.word	0x200008c0

0800ca5c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	460b      	mov	r3, r1
 800ca66:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ca6c:	4b0d      	ldr	r3, [pc, #52]	@ (800caa4 <CDC_Transmit_FS+0x48>)
 800ca6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ca72:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d001      	beq.n	800ca82 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e00b      	b.n	800ca9a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ca82:	887b      	ldrh	r3, [r7, #2]
 800ca84:	461a      	mov	r2, r3
 800ca86:	6879      	ldr	r1, [r7, #4]
 800ca88:	4806      	ldr	r0, [pc, #24]	@ (800caa4 <CDC_Transmit_FS+0x48>)
 800ca8a:	f7fe fb21 	bl	800b0d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ca8e:	4805      	ldr	r0, [pc, #20]	@ (800caa4 <CDC_Transmit_FS+0x48>)
 800ca90:	f7fe fb5e 	bl	800b150 <USBD_CDC_TransmitPacket>
 800ca94:	4603      	mov	r3, r0
 800ca96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ca98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	200008c0 	.word	0x200008c0

0800caa8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b087      	sub	sp, #28
 800caac:	af00      	add	r7, sp, #0
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	4613      	mov	r3, r2
 800cab4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cab6:	2300      	movs	r3, #0
 800cab8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800caba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	371c      	adds	r7, #28
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
	...

0800cacc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	4603      	mov	r3, r0
 800cad4:	6039      	str	r1, [r7, #0]
 800cad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	2212      	movs	r2, #18
 800cadc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cade:	4b03      	ldr	r3, [pc, #12]	@ (800caec <USBD_FS_DeviceDescriptor+0x20>)
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr
 800caec:	200000e8 	.word	0x200000e8

0800caf0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	4603      	mov	r3, r0
 800caf8:	6039      	str	r1, [r7, #0]
 800cafa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	2204      	movs	r2, #4
 800cb00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cb02:	4b03      	ldr	r3, [pc, #12]	@ (800cb10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr
 800cb10:	200000fc 	.word	0x200000fc

0800cb14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	6039      	str	r1, [r7, #0]
 800cb1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb20:	79fb      	ldrb	r3, [r7, #7]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d105      	bne.n	800cb32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb26:	683a      	ldr	r2, [r7, #0]
 800cb28:	4907      	ldr	r1, [pc, #28]	@ (800cb48 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb2a:	4808      	ldr	r0, [pc, #32]	@ (800cb4c <USBD_FS_ProductStrDescriptor+0x38>)
 800cb2c:	f7ff fd9c 	bl	800c668 <USBD_GetString>
 800cb30:	e004      	b.n	800cb3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb32:	683a      	ldr	r2, [r7, #0]
 800cb34:	4904      	ldr	r1, [pc, #16]	@ (800cb48 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb36:	4805      	ldr	r0, [pc, #20]	@ (800cb4c <USBD_FS_ProductStrDescriptor+0x38>)
 800cb38:	f7ff fd96 	bl	800c668 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb3c:	4b02      	ldr	r3, [pc, #8]	@ (800cb48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3708      	adds	r7, #8
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	20001b9c 	.word	0x20001b9c
 800cb4c:	080105d4 	.word	0x080105d4

0800cb50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	4603      	mov	r3, r0
 800cb58:	6039      	str	r1, [r7, #0]
 800cb5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cb5c:	683a      	ldr	r2, [r7, #0]
 800cb5e:	4904      	ldr	r1, [pc, #16]	@ (800cb70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cb60:	4804      	ldr	r0, [pc, #16]	@ (800cb74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cb62:	f7ff fd81 	bl	800c668 <USBD_GetString>
  return USBD_StrDesc;
 800cb66:	4b02      	ldr	r3, [pc, #8]	@ (800cb70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	20001b9c 	.word	0x20001b9c
 800cb74:	080105ec 	.word	0x080105ec

0800cb78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	4603      	mov	r3, r0
 800cb80:	6039      	str	r1, [r7, #0]
 800cb82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	221a      	movs	r2, #26
 800cb88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cb8a:	f000 f843 	bl	800cc14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cb8e:	4b02      	ldr	r3, [pc, #8]	@ (800cb98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3708      	adds	r7, #8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	20000100 	.word	0x20000100

0800cb9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	4603      	mov	r3, r0
 800cba4:	6039      	str	r1, [r7, #0]
 800cba6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cba8:	79fb      	ldrb	r3, [r7, #7]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d105      	bne.n	800cbba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cbae:	683a      	ldr	r2, [r7, #0]
 800cbb0:	4907      	ldr	r1, [pc, #28]	@ (800cbd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cbb2:	4808      	ldr	r0, [pc, #32]	@ (800cbd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cbb4:	f7ff fd58 	bl	800c668 <USBD_GetString>
 800cbb8:	e004      	b.n	800cbc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cbba:	683a      	ldr	r2, [r7, #0]
 800cbbc:	4904      	ldr	r1, [pc, #16]	@ (800cbd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cbbe:	4805      	ldr	r0, [pc, #20]	@ (800cbd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cbc0:	f7ff fd52 	bl	800c668 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cbc4:	4b02      	ldr	r3, [pc, #8]	@ (800cbd0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	20001b9c 	.word	0x20001b9c
 800cbd4:	08010600 	.word	0x08010600

0800cbd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	4603      	mov	r3, r0
 800cbe0:	6039      	str	r1, [r7, #0]
 800cbe2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbe4:	79fb      	ldrb	r3, [r7, #7]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d105      	bne.n	800cbf6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	4907      	ldr	r1, [pc, #28]	@ (800cc0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cbee:	4808      	ldr	r0, [pc, #32]	@ (800cc10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cbf0:	f7ff fd3a 	bl	800c668 <USBD_GetString>
 800cbf4:	e004      	b.n	800cc00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cbf6:	683a      	ldr	r2, [r7, #0]
 800cbf8:	4904      	ldr	r1, [pc, #16]	@ (800cc0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cbfa:	4805      	ldr	r0, [pc, #20]	@ (800cc10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cbfc:	f7ff fd34 	bl	800c668 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc00:	4b02      	ldr	r3, [pc, #8]	@ (800cc0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3708      	adds	r7, #8
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	20001b9c 	.word	0x20001b9c
 800cc10:	0801060c 	.word	0x0801060c

0800cc14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cc1a:	4b0f      	ldr	r3, [pc, #60]	@ (800cc58 <Get_SerialNum+0x44>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cc20:	4b0e      	ldr	r3, [pc, #56]	@ (800cc5c <Get_SerialNum+0x48>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cc26:	4b0e      	ldr	r3, [pc, #56]	@ (800cc60 <Get_SerialNum+0x4c>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cc2c:	68fa      	ldr	r2, [r7, #12]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4413      	add	r3, r2
 800cc32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d009      	beq.n	800cc4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cc3a:	2208      	movs	r2, #8
 800cc3c:	4909      	ldr	r1, [pc, #36]	@ (800cc64 <Get_SerialNum+0x50>)
 800cc3e:	68f8      	ldr	r0, [r7, #12]
 800cc40:	f000 f814 	bl	800cc6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cc44:	2204      	movs	r2, #4
 800cc46:	4908      	ldr	r1, [pc, #32]	@ (800cc68 <Get_SerialNum+0x54>)
 800cc48:	68b8      	ldr	r0, [r7, #8]
 800cc4a:	f000 f80f 	bl	800cc6c <IntToUnicode>
  }
}
 800cc4e:	bf00      	nop
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	1fff7a10 	.word	0x1fff7a10
 800cc5c:	1fff7a14 	.word	0x1fff7a14
 800cc60:	1fff7a18 	.word	0x1fff7a18
 800cc64:	20000102 	.word	0x20000102
 800cc68:	20000112 	.word	0x20000112

0800cc6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b087      	sub	sp, #28
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	4613      	mov	r3, r2
 800cc78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cc7e:	2300      	movs	r3, #0
 800cc80:	75fb      	strb	r3, [r7, #23]
 800cc82:	e027      	b.n	800ccd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	0f1b      	lsrs	r3, r3, #28
 800cc88:	2b09      	cmp	r3, #9
 800cc8a:	d80b      	bhi.n	800cca4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	0f1b      	lsrs	r3, r3, #28
 800cc90:	b2da      	uxtb	r2, r3
 800cc92:	7dfb      	ldrb	r3, [r7, #23]
 800cc94:	005b      	lsls	r3, r3, #1
 800cc96:	4619      	mov	r1, r3
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	440b      	add	r3, r1
 800cc9c:	3230      	adds	r2, #48	@ 0x30
 800cc9e:	b2d2      	uxtb	r2, r2
 800cca0:	701a      	strb	r2, [r3, #0]
 800cca2:	e00a      	b.n	800ccba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	0f1b      	lsrs	r3, r3, #28
 800cca8:	b2da      	uxtb	r2, r3
 800ccaa:	7dfb      	ldrb	r3, [r7, #23]
 800ccac:	005b      	lsls	r3, r3, #1
 800ccae:	4619      	mov	r1, r3
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	440b      	add	r3, r1
 800ccb4:	3237      	adds	r2, #55	@ 0x37
 800ccb6:	b2d2      	uxtb	r2, r2
 800ccb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	011b      	lsls	r3, r3, #4
 800ccbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ccc0:	7dfb      	ldrb	r3, [r7, #23]
 800ccc2:	005b      	lsls	r3, r3, #1
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	68ba      	ldr	r2, [r7, #8]
 800ccc8:	4413      	add	r3, r2
 800ccca:	2200      	movs	r2, #0
 800cccc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ccce:	7dfb      	ldrb	r3, [r7, #23]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	75fb      	strb	r3, [r7, #23]
 800ccd4:	7dfa      	ldrb	r2, [r7, #23]
 800ccd6:	79fb      	ldrb	r3, [r7, #7]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d3d3      	bcc.n	800cc84 <IntToUnicode+0x18>
  }
}
 800ccdc:	bf00      	nop
 800ccde:	bf00      	nop
 800cce0:	371c      	adds	r7, #28
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr
	...

0800ccec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b08a      	sub	sp, #40	@ 0x28
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccf4:	f107 0314 	add.w	r3, r7, #20
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	601a      	str	r2, [r3, #0]
 800ccfc:	605a      	str	r2, [r3, #4]
 800ccfe:	609a      	str	r2, [r3, #8]
 800cd00:	60da      	str	r2, [r3, #12]
 800cd02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cd0c:	d13a      	bne.n	800cd84 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd0e:	2300      	movs	r3, #0
 800cd10:	613b      	str	r3, [r7, #16]
 800cd12:	4b1e      	ldr	r3, [pc, #120]	@ (800cd8c <HAL_PCD_MspInit+0xa0>)
 800cd14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd16:	4a1d      	ldr	r2, [pc, #116]	@ (800cd8c <HAL_PCD_MspInit+0xa0>)
 800cd18:	f043 0301 	orr.w	r3, r3, #1
 800cd1c:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd1e:	4b1b      	ldr	r3, [pc, #108]	@ (800cd8c <HAL_PCD_MspInit+0xa0>)
 800cd20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd22:	f003 0301 	and.w	r3, r3, #1
 800cd26:	613b      	str	r3, [r7, #16]
 800cd28:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cd2a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800cd2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd30:	2302      	movs	r3, #2
 800cd32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd34:	2300      	movs	r3, #0
 800cd36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd38:	2303      	movs	r3, #3
 800cd3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cd3c:	230a      	movs	r3, #10
 800cd3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd40:	f107 0314 	add.w	r3, r7, #20
 800cd44:	4619      	mov	r1, r3
 800cd46:	4812      	ldr	r0, [pc, #72]	@ (800cd90 <HAL_PCD_MspInit+0xa4>)
 800cd48:	f7f7 fdda 	bl	8004900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cd4c:	4b0f      	ldr	r3, [pc, #60]	@ (800cd8c <HAL_PCD_MspInit+0xa0>)
 800cd4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd50:	4a0e      	ldr	r2, [pc, #56]	@ (800cd8c <HAL_PCD_MspInit+0xa0>)
 800cd52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd56:	6353      	str	r3, [r2, #52]	@ 0x34
 800cd58:	2300      	movs	r3, #0
 800cd5a:	60fb      	str	r3, [r7, #12]
 800cd5c:	4b0b      	ldr	r3, [pc, #44]	@ (800cd8c <HAL_PCD_MspInit+0xa0>)
 800cd5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd60:	4a0a      	ldr	r2, [pc, #40]	@ (800cd8c <HAL_PCD_MspInit+0xa0>)
 800cd62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cd66:	6453      	str	r3, [r2, #68]	@ 0x44
 800cd68:	4b08      	ldr	r3, [pc, #32]	@ (800cd8c <HAL_PCD_MspInit+0xa0>)
 800cd6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd70:	60fb      	str	r3, [r7, #12]
 800cd72:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cd74:	2200      	movs	r2, #0
 800cd76:	2100      	movs	r1, #0
 800cd78:	2043      	movs	r0, #67	@ 0x43
 800cd7a:	f7f7 fd8a 	bl	8004892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cd7e:	2043      	movs	r0, #67	@ 0x43
 800cd80:	f7f7 fda3 	bl	80048ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cd84:	bf00      	nop
 800cd86:	3728      	adds	r7, #40	@ 0x28
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	40023800 	.word	0x40023800
 800cd90:	40020000 	.word	0x40020000

0800cd94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cda8:	4619      	mov	r1, r3
 800cdaa:	4610      	mov	r0, r2
 800cdac:	f7fe faf9 	bl	800b3a2 <USBD_LL_SetupStage>
}
 800cdb0:	bf00      	nop
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cdca:	78fa      	ldrb	r2, [r7, #3]
 800cdcc:	6879      	ldr	r1, [r7, #4]
 800cdce:	4613      	mov	r3, r2
 800cdd0:	00db      	lsls	r3, r3, #3
 800cdd2:	4413      	add	r3, r2
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	440b      	add	r3, r1
 800cdd8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	78fb      	ldrb	r3, [r7, #3]
 800cde0:	4619      	mov	r1, r3
 800cde2:	f7fe fb33 	bl	800b44c <USBD_LL_DataOutStage>
}
 800cde6:	bf00      	nop
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b082      	sub	sp, #8
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ce00:	78fa      	ldrb	r2, [r7, #3]
 800ce02:	6879      	ldr	r1, [r7, #4]
 800ce04:	4613      	mov	r3, r2
 800ce06:	00db      	lsls	r3, r3, #3
 800ce08:	4413      	add	r3, r2
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	440b      	add	r3, r1
 800ce0e:	3320      	adds	r3, #32
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	78fb      	ldrb	r3, [r7, #3]
 800ce14:	4619      	mov	r1, r3
 800ce16:	f7fe fbcc 	bl	800b5b2 <USBD_LL_DataInStage>
}
 800ce1a:	bf00      	nop
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b082      	sub	sp, #8
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7fe fd06 	bl	800b842 <USBD_LL_SOF>
}
 800ce36:	bf00      	nop
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b084      	sub	sp, #16
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ce46:	2301      	movs	r3, #1
 800ce48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	79db      	ldrb	r3, [r3, #7]
 800ce4e:	2b02      	cmp	r3, #2
 800ce50:	d001      	beq.n	800ce56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ce52:	f7f5 f909 	bl	8002068 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce5c:	7bfa      	ldrb	r2, [r7, #15]
 800ce5e:	4611      	mov	r1, r2
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7fe fcaa 	bl	800b7ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fe fc52 	bl	800b716 <USBD_LL_Reset>
}
 800ce72:	bf00      	nop
 800ce74:	3710      	adds	r7, #16
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
	...

0800ce7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7fe fca5 	bl	800b7da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	6812      	ldr	r2, [r2, #0]
 800ce9e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cea2:	f043 0301 	orr.w	r3, r3, #1
 800cea6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	7adb      	ldrb	r3, [r3, #11]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d005      	beq.n	800cebc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ceb0:	4b04      	ldr	r3, [pc, #16]	@ (800cec4 <HAL_PCD_SuspendCallback+0x48>)
 800ceb2:	691b      	ldr	r3, [r3, #16]
 800ceb4:	4a03      	ldr	r2, [pc, #12]	@ (800cec4 <HAL_PCD_SuspendCallback+0x48>)
 800ceb6:	f043 0306 	orr.w	r3, r3, #6
 800ceba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cebc:	bf00      	nop
 800cebe:	3708      	adds	r7, #8
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	e000ed00 	.word	0xe000ed00

0800cec8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7fe fc9b 	bl	800b812 <USBD_LL_Resume>
}
 800cedc:	bf00      	nop
 800cede:	3708      	adds	r7, #8
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	460b      	mov	r3, r1
 800ceee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cef6:	78fa      	ldrb	r2, [r7, #3]
 800cef8:	4611      	mov	r1, r2
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fe fcf3 	bl	800b8e6 <USBD_LL_IsoOUTIncomplete>
}
 800cf00:	bf00      	nop
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	460b      	mov	r3, r1
 800cf12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf1a:	78fa      	ldrb	r2, [r7, #3]
 800cf1c:	4611      	mov	r1, r2
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fe fcaf 	bl	800b882 <USBD_LL_IsoINIncomplete>
}
 800cf24:	bf00      	nop
 800cf26:	3708      	adds	r7, #8
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fe fd05 	bl	800b94a <USBD_LL_DevConnected>
}
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fe fd02 	bl	800b960 <USBD_LL_DevDisconnected>
}
 800cf5c:	bf00      	nop
 800cf5e:	3708      	adds	r7, #8
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d13c      	bne.n	800cfee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cf74:	4a20      	ldr	r2, [pc, #128]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4a1e      	ldr	r2, [pc, #120]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cf80:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cf84:	4b1c      	ldr	r3, [pc, #112]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cf86:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cf8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cf8c:	4b1a      	ldr	r3, [pc, #104]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cf8e:	2204      	movs	r2, #4
 800cf90:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cf92:	4b19      	ldr	r3, [pc, #100]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cf94:	2202      	movs	r2, #2
 800cf96:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cf98:	4b17      	ldr	r3, [pc, #92]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cf9e:	4b16      	ldr	r3, [pc, #88]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfa0:	2202      	movs	r2, #2
 800cfa2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cfa4:	4b14      	ldr	r3, [pc, #80]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cfaa:	4b13      	ldr	r3, [pc, #76]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfac:	2200      	movs	r2, #0
 800cfae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cfb0:	4b11      	ldr	r3, [pc, #68]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cfb6:	4b10      	ldr	r3, [pc, #64]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfb8:	2200      	movs	r2, #0
 800cfba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cfbc:	4b0e      	ldr	r3, [pc, #56]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cfc2:	480d      	ldr	r0, [pc, #52]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfc4:	f7f9 fade 	bl	8006584 <HAL_PCD_Init>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d001      	beq.n	800cfd2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cfce:	f7f5 f84b 	bl	8002068 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cfd2:	2180      	movs	r1, #128	@ 0x80
 800cfd4:	4808      	ldr	r0, [pc, #32]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfd6:	f7fa fd0a 	bl	80079ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cfda:	2240      	movs	r2, #64	@ 0x40
 800cfdc:	2100      	movs	r1, #0
 800cfde:	4806      	ldr	r0, [pc, #24]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfe0:	f7fa fcbe 	bl	8007960 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cfe4:	2280      	movs	r2, #128	@ 0x80
 800cfe6:	2101      	movs	r1, #1
 800cfe8:	4803      	ldr	r0, [pc, #12]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfea:	f7fa fcb9 	bl	8007960 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	20001d9c 	.word	0x20001d9c

0800cffc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d004:	2300      	movs	r3, #0
 800d006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d008:	2300      	movs	r3, #0
 800d00a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d012:	4618      	mov	r0, r3
 800d014:	f7f9 fbc5 	bl	80067a2 <HAL_PCD_Start>
 800d018:	4603      	mov	r3, r0
 800d01a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
 800d01e:	4618      	mov	r0, r3
 800d020:	f000 f942 	bl	800d2a8 <USBD_Get_USB_Status>
 800d024:	4603      	mov	r3, r0
 800d026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d028:	7bbb      	ldrb	r3, [r7, #14]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b084      	sub	sp, #16
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
 800d03a:	4608      	mov	r0, r1
 800d03c:	4611      	mov	r1, r2
 800d03e:	461a      	mov	r2, r3
 800d040:	4603      	mov	r3, r0
 800d042:	70fb      	strb	r3, [r7, #3]
 800d044:	460b      	mov	r3, r1
 800d046:	70bb      	strb	r3, [r7, #2]
 800d048:	4613      	mov	r3, r2
 800d04a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d04c:	2300      	movs	r3, #0
 800d04e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d050:	2300      	movs	r3, #0
 800d052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d05a:	78bb      	ldrb	r3, [r7, #2]
 800d05c:	883a      	ldrh	r2, [r7, #0]
 800d05e:	78f9      	ldrb	r1, [r7, #3]
 800d060:	f7fa f899 	bl	8007196 <HAL_PCD_EP_Open>
 800d064:	4603      	mov	r3, r0
 800d066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d068:	7bfb      	ldrb	r3, [r7, #15]
 800d06a:	4618      	mov	r0, r3
 800d06c:	f000 f91c 	bl	800d2a8 <USBD_Get_USB_Status>
 800d070:	4603      	mov	r3, r0
 800d072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d074:	7bbb      	ldrb	r3, [r7, #14]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b084      	sub	sp, #16
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
 800d086:	460b      	mov	r3, r1
 800d088:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d08a:	2300      	movs	r3, #0
 800d08c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d08e:	2300      	movs	r3, #0
 800d090:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d098:	78fa      	ldrb	r2, [r7, #3]
 800d09a:	4611      	mov	r1, r2
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7fa f8e4 	bl	800726a <HAL_PCD_EP_Close>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0a6:	7bfb      	ldrb	r3, [r7, #15]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f000 f8fd 	bl	800d2a8 <USBD_Get_USB_Status>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3710      	adds	r7, #16
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d0d6:	78fa      	ldrb	r2, [r7, #3]
 800d0d8:	4611      	mov	r1, r2
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fa f99c 	bl	8007418 <HAL_PCD_EP_SetStall>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0e4:	7bfb      	ldrb	r3, [r7, #15]
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f000 f8de 	bl	800d2a8 <USBD_Get_USB_Status>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}

0800d0fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b084      	sub	sp, #16
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
 800d102:	460b      	mov	r3, r1
 800d104:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d106:	2300      	movs	r3, #0
 800d108:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d10a:	2300      	movs	r3, #0
 800d10c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d114:	78fa      	ldrb	r2, [r7, #3]
 800d116:	4611      	mov	r1, r2
 800d118:	4618      	mov	r0, r3
 800d11a:	f7fa f9e0 	bl	80074de <HAL_PCD_EP_ClrStall>
 800d11e:	4603      	mov	r3, r0
 800d120:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d122:	7bfb      	ldrb	r3, [r7, #15]
 800d124:	4618      	mov	r0, r3
 800d126:	f000 f8bf 	bl	800d2a8 <USBD_Get_USB_Status>
 800d12a:	4603      	mov	r3, r0
 800d12c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d12e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d138:	b480      	push	{r7}
 800d13a:	b085      	sub	sp, #20
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	460b      	mov	r3, r1
 800d142:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d14a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d14c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d150:	2b00      	cmp	r3, #0
 800d152:	da0b      	bge.n	800d16c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d154:	78fb      	ldrb	r3, [r7, #3]
 800d156:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d15a:	68f9      	ldr	r1, [r7, #12]
 800d15c:	4613      	mov	r3, r2
 800d15e:	00db      	lsls	r3, r3, #3
 800d160:	4413      	add	r3, r2
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	440b      	add	r3, r1
 800d166:	3316      	adds	r3, #22
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	e00b      	b.n	800d184 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d16c:	78fb      	ldrb	r3, [r7, #3]
 800d16e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d172:	68f9      	ldr	r1, [r7, #12]
 800d174:	4613      	mov	r3, r2
 800d176:	00db      	lsls	r3, r3, #3
 800d178:	4413      	add	r3, r2
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	440b      	add	r3, r1
 800d17e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d182:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d184:	4618      	mov	r0, r3
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	460b      	mov	r3, r1
 800d19a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d19c:	2300      	movs	r3, #0
 800d19e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d1aa:	78fa      	ldrb	r2, [r7, #3]
 800d1ac:	4611      	mov	r1, r2
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7f9 ffcd 	bl	800714e <HAL_PCD_SetAddress>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1b8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f000 f874 	bl	800d2a8 <USBD_Get_USB_Status>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b086      	sub	sp, #24
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	60f8      	str	r0, [r7, #12]
 800d1d6:	607a      	str	r2, [r7, #4]
 800d1d8:	603b      	str	r3, [r7, #0]
 800d1da:	460b      	mov	r3, r1
 800d1dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d1ec:	7af9      	ldrb	r1, [r7, #11]
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	f7fa f8d7 	bl	80073a4 <HAL_PCD_EP_Transmit>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1fa:	7dfb      	ldrb	r3, [r7, #23]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f000 f853 	bl	800d2a8 <USBD_Get_USB_Status>
 800d202:	4603      	mov	r3, r0
 800d204:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d206:	7dbb      	ldrb	r3, [r7, #22]
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3718      	adds	r7, #24
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b086      	sub	sp, #24
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	607a      	str	r2, [r7, #4]
 800d21a:	603b      	str	r3, [r7, #0]
 800d21c:	460b      	mov	r3, r1
 800d21e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d220:	2300      	movs	r3, #0
 800d222:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d224:	2300      	movs	r3, #0
 800d226:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d22e:	7af9      	ldrb	r1, [r7, #11]
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	f7fa f863 	bl	80072fe <HAL_PCD_EP_Receive>
 800d238:	4603      	mov	r3, r0
 800d23a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d23c:	7dfb      	ldrb	r3, [r7, #23]
 800d23e:	4618      	mov	r0, r3
 800d240:	f000 f832 	bl	800d2a8 <USBD_Get_USB_Status>
 800d244:	4603      	mov	r3, r0
 800d246:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d248:	7dbb      	ldrb	r3, [r7, #22]
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3718      	adds	r7, #24
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d252:	b580      	push	{r7, lr}
 800d254:	b082      	sub	sp, #8
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
 800d25a:	460b      	mov	r3, r1
 800d25c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d264:	78fa      	ldrb	r2, [r7, #3]
 800d266:	4611      	mov	r1, r2
 800d268:	4618      	mov	r0, r3
 800d26a:	f7fa f883 	bl	8007374 <HAL_PCD_EP_GetRxCount>
 800d26e:	4603      	mov	r3, r0
}
 800d270:	4618      	mov	r0, r3
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d280:	4b03      	ldr	r3, [pc, #12]	@ (800d290 <USBD_static_malloc+0x18>)
}
 800d282:	4618      	mov	r0, r3
 800d284:	370c      	adds	r7, #12
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	20002280 	.word	0x20002280

0800d294 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]

}
 800d29c:	bf00      	nop
 800d29e:	370c      	adds	r7, #12
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr

0800d2a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d2b6:	79fb      	ldrb	r3, [r7, #7]
 800d2b8:	2b03      	cmp	r3, #3
 800d2ba:	d817      	bhi.n	800d2ec <USBD_Get_USB_Status+0x44>
 800d2bc:	a201      	add	r2, pc, #4	@ (adr r2, 800d2c4 <USBD_Get_USB_Status+0x1c>)
 800d2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2c2:	bf00      	nop
 800d2c4:	0800d2d5 	.word	0x0800d2d5
 800d2c8:	0800d2db 	.word	0x0800d2db
 800d2cc:	0800d2e1 	.word	0x0800d2e1
 800d2d0:	0800d2e7 	.word	0x0800d2e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d2d8:	e00b      	b.n	800d2f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d2da:	2303      	movs	r3, #3
 800d2dc:	73fb      	strb	r3, [r7, #15]
    break;
 800d2de:	e008      	b.n	800d2f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d2e4:	e005      	b.n	800d2f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d2e6:	2303      	movs	r3, #3
 800d2e8:	73fb      	strb	r3, [r7, #15]
    break;
 800d2ea:	e002      	b.n	800d2f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d2ec:	2303      	movs	r3, #3
 800d2ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d2f0:	bf00      	nop
  }
  return usb_status;
 800d2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3714      	adds	r7, #20
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr

0800d300 <__cvt>:
 800d300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d304:	ec57 6b10 	vmov	r6, r7, d0
 800d308:	2f00      	cmp	r7, #0
 800d30a:	460c      	mov	r4, r1
 800d30c:	4619      	mov	r1, r3
 800d30e:	463b      	mov	r3, r7
 800d310:	bfbb      	ittet	lt
 800d312:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d316:	461f      	movlt	r7, r3
 800d318:	2300      	movge	r3, #0
 800d31a:	232d      	movlt	r3, #45	@ 0x2d
 800d31c:	700b      	strb	r3, [r1, #0]
 800d31e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d320:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d324:	4691      	mov	r9, r2
 800d326:	f023 0820 	bic.w	r8, r3, #32
 800d32a:	bfbc      	itt	lt
 800d32c:	4632      	movlt	r2, r6
 800d32e:	4616      	movlt	r6, r2
 800d330:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d334:	d005      	beq.n	800d342 <__cvt+0x42>
 800d336:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d33a:	d100      	bne.n	800d33e <__cvt+0x3e>
 800d33c:	3401      	adds	r4, #1
 800d33e:	2102      	movs	r1, #2
 800d340:	e000      	b.n	800d344 <__cvt+0x44>
 800d342:	2103      	movs	r1, #3
 800d344:	ab03      	add	r3, sp, #12
 800d346:	9301      	str	r3, [sp, #4]
 800d348:	ab02      	add	r3, sp, #8
 800d34a:	9300      	str	r3, [sp, #0]
 800d34c:	ec47 6b10 	vmov	d0, r6, r7
 800d350:	4653      	mov	r3, sl
 800d352:	4622      	mov	r2, r4
 800d354:	f000 ff88 	bl	800e268 <_dtoa_r>
 800d358:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d35c:	4605      	mov	r5, r0
 800d35e:	d119      	bne.n	800d394 <__cvt+0x94>
 800d360:	f019 0f01 	tst.w	r9, #1
 800d364:	d00e      	beq.n	800d384 <__cvt+0x84>
 800d366:	eb00 0904 	add.w	r9, r0, r4
 800d36a:	2200      	movs	r2, #0
 800d36c:	2300      	movs	r3, #0
 800d36e:	4630      	mov	r0, r6
 800d370:	4639      	mov	r1, r7
 800d372:	f7f3 fbb1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d376:	b108      	cbz	r0, 800d37c <__cvt+0x7c>
 800d378:	f8cd 900c 	str.w	r9, [sp, #12]
 800d37c:	2230      	movs	r2, #48	@ 0x30
 800d37e:	9b03      	ldr	r3, [sp, #12]
 800d380:	454b      	cmp	r3, r9
 800d382:	d31e      	bcc.n	800d3c2 <__cvt+0xc2>
 800d384:	9b03      	ldr	r3, [sp, #12]
 800d386:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d388:	1b5b      	subs	r3, r3, r5
 800d38a:	4628      	mov	r0, r5
 800d38c:	6013      	str	r3, [r2, #0]
 800d38e:	b004      	add	sp, #16
 800d390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d394:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d398:	eb00 0904 	add.w	r9, r0, r4
 800d39c:	d1e5      	bne.n	800d36a <__cvt+0x6a>
 800d39e:	7803      	ldrb	r3, [r0, #0]
 800d3a0:	2b30      	cmp	r3, #48	@ 0x30
 800d3a2:	d10a      	bne.n	800d3ba <__cvt+0xba>
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	4639      	mov	r1, r7
 800d3ac:	f7f3 fb94 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3b0:	b918      	cbnz	r0, 800d3ba <__cvt+0xba>
 800d3b2:	f1c4 0401 	rsb	r4, r4, #1
 800d3b6:	f8ca 4000 	str.w	r4, [sl]
 800d3ba:	f8da 3000 	ldr.w	r3, [sl]
 800d3be:	4499      	add	r9, r3
 800d3c0:	e7d3      	b.n	800d36a <__cvt+0x6a>
 800d3c2:	1c59      	adds	r1, r3, #1
 800d3c4:	9103      	str	r1, [sp, #12]
 800d3c6:	701a      	strb	r2, [r3, #0]
 800d3c8:	e7d9      	b.n	800d37e <__cvt+0x7e>

0800d3ca <__exponent>:
 800d3ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3cc:	2900      	cmp	r1, #0
 800d3ce:	bfba      	itte	lt
 800d3d0:	4249      	neglt	r1, r1
 800d3d2:	232d      	movlt	r3, #45	@ 0x2d
 800d3d4:	232b      	movge	r3, #43	@ 0x2b
 800d3d6:	2909      	cmp	r1, #9
 800d3d8:	7002      	strb	r2, [r0, #0]
 800d3da:	7043      	strb	r3, [r0, #1]
 800d3dc:	dd29      	ble.n	800d432 <__exponent+0x68>
 800d3de:	f10d 0307 	add.w	r3, sp, #7
 800d3e2:	461d      	mov	r5, r3
 800d3e4:	270a      	movs	r7, #10
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	fbb1 f6f7 	udiv	r6, r1, r7
 800d3ec:	fb07 1416 	mls	r4, r7, r6, r1
 800d3f0:	3430      	adds	r4, #48	@ 0x30
 800d3f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d3f6:	460c      	mov	r4, r1
 800d3f8:	2c63      	cmp	r4, #99	@ 0x63
 800d3fa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d3fe:	4631      	mov	r1, r6
 800d400:	dcf1      	bgt.n	800d3e6 <__exponent+0x1c>
 800d402:	3130      	adds	r1, #48	@ 0x30
 800d404:	1e94      	subs	r4, r2, #2
 800d406:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d40a:	1c41      	adds	r1, r0, #1
 800d40c:	4623      	mov	r3, r4
 800d40e:	42ab      	cmp	r3, r5
 800d410:	d30a      	bcc.n	800d428 <__exponent+0x5e>
 800d412:	f10d 0309 	add.w	r3, sp, #9
 800d416:	1a9b      	subs	r3, r3, r2
 800d418:	42ac      	cmp	r4, r5
 800d41a:	bf88      	it	hi
 800d41c:	2300      	movhi	r3, #0
 800d41e:	3302      	adds	r3, #2
 800d420:	4403      	add	r3, r0
 800d422:	1a18      	subs	r0, r3, r0
 800d424:	b003      	add	sp, #12
 800d426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d428:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d42c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d430:	e7ed      	b.n	800d40e <__exponent+0x44>
 800d432:	2330      	movs	r3, #48	@ 0x30
 800d434:	3130      	adds	r1, #48	@ 0x30
 800d436:	7083      	strb	r3, [r0, #2]
 800d438:	70c1      	strb	r1, [r0, #3]
 800d43a:	1d03      	adds	r3, r0, #4
 800d43c:	e7f1      	b.n	800d422 <__exponent+0x58>
	...

0800d440 <_printf_float>:
 800d440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d444:	b08d      	sub	sp, #52	@ 0x34
 800d446:	460c      	mov	r4, r1
 800d448:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d44c:	4616      	mov	r6, r2
 800d44e:	461f      	mov	r7, r3
 800d450:	4605      	mov	r5, r0
 800d452:	f000 fdf9 	bl	800e048 <_localeconv_r>
 800d456:	6803      	ldr	r3, [r0, #0]
 800d458:	9304      	str	r3, [sp, #16]
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7f2 ff10 	bl	8000280 <strlen>
 800d460:	2300      	movs	r3, #0
 800d462:	930a      	str	r3, [sp, #40]	@ 0x28
 800d464:	f8d8 3000 	ldr.w	r3, [r8]
 800d468:	9005      	str	r0, [sp, #20]
 800d46a:	3307      	adds	r3, #7
 800d46c:	f023 0307 	bic.w	r3, r3, #7
 800d470:	f103 0208 	add.w	r2, r3, #8
 800d474:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d478:	f8d4 b000 	ldr.w	fp, [r4]
 800d47c:	f8c8 2000 	str.w	r2, [r8]
 800d480:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d484:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d488:	9307      	str	r3, [sp, #28]
 800d48a:	f8cd 8018 	str.w	r8, [sp, #24]
 800d48e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d492:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d496:	4b9c      	ldr	r3, [pc, #624]	@ (800d708 <_printf_float+0x2c8>)
 800d498:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d49c:	f7f3 fb4e 	bl	8000b3c <__aeabi_dcmpun>
 800d4a0:	bb70      	cbnz	r0, 800d500 <_printf_float+0xc0>
 800d4a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4a6:	4b98      	ldr	r3, [pc, #608]	@ (800d708 <_printf_float+0x2c8>)
 800d4a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d4ac:	f7f3 fb28 	bl	8000b00 <__aeabi_dcmple>
 800d4b0:	bb30      	cbnz	r0, 800d500 <_printf_float+0xc0>
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	4640      	mov	r0, r8
 800d4b8:	4649      	mov	r1, r9
 800d4ba:	f7f3 fb17 	bl	8000aec <__aeabi_dcmplt>
 800d4be:	b110      	cbz	r0, 800d4c6 <_printf_float+0x86>
 800d4c0:	232d      	movs	r3, #45	@ 0x2d
 800d4c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d4c6:	4a91      	ldr	r2, [pc, #580]	@ (800d70c <_printf_float+0x2cc>)
 800d4c8:	4b91      	ldr	r3, [pc, #580]	@ (800d710 <_printf_float+0x2d0>)
 800d4ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d4ce:	bf8c      	ite	hi
 800d4d0:	4690      	movhi	r8, r2
 800d4d2:	4698      	movls	r8, r3
 800d4d4:	2303      	movs	r3, #3
 800d4d6:	6123      	str	r3, [r4, #16]
 800d4d8:	f02b 0304 	bic.w	r3, fp, #4
 800d4dc:	6023      	str	r3, [r4, #0]
 800d4de:	f04f 0900 	mov.w	r9, #0
 800d4e2:	9700      	str	r7, [sp, #0]
 800d4e4:	4633      	mov	r3, r6
 800d4e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d4e8:	4621      	mov	r1, r4
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	f000 f9d2 	bl	800d894 <_printf_common>
 800d4f0:	3001      	adds	r0, #1
 800d4f2:	f040 808d 	bne.w	800d610 <_printf_float+0x1d0>
 800d4f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4fa:	b00d      	add	sp, #52	@ 0x34
 800d4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d500:	4642      	mov	r2, r8
 800d502:	464b      	mov	r3, r9
 800d504:	4640      	mov	r0, r8
 800d506:	4649      	mov	r1, r9
 800d508:	f7f3 fb18 	bl	8000b3c <__aeabi_dcmpun>
 800d50c:	b140      	cbz	r0, 800d520 <_printf_float+0xe0>
 800d50e:	464b      	mov	r3, r9
 800d510:	2b00      	cmp	r3, #0
 800d512:	bfbc      	itt	lt
 800d514:	232d      	movlt	r3, #45	@ 0x2d
 800d516:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d51a:	4a7e      	ldr	r2, [pc, #504]	@ (800d714 <_printf_float+0x2d4>)
 800d51c:	4b7e      	ldr	r3, [pc, #504]	@ (800d718 <_printf_float+0x2d8>)
 800d51e:	e7d4      	b.n	800d4ca <_printf_float+0x8a>
 800d520:	6863      	ldr	r3, [r4, #4]
 800d522:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d526:	9206      	str	r2, [sp, #24]
 800d528:	1c5a      	adds	r2, r3, #1
 800d52a:	d13b      	bne.n	800d5a4 <_printf_float+0x164>
 800d52c:	2306      	movs	r3, #6
 800d52e:	6063      	str	r3, [r4, #4]
 800d530:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d534:	2300      	movs	r3, #0
 800d536:	6022      	str	r2, [r4, #0]
 800d538:	9303      	str	r3, [sp, #12]
 800d53a:	ab0a      	add	r3, sp, #40	@ 0x28
 800d53c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d540:	ab09      	add	r3, sp, #36	@ 0x24
 800d542:	9300      	str	r3, [sp, #0]
 800d544:	6861      	ldr	r1, [r4, #4]
 800d546:	ec49 8b10 	vmov	d0, r8, r9
 800d54a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d54e:	4628      	mov	r0, r5
 800d550:	f7ff fed6 	bl	800d300 <__cvt>
 800d554:	9b06      	ldr	r3, [sp, #24]
 800d556:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d558:	2b47      	cmp	r3, #71	@ 0x47
 800d55a:	4680      	mov	r8, r0
 800d55c:	d129      	bne.n	800d5b2 <_printf_float+0x172>
 800d55e:	1cc8      	adds	r0, r1, #3
 800d560:	db02      	blt.n	800d568 <_printf_float+0x128>
 800d562:	6863      	ldr	r3, [r4, #4]
 800d564:	4299      	cmp	r1, r3
 800d566:	dd41      	ble.n	800d5ec <_printf_float+0x1ac>
 800d568:	f1aa 0a02 	sub.w	sl, sl, #2
 800d56c:	fa5f fa8a 	uxtb.w	sl, sl
 800d570:	3901      	subs	r1, #1
 800d572:	4652      	mov	r2, sl
 800d574:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d578:	9109      	str	r1, [sp, #36]	@ 0x24
 800d57a:	f7ff ff26 	bl	800d3ca <__exponent>
 800d57e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d580:	1813      	adds	r3, r2, r0
 800d582:	2a01      	cmp	r2, #1
 800d584:	4681      	mov	r9, r0
 800d586:	6123      	str	r3, [r4, #16]
 800d588:	dc02      	bgt.n	800d590 <_printf_float+0x150>
 800d58a:	6822      	ldr	r2, [r4, #0]
 800d58c:	07d2      	lsls	r2, r2, #31
 800d58e:	d501      	bpl.n	800d594 <_printf_float+0x154>
 800d590:	3301      	adds	r3, #1
 800d592:	6123      	str	r3, [r4, #16]
 800d594:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d0a2      	beq.n	800d4e2 <_printf_float+0xa2>
 800d59c:	232d      	movs	r3, #45	@ 0x2d
 800d59e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5a2:	e79e      	b.n	800d4e2 <_printf_float+0xa2>
 800d5a4:	9a06      	ldr	r2, [sp, #24]
 800d5a6:	2a47      	cmp	r2, #71	@ 0x47
 800d5a8:	d1c2      	bne.n	800d530 <_printf_float+0xf0>
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d1c0      	bne.n	800d530 <_printf_float+0xf0>
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e7bd      	b.n	800d52e <_printf_float+0xee>
 800d5b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d5b6:	d9db      	bls.n	800d570 <_printf_float+0x130>
 800d5b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d5bc:	d118      	bne.n	800d5f0 <_printf_float+0x1b0>
 800d5be:	2900      	cmp	r1, #0
 800d5c0:	6863      	ldr	r3, [r4, #4]
 800d5c2:	dd0b      	ble.n	800d5dc <_printf_float+0x19c>
 800d5c4:	6121      	str	r1, [r4, #16]
 800d5c6:	b913      	cbnz	r3, 800d5ce <_printf_float+0x18e>
 800d5c8:	6822      	ldr	r2, [r4, #0]
 800d5ca:	07d0      	lsls	r0, r2, #31
 800d5cc:	d502      	bpl.n	800d5d4 <_printf_float+0x194>
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	440b      	add	r3, r1
 800d5d2:	6123      	str	r3, [r4, #16]
 800d5d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d5d6:	f04f 0900 	mov.w	r9, #0
 800d5da:	e7db      	b.n	800d594 <_printf_float+0x154>
 800d5dc:	b913      	cbnz	r3, 800d5e4 <_printf_float+0x1a4>
 800d5de:	6822      	ldr	r2, [r4, #0]
 800d5e0:	07d2      	lsls	r2, r2, #31
 800d5e2:	d501      	bpl.n	800d5e8 <_printf_float+0x1a8>
 800d5e4:	3302      	adds	r3, #2
 800d5e6:	e7f4      	b.n	800d5d2 <_printf_float+0x192>
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e7f2      	b.n	800d5d2 <_printf_float+0x192>
 800d5ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d5f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5f2:	4299      	cmp	r1, r3
 800d5f4:	db05      	blt.n	800d602 <_printf_float+0x1c2>
 800d5f6:	6823      	ldr	r3, [r4, #0]
 800d5f8:	6121      	str	r1, [r4, #16]
 800d5fa:	07d8      	lsls	r0, r3, #31
 800d5fc:	d5ea      	bpl.n	800d5d4 <_printf_float+0x194>
 800d5fe:	1c4b      	adds	r3, r1, #1
 800d600:	e7e7      	b.n	800d5d2 <_printf_float+0x192>
 800d602:	2900      	cmp	r1, #0
 800d604:	bfd4      	ite	le
 800d606:	f1c1 0202 	rsble	r2, r1, #2
 800d60a:	2201      	movgt	r2, #1
 800d60c:	4413      	add	r3, r2
 800d60e:	e7e0      	b.n	800d5d2 <_printf_float+0x192>
 800d610:	6823      	ldr	r3, [r4, #0]
 800d612:	055a      	lsls	r2, r3, #21
 800d614:	d407      	bmi.n	800d626 <_printf_float+0x1e6>
 800d616:	6923      	ldr	r3, [r4, #16]
 800d618:	4642      	mov	r2, r8
 800d61a:	4631      	mov	r1, r6
 800d61c:	4628      	mov	r0, r5
 800d61e:	47b8      	blx	r7
 800d620:	3001      	adds	r0, #1
 800d622:	d12b      	bne.n	800d67c <_printf_float+0x23c>
 800d624:	e767      	b.n	800d4f6 <_printf_float+0xb6>
 800d626:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d62a:	f240 80dd 	bls.w	800d7e8 <_printf_float+0x3a8>
 800d62e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d632:	2200      	movs	r2, #0
 800d634:	2300      	movs	r3, #0
 800d636:	f7f3 fa4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800d63a:	2800      	cmp	r0, #0
 800d63c:	d033      	beq.n	800d6a6 <_printf_float+0x266>
 800d63e:	4a37      	ldr	r2, [pc, #220]	@ (800d71c <_printf_float+0x2dc>)
 800d640:	2301      	movs	r3, #1
 800d642:	4631      	mov	r1, r6
 800d644:	4628      	mov	r0, r5
 800d646:	47b8      	blx	r7
 800d648:	3001      	adds	r0, #1
 800d64a:	f43f af54 	beq.w	800d4f6 <_printf_float+0xb6>
 800d64e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d652:	4543      	cmp	r3, r8
 800d654:	db02      	blt.n	800d65c <_printf_float+0x21c>
 800d656:	6823      	ldr	r3, [r4, #0]
 800d658:	07d8      	lsls	r0, r3, #31
 800d65a:	d50f      	bpl.n	800d67c <_printf_float+0x23c>
 800d65c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d660:	4631      	mov	r1, r6
 800d662:	4628      	mov	r0, r5
 800d664:	47b8      	blx	r7
 800d666:	3001      	adds	r0, #1
 800d668:	f43f af45 	beq.w	800d4f6 <_printf_float+0xb6>
 800d66c:	f04f 0900 	mov.w	r9, #0
 800d670:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d674:	f104 0a1a 	add.w	sl, r4, #26
 800d678:	45c8      	cmp	r8, r9
 800d67a:	dc09      	bgt.n	800d690 <_printf_float+0x250>
 800d67c:	6823      	ldr	r3, [r4, #0]
 800d67e:	079b      	lsls	r3, r3, #30
 800d680:	f100 8103 	bmi.w	800d88a <_printf_float+0x44a>
 800d684:	68e0      	ldr	r0, [r4, #12]
 800d686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d688:	4298      	cmp	r0, r3
 800d68a:	bfb8      	it	lt
 800d68c:	4618      	movlt	r0, r3
 800d68e:	e734      	b.n	800d4fa <_printf_float+0xba>
 800d690:	2301      	movs	r3, #1
 800d692:	4652      	mov	r2, sl
 800d694:	4631      	mov	r1, r6
 800d696:	4628      	mov	r0, r5
 800d698:	47b8      	blx	r7
 800d69a:	3001      	adds	r0, #1
 800d69c:	f43f af2b 	beq.w	800d4f6 <_printf_float+0xb6>
 800d6a0:	f109 0901 	add.w	r9, r9, #1
 800d6a4:	e7e8      	b.n	800d678 <_printf_float+0x238>
 800d6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	dc39      	bgt.n	800d720 <_printf_float+0x2e0>
 800d6ac:	4a1b      	ldr	r2, [pc, #108]	@ (800d71c <_printf_float+0x2dc>)
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	4631      	mov	r1, r6
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	47b8      	blx	r7
 800d6b6:	3001      	adds	r0, #1
 800d6b8:	f43f af1d 	beq.w	800d4f6 <_printf_float+0xb6>
 800d6bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d6c0:	ea59 0303 	orrs.w	r3, r9, r3
 800d6c4:	d102      	bne.n	800d6cc <_printf_float+0x28c>
 800d6c6:	6823      	ldr	r3, [r4, #0]
 800d6c8:	07d9      	lsls	r1, r3, #31
 800d6ca:	d5d7      	bpl.n	800d67c <_printf_float+0x23c>
 800d6cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6d0:	4631      	mov	r1, r6
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	47b8      	blx	r7
 800d6d6:	3001      	adds	r0, #1
 800d6d8:	f43f af0d 	beq.w	800d4f6 <_printf_float+0xb6>
 800d6dc:	f04f 0a00 	mov.w	sl, #0
 800d6e0:	f104 0b1a 	add.w	fp, r4, #26
 800d6e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6e6:	425b      	negs	r3, r3
 800d6e8:	4553      	cmp	r3, sl
 800d6ea:	dc01      	bgt.n	800d6f0 <_printf_float+0x2b0>
 800d6ec:	464b      	mov	r3, r9
 800d6ee:	e793      	b.n	800d618 <_printf_float+0x1d8>
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	465a      	mov	r2, fp
 800d6f4:	4631      	mov	r1, r6
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	47b8      	blx	r7
 800d6fa:	3001      	adds	r0, #1
 800d6fc:	f43f aefb 	beq.w	800d4f6 <_printf_float+0xb6>
 800d700:	f10a 0a01 	add.w	sl, sl, #1
 800d704:	e7ee      	b.n	800d6e4 <_printf_float+0x2a4>
 800d706:	bf00      	nop
 800d708:	7fefffff 	.word	0x7fefffff
 800d70c:	08010b7a 	.word	0x08010b7a
 800d710:	08010b76 	.word	0x08010b76
 800d714:	08010b82 	.word	0x08010b82
 800d718:	08010b7e 	.word	0x08010b7e
 800d71c:	08010b86 	.word	0x08010b86
 800d720:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d722:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d726:	4553      	cmp	r3, sl
 800d728:	bfa8      	it	ge
 800d72a:	4653      	movge	r3, sl
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	4699      	mov	r9, r3
 800d730:	dc36      	bgt.n	800d7a0 <_printf_float+0x360>
 800d732:	f04f 0b00 	mov.w	fp, #0
 800d736:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d73a:	f104 021a 	add.w	r2, r4, #26
 800d73e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d740:	9306      	str	r3, [sp, #24]
 800d742:	eba3 0309 	sub.w	r3, r3, r9
 800d746:	455b      	cmp	r3, fp
 800d748:	dc31      	bgt.n	800d7ae <_printf_float+0x36e>
 800d74a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d74c:	459a      	cmp	sl, r3
 800d74e:	dc3a      	bgt.n	800d7c6 <_printf_float+0x386>
 800d750:	6823      	ldr	r3, [r4, #0]
 800d752:	07da      	lsls	r2, r3, #31
 800d754:	d437      	bmi.n	800d7c6 <_printf_float+0x386>
 800d756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d758:	ebaa 0903 	sub.w	r9, sl, r3
 800d75c:	9b06      	ldr	r3, [sp, #24]
 800d75e:	ebaa 0303 	sub.w	r3, sl, r3
 800d762:	4599      	cmp	r9, r3
 800d764:	bfa8      	it	ge
 800d766:	4699      	movge	r9, r3
 800d768:	f1b9 0f00 	cmp.w	r9, #0
 800d76c:	dc33      	bgt.n	800d7d6 <_printf_float+0x396>
 800d76e:	f04f 0800 	mov.w	r8, #0
 800d772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d776:	f104 0b1a 	add.w	fp, r4, #26
 800d77a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d77c:	ebaa 0303 	sub.w	r3, sl, r3
 800d780:	eba3 0309 	sub.w	r3, r3, r9
 800d784:	4543      	cmp	r3, r8
 800d786:	f77f af79 	ble.w	800d67c <_printf_float+0x23c>
 800d78a:	2301      	movs	r3, #1
 800d78c:	465a      	mov	r2, fp
 800d78e:	4631      	mov	r1, r6
 800d790:	4628      	mov	r0, r5
 800d792:	47b8      	blx	r7
 800d794:	3001      	adds	r0, #1
 800d796:	f43f aeae 	beq.w	800d4f6 <_printf_float+0xb6>
 800d79a:	f108 0801 	add.w	r8, r8, #1
 800d79e:	e7ec      	b.n	800d77a <_printf_float+0x33a>
 800d7a0:	4642      	mov	r2, r8
 800d7a2:	4631      	mov	r1, r6
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	47b8      	blx	r7
 800d7a8:	3001      	adds	r0, #1
 800d7aa:	d1c2      	bne.n	800d732 <_printf_float+0x2f2>
 800d7ac:	e6a3      	b.n	800d4f6 <_printf_float+0xb6>
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	4631      	mov	r1, r6
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	9206      	str	r2, [sp, #24]
 800d7b6:	47b8      	blx	r7
 800d7b8:	3001      	adds	r0, #1
 800d7ba:	f43f ae9c 	beq.w	800d4f6 <_printf_float+0xb6>
 800d7be:	9a06      	ldr	r2, [sp, #24]
 800d7c0:	f10b 0b01 	add.w	fp, fp, #1
 800d7c4:	e7bb      	b.n	800d73e <_printf_float+0x2fe>
 800d7c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7ca:	4631      	mov	r1, r6
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	47b8      	blx	r7
 800d7d0:	3001      	adds	r0, #1
 800d7d2:	d1c0      	bne.n	800d756 <_printf_float+0x316>
 800d7d4:	e68f      	b.n	800d4f6 <_printf_float+0xb6>
 800d7d6:	9a06      	ldr	r2, [sp, #24]
 800d7d8:	464b      	mov	r3, r9
 800d7da:	4442      	add	r2, r8
 800d7dc:	4631      	mov	r1, r6
 800d7de:	4628      	mov	r0, r5
 800d7e0:	47b8      	blx	r7
 800d7e2:	3001      	adds	r0, #1
 800d7e4:	d1c3      	bne.n	800d76e <_printf_float+0x32e>
 800d7e6:	e686      	b.n	800d4f6 <_printf_float+0xb6>
 800d7e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d7ec:	f1ba 0f01 	cmp.w	sl, #1
 800d7f0:	dc01      	bgt.n	800d7f6 <_printf_float+0x3b6>
 800d7f2:	07db      	lsls	r3, r3, #31
 800d7f4:	d536      	bpl.n	800d864 <_printf_float+0x424>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	4642      	mov	r2, r8
 800d7fa:	4631      	mov	r1, r6
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	47b8      	blx	r7
 800d800:	3001      	adds	r0, #1
 800d802:	f43f ae78 	beq.w	800d4f6 <_printf_float+0xb6>
 800d806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d80a:	4631      	mov	r1, r6
 800d80c:	4628      	mov	r0, r5
 800d80e:	47b8      	blx	r7
 800d810:	3001      	adds	r0, #1
 800d812:	f43f ae70 	beq.w	800d4f6 <_printf_float+0xb6>
 800d816:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d81a:	2200      	movs	r2, #0
 800d81c:	2300      	movs	r3, #0
 800d81e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d822:	f7f3 f959 	bl	8000ad8 <__aeabi_dcmpeq>
 800d826:	b9c0      	cbnz	r0, 800d85a <_printf_float+0x41a>
 800d828:	4653      	mov	r3, sl
 800d82a:	f108 0201 	add.w	r2, r8, #1
 800d82e:	4631      	mov	r1, r6
 800d830:	4628      	mov	r0, r5
 800d832:	47b8      	blx	r7
 800d834:	3001      	adds	r0, #1
 800d836:	d10c      	bne.n	800d852 <_printf_float+0x412>
 800d838:	e65d      	b.n	800d4f6 <_printf_float+0xb6>
 800d83a:	2301      	movs	r3, #1
 800d83c:	465a      	mov	r2, fp
 800d83e:	4631      	mov	r1, r6
 800d840:	4628      	mov	r0, r5
 800d842:	47b8      	blx	r7
 800d844:	3001      	adds	r0, #1
 800d846:	f43f ae56 	beq.w	800d4f6 <_printf_float+0xb6>
 800d84a:	f108 0801 	add.w	r8, r8, #1
 800d84e:	45d0      	cmp	r8, sl
 800d850:	dbf3      	blt.n	800d83a <_printf_float+0x3fa>
 800d852:	464b      	mov	r3, r9
 800d854:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d858:	e6df      	b.n	800d61a <_printf_float+0x1da>
 800d85a:	f04f 0800 	mov.w	r8, #0
 800d85e:	f104 0b1a 	add.w	fp, r4, #26
 800d862:	e7f4      	b.n	800d84e <_printf_float+0x40e>
 800d864:	2301      	movs	r3, #1
 800d866:	4642      	mov	r2, r8
 800d868:	e7e1      	b.n	800d82e <_printf_float+0x3ee>
 800d86a:	2301      	movs	r3, #1
 800d86c:	464a      	mov	r2, r9
 800d86e:	4631      	mov	r1, r6
 800d870:	4628      	mov	r0, r5
 800d872:	47b8      	blx	r7
 800d874:	3001      	adds	r0, #1
 800d876:	f43f ae3e 	beq.w	800d4f6 <_printf_float+0xb6>
 800d87a:	f108 0801 	add.w	r8, r8, #1
 800d87e:	68e3      	ldr	r3, [r4, #12]
 800d880:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d882:	1a5b      	subs	r3, r3, r1
 800d884:	4543      	cmp	r3, r8
 800d886:	dcf0      	bgt.n	800d86a <_printf_float+0x42a>
 800d888:	e6fc      	b.n	800d684 <_printf_float+0x244>
 800d88a:	f04f 0800 	mov.w	r8, #0
 800d88e:	f104 0919 	add.w	r9, r4, #25
 800d892:	e7f4      	b.n	800d87e <_printf_float+0x43e>

0800d894 <_printf_common>:
 800d894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d898:	4616      	mov	r6, r2
 800d89a:	4698      	mov	r8, r3
 800d89c:	688a      	ldr	r2, [r1, #8]
 800d89e:	690b      	ldr	r3, [r1, #16]
 800d8a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	bfb8      	it	lt
 800d8a8:	4613      	movlt	r3, r2
 800d8aa:	6033      	str	r3, [r6, #0]
 800d8ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d8b0:	4607      	mov	r7, r0
 800d8b2:	460c      	mov	r4, r1
 800d8b4:	b10a      	cbz	r2, 800d8ba <_printf_common+0x26>
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	6033      	str	r3, [r6, #0]
 800d8ba:	6823      	ldr	r3, [r4, #0]
 800d8bc:	0699      	lsls	r1, r3, #26
 800d8be:	bf42      	ittt	mi
 800d8c0:	6833      	ldrmi	r3, [r6, #0]
 800d8c2:	3302      	addmi	r3, #2
 800d8c4:	6033      	strmi	r3, [r6, #0]
 800d8c6:	6825      	ldr	r5, [r4, #0]
 800d8c8:	f015 0506 	ands.w	r5, r5, #6
 800d8cc:	d106      	bne.n	800d8dc <_printf_common+0x48>
 800d8ce:	f104 0a19 	add.w	sl, r4, #25
 800d8d2:	68e3      	ldr	r3, [r4, #12]
 800d8d4:	6832      	ldr	r2, [r6, #0]
 800d8d6:	1a9b      	subs	r3, r3, r2
 800d8d8:	42ab      	cmp	r3, r5
 800d8da:	dc26      	bgt.n	800d92a <_printf_common+0x96>
 800d8dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d8e0:	6822      	ldr	r2, [r4, #0]
 800d8e2:	3b00      	subs	r3, #0
 800d8e4:	bf18      	it	ne
 800d8e6:	2301      	movne	r3, #1
 800d8e8:	0692      	lsls	r2, r2, #26
 800d8ea:	d42b      	bmi.n	800d944 <_printf_common+0xb0>
 800d8ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d8f0:	4641      	mov	r1, r8
 800d8f2:	4638      	mov	r0, r7
 800d8f4:	47c8      	blx	r9
 800d8f6:	3001      	adds	r0, #1
 800d8f8:	d01e      	beq.n	800d938 <_printf_common+0xa4>
 800d8fa:	6823      	ldr	r3, [r4, #0]
 800d8fc:	6922      	ldr	r2, [r4, #16]
 800d8fe:	f003 0306 	and.w	r3, r3, #6
 800d902:	2b04      	cmp	r3, #4
 800d904:	bf02      	ittt	eq
 800d906:	68e5      	ldreq	r5, [r4, #12]
 800d908:	6833      	ldreq	r3, [r6, #0]
 800d90a:	1aed      	subeq	r5, r5, r3
 800d90c:	68a3      	ldr	r3, [r4, #8]
 800d90e:	bf0c      	ite	eq
 800d910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d914:	2500      	movne	r5, #0
 800d916:	4293      	cmp	r3, r2
 800d918:	bfc4      	itt	gt
 800d91a:	1a9b      	subgt	r3, r3, r2
 800d91c:	18ed      	addgt	r5, r5, r3
 800d91e:	2600      	movs	r6, #0
 800d920:	341a      	adds	r4, #26
 800d922:	42b5      	cmp	r5, r6
 800d924:	d11a      	bne.n	800d95c <_printf_common+0xc8>
 800d926:	2000      	movs	r0, #0
 800d928:	e008      	b.n	800d93c <_printf_common+0xa8>
 800d92a:	2301      	movs	r3, #1
 800d92c:	4652      	mov	r2, sl
 800d92e:	4641      	mov	r1, r8
 800d930:	4638      	mov	r0, r7
 800d932:	47c8      	blx	r9
 800d934:	3001      	adds	r0, #1
 800d936:	d103      	bne.n	800d940 <_printf_common+0xac>
 800d938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d940:	3501      	adds	r5, #1
 800d942:	e7c6      	b.n	800d8d2 <_printf_common+0x3e>
 800d944:	18e1      	adds	r1, r4, r3
 800d946:	1c5a      	adds	r2, r3, #1
 800d948:	2030      	movs	r0, #48	@ 0x30
 800d94a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d94e:	4422      	add	r2, r4
 800d950:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d954:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d958:	3302      	adds	r3, #2
 800d95a:	e7c7      	b.n	800d8ec <_printf_common+0x58>
 800d95c:	2301      	movs	r3, #1
 800d95e:	4622      	mov	r2, r4
 800d960:	4641      	mov	r1, r8
 800d962:	4638      	mov	r0, r7
 800d964:	47c8      	blx	r9
 800d966:	3001      	adds	r0, #1
 800d968:	d0e6      	beq.n	800d938 <_printf_common+0xa4>
 800d96a:	3601      	adds	r6, #1
 800d96c:	e7d9      	b.n	800d922 <_printf_common+0x8e>
	...

0800d970 <_printf_i>:
 800d970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d974:	7e0f      	ldrb	r7, [r1, #24]
 800d976:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d978:	2f78      	cmp	r7, #120	@ 0x78
 800d97a:	4691      	mov	r9, r2
 800d97c:	4680      	mov	r8, r0
 800d97e:	460c      	mov	r4, r1
 800d980:	469a      	mov	sl, r3
 800d982:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d986:	d807      	bhi.n	800d998 <_printf_i+0x28>
 800d988:	2f62      	cmp	r7, #98	@ 0x62
 800d98a:	d80a      	bhi.n	800d9a2 <_printf_i+0x32>
 800d98c:	2f00      	cmp	r7, #0
 800d98e:	f000 80d1 	beq.w	800db34 <_printf_i+0x1c4>
 800d992:	2f58      	cmp	r7, #88	@ 0x58
 800d994:	f000 80b8 	beq.w	800db08 <_printf_i+0x198>
 800d998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d99c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d9a0:	e03a      	b.n	800da18 <_printf_i+0xa8>
 800d9a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d9a6:	2b15      	cmp	r3, #21
 800d9a8:	d8f6      	bhi.n	800d998 <_printf_i+0x28>
 800d9aa:	a101      	add	r1, pc, #4	@ (adr r1, 800d9b0 <_printf_i+0x40>)
 800d9ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9b0:	0800da09 	.word	0x0800da09
 800d9b4:	0800da1d 	.word	0x0800da1d
 800d9b8:	0800d999 	.word	0x0800d999
 800d9bc:	0800d999 	.word	0x0800d999
 800d9c0:	0800d999 	.word	0x0800d999
 800d9c4:	0800d999 	.word	0x0800d999
 800d9c8:	0800da1d 	.word	0x0800da1d
 800d9cc:	0800d999 	.word	0x0800d999
 800d9d0:	0800d999 	.word	0x0800d999
 800d9d4:	0800d999 	.word	0x0800d999
 800d9d8:	0800d999 	.word	0x0800d999
 800d9dc:	0800db1b 	.word	0x0800db1b
 800d9e0:	0800da47 	.word	0x0800da47
 800d9e4:	0800dad5 	.word	0x0800dad5
 800d9e8:	0800d999 	.word	0x0800d999
 800d9ec:	0800d999 	.word	0x0800d999
 800d9f0:	0800db3d 	.word	0x0800db3d
 800d9f4:	0800d999 	.word	0x0800d999
 800d9f8:	0800da47 	.word	0x0800da47
 800d9fc:	0800d999 	.word	0x0800d999
 800da00:	0800d999 	.word	0x0800d999
 800da04:	0800dadd 	.word	0x0800dadd
 800da08:	6833      	ldr	r3, [r6, #0]
 800da0a:	1d1a      	adds	r2, r3, #4
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	6032      	str	r2, [r6, #0]
 800da10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800da18:	2301      	movs	r3, #1
 800da1a:	e09c      	b.n	800db56 <_printf_i+0x1e6>
 800da1c:	6833      	ldr	r3, [r6, #0]
 800da1e:	6820      	ldr	r0, [r4, #0]
 800da20:	1d19      	adds	r1, r3, #4
 800da22:	6031      	str	r1, [r6, #0]
 800da24:	0606      	lsls	r6, r0, #24
 800da26:	d501      	bpl.n	800da2c <_printf_i+0xbc>
 800da28:	681d      	ldr	r5, [r3, #0]
 800da2a:	e003      	b.n	800da34 <_printf_i+0xc4>
 800da2c:	0645      	lsls	r5, r0, #25
 800da2e:	d5fb      	bpl.n	800da28 <_printf_i+0xb8>
 800da30:	f9b3 5000 	ldrsh.w	r5, [r3]
 800da34:	2d00      	cmp	r5, #0
 800da36:	da03      	bge.n	800da40 <_printf_i+0xd0>
 800da38:	232d      	movs	r3, #45	@ 0x2d
 800da3a:	426d      	negs	r5, r5
 800da3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da40:	4858      	ldr	r0, [pc, #352]	@ (800dba4 <_printf_i+0x234>)
 800da42:	230a      	movs	r3, #10
 800da44:	e011      	b.n	800da6a <_printf_i+0xfa>
 800da46:	6821      	ldr	r1, [r4, #0]
 800da48:	6833      	ldr	r3, [r6, #0]
 800da4a:	0608      	lsls	r0, r1, #24
 800da4c:	f853 5b04 	ldr.w	r5, [r3], #4
 800da50:	d402      	bmi.n	800da58 <_printf_i+0xe8>
 800da52:	0649      	lsls	r1, r1, #25
 800da54:	bf48      	it	mi
 800da56:	b2ad      	uxthmi	r5, r5
 800da58:	2f6f      	cmp	r7, #111	@ 0x6f
 800da5a:	4852      	ldr	r0, [pc, #328]	@ (800dba4 <_printf_i+0x234>)
 800da5c:	6033      	str	r3, [r6, #0]
 800da5e:	bf14      	ite	ne
 800da60:	230a      	movne	r3, #10
 800da62:	2308      	moveq	r3, #8
 800da64:	2100      	movs	r1, #0
 800da66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800da6a:	6866      	ldr	r6, [r4, #4]
 800da6c:	60a6      	str	r6, [r4, #8]
 800da6e:	2e00      	cmp	r6, #0
 800da70:	db05      	blt.n	800da7e <_printf_i+0x10e>
 800da72:	6821      	ldr	r1, [r4, #0]
 800da74:	432e      	orrs	r6, r5
 800da76:	f021 0104 	bic.w	r1, r1, #4
 800da7a:	6021      	str	r1, [r4, #0]
 800da7c:	d04b      	beq.n	800db16 <_printf_i+0x1a6>
 800da7e:	4616      	mov	r6, r2
 800da80:	fbb5 f1f3 	udiv	r1, r5, r3
 800da84:	fb03 5711 	mls	r7, r3, r1, r5
 800da88:	5dc7      	ldrb	r7, [r0, r7]
 800da8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800da8e:	462f      	mov	r7, r5
 800da90:	42bb      	cmp	r3, r7
 800da92:	460d      	mov	r5, r1
 800da94:	d9f4      	bls.n	800da80 <_printf_i+0x110>
 800da96:	2b08      	cmp	r3, #8
 800da98:	d10b      	bne.n	800dab2 <_printf_i+0x142>
 800da9a:	6823      	ldr	r3, [r4, #0]
 800da9c:	07df      	lsls	r7, r3, #31
 800da9e:	d508      	bpl.n	800dab2 <_printf_i+0x142>
 800daa0:	6923      	ldr	r3, [r4, #16]
 800daa2:	6861      	ldr	r1, [r4, #4]
 800daa4:	4299      	cmp	r1, r3
 800daa6:	bfde      	ittt	le
 800daa8:	2330      	movle	r3, #48	@ 0x30
 800daaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800daae:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800dab2:	1b92      	subs	r2, r2, r6
 800dab4:	6122      	str	r2, [r4, #16]
 800dab6:	f8cd a000 	str.w	sl, [sp]
 800daba:	464b      	mov	r3, r9
 800dabc:	aa03      	add	r2, sp, #12
 800dabe:	4621      	mov	r1, r4
 800dac0:	4640      	mov	r0, r8
 800dac2:	f7ff fee7 	bl	800d894 <_printf_common>
 800dac6:	3001      	adds	r0, #1
 800dac8:	d14a      	bne.n	800db60 <_printf_i+0x1f0>
 800daca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dace:	b004      	add	sp, #16
 800dad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dad4:	6823      	ldr	r3, [r4, #0]
 800dad6:	f043 0320 	orr.w	r3, r3, #32
 800dada:	6023      	str	r3, [r4, #0]
 800dadc:	4832      	ldr	r0, [pc, #200]	@ (800dba8 <_printf_i+0x238>)
 800dade:	2778      	movs	r7, #120	@ 0x78
 800dae0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	6831      	ldr	r1, [r6, #0]
 800dae8:	061f      	lsls	r7, r3, #24
 800daea:	f851 5b04 	ldr.w	r5, [r1], #4
 800daee:	d402      	bmi.n	800daf6 <_printf_i+0x186>
 800daf0:	065f      	lsls	r7, r3, #25
 800daf2:	bf48      	it	mi
 800daf4:	b2ad      	uxthmi	r5, r5
 800daf6:	6031      	str	r1, [r6, #0]
 800daf8:	07d9      	lsls	r1, r3, #31
 800dafa:	bf44      	itt	mi
 800dafc:	f043 0320 	orrmi.w	r3, r3, #32
 800db00:	6023      	strmi	r3, [r4, #0]
 800db02:	b11d      	cbz	r5, 800db0c <_printf_i+0x19c>
 800db04:	2310      	movs	r3, #16
 800db06:	e7ad      	b.n	800da64 <_printf_i+0xf4>
 800db08:	4826      	ldr	r0, [pc, #152]	@ (800dba4 <_printf_i+0x234>)
 800db0a:	e7e9      	b.n	800dae0 <_printf_i+0x170>
 800db0c:	6823      	ldr	r3, [r4, #0]
 800db0e:	f023 0320 	bic.w	r3, r3, #32
 800db12:	6023      	str	r3, [r4, #0]
 800db14:	e7f6      	b.n	800db04 <_printf_i+0x194>
 800db16:	4616      	mov	r6, r2
 800db18:	e7bd      	b.n	800da96 <_printf_i+0x126>
 800db1a:	6833      	ldr	r3, [r6, #0]
 800db1c:	6825      	ldr	r5, [r4, #0]
 800db1e:	6961      	ldr	r1, [r4, #20]
 800db20:	1d18      	adds	r0, r3, #4
 800db22:	6030      	str	r0, [r6, #0]
 800db24:	062e      	lsls	r6, r5, #24
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	d501      	bpl.n	800db2e <_printf_i+0x1be>
 800db2a:	6019      	str	r1, [r3, #0]
 800db2c:	e002      	b.n	800db34 <_printf_i+0x1c4>
 800db2e:	0668      	lsls	r0, r5, #25
 800db30:	d5fb      	bpl.n	800db2a <_printf_i+0x1ba>
 800db32:	8019      	strh	r1, [r3, #0]
 800db34:	2300      	movs	r3, #0
 800db36:	6123      	str	r3, [r4, #16]
 800db38:	4616      	mov	r6, r2
 800db3a:	e7bc      	b.n	800dab6 <_printf_i+0x146>
 800db3c:	6833      	ldr	r3, [r6, #0]
 800db3e:	1d1a      	adds	r2, r3, #4
 800db40:	6032      	str	r2, [r6, #0]
 800db42:	681e      	ldr	r6, [r3, #0]
 800db44:	6862      	ldr	r2, [r4, #4]
 800db46:	2100      	movs	r1, #0
 800db48:	4630      	mov	r0, r6
 800db4a:	f7f2 fb49 	bl	80001e0 <memchr>
 800db4e:	b108      	cbz	r0, 800db54 <_printf_i+0x1e4>
 800db50:	1b80      	subs	r0, r0, r6
 800db52:	6060      	str	r0, [r4, #4]
 800db54:	6863      	ldr	r3, [r4, #4]
 800db56:	6123      	str	r3, [r4, #16]
 800db58:	2300      	movs	r3, #0
 800db5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db5e:	e7aa      	b.n	800dab6 <_printf_i+0x146>
 800db60:	6923      	ldr	r3, [r4, #16]
 800db62:	4632      	mov	r2, r6
 800db64:	4649      	mov	r1, r9
 800db66:	4640      	mov	r0, r8
 800db68:	47d0      	blx	sl
 800db6a:	3001      	adds	r0, #1
 800db6c:	d0ad      	beq.n	800daca <_printf_i+0x15a>
 800db6e:	6823      	ldr	r3, [r4, #0]
 800db70:	079b      	lsls	r3, r3, #30
 800db72:	d413      	bmi.n	800db9c <_printf_i+0x22c>
 800db74:	68e0      	ldr	r0, [r4, #12]
 800db76:	9b03      	ldr	r3, [sp, #12]
 800db78:	4298      	cmp	r0, r3
 800db7a:	bfb8      	it	lt
 800db7c:	4618      	movlt	r0, r3
 800db7e:	e7a6      	b.n	800dace <_printf_i+0x15e>
 800db80:	2301      	movs	r3, #1
 800db82:	4632      	mov	r2, r6
 800db84:	4649      	mov	r1, r9
 800db86:	4640      	mov	r0, r8
 800db88:	47d0      	blx	sl
 800db8a:	3001      	adds	r0, #1
 800db8c:	d09d      	beq.n	800daca <_printf_i+0x15a>
 800db8e:	3501      	adds	r5, #1
 800db90:	68e3      	ldr	r3, [r4, #12]
 800db92:	9903      	ldr	r1, [sp, #12]
 800db94:	1a5b      	subs	r3, r3, r1
 800db96:	42ab      	cmp	r3, r5
 800db98:	dcf2      	bgt.n	800db80 <_printf_i+0x210>
 800db9a:	e7eb      	b.n	800db74 <_printf_i+0x204>
 800db9c:	2500      	movs	r5, #0
 800db9e:	f104 0619 	add.w	r6, r4, #25
 800dba2:	e7f5      	b.n	800db90 <_printf_i+0x220>
 800dba4:	08010b88 	.word	0x08010b88
 800dba8:	08010b99 	.word	0x08010b99

0800dbac <std>:
 800dbac:	2300      	movs	r3, #0
 800dbae:	b510      	push	{r4, lr}
 800dbb0:	4604      	mov	r4, r0
 800dbb2:	e9c0 3300 	strd	r3, r3, [r0]
 800dbb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dbba:	6083      	str	r3, [r0, #8]
 800dbbc:	8181      	strh	r1, [r0, #12]
 800dbbe:	6643      	str	r3, [r0, #100]	@ 0x64
 800dbc0:	81c2      	strh	r2, [r0, #14]
 800dbc2:	6183      	str	r3, [r0, #24]
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	2208      	movs	r2, #8
 800dbc8:	305c      	adds	r0, #92	@ 0x5c
 800dbca:	f000 fa35 	bl	800e038 <memset>
 800dbce:	4b0d      	ldr	r3, [pc, #52]	@ (800dc04 <std+0x58>)
 800dbd0:	6263      	str	r3, [r4, #36]	@ 0x24
 800dbd2:	4b0d      	ldr	r3, [pc, #52]	@ (800dc08 <std+0x5c>)
 800dbd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dbd6:	4b0d      	ldr	r3, [pc, #52]	@ (800dc0c <std+0x60>)
 800dbd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dbda:	4b0d      	ldr	r3, [pc, #52]	@ (800dc10 <std+0x64>)
 800dbdc:	6323      	str	r3, [r4, #48]	@ 0x30
 800dbde:	4b0d      	ldr	r3, [pc, #52]	@ (800dc14 <std+0x68>)
 800dbe0:	6224      	str	r4, [r4, #32]
 800dbe2:	429c      	cmp	r4, r3
 800dbe4:	d006      	beq.n	800dbf4 <std+0x48>
 800dbe6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dbea:	4294      	cmp	r4, r2
 800dbec:	d002      	beq.n	800dbf4 <std+0x48>
 800dbee:	33d0      	adds	r3, #208	@ 0xd0
 800dbf0:	429c      	cmp	r4, r3
 800dbf2:	d105      	bne.n	800dc00 <std+0x54>
 800dbf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dbf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbfc:	f000 ba98 	b.w	800e130 <__retarget_lock_init_recursive>
 800dc00:	bd10      	pop	{r4, pc}
 800dc02:	bf00      	nop
 800dc04:	0800de11 	.word	0x0800de11
 800dc08:	0800de33 	.word	0x0800de33
 800dc0c:	0800de6b 	.word	0x0800de6b
 800dc10:	0800de8f 	.word	0x0800de8f
 800dc14:	200024a0 	.word	0x200024a0

0800dc18 <stdio_exit_handler>:
 800dc18:	4a02      	ldr	r2, [pc, #8]	@ (800dc24 <stdio_exit_handler+0xc>)
 800dc1a:	4903      	ldr	r1, [pc, #12]	@ (800dc28 <stdio_exit_handler+0x10>)
 800dc1c:	4803      	ldr	r0, [pc, #12]	@ (800dc2c <stdio_exit_handler+0x14>)
 800dc1e:	f000 b869 	b.w	800dcf4 <_fwalk_sglue>
 800dc22:	bf00      	nop
 800dc24:	2000011c 	.word	0x2000011c
 800dc28:	0800fd39 	.word	0x0800fd39
 800dc2c:	2000012c 	.word	0x2000012c

0800dc30 <cleanup_stdio>:
 800dc30:	6841      	ldr	r1, [r0, #4]
 800dc32:	4b0c      	ldr	r3, [pc, #48]	@ (800dc64 <cleanup_stdio+0x34>)
 800dc34:	4299      	cmp	r1, r3
 800dc36:	b510      	push	{r4, lr}
 800dc38:	4604      	mov	r4, r0
 800dc3a:	d001      	beq.n	800dc40 <cleanup_stdio+0x10>
 800dc3c:	f002 f87c 	bl	800fd38 <_fflush_r>
 800dc40:	68a1      	ldr	r1, [r4, #8]
 800dc42:	4b09      	ldr	r3, [pc, #36]	@ (800dc68 <cleanup_stdio+0x38>)
 800dc44:	4299      	cmp	r1, r3
 800dc46:	d002      	beq.n	800dc4e <cleanup_stdio+0x1e>
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f002 f875 	bl	800fd38 <_fflush_r>
 800dc4e:	68e1      	ldr	r1, [r4, #12]
 800dc50:	4b06      	ldr	r3, [pc, #24]	@ (800dc6c <cleanup_stdio+0x3c>)
 800dc52:	4299      	cmp	r1, r3
 800dc54:	d004      	beq.n	800dc60 <cleanup_stdio+0x30>
 800dc56:	4620      	mov	r0, r4
 800dc58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc5c:	f002 b86c 	b.w	800fd38 <_fflush_r>
 800dc60:	bd10      	pop	{r4, pc}
 800dc62:	bf00      	nop
 800dc64:	200024a0 	.word	0x200024a0
 800dc68:	20002508 	.word	0x20002508
 800dc6c:	20002570 	.word	0x20002570

0800dc70 <global_stdio_init.part.0>:
 800dc70:	b510      	push	{r4, lr}
 800dc72:	4b0b      	ldr	r3, [pc, #44]	@ (800dca0 <global_stdio_init.part.0+0x30>)
 800dc74:	4c0b      	ldr	r4, [pc, #44]	@ (800dca4 <global_stdio_init.part.0+0x34>)
 800dc76:	4a0c      	ldr	r2, [pc, #48]	@ (800dca8 <global_stdio_init.part.0+0x38>)
 800dc78:	601a      	str	r2, [r3, #0]
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	2104      	movs	r1, #4
 800dc80:	f7ff ff94 	bl	800dbac <std>
 800dc84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dc88:	2201      	movs	r2, #1
 800dc8a:	2109      	movs	r1, #9
 800dc8c:	f7ff ff8e 	bl	800dbac <std>
 800dc90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dc94:	2202      	movs	r2, #2
 800dc96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc9a:	2112      	movs	r1, #18
 800dc9c:	f7ff bf86 	b.w	800dbac <std>
 800dca0:	200025d8 	.word	0x200025d8
 800dca4:	200024a0 	.word	0x200024a0
 800dca8:	0800dc19 	.word	0x0800dc19

0800dcac <__sfp_lock_acquire>:
 800dcac:	4801      	ldr	r0, [pc, #4]	@ (800dcb4 <__sfp_lock_acquire+0x8>)
 800dcae:	f000 ba40 	b.w	800e132 <__retarget_lock_acquire_recursive>
 800dcb2:	bf00      	nop
 800dcb4:	200025e1 	.word	0x200025e1

0800dcb8 <__sfp_lock_release>:
 800dcb8:	4801      	ldr	r0, [pc, #4]	@ (800dcc0 <__sfp_lock_release+0x8>)
 800dcba:	f000 ba3b 	b.w	800e134 <__retarget_lock_release_recursive>
 800dcbe:	bf00      	nop
 800dcc0:	200025e1 	.word	0x200025e1

0800dcc4 <__sinit>:
 800dcc4:	b510      	push	{r4, lr}
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	f7ff fff0 	bl	800dcac <__sfp_lock_acquire>
 800dccc:	6a23      	ldr	r3, [r4, #32]
 800dcce:	b11b      	cbz	r3, 800dcd8 <__sinit+0x14>
 800dcd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcd4:	f7ff bff0 	b.w	800dcb8 <__sfp_lock_release>
 800dcd8:	4b04      	ldr	r3, [pc, #16]	@ (800dcec <__sinit+0x28>)
 800dcda:	6223      	str	r3, [r4, #32]
 800dcdc:	4b04      	ldr	r3, [pc, #16]	@ (800dcf0 <__sinit+0x2c>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d1f5      	bne.n	800dcd0 <__sinit+0xc>
 800dce4:	f7ff ffc4 	bl	800dc70 <global_stdio_init.part.0>
 800dce8:	e7f2      	b.n	800dcd0 <__sinit+0xc>
 800dcea:	bf00      	nop
 800dcec:	0800dc31 	.word	0x0800dc31
 800dcf0:	200025d8 	.word	0x200025d8

0800dcf4 <_fwalk_sglue>:
 800dcf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcf8:	4607      	mov	r7, r0
 800dcfa:	4688      	mov	r8, r1
 800dcfc:	4614      	mov	r4, r2
 800dcfe:	2600      	movs	r6, #0
 800dd00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd04:	f1b9 0901 	subs.w	r9, r9, #1
 800dd08:	d505      	bpl.n	800dd16 <_fwalk_sglue+0x22>
 800dd0a:	6824      	ldr	r4, [r4, #0]
 800dd0c:	2c00      	cmp	r4, #0
 800dd0e:	d1f7      	bne.n	800dd00 <_fwalk_sglue+0xc>
 800dd10:	4630      	mov	r0, r6
 800dd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd16:	89ab      	ldrh	r3, [r5, #12]
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d907      	bls.n	800dd2c <_fwalk_sglue+0x38>
 800dd1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd20:	3301      	adds	r3, #1
 800dd22:	d003      	beq.n	800dd2c <_fwalk_sglue+0x38>
 800dd24:	4629      	mov	r1, r5
 800dd26:	4638      	mov	r0, r7
 800dd28:	47c0      	blx	r8
 800dd2a:	4306      	orrs	r6, r0
 800dd2c:	3568      	adds	r5, #104	@ 0x68
 800dd2e:	e7e9      	b.n	800dd04 <_fwalk_sglue+0x10>

0800dd30 <iprintf>:
 800dd30:	b40f      	push	{r0, r1, r2, r3}
 800dd32:	b507      	push	{r0, r1, r2, lr}
 800dd34:	4906      	ldr	r1, [pc, #24]	@ (800dd50 <iprintf+0x20>)
 800dd36:	ab04      	add	r3, sp, #16
 800dd38:	6808      	ldr	r0, [r1, #0]
 800dd3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd3e:	6881      	ldr	r1, [r0, #8]
 800dd40:	9301      	str	r3, [sp, #4]
 800dd42:	f001 fe5d 	bl	800fa00 <_vfiprintf_r>
 800dd46:	b003      	add	sp, #12
 800dd48:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd4c:	b004      	add	sp, #16
 800dd4e:	4770      	bx	lr
 800dd50:	20000128 	.word	0x20000128

0800dd54 <_puts_r>:
 800dd54:	6a03      	ldr	r3, [r0, #32]
 800dd56:	b570      	push	{r4, r5, r6, lr}
 800dd58:	6884      	ldr	r4, [r0, #8]
 800dd5a:	4605      	mov	r5, r0
 800dd5c:	460e      	mov	r6, r1
 800dd5e:	b90b      	cbnz	r3, 800dd64 <_puts_r+0x10>
 800dd60:	f7ff ffb0 	bl	800dcc4 <__sinit>
 800dd64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd66:	07db      	lsls	r3, r3, #31
 800dd68:	d405      	bmi.n	800dd76 <_puts_r+0x22>
 800dd6a:	89a3      	ldrh	r3, [r4, #12]
 800dd6c:	0598      	lsls	r0, r3, #22
 800dd6e:	d402      	bmi.n	800dd76 <_puts_r+0x22>
 800dd70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd72:	f000 f9de 	bl	800e132 <__retarget_lock_acquire_recursive>
 800dd76:	89a3      	ldrh	r3, [r4, #12]
 800dd78:	0719      	lsls	r1, r3, #28
 800dd7a:	d502      	bpl.n	800dd82 <_puts_r+0x2e>
 800dd7c:	6923      	ldr	r3, [r4, #16]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d135      	bne.n	800ddee <_puts_r+0x9a>
 800dd82:	4621      	mov	r1, r4
 800dd84:	4628      	mov	r0, r5
 800dd86:	f000 f901 	bl	800df8c <__swsetup_r>
 800dd8a:	b380      	cbz	r0, 800ddee <_puts_r+0x9a>
 800dd8c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800dd90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd92:	07da      	lsls	r2, r3, #31
 800dd94:	d405      	bmi.n	800dda2 <_puts_r+0x4e>
 800dd96:	89a3      	ldrh	r3, [r4, #12]
 800dd98:	059b      	lsls	r3, r3, #22
 800dd9a:	d402      	bmi.n	800dda2 <_puts_r+0x4e>
 800dd9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd9e:	f000 f9c9 	bl	800e134 <__retarget_lock_release_recursive>
 800dda2:	4628      	mov	r0, r5
 800dda4:	bd70      	pop	{r4, r5, r6, pc}
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	da04      	bge.n	800ddb4 <_puts_r+0x60>
 800ddaa:	69a2      	ldr	r2, [r4, #24]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	dc17      	bgt.n	800dde0 <_puts_r+0x8c>
 800ddb0:	290a      	cmp	r1, #10
 800ddb2:	d015      	beq.n	800dde0 <_puts_r+0x8c>
 800ddb4:	6823      	ldr	r3, [r4, #0]
 800ddb6:	1c5a      	adds	r2, r3, #1
 800ddb8:	6022      	str	r2, [r4, #0]
 800ddba:	7019      	strb	r1, [r3, #0]
 800ddbc:	68a3      	ldr	r3, [r4, #8]
 800ddbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ddc2:	3b01      	subs	r3, #1
 800ddc4:	60a3      	str	r3, [r4, #8]
 800ddc6:	2900      	cmp	r1, #0
 800ddc8:	d1ed      	bne.n	800dda6 <_puts_r+0x52>
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	da11      	bge.n	800ddf2 <_puts_r+0x9e>
 800ddce:	4622      	mov	r2, r4
 800ddd0:	210a      	movs	r1, #10
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	f000 f89c 	bl	800df10 <__swbuf_r>
 800ddd8:	3001      	adds	r0, #1
 800ddda:	d0d7      	beq.n	800dd8c <_puts_r+0x38>
 800dddc:	250a      	movs	r5, #10
 800ddde:	e7d7      	b.n	800dd90 <_puts_r+0x3c>
 800dde0:	4622      	mov	r2, r4
 800dde2:	4628      	mov	r0, r5
 800dde4:	f000 f894 	bl	800df10 <__swbuf_r>
 800dde8:	3001      	adds	r0, #1
 800ddea:	d1e7      	bne.n	800ddbc <_puts_r+0x68>
 800ddec:	e7ce      	b.n	800dd8c <_puts_r+0x38>
 800ddee:	3e01      	subs	r6, #1
 800ddf0:	e7e4      	b.n	800ddbc <_puts_r+0x68>
 800ddf2:	6823      	ldr	r3, [r4, #0]
 800ddf4:	1c5a      	adds	r2, r3, #1
 800ddf6:	6022      	str	r2, [r4, #0]
 800ddf8:	220a      	movs	r2, #10
 800ddfa:	701a      	strb	r2, [r3, #0]
 800ddfc:	e7ee      	b.n	800dddc <_puts_r+0x88>
	...

0800de00 <puts>:
 800de00:	4b02      	ldr	r3, [pc, #8]	@ (800de0c <puts+0xc>)
 800de02:	4601      	mov	r1, r0
 800de04:	6818      	ldr	r0, [r3, #0]
 800de06:	f7ff bfa5 	b.w	800dd54 <_puts_r>
 800de0a:	bf00      	nop
 800de0c:	20000128 	.word	0x20000128

0800de10 <__sread>:
 800de10:	b510      	push	{r4, lr}
 800de12:	460c      	mov	r4, r1
 800de14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de18:	f000 f93c 	bl	800e094 <_read_r>
 800de1c:	2800      	cmp	r0, #0
 800de1e:	bfab      	itete	ge
 800de20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800de22:	89a3      	ldrhlt	r3, [r4, #12]
 800de24:	181b      	addge	r3, r3, r0
 800de26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800de2a:	bfac      	ite	ge
 800de2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800de2e:	81a3      	strhlt	r3, [r4, #12]
 800de30:	bd10      	pop	{r4, pc}

0800de32 <__swrite>:
 800de32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de36:	461f      	mov	r7, r3
 800de38:	898b      	ldrh	r3, [r1, #12]
 800de3a:	05db      	lsls	r3, r3, #23
 800de3c:	4605      	mov	r5, r0
 800de3e:	460c      	mov	r4, r1
 800de40:	4616      	mov	r6, r2
 800de42:	d505      	bpl.n	800de50 <__swrite+0x1e>
 800de44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de48:	2302      	movs	r3, #2
 800de4a:	2200      	movs	r2, #0
 800de4c:	f000 f910 	bl	800e070 <_lseek_r>
 800de50:	89a3      	ldrh	r3, [r4, #12]
 800de52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800de5a:	81a3      	strh	r3, [r4, #12]
 800de5c:	4632      	mov	r2, r6
 800de5e:	463b      	mov	r3, r7
 800de60:	4628      	mov	r0, r5
 800de62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de66:	f000 b927 	b.w	800e0b8 <_write_r>

0800de6a <__sseek>:
 800de6a:	b510      	push	{r4, lr}
 800de6c:	460c      	mov	r4, r1
 800de6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de72:	f000 f8fd 	bl	800e070 <_lseek_r>
 800de76:	1c43      	adds	r3, r0, #1
 800de78:	89a3      	ldrh	r3, [r4, #12]
 800de7a:	bf15      	itete	ne
 800de7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800de7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800de82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800de86:	81a3      	strheq	r3, [r4, #12]
 800de88:	bf18      	it	ne
 800de8a:	81a3      	strhne	r3, [r4, #12]
 800de8c:	bd10      	pop	{r4, pc}

0800de8e <__sclose>:
 800de8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de92:	f000 b8dd 	b.w	800e050 <_close_r>

0800de96 <_vsniprintf_r>:
 800de96:	b530      	push	{r4, r5, lr}
 800de98:	4614      	mov	r4, r2
 800de9a:	2c00      	cmp	r4, #0
 800de9c:	b09b      	sub	sp, #108	@ 0x6c
 800de9e:	4605      	mov	r5, r0
 800dea0:	461a      	mov	r2, r3
 800dea2:	da05      	bge.n	800deb0 <_vsniprintf_r+0x1a>
 800dea4:	238b      	movs	r3, #139	@ 0x8b
 800dea6:	6003      	str	r3, [r0, #0]
 800dea8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800deac:	b01b      	add	sp, #108	@ 0x6c
 800deae:	bd30      	pop	{r4, r5, pc}
 800deb0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800deb4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800deb8:	f04f 0300 	mov.w	r3, #0
 800debc:	9319      	str	r3, [sp, #100]	@ 0x64
 800debe:	bf14      	ite	ne
 800dec0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800dec4:	4623      	moveq	r3, r4
 800dec6:	9302      	str	r3, [sp, #8]
 800dec8:	9305      	str	r3, [sp, #20]
 800deca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dece:	9100      	str	r1, [sp, #0]
 800ded0:	9104      	str	r1, [sp, #16]
 800ded2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ded6:	4669      	mov	r1, sp
 800ded8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800deda:	f001 fc6b 	bl	800f7b4 <_svfiprintf_r>
 800dede:	1c43      	adds	r3, r0, #1
 800dee0:	bfbc      	itt	lt
 800dee2:	238b      	movlt	r3, #139	@ 0x8b
 800dee4:	602b      	strlt	r3, [r5, #0]
 800dee6:	2c00      	cmp	r4, #0
 800dee8:	d0e0      	beq.n	800deac <_vsniprintf_r+0x16>
 800deea:	9b00      	ldr	r3, [sp, #0]
 800deec:	2200      	movs	r2, #0
 800deee:	701a      	strb	r2, [r3, #0]
 800def0:	e7dc      	b.n	800deac <_vsniprintf_r+0x16>
	...

0800def4 <vsniprintf>:
 800def4:	b507      	push	{r0, r1, r2, lr}
 800def6:	9300      	str	r3, [sp, #0]
 800def8:	4613      	mov	r3, r2
 800defa:	460a      	mov	r2, r1
 800defc:	4601      	mov	r1, r0
 800defe:	4803      	ldr	r0, [pc, #12]	@ (800df0c <vsniprintf+0x18>)
 800df00:	6800      	ldr	r0, [r0, #0]
 800df02:	f7ff ffc8 	bl	800de96 <_vsniprintf_r>
 800df06:	b003      	add	sp, #12
 800df08:	f85d fb04 	ldr.w	pc, [sp], #4
 800df0c:	20000128 	.word	0x20000128

0800df10 <__swbuf_r>:
 800df10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df12:	460e      	mov	r6, r1
 800df14:	4614      	mov	r4, r2
 800df16:	4605      	mov	r5, r0
 800df18:	b118      	cbz	r0, 800df22 <__swbuf_r+0x12>
 800df1a:	6a03      	ldr	r3, [r0, #32]
 800df1c:	b90b      	cbnz	r3, 800df22 <__swbuf_r+0x12>
 800df1e:	f7ff fed1 	bl	800dcc4 <__sinit>
 800df22:	69a3      	ldr	r3, [r4, #24]
 800df24:	60a3      	str	r3, [r4, #8]
 800df26:	89a3      	ldrh	r3, [r4, #12]
 800df28:	071a      	lsls	r2, r3, #28
 800df2a:	d501      	bpl.n	800df30 <__swbuf_r+0x20>
 800df2c:	6923      	ldr	r3, [r4, #16]
 800df2e:	b943      	cbnz	r3, 800df42 <__swbuf_r+0x32>
 800df30:	4621      	mov	r1, r4
 800df32:	4628      	mov	r0, r5
 800df34:	f000 f82a 	bl	800df8c <__swsetup_r>
 800df38:	b118      	cbz	r0, 800df42 <__swbuf_r+0x32>
 800df3a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800df3e:	4638      	mov	r0, r7
 800df40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df42:	6823      	ldr	r3, [r4, #0]
 800df44:	6922      	ldr	r2, [r4, #16]
 800df46:	1a98      	subs	r0, r3, r2
 800df48:	6963      	ldr	r3, [r4, #20]
 800df4a:	b2f6      	uxtb	r6, r6
 800df4c:	4283      	cmp	r3, r0
 800df4e:	4637      	mov	r7, r6
 800df50:	dc05      	bgt.n	800df5e <__swbuf_r+0x4e>
 800df52:	4621      	mov	r1, r4
 800df54:	4628      	mov	r0, r5
 800df56:	f001 feef 	bl	800fd38 <_fflush_r>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	d1ed      	bne.n	800df3a <__swbuf_r+0x2a>
 800df5e:	68a3      	ldr	r3, [r4, #8]
 800df60:	3b01      	subs	r3, #1
 800df62:	60a3      	str	r3, [r4, #8]
 800df64:	6823      	ldr	r3, [r4, #0]
 800df66:	1c5a      	adds	r2, r3, #1
 800df68:	6022      	str	r2, [r4, #0]
 800df6a:	701e      	strb	r6, [r3, #0]
 800df6c:	6962      	ldr	r2, [r4, #20]
 800df6e:	1c43      	adds	r3, r0, #1
 800df70:	429a      	cmp	r2, r3
 800df72:	d004      	beq.n	800df7e <__swbuf_r+0x6e>
 800df74:	89a3      	ldrh	r3, [r4, #12]
 800df76:	07db      	lsls	r3, r3, #31
 800df78:	d5e1      	bpl.n	800df3e <__swbuf_r+0x2e>
 800df7a:	2e0a      	cmp	r6, #10
 800df7c:	d1df      	bne.n	800df3e <__swbuf_r+0x2e>
 800df7e:	4621      	mov	r1, r4
 800df80:	4628      	mov	r0, r5
 800df82:	f001 fed9 	bl	800fd38 <_fflush_r>
 800df86:	2800      	cmp	r0, #0
 800df88:	d0d9      	beq.n	800df3e <__swbuf_r+0x2e>
 800df8a:	e7d6      	b.n	800df3a <__swbuf_r+0x2a>

0800df8c <__swsetup_r>:
 800df8c:	b538      	push	{r3, r4, r5, lr}
 800df8e:	4b29      	ldr	r3, [pc, #164]	@ (800e034 <__swsetup_r+0xa8>)
 800df90:	4605      	mov	r5, r0
 800df92:	6818      	ldr	r0, [r3, #0]
 800df94:	460c      	mov	r4, r1
 800df96:	b118      	cbz	r0, 800dfa0 <__swsetup_r+0x14>
 800df98:	6a03      	ldr	r3, [r0, #32]
 800df9a:	b90b      	cbnz	r3, 800dfa0 <__swsetup_r+0x14>
 800df9c:	f7ff fe92 	bl	800dcc4 <__sinit>
 800dfa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfa4:	0719      	lsls	r1, r3, #28
 800dfa6:	d422      	bmi.n	800dfee <__swsetup_r+0x62>
 800dfa8:	06da      	lsls	r2, r3, #27
 800dfaa:	d407      	bmi.n	800dfbc <__swsetup_r+0x30>
 800dfac:	2209      	movs	r2, #9
 800dfae:	602a      	str	r2, [r5, #0]
 800dfb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfb4:	81a3      	strh	r3, [r4, #12]
 800dfb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dfba:	e033      	b.n	800e024 <__swsetup_r+0x98>
 800dfbc:	0758      	lsls	r0, r3, #29
 800dfbe:	d512      	bpl.n	800dfe6 <__swsetup_r+0x5a>
 800dfc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dfc2:	b141      	cbz	r1, 800dfd6 <__swsetup_r+0x4a>
 800dfc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dfc8:	4299      	cmp	r1, r3
 800dfca:	d002      	beq.n	800dfd2 <__swsetup_r+0x46>
 800dfcc:	4628      	mov	r0, r5
 800dfce:	f000 ff1b 	bl	800ee08 <_free_r>
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	6363      	str	r3, [r4, #52]	@ 0x34
 800dfd6:	89a3      	ldrh	r3, [r4, #12]
 800dfd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dfdc:	81a3      	strh	r3, [r4, #12]
 800dfde:	2300      	movs	r3, #0
 800dfe0:	6063      	str	r3, [r4, #4]
 800dfe2:	6923      	ldr	r3, [r4, #16]
 800dfe4:	6023      	str	r3, [r4, #0]
 800dfe6:	89a3      	ldrh	r3, [r4, #12]
 800dfe8:	f043 0308 	orr.w	r3, r3, #8
 800dfec:	81a3      	strh	r3, [r4, #12]
 800dfee:	6923      	ldr	r3, [r4, #16]
 800dff0:	b94b      	cbnz	r3, 800e006 <__swsetup_r+0x7a>
 800dff2:	89a3      	ldrh	r3, [r4, #12]
 800dff4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dffc:	d003      	beq.n	800e006 <__swsetup_r+0x7a>
 800dffe:	4621      	mov	r1, r4
 800e000:	4628      	mov	r0, r5
 800e002:	f001 fee7 	bl	800fdd4 <__smakebuf_r>
 800e006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e00a:	f013 0201 	ands.w	r2, r3, #1
 800e00e:	d00a      	beq.n	800e026 <__swsetup_r+0x9a>
 800e010:	2200      	movs	r2, #0
 800e012:	60a2      	str	r2, [r4, #8]
 800e014:	6962      	ldr	r2, [r4, #20]
 800e016:	4252      	negs	r2, r2
 800e018:	61a2      	str	r2, [r4, #24]
 800e01a:	6922      	ldr	r2, [r4, #16]
 800e01c:	b942      	cbnz	r2, 800e030 <__swsetup_r+0xa4>
 800e01e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e022:	d1c5      	bne.n	800dfb0 <__swsetup_r+0x24>
 800e024:	bd38      	pop	{r3, r4, r5, pc}
 800e026:	0799      	lsls	r1, r3, #30
 800e028:	bf58      	it	pl
 800e02a:	6962      	ldrpl	r2, [r4, #20]
 800e02c:	60a2      	str	r2, [r4, #8]
 800e02e:	e7f4      	b.n	800e01a <__swsetup_r+0x8e>
 800e030:	2000      	movs	r0, #0
 800e032:	e7f7      	b.n	800e024 <__swsetup_r+0x98>
 800e034:	20000128 	.word	0x20000128

0800e038 <memset>:
 800e038:	4402      	add	r2, r0
 800e03a:	4603      	mov	r3, r0
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d100      	bne.n	800e042 <memset+0xa>
 800e040:	4770      	bx	lr
 800e042:	f803 1b01 	strb.w	r1, [r3], #1
 800e046:	e7f9      	b.n	800e03c <memset+0x4>

0800e048 <_localeconv_r>:
 800e048:	4800      	ldr	r0, [pc, #0]	@ (800e04c <_localeconv_r+0x4>)
 800e04a:	4770      	bx	lr
 800e04c:	20000268 	.word	0x20000268

0800e050 <_close_r>:
 800e050:	b538      	push	{r3, r4, r5, lr}
 800e052:	4d06      	ldr	r5, [pc, #24]	@ (800e06c <_close_r+0x1c>)
 800e054:	2300      	movs	r3, #0
 800e056:	4604      	mov	r4, r0
 800e058:	4608      	mov	r0, r1
 800e05a:	602b      	str	r3, [r5, #0]
 800e05c:	f7f4 fc92 	bl	8002984 <_close>
 800e060:	1c43      	adds	r3, r0, #1
 800e062:	d102      	bne.n	800e06a <_close_r+0x1a>
 800e064:	682b      	ldr	r3, [r5, #0]
 800e066:	b103      	cbz	r3, 800e06a <_close_r+0x1a>
 800e068:	6023      	str	r3, [r4, #0]
 800e06a:	bd38      	pop	{r3, r4, r5, pc}
 800e06c:	200025dc 	.word	0x200025dc

0800e070 <_lseek_r>:
 800e070:	b538      	push	{r3, r4, r5, lr}
 800e072:	4d07      	ldr	r5, [pc, #28]	@ (800e090 <_lseek_r+0x20>)
 800e074:	4604      	mov	r4, r0
 800e076:	4608      	mov	r0, r1
 800e078:	4611      	mov	r1, r2
 800e07a:	2200      	movs	r2, #0
 800e07c:	602a      	str	r2, [r5, #0]
 800e07e:	461a      	mov	r2, r3
 800e080:	f7f4 fca7 	bl	80029d2 <_lseek>
 800e084:	1c43      	adds	r3, r0, #1
 800e086:	d102      	bne.n	800e08e <_lseek_r+0x1e>
 800e088:	682b      	ldr	r3, [r5, #0]
 800e08a:	b103      	cbz	r3, 800e08e <_lseek_r+0x1e>
 800e08c:	6023      	str	r3, [r4, #0]
 800e08e:	bd38      	pop	{r3, r4, r5, pc}
 800e090:	200025dc 	.word	0x200025dc

0800e094 <_read_r>:
 800e094:	b538      	push	{r3, r4, r5, lr}
 800e096:	4d07      	ldr	r5, [pc, #28]	@ (800e0b4 <_read_r+0x20>)
 800e098:	4604      	mov	r4, r0
 800e09a:	4608      	mov	r0, r1
 800e09c:	4611      	mov	r1, r2
 800e09e:	2200      	movs	r2, #0
 800e0a0:	602a      	str	r2, [r5, #0]
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	f7f4 fc35 	bl	8002912 <_read>
 800e0a8:	1c43      	adds	r3, r0, #1
 800e0aa:	d102      	bne.n	800e0b2 <_read_r+0x1e>
 800e0ac:	682b      	ldr	r3, [r5, #0]
 800e0ae:	b103      	cbz	r3, 800e0b2 <_read_r+0x1e>
 800e0b0:	6023      	str	r3, [r4, #0]
 800e0b2:	bd38      	pop	{r3, r4, r5, pc}
 800e0b4:	200025dc 	.word	0x200025dc

0800e0b8 <_write_r>:
 800e0b8:	b538      	push	{r3, r4, r5, lr}
 800e0ba:	4d07      	ldr	r5, [pc, #28]	@ (800e0d8 <_write_r+0x20>)
 800e0bc:	4604      	mov	r4, r0
 800e0be:	4608      	mov	r0, r1
 800e0c0:	4611      	mov	r1, r2
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	602a      	str	r2, [r5, #0]
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	f7f4 fc40 	bl	800294c <_write>
 800e0cc:	1c43      	adds	r3, r0, #1
 800e0ce:	d102      	bne.n	800e0d6 <_write_r+0x1e>
 800e0d0:	682b      	ldr	r3, [r5, #0]
 800e0d2:	b103      	cbz	r3, 800e0d6 <_write_r+0x1e>
 800e0d4:	6023      	str	r3, [r4, #0]
 800e0d6:	bd38      	pop	{r3, r4, r5, pc}
 800e0d8:	200025dc 	.word	0x200025dc

0800e0dc <__errno>:
 800e0dc:	4b01      	ldr	r3, [pc, #4]	@ (800e0e4 <__errno+0x8>)
 800e0de:	6818      	ldr	r0, [r3, #0]
 800e0e0:	4770      	bx	lr
 800e0e2:	bf00      	nop
 800e0e4:	20000128 	.word	0x20000128

0800e0e8 <__libc_init_array>:
 800e0e8:	b570      	push	{r4, r5, r6, lr}
 800e0ea:	4d0d      	ldr	r5, [pc, #52]	@ (800e120 <__libc_init_array+0x38>)
 800e0ec:	4c0d      	ldr	r4, [pc, #52]	@ (800e124 <__libc_init_array+0x3c>)
 800e0ee:	1b64      	subs	r4, r4, r5
 800e0f0:	10a4      	asrs	r4, r4, #2
 800e0f2:	2600      	movs	r6, #0
 800e0f4:	42a6      	cmp	r6, r4
 800e0f6:	d109      	bne.n	800e10c <__libc_init_array+0x24>
 800e0f8:	4d0b      	ldr	r5, [pc, #44]	@ (800e128 <__libc_init_array+0x40>)
 800e0fa:	4c0c      	ldr	r4, [pc, #48]	@ (800e12c <__libc_init_array+0x44>)
 800e0fc:	f001 ffd8 	bl	80100b0 <_init>
 800e100:	1b64      	subs	r4, r4, r5
 800e102:	10a4      	asrs	r4, r4, #2
 800e104:	2600      	movs	r6, #0
 800e106:	42a6      	cmp	r6, r4
 800e108:	d105      	bne.n	800e116 <__libc_init_array+0x2e>
 800e10a:	bd70      	pop	{r4, r5, r6, pc}
 800e10c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e110:	4798      	blx	r3
 800e112:	3601      	adds	r6, #1
 800e114:	e7ee      	b.n	800e0f4 <__libc_init_array+0xc>
 800e116:	f855 3b04 	ldr.w	r3, [r5], #4
 800e11a:	4798      	blx	r3
 800e11c:	3601      	adds	r6, #1
 800e11e:	e7f2      	b.n	800e106 <__libc_init_array+0x1e>
 800e120:	08010ef4 	.word	0x08010ef4
 800e124:	08010ef4 	.word	0x08010ef4
 800e128:	08010ef4 	.word	0x08010ef4
 800e12c:	08010ef8 	.word	0x08010ef8

0800e130 <__retarget_lock_init_recursive>:
 800e130:	4770      	bx	lr

0800e132 <__retarget_lock_acquire_recursive>:
 800e132:	4770      	bx	lr

0800e134 <__retarget_lock_release_recursive>:
 800e134:	4770      	bx	lr

0800e136 <memcpy>:
 800e136:	440a      	add	r2, r1
 800e138:	4291      	cmp	r1, r2
 800e13a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e13e:	d100      	bne.n	800e142 <memcpy+0xc>
 800e140:	4770      	bx	lr
 800e142:	b510      	push	{r4, lr}
 800e144:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e148:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e14c:	4291      	cmp	r1, r2
 800e14e:	d1f9      	bne.n	800e144 <memcpy+0xe>
 800e150:	bd10      	pop	{r4, pc}

0800e152 <quorem>:
 800e152:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e156:	6903      	ldr	r3, [r0, #16]
 800e158:	690c      	ldr	r4, [r1, #16]
 800e15a:	42a3      	cmp	r3, r4
 800e15c:	4607      	mov	r7, r0
 800e15e:	db7e      	blt.n	800e25e <quorem+0x10c>
 800e160:	3c01      	subs	r4, #1
 800e162:	f101 0814 	add.w	r8, r1, #20
 800e166:	00a3      	lsls	r3, r4, #2
 800e168:	f100 0514 	add.w	r5, r0, #20
 800e16c:	9300      	str	r3, [sp, #0]
 800e16e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e172:	9301      	str	r3, [sp, #4]
 800e174:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e178:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e17c:	3301      	adds	r3, #1
 800e17e:	429a      	cmp	r2, r3
 800e180:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e184:	fbb2 f6f3 	udiv	r6, r2, r3
 800e188:	d32e      	bcc.n	800e1e8 <quorem+0x96>
 800e18a:	f04f 0a00 	mov.w	sl, #0
 800e18e:	46c4      	mov	ip, r8
 800e190:	46ae      	mov	lr, r5
 800e192:	46d3      	mov	fp, sl
 800e194:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e198:	b298      	uxth	r0, r3
 800e19a:	fb06 a000 	mla	r0, r6, r0, sl
 800e19e:	0c02      	lsrs	r2, r0, #16
 800e1a0:	0c1b      	lsrs	r3, r3, #16
 800e1a2:	fb06 2303 	mla	r3, r6, r3, r2
 800e1a6:	f8de 2000 	ldr.w	r2, [lr]
 800e1aa:	b280      	uxth	r0, r0
 800e1ac:	b292      	uxth	r2, r2
 800e1ae:	1a12      	subs	r2, r2, r0
 800e1b0:	445a      	add	r2, fp
 800e1b2:	f8de 0000 	ldr.w	r0, [lr]
 800e1b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e1c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e1c4:	b292      	uxth	r2, r2
 800e1c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e1ca:	45e1      	cmp	r9, ip
 800e1cc:	f84e 2b04 	str.w	r2, [lr], #4
 800e1d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e1d4:	d2de      	bcs.n	800e194 <quorem+0x42>
 800e1d6:	9b00      	ldr	r3, [sp, #0]
 800e1d8:	58eb      	ldr	r3, [r5, r3]
 800e1da:	b92b      	cbnz	r3, 800e1e8 <quorem+0x96>
 800e1dc:	9b01      	ldr	r3, [sp, #4]
 800e1de:	3b04      	subs	r3, #4
 800e1e0:	429d      	cmp	r5, r3
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	d32f      	bcc.n	800e246 <quorem+0xf4>
 800e1e6:	613c      	str	r4, [r7, #16]
 800e1e8:	4638      	mov	r0, r7
 800e1ea:	f001 f97f 	bl	800f4ec <__mcmp>
 800e1ee:	2800      	cmp	r0, #0
 800e1f0:	db25      	blt.n	800e23e <quorem+0xec>
 800e1f2:	4629      	mov	r1, r5
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	f858 2b04 	ldr.w	r2, [r8], #4
 800e1fa:	f8d1 c000 	ldr.w	ip, [r1]
 800e1fe:	fa1f fe82 	uxth.w	lr, r2
 800e202:	fa1f f38c 	uxth.w	r3, ip
 800e206:	eba3 030e 	sub.w	r3, r3, lr
 800e20a:	4403      	add	r3, r0
 800e20c:	0c12      	lsrs	r2, r2, #16
 800e20e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e212:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e216:	b29b      	uxth	r3, r3
 800e218:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e21c:	45c1      	cmp	r9, r8
 800e21e:	f841 3b04 	str.w	r3, [r1], #4
 800e222:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e226:	d2e6      	bcs.n	800e1f6 <quorem+0xa4>
 800e228:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e22c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e230:	b922      	cbnz	r2, 800e23c <quorem+0xea>
 800e232:	3b04      	subs	r3, #4
 800e234:	429d      	cmp	r5, r3
 800e236:	461a      	mov	r2, r3
 800e238:	d30b      	bcc.n	800e252 <quorem+0x100>
 800e23a:	613c      	str	r4, [r7, #16]
 800e23c:	3601      	adds	r6, #1
 800e23e:	4630      	mov	r0, r6
 800e240:	b003      	add	sp, #12
 800e242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e246:	6812      	ldr	r2, [r2, #0]
 800e248:	3b04      	subs	r3, #4
 800e24a:	2a00      	cmp	r2, #0
 800e24c:	d1cb      	bne.n	800e1e6 <quorem+0x94>
 800e24e:	3c01      	subs	r4, #1
 800e250:	e7c6      	b.n	800e1e0 <quorem+0x8e>
 800e252:	6812      	ldr	r2, [r2, #0]
 800e254:	3b04      	subs	r3, #4
 800e256:	2a00      	cmp	r2, #0
 800e258:	d1ef      	bne.n	800e23a <quorem+0xe8>
 800e25a:	3c01      	subs	r4, #1
 800e25c:	e7ea      	b.n	800e234 <quorem+0xe2>
 800e25e:	2000      	movs	r0, #0
 800e260:	e7ee      	b.n	800e240 <quorem+0xee>
 800e262:	0000      	movs	r0, r0
 800e264:	0000      	movs	r0, r0
	...

0800e268 <_dtoa_r>:
 800e268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e26c:	69c7      	ldr	r7, [r0, #28]
 800e26e:	b097      	sub	sp, #92	@ 0x5c
 800e270:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e274:	ec55 4b10 	vmov	r4, r5, d0
 800e278:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e27a:	9107      	str	r1, [sp, #28]
 800e27c:	4681      	mov	r9, r0
 800e27e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e280:	9311      	str	r3, [sp, #68]	@ 0x44
 800e282:	b97f      	cbnz	r7, 800e2a4 <_dtoa_r+0x3c>
 800e284:	2010      	movs	r0, #16
 800e286:	f000 fe09 	bl	800ee9c <malloc>
 800e28a:	4602      	mov	r2, r0
 800e28c:	f8c9 001c 	str.w	r0, [r9, #28]
 800e290:	b920      	cbnz	r0, 800e29c <_dtoa_r+0x34>
 800e292:	4ba9      	ldr	r3, [pc, #676]	@ (800e538 <_dtoa_r+0x2d0>)
 800e294:	21ef      	movs	r1, #239	@ 0xef
 800e296:	48a9      	ldr	r0, [pc, #676]	@ (800e53c <_dtoa_r+0x2d4>)
 800e298:	f001 fe24 	bl	800fee4 <__assert_func>
 800e29c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e2a0:	6007      	str	r7, [r0, #0]
 800e2a2:	60c7      	str	r7, [r0, #12]
 800e2a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e2a8:	6819      	ldr	r1, [r3, #0]
 800e2aa:	b159      	cbz	r1, 800e2c4 <_dtoa_r+0x5c>
 800e2ac:	685a      	ldr	r2, [r3, #4]
 800e2ae:	604a      	str	r2, [r1, #4]
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	4093      	lsls	r3, r2
 800e2b4:	608b      	str	r3, [r1, #8]
 800e2b6:	4648      	mov	r0, r9
 800e2b8:	f000 fee6 	bl	800f088 <_Bfree>
 800e2bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	601a      	str	r2, [r3, #0]
 800e2c4:	1e2b      	subs	r3, r5, #0
 800e2c6:	bfb9      	ittee	lt
 800e2c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e2cc:	9305      	strlt	r3, [sp, #20]
 800e2ce:	2300      	movge	r3, #0
 800e2d0:	6033      	strge	r3, [r6, #0]
 800e2d2:	9f05      	ldr	r7, [sp, #20]
 800e2d4:	4b9a      	ldr	r3, [pc, #616]	@ (800e540 <_dtoa_r+0x2d8>)
 800e2d6:	bfbc      	itt	lt
 800e2d8:	2201      	movlt	r2, #1
 800e2da:	6032      	strlt	r2, [r6, #0]
 800e2dc:	43bb      	bics	r3, r7
 800e2de:	d112      	bne.n	800e306 <_dtoa_r+0x9e>
 800e2e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e2e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e2e6:	6013      	str	r3, [r2, #0]
 800e2e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e2ec:	4323      	orrs	r3, r4
 800e2ee:	f000 855a 	beq.w	800eda6 <_dtoa_r+0xb3e>
 800e2f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e2f4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e554 <_dtoa_r+0x2ec>
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	f000 855c 	beq.w	800edb6 <_dtoa_r+0xb4e>
 800e2fe:	f10a 0303 	add.w	r3, sl, #3
 800e302:	f000 bd56 	b.w	800edb2 <_dtoa_r+0xb4a>
 800e306:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e30a:	2200      	movs	r2, #0
 800e30c:	ec51 0b17 	vmov	r0, r1, d7
 800e310:	2300      	movs	r3, #0
 800e312:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e316:	f7f2 fbdf 	bl	8000ad8 <__aeabi_dcmpeq>
 800e31a:	4680      	mov	r8, r0
 800e31c:	b158      	cbz	r0, 800e336 <_dtoa_r+0xce>
 800e31e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e320:	2301      	movs	r3, #1
 800e322:	6013      	str	r3, [r2, #0]
 800e324:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e326:	b113      	cbz	r3, 800e32e <_dtoa_r+0xc6>
 800e328:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e32a:	4b86      	ldr	r3, [pc, #536]	@ (800e544 <_dtoa_r+0x2dc>)
 800e32c:	6013      	str	r3, [r2, #0]
 800e32e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e558 <_dtoa_r+0x2f0>
 800e332:	f000 bd40 	b.w	800edb6 <_dtoa_r+0xb4e>
 800e336:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e33a:	aa14      	add	r2, sp, #80	@ 0x50
 800e33c:	a915      	add	r1, sp, #84	@ 0x54
 800e33e:	4648      	mov	r0, r9
 800e340:	f001 f984 	bl	800f64c <__d2b>
 800e344:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e348:	9002      	str	r0, [sp, #8]
 800e34a:	2e00      	cmp	r6, #0
 800e34c:	d078      	beq.n	800e440 <_dtoa_r+0x1d8>
 800e34e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e350:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e358:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e35c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e360:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e364:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e368:	4619      	mov	r1, r3
 800e36a:	2200      	movs	r2, #0
 800e36c:	4b76      	ldr	r3, [pc, #472]	@ (800e548 <_dtoa_r+0x2e0>)
 800e36e:	f7f1 ff93 	bl	8000298 <__aeabi_dsub>
 800e372:	a36b      	add	r3, pc, #428	@ (adr r3, 800e520 <_dtoa_r+0x2b8>)
 800e374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e378:	f7f2 f946 	bl	8000608 <__aeabi_dmul>
 800e37c:	a36a      	add	r3, pc, #424	@ (adr r3, 800e528 <_dtoa_r+0x2c0>)
 800e37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e382:	f7f1 ff8b 	bl	800029c <__adddf3>
 800e386:	4604      	mov	r4, r0
 800e388:	4630      	mov	r0, r6
 800e38a:	460d      	mov	r5, r1
 800e38c:	f7f2 f8d2 	bl	8000534 <__aeabi_i2d>
 800e390:	a367      	add	r3, pc, #412	@ (adr r3, 800e530 <_dtoa_r+0x2c8>)
 800e392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e396:	f7f2 f937 	bl	8000608 <__aeabi_dmul>
 800e39a:	4602      	mov	r2, r0
 800e39c:	460b      	mov	r3, r1
 800e39e:	4620      	mov	r0, r4
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	f7f1 ff7b 	bl	800029c <__adddf3>
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	460d      	mov	r5, r1
 800e3aa:	f7f2 fbdd 	bl	8000b68 <__aeabi_d2iz>
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	4607      	mov	r7, r0
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	4629      	mov	r1, r5
 800e3b8:	f7f2 fb98 	bl	8000aec <__aeabi_dcmplt>
 800e3bc:	b140      	cbz	r0, 800e3d0 <_dtoa_r+0x168>
 800e3be:	4638      	mov	r0, r7
 800e3c0:	f7f2 f8b8 	bl	8000534 <__aeabi_i2d>
 800e3c4:	4622      	mov	r2, r4
 800e3c6:	462b      	mov	r3, r5
 800e3c8:	f7f2 fb86 	bl	8000ad8 <__aeabi_dcmpeq>
 800e3cc:	b900      	cbnz	r0, 800e3d0 <_dtoa_r+0x168>
 800e3ce:	3f01      	subs	r7, #1
 800e3d0:	2f16      	cmp	r7, #22
 800e3d2:	d852      	bhi.n	800e47a <_dtoa_r+0x212>
 800e3d4:	4b5d      	ldr	r3, [pc, #372]	@ (800e54c <_dtoa_r+0x2e4>)
 800e3d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e3e2:	f7f2 fb83 	bl	8000aec <__aeabi_dcmplt>
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	d049      	beq.n	800e47e <_dtoa_r+0x216>
 800e3ea:	3f01      	subs	r7, #1
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800e3f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e3f2:	1b9b      	subs	r3, r3, r6
 800e3f4:	1e5a      	subs	r2, r3, #1
 800e3f6:	bf45      	ittet	mi
 800e3f8:	f1c3 0301 	rsbmi	r3, r3, #1
 800e3fc:	9300      	strmi	r3, [sp, #0]
 800e3fe:	2300      	movpl	r3, #0
 800e400:	2300      	movmi	r3, #0
 800e402:	9206      	str	r2, [sp, #24]
 800e404:	bf54      	ite	pl
 800e406:	9300      	strpl	r3, [sp, #0]
 800e408:	9306      	strmi	r3, [sp, #24]
 800e40a:	2f00      	cmp	r7, #0
 800e40c:	db39      	blt.n	800e482 <_dtoa_r+0x21a>
 800e40e:	9b06      	ldr	r3, [sp, #24]
 800e410:	970d      	str	r7, [sp, #52]	@ 0x34
 800e412:	443b      	add	r3, r7
 800e414:	9306      	str	r3, [sp, #24]
 800e416:	2300      	movs	r3, #0
 800e418:	9308      	str	r3, [sp, #32]
 800e41a:	9b07      	ldr	r3, [sp, #28]
 800e41c:	2b09      	cmp	r3, #9
 800e41e:	d863      	bhi.n	800e4e8 <_dtoa_r+0x280>
 800e420:	2b05      	cmp	r3, #5
 800e422:	bfc4      	itt	gt
 800e424:	3b04      	subgt	r3, #4
 800e426:	9307      	strgt	r3, [sp, #28]
 800e428:	9b07      	ldr	r3, [sp, #28]
 800e42a:	f1a3 0302 	sub.w	r3, r3, #2
 800e42e:	bfcc      	ite	gt
 800e430:	2400      	movgt	r4, #0
 800e432:	2401      	movle	r4, #1
 800e434:	2b03      	cmp	r3, #3
 800e436:	d863      	bhi.n	800e500 <_dtoa_r+0x298>
 800e438:	e8df f003 	tbb	[pc, r3]
 800e43c:	2b375452 	.word	0x2b375452
 800e440:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e444:	441e      	add	r6, r3
 800e446:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e44a:	2b20      	cmp	r3, #32
 800e44c:	bfc1      	itttt	gt
 800e44e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e452:	409f      	lslgt	r7, r3
 800e454:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e458:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e45c:	bfd6      	itet	le
 800e45e:	f1c3 0320 	rsble	r3, r3, #32
 800e462:	ea47 0003 	orrgt.w	r0, r7, r3
 800e466:	fa04 f003 	lslle.w	r0, r4, r3
 800e46a:	f7f2 f853 	bl	8000514 <__aeabi_ui2d>
 800e46e:	2201      	movs	r2, #1
 800e470:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e474:	3e01      	subs	r6, #1
 800e476:	9212      	str	r2, [sp, #72]	@ 0x48
 800e478:	e776      	b.n	800e368 <_dtoa_r+0x100>
 800e47a:	2301      	movs	r3, #1
 800e47c:	e7b7      	b.n	800e3ee <_dtoa_r+0x186>
 800e47e:	9010      	str	r0, [sp, #64]	@ 0x40
 800e480:	e7b6      	b.n	800e3f0 <_dtoa_r+0x188>
 800e482:	9b00      	ldr	r3, [sp, #0]
 800e484:	1bdb      	subs	r3, r3, r7
 800e486:	9300      	str	r3, [sp, #0]
 800e488:	427b      	negs	r3, r7
 800e48a:	9308      	str	r3, [sp, #32]
 800e48c:	2300      	movs	r3, #0
 800e48e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e490:	e7c3      	b.n	800e41a <_dtoa_r+0x1b2>
 800e492:	2301      	movs	r3, #1
 800e494:	9309      	str	r3, [sp, #36]	@ 0x24
 800e496:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e498:	eb07 0b03 	add.w	fp, r7, r3
 800e49c:	f10b 0301 	add.w	r3, fp, #1
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	9303      	str	r3, [sp, #12]
 800e4a4:	bfb8      	it	lt
 800e4a6:	2301      	movlt	r3, #1
 800e4a8:	e006      	b.n	800e4b8 <_dtoa_r+0x250>
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	dd28      	ble.n	800e506 <_dtoa_r+0x29e>
 800e4b4:	469b      	mov	fp, r3
 800e4b6:	9303      	str	r3, [sp, #12]
 800e4b8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e4bc:	2100      	movs	r1, #0
 800e4be:	2204      	movs	r2, #4
 800e4c0:	f102 0514 	add.w	r5, r2, #20
 800e4c4:	429d      	cmp	r5, r3
 800e4c6:	d926      	bls.n	800e516 <_dtoa_r+0x2ae>
 800e4c8:	6041      	str	r1, [r0, #4]
 800e4ca:	4648      	mov	r0, r9
 800e4cc:	f000 fd9c 	bl	800f008 <_Balloc>
 800e4d0:	4682      	mov	sl, r0
 800e4d2:	2800      	cmp	r0, #0
 800e4d4:	d142      	bne.n	800e55c <_dtoa_r+0x2f4>
 800e4d6:	4b1e      	ldr	r3, [pc, #120]	@ (800e550 <_dtoa_r+0x2e8>)
 800e4d8:	4602      	mov	r2, r0
 800e4da:	f240 11af 	movw	r1, #431	@ 0x1af
 800e4de:	e6da      	b.n	800e296 <_dtoa_r+0x2e>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	e7e3      	b.n	800e4ac <_dtoa_r+0x244>
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	e7d5      	b.n	800e494 <_dtoa_r+0x22c>
 800e4e8:	2401      	movs	r4, #1
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	9307      	str	r3, [sp, #28]
 800e4ee:	9409      	str	r4, [sp, #36]	@ 0x24
 800e4f0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	f8cd b00c 	str.w	fp, [sp, #12]
 800e4fa:	2312      	movs	r3, #18
 800e4fc:	920c      	str	r2, [sp, #48]	@ 0x30
 800e4fe:	e7db      	b.n	800e4b8 <_dtoa_r+0x250>
 800e500:	2301      	movs	r3, #1
 800e502:	9309      	str	r3, [sp, #36]	@ 0x24
 800e504:	e7f4      	b.n	800e4f0 <_dtoa_r+0x288>
 800e506:	f04f 0b01 	mov.w	fp, #1
 800e50a:	f8cd b00c 	str.w	fp, [sp, #12]
 800e50e:	465b      	mov	r3, fp
 800e510:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e514:	e7d0      	b.n	800e4b8 <_dtoa_r+0x250>
 800e516:	3101      	adds	r1, #1
 800e518:	0052      	lsls	r2, r2, #1
 800e51a:	e7d1      	b.n	800e4c0 <_dtoa_r+0x258>
 800e51c:	f3af 8000 	nop.w
 800e520:	636f4361 	.word	0x636f4361
 800e524:	3fd287a7 	.word	0x3fd287a7
 800e528:	8b60c8b3 	.word	0x8b60c8b3
 800e52c:	3fc68a28 	.word	0x3fc68a28
 800e530:	509f79fb 	.word	0x509f79fb
 800e534:	3fd34413 	.word	0x3fd34413
 800e538:	08010bb7 	.word	0x08010bb7
 800e53c:	08010bce 	.word	0x08010bce
 800e540:	7ff00000 	.word	0x7ff00000
 800e544:	08010b87 	.word	0x08010b87
 800e548:	3ff80000 	.word	0x3ff80000
 800e54c:	08010d20 	.word	0x08010d20
 800e550:	08010c26 	.word	0x08010c26
 800e554:	08010bb3 	.word	0x08010bb3
 800e558:	08010b86 	.word	0x08010b86
 800e55c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e560:	6018      	str	r0, [r3, #0]
 800e562:	9b03      	ldr	r3, [sp, #12]
 800e564:	2b0e      	cmp	r3, #14
 800e566:	f200 80a1 	bhi.w	800e6ac <_dtoa_r+0x444>
 800e56a:	2c00      	cmp	r4, #0
 800e56c:	f000 809e 	beq.w	800e6ac <_dtoa_r+0x444>
 800e570:	2f00      	cmp	r7, #0
 800e572:	dd33      	ble.n	800e5dc <_dtoa_r+0x374>
 800e574:	4b9c      	ldr	r3, [pc, #624]	@ (800e7e8 <_dtoa_r+0x580>)
 800e576:	f007 020f 	and.w	r2, r7, #15
 800e57a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e57e:	ed93 7b00 	vldr	d7, [r3]
 800e582:	05f8      	lsls	r0, r7, #23
 800e584:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e588:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e58c:	d516      	bpl.n	800e5bc <_dtoa_r+0x354>
 800e58e:	4b97      	ldr	r3, [pc, #604]	@ (800e7ec <_dtoa_r+0x584>)
 800e590:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e594:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e598:	f7f2 f960 	bl	800085c <__aeabi_ddiv>
 800e59c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5a0:	f004 040f 	and.w	r4, r4, #15
 800e5a4:	2603      	movs	r6, #3
 800e5a6:	4d91      	ldr	r5, [pc, #580]	@ (800e7ec <_dtoa_r+0x584>)
 800e5a8:	b954      	cbnz	r4, 800e5c0 <_dtoa_r+0x358>
 800e5aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e5ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5b2:	f7f2 f953 	bl	800085c <__aeabi_ddiv>
 800e5b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5ba:	e028      	b.n	800e60e <_dtoa_r+0x3a6>
 800e5bc:	2602      	movs	r6, #2
 800e5be:	e7f2      	b.n	800e5a6 <_dtoa_r+0x33e>
 800e5c0:	07e1      	lsls	r1, r4, #31
 800e5c2:	d508      	bpl.n	800e5d6 <_dtoa_r+0x36e>
 800e5c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e5c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e5cc:	f7f2 f81c 	bl	8000608 <__aeabi_dmul>
 800e5d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e5d4:	3601      	adds	r6, #1
 800e5d6:	1064      	asrs	r4, r4, #1
 800e5d8:	3508      	adds	r5, #8
 800e5da:	e7e5      	b.n	800e5a8 <_dtoa_r+0x340>
 800e5dc:	f000 80af 	beq.w	800e73e <_dtoa_r+0x4d6>
 800e5e0:	427c      	negs	r4, r7
 800e5e2:	4b81      	ldr	r3, [pc, #516]	@ (800e7e8 <_dtoa_r+0x580>)
 800e5e4:	4d81      	ldr	r5, [pc, #516]	@ (800e7ec <_dtoa_r+0x584>)
 800e5e6:	f004 020f 	and.w	r2, r4, #15
 800e5ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e5f6:	f7f2 f807 	bl	8000608 <__aeabi_dmul>
 800e5fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5fe:	1124      	asrs	r4, r4, #4
 800e600:	2300      	movs	r3, #0
 800e602:	2602      	movs	r6, #2
 800e604:	2c00      	cmp	r4, #0
 800e606:	f040 808f 	bne.w	800e728 <_dtoa_r+0x4c0>
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d1d3      	bne.n	800e5b6 <_dtoa_r+0x34e>
 800e60e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e610:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e614:	2b00      	cmp	r3, #0
 800e616:	f000 8094 	beq.w	800e742 <_dtoa_r+0x4da>
 800e61a:	4b75      	ldr	r3, [pc, #468]	@ (800e7f0 <_dtoa_r+0x588>)
 800e61c:	2200      	movs	r2, #0
 800e61e:	4620      	mov	r0, r4
 800e620:	4629      	mov	r1, r5
 800e622:	f7f2 fa63 	bl	8000aec <__aeabi_dcmplt>
 800e626:	2800      	cmp	r0, #0
 800e628:	f000 808b 	beq.w	800e742 <_dtoa_r+0x4da>
 800e62c:	9b03      	ldr	r3, [sp, #12]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	f000 8087 	beq.w	800e742 <_dtoa_r+0x4da>
 800e634:	f1bb 0f00 	cmp.w	fp, #0
 800e638:	dd34      	ble.n	800e6a4 <_dtoa_r+0x43c>
 800e63a:	4620      	mov	r0, r4
 800e63c:	4b6d      	ldr	r3, [pc, #436]	@ (800e7f4 <_dtoa_r+0x58c>)
 800e63e:	2200      	movs	r2, #0
 800e640:	4629      	mov	r1, r5
 800e642:	f7f1 ffe1 	bl	8000608 <__aeabi_dmul>
 800e646:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e64a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e64e:	3601      	adds	r6, #1
 800e650:	465c      	mov	r4, fp
 800e652:	4630      	mov	r0, r6
 800e654:	f7f1 ff6e 	bl	8000534 <__aeabi_i2d>
 800e658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e65c:	f7f1 ffd4 	bl	8000608 <__aeabi_dmul>
 800e660:	4b65      	ldr	r3, [pc, #404]	@ (800e7f8 <_dtoa_r+0x590>)
 800e662:	2200      	movs	r2, #0
 800e664:	f7f1 fe1a 	bl	800029c <__adddf3>
 800e668:	4605      	mov	r5, r0
 800e66a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e66e:	2c00      	cmp	r4, #0
 800e670:	d16a      	bne.n	800e748 <_dtoa_r+0x4e0>
 800e672:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e676:	4b61      	ldr	r3, [pc, #388]	@ (800e7fc <_dtoa_r+0x594>)
 800e678:	2200      	movs	r2, #0
 800e67a:	f7f1 fe0d 	bl	8000298 <__aeabi_dsub>
 800e67e:	4602      	mov	r2, r0
 800e680:	460b      	mov	r3, r1
 800e682:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e686:	462a      	mov	r2, r5
 800e688:	4633      	mov	r3, r6
 800e68a:	f7f2 fa4d 	bl	8000b28 <__aeabi_dcmpgt>
 800e68e:	2800      	cmp	r0, #0
 800e690:	f040 8298 	bne.w	800ebc4 <_dtoa_r+0x95c>
 800e694:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e698:	462a      	mov	r2, r5
 800e69a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e69e:	f7f2 fa25 	bl	8000aec <__aeabi_dcmplt>
 800e6a2:	bb38      	cbnz	r0, 800e6f4 <_dtoa_r+0x48c>
 800e6a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e6a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e6ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	f2c0 8157 	blt.w	800e962 <_dtoa_r+0x6fa>
 800e6b4:	2f0e      	cmp	r7, #14
 800e6b6:	f300 8154 	bgt.w	800e962 <_dtoa_r+0x6fa>
 800e6ba:	4b4b      	ldr	r3, [pc, #300]	@ (800e7e8 <_dtoa_r+0x580>)
 800e6bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e6c0:	ed93 7b00 	vldr	d7, [r3]
 800e6c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	ed8d 7b00 	vstr	d7, [sp]
 800e6cc:	f280 80e5 	bge.w	800e89a <_dtoa_r+0x632>
 800e6d0:	9b03      	ldr	r3, [sp, #12]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	f300 80e1 	bgt.w	800e89a <_dtoa_r+0x632>
 800e6d8:	d10c      	bne.n	800e6f4 <_dtoa_r+0x48c>
 800e6da:	4b48      	ldr	r3, [pc, #288]	@ (800e7fc <_dtoa_r+0x594>)
 800e6dc:	2200      	movs	r2, #0
 800e6de:	ec51 0b17 	vmov	r0, r1, d7
 800e6e2:	f7f1 ff91 	bl	8000608 <__aeabi_dmul>
 800e6e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6ea:	f7f2 fa13 	bl	8000b14 <__aeabi_dcmpge>
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	f000 8266 	beq.w	800ebc0 <_dtoa_r+0x958>
 800e6f4:	2400      	movs	r4, #0
 800e6f6:	4625      	mov	r5, r4
 800e6f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6fa:	4656      	mov	r6, sl
 800e6fc:	ea6f 0803 	mvn.w	r8, r3
 800e700:	2700      	movs	r7, #0
 800e702:	4621      	mov	r1, r4
 800e704:	4648      	mov	r0, r9
 800e706:	f000 fcbf 	bl	800f088 <_Bfree>
 800e70a:	2d00      	cmp	r5, #0
 800e70c:	f000 80bd 	beq.w	800e88a <_dtoa_r+0x622>
 800e710:	b12f      	cbz	r7, 800e71e <_dtoa_r+0x4b6>
 800e712:	42af      	cmp	r7, r5
 800e714:	d003      	beq.n	800e71e <_dtoa_r+0x4b6>
 800e716:	4639      	mov	r1, r7
 800e718:	4648      	mov	r0, r9
 800e71a:	f000 fcb5 	bl	800f088 <_Bfree>
 800e71e:	4629      	mov	r1, r5
 800e720:	4648      	mov	r0, r9
 800e722:	f000 fcb1 	bl	800f088 <_Bfree>
 800e726:	e0b0      	b.n	800e88a <_dtoa_r+0x622>
 800e728:	07e2      	lsls	r2, r4, #31
 800e72a:	d505      	bpl.n	800e738 <_dtoa_r+0x4d0>
 800e72c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e730:	f7f1 ff6a 	bl	8000608 <__aeabi_dmul>
 800e734:	3601      	adds	r6, #1
 800e736:	2301      	movs	r3, #1
 800e738:	1064      	asrs	r4, r4, #1
 800e73a:	3508      	adds	r5, #8
 800e73c:	e762      	b.n	800e604 <_dtoa_r+0x39c>
 800e73e:	2602      	movs	r6, #2
 800e740:	e765      	b.n	800e60e <_dtoa_r+0x3a6>
 800e742:	9c03      	ldr	r4, [sp, #12]
 800e744:	46b8      	mov	r8, r7
 800e746:	e784      	b.n	800e652 <_dtoa_r+0x3ea>
 800e748:	4b27      	ldr	r3, [pc, #156]	@ (800e7e8 <_dtoa_r+0x580>)
 800e74a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e74c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e750:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e754:	4454      	add	r4, sl
 800e756:	2900      	cmp	r1, #0
 800e758:	d054      	beq.n	800e804 <_dtoa_r+0x59c>
 800e75a:	4929      	ldr	r1, [pc, #164]	@ (800e800 <_dtoa_r+0x598>)
 800e75c:	2000      	movs	r0, #0
 800e75e:	f7f2 f87d 	bl	800085c <__aeabi_ddiv>
 800e762:	4633      	mov	r3, r6
 800e764:	462a      	mov	r2, r5
 800e766:	f7f1 fd97 	bl	8000298 <__aeabi_dsub>
 800e76a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e76e:	4656      	mov	r6, sl
 800e770:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e774:	f7f2 f9f8 	bl	8000b68 <__aeabi_d2iz>
 800e778:	4605      	mov	r5, r0
 800e77a:	f7f1 fedb 	bl	8000534 <__aeabi_i2d>
 800e77e:	4602      	mov	r2, r0
 800e780:	460b      	mov	r3, r1
 800e782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e786:	f7f1 fd87 	bl	8000298 <__aeabi_dsub>
 800e78a:	3530      	adds	r5, #48	@ 0x30
 800e78c:	4602      	mov	r2, r0
 800e78e:	460b      	mov	r3, r1
 800e790:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e794:	f806 5b01 	strb.w	r5, [r6], #1
 800e798:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e79c:	f7f2 f9a6 	bl	8000aec <__aeabi_dcmplt>
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	d172      	bne.n	800e88a <_dtoa_r+0x622>
 800e7a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7a8:	4911      	ldr	r1, [pc, #68]	@ (800e7f0 <_dtoa_r+0x588>)
 800e7aa:	2000      	movs	r0, #0
 800e7ac:	f7f1 fd74 	bl	8000298 <__aeabi_dsub>
 800e7b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e7b4:	f7f2 f99a 	bl	8000aec <__aeabi_dcmplt>
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	f040 80b4 	bne.w	800e926 <_dtoa_r+0x6be>
 800e7be:	42a6      	cmp	r6, r4
 800e7c0:	f43f af70 	beq.w	800e6a4 <_dtoa_r+0x43c>
 800e7c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e7c8:	4b0a      	ldr	r3, [pc, #40]	@ (800e7f4 <_dtoa_r+0x58c>)
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	f7f1 ff1c 	bl	8000608 <__aeabi_dmul>
 800e7d0:	4b08      	ldr	r3, [pc, #32]	@ (800e7f4 <_dtoa_r+0x58c>)
 800e7d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e7dc:	f7f1 ff14 	bl	8000608 <__aeabi_dmul>
 800e7e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e7e4:	e7c4      	b.n	800e770 <_dtoa_r+0x508>
 800e7e6:	bf00      	nop
 800e7e8:	08010d20 	.word	0x08010d20
 800e7ec:	08010cf8 	.word	0x08010cf8
 800e7f0:	3ff00000 	.word	0x3ff00000
 800e7f4:	40240000 	.word	0x40240000
 800e7f8:	401c0000 	.word	0x401c0000
 800e7fc:	40140000 	.word	0x40140000
 800e800:	3fe00000 	.word	0x3fe00000
 800e804:	4631      	mov	r1, r6
 800e806:	4628      	mov	r0, r5
 800e808:	f7f1 fefe 	bl	8000608 <__aeabi_dmul>
 800e80c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e810:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e812:	4656      	mov	r6, sl
 800e814:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e818:	f7f2 f9a6 	bl	8000b68 <__aeabi_d2iz>
 800e81c:	4605      	mov	r5, r0
 800e81e:	f7f1 fe89 	bl	8000534 <__aeabi_i2d>
 800e822:	4602      	mov	r2, r0
 800e824:	460b      	mov	r3, r1
 800e826:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e82a:	f7f1 fd35 	bl	8000298 <__aeabi_dsub>
 800e82e:	3530      	adds	r5, #48	@ 0x30
 800e830:	f806 5b01 	strb.w	r5, [r6], #1
 800e834:	4602      	mov	r2, r0
 800e836:	460b      	mov	r3, r1
 800e838:	42a6      	cmp	r6, r4
 800e83a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e83e:	f04f 0200 	mov.w	r2, #0
 800e842:	d124      	bne.n	800e88e <_dtoa_r+0x626>
 800e844:	4baf      	ldr	r3, [pc, #700]	@ (800eb04 <_dtoa_r+0x89c>)
 800e846:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e84a:	f7f1 fd27 	bl	800029c <__adddf3>
 800e84e:	4602      	mov	r2, r0
 800e850:	460b      	mov	r3, r1
 800e852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e856:	f7f2 f967 	bl	8000b28 <__aeabi_dcmpgt>
 800e85a:	2800      	cmp	r0, #0
 800e85c:	d163      	bne.n	800e926 <_dtoa_r+0x6be>
 800e85e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e862:	49a8      	ldr	r1, [pc, #672]	@ (800eb04 <_dtoa_r+0x89c>)
 800e864:	2000      	movs	r0, #0
 800e866:	f7f1 fd17 	bl	8000298 <__aeabi_dsub>
 800e86a:	4602      	mov	r2, r0
 800e86c:	460b      	mov	r3, r1
 800e86e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e872:	f7f2 f93b 	bl	8000aec <__aeabi_dcmplt>
 800e876:	2800      	cmp	r0, #0
 800e878:	f43f af14 	beq.w	800e6a4 <_dtoa_r+0x43c>
 800e87c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e87e:	1e73      	subs	r3, r6, #1
 800e880:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e882:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e886:	2b30      	cmp	r3, #48	@ 0x30
 800e888:	d0f8      	beq.n	800e87c <_dtoa_r+0x614>
 800e88a:	4647      	mov	r7, r8
 800e88c:	e03b      	b.n	800e906 <_dtoa_r+0x69e>
 800e88e:	4b9e      	ldr	r3, [pc, #632]	@ (800eb08 <_dtoa_r+0x8a0>)
 800e890:	f7f1 feba 	bl	8000608 <__aeabi_dmul>
 800e894:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e898:	e7bc      	b.n	800e814 <_dtoa_r+0x5ac>
 800e89a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e89e:	4656      	mov	r6, sl
 800e8a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	4629      	mov	r1, r5
 800e8a8:	f7f1 ffd8 	bl	800085c <__aeabi_ddiv>
 800e8ac:	f7f2 f95c 	bl	8000b68 <__aeabi_d2iz>
 800e8b0:	4680      	mov	r8, r0
 800e8b2:	f7f1 fe3f 	bl	8000534 <__aeabi_i2d>
 800e8b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8ba:	f7f1 fea5 	bl	8000608 <__aeabi_dmul>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	4629      	mov	r1, r5
 800e8c6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e8ca:	f7f1 fce5 	bl	8000298 <__aeabi_dsub>
 800e8ce:	f806 4b01 	strb.w	r4, [r6], #1
 800e8d2:	9d03      	ldr	r5, [sp, #12]
 800e8d4:	eba6 040a 	sub.w	r4, r6, sl
 800e8d8:	42a5      	cmp	r5, r4
 800e8da:	4602      	mov	r2, r0
 800e8dc:	460b      	mov	r3, r1
 800e8de:	d133      	bne.n	800e948 <_dtoa_r+0x6e0>
 800e8e0:	f7f1 fcdc 	bl	800029c <__adddf3>
 800e8e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8e8:	4604      	mov	r4, r0
 800e8ea:	460d      	mov	r5, r1
 800e8ec:	f7f2 f91c 	bl	8000b28 <__aeabi_dcmpgt>
 800e8f0:	b9c0      	cbnz	r0, 800e924 <_dtoa_r+0x6bc>
 800e8f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	4629      	mov	r1, r5
 800e8fa:	f7f2 f8ed 	bl	8000ad8 <__aeabi_dcmpeq>
 800e8fe:	b110      	cbz	r0, 800e906 <_dtoa_r+0x69e>
 800e900:	f018 0f01 	tst.w	r8, #1
 800e904:	d10e      	bne.n	800e924 <_dtoa_r+0x6bc>
 800e906:	9902      	ldr	r1, [sp, #8]
 800e908:	4648      	mov	r0, r9
 800e90a:	f000 fbbd 	bl	800f088 <_Bfree>
 800e90e:	2300      	movs	r3, #0
 800e910:	7033      	strb	r3, [r6, #0]
 800e912:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e914:	3701      	adds	r7, #1
 800e916:	601f      	str	r7, [r3, #0]
 800e918:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	f000 824b 	beq.w	800edb6 <_dtoa_r+0xb4e>
 800e920:	601e      	str	r6, [r3, #0]
 800e922:	e248      	b.n	800edb6 <_dtoa_r+0xb4e>
 800e924:	46b8      	mov	r8, r7
 800e926:	4633      	mov	r3, r6
 800e928:	461e      	mov	r6, r3
 800e92a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e92e:	2a39      	cmp	r2, #57	@ 0x39
 800e930:	d106      	bne.n	800e940 <_dtoa_r+0x6d8>
 800e932:	459a      	cmp	sl, r3
 800e934:	d1f8      	bne.n	800e928 <_dtoa_r+0x6c0>
 800e936:	2230      	movs	r2, #48	@ 0x30
 800e938:	f108 0801 	add.w	r8, r8, #1
 800e93c:	f88a 2000 	strb.w	r2, [sl]
 800e940:	781a      	ldrb	r2, [r3, #0]
 800e942:	3201      	adds	r2, #1
 800e944:	701a      	strb	r2, [r3, #0]
 800e946:	e7a0      	b.n	800e88a <_dtoa_r+0x622>
 800e948:	4b6f      	ldr	r3, [pc, #444]	@ (800eb08 <_dtoa_r+0x8a0>)
 800e94a:	2200      	movs	r2, #0
 800e94c:	f7f1 fe5c 	bl	8000608 <__aeabi_dmul>
 800e950:	2200      	movs	r2, #0
 800e952:	2300      	movs	r3, #0
 800e954:	4604      	mov	r4, r0
 800e956:	460d      	mov	r5, r1
 800e958:	f7f2 f8be 	bl	8000ad8 <__aeabi_dcmpeq>
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d09f      	beq.n	800e8a0 <_dtoa_r+0x638>
 800e960:	e7d1      	b.n	800e906 <_dtoa_r+0x69e>
 800e962:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e964:	2a00      	cmp	r2, #0
 800e966:	f000 80ea 	beq.w	800eb3e <_dtoa_r+0x8d6>
 800e96a:	9a07      	ldr	r2, [sp, #28]
 800e96c:	2a01      	cmp	r2, #1
 800e96e:	f300 80cd 	bgt.w	800eb0c <_dtoa_r+0x8a4>
 800e972:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e974:	2a00      	cmp	r2, #0
 800e976:	f000 80c1 	beq.w	800eafc <_dtoa_r+0x894>
 800e97a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e97e:	9c08      	ldr	r4, [sp, #32]
 800e980:	9e00      	ldr	r6, [sp, #0]
 800e982:	9a00      	ldr	r2, [sp, #0]
 800e984:	441a      	add	r2, r3
 800e986:	9200      	str	r2, [sp, #0]
 800e988:	9a06      	ldr	r2, [sp, #24]
 800e98a:	2101      	movs	r1, #1
 800e98c:	441a      	add	r2, r3
 800e98e:	4648      	mov	r0, r9
 800e990:	9206      	str	r2, [sp, #24]
 800e992:	f000 fc2d 	bl	800f1f0 <__i2b>
 800e996:	4605      	mov	r5, r0
 800e998:	b166      	cbz	r6, 800e9b4 <_dtoa_r+0x74c>
 800e99a:	9b06      	ldr	r3, [sp, #24]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	dd09      	ble.n	800e9b4 <_dtoa_r+0x74c>
 800e9a0:	42b3      	cmp	r3, r6
 800e9a2:	9a00      	ldr	r2, [sp, #0]
 800e9a4:	bfa8      	it	ge
 800e9a6:	4633      	movge	r3, r6
 800e9a8:	1ad2      	subs	r2, r2, r3
 800e9aa:	9200      	str	r2, [sp, #0]
 800e9ac:	9a06      	ldr	r2, [sp, #24]
 800e9ae:	1af6      	subs	r6, r6, r3
 800e9b0:	1ad3      	subs	r3, r2, r3
 800e9b2:	9306      	str	r3, [sp, #24]
 800e9b4:	9b08      	ldr	r3, [sp, #32]
 800e9b6:	b30b      	cbz	r3, 800e9fc <_dtoa_r+0x794>
 800e9b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	f000 80c6 	beq.w	800eb4c <_dtoa_r+0x8e4>
 800e9c0:	2c00      	cmp	r4, #0
 800e9c2:	f000 80c0 	beq.w	800eb46 <_dtoa_r+0x8de>
 800e9c6:	4629      	mov	r1, r5
 800e9c8:	4622      	mov	r2, r4
 800e9ca:	4648      	mov	r0, r9
 800e9cc:	f000 fcc8 	bl	800f360 <__pow5mult>
 800e9d0:	9a02      	ldr	r2, [sp, #8]
 800e9d2:	4601      	mov	r1, r0
 800e9d4:	4605      	mov	r5, r0
 800e9d6:	4648      	mov	r0, r9
 800e9d8:	f000 fc20 	bl	800f21c <__multiply>
 800e9dc:	9902      	ldr	r1, [sp, #8]
 800e9de:	4680      	mov	r8, r0
 800e9e0:	4648      	mov	r0, r9
 800e9e2:	f000 fb51 	bl	800f088 <_Bfree>
 800e9e6:	9b08      	ldr	r3, [sp, #32]
 800e9e8:	1b1b      	subs	r3, r3, r4
 800e9ea:	9308      	str	r3, [sp, #32]
 800e9ec:	f000 80b1 	beq.w	800eb52 <_dtoa_r+0x8ea>
 800e9f0:	9a08      	ldr	r2, [sp, #32]
 800e9f2:	4641      	mov	r1, r8
 800e9f4:	4648      	mov	r0, r9
 800e9f6:	f000 fcb3 	bl	800f360 <__pow5mult>
 800e9fa:	9002      	str	r0, [sp, #8]
 800e9fc:	2101      	movs	r1, #1
 800e9fe:	4648      	mov	r0, r9
 800ea00:	f000 fbf6 	bl	800f1f0 <__i2b>
 800ea04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea06:	4604      	mov	r4, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	f000 81d8 	beq.w	800edbe <_dtoa_r+0xb56>
 800ea0e:	461a      	mov	r2, r3
 800ea10:	4601      	mov	r1, r0
 800ea12:	4648      	mov	r0, r9
 800ea14:	f000 fca4 	bl	800f360 <__pow5mult>
 800ea18:	9b07      	ldr	r3, [sp, #28]
 800ea1a:	2b01      	cmp	r3, #1
 800ea1c:	4604      	mov	r4, r0
 800ea1e:	f300 809f 	bgt.w	800eb60 <_dtoa_r+0x8f8>
 800ea22:	9b04      	ldr	r3, [sp, #16]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	f040 8097 	bne.w	800eb58 <_dtoa_r+0x8f0>
 800ea2a:	9b05      	ldr	r3, [sp, #20]
 800ea2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	f040 8093 	bne.w	800eb5c <_dtoa_r+0x8f4>
 800ea36:	9b05      	ldr	r3, [sp, #20]
 800ea38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea3c:	0d1b      	lsrs	r3, r3, #20
 800ea3e:	051b      	lsls	r3, r3, #20
 800ea40:	b133      	cbz	r3, 800ea50 <_dtoa_r+0x7e8>
 800ea42:	9b00      	ldr	r3, [sp, #0]
 800ea44:	3301      	adds	r3, #1
 800ea46:	9300      	str	r3, [sp, #0]
 800ea48:	9b06      	ldr	r3, [sp, #24]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	9306      	str	r3, [sp, #24]
 800ea4e:	2301      	movs	r3, #1
 800ea50:	9308      	str	r3, [sp, #32]
 800ea52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	f000 81b8 	beq.w	800edca <_dtoa_r+0xb62>
 800ea5a:	6923      	ldr	r3, [r4, #16]
 800ea5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ea60:	6918      	ldr	r0, [r3, #16]
 800ea62:	f000 fb79 	bl	800f158 <__hi0bits>
 800ea66:	f1c0 0020 	rsb	r0, r0, #32
 800ea6a:	9b06      	ldr	r3, [sp, #24]
 800ea6c:	4418      	add	r0, r3
 800ea6e:	f010 001f 	ands.w	r0, r0, #31
 800ea72:	f000 8082 	beq.w	800eb7a <_dtoa_r+0x912>
 800ea76:	f1c0 0320 	rsb	r3, r0, #32
 800ea7a:	2b04      	cmp	r3, #4
 800ea7c:	dd73      	ble.n	800eb66 <_dtoa_r+0x8fe>
 800ea7e:	9b00      	ldr	r3, [sp, #0]
 800ea80:	f1c0 001c 	rsb	r0, r0, #28
 800ea84:	4403      	add	r3, r0
 800ea86:	9300      	str	r3, [sp, #0]
 800ea88:	9b06      	ldr	r3, [sp, #24]
 800ea8a:	4403      	add	r3, r0
 800ea8c:	4406      	add	r6, r0
 800ea8e:	9306      	str	r3, [sp, #24]
 800ea90:	9b00      	ldr	r3, [sp, #0]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	dd05      	ble.n	800eaa2 <_dtoa_r+0x83a>
 800ea96:	9902      	ldr	r1, [sp, #8]
 800ea98:	461a      	mov	r2, r3
 800ea9a:	4648      	mov	r0, r9
 800ea9c:	f000 fcba 	bl	800f414 <__lshift>
 800eaa0:	9002      	str	r0, [sp, #8]
 800eaa2:	9b06      	ldr	r3, [sp, #24]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	dd05      	ble.n	800eab4 <_dtoa_r+0x84c>
 800eaa8:	4621      	mov	r1, r4
 800eaaa:	461a      	mov	r2, r3
 800eaac:	4648      	mov	r0, r9
 800eaae:	f000 fcb1 	bl	800f414 <__lshift>
 800eab2:	4604      	mov	r4, r0
 800eab4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d061      	beq.n	800eb7e <_dtoa_r+0x916>
 800eaba:	9802      	ldr	r0, [sp, #8]
 800eabc:	4621      	mov	r1, r4
 800eabe:	f000 fd15 	bl	800f4ec <__mcmp>
 800eac2:	2800      	cmp	r0, #0
 800eac4:	da5b      	bge.n	800eb7e <_dtoa_r+0x916>
 800eac6:	2300      	movs	r3, #0
 800eac8:	9902      	ldr	r1, [sp, #8]
 800eaca:	220a      	movs	r2, #10
 800eacc:	4648      	mov	r0, r9
 800eace:	f000 fafd 	bl	800f0cc <__multadd>
 800ead2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ead4:	9002      	str	r0, [sp, #8]
 800ead6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800eada:	2b00      	cmp	r3, #0
 800eadc:	f000 8177 	beq.w	800edce <_dtoa_r+0xb66>
 800eae0:	4629      	mov	r1, r5
 800eae2:	2300      	movs	r3, #0
 800eae4:	220a      	movs	r2, #10
 800eae6:	4648      	mov	r0, r9
 800eae8:	f000 faf0 	bl	800f0cc <__multadd>
 800eaec:	f1bb 0f00 	cmp.w	fp, #0
 800eaf0:	4605      	mov	r5, r0
 800eaf2:	dc6f      	bgt.n	800ebd4 <_dtoa_r+0x96c>
 800eaf4:	9b07      	ldr	r3, [sp, #28]
 800eaf6:	2b02      	cmp	r3, #2
 800eaf8:	dc49      	bgt.n	800eb8e <_dtoa_r+0x926>
 800eafa:	e06b      	b.n	800ebd4 <_dtoa_r+0x96c>
 800eafc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eafe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800eb02:	e73c      	b.n	800e97e <_dtoa_r+0x716>
 800eb04:	3fe00000 	.word	0x3fe00000
 800eb08:	40240000 	.word	0x40240000
 800eb0c:	9b03      	ldr	r3, [sp, #12]
 800eb0e:	1e5c      	subs	r4, r3, #1
 800eb10:	9b08      	ldr	r3, [sp, #32]
 800eb12:	42a3      	cmp	r3, r4
 800eb14:	db09      	blt.n	800eb2a <_dtoa_r+0x8c2>
 800eb16:	1b1c      	subs	r4, r3, r4
 800eb18:	9b03      	ldr	r3, [sp, #12]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	f6bf af30 	bge.w	800e980 <_dtoa_r+0x718>
 800eb20:	9b00      	ldr	r3, [sp, #0]
 800eb22:	9a03      	ldr	r2, [sp, #12]
 800eb24:	1a9e      	subs	r6, r3, r2
 800eb26:	2300      	movs	r3, #0
 800eb28:	e72b      	b.n	800e982 <_dtoa_r+0x71a>
 800eb2a:	9b08      	ldr	r3, [sp, #32]
 800eb2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eb2e:	9408      	str	r4, [sp, #32]
 800eb30:	1ae3      	subs	r3, r4, r3
 800eb32:	441a      	add	r2, r3
 800eb34:	9e00      	ldr	r6, [sp, #0]
 800eb36:	9b03      	ldr	r3, [sp, #12]
 800eb38:	920d      	str	r2, [sp, #52]	@ 0x34
 800eb3a:	2400      	movs	r4, #0
 800eb3c:	e721      	b.n	800e982 <_dtoa_r+0x71a>
 800eb3e:	9c08      	ldr	r4, [sp, #32]
 800eb40:	9e00      	ldr	r6, [sp, #0]
 800eb42:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800eb44:	e728      	b.n	800e998 <_dtoa_r+0x730>
 800eb46:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800eb4a:	e751      	b.n	800e9f0 <_dtoa_r+0x788>
 800eb4c:	9a08      	ldr	r2, [sp, #32]
 800eb4e:	9902      	ldr	r1, [sp, #8]
 800eb50:	e750      	b.n	800e9f4 <_dtoa_r+0x78c>
 800eb52:	f8cd 8008 	str.w	r8, [sp, #8]
 800eb56:	e751      	b.n	800e9fc <_dtoa_r+0x794>
 800eb58:	2300      	movs	r3, #0
 800eb5a:	e779      	b.n	800ea50 <_dtoa_r+0x7e8>
 800eb5c:	9b04      	ldr	r3, [sp, #16]
 800eb5e:	e777      	b.n	800ea50 <_dtoa_r+0x7e8>
 800eb60:	2300      	movs	r3, #0
 800eb62:	9308      	str	r3, [sp, #32]
 800eb64:	e779      	b.n	800ea5a <_dtoa_r+0x7f2>
 800eb66:	d093      	beq.n	800ea90 <_dtoa_r+0x828>
 800eb68:	9a00      	ldr	r2, [sp, #0]
 800eb6a:	331c      	adds	r3, #28
 800eb6c:	441a      	add	r2, r3
 800eb6e:	9200      	str	r2, [sp, #0]
 800eb70:	9a06      	ldr	r2, [sp, #24]
 800eb72:	441a      	add	r2, r3
 800eb74:	441e      	add	r6, r3
 800eb76:	9206      	str	r2, [sp, #24]
 800eb78:	e78a      	b.n	800ea90 <_dtoa_r+0x828>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	e7f4      	b.n	800eb68 <_dtoa_r+0x900>
 800eb7e:	9b03      	ldr	r3, [sp, #12]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	46b8      	mov	r8, r7
 800eb84:	dc20      	bgt.n	800ebc8 <_dtoa_r+0x960>
 800eb86:	469b      	mov	fp, r3
 800eb88:	9b07      	ldr	r3, [sp, #28]
 800eb8a:	2b02      	cmp	r3, #2
 800eb8c:	dd1e      	ble.n	800ebcc <_dtoa_r+0x964>
 800eb8e:	f1bb 0f00 	cmp.w	fp, #0
 800eb92:	f47f adb1 	bne.w	800e6f8 <_dtoa_r+0x490>
 800eb96:	4621      	mov	r1, r4
 800eb98:	465b      	mov	r3, fp
 800eb9a:	2205      	movs	r2, #5
 800eb9c:	4648      	mov	r0, r9
 800eb9e:	f000 fa95 	bl	800f0cc <__multadd>
 800eba2:	4601      	mov	r1, r0
 800eba4:	4604      	mov	r4, r0
 800eba6:	9802      	ldr	r0, [sp, #8]
 800eba8:	f000 fca0 	bl	800f4ec <__mcmp>
 800ebac:	2800      	cmp	r0, #0
 800ebae:	f77f ada3 	ble.w	800e6f8 <_dtoa_r+0x490>
 800ebb2:	4656      	mov	r6, sl
 800ebb4:	2331      	movs	r3, #49	@ 0x31
 800ebb6:	f806 3b01 	strb.w	r3, [r6], #1
 800ebba:	f108 0801 	add.w	r8, r8, #1
 800ebbe:	e59f      	b.n	800e700 <_dtoa_r+0x498>
 800ebc0:	9c03      	ldr	r4, [sp, #12]
 800ebc2:	46b8      	mov	r8, r7
 800ebc4:	4625      	mov	r5, r4
 800ebc6:	e7f4      	b.n	800ebb2 <_dtoa_r+0x94a>
 800ebc8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ebcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f000 8101 	beq.w	800edd6 <_dtoa_r+0xb6e>
 800ebd4:	2e00      	cmp	r6, #0
 800ebd6:	dd05      	ble.n	800ebe4 <_dtoa_r+0x97c>
 800ebd8:	4629      	mov	r1, r5
 800ebda:	4632      	mov	r2, r6
 800ebdc:	4648      	mov	r0, r9
 800ebde:	f000 fc19 	bl	800f414 <__lshift>
 800ebe2:	4605      	mov	r5, r0
 800ebe4:	9b08      	ldr	r3, [sp, #32]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d05c      	beq.n	800eca4 <_dtoa_r+0xa3c>
 800ebea:	6869      	ldr	r1, [r5, #4]
 800ebec:	4648      	mov	r0, r9
 800ebee:	f000 fa0b 	bl	800f008 <_Balloc>
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	b928      	cbnz	r0, 800ec02 <_dtoa_r+0x99a>
 800ebf6:	4b82      	ldr	r3, [pc, #520]	@ (800ee00 <_dtoa_r+0xb98>)
 800ebf8:	4602      	mov	r2, r0
 800ebfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ebfe:	f7ff bb4a 	b.w	800e296 <_dtoa_r+0x2e>
 800ec02:	692a      	ldr	r2, [r5, #16]
 800ec04:	3202      	adds	r2, #2
 800ec06:	0092      	lsls	r2, r2, #2
 800ec08:	f105 010c 	add.w	r1, r5, #12
 800ec0c:	300c      	adds	r0, #12
 800ec0e:	f7ff fa92 	bl	800e136 <memcpy>
 800ec12:	2201      	movs	r2, #1
 800ec14:	4631      	mov	r1, r6
 800ec16:	4648      	mov	r0, r9
 800ec18:	f000 fbfc 	bl	800f414 <__lshift>
 800ec1c:	f10a 0301 	add.w	r3, sl, #1
 800ec20:	9300      	str	r3, [sp, #0]
 800ec22:	eb0a 030b 	add.w	r3, sl, fp
 800ec26:	9308      	str	r3, [sp, #32]
 800ec28:	9b04      	ldr	r3, [sp, #16]
 800ec2a:	f003 0301 	and.w	r3, r3, #1
 800ec2e:	462f      	mov	r7, r5
 800ec30:	9306      	str	r3, [sp, #24]
 800ec32:	4605      	mov	r5, r0
 800ec34:	9b00      	ldr	r3, [sp, #0]
 800ec36:	9802      	ldr	r0, [sp, #8]
 800ec38:	4621      	mov	r1, r4
 800ec3a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800ec3e:	f7ff fa88 	bl	800e152 <quorem>
 800ec42:	4603      	mov	r3, r0
 800ec44:	3330      	adds	r3, #48	@ 0x30
 800ec46:	9003      	str	r0, [sp, #12]
 800ec48:	4639      	mov	r1, r7
 800ec4a:	9802      	ldr	r0, [sp, #8]
 800ec4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec4e:	f000 fc4d 	bl	800f4ec <__mcmp>
 800ec52:	462a      	mov	r2, r5
 800ec54:	9004      	str	r0, [sp, #16]
 800ec56:	4621      	mov	r1, r4
 800ec58:	4648      	mov	r0, r9
 800ec5a:	f000 fc63 	bl	800f524 <__mdiff>
 800ec5e:	68c2      	ldr	r2, [r0, #12]
 800ec60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec62:	4606      	mov	r6, r0
 800ec64:	bb02      	cbnz	r2, 800eca8 <_dtoa_r+0xa40>
 800ec66:	4601      	mov	r1, r0
 800ec68:	9802      	ldr	r0, [sp, #8]
 800ec6a:	f000 fc3f 	bl	800f4ec <__mcmp>
 800ec6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec70:	4602      	mov	r2, r0
 800ec72:	4631      	mov	r1, r6
 800ec74:	4648      	mov	r0, r9
 800ec76:	920c      	str	r2, [sp, #48]	@ 0x30
 800ec78:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec7a:	f000 fa05 	bl	800f088 <_Bfree>
 800ec7e:	9b07      	ldr	r3, [sp, #28]
 800ec80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ec82:	9e00      	ldr	r6, [sp, #0]
 800ec84:	ea42 0103 	orr.w	r1, r2, r3
 800ec88:	9b06      	ldr	r3, [sp, #24]
 800ec8a:	4319      	orrs	r1, r3
 800ec8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec8e:	d10d      	bne.n	800ecac <_dtoa_r+0xa44>
 800ec90:	2b39      	cmp	r3, #57	@ 0x39
 800ec92:	d027      	beq.n	800ece4 <_dtoa_r+0xa7c>
 800ec94:	9a04      	ldr	r2, [sp, #16]
 800ec96:	2a00      	cmp	r2, #0
 800ec98:	dd01      	ble.n	800ec9e <_dtoa_r+0xa36>
 800ec9a:	9b03      	ldr	r3, [sp, #12]
 800ec9c:	3331      	adds	r3, #49	@ 0x31
 800ec9e:	f88b 3000 	strb.w	r3, [fp]
 800eca2:	e52e      	b.n	800e702 <_dtoa_r+0x49a>
 800eca4:	4628      	mov	r0, r5
 800eca6:	e7b9      	b.n	800ec1c <_dtoa_r+0x9b4>
 800eca8:	2201      	movs	r2, #1
 800ecaa:	e7e2      	b.n	800ec72 <_dtoa_r+0xa0a>
 800ecac:	9904      	ldr	r1, [sp, #16]
 800ecae:	2900      	cmp	r1, #0
 800ecb0:	db04      	blt.n	800ecbc <_dtoa_r+0xa54>
 800ecb2:	9807      	ldr	r0, [sp, #28]
 800ecb4:	4301      	orrs	r1, r0
 800ecb6:	9806      	ldr	r0, [sp, #24]
 800ecb8:	4301      	orrs	r1, r0
 800ecba:	d120      	bne.n	800ecfe <_dtoa_r+0xa96>
 800ecbc:	2a00      	cmp	r2, #0
 800ecbe:	ddee      	ble.n	800ec9e <_dtoa_r+0xa36>
 800ecc0:	9902      	ldr	r1, [sp, #8]
 800ecc2:	9300      	str	r3, [sp, #0]
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	4648      	mov	r0, r9
 800ecc8:	f000 fba4 	bl	800f414 <__lshift>
 800eccc:	4621      	mov	r1, r4
 800ecce:	9002      	str	r0, [sp, #8]
 800ecd0:	f000 fc0c 	bl	800f4ec <__mcmp>
 800ecd4:	2800      	cmp	r0, #0
 800ecd6:	9b00      	ldr	r3, [sp, #0]
 800ecd8:	dc02      	bgt.n	800ece0 <_dtoa_r+0xa78>
 800ecda:	d1e0      	bne.n	800ec9e <_dtoa_r+0xa36>
 800ecdc:	07da      	lsls	r2, r3, #31
 800ecde:	d5de      	bpl.n	800ec9e <_dtoa_r+0xa36>
 800ece0:	2b39      	cmp	r3, #57	@ 0x39
 800ece2:	d1da      	bne.n	800ec9a <_dtoa_r+0xa32>
 800ece4:	2339      	movs	r3, #57	@ 0x39
 800ece6:	f88b 3000 	strb.w	r3, [fp]
 800ecea:	4633      	mov	r3, r6
 800ecec:	461e      	mov	r6, r3
 800ecee:	3b01      	subs	r3, #1
 800ecf0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ecf4:	2a39      	cmp	r2, #57	@ 0x39
 800ecf6:	d04e      	beq.n	800ed96 <_dtoa_r+0xb2e>
 800ecf8:	3201      	adds	r2, #1
 800ecfa:	701a      	strb	r2, [r3, #0]
 800ecfc:	e501      	b.n	800e702 <_dtoa_r+0x49a>
 800ecfe:	2a00      	cmp	r2, #0
 800ed00:	dd03      	ble.n	800ed0a <_dtoa_r+0xaa2>
 800ed02:	2b39      	cmp	r3, #57	@ 0x39
 800ed04:	d0ee      	beq.n	800ece4 <_dtoa_r+0xa7c>
 800ed06:	3301      	adds	r3, #1
 800ed08:	e7c9      	b.n	800ec9e <_dtoa_r+0xa36>
 800ed0a:	9a00      	ldr	r2, [sp, #0]
 800ed0c:	9908      	ldr	r1, [sp, #32]
 800ed0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ed12:	428a      	cmp	r2, r1
 800ed14:	d028      	beq.n	800ed68 <_dtoa_r+0xb00>
 800ed16:	9902      	ldr	r1, [sp, #8]
 800ed18:	2300      	movs	r3, #0
 800ed1a:	220a      	movs	r2, #10
 800ed1c:	4648      	mov	r0, r9
 800ed1e:	f000 f9d5 	bl	800f0cc <__multadd>
 800ed22:	42af      	cmp	r7, r5
 800ed24:	9002      	str	r0, [sp, #8]
 800ed26:	f04f 0300 	mov.w	r3, #0
 800ed2a:	f04f 020a 	mov.w	r2, #10
 800ed2e:	4639      	mov	r1, r7
 800ed30:	4648      	mov	r0, r9
 800ed32:	d107      	bne.n	800ed44 <_dtoa_r+0xadc>
 800ed34:	f000 f9ca 	bl	800f0cc <__multadd>
 800ed38:	4607      	mov	r7, r0
 800ed3a:	4605      	mov	r5, r0
 800ed3c:	9b00      	ldr	r3, [sp, #0]
 800ed3e:	3301      	adds	r3, #1
 800ed40:	9300      	str	r3, [sp, #0]
 800ed42:	e777      	b.n	800ec34 <_dtoa_r+0x9cc>
 800ed44:	f000 f9c2 	bl	800f0cc <__multadd>
 800ed48:	4629      	mov	r1, r5
 800ed4a:	4607      	mov	r7, r0
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	220a      	movs	r2, #10
 800ed50:	4648      	mov	r0, r9
 800ed52:	f000 f9bb 	bl	800f0cc <__multadd>
 800ed56:	4605      	mov	r5, r0
 800ed58:	e7f0      	b.n	800ed3c <_dtoa_r+0xad4>
 800ed5a:	f1bb 0f00 	cmp.w	fp, #0
 800ed5e:	bfcc      	ite	gt
 800ed60:	465e      	movgt	r6, fp
 800ed62:	2601      	movle	r6, #1
 800ed64:	4456      	add	r6, sl
 800ed66:	2700      	movs	r7, #0
 800ed68:	9902      	ldr	r1, [sp, #8]
 800ed6a:	9300      	str	r3, [sp, #0]
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	4648      	mov	r0, r9
 800ed70:	f000 fb50 	bl	800f414 <__lshift>
 800ed74:	4621      	mov	r1, r4
 800ed76:	9002      	str	r0, [sp, #8]
 800ed78:	f000 fbb8 	bl	800f4ec <__mcmp>
 800ed7c:	2800      	cmp	r0, #0
 800ed7e:	dcb4      	bgt.n	800ecea <_dtoa_r+0xa82>
 800ed80:	d102      	bne.n	800ed88 <_dtoa_r+0xb20>
 800ed82:	9b00      	ldr	r3, [sp, #0]
 800ed84:	07db      	lsls	r3, r3, #31
 800ed86:	d4b0      	bmi.n	800ecea <_dtoa_r+0xa82>
 800ed88:	4633      	mov	r3, r6
 800ed8a:	461e      	mov	r6, r3
 800ed8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed90:	2a30      	cmp	r2, #48	@ 0x30
 800ed92:	d0fa      	beq.n	800ed8a <_dtoa_r+0xb22>
 800ed94:	e4b5      	b.n	800e702 <_dtoa_r+0x49a>
 800ed96:	459a      	cmp	sl, r3
 800ed98:	d1a8      	bne.n	800ecec <_dtoa_r+0xa84>
 800ed9a:	2331      	movs	r3, #49	@ 0x31
 800ed9c:	f108 0801 	add.w	r8, r8, #1
 800eda0:	f88a 3000 	strb.w	r3, [sl]
 800eda4:	e4ad      	b.n	800e702 <_dtoa_r+0x49a>
 800eda6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eda8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ee04 <_dtoa_r+0xb9c>
 800edac:	b11b      	cbz	r3, 800edb6 <_dtoa_r+0xb4e>
 800edae:	f10a 0308 	add.w	r3, sl, #8
 800edb2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800edb4:	6013      	str	r3, [r2, #0]
 800edb6:	4650      	mov	r0, sl
 800edb8:	b017      	add	sp, #92	@ 0x5c
 800edba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edbe:	9b07      	ldr	r3, [sp, #28]
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	f77f ae2e 	ble.w	800ea22 <_dtoa_r+0x7ba>
 800edc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800edc8:	9308      	str	r3, [sp, #32]
 800edca:	2001      	movs	r0, #1
 800edcc:	e64d      	b.n	800ea6a <_dtoa_r+0x802>
 800edce:	f1bb 0f00 	cmp.w	fp, #0
 800edd2:	f77f aed9 	ble.w	800eb88 <_dtoa_r+0x920>
 800edd6:	4656      	mov	r6, sl
 800edd8:	9802      	ldr	r0, [sp, #8]
 800edda:	4621      	mov	r1, r4
 800eddc:	f7ff f9b9 	bl	800e152 <quorem>
 800ede0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ede4:	f806 3b01 	strb.w	r3, [r6], #1
 800ede8:	eba6 020a 	sub.w	r2, r6, sl
 800edec:	4593      	cmp	fp, r2
 800edee:	ddb4      	ble.n	800ed5a <_dtoa_r+0xaf2>
 800edf0:	9902      	ldr	r1, [sp, #8]
 800edf2:	2300      	movs	r3, #0
 800edf4:	220a      	movs	r2, #10
 800edf6:	4648      	mov	r0, r9
 800edf8:	f000 f968 	bl	800f0cc <__multadd>
 800edfc:	9002      	str	r0, [sp, #8]
 800edfe:	e7eb      	b.n	800edd8 <_dtoa_r+0xb70>
 800ee00:	08010c26 	.word	0x08010c26
 800ee04:	08010baa 	.word	0x08010baa

0800ee08 <_free_r>:
 800ee08:	b538      	push	{r3, r4, r5, lr}
 800ee0a:	4605      	mov	r5, r0
 800ee0c:	2900      	cmp	r1, #0
 800ee0e:	d041      	beq.n	800ee94 <_free_r+0x8c>
 800ee10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee14:	1f0c      	subs	r4, r1, #4
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	bfb8      	it	lt
 800ee1a:	18e4      	addlt	r4, r4, r3
 800ee1c:	f000 f8e8 	bl	800eff0 <__malloc_lock>
 800ee20:	4a1d      	ldr	r2, [pc, #116]	@ (800ee98 <_free_r+0x90>)
 800ee22:	6813      	ldr	r3, [r2, #0]
 800ee24:	b933      	cbnz	r3, 800ee34 <_free_r+0x2c>
 800ee26:	6063      	str	r3, [r4, #4]
 800ee28:	6014      	str	r4, [r2, #0]
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee30:	f000 b8e4 	b.w	800effc <__malloc_unlock>
 800ee34:	42a3      	cmp	r3, r4
 800ee36:	d908      	bls.n	800ee4a <_free_r+0x42>
 800ee38:	6820      	ldr	r0, [r4, #0]
 800ee3a:	1821      	adds	r1, r4, r0
 800ee3c:	428b      	cmp	r3, r1
 800ee3e:	bf01      	itttt	eq
 800ee40:	6819      	ldreq	r1, [r3, #0]
 800ee42:	685b      	ldreq	r3, [r3, #4]
 800ee44:	1809      	addeq	r1, r1, r0
 800ee46:	6021      	streq	r1, [r4, #0]
 800ee48:	e7ed      	b.n	800ee26 <_free_r+0x1e>
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	b10b      	cbz	r3, 800ee54 <_free_r+0x4c>
 800ee50:	42a3      	cmp	r3, r4
 800ee52:	d9fa      	bls.n	800ee4a <_free_r+0x42>
 800ee54:	6811      	ldr	r1, [r2, #0]
 800ee56:	1850      	adds	r0, r2, r1
 800ee58:	42a0      	cmp	r0, r4
 800ee5a:	d10b      	bne.n	800ee74 <_free_r+0x6c>
 800ee5c:	6820      	ldr	r0, [r4, #0]
 800ee5e:	4401      	add	r1, r0
 800ee60:	1850      	adds	r0, r2, r1
 800ee62:	4283      	cmp	r3, r0
 800ee64:	6011      	str	r1, [r2, #0]
 800ee66:	d1e0      	bne.n	800ee2a <_free_r+0x22>
 800ee68:	6818      	ldr	r0, [r3, #0]
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	6053      	str	r3, [r2, #4]
 800ee6e:	4408      	add	r0, r1
 800ee70:	6010      	str	r0, [r2, #0]
 800ee72:	e7da      	b.n	800ee2a <_free_r+0x22>
 800ee74:	d902      	bls.n	800ee7c <_free_r+0x74>
 800ee76:	230c      	movs	r3, #12
 800ee78:	602b      	str	r3, [r5, #0]
 800ee7a:	e7d6      	b.n	800ee2a <_free_r+0x22>
 800ee7c:	6820      	ldr	r0, [r4, #0]
 800ee7e:	1821      	adds	r1, r4, r0
 800ee80:	428b      	cmp	r3, r1
 800ee82:	bf04      	itt	eq
 800ee84:	6819      	ldreq	r1, [r3, #0]
 800ee86:	685b      	ldreq	r3, [r3, #4]
 800ee88:	6063      	str	r3, [r4, #4]
 800ee8a:	bf04      	itt	eq
 800ee8c:	1809      	addeq	r1, r1, r0
 800ee8e:	6021      	streq	r1, [r4, #0]
 800ee90:	6054      	str	r4, [r2, #4]
 800ee92:	e7ca      	b.n	800ee2a <_free_r+0x22>
 800ee94:	bd38      	pop	{r3, r4, r5, pc}
 800ee96:	bf00      	nop
 800ee98:	200025e8 	.word	0x200025e8

0800ee9c <malloc>:
 800ee9c:	4b02      	ldr	r3, [pc, #8]	@ (800eea8 <malloc+0xc>)
 800ee9e:	4601      	mov	r1, r0
 800eea0:	6818      	ldr	r0, [r3, #0]
 800eea2:	f000 b825 	b.w	800eef0 <_malloc_r>
 800eea6:	bf00      	nop
 800eea8:	20000128 	.word	0x20000128

0800eeac <sbrk_aligned>:
 800eeac:	b570      	push	{r4, r5, r6, lr}
 800eeae:	4e0f      	ldr	r6, [pc, #60]	@ (800eeec <sbrk_aligned+0x40>)
 800eeb0:	460c      	mov	r4, r1
 800eeb2:	6831      	ldr	r1, [r6, #0]
 800eeb4:	4605      	mov	r5, r0
 800eeb6:	b911      	cbnz	r1, 800eebe <sbrk_aligned+0x12>
 800eeb8:	f001 f804 	bl	800fec4 <_sbrk_r>
 800eebc:	6030      	str	r0, [r6, #0]
 800eebe:	4621      	mov	r1, r4
 800eec0:	4628      	mov	r0, r5
 800eec2:	f000 ffff 	bl	800fec4 <_sbrk_r>
 800eec6:	1c43      	adds	r3, r0, #1
 800eec8:	d103      	bne.n	800eed2 <sbrk_aligned+0x26>
 800eeca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800eece:	4620      	mov	r0, r4
 800eed0:	bd70      	pop	{r4, r5, r6, pc}
 800eed2:	1cc4      	adds	r4, r0, #3
 800eed4:	f024 0403 	bic.w	r4, r4, #3
 800eed8:	42a0      	cmp	r0, r4
 800eeda:	d0f8      	beq.n	800eece <sbrk_aligned+0x22>
 800eedc:	1a21      	subs	r1, r4, r0
 800eede:	4628      	mov	r0, r5
 800eee0:	f000 fff0 	bl	800fec4 <_sbrk_r>
 800eee4:	3001      	adds	r0, #1
 800eee6:	d1f2      	bne.n	800eece <sbrk_aligned+0x22>
 800eee8:	e7ef      	b.n	800eeca <sbrk_aligned+0x1e>
 800eeea:	bf00      	nop
 800eeec:	200025e4 	.word	0x200025e4

0800eef0 <_malloc_r>:
 800eef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eef4:	1ccd      	adds	r5, r1, #3
 800eef6:	f025 0503 	bic.w	r5, r5, #3
 800eefa:	3508      	adds	r5, #8
 800eefc:	2d0c      	cmp	r5, #12
 800eefe:	bf38      	it	cc
 800ef00:	250c      	movcc	r5, #12
 800ef02:	2d00      	cmp	r5, #0
 800ef04:	4606      	mov	r6, r0
 800ef06:	db01      	blt.n	800ef0c <_malloc_r+0x1c>
 800ef08:	42a9      	cmp	r1, r5
 800ef0a:	d904      	bls.n	800ef16 <_malloc_r+0x26>
 800ef0c:	230c      	movs	r3, #12
 800ef0e:	6033      	str	r3, [r6, #0]
 800ef10:	2000      	movs	r0, #0
 800ef12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800efec <_malloc_r+0xfc>
 800ef1a:	f000 f869 	bl	800eff0 <__malloc_lock>
 800ef1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ef22:	461c      	mov	r4, r3
 800ef24:	bb44      	cbnz	r4, 800ef78 <_malloc_r+0x88>
 800ef26:	4629      	mov	r1, r5
 800ef28:	4630      	mov	r0, r6
 800ef2a:	f7ff ffbf 	bl	800eeac <sbrk_aligned>
 800ef2e:	1c43      	adds	r3, r0, #1
 800ef30:	4604      	mov	r4, r0
 800ef32:	d158      	bne.n	800efe6 <_malloc_r+0xf6>
 800ef34:	f8d8 4000 	ldr.w	r4, [r8]
 800ef38:	4627      	mov	r7, r4
 800ef3a:	2f00      	cmp	r7, #0
 800ef3c:	d143      	bne.n	800efc6 <_malloc_r+0xd6>
 800ef3e:	2c00      	cmp	r4, #0
 800ef40:	d04b      	beq.n	800efda <_malloc_r+0xea>
 800ef42:	6823      	ldr	r3, [r4, #0]
 800ef44:	4639      	mov	r1, r7
 800ef46:	4630      	mov	r0, r6
 800ef48:	eb04 0903 	add.w	r9, r4, r3
 800ef4c:	f000 ffba 	bl	800fec4 <_sbrk_r>
 800ef50:	4581      	cmp	r9, r0
 800ef52:	d142      	bne.n	800efda <_malloc_r+0xea>
 800ef54:	6821      	ldr	r1, [r4, #0]
 800ef56:	1a6d      	subs	r5, r5, r1
 800ef58:	4629      	mov	r1, r5
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	f7ff ffa6 	bl	800eeac <sbrk_aligned>
 800ef60:	3001      	adds	r0, #1
 800ef62:	d03a      	beq.n	800efda <_malloc_r+0xea>
 800ef64:	6823      	ldr	r3, [r4, #0]
 800ef66:	442b      	add	r3, r5
 800ef68:	6023      	str	r3, [r4, #0]
 800ef6a:	f8d8 3000 	ldr.w	r3, [r8]
 800ef6e:	685a      	ldr	r2, [r3, #4]
 800ef70:	bb62      	cbnz	r2, 800efcc <_malloc_r+0xdc>
 800ef72:	f8c8 7000 	str.w	r7, [r8]
 800ef76:	e00f      	b.n	800ef98 <_malloc_r+0xa8>
 800ef78:	6822      	ldr	r2, [r4, #0]
 800ef7a:	1b52      	subs	r2, r2, r5
 800ef7c:	d420      	bmi.n	800efc0 <_malloc_r+0xd0>
 800ef7e:	2a0b      	cmp	r2, #11
 800ef80:	d917      	bls.n	800efb2 <_malloc_r+0xc2>
 800ef82:	1961      	adds	r1, r4, r5
 800ef84:	42a3      	cmp	r3, r4
 800ef86:	6025      	str	r5, [r4, #0]
 800ef88:	bf18      	it	ne
 800ef8a:	6059      	strne	r1, [r3, #4]
 800ef8c:	6863      	ldr	r3, [r4, #4]
 800ef8e:	bf08      	it	eq
 800ef90:	f8c8 1000 	streq.w	r1, [r8]
 800ef94:	5162      	str	r2, [r4, r5]
 800ef96:	604b      	str	r3, [r1, #4]
 800ef98:	4630      	mov	r0, r6
 800ef9a:	f000 f82f 	bl	800effc <__malloc_unlock>
 800ef9e:	f104 000b 	add.w	r0, r4, #11
 800efa2:	1d23      	adds	r3, r4, #4
 800efa4:	f020 0007 	bic.w	r0, r0, #7
 800efa8:	1ac2      	subs	r2, r0, r3
 800efaa:	bf1c      	itt	ne
 800efac:	1a1b      	subne	r3, r3, r0
 800efae:	50a3      	strne	r3, [r4, r2]
 800efb0:	e7af      	b.n	800ef12 <_malloc_r+0x22>
 800efb2:	6862      	ldr	r2, [r4, #4]
 800efb4:	42a3      	cmp	r3, r4
 800efb6:	bf0c      	ite	eq
 800efb8:	f8c8 2000 	streq.w	r2, [r8]
 800efbc:	605a      	strne	r2, [r3, #4]
 800efbe:	e7eb      	b.n	800ef98 <_malloc_r+0xa8>
 800efc0:	4623      	mov	r3, r4
 800efc2:	6864      	ldr	r4, [r4, #4]
 800efc4:	e7ae      	b.n	800ef24 <_malloc_r+0x34>
 800efc6:	463c      	mov	r4, r7
 800efc8:	687f      	ldr	r7, [r7, #4]
 800efca:	e7b6      	b.n	800ef3a <_malloc_r+0x4a>
 800efcc:	461a      	mov	r2, r3
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	42a3      	cmp	r3, r4
 800efd2:	d1fb      	bne.n	800efcc <_malloc_r+0xdc>
 800efd4:	2300      	movs	r3, #0
 800efd6:	6053      	str	r3, [r2, #4]
 800efd8:	e7de      	b.n	800ef98 <_malloc_r+0xa8>
 800efda:	230c      	movs	r3, #12
 800efdc:	6033      	str	r3, [r6, #0]
 800efde:	4630      	mov	r0, r6
 800efe0:	f000 f80c 	bl	800effc <__malloc_unlock>
 800efe4:	e794      	b.n	800ef10 <_malloc_r+0x20>
 800efe6:	6005      	str	r5, [r0, #0]
 800efe8:	e7d6      	b.n	800ef98 <_malloc_r+0xa8>
 800efea:	bf00      	nop
 800efec:	200025e8 	.word	0x200025e8

0800eff0 <__malloc_lock>:
 800eff0:	4801      	ldr	r0, [pc, #4]	@ (800eff8 <__malloc_lock+0x8>)
 800eff2:	f7ff b89e 	b.w	800e132 <__retarget_lock_acquire_recursive>
 800eff6:	bf00      	nop
 800eff8:	200025e0 	.word	0x200025e0

0800effc <__malloc_unlock>:
 800effc:	4801      	ldr	r0, [pc, #4]	@ (800f004 <__malloc_unlock+0x8>)
 800effe:	f7ff b899 	b.w	800e134 <__retarget_lock_release_recursive>
 800f002:	bf00      	nop
 800f004:	200025e0 	.word	0x200025e0

0800f008 <_Balloc>:
 800f008:	b570      	push	{r4, r5, r6, lr}
 800f00a:	69c6      	ldr	r6, [r0, #28]
 800f00c:	4604      	mov	r4, r0
 800f00e:	460d      	mov	r5, r1
 800f010:	b976      	cbnz	r6, 800f030 <_Balloc+0x28>
 800f012:	2010      	movs	r0, #16
 800f014:	f7ff ff42 	bl	800ee9c <malloc>
 800f018:	4602      	mov	r2, r0
 800f01a:	61e0      	str	r0, [r4, #28]
 800f01c:	b920      	cbnz	r0, 800f028 <_Balloc+0x20>
 800f01e:	4b18      	ldr	r3, [pc, #96]	@ (800f080 <_Balloc+0x78>)
 800f020:	4818      	ldr	r0, [pc, #96]	@ (800f084 <_Balloc+0x7c>)
 800f022:	216b      	movs	r1, #107	@ 0x6b
 800f024:	f000 ff5e 	bl	800fee4 <__assert_func>
 800f028:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f02c:	6006      	str	r6, [r0, #0]
 800f02e:	60c6      	str	r6, [r0, #12]
 800f030:	69e6      	ldr	r6, [r4, #28]
 800f032:	68f3      	ldr	r3, [r6, #12]
 800f034:	b183      	cbz	r3, 800f058 <_Balloc+0x50>
 800f036:	69e3      	ldr	r3, [r4, #28]
 800f038:	68db      	ldr	r3, [r3, #12]
 800f03a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f03e:	b9b8      	cbnz	r0, 800f070 <_Balloc+0x68>
 800f040:	2101      	movs	r1, #1
 800f042:	fa01 f605 	lsl.w	r6, r1, r5
 800f046:	1d72      	adds	r2, r6, #5
 800f048:	0092      	lsls	r2, r2, #2
 800f04a:	4620      	mov	r0, r4
 800f04c:	f000 ff68 	bl	800ff20 <_calloc_r>
 800f050:	b160      	cbz	r0, 800f06c <_Balloc+0x64>
 800f052:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f056:	e00e      	b.n	800f076 <_Balloc+0x6e>
 800f058:	2221      	movs	r2, #33	@ 0x21
 800f05a:	2104      	movs	r1, #4
 800f05c:	4620      	mov	r0, r4
 800f05e:	f000 ff5f 	bl	800ff20 <_calloc_r>
 800f062:	69e3      	ldr	r3, [r4, #28]
 800f064:	60f0      	str	r0, [r6, #12]
 800f066:	68db      	ldr	r3, [r3, #12]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d1e4      	bne.n	800f036 <_Balloc+0x2e>
 800f06c:	2000      	movs	r0, #0
 800f06e:	bd70      	pop	{r4, r5, r6, pc}
 800f070:	6802      	ldr	r2, [r0, #0]
 800f072:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f076:	2300      	movs	r3, #0
 800f078:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f07c:	e7f7      	b.n	800f06e <_Balloc+0x66>
 800f07e:	bf00      	nop
 800f080:	08010bb7 	.word	0x08010bb7
 800f084:	08010c37 	.word	0x08010c37

0800f088 <_Bfree>:
 800f088:	b570      	push	{r4, r5, r6, lr}
 800f08a:	69c6      	ldr	r6, [r0, #28]
 800f08c:	4605      	mov	r5, r0
 800f08e:	460c      	mov	r4, r1
 800f090:	b976      	cbnz	r6, 800f0b0 <_Bfree+0x28>
 800f092:	2010      	movs	r0, #16
 800f094:	f7ff ff02 	bl	800ee9c <malloc>
 800f098:	4602      	mov	r2, r0
 800f09a:	61e8      	str	r0, [r5, #28]
 800f09c:	b920      	cbnz	r0, 800f0a8 <_Bfree+0x20>
 800f09e:	4b09      	ldr	r3, [pc, #36]	@ (800f0c4 <_Bfree+0x3c>)
 800f0a0:	4809      	ldr	r0, [pc, #36]	@ (800f0c8 <_Bfree+0x40>)
 800f0a2:	218f      	movs	r1, #143	@ 0x8f
 800f0a4:	f000 ff1e 	bl	800fee4 <__assert_func>
 800f0a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0ac:	6006      	str	r6, [r0, #0]
 800f0ae:	60c6      	str	r6, [r0, #12]
 800f0b0:	b13c      	cbz	r4, 800f0c2 <_Bfree+0x3a>
 800f0b2:	69eb      	ldr	r3, [r5, #28]
 800f0b4:	6862      	ldr	r2, [r4, #4]
 800f0b6:	68db      	ldr	r3, [r3, #12]
 800f0b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f0bc:	6021      	str	r1, [r4, #0]
 800f0be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f0c2:	bd70      	pop	{r4, r5, r6, pc}
 800f0c4:	08010bb7 	.word	0x08010bb7
 800f0c8:	08010c37 	.word	0x08010c37

0800f0cc <__multadd>:
 800f0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0d0:	690d      	ldr	r5, [r1, #16]
 800f0d2:	4607      	mov	r7, r0
 800f0d4:	460c      	mov	r4, r1
 800f0d6:	461e      	mov	r6, r3
 800f0d8:	f101 0c14 	add.w	ip, r1, #20
 800f0dc:	2000      	movs	r0, #0
 800f0de:	f8dc 3000 	ldr.w	r3, [ip]
 800f0e2:	b299      	uxth	r1, r3
 800f0e4:	fb02 6101 	mla	r1, r2, r1, r6
 800f0e8:	0c1e      	lsrs	r6, r3, #16
 800f0ea:	0c0b      	lsrs	r3, r1, #16
 800f0ec:	fb02 3306 	mla	r3, r2, r6, r3
 800f0f0:	b289      	uxth	r1, r1
 800f0f2:	3001      	adds	r0, #1
 800f0f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f0f8:	4285      	cmp	r5, r0
 800f0fa:	f84c 1b04 	str.w	r1, [ip], #4
 800f0fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f102:	dcec      	bgt.n	800f0de <__multadd+0x12>
 800f104:	b30e      	cbz	r6, 800f14a <__multadd+0x7e>
 800f106:	68a3      	ldr	r3, [r4, #8]
 800f108:	42ab      	cmp	r3, r5
 800f10a:	dc19      	bgt.n	800f140 <__multadd+0x74>
 800f10c:	6861      	ldr	r1, [r4, #4]
 800f10e:	4638      	mov	r0, r7
 800f110:	3101      	adds	r1, #1
 800f112:	f7ff ff79 	bl	800f008 <_Balloc>
 800f116:	4680      	mov	r8, r0
 800f118:	b928      	cbnz	r0, 800f126 <__multadd+0x5a>
 800f11a:	4602      	mov	r2, r0
 800f11c:	4b0c      	ldr	r3, [pc, #48]	@ (800f150 <__multadd+0x84>)
 800f11e:	480d      	ldr	r0, [pc, #52]	@ (800f154 <__multadd+0x88>)
 800f120:	21ba      	movs	r1, #186	@ 0xba
 800f122:	f000 fedf 	bl	800fee4 <__assert_func>
 800f126:	6922      	ldr	r2, [r4, #16]
 800f128:	3202      	adds	r2, #2
 800f12a:	f104 010c 	add.w	r1, r4, #12
 800f12e:	0092      	lsls	r2, r2, #2
 800f130:	300c      	adds	r0, #12
 800f132:	f7ff f800 	bl	800e136 <memcpy>
 800f136:	4621      	mov	r1, r4
 800f138:	4638      	mov	r0, r7
 800f13a:	f7ff ffa5 	bl	800f088 <_Bfree>
 800f13e:	4644      	mov	r4, r8
 800f140:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f144:	3501      	adds	r5, #1
 800f146:	615e      	str	r6, [r3, #20]
 800f148:	6125      	str	r5, [r4, #16]
 800f14a:	4620      	mov	r0, r4
 800f14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f150:	08010c26 	.word	0x08010c26
 800f154:	08010c37 	.word	0x08010c37

0800f158 <__hi0bits>:
 800f158:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f15c:	4603      	mov	r3, r0
 800f15e:	bf36      	itet	cc
 800f160:	0403      	lslcc	r3, r0, #16
 800f162:	2000      	movcs	r0, #0
 800f164:	2010      	movcc	r0, #16
 800f166:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f16a:	bf3c      	itt	cc
 800f16c:	021b      	lslcc	r3, r3, #8
 800f16e:	3008      	addcc	r0, #8
 800f170:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f174:	bf3c      	itt	cc
 800f176:	011b      	lslcc	r3, r3, #4
 800f178:	3004      	addcc	r0, #4
 800f17a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f17e:	bf3c      	itt	cc
 800f180:	009b      	lslcc	r3, r3, #2
 800f182:	3002      	addcc	r0, #2
 800f184:	2b00      	cmp	r3, #0
 800f186:	db05      	blt.n	800f194 <__hi0bits+0x3c>
 800f188:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f18c:	f100 0001 	add.w	r0, r0, #1
 800f190:	bf08      	it	eq
 800f192:	2020      	moveq	r0, #32
 800f194:	4770      	bx	lr

0800f196 <__lo0bits>:
 800f196:	6803      	ldr	r3, [r0, #0]
 800f198:	4602      	mov	r2, r0
 800f19a:	f013 0007 	ands.w	r0, r3, #7
 800f19e:	d00b      	beq.n	800f1b8 <__lo0bits+0x22>
 800f1a0:	07d9      	lsls	r1, r3, #31
 800f1a2:	d421      	bmi.n	800f1e8 <__lo0bits+0x52>
 800f1a4:	0798      	lsls	r0, r3, #30
 800f1a6:	bf49      	itett	mi
 800f1a8:	085b      	lsrmi	r3, r3, #1
 800f1aa:	089b      	lsrpl	r3, r3, #2
 800f1ac:	2001      	movmi	r0, #1
 800f1ae:	6013      	strmi	r3, [r2, #0]
 800f1b0:	bf5c      	itt	pl
 800f1b2:	6013      	strpl	r3, [r2, #0]
 800f1b4:	2002      	movpl	r0, #2
 800f1b6:	4770      	bx	lr
 800f1b8:	b299      	uxth	r1, r3
 800f1ba:	b909      	cbnz	r1, 800f1c0 <__lo0bits+0x2a>
 800f1bc:	0c1b      	lsrs	r3, r3, #16
 800f1be:	2010      	movs	r0, #16
 800f1c0:	b2d9      	uxtb	r1, r3
 800f1c2:	b909      	cbnz	r1, 800f1c8 <__lo0bits+0x32>
 800f1c4:	3008      	adds	r0, #8
 800f1c6:	0a1b      	lsrs	r3, r3, #8
 800f1c8:	0719      	lsls	r1, r3, #28
 800f1ca:	bf04      	itt	eq
 800f1cc:	091b      	lsreq	r3, r3, #4
 800f1ce:	3004      	addeq	r0, #4
 800f1d0:	0799      	lsls	r1, r3, #30
 800f1d2:	bf04      	itt	eq
 800f1d4:	089b      	lsreq	r3, r3, #2
 800f1d6:	3002      	addeq	r0, #2
 800f1d8:	07d9      	lsls	r1, r3, #31
 800f1da:	d403      	bmi.n	800f1e4 <__lo0bits+0x4e>
 800f1dc:	085b      	lsrs	r3, r3, #1
 800f1de:	f100 0001 	add.w	r0, r0, #1
 800f1e2:	d003      	beq.n	800f1ec <__lo0bits+0x56>
 800f1e4:	6013      	str	r3, [r2, #0]
 800f1e6:	4770      	bx	lr
 800f1e8:	2000      	movs	r0, #0
 800f1ea:	4770      	bx	lr
 800f1ec:	2020      	movs	r0, #32
 800f1ee:	4770      	bx	lr

0800f1f0 <__i2b>:
 800f1f0:	b510      	push	{r4, lr}
 800f1f2:	460c      	mov	r4, r1
 800f1f4:	2101      	movs	r1, #1
 800f1f6:	f7ff ff07 	bl	800f008 <_Balloc>
 800f1fa:	4602      	mov	r2, r0
 800f1fc:	b928      	cbnz	r0, 800f20a <__i2b+0x1a>
 800f1fe:	4b05      	ldr	r3, [pc, #20]	@ (800f214 <__i2b+0x24>)
 800f200:	4805      	ldr	r0, [pc, #20]	@ (800f218 <__i2b+0x28>)
 800f202:	f240 1145 	movw	r1, #325	@ 0x145
 800f206:	f000 fe6d 	bl	800fee4 <__assert_func>
 800f20a:	2301      	movs	r3, #1
 800f20c:	6144      	str	r4, [r0, #20]
 800f20e:	6103      	str	r3, [r0, #16]
 800f210:	bd10      	pop	{r4, pc}
 800f212:	bf00      	nop
 800f214:	08010c26 	.word	0x08010c26
 800f218:	08010c37 	.word	0x08010c37

0800f21c <__multiply>:
 800f21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f220:	4617      	mov	r7, r2
 800f222:	690a      	ldr	r2, [r1, #16]
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	429a      	cmp	r2, r3
 800f228:	bfa8      	it	ge
 800f22a:	463b      	movge	r3, r7
 800f22c:	4689      	mov	r9, r1
 800f22e:	bfa4      	itt	ge
 800f230:	460f      	movge	r7, r1
 800f232:	4699      	movge	r9, r3
 800f234:	693d      	ldr	r5, [r7, #16]
 800f236:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	6879      	ldr	r1, [r7, #4]
 800f23e:	eb05 060a 	add.w	r6, r5, sl
 800f242:	42b3      	cmp	r3, r6
 800f244:	b085      	sub	sp, #20
 800f246:	bfb8      	it	lt
 800f248:	3101      	addlt	r1, #1
 800f24a:	f7ff fedd 	bl	800f008 <_Balloc>
 800f24e:	b930      	cbnz	r0, 800f25e <__multiply+0x42>
 800f250:	4602      	mov	r2, r0
 800f252:	4b41      	ldr	r3, [pc, #260]	@ (800f358 <__multiply+0x13c>)
 800f254:	4841      	ldr	r0, [pc, #260]	@ (800f35c <__multiply+0x140>)
 800f256:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f25a:	f000 fe43 	bl	800fee4 <__assert_func>
 800f25e:	f100 0414 	add.w	r4, r0, #20
 800f262:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f266:	4623      	mov	r3, r4
 800f268:	2200      	movs	r2, #0
 800f26a:	4573      	cmp	r3, lr
 800f26c:	d320      	bcc.n	800f2b0 <__multiply+0x94>
 800f26e:	f107 0814 	add.w	r8, r7, #20
 800f272:	f109 0114 	add.w	r1, r9, #20
 800f276:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f27a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f27e:	9302      	str	r3, [sp, #8]
 800f280:	1beb      	subs	r3, r5, r7
 800f282:	3b15      	subs	r3, #21
 800f284:	f023 0303 	bic.w	r3, r3, #3
 800f288:	3304      	adds	r3, #4
 800f28a:	3715      	adds	r7, #21
 800f28c:	42bd      	cmp	r5, r7
 800f28e:	bf38      	it	cc
 800f290:	2304      	movcc	r3, #4
 800f292:	9301      	str	r3, [sp, #4]
 800f294:	9b02      	ldr	r3, [sp, #8]
 800f296:	9103      	str	r1, [sp, #12]
 800f298:	428b      	cmp	r3, r1
 800f29a:	d80c      	bhi.n	800f2b6 <__multiply+0x9a>
 800f29c:	2e00      	cmp	r6, #0
 800f29e:	dd03      	ble.n	800f2a8 <__multiply+0x8c>
 800f2a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d055      	beq.n	800f354 <__multiply+0x138>
 800f2a8:	6106      	str	r6, [r0, #16]
 800f2aa:	b005      	add	sp, #20
 800f2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b0:	f843 2b04 	str.w	r2, [r3], #4
 800f2b4:	e7d9      	b.n	800f26a <__multiply+0x4e>
 800f2b6:	f8b1 a000 	ldrh.w	sl, [r1]
 800f2ba:	f1ba 0f00 	cmp.w	sl, #0
 800f2be:	d01f      	beq.n	800f300 <__multiply+0xe4>
 800f2c0:	46c4      	mov	ip, r8
 800f2c2:	46a1      	mov	r9, r4
 800f2c4:	2700      	movs	r7, #0
 800f2c6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f2ca:	f8d9 3000 	ldr.w	r3, [r9]
 800f2ce:	fa1f fb82 	uxth.w	fp, r2
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	fb0a 330b 	mla	r3, sl, fp, r3
 800f2d8:	443b      	add	r3, r7
 800f2da:	f8d9 7000 	ldr.w	r7, [r9]
 800f2de:	0c12      	lsrs	r2, r2, #16
 800f2e0:	0c3f      	lsrs	r7, r7, #16
 800f2e2:	fb0a 7202 	mla	r2, sl, r2, r7
 800f2e6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f2f0:	4565      	cmp	r5, ip
 800f2f2:	f849 3b04 	str.w	r3, [r9], #4
 800f2f6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f2fa:	d8e4      	bhi.n	800f2c6 <__multiply+0xaa>
 800f2fc:	9b01      	ldr	r3, [sp, #4]
 800f2fe:	50e7      	str	r7, [r4, r3]
 800f300:	9b03      	ldr	r3, [sp, #12]
 800f302:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f306:	3104      	adds	r1, #4
 800f308:	f1b9 0f00 	cmp.w	r9, #0
 800f30c:	d020      	beq.n	800f350 <__multiply+0x134>
 800f30e:	6823      	ldr	r3, [r4, #0]
 800f310:	4647      	mov	r7, r8
 800f312:	46a4      	mov	ip, r4
 800f314:	f04f 0a00 	mov.w	sl, #0
 800f318:	f8b7 b000 	ldrh.w	fp, [r7]
 800f31c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f320:	fb09 220b 	mla	r2, r9, fp, r2
 800f324:	4452      	add	r2, sl
 800f326:	b29b      	uxth	r3, r3
 800f328:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f32c:	f84c 3b04 	str.w	r3, [ip], #4
 800f330:	f857 3b04 	ldr.w	r3, [r7], #4
 800f334:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f338:	f8bc 3000 	ldrh.w	r3, [ip]
 800f33c:	fb09 330a 	mla	r3, r9, sl, r3
 800f340:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f344:	42bd      	cmp	r5, r7
 800f346:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f34a:	d8e5      	bhi.n	800f318 <__multiply+0xfc>
 800f34c:	9a01      	ldr	r2, [sp, #4]
 800f34e:	50a3      	str	r3, [r4, r2]
 800f350:	3404      	adds	r4, #4
 800f352:	e79f      	b.n	800f294 <__multiply+0x78>
 800f354:	3e01      	subs	r6, #1
 800f356:	e7a1      	b.n	800f29c <__multiply+0x80>
 800f358:	08010c26 	.word	0x08010c26
 800f35c:	08010c37 	.word	0x08010c37

0800f360 <__pow5mult>:
 800f360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f364:	4615      	mov	r5, r2
 800f366:	f012 0203 	ands.w	r2, r2, #3
 800f36a:	4607      	mov	r7, r0
 800f36c:	460e      	mov	r6, r1
 800f36e:	d007      	beq.n	800f380 <__pow5mult+0x20>
 800f370:	4c25      	ldr	r4, [pc, #148]	@ (800f408 <__pow5mult+0xa8>)
 800f372:	3a01      	subs	r2, #1
 800f374:	2300      	movs	r3, #0
 800f376:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f37a:	f7ff fea7 	bl	800f0cc <__multadd>
 800f37e:	4606      	mov	r6, r0
 800f380:	10ad      	asrs	r5, r5, #2
 800f382:	d03d      	beq.n	800f400 <__pow5mult+0xa0>
 800f384:	69fc      	ldr	r4, [r7, #28]
 800f386:	b97c      	cbnz	r4, 800f3a8 <__pow5mult+0x48>
 800f388:	2010      	movs	r0, #16
 800f38a:	f7ff fd87 	bl	800ee9c <malloc>
 800f38e:	4602      	mov	r2, r0
 800f390:	61f8      	str	r0, [r7, #28]
 800f392:	b928      	cbnz	r0, 800f3a0 <__pow5mult+0x40>
 800f394:	4b1d      	ldr	r3, [pc, #116]	@ (800f40c <__pow5mult+0xac>)
 800f396:	481e      	ldr	r0, [pc, #120]	@ (800f410 <__pow5mult+0xb0>)
 800f398:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f39c:	f000 fda2 	bl	800fee4 <__assert_func>
 800f3a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f3a4:	6004      	str	r4, [r0, #0]
 800f3a6:	60c4      	str	r4, [r0, #12]
 800f3a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f3ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f3b0:	b94c      	cbnz	r4, 800f3c6 <__pow5mult+0x66>
 800f3b2:	f240 2171 	movw	r1, #625	@ 0x271
 800f3b6:	4638      	mov	r0, r7
 800f3b8:	f7ff ff1a 	bl	800f1f0 <__i2b>
 800f3bc:	2300      	movs	r3, #0
 800f3be:	f8c8 0008 	str.w	r0, [r8, #8]
 800f3c2:	4604      	mov	r4, r0
 800f3c4:	6003      	str	r3, [r0, #0]
 800f3c6:	f04f 0900 	mov.w	r9, #0
 800f3ca:	07eb      	lsls	r3, r5, #31
 800f3cc:	d50a      	bpl.n	800f3e4 <__pow5mult+0x84>
 800f3ce:	4631      	mov	r1, r6
 800f3d0:	4622      	mov	r2, r4
 800f3d2:	4638      	mov	r0, r7
 800f3d4:	f7ff ff22 	bl	800f21c <__multiply>
 800f3d8:	4631      	mov	r1, r6
 800f3da:	4680      	mov	r8, r0
 800f3dc:	4638      	mov	r0, r7
 800f3de:	f7ff fe53 	bl	800f088 <_Bfree>
 800f3e2:	4646      	mov	r6, r8
 800f3e4:	106d      	asrs	r5, r5, #1
 800f3e6:	d00b      	beq.n	800f400 <__pow5mult+0xa0>
 800f3e8:	6820      	ldr	r0, [r4, #0]
 800f3ea:	b938      	cbnz	r0, 800f3fc <__pow5mult+0x9c>
 800f3ec:	4622      	mov	r2, r4
 800f3ee:	4621      	mov	r1, r4
 800f3f0:	4638      	mov	r0, r7
 800f3f2:	f7ff ff13 	bl	800f21c <__multiply>
 800f3f6:	6020      	str	r0, [r4, #0]
 800f3f8:	f8c0 9000 	str.w	r9, [r0]
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	e7e4      	b.n	800f3ca <__pow5mult+0x6a>
 800f400:	4630      	mov	r0, r6
 800f402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f406:	bf00      	nop
 800f408:	08010ce8 	.word	0x08010ce8
 800f40c:	08010bb7 	.word	0x08010bb7
 800f410:	08010c37 	.word	0x08010c37

0800f414 <__lshift>:
 800f414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f418:	460c      	mov	r4, r1
 800f41a:	6849      	ldr	r1, [r1, #4]
 800f41c:	6923      	ldr	r3, [r4, #16]
 800f41e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f422:	68a3      	ldr	r3, [r4, #8]
 800f424:	4607      	mov	r7, r0
 800f426:	4691      	mov	r9, r2
 800f428:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f42c:	f108 0601 	add.w	r6, r8, #1
 800f430:	42b3      	cmp	r3, r6
 800f432:	db0b      	blt.n	800f44c <__lshift+0x38>
 800f434:	4638      	mov	r0, r7
 800f436:	f7ff fde7 	bl	800f008 <_Balloc>
 800f43a:	4605      	mov	r5, r0
 800f43c:	b948      	cbnz	r0, 800f452 <__lshift+0x3e>
 800f43e:	4602      	mov	r2, r0
 800f440:	4b28      	ldr	r3, [pc, #160]	@ (800f4e4 <__lshift+0xd0>)
 800f442:	4829      	ldr	r0, [pc, #164]	@ (800f4e8 <__lshift+0xd4>)
 800f444:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f448:	f000 fd4c 	bl	800fee4 <__assert_func>
 800f44c:	3101      	adds	r1, #1
 800f44e:	005b      	lsls	r3, r3, #1
 800f450:	e7ee      	b.n	800f430 <__lshift+0x1c>
 800f452:	2300      	movs	r3, #0
 800f454:	f100 0114 	add.w	r1, r0, #20
 800f458:	f100 0210 	add.w	r2, r0, #16
 800f45c:	4618      	mov	r0, r3
 800f45e:	4553      	cmp	r3, sl
 800f460:	db33      	blt.n	800f4ca <__lshift+0xb6>
 800f462:	6920      	ldr	r0, [r4, #16]
 800f464:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f468:	f104 0314 	add.w	r3, r4, #20
 800f46c:	f019 091f 	ands.w	r9, r9, #31
 800f470:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f474:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f478:	d02b      	beq.n	800f4d2 <__lshift+0xbe>
 800f47a:	f1c9 0e20 	rsb	lr, r9, #32
 800f47e:	468a      	mov	sl, r1
 800f480:	2200      	movs	r2, #0
 800f482:	6818      	ldr	r0, [r3, #0]
 800f484:	fa00 f009 	lsl.w	r0, r0, r9
 800f488:	4310      	orrs	r0, r2
 800f48a:	f84a 0b04 	str.w	r0, [sl], #4
 800f48e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f492:	459c      	cmp	ip, r3
 800f494:	fa22 f20e 	lsr.w	r2, r2, lr
 800f498:	d8f3      	bhi.n	800f482 <__lshift+0x6e>
 800f49a:	ebac 0304 	sub.w	r3, ip, r4
 800f49e:	3b15      	subs	r3, #21
 800f4a0:	f023 0303 	bic.w	r3, r3, #3
 800f4a4:	3304      	adds	r3, #4
 800f4a6:	f104 0015 	add.w	r0, r4, #21
 800f4aa:	4560      	cmp	r0, ip
 800f4ac:	bf88      	it	hi
 800f4ae:	2304      	movhi	r3, #4
 800f4b0:	50ca      	str	r2, [r1, r3]
 800f4b2:	b10a      	cbz	r2, 800f4b8 <__lshift+0xa4>
 800f4b4:	f108 0602 	add.w	r6, r8, #2
 800f4b8:	3e01      	subs	r6, #1
 800f4ba:	4638      	mov	r0, r7
 800f4bc:	612e      	str	r6, [r5, #16]
 800f4be:	4621      	mov	r1, r4
 800f4c0:	f7ff fde2 	bl	800f088 <_Bfree>
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	e7c5      	b.n	800f45e <__lshift+0x4a>
 800f4d2:	3904      	subs	r1, #4
 800f4d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f4dc:	459c      	cmp	ip, r3
 800f4de:	d8f9      	bhi.n	800f4d4 <__lshift+0xc0>
 800f4e0:	e7ea      	b.n	800f4b8 <__lshift+0xa4>
 800f4e2:	bf00      	nop
 800f4e4:	08010c26 	.word	0x08010c26
 800f4e8:	08010c37 	.word	0x08010c37

0800f4ec <__mcmp>:
 800f4ec:	690a      	ldr	r2, [r1, #16]
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	6900      	ldr	r0, [r0, #16]
 800f4f2:	1a80      	subs	r0, r0, r2
 800f4f4:	b530      	push	{r4, r5, lr}
 800f4f6:	d10e      	bne.n	800f516 <__mcmp+0x2a>
 800f4f8:	3314      	adds	r3, #20
 800f4fa:	3114      	adds	r1, #20
 800f4fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f500:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f504:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f508:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f50c:	4295      	cmp	r5, r2
 800f50e:	d003      	beq.n	800f518 <__mcmp+0x2c>
 800f510:	d205      	bcs.n	800f51e <__mcmp+0x32>
 800f512:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f516:	bd30      	pop	{r4, r5, pc}
 800f518:	42a3      	cmp	r3, r4
 800f51a:	d3f3      	bcc.n	800f504 <__mcmp+0x18>
 800f51c:	e7fb      	b.n	800f516 <__mcmp+0x2a>
 800f51e:	2001      	movs	r0, #1
 800f520:	e7f9      	b.n	800f516 <__mcmp+0x2a>
	...

0800f524 <__mdiff>:
 800f524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f528:	4689      	mov	r9, r1
 800f52a:	4606      	mov	r6, r0
 800f52c:	4611      	mov	r1, r2
 800f52e:	4648      	mov	r0, r9
 800f530:	4614      	mov	r4, r2
 800f532:	f7ff ffdb 	bl	800f4ec <__mcmp>
 800f536:	1e05      	subs	r5, r0, #0
 800f538:	d112      	bne.n	800f560 <__mdiff+0x3c>
 800f53a:	4629      	mov	r1, r5
 800f53c:	4630      	mov	r0, r6
 800f53e:	f7ff fd63 	bl	800f008 <_Balloc>
 800f542:	4602      	mov	r2, r0
 800f544:	b928      	cbnz	r0, 800f552 <__mdiff+0x2e>
 800f546:	4b3f      	ldr	r3, [pc, #252]	@ (800f644 <__mdiff+0x120>)
 800f548:	f240 2137 	movw	r1, #567	@ 0x237
 800f54c:	483e      	ldr	r0, [pc, #248]	@ (800f648 <__mdiff+0x124>)
 800f54e:	f000 fcc9 	bl	800fee4 <__assert_func>
 800f552:	2301      	movs	r3, #1
 800f554:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f558:	4610      	mov	r0, r2
 800f55a:	b003      	add	sp, #12
 800f55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f560:	bfbc      	itt	lt
 800f562:	464b      	movlt	r3, r9
 800f564:	46a1      	movlt	r9, r4
 800f566:	4630      	mov	r0, r6
 800f568:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f56c:	bfba      	itte	lt
 800f56e:	461c      	movlt	r4, r3
 800f570:	2501      	movlt	r5, #1
 800f572:	2500      	movge	r5, #0
 800f574:	f7ff fd48 	bl	800f008 <_Balloc>
 800f578:	4602      	mov	r2, r0
 800f57a:	b918      	cbnz	r0, 800f584 <__mdiff+0x60>
 800f57c:	4b31      	ldr	r3, [pc, #196]	@ (800f644 <__mdiff+0x120>)
 800f57e:	f240 2145 	movw	r1, #581	@ 0x245
 800f582:	e7e3      	b.n	800f54c <__mdiff+0x28>
 800f584:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f588:	6926      	ldr	r6, [r4, #16]
 800f58a:	60c5      	str	r5, [r0, #12]
 800f58c:	f109 0310 	add.w	r3, r9, #16
 800f590:	f109 0514 	add.w	r5, r9, #20
 800f594:	f104 0e14 	add.w	lr, r4, #20
 800f598:	f100 0b14 	add.w	fp, r0, #20
 800f59c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f5a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f5a4:	9301      	str	r3, [sp, #4]
 800f5a6:	46d9      	mov	r9, fp
 800f5a8:	f04f 0c00 	mov.w	ip, #0
 800f5ac:	9b01      	ldr	r3, [sp, #4]
 800f5ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f5b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f5b6:	9301      	str	r3, [sp, #4]
 800f5b8:	fa1f f38a 	uxth.w	r3, sl
 800f5bc:	4619      	mov	r1, r3
 800f5be:	b283      	uxth	r3, r0
 800f5c0:	1acb      	subs	r3, r1, r3
 800f5c2:	0c00      	lsrs	r0, r0, #16
 800f5c4:	4463      	add	r3, ip
 800f5c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f5ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f5d4:	4576      	cmp	r6, lr
 800f5d6:	f849 3b04 	str.w	r3, [r9], #4
 800f5da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f5de:	d8e5      	bhi.n	800f5ac <__mdiff+0x88>
 800f5e0:	1b33      	subs	r3, r6, r4
 800f5e2:	3b15      	subs	r3, #21
 800f5e4:	f023 0303 	bic.w	r3, r3, #3
 800f5e8:	3415      	adds	r4, #21
 800f5ea:	3304      	adds	r3, #4
 800f5ec:	42a6      	cmp	r6, r4
 800f5ee:	bf38      	it	cc
 800f5f0:	2304      	movcc	r3, #4
 800f5f2:	441d      	add	r5, r3
 800f5f4:	445b      	add	r3, fp
 800f5f6:	461e      	mov	r6, r3
 800f5f8:	462c      	mov	r4, r5
 800f5fa:	4544      	cmp	r4, r8
 800f5fc:	d30e      	bcc.n	800f61c <__mdiff+0xf8>
 800f5fe:	f108 0103 	add.w	r1, r8, #3
 800f602:	1b49      	subs	r1, r1, r5
 800f604:	f021 0103 	bic.w	r1, r1, #3
 800f608:	3d03      	subs	r5, #3
 800f60a:	45a8      	cmp	r8, r5
 800f60c:	bf38      	it	cc
 800f60e:	2100      	movcc	r1, #0
 800f610:	440b      	add	r3, r1
 800f612:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f616:	b191      	cbz	r1, 800f63e <__mdiff+0x11a>
 800f618:	6117      	str	r7, [r2, #16]
 800f61a:	e79d      	b.n	800f558 <__mdiff+0x34>
 800f61c:	f854 1b04 	ldr.w	r1, [r4], #4
 800f620:	46e6      	mov	lr, ip
 800f622:	0c08      	lsrs	r0, r1, #16
 800f624:	fa1c fc81 	uxtah	ip, ip, r1
 800f628:	4471      	add	r1, lr
 800f62a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f62e:	b289      	uxth	r1, r1
 800f630:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f634:	f846 1b04 	str.w	r1, [r6], #4
 800f638:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f63c:	e7dd      	b.n	800f5fa <__mdiff+0xd6>
 800f63e:	3f01      	subs	r7, #1
 800f640:	e7e7      	b.n	800f612 <__mdiff+0xee>
 800f642:	bf00      	nop
 800f644:	08010c26 	.word	0x08010c26
 800f648:	08010c37 	.word	0x08010c37

0800f64c <__d2b>:
 800f64c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f650:	460f      	mov	r7, r1
 800f652:	2101      	movs	r1, #1
 800f654:	ec59 8b10 	vmov	r8, r9, d0
 800f658:	4616      	mov	r6, r2
 800f65a:	f7ff fcd5 	bl	800f008 <_Balloc>
 800f65e:	4604      	mov	r4, r0
 800f660:	b930      	cbnz	r0, 800f670 <__d2b+0x24>
 800f662:	4602      	mov	r2, r0
 800f664:	4b23      	ldr	r3, [pc, #140]	@ (800f6f4 <__d2b+0xa8>)
 800f666:	4824      	ldr	r0, [pc, #144]	@ (800f6f8 <__d2b+0xac>)
 800f668:	f240 310f 	movw	r1, #783	@ 0x30f
 800f66c:	f000 fc3a 	bl	800fee4 <__assert_func>
 800f670:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f674:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f678:	b10d      	cbz	r5, 800f67e <__d2b+0x32>
 800f67a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f67e:	9301      	str	r3, [sp, #4]
 800f680:	f1b8 0300 	subs.w	r3, r8, #0
 800f684:	d023      	beq.n	800f6ce <__d2b+0x82>
 800f686:	4668      	mov	r0, sp
 800f688:	9300      	str	r3, [sp, #0]
 800f68a:	f7ff fd84 	bl	800f196 <__lo0bits>
 800f68e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f692:	b1d0      	cbz	r0, 800f6ca <__d2b+0x7e>
 800f694:	f1c0 0320 	rsb	r3, r0, #32
 800f698:	fa02 f303 	lsl.w	r3, r2, r3
 800f69c:	430b      	orrs	r3, r1
 800f69e:	40c2      	lsrs	r2, r0
 800f6a0:	6163      	str	r3, [r4, #20]
 800f6a2:	9201      	str	r2, [sp, #4]
 800f6a4:	9b01      	ldr	r3, [sp, #4]
 800f6a6:	61a3      	str	r3, [r4, #24]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	bf0c      	ite	eq
 800f6ac:	2201      	moveq	r2, #1
 800f6ae:	2202      	movne	r2, #2
 800f6b0:	6122      	str	r2, [r4, #16]
 800f6b2:	b1a5      	cbz	r5, 800f6de <__d2b+0x92>
 800f6b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f6b8:	4405      	add	r5, r0
 800f6ba:	603d      	str	r5, [r7, #0]
 800f6bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f6c0:	6030      	str	r0, [r6, #0]
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	b003      	add	sp, #12
 800f6c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6ca:	6161      	str	r1, [r4, #20]
 800f6cc:	e7ea      	b.n	800f6a4 <__d2b+0x58>
 800f6ce:	a801      	add	r0, sp, #4
 800f6d0:	f7ff fd61 	bl	800f196 <__lo0bits>
 800f6d4:	9b01      	ldr	r3, [sp, #4]
 800f6d6:	6163      	str	r3, [r4, #20]
 800f6d8:	3020      	adds	r0, #32
 800f6da:	2201      	movs	r2, #1
 800f6dc:	e7e8      	b.n	800f6b0 <__d2b+0x64>
 800f6de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f6e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f6e6:	6038      	str	r0, [r7, #0]
 800f6e8:	6918      	ldr	r0, [r3, #16]
 800f6ea:	f7ff fd35 	bl	800f158 <__hi0bits>
 800f6ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f6f2:	e7e5      	b.n	800f6c0 <__d2b+0x74>
 800f6f4:	08010c26 	.word	0x08010c26
 800f6f8:	08010c37 	.word	0x08010c37

0800f6fc <__ssputs_r>:
 800f6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f700:	688e      	ldr	r6, [r1, #8]
 800f702:	461f      	mov	r7, r3
 800f704:	42be      	cmp	r6, r7
 800f706:	680b      	ldr	r3, [r1, #0]
 800f708:	4682      	mov	sl, r0
 800f70a:	460c      	mov	r4, r1
 800f70c:	4690      	mov	r8, r2
 800f70e:	d82d      	bhi.n	800f76c <__ssputs_r+0x70>
 800f710:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f714:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f718:	d026      	beq.n	800f768 <__ssputs_r+0x6c>
 800f71a:	6965      	ldr	r5, [r4, #20]
 800f71c:	6909      	ldr	r1, [r1, #16]
 800f71e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f722:	eba3 0901 	sub.w	r9, r3, r1
 800f726:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f72a:	1c7b      	adds	r3, r7, #1
 800f72c:	444b      	add	r3, r9
 800f72e:	106d      	asrs	r5, r5, #1
 800f730:	429d      	cmp	r5, r3
 800f732:	bf38      	it	cc
 800f734:	461d      	movcc	r5, r3
 800f736:	0553      	lsls	r3, r2, #21
 800f738:	d527      	bpl.n	800f78a <__ssputs_r+0x8e>
 800f73a:	4629      	mov	r1, r5
 800f73c:	f7ff fbd8 	bl	800eef0 <_malloc_r>
 800f740:	4606      	mov	r6, r0
 800f742:	b360      	cbz	r0, 800f79e <__ssputs_r+0xa2>
 800f744:	6921      	ldr	r1, [r4, #16]
 800f746:	464a      	mov	r2, r9
 800f748:	f7fe fcf5 	bl	800e136 <memcpy>
 800f74c:	89a3      	ldrh	r3, [r4, #12]
 800f74e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f756:	81a3      	strh	r3, [r4, #12]
 800f758:	6126      	str	r6, [r4, #16]
 800f75a:	6165      	str	r5, [r4, #20]
 800f75c:	444e      	add	r6, r9
 800f75e:	eba5 0509 	sub.w	r5, r5, r9
 800f762:	6026      	str	r6, [r4, #0]
 800f764:	60a5      	str	r5, [r4, #8]
 800f766:	463e      	mov	r6, r7
 800f768:	42be      	cmp	r6, r7
 800f76a:	d900      	bls.n	800f76e <__ssputs_r+0x72>
 800f76c:	463e      	mov	r6, r7
 800f76e:	6820      	ldr	r0, [r4, #0]
 800f770:	4632      	mov	r2, r6
 800f772:	4641      	mov	r1, r8
 800f774:	f000 fb6a 	bl	800fe4c <memmove>
 800f778:	68a3      	ldr	r3, [r4, #8]
 800f77a:	1b9b      	subs	r3, r3, r6
 800f77c:	60a3      	str	r3, [r4, #8]
 800f77e:	6823      	ldr	r3, [r4, #0]
 800f780:	4433      	add	r3, r6
 800f782:	6023      	str	r3, [r4, #0]
 800f784:	2000      	movs	r0, #0
 800f786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f78a:	462a      	mov	r2, r5
 800f78c:	f000 fbee 	bl	800ff6c <_realloc_r>
 800f790:	4606      	mov	r6, r0
 800f792:	2800      	cmp	r0, #0
 800f794:	d1e0      	bne.n	800f758 <__ssputs_r+0x5c>
 800f796:	6921      	ldr	r1, [r4, #16]
 800f798:	4650      	mov	r0, sl
 800f79a:	f7ff fb35 	bl	800ee08 <_free_r>
 800f79e:	230c      	movs	r3, #12
 800f7a0:	f8ca 3000 	str.w	r3, [sl]
 800f7a4:	89a3      	ldrh	r3, [r4, #12]
 800f7a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7aa:	81a3      	strh	r3, [r4, #12]
 800f7ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f7b0:	e7e9      	b.n	800f786 <__ssputs_r+0x8a>
	...

0800f7b4 <_svfiprintf_r>:
 800f7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b8:	4698      	mov	r8, r3
 800f7ba:	898b      	ldrh	r3, [r1, #12]
 800f7bc:	061b      	lsls	r3, r3, #24
 800f7be:	b09d      	sub	sp, #116	@ 0x74
 800f7c0:	4607      	mov	r7, r0
 800f7c2:	460d      	mov	r5, r1
 800f7c4:	4614      	mov	r4, r2
 800f7c6:	d510      	bpl.n	800f7ea <_svfiprintf_r+0x36>
 800f7c8:	690b      	ldr	r3, [r1, #16]
 800f7ca:	b973      	cbnz	r3, 800f7ea <_svfiprintf_r+0x36>
 800f7cc:	2140      	movs	r1, #64	@ 0x40
 800f7ce:	f7ff fb8f 	bl	800eef0 <_malloc_r>
 800f7d2:	6028      	str	r0, [r5, #0]
 800f7d4:	6128      	str	r0, [r5, #16]
 800f7d6:	b930      	cbnz	r0, 800f7e6 <_svfiprintf_r+0x32>
 800f7d8:	230c      	movs	r3, #12
 800f7da:	603b      	str	r3, [r7, #0]
 800f7dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f7e0:	b01d      	add	sp, #116	@ 0x74
 800f7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7e6:	2340      	movs	r3, #64	@ 0x40
 800f7e8:	616b      	str	r3, [r5, #20]
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7ee:	2320      	movs	r3, #32
 800f7f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f7f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7f8:	2330      	movs	r3, #48	@ 0x30
 800f7fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f998 <_svfiprintf_r+0x1e4>
 800f7fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f802:	f04f 0901 	mov.w	r9, #1
 800f806:	4623      	mov	r3, r4
 800f808:	469a      	mov	sl, r3
 800f80a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f80e:	b10a      	cbz	r2, 800f814 <_svfiprintf_r+0x60>
 800f810:	2a25      	cmp	r2, #37	@ 0x25
 800f812:	d1f9      	bne.n	800f808 <_svfiprintf_r+0x54>
 800f814:	ebba 0b04 	subs.w	fp, sl, r4
 800f818:	d00b      	beq.n	800f832 <_svfiprintf_r+0x7e>
 800f81a:	465b      	mov	r3, fp
 800f81c:	4622      	mov	r2, r4
 800f81e:	4629      	mov	r1, r5
 800f820:	4638      	mov	r0, r7
 800f822:	f7ff ff6b 	bl	800f6fc <__ssputs_r>
 800f826:	3001      	adds	r0, #1
 800f828:	f000 80a7 	beq.w	800f97a <_svfiprintf_r+0x1c6>
 800f82c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f82e:	445a      	add	r2, fp
 800f830:	9209      	str	r2, [sp, #36]	@ 0x24
 800f832:	f89a 3000 	ldrb.w	r3, [sl]
 800f836:	2b00      	cmp	r3, #0
 800f838:	f000 809f 	beq.w	800f97a <_svfiprintf_r+0x1c6>
 800f83c:	2300      	movs	r3, #0
 800f83e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f846:	f10a 0a01 	add.w	sl, sl, #1
 800f84a:	9304      	str	r3, [sp, #16]
 800f84c:	9307      	str	r3, [sp, #28]
 800f84e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f852:	931a      	str	r3, [sp, #104]	@ 0x68
 800f854:	4654      	mov	r4, sl
 800f856:	2205      	movs	r2, #5
 800f858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f85c:	484e      	ldr	r0, [pc, #312]	@ (800f998 <_svfiprintf_r+0x1e4>)
 800f85e:	f7f0 fcbf 	bl	80001e0 <memchr>
 800f862:	9a04      	ldr	r2, [sp, #16]
 800f864:	b9d8      	cbnz	r0, 800f89e <_svfiprintf_r+0xea>
 800f866:	06d0      	lsls	r0, r2, #27
 800f868:	bf44      	itt	mi
 800f86a:	2320      	movmi	r3, #32
 800f86c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f870:	0711      	lsls	r1, r2, #28
 800f872:	bf44      	itt	mi
 800f874:	232b      	movmi	r3, #43	@ 0x2b
 800f876:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f87a:	f89a 3000 	ldrb.w	r3, [sl]
 800f87e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f880:	d015      	beq.n	800f8ae <_svfiprintf_r+0xfa>
 800f882:	9a07      	ldr	r2, [sp, #28]
 800f884:	4654      	mov	r4, sl
 800f886:	2000      	movs	r0, #0
 800f888:	f04f 0c0a 	mov.w	ip, #10
 800f88c:	4621      	mov	r1, r4
 800f88e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f892:	3b30      	subs	r3, #48	@ 0x30
 800f894:	2b09      	cmp	r3, #9
 800f896:	d94b      	bls.n	800f930 <_svfiprintf_r+0x17c>
 800f898:	b1b0      	cbz	r0, 800f8c8 <_svfiprintf_r+0x114>
 800f89a:	9207      	str	r2, [sp, #28]
 800f89c:	e014      	b.n	800f8c8 <_svfiprintf_r+0x114>
 800f89e:	eba0 0308 	sub.w	r3, r0, r8
 800f8a2:	fa09 f303 	lsl.w	r3, r9, r3
 800f8a6:	4313      	orrs	r3, r2
 800f8a8:	9304      	str	r3, [sp, #16]
 800f8aa:	46a2      	mov	sl, r4
 800f8ac:	e7d2      	b.n	800f854 <_svfiprintf_r+0xa0>
 800f8ae:	9b03      	ldr	r3, [sp, #12]
 800f8b0:	1d19      	adds	r1, r3, #4
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	9103      	str	r1, [sp, #12]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	bfbb      	ittet	lt
 800f8ba:	425b      	neglt	r3, r3
 800f8bc:	f042 0202 	orrlt.w	r2, r2, #2
 800f8c0:	9307      	strge	r3, [sp, #28]
 800f8c2:	9307      	strlt	r3, [sp, #28]
 800f8c4:	bfb8      	it	lt
 800f8c6:	9204      	strlt	r2, [sp, #16]
 800f8c8:	7823      	ldrb	r3, [r4, #0]
 800f8ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8cc:	d10a      	bne.n	800f8e4 <_svfiprintf_r+0x130>
 800f8ce:	7863      	ldrb	r3, [r4, #1]
 800f8d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8d2:	d132      	bne.n	800f93a <_svfiprintf_r+0x186>
 800f8d4:	9b03      	ldr	r3, [sp, #12]
 800f8d6:	1d1a      	adds	r2, r3, #4
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	9203      	str	r2, [sp, #12]
 800f8dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8e0:	3402      	adds	r4, #2
 800f8e2:	9305      	str	r3, [sp, #20]
 800f8e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f9a8 <_svfiprintf_r+0x1f4>
 800f8e8:	7821      	ldrb	r1, [r4, #0]
 800f8ea:	2203      	movs	r2, #3
 800f8ec:	4650      	mov	r0, sl
 800f8ee:	f7f0 fc77 	bl	80001e0 <memchr>
 800f8f2:	b138      	cbz	r0, 800f904 <_svfiprintf_r+0x150>
 800f8f4:	9b04      	ldr	r3, [sp, #16]
 800f8f6:	eba0 000a 	sub.w	r0, r0, sl
 800f8fa:	2240      	movs	r2, #64	@ 0x40
 800f8fc:	4082      	lsls	r2, r0
 800f8fe:	4313      	orrs	r3, r2
 800f900:	3401      	adds	r4, #1
 800f902:	9304      	str	r3, [sp, #16]
 800f904:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f908:	4824      	ldr	r0, [pc, #144]	@ (800f99c <_svfiprintf_r+0x1e8>)
 800f90a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f90e:	2206      	movs	r2, #6
 800f910:	f7f0 fc66 	bl	80001e0 <memchr>
 800f914:	2800      	cmp	r0, #0
 800f916:	d036      	beq.n	800f986 <_svfiprintf_r+0x1d2>
 800f918:	4b21      	ldr	r3, [pc, #132]	@ (800f9a0 <_svfiprintf_r+0x1ec>)
 800f91a:	bb1b      	cbnz	r3, 800f964 <_svfiprintf_r+0x1b0>
 800f91c:	9b03      	ldr	r3, [sp, #12]
 800f91e:	3307      	adds	r3, #7
 800f920:	f023 0307 	bic.w	r3, r3, #7
 800f924:	3308      	adds	r3, #8
 800f926:	9303      	str	r3, [sp, #12]
 800f928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f92a:	4433      	add	r3, r6
 800f92c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f92e:	e76a      	b.n	800f806 <_svfiprintf_r+0x52>
 800f930:	fb0c 3202 	mla	r2, ip, r2, r3
 800f934:	460c      	mov	r4, r1
 800f936:	2001      	movs	r0, #1
 800f938:	e7a8      	b.n	800f88c <_svfiprintf_r+0xd8>
 800f93a:	2300      	movs	r3, #0
 800f93c:	3401      	adds	r4, #1
 800f93e:	9305      	str	r3, [sp, #20]
 800f940:	4619      	mov	r1, r3
 800f942:	f04f 0c0a 	mov.w	ip, #10
 800f946:	4620      	mov	r0, r4
 800f948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f94c:	3a30      	subs	r2, #48	@ 0x30
 800f94e:	2a09      	cmp	r2, #9
 800f950:	d903      	bls.n	800f95a <_svfiprintf_r+0x1a6>
 800f952:	2b00      	cmp	r3, #0
 800f954:	d0c6      	beq.n	800f8e4 <_svfiprintf_r+0x130>
 800f956:	9105      	str	r1, [sp, #20]
 800f958:	e7c4      	b.n	800f8e4 <_svfiprintf_r+0x130>
 800f95a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f95e:	4604      	mov	r4, r0
 800f960:	2301      	movs	r3, #1
 800f962:	e7f0      	b.n	800f946 <_svfiprintf_r+0x192>
 800f964:	ab03      	add	r3, sp, #12
 800f966:	9300      	str	r3, [sp, #0]
 800f968:	462a      	mov	r2, r5
 800f96a:	4b0e      	ldr	r3, [pc, #56]	@ (800f9a4 <_svfiprintf_r+0x1f0>)
 800f96c:	a904      	add	r1, sp, #16
 800f96e:	4638      	mov	r0, r7
 800f970:	f7fd fd66 	bl	800d440 <_printf_float>
 800f974:	1c42      	adds	r2, r0, #1
 800f976:	4606      	mov	r6, r0
 800f978:	d1d6      	bne.n	800f928 <_svfiprintf_r+0x174>
 800f97a:	89ab      	ldrh	r3, [r5, #12]
 800f97c:	065b      	lsls	r3, r3, #25
 800f97e:	f53f af2d 	bmi.w	800f7dc <_svfiprintf_r+0x28>
 800f982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f984:	e72c      	b.n	800f7e0 <_svfiprintf_r+0x2c>
 800f986:	ab03      	add	r3, sp, #12
 800f988:	9300      	str	r3, [sp, #0]
 800f98a:	462a      	mov	r2, r5
 800f98c:	4b05      	ldr	r3, [pc, #20]	@ (800f9a4 <_svfiprintf_r+0x1f0>)
 800f98e:	a904      	add	r1, sp, #16
 800f990:	4638      	mov	r0, r7
 800f992:	f7fd ffed 	bl	800d970 <_printf_i>
 800f996:	e7ed      	b.n	800f974 <_svfiprintf_r+0x1c0>
 800f998:	08010c90 	.word	0x08010c90
 800f99c:	08010c9a 	.word	0x08010c9a
 800f9a0:	0800d441 	.word	0x0800d441
 800f9a4:	0800f6fd 	.word	0x0800f6fd
 800f9a8:	08010c96 	.word	0x08010c96

0800f9ac <__sfputc_r>:
 800f9ac:	6893      	ldr	r3, [r2, #8]
 800f9ae:	3b01      	subs	r3, #1
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	b410      	push	{r4}
 800f9b4:	6093      	str	r3, [r2, #8]
 800f9b6:	da08      	bge.n	800f9ca <__sfputc_r+0x1e>
 800f9b8:	6994      	ldr	r4, [r2, #24]
 800f9ba:	42a3      	cmp	r3, r4
 800f9bc:	db01      	blt.n	800f9c2 <__sfputc_r+0x16>
 800f9be:	290a      	cmp	r1, #10
 800f9c0:	d103      	bne.n	800f9ca <__sfputc_r+0x1e>
 800f9c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9c6:	f7fe baa3 	b.w	800df10 <__swbuf_r>
 800f9ca:	6813      	ldr	r3, [r2, #0]
 800f9cc:	1c58      	adds	r0, r3, #1
 800f9ce:	6010      	str	r0, [r2, #0]
 800f9d0:	7019      	strb	r1, [r3, #0]
 800f9d2:	4608      	mov	r0, r1
 800f9d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9d8:	4770      	bx	lr

0800f9da <__sfputs_r>:
 800f9da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9dc:	4606      	mov	r6, r0
 800f9de:	460f      	mov	r7, r1
 800f9e0:	4614      	mov	r4, r2
 800f9e2:	18d5      	adds	r5, r2, r3
 800f9e4:	42ac      	cmp	r4, r5
 800f9e6:	d101      	bne.n	800f9ec <__sfputs_r+0x12>
 800f9e8:	2000      	movs	r0, #0
 800f9ea:	e007      	b.n	800f9fc <__sfputs_r+0x22>
 800f9ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9f0:	463a      	mov	r2, r7
 800f9f2:	4630      	mov	r0, r6
 800f9f4:	f7ff ffda 	bl	800f9ac <__sfputc_r>
 800f9f8:	1c43      	adds	r3, r0, #1
 800f9fa:	d1f3      	bne.n	800f9e4 <__sfputs_r+0xa>
 800f9fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa00 <_vfiprintf_r>:
 800fa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa04:	460d      	mov	r5, r1
 800fa06:	b09d      	sub	sp, #116	@ 0x74
 800fa08:	4614      	mov	r4, r2
 800fa0a:	4698      	mov	r8, r3
 800fa0c:	4606      	mov	r6, r0
 800fa0e:	b118      	cbz	r0, 800fa18 <_vfiprintf_r+0x18>
 800fa10:	6a03      	ldr	r3, [r0, #32]
 800fa12:	b90b      	cbnz	r3, 800fa18 <_vfiprintf_r+0x18>
 800fa14:	f7fe f956 	bl	800dcc4 <__sinit>
 800fa18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa1a:	07d9      	lsls	r1, r3, #31
 800fa1c:	d405      	bmi.n	800fa2a <_vfiprintf_r+0x2a>
 800fa1e:	89ab      	ldrh	r3, [r5, #12]
 800fa20:	059a      	lsls	r2, r3, #22
 800fa22:	d402      	bmi.n	800fa2a <_vfiprintf_r+0x2a>
 800fa24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa26:	f7fe fb84 	bl	800e132 <__retarget_lock_acquire_recursive>
 800fa2a:	89ab      	ldrh	r3, [r5, #12]
 800fa2c:	071b      	lsls	r3, r3, #28
 800fa2e:	d501      	bpl.n	800fa34 <_vfiprintf_r+0x34>
 800fa30:	692b      	ldr	r3, [r5, #16]
 800fa32:	b99b      	cbnz	r3, 800fa5c <_vfiprintf_r+0x5c>
 800fa34:	4629      	mov	r1, r5
 800fa36:	4630      	mov	r0, r6
 800fa38:	f7fe faa8 	bl	800df8c <__swsetup_r>
 800fa3c:	b170      	cbz	r0, 800fa5c <_vfiprintf_r+0x5c>
 800fa3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa40:	07dc      	lsls	r4, r3, #31
 800fa42:	d504      	bpl.n	800fa4e <_vfiprintf_r+0x4e>
 800fa44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa48:	b01d      	add	sp, #116	@ 0x74
 800fa4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa4e:	89ab      	ldrh	r3, [r5, #12]
 800fa50:	0598      	lsls	r0, r3, #22
 800fa52:	d4f7      	bmi.n	800fa44 <_vfiprintf_r+0x44>
 800fa54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa56:	f7fe fb6d 	bl	800e134 <__retarget_lock_release_recursive>
 800fa5a:	e7f3      	b.n	800fa44 <_vfiprintf_r+0x44>
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa60:	2320      	movs	r3, #32
 800fa62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fa66:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa6a:	2330      	movs	r3, #48	@ 0x30
 800fa6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fc1c <_vfiprintf_r+0x21c>
 800fa70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa74:	f04f 0901 	mov.w	r9, #1
 800fa78:	4623      	mov	r3, r4
 800fa7a:	469a      	mov	sl, r3
 800fa7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa80:	b10a      	cbz	r2, 800fa86 <_vfiprintf_r+0x86>
 800fa82:	2a25      	cmp	r2, #37	@ 0x25
 800fa84:	d1f9      	bne.n	800fa7a <_vfiprintf_r+0x7a>
 800fa86:	ebba 0b04 	subs.w	fp, sl, r4
 800fa8a:	d00b      	beq.n	800faa4 <_vfiprintf_r+0xa4>
 800fa8c:	465b      	mov	r3, fp
 800fa8e:	4622      	mov	r2, r4
 800fa90:	4629      	mov	r1, r5
 800fa92:	4630      	mov	r0, r6
 800fa94:	f7ff ffa1 	bl	800f9da <__sfputs_r>
 800fa98:	3001      	adds	r0, #1
 800fa9a:	f000 80a7 	beq.w	800fbec <_vfiprintf_r+0x1ec>
 800fa9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800faa0:	445a      	add	r2, fp
 800faa2:	9209      	str	r2, [sp, #36]	@ 0x24
 800faa4:	f89a 3000 	ldrb.w	r3, [sl]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	f000 809f 	beq.w	800fbec <_vfiprintf_r+0x1ec>
 800faae:	2300      	movs	r3, #0
 800fab0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fab8:	f10a 0a01 	add.w	sl, sl, #1
 800fabc:	9304      	str	r3, [sp, #16]
 800fabe:	9307      	str	r3, [sp, #28]
 800fac0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fac4:	931a      	str	r3, [sp, #104]	@ 0x68
 800fac6:	4654      	mov	r4, sl
 800fac8:	2205      	movs	r2, #5
 800faca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800face:	4853      	ldr	r0, [pc, #332]	@ (800fc1c <_vfiprintf_r+0x21c>)
 800fad0:	f7f0 fb86 	bl	80001e0 <memchr>
 800fad4:	9a04      	ldr	r2, [sp, #16]
 800fad6:	b9d8      	cbnz	r0, 800fb10 <_vfiprintf_r+0x110>
 800fad8:	06d1      	lsls	r1, r2, #27
 800fada:	bf44      	itt	mi
 800fadc:	2320      	movmi	r3, #32
 800fade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fae2:	0713      	lsls	r3, r2, #28
 800fae4:	bf44      	itt	mi
 800fae6:	232b      	movmi	r3, #43	@ 0x2b
 800fae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800faec:	f89a 3000 	ldrb.w	r3, [sl]
 800faf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800faf2:	d015      	beq.n	800fb20 <_vfiprintf_r+0x120>
 800faf4:	9a07      	ldr	r2, [sp, #28]
 800faf6:	4654      	mov	r4, sl
 800faf8:	2000      	movs	r0, #0
 800fafa:	f04f 0c0a 	mov.w	ip, #10
 800fafe:	4621      	mov	r1, r4
 800fb00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb04:	3b30      	subs	r3, #48	@ 0x30
 800fb06:	2b09      	cmp	r3, #9
 800fb08:	d94b      	bls.n	800fba2 <_vfiprintf_r+0x1a2>
 800fb0a:	b1b0      	cbz	r0, 800fb3a <_vfiprintf_r+0x13a>
 800fb0c:	9207      	str	r2, [sp, #28]
 800fb0e:	e014      	b.n	800fb3a <_vfiprintf_r+0x13a>
 800fb10:	eba0 0308 	sub.w	r3, r0, r8
 800fb14:	fa09 f303 	lsl.w	r3, r9, r3
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	9304      	str	r3, [sp, #16]
 800fb1c:	46a2      	mov	sl, r4
 800fb1e:	e7d2      	b.n	800fac6 <_vfiprintf_r+0xc6>
 800fb20:	9b03      	ldr	r3, [sp, #12]
 800fb22:	1d19      	adds	r1, r3, #4
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	9103      	str	r1, [sp, #12]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	bfbb      	ittet	lt
 800fb2c:	425b      	neglt	r3, r3
 800fb2e:	f042 0202 	orrlt.w	r2, r2, #2
 800fb32:	9307      	strge	r3, [sp, #28]
 800fb34:	9307      	strlt	r3, [sp, #28]
 800fb36:	bfb8      	it	lt
 800fb38:	9204      	strlt	r2, [sp, #16]
 800fb3a:	7823      	ldrb	r3, [r4, #0]
 800fb3c:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb3e:	d10a      	bne.n	800fb56 <_vfiprintf_r+0x156>
 800fb40:	7863      	ldrb	r3, [r4, #1]
 800fb42:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb44:	d132      	bne.n	800fbac <_vfiprintf_r+0x1ac>
 800fb46:	9b03      	ldr	r3, [sp, #12]
 800fb48:	1d1a      	adds	r2, r3, #4
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	9203      	str	r2, [sp, #12]
 800fb4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fb52:	3402      	adds	r4, #2
 800fb54:	9305      	str	r3, [sp, #20]
 800fb56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fc2c <_vfiprintf_r+0x22c>
 800fb5a:	7821      	ldrb	r1, [r4, #0]
 800fb5c:	2203      	movs	r2, #3
 800fb5e:	4650      	mov	r0, sl
 800fb60:	f7f0 fb3e 	bl	80001e0 <memchr>
 800fb64:	b138      	cbz	r0, 800fb76 <_vfiprintf_r+0x176>
 800fb66:	9b04      	ldr	r3, [sp, #16]
 800fb68:	eba0 000a 	sub.w	r0, r0, sl
 800fb6c:	2240      	movs	r2, #64	@ 0x40
 800fb6e:	4082      	lsls	r2, r0
 800fb70:	4313      	orrs	r3, r2
 800fb72:	3401      	adds	r4, #1
 800fb74:	9304      	str	r3, [sp, #16]
 800fb76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb7a:	4829      	ldr	r0, [pc, #164]	@ (800fc20 <_vfiprintf_r+0x220>)
 800fb7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb80:	2206      	movs	r2, #6
 800fb82:	f7f0 fb2d 	bl	80001e0 <memchr>
 800fb86:	2800      	cmp	r0, #0
 800fb88:	d03f      	beq.n	800fc0a <_vfiprintf_r+0x20a>
 800fb8a:	4b26      	ldr	r3, [pc, #152]	@ (800fc24 <_vfiprintf_r+0x224>)
 800fb8c:	bb1b      	cbnz	r3, 800fbd6 <_vfiprintf_r+0x1d6>
 800fb8e:	9b03      	ldr	r3, [sp, #12]
 800fb90:	3307      	adds	r3, #7
 800fb92:	f023 0307 	bic.w	r3, r3, #7
 800fb96:	3308      	adds	r3, #8
 800fb98:	9303      	str	r3, [sp, #12]
 800fb9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb9c:	443b      	add	r3, r7
 800fb9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fba0:	e76a      	b.n	800fa78 <_vfiprintf_r+0x78>
 800fba2:	fb0c 3202 	mla	r2, ip, r2, r3
 800fba6:	460c      	mov	r4, r1
 800fba8:	2001      	movs	r0, #1
 800fbaa:	e7a8      	b.n	800fafe <_vfiprintf_r+0xfe>
 800fbac:	2300      	movs	r3, #0
 800fbae:	3401      	adds	r4, #1
 800fbb0:	9305      	str	r3, [sp, #20]
 800fbb2:	4619      	mov	r1, r3
 800fbb4:	f04f 0c0a 	mov.w	ip, #10
 800fbb8:	4620      	mov	r0, r4
 800fbba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbbe:	3a30      	subs	r2, #48	@ 0x30
 800fbc0:	2a09      	cmp	r2, #9
 800fbc2:	d903      	bls.n	800fbcc <_vfiprintf_r+0x1cc>
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d0c6      	beq.n	800fb56 <_vfiprintf_r+0x156>
 800fbc8:	9105      	str	r1, [sp, #20]
 800fbca:	e7c4      	b.n	800fb56 <_vfiprintf_r+0x156>
 800fbcc:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbd0:	4604      	mov	r4, r0
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	e7f0      	b.n	800fbb8 <_vfiprintf_r+0x1b8>
 800fbd6:	ab03      	add	r3, sp, #12
 800fbd8:	9300      	str	r3, [sp, #0]
 800fbda:	462a      	mov	r2, r5
 800fbdc:	4b12      	ldr	r3, [pc, #72]	@ (800fc28 <_vfiprintf_r+0x228>)
 800fbde:	a904      	add	r1, sp, #16
 800fbe0:	4630      	mov	r0, r6
 800fbe2:	f7fd fc2d 	bl	800d440 <_printf_float>
 800fbe6:	4607      	mov	r7, r0
 800fbe8:	1c78      	adds	r0, r7, #1
 800fbea:	d1d6      	bne.n	800fb9a <_vfiprintf_r+0x19a>
 800fbec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fbee:	07d9      	lsls	r1, r3, #31
 800fbf0:	d405      	bmi.n	800fbfe <_vfiprintf_r+0x1fe>
 800fbf2:	89ab      	ldrh	r3, [r5, #12]
 800fbf4:	059a      	lsls	r2, r3, #22
 800fbf6:	d402      	bmi.n	800fbfe <_vfiprintf_r+0x1fe>
 800fbf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbfa:	f7fe fa9b 	bl	800e134 <__retarget_lock_release_recursive>
 800fbfe:	89ab      	ldrh	r3, [r5, #12]
 800fc00:	065b      	lsls	r3, r3, #25
 800fc02:	f53f af1f 	bmi.w	800fa44 <_vfiprintf_r+0x44>
 800fc06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fc08:	e71e      	b.n	800fa48 <_vfiprintf_r+0x48>
 800fc0a:	ab03      	add	r3, sp, #12
 800fc0c:	9300      	str	r3, [sp, #0]
 800fc0e:	462a      	mov	r2, r5
 800fc10:	4b05      	ldr	r3, [pc, #20]	@ (800fc28 <_vfiprintf_r+0x228>)
 800fc12:	a904      	add	r1, sp, #16
 800fc14:	4630      	mov	r0, r6
 800fc16:	f7fd feab 	bl	800d970 <_printf_i>
 800fc1a:	e7e4      	b.n	800fbe6 <_vfiprintf_r+0x1e6>
 800fc1c:	08010c90 	.word	0x08010c90
 800fc20:	08010c9a 	.word	0x08010c9a
 800fc24:	0800d441 	.word	0x0800d441
 800fc28:	0800f9db 	.word	0x0800f9db
 800fc2c:	08010c96 	.word	0x08010c96

0800fc30 <__sflush_r>:
 800fc30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc38:	0716      	lsls	r6, r2, #28
 800fc3a:	4605      	mov	r5, r0
 800fc3c:	460c      	mov	r4, r1
 800fc3e:	d454      	bmi.n	800fcea <__sflush_r+0xba>
 800fc40:	684b      	ldr	r3, [r1, #4]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	dc02      	bgt.n	800fc4c <__sflush_r+0x1c>
 800fc46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	dd48      	ble.n	800fcde <__sflush_r+0xae>
 800fc4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fc4e:	2e00      	cmp	r6, #0
 800fc50:	d045      	beq.n	800fcde <__sflush_r+0xae>
 800fc52:	2300      	movs	r3, #0
 800fc54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fc58:	682f      	ldr	r7, [r5, #0]
 800fc5a:	6a21      	ldr	r1, [r4, #32]
 800fc5c:	602b      	str	r3, [r5, #0]
 800fc5e:	d030      	beq.n	800fcc2 <__sflush_r+0x92>
 800fc60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fc62:	89a3      	ldrh	r3, [r4, #12]
 800fc64:	0759      	lsls	r1, r3, #29
 800fc66:	d505      	bpl.n	800fc74 <__sflush_r+0x44>
 800fc68:	6863      	ldr	r3, [r4, #4]
 800fc6a:	1ad2      	subs	r2, r2, r3
 800fc6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fc6e:	b10b      	cbz	r3, 800fc74 <__sflush_r+0x44>
 800fc70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fc72:	1ad2      	subs	r2, r2, r3
 800fc74:	2300      	movs	r3, #0
 800fc76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fc78:	6a21      	ldr	r1, [r4, #32]
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	47b0      	blx	r6
 800fc7e:	1c43      	adds	r3, r0, #1
 800fc80:	89a3      	ldrh	r3, [r4, #12]
 800fc82:	d106      	bne.n	800fc92 <__sflush_r+0x62>
 800fc84:	6829      	ldr	r1, [r5, #0]
 800fc86:	291d      	cmp	r1, #29
 800fc88:	d82b      	bhi.n	800fce2 <__sflush_r+0xb2>
 800fc8a:	4a2a      	ldr	r2, [pc, #168]	@ (800fd34 <__sflush_r+0x104>)
 800fc8c:	40ca      	lsrs	r2, r1
 800fc8e:	07d6      	lsls	r6, r2, #31
 800fc90:	d527      	bpl.n	800fce2 <__sflush_r+0xb2>
 800fc92:	2200      	movs	r2, #0
 800fc94:	6062      	str	r2, [r4, #4]
 800fc96:	04d9      	lsls	r1, r3, #19
 800fc98:	6922      	ldr	r2, [r4, #16]
 800fc9a:	6022      	str	r2, [r4, #0]
 800fc9c:	d504      	bpl.n	800fca8 <__sflush_r+0x78>
 800fc9e:	1c42      	adds	r2, r0, #1
 800fca0:	d101      	bne.n	800fca6 <__sflush_r+0x76>
 800fca2:	682b      	ldr	r3, [r5, #0]
 800fca4:	b903      	cbnz	r3, 800fca8 <__sflush_r+0x78>
 800fca6:	6560      	str	r0, [r4, #84]	@ 0x54
 800fca8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fcaa:	602f      	str	r7, [r5, #0]
 800fcac:	b1b9      	cbz	r1, 800fcde <__sflush_r+0xae>
 800fcae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fcb2:	4299      	cmp	r1, r3
 800fcb4:	d002      	beq.n	800fcbc <__sflush_r+0x8c>
 800fcb6:	4628      	mov	r0, r5
 800fcb8:	f7ff f8a6 	bl	800ee08 <_free_r>
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	6363      	str	r3, [r4, #52]	@ 0x34
 800fcc0:	e00d      	b.n	800fcde <__sflush_r+0xae>
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	4628      	mov	r0, r5
 800fcc6:	47b0      	blx	r6
 800fcc8:	4602      	mov	r2, r0
 800fcca:	1c50      	adds	r0, r2, #1
 800fccc:	d1c9      	bne.n	800fc62 <__sflush_r+0x32>
 800fcce:	682b      	ldr	r3, [r5, #0]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d0c6      	beq.n	800fc62 <__sflush_r+0x32>
 800fcd4:	2b1d      	cmp	r3, #29
 800fcd6:	d001      	beq.n	800fcdc <__sflush_r+0xac>
 800fcd8:	2b16      	cmp	r3, #22
 800fcda:	d11e      	bne.n	800fd1a <__sflush_r+0xea>
 800fcdc:	602f      	str	r7, [r5, #0]
 800fcde:	2000      	movs	r0, #0
 800fce0:	e022      	b.n	800fd28 <__sflush_r+0xf8>
 800fce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fce6:	b21b      	sxth	r3, r3
 800fce8:	e01b      	b.n	800fd22 <__sflush_r+0xf2>
 800fcea:	690f      	ldr	r7, [r1, #16]
 800fcec:	2f00      	cmp	r7, #0
 800fcee:	d0f6      	beq.n	800fcde <__sflush_r+0xae>
 800fcf0:	0793      	lsls	r3, r2, #30
 800fcf2:	680e      	ldr	r6, [r1, #0]
 800fcf4:	bf08      	it	eq
 800fcf6:	694b      	ldreq	r3, [r1, #20]
 800fcf8:	600f      	str	r7, [r1, #0]
 800fcfa:	bf18      	it	ne
 800fcfc:	2300      	movne	r3, #0
 800fcfe:	eba6 0807 	sub.w	r8, r6, r7
 800fd02:	608b      	str	r3, [r1, #8]
 800fd04:	f1b8 0f00 	cmp.w	r8, #0
 800fd08:	dde9      	ble.n	800fcde <__sflush_r+0xae>
 800fd0a:	6a21      	ldr	r1, [r4, #32]
 800fd0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fd0e:	4643      	mov	r3, r8
 800fd10:	463a      	mov	r2, r7
 800fd12:	4628      	mov	r0, r5
 800fd14:	47b0      	blx	r6
 800fd16:	2800      	cmp	r0, #0
 800fd18:	dc08      	bgt.n	800fd2c <__sflush_r+0xfc>
 800fd1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd22:	81a3      	strh	r3, [r4, #12]
 800fd24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd2c:	4407      	add	r7, r0
 800fd2e:	eba8 0800 	sub.w	r8, r8, r0
 800fd32:	e7e7      	b.n	800fd04 <__sflush_r+0xd4>
 800fd34:	20400001 	.word	0x20400001

0800fd38 <_fflush_r>:
 800fd38:	b538      	push	{r3, r4, r5, lr}
 800fd3a:	690b      	ldr	r3, [r1, #16]
 800fd3c:	4605      	mov	r5, r0
 800fd3e:	460c      	mov	r4, r1
 800fd40:	b913      	cbnz	r3, 800fd48 <_fflush_r+0x10>
 800fd42:	2500      	movs	r5, #0
 800fd44:	4628      	mov	r0, r5
 800fd46:	bd38      	pop	{r3, r4, r5, pc}
 800fd48:	b118      	cbz	r0, 800fd52 <_fflush_r+0x1a>
 800fd4a:	6a03      	ldr	r3, [r0, #32]
 800fd4c:	b90b      	cbnz	r3, 800fd52 <_fflush_r+0x1a>
 800fd4e:	f7fd ffb9 	bl	800dcc4 <__sinit>
 800fd52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d0f3      	beq.n	800fd42 <_fflush_r+0xa>
 800fd5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fd5c:	07d0      	lsls	r0, r2, #31
 800fd5e:	d404      	bmi.n	800fd6a <_fflush_r+0x32>
 800fd60:	0599      	lsls	r1, r3, #22
 800fd62:	d402      	bmi.n	800fd6a <_fflush_r+0x32>
 800fd64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd66:	f7fe f9e4 	bl	800e132 <__retarget_lock_acquire_recursive>
 800fd6a:	4628      	mov	r0, r5
 800fd6c:	4621      	mov	r1, r4
 800fd6e:	f7ff ff5f 	bl	800fc30 <__sflush_r>
 800fd72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fd74:	07da      	lsls	r2, r3, #31
 800fd76:	4605      	mov	r5, r0
 800fd78:	d4e4      	bmi.n	800fd44 <_fflush_r+0xc>
 800fd7a:	89a3      	ldrh	r3, [r4, #12]
 800fd7c:	059b      	lsls	r3, r3, #22
 800fd7e:	d4e1      	bmi.n	800fd44 <_fflush_r+0xc>
 800fd80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd82:	f7fe f9d7 	bl	800e134 <__retarget_lock_release_recursive>
 800fd86:	e7dd      	b.n	800fd44 <_fflush_r+0xc>

0800fd88 <__swhatbuf_r>:
 800fd88:	b570      	push	{r4, r5, r6, lr}
 800fd8a:	460c      	mov	r4, r1
 800fd8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd90:	2900      	cmp	r1, #0
 800fd92:	b096      	sub	sp, #88	@ 0x58
 800fd94:	4615      	mov	r5, r2
 800fd96:	461e      	mov	r6, r3
 800fd98:	da0d      	bge.n	800fdb6 <__swhatbuf_r+0x2e>
 800fd9a:	89a3      	ldrh	r3, [r4, #12]
 800fd9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fda0:	f04f 0100 	mov.w	r1, #0
 800fda4:	bf14      	ite	ne
 800fda6:	2340      	movne	r3, #64	@ 0x40
 800fda8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fdac:	2000      	movs	r0, #0
 800fdae:	6031      	str	r1, [r6, #0]
 800fdb0:	602b      	str	r3, [r5, #0]
 800fdb2:	b016      	add	sp, #88	@ 0x58
 800fdb4:	bd70      	pop	{r4, r5, r6, pc}
 800fdb6:	466a      	mov	r2, sp
 800fdb8:	f000 f862 	bl	800fe80 <_fstat_r>
 800fdbc:	2800      	cmp	r0, #0
 800fdbe:	dbec      	blt.n	800fd9a <__swhatbuf_r+0x12>
 800fdc0:	9901      	ldr	r1, [sp, #4]
 800fdc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fdc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fdca:	4259      	negs	r1, r3
 800fdcc:	4159      	adcs	r1, r3
 800fdce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fdd2:	e7eb      	b.n	800fdac <__swhatbuf_r+0x24>

0800fdd4 <__smakebuf_r>:
 800fdd4:	898b      	ldrh	r3, [r1, #12]
 800fdd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdd8:	079d      	lsls	r5, r3, #30
 800fdda:	4606      	mov	r6, r0
 800fddc:	460c      	mov	r4, r1
 800fdde:	d507      	bpl.n	800fdf0 <__smakebuf_r+0x1c>
 800fde0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fde4:	6023      	str	r3, [r4, #0]
 800fde6:	6123      	str	r3, [r4, #16]
 800fde8:	2301      	movs	r3, #1
 800fdea:	6163      	str	r3, [r4, #20]
 800fdec:	b003      	add	sp, #12
 800fdee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdf0:	ab01      	add	r3, sp, #4
 800fdf2:	466a      	mov	r2, sp
 800fdf4:	f7ff ffc8 	bl	800fd88 <__swhatbuf_r>
 800fdf8:	9f00      	ldr	r7, [sp, #0]
 800fdfa:	4605      	mov	r5, r0
 800fdfc:	4639      	mov	r1, r7
 800fdfe:	4630      	mov	r0, r6
 800fe00:	f7ff f876 	bl	800eef0 <_malloc_r>
 800fe04:	b948      	cbnz	r0, 800fe1a <__smakebuf_r+0x46>
 800fe06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe0a:	059a      	lsls	r2, r3, #22
 800fe0c:	d4ee      	bmi.n	800fdec <__smakebuf_r+0x18>
 800fe0e:	f023 0303 	bic.w	r3, r3, #3
 800fe12:	f043 0302 	orr.w	r3, r3, #2
 800fe16:	81a3      	strh	r3, [r4, #12]
 800fe18:	e7e2      	b.n	800fde0 <__smakebuf_r+0xc>
 800fe1a:	89a3      	ldrh	r3, [r4, #12]
 800fe1c:	6020      	str	r0, [r4, #0]
 800fe1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe22:	81a3      	strh	r3, [r4, #12]
 800fe24:	9b01      	ldr	r3, [sp, #4]
 800fe26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fe2a:	b15b      	cbz	r3, 800fe44 <__smakebuf_r+0x70>
 800fe2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe30:	4630      	mov	r0, r6
 800fe32:	f000 f837 	bl	800fea4 <_isatty_r>
 800fe36:	b128      	cbz	r0, 800fe44 <__smakebuf_r+0x70>
 800fe38:	89a3      	ldrh	r3, [r4, #12]
 800fe3a:	f023 0303 	bic.w	r3, r3, #3
 800fe3e:	f043 0301 	orr.w	r3, r3, #1
 800fe42:	81a3      	strh	r3, [r4, #12]
 800fe44:	89a3      	ldrh	r3, [r4, #12]
 800fe46:	431d      	orrs	r5, r3
 800fe48:	81a5      	strh	r5, [r4, #12]
 800fe4a:	e7cf      	b.n	800fdec <__smakebuf_r+0x18>

0800fe4c <memmove>:
 800fe4c:	4288      	cmp	r0, r1
 800fe4e:	b510      	push	{r4, lr}
 800fe50:	eb01 0402 	add.w	r4, r1, r2
 800fe54:	d902      	bls.n	800fe5c <memmove+0x10>
 800fe56:	4284      	cmp	r4, r0
 800fe58:	4623      	mov	r3, r4
 800fe5a:	d807      	bhi.n	800fe6c <memmove+0x20>
 800fe5c:	1e43      	subs	r3, r0, #1
 800fe5e:	42a1      	cmp	r1, r4
 800fe60:	d008      	beq.n	800fe74 <memmove+0x28>
 800fe62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe6a:	e7f8      	b.n	800fe5e <memmove+0x12>
 800fe6c:	4402      	add	r2, r0
 800fe6e:	4601      	mov	r1, r0
 800fe70:	428a      	cmp	r2, r1
 800fe72:	d100      	bne.n	800fe76 <memmove+0x2a>
 800fe74:	bd10      	pop	{r4, pc}
 800fe76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fe7e:	e7f7      	b.n	800fe70 <memmove+0x24>

0800fe80 <_fstat_r>:
 800fe80:	b538      	push	{r3, r4, r5, lr}
 800fe82:	4d07      	ldr	r5, [pc, #28]	@ (800fea0 <_fstat_r+0x20>)
 800fe84:	2300      	movs	r3, #0
 800fe86:	4604      	mov	r4, r0
 800fe88:	4608      	mov	r0, r1
 800fe8a:	4611      	mov	r1, r2
 800fe8c:	602b      	str	r3, [r5, #0]
 800fe8e:	f7f2 fd85 	bl	800299c <_fstat>
 800fe92:	1c43      	adds	r3, r0, #1
 800fe94:	d102      	bne.n	800fe9c <_fstat_r+0x1c>
 800fe96:	682b      	ldr	r3, [r5, #0]
 800fe98:	b103      	cbz	r3, 800fe9c <_fstat_r+0x1c>
 800fe9a:	6023      	str	r3, [r4, #0]
 800fe9c:	bd38      	pop	{r3, r4, r5, pc}
 800fe9e:	bf00      	nop
 800fea0:	200025dc 	.word	0x200025dc

0800fea4 <_isatty_r>:
 800fea4:	b538      	push	{r3, r4, r5, lr}
 800fea6:	4d06      	ldr	r5, [pc, #24]	@ (800fec0 <_isatty_r+0x1c>)
 800fea8:	2300      	movs	r3, #0
 800feaa:	4604      	mov	r4, r0
 800feac:	4608      	mov	r0, r1
 800feae:	602b      	str	r3, [r5, #0]
 800feb0:	f7f2 fd84 	bl	80029bc <_isatty>
 800feb4:	1c43      	adds	r3, r0, #1
 800feb6:	d102      	bne.n	800febe <_isatty_r+0x1a>
 800feb8:	682b      	ldr	r3, [r5, #0]
 800feba:	b103      	cbz	r3, 800febe <_isatty_r+0x1a>
 800febc:	6023      	str	r3, [r4, #0]
 800febe:	bd38      	pop	{r3, r4, r5, pc}
 800fec0:	200025dc 	.word	0x200025dc

0800fec4 <_sbrk_r>:
 800fec4:	b538      	push	{r3, r4, r5, lr}
 800fec6:	4d06      	ldr	r5, [pc, #24]	@ (800fee0 <_sbrk_r+0x1c>)
 800fec8:	2300      	movs	r3, #0
 800feca:	4604      	mov	r4, r0
 800fecc:	4608      	mov	r0, r1
 800fece:	602b      	str	r3, [r5, #0]
 800fed0:	f7f2 fd8c 	bl	80029ec <_sbrk>
 800fed4:	1c43      	adds	r3, r0, #1
 800fed6:	d102      	bne.n	800fede <_sbrk_r+0x1a>
 800fed8:	682b      	ldr	r3, [r5, #0]
 800feda:	b103      	cbz	r3, 800fede <_sbrk_r+0x1a>
 800fedc:	6023      	str	r3, [r4, #0]
 800fede:	bd38      	pop	{r3, r4, r5, pc}
 800fee0:	200025dc 	.word	0x200025dc

0800fee4 <__assert_func>:
 800fee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fee6:	4614      	mov	r4, r2
 800fee8:	461a      	mov	r2, r3
 800feea:	4b09      	ldr	r3, [pc, #36]	@ (800ff10 <__assert_func+0x2c>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	4605      	mov	r5, r0
 800fef0:	68d8      	ldr	r0, [r3, #12]
 800fef2:	b14c      	cbz	r4, 800ff08 <__assert_func+0x24>
 800fef4:	4b07      	ldr	r3, [pc, #28]	@ (800ff14 <__assert_func+0x30>)
 800fef6:	9100      	str	r1, [sp, #0]
 800fef8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fefc:	4906      	ldr	r1, [pc, #24]	@ (800ff18 <__assert_func+0x34>)
 800fefe:	462b      	mov	r3, r5
 800ff00:	f000 f870 	bl	800ffe4 <fiprintf>
 800ff04:	f000 f880 	bl	8010008 <abort>
 800ff08:	4b04      	ldr	r3, [pc, #16]	@ (800ff1c <__assert_func+0x38>)
 800ff0a:	461c      	mov	r4, r3
 800ff0c:	e7f3      	b.n	800fef6 <__assert_func+0x12>
 800ff0e:	bf00      	nop
 800ff10:	20000128 	.word	0x20000128
 800ff14:	08010cab 	.word	0x08010cab
 800ff18:	08010cb8 	.word	0x08010cb8
 800ff1c:	08010ce6 	.word	0x08010ce6

0800ff20 <_calloc_r>:
 800ff20:	b570      	push	{r4, r5, r6, lr}
 800ff22:	fba1 5402 	umull	r5, r4, r1, r2
 800ff26:	b934      	cbnz	r4, 800ff36 <_calloc_r+0x16>
 800ff28:	4629      	mov	r1, r5
 800ff2a:	f7fe ffe1 	bl	800eef0 <_malloc_r>
 800ff2e:	4606      	mov	r6, r0
 800ff30:	b928      	cbnz	r0, 800ff3e <_calloc_r+0x1e>
 800ff32:	4630      	mov	r0, r6
 800ff34:	bd70      	pop	{r4, r5, r6, pc}
 800ff36:	220c      	movs	r2, #12
 800ff38:	6002      	str	r2, [r0, #0]
 800ff3a:	2600      	movs	r6, #0
 800ff3c:	e7f9      	b.n	800ff32 <_calloc_r+0x12>
 800ff3e:	462a      	mov	r2, r5
 800ff40:	4621      	mov	r1, r4
 800ff42:	f7fe f879 	bl	800e038 <memset>
 800ff46:	e7f4      	b.n	800ff32 <_calloc_r+0x12>

0800ff48 <__ascii_mbtowc>:
 800ff48:	b082      	sub	sp, #8
 800ff4a:	b901      	cbnz	r1, 800ff4e <__ascii_mbtowc+0x6>
 800ff4c:	a901      	add	r1, sp, #4
 800ff4e:	b142      	cbz	r2, 800ff62 <__ascii_mbtowc+0x1a>
 800ff50:	b14b      	cbz	r3, 800ff66 <__ascii_mbtowc+0x1e>
 800ff52:	7813      	ldrb	r3, [r2, #0]
 800ff54:	600b      	str	r3, [r1, #0]
 800ff56:	7812      	ldrb	r2, [r2, #0]
 800ff58:	1e10      	subs	r0, r2, #0
 800ff5a:	bf18      	it	ne
 800ff5c:	2001      	movne	r0, #1
 800ff5e:	b002      	add	sp, #8
 800ff60:	4770      	bx	lr
 800ff62:	4610      	mov	r0, r2
 800ff64:	e7fb      	b.n	800ff5e <__ascii_mbtowc+0x16>
 800ff66:	f06f 0001 	mvn.w	r0, #1
 800ff6a:	e7f8      	b.n	800ff5e <__ascii_mbtowc+0x16>

0800ff6c <_realloc_r>:
 800ff6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff70:	4607      	mov	r7, r0
 800ff72:	4614      	mov	r4, r2
 800ff74:	460d      	mov	r5, r1
 800ff76:	b921      	cbnz	r1, 800ff82 <_realloc_r+0x16>
 800ff78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff7c:	4611      	mov	r1, r2
 800ff7e:	f7fe bfb7 	b.w	800eef0 <_malloc_r>
 800ff82:	b92a      	cbnz	r2, 800ff90 <_realloc_r+0x24>
 800ff84:	f7fe ff40 	bl	800ee08 <_free_r>
 800ff88:	4625      	mov	r5, r4
 800ff8a:	4628      	mov	r0, r5
 800ff8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff90:	f000 f841 	bl	8010016 <_malloc_usable_size_r>
 800ff94:	4284      	cmp	r4, r0
 800ff96:	4606      	mov	r6, r0
 800ff98:	d802      	bhi.n	800ffa0 <_realloc_r+0x34>
 800ff9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ff9e:	d8f4      	bhi.n	800ff8a <_realloc_r+0x1e>
 800ffa0:	4621      	mov	r1, r4
 800ffa2:	4638      	mov	r0, r7
 800ffa4:	f7fe ffa4 	bl	800eef0 <_malloc_r>
 800ffa8:	4680      	mov	r8, r0
 800ffaa:	b908      	cbnz	r0, 800ffb0 <_realloc_r+0x44>
 800ffac:	4645      	mov	r5, r8
 800ffae:	e7ec      	b.n	800ff8a <_realloc_r+0x1e>
 800ffb0:	42b4      	cmp	r4, r6
 800ffb2:	4622      	mov	r2, r4
 800ffb4:	4629      	mov	r1, r5
 800ffb6:	bf28      	it	cs
 800ffb8:	4632      	movcs	r2, r6
 800ffba:	f7fe f8bc 	bl	800e136 <memcpy>
 800ffbe:	4629      	mov	r1, r5
 800ffc0:	4638      	mov	r0, r7
 800ffc2:	f7fe ff21 	bl	800ee08 <_free_r>
 800ffc6:	e7f1      	b.n	800ffac <_realloc_r+0x40>

0800ffc8 <__ascii_wctomb>:
 800ffc8:	4603      	mov	r3, r0
 800ffca:	4608      	mov	r0, r1
 800ffcc:	b141      	cbz	r1, 800ffe0 <__ascii_wctomb+0x18>
 800ffce:	2aff      	cmp	r2, #255	@ 0xff
 800ffd0:	d904      	bls.n	800ffdc <__ascii_wctomb+0x14>
 800ffd2:	228a      	movs	r2, #138	@ 0x8a
 800ffd4:	601a      	str	r2, [r3, #0]
 800ffd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ffda:	4770      	bx	lr
 800ffdc:	700a      	strb	r2, [r1, #0]
 800ffde:	2001      	movs	r0, #1
 800ffe0:	4770      	bx	lr
	...

0800ffe4 <fiprintf>:
 800ffe4:	b40e      	push	{r1, r2, r3}
 800ffe6:	b503      	push	{r0, r1, lr}
 800ffe8:	4601      	mov	r1, r0
 800ffea:	ab03      	add	r3, sp, #12
 800ffec:	4805      	ldr	r0, [pc, #20]	@ (8010004 <fiprintf+0x20>)
 800ffee:	f853 2b04 	ldr.w	r2, [r3], #4
 800fff2:	6800      	ldr	r0, [r0, #0]
 800fff4:	9301      	str	r3, [sp, #4]
 800fff6:	f7ff fd03 	bl	800fa00 <_vfiprintf_r>
 800fffa:	b002      	add	sp, #8
 800fffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010000:	b003      	add	sp, #12
 8010002:	4770      	bx	lr
 8010004:	20000128 	.word	0x20000128

08010008 <abort>:
 8010008:	b508      	push	{r3, lr}
 801000a:	2006      	movs	r0, #6
 801000c:	f000 f834 	bl	8010078 <raise>
 8010010:	2001      	movs	r0, #1
 8010012:	f7f2 fc73 	bl	80028fc <_exit>

08010016 <_malloc_usable_size_r>:
 8010016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801001a:	1f18      	subs	r0, r3, #4
 801001c:	2b00      	cmp	r3, #0
 801001e:	bfbc      	itt	lt
 8010020:	580b      	ldrlt	r3, [r1, r0]
 8010022:	18c0      	addlt	r0, r0, r3
 8010024:	4770      	bx	lr

08010026 <_raise_r>:
 8010026:	291f      	cmp	r1, #31
 8010028:	b538      	push	{r3, r4, r5, lr}
 801002a:	4605      	mov	r5, r0
 801002c:	460c      	mov	r4, r1
 801002e:	d904      	bls.n	801003a <_raise_r+0x14>
 8010030:	2316      	movs	r3, #22
 8010032:	6003      	str	r3, [r0, #0]
 8010034:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010038:	bd38      	pop	{r3, r4, r5, pc}
 801003a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801003c:	b112      	cbz	r2, 8010044 <_raise_r+0x1e>
 801003e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010042:	b94b      	cbnz	r3, 8010058 <_raise_r+0x32>
 8010044:	4628      	mov	r0, r5
 8010046:	f000 f831 	bl	80100ac <_getpid_r>
 801004a:	4622      	mov	r2, r4
 801004c:	4601      	mov	r1, r0
 801004e:	4628      	mov	r0, r5
 8010050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010054:	f000 b818 	b.w	8010088 <_kill_r>
 8010058:	2b01      	cmp	r3, #1
 801005a:	d00a      	beq.n	8010072 <_raise_r+0x4c>
 801005c:	1c59      	adds	r1, r3, #1
 801005e:	d103      	bne.n	8010068 <_raise_r+0x42>
 8010060:	2316      	movs	r3, #22
 8010062:	6003      	str	r3, [r0, #0]
 8010064:	2001      	movs	r0, #1
 8010066:	e7e7      	b.n	8010038 <_raise_r+0x12>
 8010068:	2100      	movs	r1, #0
 801006a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801006e:	4620      	mov	r0, r4
 8010070:	4798      	blx	r3
 8010072:	2000      	movs	r0, #0
 8010074:	e7e0      	b.n	8010038 <_raise_r+0x12>
	...

08010078 <raise>:
 8010078:	4b02      	ldr	r3, [pc, #8]	@ (8010084 <raise+0xc>)
 801007a:	4601      	mov	r1, r0
 801007c:	6818      	ldr	r0, [r3, #0]
 801007e:	f7ff bfd2 	b.w	8010026 <_raise_r>
 8010082:	bf00      	nop
 8010084:	20000128 	.word	0x20000128

08010088 <_kill_r>:
 8010088:	b538      	push	{r3, r4, r5, lr}
 801008a:	4d07      	ldr	r5, [pc, #28]	@ (80100a8 <_kill_r+0x20>)
 801008c:	2300      	movs	r3, #0
 801008e:	4604      	mov	r4, r0
 8010090:	4608      	mov	r0, r1
 8010092:	4611      	mov	r1, r2
 8010094:	602b      	str	r3, [r5, #0]
 8010096:	f7f2 fc21 	bl	80028dc <_kill>
 801009a:	1c43      	adds	r3, r0, #1
 801009c:	d102      	bne.n	80100a4 <_kill_r+0x1c>
 801009e:	682b      	ldr	r3, [r5, #0]
 80100a0:	b103      	cbz	r3, 80100a4 <_kill_r+0x1c>
 80100a2:	6023      	str	r3, [r4, #0]
 80100a4:	bd38      	pop	{r3, r4, r5, pc}
 80100a6:	bf00      	nop
 80100a8:	200025dc 	.word	0x200025dc

080100ac <_getpid_r>:
 80100ac:	f7f2 bc0e 	b.w	80028cc <_getpid>

080100b0 <_init>:
 80100b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100b2:	bf00      	nop
 80100b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100b6:	bc08      	pop	{r3}
 80100b8:	469e      	mov	lr, r3
 80100ba:	4770      	bx	lr

080100bc <_fini>:
 80100bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100be:	bf00      	nop
 80100c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100c2:	bc08      	pop	{r3}
 80100c4:	469e      	mov	lr, r3
 80100c6:	4770      	bx	lr
