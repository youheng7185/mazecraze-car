
mazecrase-car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800e590  0800e590  0000f590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eacc  0800eacc  000102cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800eacc  0800eacc  0000facc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ead4  0800ead4  000102cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ead4  0800ead4  0000fad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ead8  0800ead8  0000fad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  0800eadc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f50  200002cc  0800eda8  000102cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000221c  0800eda8  0001121c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024ba1  00000000  00000000  000102fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004372  00000000  00000000  00034e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  00039210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001822  00000000  00000000  0003b148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc64  00000000  00000000  0003c96a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fe2b  00000000  00000000  000585ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d1b2  00000000  00000000  000783f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001155ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009724  00000000  00000000  001155f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011ed14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e578 	.word	0x0800e578

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800e578 	.word	0x0800e578

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <lsm6dsl_read_data_polling>:
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len);
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len);
static void platform_delay(uint32_t ms);

void lsm6dsl_read_data_polling(void)
{
 8000ee4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
  /* Initialize mems driver interface */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8000eec:	4b9d      	ldr	r3, [pc, #628]	@ (8001164 <lsm6dsl_read_data_polling+0x280>)
 8000eee:	60bb      	str	r3, [r7, #8]
  dev_ctx.read_reg = platform_read;
 8000ef0:	4b9d      	ldr	r3, [pc, #628]	@ (8001168 <lsm6dsl_read_data_polling+0x284>)
 8000ef2:	60fb      	str	r3, [r7, #12]
  dev_ctx.mdelay = platform_delay;
 8000ef4:	4b9d      	ldr	r3, [pc, #628]	@ (800116c <lsm6dsl_read_data_polling+0x288>)
 8000ef6:	613b      	str	r3, [r7, #16]
  dev_ctx.handle = &SENSOR_BUS;
 8000ef8:	4b9d      	ldr	r3, [pc, #628]	@ (8001170 <lsm6dsl_read_data_polling+0x28c>)
 8000efa:	617b      	str	r3, [r7, #20]

  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 8000efc:	200f      	movs	r0, #15
 8000efe:	f000 f993 	bl	8001228 <platform_delay>
  /* Check device ID */
  whoamI = 0;
 8000f02:	4b9c      	ldr	r3, [pc, #624]	@ (8001174 <lsm6dsl_read_data_polling+0x290>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
  lsm6dsl_device_id_get(&dev_ctx, &whoamI);
 8000f08:	f107 0308 	add.w	r3, r7, #8
 8000f0c:	4999      	ldr	r1, [pc, #612]	@ (8001174 <lsm6dsl_read_data_polling+0x290>)
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fb9f 	bl	8001652 <lsm6dsl_device_id_get>

  if ( whoamI != LSM6DSL_ID ) {
 8000f14:	4b97      	ldr	r3, [pc, #604]	@ (8001174 <lsm6dsl_read_data_polling+0x290>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b6a      	cmp	r3, #106	@ 0x6a
 8000f1a:	d007      	beq.n	8000f2c <lsm6dsl_read_data_polling+0x48>
	  my_printf("device id is wrong: %d\r\n", whoamI);
 8000f1c:	4b95      	ldr	r3, [pc, #596]	@ (8001174 <lsm6dsl_read_data_polling+0x290>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	4895      	ldr	r0, [pc, #596]	@ (8001178 <lsm6dsl_read_data_polling+0x294>)
 8000f24:	f000 fcb0 	bl	8001888 <my_printf>
	  while (1);
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <lsm6dsl_read_data_polling+0x44>
	  /*manage here device not found */
  } else {
	  my_printf("device id correct\r\n");
 8000f2c:	4893      	ldr	r0, [pc, #588]	@ (800117c <lsm6dsl_read_data_polling+0x298>)
 8000f2e:	f000 fcab 	bl	8001888 <my_printf>
  }


  /* Restore default configuration */
  lsm6dsl_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	2101      	movs	r1, #1
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 fb9b 	bl	8001674 <lsm6dsl_reset_set>
  my_printf("restore default config correct\r\n");
 8000f3e:	4890      	ldr	r0, [pc, #576]	@ (8001180 <lsm6dsl_read_data_polling+0x29c>)
 8000f40:	f000 fca2 	bl	8001888 <my_printf>
  do {
    lsm6dsl_reset_get(&dev_ctx, &rst);
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	498e      	ldr	r1, [pc, #568]	@ (8001184 <lsm6dsl_read_data_polling+0x2a0>)
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fbb8 	bl	80016c0 <lsm6dsl_reset_get>
  } while (rst);
 8000f50:	4b8c      	ldr	r3, [pc, #560]	@ (8001184 <lsm6dsl_read_data_polling+0x2a0>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f5      	bne.n	8000f44 <lsm6dsl_read_data_polling+0x60>
  my_printf("reset done\r\n");
 8000f58:	488b      	ldr	r0, [pc, #556]	@ (8001188 <lsm6dsl_read_data_polling+0x2a4>)
 8000f5a:	f000 fc95 	bl	8001888 <my_printf>
  /* Enable Block Data Update */
  lsm6dsl_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	2101      	movs	r1, #1
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fa8b 	bl	8001480 <lsm6dsl_block_data_update_set>
  /* Set Output Data Rate */
  lsm6dsl_xl_data_rate_set(&dev_ctx, LSM6DSL_XL_ODR_12Hz5);
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 fa13 	bl	800139c <lsm6dsl_xl_data_rate_set>
  lsm6dsl_gy_data_rate_set(&dev_ctx, LSM6DSL_GY_ODR_12Hz5);
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fa59 	bl	8001434 <lsm6dsl_gy_data_rate_set>
  /* Set full scale */
  lsm6dsl_xl_full_scale_set(&dev_ctx, LSM6DSL_2g);
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 f9e1 	bl	8001350 <lsm6dsl_xl_full_scale_set>
  lsm6dsl_gy_full_scale_set(&dev_ctx, LSM6DSL_2000dps);
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	2106      	movs	r1, #6
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fa27 	bl	80013e8 <lsm6dsl_gy_full_scale_set>
  /* Configure filtering chain(No aux interface) */
  /* Accelerometer - analog filter */
  lsm6dsl_xl_filter_analog_set(&dev_ctx, LSM6DSL_XL_ANA_BW_400Hz);
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fba6 	bl	80016f2 <lsm6dsl_xl_filter_analog_set>
  /* Accelerometer - LPF1 path ( LPF2 not used )*/
  //lsm6dsl_xl_lp1_bandwidth_set(&dev_ctx, LSM6DSL_XL_LP1_ODR_DIV_4);
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx,
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	2111      	movs	r1, #17
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fbc6 	bl	800173e <lsm6dsl_xl_lp2_bandwidth_set>
                               LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
  /* Accelerometer - High Pass / Slope path */
  //lsm6dsl_xl_reference_mode_set(&dev_ctx, PROPERTY_DISABLE);
  //lsm6dsl_xl_hp_bandwidth_set(&dev_ctx, LSM6DSL_XL_HP_ODR_DIV_100);
  /* Gyroscope - filtering chain */
  lsm6dsl_gy_band_pass_set(&dev_ctx, LSM6DSL_HP_260mHz_LP1_STRONG);
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	21a8      	movs	r1, #168	@ 0xa8
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fbf7 	bl	80017ac <lsm6dsl_gy_band_pass_set>
  my_printf("setup parameter done\r\n");
 8000fbe:	4873      	ldr	r0, [pc, #460]	@ (800118c <lsm6dsl_read_data_polling+0x2a8>)
 8000fc0:	f000 fc62 	bl	8001888 <my_printf>

  /* Read samples in polling mode (no int) */
  while (1) {
    /* Read output only if new value is available */
    lsm6dsl_reg_t reg;
    lsm6dsl_status_reg_get(&dev_ctx, &reg.status_reg);
 8000fc4:	1d3a      	adds	r2, r7, #4
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fa7d 	bl	80014cc <lsm6dsl_status_reg_get>

    if (reg.status_reg.xlda) {
 8000fd2:	793b      	ldrb	r3, [r7, #4]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d049      	beq.n	8001072 <lsm6dsl_read_data_polling+0x18e>
      /* Read magnetic field data */
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8000fde:	2206      	movs	r2, #6
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	486b      	ldr	r0, [pc, #428]	@ (8001190 <lsm6dsl_read_data_polling+0x2ac>)
 8000fe4:	f00b f9fc 	bl	800c3e0 <memset>
      lsm6dsl_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	4968      	ldr	r1, [pc, #416]	@ (8001190 <lsm6dsl_read_data_polling+0x2ac>)
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fae7 	bl	80015c2 <lsm6dsl_acceleration_raw_get>
      acceleration_mg[0] = lsm6dsl_from_fs2g_to_mg(
 8000ff4:	4b66      	ldr	r3, [pc, #408]	@ (8001190 <lsm6dsl_read_data_polling+0x2ac>)
 8000ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f95c 	bl	80012b8 <lsm6dsl_from_fs2g_to_mg>
 8001000:	eef0 7a40 	vmov.f32	s15, s0
 8001004:	4b63      	ldr	r3, [pc, #396]	@ (8001194 <lsm6dsl_read_data_polling+0x2b0>)
 8001006:	edc3 7a00 	vstr	s15, [r3]
                             data_raw_acceleration[0]);
      acceleration_mg[1] = lsm6dsl_from_fs2g_to_mg(
 800100a:	4b61      	ldr	r3, [pc, #388]	@ (8001190 <lsm6dsl_read_data_polling+0x2ac>)
 800100c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001010:	4618      	mov	r0, r3
 8001012:	f000 f951 	bl	80012b8 <lsm6dsl_from_fs2g_to_mg>
 8001016:	eef0 7a40 	vmov.f32	s15, s0
 800101a:	4b5e      	ldr	r3, [pc, #376]	@ (8001194 <lsm6dsl_read_data_polling+0x2b0>)
 800101c:	edc3 7a01 	vstr	s15, [r3, #4]
                             data_raw_acceleration[1]);
      acceleration_mg[2] = lsm6dsl_from_fs2g_to_mg(
 8001020:	4b5b      	ldr	r3, [pc, #364]	@ (8001190 <lsm6dsl_read_data_polling+0x2ac>)
 8001022:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f946 	bl	80012b8 <lsm6dsl_from_fs2g_to_mg>
 800102c:	eef0 7a40 	vmov.f32	s15, s0
 8001030:	4b58      	ldr	r3, [pc, #352]	@ (8001194 <lsm6dsl_read_data_polling+0x2b0>)
 8001032:	edc3 7a02 	vstr	s15, [r3, #8]
                             data_raw_acceleration[2]);
      my_printf( "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001036:	4b57      	ldr	r3, [pc, #348]	@ (8001194 <lsm6dsl_read_data_polling+0x2b0>)
 8001038:	681b      	ldr	r3, [r3, #0]
      my_printf( "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa8c 	bl	8000558 <__aeabi_f2d>
 8001040:	4604      	mov	r4, r0
 8001042:	460d      	mov	r5, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001044:	4b53      	ldr	r3, [pc, #332]	@ (8001194 <lsm6dsl_read_data_polling+0x2b0>)
 8001046:	685b      	ldr	r3, [r3, #4]
      my_printf( "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa85 	bl	8000558 <__aeabi_f2d>
 800104e:	4680      	mov	r8, r0
 8001050:	4689      	mov	r9, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001052:	4b50      	ldr	r3, [pc, #320]	@ (8001194 <lsm6dsl_read_data_polling+0x2b0>)
 8001054:	689b      	ldr	r3, [r3, #8]
      my_printf( "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa7e 	bl	8000558 <__aeabi_f2d>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	ec43 2b12 	vmov	d2, r2, r3
 8001064:	ec49 8b11 	vmov	d1, r8, r9
 8001068:	ec45 4b10 	vmov	d0, r4, r5
 800106c:	484a      	ldr	r0, [pc, #296]	@ (8001198 <lsm6dsl_read_data_polling+0x2b4>)
 800106e:	f000 fc0b 	bl	8001888 <my_printf>
    }

    if (reg.status_reg.gda) {
 8001072:	793b      	ldrb	r3, [r7, #4]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d049      	beq.n	8001112 <lsm6dsl_read_data_polling+0x22e>
      /* Read magnetic field data */
      memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800107e:	2206      	movs	r2, #6
 8001080:	2100      	movs	r1, #0
 8001082:	4846      	ldr	r0, [pc, #280]	@ (800119c <lsm6dsl_read_data_polling+0x2b8>)
 8001084:	f00b f9ac 	bl	800c3e0 <memset>
      lsm6dsl_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	4943      	ldr	r1, [pc, #268]	@ (800119c <lsm6dsl_read_data_polling+0x2b8>)
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fa4f 	bl	8001532 <lsm6dsl_angular_rate_raw_get>
      angular_rate_mdps[0] = lsm6dsl_from_fs2000dps_to_mdps(
 8001094:	4b41      	ldr	r3, [pc, #260]	@ (800119c <lsm6dsl_read_data_polling+0x2b8>)
 8001096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f924 	bl	80012e8 <lsm6dsl_from_fs2000dps_to_mdps>
 80010a0:	eef0 7a40 	vmov.f32	s15, s0
 80010a4:	4b3e      	ldr	r3, [pc, #248]	@ (80011a0 <lsm6dsl_read_data_polling+0x2bc>)
 80010a6:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_angular_rate[0]);
      angular_rate_mdps[1] = lsm6dsl_from_fs2000dps_to_mdps(
 80010aa:	4b3c      	ldr	r3, [pc, #240]	@ (800119c <lsm6dsl_read_data_polling+0x2b8>)
 80010ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f919 	bl	80012e8 <lsm6dsl_from_fs2000dps_to_mdps>
 80010b6:	eef0 7a40 	vmov.f32	s15, s0
 80010ba:	4b39      	ldr	r3, [pc, #228]	@ (80011a0 <lsm6dsl_read_data_polling+0x2bc>)
 80010bc:	edc3 7a01 	vstr	s15, [r3, #4]
                               data_raw_angular_rate[1]);
      angular_rate_mdps[2] = lsm6dsl_from_fs2000dps_to_mdps(
 80010c0:	4b36      	ldr	r3, [pc, #216]	@ (800119c <lsm6dsl_read_data_polling+0x2b8>)
 80010c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f90e 	bl	80012e8 <lsm6dsl_from_fs2000dps_to_mdps>
 80010cc:	eef0 7a40 	vmov.f32	s15, s0
 80010d0:	4b33      	ldr	r3, [pc, #204]	@ (80011a0 <lsm6dsl_read_data_polling+0x2bc>)
 80010d2:	edc3 7a02 	vstr	s15, [r3, #8]
                               data_raw_angular_rate[2]);
      my_printf("Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 80010d6:	4b32      	ldr	r3, [pc, #200]	@ (80011a0 <lsm6dsl_read_data_polling+0x2bc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
      my_printf("Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa3c 	bl	8000558 <__aeabi_f2d>
 80010e0:	4604      	mov	r4, r0
 80010e2:	460d      	mov	r5, r1
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 80010e4:	4b2e      	ldr	r3, [pc, #184]	@ (80011a0 <lsm6dsl_read_data_polling+0x2bc>)
 80010e6:	685b      	ldr	r3, [r3, #4]
      my_printf("Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fa35 	bl	8000558 <__aeabi_f2d>
 80010ee:	4680      	mov	r8, r0
 80010f0:	4689      	mov	r9, r1
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 80010f2:	4b2b      	ldr	r3, [pc, #172]	@ (80011a0 <lsm6dsl_read_data_polling+0x2bc>)
 80010f4:	689b      	ldr	r3, [r3, #8]
      my_printf("Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fa2e 	bl	8000558 <__aeabi_f2d>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	ec43 2b12 	vmov	d2, r2, r3
 8001104:	ec49 8b11 	vmov	d1, r8, r9
 8001108:	ec45 4b10 	vmov	d0, r4, r5
 800110c:	4825      	ldr	r0, [pc, #148]	@ (80011a4 <lsm6dsl_read_data_polling+0x2c0>)
 800110e:	f000 fbbb 	bl	8001888 <my_printf>
    }

    if (reg.status_reg.tda) {
 8001112:	793b      	ldrb	r3, [r7, #4]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	f43f af52 	beq.w	8000fc4 <lsm6dsl_read_data_polling+0xe0>
      /* Read temperature data */
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8001120:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <lsm6dsl_read_data_polling+0x2c4>)
 8001122:	2200      	movs	r2, #0
 8001124:	801a      	strh	r2, [r3, #0]
      lsm6dsl_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	491f      	ldr	r1, [pc, #124]	@ (80011a8 <lsm6dsl_read_data_polling+0x2c4>)
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f9de 	bl	80014ee <lsm6dsl_temperature_raw_get>
      temperature_degC = lsm6dsl_from_lsb_to_celsius(
 8001132:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <lsm6dsl_read_data_polling+0x2c4>)
 8001134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f8ed 	bl	8001318 <lsm6dsl_from_lsb_to_celsius>
 800113e:	eef0 7a40 	vmov.f32	s15, s0
 8001142:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <lsm6dsl_read_data_polling+0x2c8>)
 8001144:	edc3 7a00 	vstr	s15, [r3]
                           data_raw_temperature );
      my_printf("Temperature [degC]:%6.2f\r\n", temperature_degC );
 8001148:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <lsm6dsl_read_data_polling+0x2c8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fa03 	bl	8000558 <__aeabi_f2d>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	ec43 2b10 	vmov	d0, r2, r3
 800115a:	4815      	ldr	r0, [pc, #84]	@ (80011b0 <lsm6dsl_read_data_polling+0x2cc>)
 800115c:	f000 fb94 	bl	8001888 <my_printf>
  while (1) {
 8001160:	e730      	b.n	8000fc4 <lsm6dsl_read_data_polling+0xe0>
 8001162:	bf00      	nop
 8001164:	080011b5 	.word	0x080011b5
 8001168:	080011ef 	.word	0x080011ef
 800116c:	08001229 	.word	0x08001229
 8001170:	2000036c 	.word	0x2000036c
 8001174:	20000314 	.word	0x20000314
 8001178:	0800e590 	.word	0x0800e590
 800117c:	0800e5ac 	.word	0x0800e5ac
 8001180:	0800e5c0 	.word	0x0800e5c0
 8001184:	20000315 	.word	0x20000315
 8001188:	0800e5e4 	.word	0x0800e5e4
 800118c:	0800e5f4 	.word	0x0800e5f4
 8001190:	200002e8 	.word	0x200002e8
 8001194:	200002f8 	.word	0x200002f8
 8001198:	0800e60c 	.word	0x0800e60c
 800119c:	200002f0 	.word	0x200002f0
 80011a0:	20000304 	.word	0x20000304
 80011a4:	0800e634 	.word	0x0800e634
 80011a8:	200002f6 	.word	0x200002f6
 80011ac:	20000310 	.word	0x20000310
 80011b0:	0800e65c 	.word	0x0800e65c

080011b4 <platform_write>:
    }
  }
}

static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af04      	add	r7, sp, #16
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	461a      	mov	r2, r3
 80011c0:	460b      	mov	r3, r1
 80011c2:	72fb      	strb	r3, [r7, #11]
 80011c4:	4613      	mov	r3, r2
 80011c6:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_H, reg,
 80011c8:	7afb      	ldrb	r3, [r7, #11]
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	893b      	ldrh	r3, [r7, #8]
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	21d7      	movs	r1, #215	@ 0xd7
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f002 fb04 	bl	80037ec <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b088      	sub	sp, #32
 80011f2:	af04      	add	r7, sp, #16
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	461a      	mov	r2, r3
 80011fa:	460b      	mov	r3, r1
 80011fc:	72fb      	strb	r3, [r7, #11]
 80011fe:	4613      	mov	r3, r2
 8001200:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_H, reg,
 8001202:	7afb      	ldrb	r3, [r7, #11]
 8001204:	b29a      	uxth	r2, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120a:	9302      	str	r3, [sp, #8]
 800120c:	893b      	ldrh	r3, [r7, #8]
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2301      	movs	r3, #1
 8001216:	21d7      	movs	r1, #215	@ 0xd7
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f002 fbe1 	bl	80039e0 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <platform_delay>:

static void platform_delay(uint32_t ms)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f001 fbad 	bl	8002990 <HAL_Delay>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <lsm6dsl_read_reg>:
  *
  */
int32_t __weak lsm6dsl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800123e:	b590      	push	{r4, r7, lr}
 8001240:	b087      	sub	sp, #28
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	461a      	mov	r2, r3
 800124a:	460b      	mov	r3, r1
 800124c:	72fb      	strb	r3, [r7, #11]
 800124e:	4613      	mov	r3, r2
 8001250:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <lsm6dsl_read_reg+0x20>
  {
    return -1;
 8001258:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800125c:	e009      	b.n	8001272 <lsm6dsl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	685c      	ldr	r4, [r3, #4]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	68d8      	ldr	r0, [r3, #12]
 8001266:	893b      	ldrh	r3, [r7, #8]
 8001268:	7af9      	ldrb	r1, [r7, #11]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	47a0      	blx	r4
 800126e:	6178      	str	r0, [r7, #20]

  return ret;
 8001270:	697b      	ldr	r3, [r7, #20]
}
 8001272:	4618      	mov	r0, r3
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd90      	pop	{r4, r7, pc}

0800127a <lsm6dsl_write_reg>:
  *
  */
int32_t __weak lsm6dsl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800127a:	b590      	push	{r4, r7, lr}
 800127c:	b087      	sub	sp, #28
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	461a      	mov	r2, r3
 8001286:	460b      	mov	r3, r1
 8001288:	72fb      	strb	r3, [r7, #11]
 800128a:	4613      	mov	r3, r2
 800128c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <lsm6dsl_write_reg+0x20>
  {
    return -1;
 8001294:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001298:	e009      	b.n	80012ae <lsm6dsl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681c      	ldr	r4, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	68d8      	ldr	r0, [r3, #12]
 80012a2:	893b      	ldrh	r3, [r7, #8]
 80012a4:	7af9      	ldrb	r1, [r7, #11]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	47a0      	blx	r4
 80012aa:	6178      	str	r0, [r7, #20]

  return ret;
 80012ac:	697b      	ldr	r3, [r7, #20]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	371c      	adds	r7, #28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd90      	pop	{r4, r7, pc}
	...

080012b8 <lsm6dsl_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsl_from_fs2g_to_mg(int16_t lsb)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 80012c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ce:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80012e4 <lsm6dsl_from_fs2g_to_mg+0x2c>
 80012d2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80012d6:	eeb0 0a67 	vmov.f32	s0, s15
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	3d79db23 	.word	0x3d79db23

080012e8 <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80012f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fe:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001314 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 8001302:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001306:	eeb0 0a67 	vmov.f32	s0, s15
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	428c0000 	.word	0x428c0000

08001318 <lsm6dsl_from_lsb_to_celsius>:

float_t lsm6dsl_from_lsb_to_celsius(int16_t lsb)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8001322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800132e:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800134c <lsm6dsl_from_lsb_to_celsius+0x34>
 8001332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001336:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800133a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	43800000 	.word	0x43800000

08001350 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800135c:	f107 0208 	add.w	r2, r7, #8
 8001360:	2301      	movs	r3, #1
 8001362:	2110      	movs	r1, #16
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff6a 	bl	800123e <lsm6dsl_read_reg>
 800136a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10f      	bne.n	8001392 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	b2da      	uxtb	r2, r3
 800137a:	7a3b      	ldrb	r3, [r7, #8]
 800137c:	f362 0383 	bfi	r3, r2, #2, #2
 8001380:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001382:	f107 0208 	add.w	r2, r7, #8
 8001386:	2301      	movs	r3, #1
 8001388:	2110      	movs	r1, #16
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff75 	bl	800127a <lsm6dsl_write_reg>
 8001390:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80013a8:	f107 0208 	add.w	r2, r7, #8
 80013ac:	2301      	movs	r3, #1
 80013ae:	2110      	movs	r1, #16
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff44 	bl	800123e <lsm6dsl_read_reg>
 80013b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10f      	bne.n	80013de <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	7a3b      	ldrb	r3, [r7, #8]
 80013c8:	f362 1307 	bfi	r3, r2, #4, #4
 80013cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80013ce:	f107 0208 	add.w	r2, r7, #8
 80013d2:	2301      	movs	r3, #1
 80013d4:	2110      	movs	r1, #16
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ff4f 	bl	800127a <lsm6dsl_write_reg>
 80013dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80013f4:	f107 0208 	add.w	r2, r7, #8
 80013f8:	2301      	movs	r3, #1
 80013fa:	2111      	movs	r1, #17
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff1e 	bl	800123e <lsm6dsl_read_reg>
 8001402:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10f      	bne.n	800142a <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	b2da      	uxtb	r2, r3
 8001412:	7a3b      	ldrb	r3, [r7, #8]
 8001414:	f362 0343 	bfi	r3, r2, #1, #3
 8001418:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800141a:	f107 0208 	add.w	r2, r7, #8
 800141e:	2301      	movs	r3, #1
 8001420:	2111      	movs	r1, #17
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff29 	bl	800127a <lsm6dsl_write_reg>
 8001428:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001440:	f107 0208 	add.w	r2, r7, #8
 8001444:	2301      	movs	r3, #1
 8001446:	2111      	movs	r1, #17
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff fef8 	bl	800123e <lsm6dsl_read_reg>
 800144e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10f      	bne.n	8001476 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	f003 030f 	and.w	r3, r3, #15
 800145c:	b2da      	uxtb	r2, r3
 800145e:	7a3b      	ldrb	r3, [r7, #8]
 8001460:	f362 1307 	bfi	r3, r2, #4, #4
 8001464:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001466:	f107 0208 	add.w	r2, r7, #8
 800146a:	2301      	movs	r3, #1
 800146c:	2111      	movs	r1, #17
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff03 	bl	800127a <lsm6dsl_write_reg>
 8001474:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800148c:	f107 0208 	add.w	r2, r7, #8
 8001490:	2301      	movs	r3, #1
 8001492:	2112      	movs	r1, #18
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fed2 	bl	800123e <lsm6dsl_read_reg>
 800149a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10f      	bne.n	80014c2 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	7a3b      	ldrb	r3, [r7, #8]
 80014ac:	f362 1386 	bfi	r3, r2, #6, #1
 80014b0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80014b2:	f107 0208 	add.w	r2, r7, #8
 80014b6:	2301      	movs	r3, #1
 80014b8:	2112      	movs	r1, #18
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fedd 	bl	800127a <lsm6dsl_write_reg>
 80014c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <lsm6dsl_status_reg_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_status_reg_get(const stmdev_ctx_t *ctx,
                               lsm6dsl_status_reg_t *val)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t *) val, 1);
 80014d6:	2301      	movs	r3, #1
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	211e      	movs	r1, #30
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff feae 	bl	800123e <lsm6dsl_read_reg>
 80014e2:	60f8      	str	r0, [r7, #12]

  return ret;
 80014e4:	68fb      	ldr	r3, [r7, #12]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <lsm6dsl_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUT_TEMP_L, buff, 2);
 80014f8:	f107 0208 	add.w	r2, r7, #8
 80014fc:	2302      	movs	r3, #2
 80014fe:	2120      	movs	r1, #32
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fe9c 	bl	800123e <lsm6dsl_read_reg>
 8001506:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8001508:	7a7b      	ldrb	r3, [r7, #9]
 800150a:	b21a      	sxth	r2, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001516:	b29b      	uxth	r3, r3
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	b29b      	uxth	r3, r3
 800151c:	7a3a      	ldrb	r2, [r7, #8]
 800151e:	4413      	add	r3, r2
 8001520:	b29b      	uxth	r3, r3
 8001522:	b21a      	sxth	r2, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	801a      	strh	r2, [r3, #0]

  return ret;
 8001528:	68fb      	ldr	r3, [r7, #12]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800153c:	f107 020c 	add.w	r2, r7, #12
 8001540:	2306      	movs	r3, #6
 8001542:	2122      	movs	r1, #34	@ 0x22
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff fe7a 	bl	800123e <lsm6dsl_read_reg>
 800154a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800154c:	7b7b      	ldrb	r3, [r7, #13]
 800154e:	b21a      	sxth	r2, r3
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155a:	b29b      	uxth	r3, r3
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	b29b      	uxth	r3, r3
 8001560:	7b3a      	ldrb	r2, [r7, #12]
 8001562:	4413      	add	r3, r2
 8001564:	b29b      	uxth	r3, r3
 8001566:	b21a      	sxth	r2, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	3302      	adds	r3, #2
 8001572:	b212      	sxth	r2, r2
 8001574:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3302      	adds	r3, #2
 800157a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157e:	b29b      	uxth	r3, r3
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b29b      	uxth	r3, r3
 8001584:	7bba      	ldrb	r2, [r7, #14]
 8001586:	4413      	add	r3, r2
 8001588:	b29a      	uxth	r2, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	3302      	adds	r3, #2
 800158e:	b212      	sxth	r2, r2
 8001590:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001592:	7c7a      	ldrb	r2, [r7, #17]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	3304      	adds	r3, #4
 8001598:	b212      	sxth	r2, r2
 800159a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	3304      	adds	r3, #4
 80015a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	7c3a      	ldrb	r2, [r7, #16]
 80015ac:	4413      	add	r3, r2
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	3304      	adds	r3, #4
 80015b4:	b212      	sxth	r2, r2
 80015b6:	801a      	strh	r2, [r3, #0]

  return ret;
 80015b8:	697b      	ldr	r3, [r7, #20]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80015cc:	f107 020c 	add.w	r2, r7, #12
 80015d0:	2306      	movs	r3, #6
 80015d2:	2128      	movs	r1, #40	@ 0x28
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fe32 	bl	800123e <lsm6dsl_read_reg>
 80015da:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80015dc:	7b7b      	ldrb	r3, [r7, #13]
 80015de:	b21a      	sxth	r2, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	7b3a      	ldrb	r2, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	3302      	adds	r3, #2
 8001602:	b212      	sxth	r2, r2
 8001604:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	3302      	adds	r3, #2
 800160a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160e:	b29b      	uxth	r3, r3
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b29b      	uxth	r3, r3
 8001614:	7bba      	ldrb	r2, [r7, #14]
 8001616:	4413      	add	r3, r2
 8001618:	b29a      	uxth	r2, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	3302      	adds	r3, #2
 800161e:	b212      	sxth	r2, r2
 8001620:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001622:	7c7a      	ldrb	r2, [r7, #17]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	3304      	adds	r3, #4
 8001628:	b212      	sxth	r2, r2
 800162a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	3304      	adds	r3, #4
 8001630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001634:	b29b      	uxth	r3, r3
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	b29b      	uxth	r3, r3
 800163a:	7c3a      	ldrb	r2, [r7, #16]
 800163c:	4413      	add	r3, r2
 800163e:	b29a      	uxth	r2, r3
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	3304      	adds	r3, #4
 8001644:	b212      	sxth	r2, r2
 8001646:	801a      	strh	r2, [r3, #0]

  return ret;
 8001648:	697b      	ldr	r3, [r7, #20]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800165c:	2301      	movs	r3, #1
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	210f      	movs	r1, #15
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fdeb 	bl	800123e <lsm6dsl_read_reg>
 8001668:	60f8      	str	r0, [r7, #12]

  return ret;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001680:	f107 0208 	add.w	r2, r7, #8
 8001684:	2301      	movs	r3, #1
 8001686:	2112      	movs	r1, #18
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff fdd8 	bl	800123e <lsm6dsl_read_reg>
 800168e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10f      	bne.n	80016b6 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	b2da      	uxtb	r2, r3
 800169e:	7a3b      	ldrb	r3, [r7, #8]
 80016a0:	f362 0300 	bfi	r3, r2, #0, #1
 80016a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80016a6:	f107 0208 	add.w	r2, r7, #8
 80016aa:	2301      	movs	r3, #1
 80016ac:	2112      	movs	r1, #18
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fde3 	bl	800127a <lsm6dsl_write_reg>
 80016b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80016ca:	f107 0208 	add.w	r2, r7, #8
 80016ce:	2301      	movs	r3, #1
 80016d0:	2112      	movs	r1, #18
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff fdb3 	bl	800123e <lsm6dsl_read_reg>
 80016d8:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80016da:	7a3b      	ldrb	r3, [r7, #8]
 80016dc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	461a      	mov	r2, r3
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	701a      	strb	r2, [r3, #0]

  return ret;
 80016e8:	68fb      	ldr	r3, [r7, #12]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <lsm6dsl_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_filter_analog_set(const stmdev_ctx_t *ctx,
                                     lsm6dsl_bw0_xl_t val)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	460b      	mov	r3, r1
 80016fc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80016fe:	f107 0208 	add.w	r2, r7, #8
 8001702:	2301      	movs	r3, #1
 8001704:	2110      	movs	r1, #16
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fd99 	bl	800123e <lsm6dsl_read_reg>
 800170c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10f      	bne.n	8001734 <lsm6dsl_xl_filter_analog_set+0x42>
  {
    ctrl1_xl.bw0_xl = (uint8_t) val;
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	b2da      	uxtb	r2, r3
 800171c:	7a3b      	ldrb	r3, [r7, #8]
 800171e:	f362 0300 	bfi	r3, r2, #0, #1
 8001722:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001724:	f107 0208 	add.w	r2, r7, #8
 8001728:	2301      	movs	r3, #1
 800172a:	2110      	movs	r1, #16
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff fda4 	bl	800127a <lsm6dsl_write_reg>
 8001732:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001734:	68fb      	ldr	r3, [r7, #12]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(const stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 800174a:	f107 0208 	add.w	r2, r7, #8
 800174e:	2301      	movs	r3, #1
 8001750:	2117      	movs	r1, #23
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fd73 	bl	800123e <lsm6dsl_read_reg>
 8001758:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d120      	bne.n	80017a2 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	091b      	lsrs	r3, r3, #4
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	b2da      	uxtb	r2, r3
 800176a:	7a3b      	ldrb	r3, [r7, #8]
 800176c:	f362 03c3 	bfi	r3, r2, #3, #1
 8001770:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	b2da      	uxtb	r2, r3
 800177a:	7a3b      	ldrb	r3, [r7, #8]
 800177c:	f362 1346 	bfi	r3, r2, #5, #2
 8001780:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8001782:	7a3b      	ldrb	r3, [r7, #8]
 8001784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001788:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 800178a:	7a3b      	ldrb	r3, [r7, #8]
 800178c:	f023 0304 	bic.w	r3, r3, #4
 8001790:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001792:	f107 0208 	add.w	r2, r7, #8
 8001796:	2301      	movs	r3, #1
 8001798:	2117      	movs	r1, #23
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fd6d 	bl	800127a <lsm6dsl_write_reg>
 80017a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(const stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80017b8:	f107 0208 	add.w	r2, r7, #8
 80017bc:	2301      	movs	r3, #1
 80017be:	2116      	movs	r1, #22
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff fd3c 	bl	800123e <lsm6dsl_read_reg>
 80017c6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d157      	bne.n	800187e <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	7a3b      	ldrb	r3, [r7, #8]
 80017da:	f362 1305 	bfi	r3, r2, #4, #2
 80017de:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	09db      	lsrs	r3, r3, #7
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	7a3b      	ldrb	r3, [r7, #8]
 80017ee:	f362 1386 	bfi	r3, r2, #6, #1
 80017f2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80017f4:	f107 0208 	add.w	r2, r7, #8
 80017f8:	2301      	movs	r3, #1
 80017fa:	2116      	movs	r1, #22
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fd3c 	bl	800127a <lsm6dsl_write_reg>
 8001802:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d139      	bne.n	800187e <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800180a:	f107 020c 	add.w	r2, r7, #12
 800180e:	2301      	movs	r3, #1
 8001810:	2115      	movs	r1, #21
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fd13 	bl	800123e <lsm6dsl_read_reg>
 8001818:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d12e      	bne.n	800187e <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	b2da      	uxtb	r2, r3
 8001828:	7b3b      	ldrb	r3, [r7, #12]
 800182a:	f362 0301 	bfi	r3, r2, #0, #2
 800182e:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001830:	f107 020c 	add.w	r2, r7, #12
 8001834:	2301      	movs	r3, #1
 8001836:	2115      	movs	r1, #21
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff fd1e 	bl	800127a <lsm6dsl_write_reg>
 800183e:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d11b      	bne.n	800187e <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8001846:	f107 0210 	add.w	r2, r7, #16
 800184a:	2301      	movs	r3, #1
 800184c:	2113      	movs	r1, #19
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fcf5 	bl	800123e <lsm6dsl_read_reg>
 8001854:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d110      	bne.n	800187e <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	08db      	lsrs	r3, r3, #3
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	b2da      	uxtb	r2, r3
 8001866:	7c3b      	ldrb	r3, [r7, #16]
 8001868:	f362 0341 	bfi	r3, r2, #1, #1
 800186c:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 800186e:	f107 0210 	add.w	r2, r7, #16
 8001872:	2301      	movs	r3, #1
 8001874:	2113      	movs	r1, #19
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fcff 	bl	800127a <lsm6dsl_write_reg>
 800187c:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 800187e:	697b      	ldr	r3, [r7, #20]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <my_printf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void my_printf(const char *format, ...)
{
 8001888:	b40f      	push	{r0, r1, r2, r3}
 800188a:	b580      	push	{r7, lr}
 800188c:	b0a2      	sub	sp, #136	@ 0x88
 800188e:	af00      	add	r7, sp, #0
    char tx_buffer[BUFFER_LEN];
    va_list args;
    va_start(args, format);
 8001890:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001894:	603b      	str	r3, [r7, #0]
    int usbTxLength = vsnprintf(tx_buffer, BUFFER_LEN, format, args);
 8001896:	1d38      	adds	r0, r7, #4
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800189e:	2180      	movs	r1, #128	@ 0x80
 80018a0:	f00a fd90 	bl	800c3c4 <vsniprintf>
 80018a4:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    va_end(args);

    if (usbTxLength > 0 && usbTxLength < BUFFER_LEN)
 80018a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	dd0b      	ble.n	80018c8 <my_printf+0x40>
 80018b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80018b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80018b6:	dc07      	bgt.n	80018c8 <my_printf+0x40>
    {
        CDC_Transmit_FS((uint8_t *)tx_buffer, usbTxLength);
 80018b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80018bc:	b29a      	uxth	r2, r3
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	4611      	mov	r1, r2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f009 fba2 	bl	800b00c <CDC_Transmit_FS>
    }
}
 80018c8:	bf00      	nop
 80018ca:	3788      	adds	r7, #136	@ 0x88
 80018cc:	46bd      	mov	sp, r7
 80018ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018d2:	b004      	add	sp, #16
 80018d4:	4770      	bx	lr
	...

080018d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	@ 0x28
 80018dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018de:	f000 ffe5 	bl	80028ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e2:	f000 f895 	bl	8001a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e6:	f000 fad5 	bl	8001e94 <MX_GPIO_Init>
  MX_I2C1_Init();
 80018ea:	f000 f8f9 	bl	8001ae0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80018ee:	f000 faa7 	bl	8001e40 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80018f2:	f000 f923 	bl	8001b3c <MX_I2C2_Init>
  MX_TIM1_Init();
 80018f6:	f000 f94f 	bl	8001b98 <MX_TIM1_Init>
  MX_TIM4_Init();
 80018fa:	f000 f9f9 	bl	8001cf0 <MX_TIM4_Init>
  MX_TIM5_Init();
 80018fe:	f000 fa4b 	bl	8001d98 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8001902:	f009 fa75 	bl	800adf0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  selectTCAChannel(0);
 8001906:	2000      	movs	r0, #0
 8001908:	f000 fdea 	bl	80024e0 <selectTCAChannel>
  TCS34725_t tcs34725_sensor;
  tcs32725_begin(&tcs34725_sensor, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 800190c:	f107 0318 	add.w	r3, r7, #24
 8001910:	2200      	movs	r2, #0
 8001912:	21f6      	movs	r1, #246	@ 0xf6
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fe81 	bl	800261c <tcs32725_begin>
  selectTCAChannel(1);
 800191a:	2001      	movs	r0, #1
 800191c:	f000 fde0 	bl	80024e0 <selectTCAChannel>
  TCS34725_t tcs34725_sensor1;
  tcs32725_begin(&tcs34725_sensor1, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	21f6      	movs	r1, #246	@ 0xf6
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fe77 	bl	800261c <tcs32725_begin>
  selectTCAChannel(2);
 800192e:	2002      	movs	r0, #2
 8001930:	f000 fdd6 	bl	80024e0 <selectTCAChannel>
  TCS34725_t tcs34725_sensor2;
  tcs32725_begin(&tcs34725_sensor2, TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	2200      	movs	r2, #0
 800193a:	21f6      	movs	r1, #246	@ 0xf6
 800193c:	4618      	mov	r0, r3
 800193e:	f000 fe6d 	bl	800261c <tcs32725_begin>
  float r, g, b;
  uint32_t count = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]


  uint8_t dev_id = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	70fb      	strb	r3, [r7, #3]
  uint8_t whoami = 0x0F;
 800194a:	230f      	movs	r3, #15
 800194c:	70bb      	strb	r3, [r7, #2]
  HAL_I2C_Master_Transmit(&hi2c2, 0x6B << 1, &whoami, 1, 100);
 800194e:	1cba      	adds	r2, r7, #2
 8001950:	2364      	movs	r3, #100	@ 0x64
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2301      	movs	r3, #1
 8001956:	21d6      	movs	r1, #214	@ 0xd6
 8001958:	4828      	ldr	r0, [pc, #160]	@ (80019fc <main+0x124>)
 800195a:	f001 fc17 	bl	800318c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c2, 0x6B << 1, &dev_id, 1, 100);
 800195e:	1cfa      	adds	r2, r7, #3
 8001960:	2364      	movs	r3, #100	@ 0x64
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2301      	movs	r3, #1
 8001966:	21d6      	movs	r1, #214	@ 0xd6
 8001968:	4824      	ldr	r0, [pc, #144]	@ (80019fc <main+0x124>)
 800196a:	f001 fd0d 	bl	8003388 <HAL_I2C_Master_Receive>
  my_printf("my id: %d", dev_id);
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	4619      	mov	r1, r3
 8001972:	4823      	ldr	r0, [pc, #140]	@ (8001a00 <main+0x128>)
 8001974:	f7ff ff88 	bl	8001888 <my_printf>

  lsm6dsl_read_data_polling();
 8001978:	f7ff fab4 	bl	8000ee4 <lsm6dsl_read_data_polling>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  selectTCAChannel(count % 3);
 800197c:	69f9      	ldr	r1, [r7, #28]
 800197e:	4b21      	ldr	r3, [pc, #132]	@ (8001a04 <main+0x12c>)
 8001980:	fba3 2301 	umull	r2, r3, r3, r1
 8001984:	085a      	lsrs	r2, r3, #1
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	1aca      	subs	r2, r1, r3
 800198e:	b2d3      	uxtb	r3, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fda5 	bl	80024e0 <selectTCAChannel>
	  getRGB(&r, &g, &b);
 8001996:	1d3a      	adds	r2, r7, #4
 8001998:	f107 0108 	add.w	r1, r7, #8
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 fef9 	bl	8002798 <getRGB>
	  my_printf("RGB Values from %d: R = %d, G = %d, B = %d\r\n", count%3, (int)(r), (int)(g), (int)(b));
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <main+0x12c>)
 80019aa:	fba3 1302 	umull	r1, r3, r3, r2
 80019ae:	0859      	lsrs	r1, r3, #1
 80019b0:	460b      	mov	r3, r1
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	440b      	add	r3, r1
 80019b6:	1ad1      	subs	r1, r2, r3
 80019b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80019bc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80019c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80019c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80019cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d0:	ee17 3a90 	vmov	r3, s15
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	ee16 3a90 	vmov	r3, s13
 80019da:	ee17 2a10 	vmov	r2, s14
 80019de:	480a      	ldr	r0, [pc, #40]	@ (8001a08 <main+0x130>)
 80019e0:	f7ff ff52 	bl	8001888 <my_printf>
	  my_printf("hello world\r\n");
 80019e4:	4809      	ldr	r0, [pc, #36]	@ (8001a0c <main+0x134>)
 80019e6:	f7ff ff4f 	bl	8001888 <my_printf>
	  count++;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3301      	adds	r3, #1
 80019ee:	61fb      	str	r3, [r7, #28]
	  HAL_Delay(1000);
 80019f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019f4:	f000 ffcc 	bl	8002990 <HAL_Delay>
	  selectTCAChannel(count % 3);
 80019f8:	bf00      	nop
 80019fa:	e7bf      	b.n	800197c <main+0xa4>
 80019fc:	2000036c 	.word	0x2000036c
 8001a00:	0800e678 	.word	0x0800e678
 8001a04:	aaaaaaab 	.word	0xaaaaaaab
 8001a08:	0800e684 	.word	0x0800e684
 8001a0c:	0800e6b4 	.word	0x0800e6b4

08001a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b094      	sub	sp, #80	@ 0x50
 8001a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a16:	f107 0320 	add.w	r3, r7, #32
 8001a1a:	2230      	movs	r2, #48	@ 0x30
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f00a fcde 	bl	800c3e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	4b27      	ldr	r3, [pc, #156]	@ (8001ad8 <SystemClock_Config+0xc8>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3c:	4a26      	ldr	r2, [pc, #152]	@ (8001ad8 <SystemClock_Config+0xc8>)
 8001a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a44:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <SystemClock_Config+0xc8>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	4b21      	ldr	r3, [pc, #132]	@ (8001adc <SystemClock_Config+0xcc>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a20      	ldr	r2, [pc, #128]	@ (8001adc <SystemClock_Config+0xcc>)
 8001a5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b1e      	ldr	r3, [pc, #120]	@ (8001adc <SystemClock_Config+0xcc>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a76:	2302      	movs	r3, #2
 8001a78:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a7a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001a80:	230f      	movs	r3, #15
 8001a82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001a84:	2390      	movs	r3, #144	@ 0x90
 8001a86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a88:	2304      	movs	r3, #4
 8001a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001a8c:	2305      	movs	r3, #5
 8001a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a90:	f107 0320 	add.w	r3, r7, #32
 8001a94:	4618      	mov	r0, r3
 8001a96:	f004 f92b 	bl	8005cf0 <HAL_RCC_OscConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001aa0:	f000 fa2e 	bl	8001f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ab4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	2101      	movs	r1, #1
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f004 fb8d 	bl	80061e0 <HAL_RCC_ClockConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001acc:	f000 fa18 	bl	8001f00 <Error_Handler>
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	3750      	adds	r7, #80	@ 0x50
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40007000 	.word	0x40007000

08001ae0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <MX_I2C1_Init+0x50>)
 8001ae6:	4a13      	ldr	r2, [pc, #76]	@ (8001b34 <MX_I2C1_Init+0x54>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aea:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <MX_I2C1_Init+0x50>)
 8001aec:	4a12      	ldr	r2, [pc, #72]	@ (8001b38 <MX_I2C1_Init+0x58>)
 8001aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <MX_I2C1_Init+0x50>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <MX_I2C1_Init+0x50>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <MX_I2C1_Init+0x50>)
 8001afe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b04:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <MX_I2C1_Init+0x50>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <MX_I2C1_Init+0x50>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b10:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <MX_I2C1_Init+0x50>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <MX_I2C1_Init+0x50>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b1c:	4804      	ldr	r0, [pc, #16]	@ (8001b30 <MX_I2C1_Init+0x50>)
 8001b1e:	f001 f9f1 	bl	8002f04 <HAL_I2C_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b28:	f000 f9ea 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000318 	.word	0x20000318
 8001b34:	40005400 	.word	0x40005400
 8001b38:	000186a0 	.word	0x000186a0

08001b3c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <MX_I2C2_Init+0x50>)
 8001b42:	4a13      	ldr	r2, [pc, #76]	@ (8001b90 <MX_I2C2_Init+0x54>)
 8001b44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b46:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <MX_I2C2_Init+0x50>)
 8001b48:	4a12      	ldr	r2, [pc, #72]	@ (8001b94 <MX_I2C2_Init+0x58>)
 8001b4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <MX_I2C2_Init+0x50>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	@ (8001b8c <MX_I2C2_Init+0x50>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <MX_I2C2_Init+0x50>)
 8001b5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b5e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b60:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <MX_I2C2_Init+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b66:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <MX_I2C2_Init+0x50>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b6c:	4b07      	ldr	r3, [pc, #28]	@ (8001b8c <MX_I2C2_Init+0x50>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b72:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <MX_I2C2_Init+0x50>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b78:	4804      	ldr	r0, [pc, #16]	@ (8001b8c <MX_I2C2_Init+0x50>)
 8001b7a:	f001 f9c3 	bl	8002f04 <HAL_I2C_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b84:	f000 f9bc 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	2000036c 	.word	0x2000036c
 8001b90:	40005800 	.word	0x40005800
 8001b94:	000186a0 	.word	0x000186a0

08001b98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b096      	sub	sp, #88	@ 0x58
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]
 8001bc6:	615a      	str	r2, [r3, #20]
 8001bc8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	2220      	movs	r2, #32
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f00a fc05 	bl	800c3e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bd6:	4b44      	ldr	r3, [pc, #272]	@ (8001ce8 <MX_TIM1_Init+0x150>)
 8001bd8:	4a44      	ldr	r2, [pc, #272]	@ (8001cec <MX_TIM1_Init+0x154>)
 8001bda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bdc:	4b42      	ldr	r3, [pc, #264]	@ (8001ce8 <MX_TIM1_Init+0x150>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be2:	4b41      	ldr	r3, [pc, #260]	@ (8001ce8 <MX_TIM1_Init+0x150>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001be8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ce8 <MX_TIM1_Init+0x150>)
 8001bea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ce8 <MX_TIM1_Init+0x150>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bf6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce8 <MX_TIM1_Init+0x150>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce8 <MX_TIM1_Init+0x150>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c02:	4839      	ldr	r0, [pc, #228]	@ (8001ce8 <MX_TIM1_Init+0x150>)
 8001c04:	f004 fccc 	bl	80065a0 <HAL_TIM_Base_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001c0e:	f000 f977 	bl	8001f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c16:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c18:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4832      	ldr	r0, [pc, #200]	@ (8001ce8 <MX_TIM1_Init+0x150>)
 8001c20:	f004 fece 	bl	80069c0 <HAL_TIM_ConfigClockSource>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c2a:	f000 f969 	bl	8001f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c2e:	482e      	ldr	r0, [pc, #184]	@ (8001ce8 <MX_TIM1_Init+0x150>)
 8001c30:	f004 fd05 	bl	800663e <HAL_TIM_PWM_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001c3a:	f000 f961 	bl	8001f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c46:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4826      	ldr	r0, [pc, #152]	@ (8001ce8 <MX_TIM1_Init+0x150>)
 8001c4e:	f005 fa31 	bl	80070b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c58:	f000 f952 	bl	8001f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5c:	2360      	movs	r3, #96	@ 0x60
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c70:	2300      	movs	r3, #0
 8001c72:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4819      	ldr	r0, [pc, #100]	@ (8001ce8 <MX_TIM1_Init+0x150>)
 8001c82:	f004 fddb 	bl	800683c <HAL_TIM_PWM_ConfigChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001c8c:	f000 f938 	bl	8001f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c94:	2204      	movs	r2, #4
 8001c96:	4619      	mov	r1, r3
 8001c98:	4813      	ldr	r0, [pc, #76]	@ (8001ce8 <MX_TIM1_Init+0x150>)
 8001c9a:	f004 fdcf 	bl	800683c <HAL_TIM_PWM_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001ca4:	f000 f92c 	bl	8001f00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cc0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4807      	ldr	r0, [pc, #28]	@ (8001ce8 <MX_TIM1_Init+0x150>)
 8001ccc:	f005 fa60 	bl	8007190 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001cd6:	f000 f913 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cda:	4803      	ldr	r0, [pc, #12]	@ (8001ce8 <MX_TIM1_Init+0x150>)
 8001cdc:	f000 fa6c 	bl	80021b8 <HAL_TIM_MspPostInit>

}
 8001ce0:	bf00      	nop
 8001ce2:	3758      	adds	r7, #88	@ 0x58
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200003c0 	.word	0x200003c0
 8001cec:	40010000 	.word	0x40010000

08001cf0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08c      	sub	sp, #48	@ 0x30
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	2224      	movs	r2, #36	@ 0x24
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f00a fb6e 	bl	800c3e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d0c:	4b20      	ldr	r3, [pc, #128]	@ (8001d90 <MX_TIM4_Init+0xa0>)
 8001d0e:	4a21      	ldr	r2, [pc, #132]	@ (8001d94 <MX_TIM4_Init+0xa4>)
 8001d10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d12:	4b1f      	ldr	r3, [pc, #124]	@ (8001d90 <MX_TIM4_Init+0xa0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <MX_TIM4_Init+0xa0>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d90 <MX_TIM4_Init+0xa0>)
 8001d20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d26:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <MX_TIM4_Init+0xa0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2c:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <MX_TIM4_Init+0xa0>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	480c      	ldr	r0, [pc, #48]	@ (8001d90 <MX_TIM4_Init+0xa0>)
 8001d5e:	f004 fcc7 	bl	80066f0 <HAL_TIM_Encoder_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001d68:	f000 f8ca 	bl	8001f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4619      	mov	r1, r3
 8001d78:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <MX_TIM4_Init+0xa0>)
 8001d7a:	f005 f99b 	bl	80070b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001d84:	f000 f8bc 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	3730      	adds	r7, #48	@ 0x30
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000408 	.word	0x20000408
 8001d94:	40000800 	.word	0x40000800

08001d98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08c      	sub	sp, #48	@ 0x30
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d9e:	f107 030c 	add.w	r3, r7, #12
 8001da2:	2224      	movs	r2, #36	@ 0x24
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f00a fb1a 	bl	800c3e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001db4:	4b20      	ldr	r3, [pc, #128]	@ (8001e38 <MX_TIM5_Init+0xa0>)
 8001db6:	4a21      	ldr	r2, [pc, #132]	@ (8001e3c <MX_TIM5_Init+0xa4>)
 8001db8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001dba:	4b1f      	ldr	r3, [pc, #124]	@ (8001e38 <MX_TIM5_Init+0xa0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e38 <MX_TIM5_Init+0xa0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e38 <MX_TIM5_Init+0xa0>)
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dcc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dce:	4b1a      	ldr	r3, [pc, #104]	@ (8001e38 <MX_TIM5_Init+0xa0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd4:	4b18      	ldr	r3, [pc, #96]	@ (8001e38 <MX_TIM5_Init+0xa0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001de2:	2301      	movs	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001df2:	2301      	movs	r3, #1
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001df6:	2300      	movs	r3, #0
 8001df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	4619      	mov	r1, r3
 8001e04:	480c      	ldr	r0, [pc, #48]	@ (8001e38 <MX_TIM5_Init+0xa0>)
 8001e06:	f004 fc73 	bl	80066f0 <HAL_TIM_Encoder_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001e10:	f000 f876 	bl	8001f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e14:	2300      	movs	r3, #0
 8001e16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4805      	ldr	r0, [pc, #20]	@ (8001e38 <MX_TIM5_Init+0xa0>)
 8001e22:	f005 f947 	bl	80070b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001e2c:	f000 f868 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e30:	bf00      	nop
 8001e32:	3730      	adds	r7, #48	@ 0x30
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000450 	.word	0x20000450
 8001e3c:	40000c00 	.word	0x40000c00

08001e40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e44:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <MX_USART1_UART_Init+0x50>)
 8001e48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e4a:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	@ (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e66:	220c      	movs	r2, #12
 8001e68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e76:	4805      	ldr	r0, [pc, #20]	@ (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e78:	f005 f9dc 	bl	8007234 <HAL_UART_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e82:	f000 f83d 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000498 	.word	0x20000498
 8001e90:	40011000 	.word	0x40011000

08001e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b17      	ldr	r3, [pc, #92]	@ (8001efc <MX_GPIO_Init+0x68>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	4a16      	ldr	r2, [pc, #88]	@ (8001efc <MX_GPIO_Init+0x68>)
 8001ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eaa:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <MX_GPIO_Init+0x68>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <MX_GPIO_Init+0x68>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a0f      	ldr	r2, [pc, #60]	@ (8001efc <MX_GPIO_Init+0x68>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <MX_GPIO_Init+0x68>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <MX_GPIO_Init+0x68>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	4a08      	ldr	r2, [pc, #32]	@ (8001efc <MX_GPIO_Init+0x68>)
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <MX_GPIO_Init+0x68>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800

08001f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f04:	b672      	cpsid	i
}
 8001f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <Error_Handler+0x8>

08001f0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <HAL_MspInit+0x4c>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001f58 <HAL_MspInit+0x4c>)
 8001f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f22:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <HAL_MspInit+0x4c>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <HAL_MspInit+0x4c>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	4a08      	ldr	r2, [pc, #32]	@ (8001f58 <HAL_MspInit+0x4c>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3e:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <HAL_MspInit+0x4c>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800

08001f5c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08c      	sub	sp, #48	@ 0x30
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a3b      	ldr	r2, [pc, #236]	@ (8002068 <HAL_I2C_MspInit+0x10c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d12d      	bne.n	8001fda <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	4b3a      	ldr	r3, [pc, #232]	@ (800206c <HAL_I2C_MspInit+0x110>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	4a39      	ldr	r2, [pc, #228]	@ (800206c <HAL_I2C_MspInit+0x110>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8e:	4b37      	ldr	r3, [pc, #220]	@ (800206c <HAL_I2C_MspInit+0x110>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	61bb      	str	r3, [r7, #24]
 8001f98:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa0:	2312      	movs	r3, #18
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fac:	2304      	movs	r3, #4
 8001fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	482e      	ldr	r0, [pc, #184]	@ (8002070 <HAL_I2C_MspInit+0x114>)
 8001fb8:	f000 fe20 	bl	8002bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800206c <HAL_I2C_MspInit+0x110>)
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	4a29      	ldr	r2, [pc, #164]	@ (800206c <HAL_I2C_MspInit+0x110>)
 8001fc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fcc:	4b27      	ldr	r3, [pc, #156]	@ (800206c <HAL_I2C_MspInit+0x110>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fd8:	e041      	b.n	800205e <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a25      	ldr	r2, [pc, #148]	@ (8002074 <HAL_I2C_MspInit+0x118>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d13c      	bne.n	800205e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	4b20      	ldr	r3, [pc, #128]	@ (800206c <HAL_I2C_MspInit+0x110>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fec:	4a1f      	ldr	r2, [pc, #124]	@ (800206c <HAL_I2C_MspInit+0x110>)
 8001fee:	f043 0302 	orr.w	r3, r3, #2
 8001ff2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800206c <HAL_I2C_MspInit+0x110>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002000:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002006:	2312      	movs	r3, #18
 8002008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800200a:	2301      	movs	r3, #1
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200e:	2303      	movs	r3, #3
 8002010:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002012:	2304      	movs	r3, #4
 8002014:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002016:	f107 031c 	add.w	r3, r7, #28
 800201a:	4619      	mov	r1, r3
 800201c:	4814      	ldr	r0, [pc, #80]	@ (8002070 <HAL_I2C_MspInit+0x114>)
 800201e:	f000 fded 	bl	8002bfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002022:	2308      	movs	r3, #8
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002026:	2312      	movs	r3, #18
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800202a:	2301      	movs	r3, #1
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002032:	2309      	movs	r3, #9
 8002034:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	480c      	ldr	r0, [pc, #48]	@ (8002070 <HAL_I2C_MspInit+0x114>)
 800203e:	f000 fddd 	bl	8002bfc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b09      	ldr	r3, [pc, #36]	@ (800206c <HAL_I2C_MspInit+0x110>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	4a08      	ldr	r2, [pc, #32]	@ (800206c <HAL_I2C_MspInit+0x110>)
 800204c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002050:	6413      	str	r3, [r2, #64]	@ 0x40
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_I2C_MspInit+0x110>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
}
 800205e:	bf00      	nop
 8002060:	3730      	adds	r7, #48	@ 0x30
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40005400 	.word	0x40005400
 800206c:	40023800 	.word	0x40023800
 8002070:	40020400 	.word	0x40020400
 8002074:	40005800 	.word	0x40005800

08002078 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0b      	ldr	r2, [pc, #44]	@ (80020b4 <HAL_TIM_Base_MspInit+0x3c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d10d      	bne.n	80020a6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <HAL_TIM_Base_MspInit+0x40>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002092:	4a09      	ldr	r2, [pc, #36]	@ (80020b8 <HAL_TIM_Base_MspInit+0x40>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6453      	str	r3, [r2, #68]	@ 0x44
 800209a:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <HAL_TIM_Base_MspInit+0x40>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40010000 	.word	0x40010000
 80020b8:	40023800 	.word	0x40023800

080020bc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	@ 0x30
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a32      	ldr	r2, [pc, #200]	@ (80021a4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d12c      	bne.n	8002138 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	4b31      	ldr	r3, [pc, #196]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	4a30      	ldr	r2, [pc, #192]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ee:	4b2e      	ldr	r3, [pc, #184]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	4b2a      	ldr	r3, [pc, #168]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	4a29      	ldr	r2, [pc, #164]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	6313      	str	r3, [r2, #48]	@ 0x30
 800210a:	4b27      	ldr	r3, [pc, #156]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002116:	23c0      	movs	r3, #192	@ 0xc0
 8002118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002126:	2302      	movs	r3, #2
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212a:	f107 031c 	add.w	r3, r7, #28
 800212e:	4619      	mov	r1, r3
 8002130:	481e      	ldr	r0, [pc, #120]	@ (80021ac <HAL_TIM_Encoder_MspInit+0xf0>)
 8002132:	f000 fd63 	bl	8002bfc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002136:	e030      	b.n	800219a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a1c      	ldr	r2, [pc, #112]	@ (80021b0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d12b      	bne.n	800219a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	4b18      	ldr	r3, [pc, #96]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	4a17      	ldr	r2, [pc, #92]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	6413      	str	r3, [r2, #64]	@ 0x40
 8002152:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	4a10      	ldr	r2, [pc, #64]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6313      	str	r3, [r2, #48]	@ 0x30
 800216e:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800217a:	2303      	movs	r3, #3
 800217c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800218a:	2302      	movs	r3, #2
 800218c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218e:	f107 031c 	add.w	r3, r7, #28
 8002192:	4619      	mov	r1, r3
 8002194:	4807      	ldr	r0, [pc, #28]	@ (80021b4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002196:	f000 fd31 	bl	8002bfc <HAL_GPIO_Init>
}
 800219a:	bf00      	nop
 800219c:	3730      	adds	r7, #48	@ 0x30
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40000800 	.word	0x40000800
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40020400 	.word	0x40020400
 80021b0:	40000c00 	.word	0x40000c00
 80021b4:	40020000 	.word	0x40020000

080021b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a12      	ldr	r2, [pc, #72]	@ (8002220 <HAL_TIM_MspPostInit+0x68>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d11e      	bne.n	8002218 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <HAL_TIM_MspPostInit+0x6c>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	4a10      	ldr	r2, [pc, #64]	@ (8002224 <HAL_TIM_MspPostInit+0x6c>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <HAL_TIM_MspPostInit+0x6c>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002208:	2301      	movs	r3, #1
 800220a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	4619      	mov	r1, r3
 8002212:	4805      	ldr	r0, [pc, #20]	@ (8002228 <HAL_TIM_MspPostInit+0x70>)
 8002214:	f000 fcf2 	bl	8002bfc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002218:	bf00      	nop
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40010000 	.word	0x40010000
 8002224:	40023800 	.word	0x40023800
 8002228:	40020000 	.word	0x40020000

0800222c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	@ 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a19      	ldr	r2, [pc, #100]	@ (80022b0 <HAL_UART_MspInit+0x84>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d12c      	bne.n	80022a8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	4b18      	ldr	r3, [pc, #96]	@ (80022b4 <HAL_UART_MspInit+0x88>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002256:	4a17      	ldr	r2, [pc, #92]	@ (80022b4 <HAL_UART_MspInit+0x88>)
 8002258:	f043 0310 	orr.w	r3, r3, #16
 800225c:	6453      	str	r3, [r2, #68]	@ 0x44
 800225e:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <HAL_UART_MspInit+0x88>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b11      	ldr	r3, [pc, #68]	@ (80022b4 <HAL_UART_MspInit+0x88>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	4a10      	ldr	r2, [pc, #64]	@ (80022b4 <HAL_UART_MspInit+0x88>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6313      	str	r3, [r2, #48]	@ 0x30
 800227a:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <HAL_UART_MspInit+0x88>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002286:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800228a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002298:	2307      	movs	r3, #7
 800229a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	4805      	ldr	r0, [pc, #20]	@ (80022b8 <HAL_UART_MspInit+0x8c>)
 80022a4:	f000 fcaa 	bl	8002bfc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80022a8:	bf00      	nop
 80022aa:	3728      	adds	r7, #40	@ 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40011000 	.word	0x40011000
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020000 	.word	0x40020000

080022bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <NMI_Handler+0x4>

080022c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <HardFault_Handler+0x4>

080022cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <MemManage_Handler+0x4>

080022d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <BusFault_Handler+0x4>

080022dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <UsageFault_Handler+0x4>

080022e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002312:	f000 fb1d 	bl	8002950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002320:	4802      	ldr	r0, [pc, #8]	@ (800232c <OTG_FS_IRQHandler+0x10>)
 8002322:	f002 fbd7 	bl	8004ad4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200019cc 	.word	0x200019cc

08002330 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return 1;
 8002334:	2301      	movs	r3, #1
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_kill>:

int _kill(int pid, int sig)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800234a:	f00a f89b 	bl	800c484 <__errno>
 800234e:	4603      	mov	r3, r0
 8002350:	2216      	movs	r2, #22
 8002352:	601a      	str	r2, [r3, #0]
  return -1;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_exit>:

void _exit (int status)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002368:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ffe7 	bl	8002340 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002372:	bf00      	nop
 8002374:	e7fd      	b.n	8002372 <_exit+0x12>

08002376 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e00a      	b.n	800239e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002388:	f3af 8000 	nop.w
 800238c:	4601      	mov	r1, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	60ba      	str	r2, [r7, #8]
 8002394:	b2ca      	uxtb	r2, r1
 8002396:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3301      	adds	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	dbf0      	blt.n	8002388 <_read+0x12>
  }

  return len;
 80023a6:	687b      	ldr	r3, [r7, #4]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	e009      	b.n	80023d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	60ba      	str	r2, [r7, #8]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3301      	adds	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	429a      	cmp	r2, r3
 80023dc:	dbf1      	blt.n	80023c2 <_write+0x12>
  }
  return len;
 80023de:	687b      	ldr	r3, [r7, #4]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <_close>:

int _close(int file)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002410:	605a      	str	r2, [r3, #4]
  return 0;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <_isatty>:

int _isatty(int file)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002428:	2301      	movs	r3, #1
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002458:	4a14      	ldr	r2, [pc, #80]	@ (80024ac <_sbrk+0x5c>)
 800245a:	4b15      	ldr	r3, [pc, #84]	@ (80024b0 <_sbrk+0x60>)
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002464:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <_sbrk+0x64>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800246c:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <_sbrk+0x64>)
 800246e:	4a12      	ldr	r2, [pc, #72]	@ (80024b8 <_sbrk+0x68>)
 8002470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002472:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <_sbrk+0x64>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	429a      	cmp	r2, r3
 800247e:	d207      	bcs.n	8002490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002480:	f00a f800 	bl	800c484 <__errno>
 8002484:	4603      	mov	r3, r0
 8002486:	220c      	movs	r2, #12
 8002488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800248a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800248e:	e009      	b.n	80024a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002490:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <_sbrk+0x64>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002496:	4b07      	ldr	r3, [pc, #28]	@ (80024b4 <_sbrk+0x64>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	4a05      	ldr	r2, [pc, #20]	@ (80024b4 <_sbrk+0x64>)
 80024a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024a2:	68fb      	ldr	r3, [r7, #12]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20020000 	.word	0x20020000
 80024b0:	00000400 	.word	0x00000400
 80024b4:	200004e0 	.word	0x200004e0
 80024b8:	20002220 	.word	0x20002220

080024bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c0:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <SystemInit+0x20>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c6:	4a05      	ldr	r2, [pc, #20]	@ (80024dc <SystemInit+0x20>)
 80024c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <selectTCAChannel>:
 */
#include "stm32f4xx_hal.h"
#include "main.h"
#include "tca9548.h"

void selectTCAChannel(uint8_t channel) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = (1 << channel);  // Enable only the selected channel
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	2201      	movs	r2, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, 0x77 << 1, &cmd, 1, HAL_MAX_DELAY);
 80024f6:	f107 020f 	add.w	r2, r7, #15
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2301      	movs	r3, #1
 8002502:	21ee      	movs	r1, #238	@ 0xee
 8002504:	4803      	ldr	r0, [pc, #12]	@ (8002514 <selectTCAChannel+0x34>)
 8002506:	f000 fe41 	bl	800318c <HAL_I2C_Master_Transmit>
}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000318 	.word	0x20000318

08002518 <tcs34725_write8>:
/**************************************************************************/
/*!
    @brief  Writes a register and an 8 bit value over I2C
*/
/**************************************************************************/
void tcs34725_write8(uint8_t reg, uint8_t value) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af02      	add	r7, sp, #8
 800251e:	4603      	mov	r3, r0
 8002520:	460a      	mov	r2, r1
 8002522:	71fb      	strb	r3, [r7, #7]
 8002524:	4613      	mov	r3, r2
 8002526:	71bb      	strb	r3, [r7, #6]
    Wire.send(TCS34725_COMMAND_BIT | reg);
    Wire.send(value & 0xFF);
    #endif
    Wire.endTransmission();
    */
    uint8_t buffer[2] = {TCS34725_COMMAND_BIT | reg, value};
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800252e:	b2db      	uxtb	r3, r3
 8002530:	733b      	strb	r3, [r7, #12]
 8002532:	79bb      	ldrb	r3, [r7, #6]
 8002534:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8002536:	f107 020c 	add.w	r2, r7, #12
 800253a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2302      	movs	r3, #2
 8002542:	2152      	movs	r1, #82	@ 0x52
 8002544:	4803      	ldr	r0, [pc, #12]	@ (8002554 <tcs34725_write8+0x3c>)
 8002546:	f000 fe21 	bl	800318c <HAL_I2C_Master_Transmit>
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000318 	.word	0x20000318

08002558 <read8>:
/**************************************************************************/
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
uint8_t read8(uint8_t reg) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af02      	add	r7, sp, #8
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
    return Wire.read();
    #else
    return Wire.receive();
    #endif
    */
    uint8_t cmd = TCS34725_COMMAND_BIT | reg;
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002568:	b2db      	uxtb	r3, r3
 800256a:	73fb      	strb	r3, [r7, #15]
    uint8_t value = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 8002570:	f107 020f 	add.w	r2, r7, #15
 8002574:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	2301      	movs	r3, #1
 800257c:	2152      	movs	r1, #82	@ 0x52
 800257e:	4809      	ldr	r0, [pc, #36]	@ (80025a4 <read8+0x4c>)
 8002580:	f000 fe04 	bl	800318c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, &value, 1, HAL_MAX_DELAY);
 8002584:	f107 020e 	add.w	r2, r7, #14
 8002588:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	2301      	movs	r3, #1
 8002590:	2152      	movs	r1, #82	@ 0x52
 8002592:	4804      	ldr	r0, [pc, #16]	@ (80025a4 <read8+0x4c>)
 8002594:	f000 fef8 	bl	8003388 <HAL_I2C_Master_Receive>
    return value;
 8002598:	7bbb      	ldrb	r3, [r7, #14]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000318 	.word	0x20000318

080025a8 <read16>:
/**************************************************************************/
/*!
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
uint16_t read16(uint8_t reg) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
    #endif
    x <<= 8;
    x |= t;
    return x;
    */
	uint8_t cmd = TCS34725_COMMAND_BIT | reg;
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[2];
	HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 80025bc:	f107 020f 	add.w	r2, r7, #15
 80025c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2301      	movs	r3, #1
 80025c8:	2152      	movs	r1, #82	@ 0x52
 80025ca:	480b      	ldr	r0, [pc, #44]	@ (80025f8 <read16+0x50>)
 80025cc:	f000 fdde 	bl	800318c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 80025d0:	f107 020c 	add.w	r2, r7, #12
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2302      	movs	r3, #2
 80025dc:	2152      	movs	r1, #82	@ 0x52
 80025de:	4806      	ldr	r0, [pc, #24]	@ (80025f8 <read16+0x50>)
 80025e0:	f000 fed2 	bl	8003388 <HAL_I2C_Master_Receive>
	return (uint16_t)(buffer[1] << 8) | buffer[0];
 80025e4:	7b7b      	ldrb	r3, [r7, #13]
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	7b3a      	ldrb	r2, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	b29b      	uxth	r3, r3
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000318 	.word	0x20000318

080025fc <enable>:
/**************************************************************************/
/*!
    Enables the device
*/
/**************************************************************************/
void enable(void) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
    tcs34725_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 8002600:	2101      	movs	r1, #1
 8002602:	2000      	movs	r0, #0
 8002604:	f7ff ff88 	bl	8002518 <tcs34725_write8>
    HAL_Delay(3);
 8002608:	2003      	movs	r0, #3
 800260a:	f000 f9c1 	bl	8002990 <HAL_Delay>
    tcs34725_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 800260e:	2103      	movs	r1, #3
 8002610:	2000      	movs	r0, #0
 8002612:	f7ff ff81 	bl	8002518 <tcs34725_write8>
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <tcs32725_begin>:
    doing anything else)
*/
/**************************************************************************/


bool tcs32725_begin(TCS34725_t *sensor, tcs34725IntegrationTime_t it, tcs34725Gain_t gain) {
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	70fb      	strb	r3, [r7, #3]
 8002628:	4613      	mov	r3, r2
 800262a:	70bb      	strb	r3, [r7, #2]
    //Wire.begin();

    /* Make sure we're actually connected */
    uint8_t x = read8(TCS34725_ID);
 800262c:	2012      	movs	r0, #18
 800262e:	f7ff ff93 	bl	8002558 <read8>
 8002632:	4603      	mov	r3, r0
 8002634:	73fb      	strb	r3, [r7, #15]
    my_printf("device id: %d", x);
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	4619      	mov	r1, r3
 800263a:	480d      	ldr	r0, [pc, #52]	@ (8002670 <tcs32725_begin+0x54>)
 800263c:	f7ff f924 	bl	8001888 <my_printf>
    if (x != 0x4D) {
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b4d      	cmp	r3, #77	@ 0x4d
 8002644:	d001      	beq.n	800264a <tcs32725_begin+0x2e>
        return false;
 8002646:	2300      	movs	r3, #0
 8002648:	e00d      	b.n	8002666 <tcs32725_begin+0x4a>
    }
    _tcs34725Initialised = true;
 800264a:	4b0a      	ldr	r3, [pc, #40]	@ (8002674 <tcs32725_begin+0x58>)
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]

    /* Set default integration time and gain */
    setIntegrationTime(it);
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f810 	bl	8002678 <setIntegrationTime>
    setGain(gain);
 8002658:	78bb      	ldrb	r3, [r7, #2]
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f82e 	bl	80026bc <setGain>

    /* Note: by default, the device is in power down mode on bootup */
    enable();
 8002660:	f7ff ffcc 	bl	80025fc <enable>

    return true;
 8002664:	2301      	movs	r3, #1
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	0800e6c4 	.word	0x0800e6c4
 8002674:	200004e4 	.word	0x200004e4

08002678 <setIntegrationTime>:
/**************************************************************************/
/*!
    Sets the integration time for the TC34725
*/
/**************************************************************************/
void setIntegrationTime(tcs34725IntegrationTime_t it) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
    if (!_tcs34725Initialised) {
 8002682:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <setIntegrationTime+0x38>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	f083 0301 	eor.w	r3, r3, #1
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <setIntegrationTime+0x1e>
        //begin();
    	my_printf("set integration time go wrong\r\n");
 8002690:	4808      	ldr	r0, [pc, #32]	@ (80026b4 <setIntegrationTime+0x3c>)
 8002692:	f7ff f8f9 	bl	8001888 <my_printf>
    }

    /* Update the timing register */
    tcs34725_write8(TCS34725_ATIME, it);
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	4619      	mov	r1, r3
 800269a:	2001      	movs	r0, #1
 800269c:	f7ff ff3c 	bl	8002518 <tcs34725_write8>

    /* Update value placeholder */
    _tcs34725IntegrationTime = it;
 80026a0:	4a05      	ldr	r2, [pc, #20]	@ (80026b8 <setIntegrationTime+0x40>)
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	7013      	strb	r3, [r2, #0]
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200004e4 	.word	0x200004e4
 80026b4:	0800e6d4 	.word	0x0800e6d4
 80026b8:	200004e6 	.word	0x200004e6

080026bc <setGain>:
/**************************************************************************/
/*!
    Adjusts the gain on the TCS34725 (adjusts the sensitivity to light)
*/
/**************************************************************************/
void setGain(tcs34725Gain_t gain) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
        begin();
    }
    */

    /* Update the timing register */
    tcs34725_write8(TCS34725_CONTROL, gain);
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	4619      	mov	r1, r3
 80026ca:	200f      	movs	r0, #15
 80026cc:	f7ff ff24 	bl	8002518 <tcs34725_write8>

    /* Update value placeholders */
    _tcs34725Gain = gain;
 80026d0:	4a03      	ldr	r2, [pc, #12]	@ (80026e0 <setGain+0x24>)
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	7013      	strb	r3, [r2, #0]
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200004e5 	.word	0x200004e5

080026e4 <getRawData>:
/**************************************************************************/
/*!
    @brief  Reads the raw red, green, blue and clear channel values
*/
/**************************************************************************/
void getRawData(uint16_t* r, uint16_t* g, uint16_t* b, uint16_t* c) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
	/*
    if (!_tcs34725Initialised) {
        begin();
    }
	*/
    *c = read16(TCS34725_CDATAL);
 80026f2:	2014      	movs	r0, #20
 80026f4:	f7ff ff58 	bl	80025a8 <read16>
 80026f8:	4603      	mov	r3, r0
 80026fa:	461a      	mov	r2, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	801a      	strh	r2, [r3, #0]
    *r = read16(TCS34725_RDATAL);
 8002700:	2016      	movs	r0, #22
 8002702:	f7ff ff51 	bl	80025a8 <read16>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	801a      	strh	r2, [r3, #0]
    *g = read16(TCS34725_GDATAL);
 800270e:	2018      	movs	r0, #24
 8002710:	f7ff ff4a 	bl	80025a8 <read16>
 8002714:	4603      	mov	r3, r0
 8002716:	461a      	mov	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	801a      	strh	r2, [r3, #0]
    *b = read16(TCS34725_BDATAL);
 800271c:	201a      	movs	r0, #26
 800271e:	f7ff ff43 	bl	80025a8 <read16>
 8002722:	4603      	mov	r3, r0
 8002724:	461a      	mov	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	801a      	strh	r2, [r3, #0]

    /* Set a delay for the integration time */
    switch (_tcs34725IntegrationTime) {
 800272a:	4b1a      	ldr	r3, [pc, #104]	@ (8002794 <getRawData+0xb0>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2bff      	cmp	r3, #255	@ 0xff
 8002730:	d012      	beq.n	8002758 <getRawData+0x74>
 8002732:	2bff      	cmp	r3, #255	@ 0xff
 8002734:	dc29      	bgt.n	800278a <getRawData+0xa6>
 8002736:	2bf6      	cmp	r3, #246	@ 0xf6
 8002738:	d012      	beq.n	8002760 <getRawData+0x7c>
 800273a:	2bf6      	cmp	r3, #246	@ 0xf6
 800273c:	dc25      	bgt.n	800278a <getRawData+0xa6>
 800273e:	2beb      	cmp	r3, #235	@ 0xeb
 8002740:	d012      	beq.n	8002768 <getRawData+0x84>
 8002742:	2beb      	cmp	r3, #235	@ 0xeb
 8002744:	dc21      	bgt.n	800278a <getRawData+0xa6>
 8002746:	2bd5      	cmp	r3, #213	@ 0xd5
 8002748:	d012      	beq.n	8002770 <getRawData+0x8c>
 800274a:	2bd5      	cmp	r3, #213	@ 0xd5
 800274c:	dc1d      	bgt.n	800278a <getRawData+0xa6>
 800274e:	2b00      	cmp	r3, #0
 8002750:	d016      	beq.n	8002780 <getRawData+0x9c>
 8002752:	2bc0      	cmp	r3, #192	@ 0xc0
 8002754:	d010      	beq.n	8002778 <getRawData+0x94>
            break;
        case TCS34725_INTEGRATIONTIME_700MS:
        	HAL_Delay(700);
            break;
    }
}
 8002756:	e018      	b.n	800278a <getRawData+0xa6>
            HAL_Delay(3);
 8002758:	2003      	movs	r0, #3
 800275a:	f000 f919 	bl	8002990 <HAL_Delay>
            break;
 800275e:	e014      	b.n	800278a <getRawData+0xa6>
        	HAL_Delay(24);
 8002760:	2018      	movs	r0, #24
 8002762:	f000 f915 	bl	8002990 <HAL_Delay>
            break;
 8002766:	e010      	b.n	800278a <getRawData+0xa6>
        	HAL_Delay(50);
 8002768:	2032      	movs	r0, #50	@ 0x32
 800276a:	f000 f911 	bl	8002990 <HAL_Delay>
            break;
 800276e:	e00c      	b.n	800278a <getRawData+0xa6>
        	HAL_Delay(101);
 8002770:	2065      	movs	r0, #101	@ 0x65
 8002772:	f000 f90d 	bl	8002990 <HAL_Delay>
            break;
 8002776:	e008      	b.n	800278a <getRawData+0xa6>
        	HAL_Delay(154);
 8002778:	209a      	movs	r0, #154	@ 0x9a
 800277a:	f000 f909 	bl	8002990 <HAL_Delay>
            break;
 800277e:	e004      	b.n	800278a <getRawData+0xa6>
        	HAL_Delay(700);
 8002780:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002784:	f000 f904 	bl	8002990 <HAL_Delay>
            break;
 8002788:	bf00      	nop
}
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	200004e6 	.word	0x200004e6

08002798 <getRGB>:

void getRGB(float *r, float *g, float *b) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint16_t red, green, blue, clear;
  getRawData(&red, &green, &blue, &clear);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	f107 0216 	add.w	r2, r7, #22
 80027ac:	f107 0118 	add.w	r1, r7, #24
 80027b0:	f107 001a 	add.w	r0, r7, #26
 80027b4:	f7ff ff96 	bl	80026e4 <getRawData>
  uint32_t sum = clear;
 80027b8:	8abb      	ldrh	r3, [r7, #20]
 80027ba:	61fb      	str	r3, [r7, #28]

  // Avoid divide by zero errors ... if clear = 0 return black
  if (clear == 0) {
 80027bc:	8abb      	ldrh	r3, [r7, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10c      	bne.n	80027dc <getRGB+0x44>
    *r = *g = *b = 0;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e038      	b.n	800284e <getRGB+0xb6>
    return;
  }

  *r = (float)red / sum * 255.0;
 80027dc:	8b7b      	ldrh	r3, [r7, #26]
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	ee07 3a90 	vmov	s15, r3
 80027ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027f4:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002854 <getRGB+0xbc>
 80027f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	edc3 7a00 	vstr	s15, [r3]
  *g = (float)green / sum * 255.0;
 8002802:	8b3b      	ldrh	r3, [r7, #24]
 8002804:	ee07 3a90 	vmov	s15, r3
 8002808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800281a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002854 <getRGB+0xbc>
 800281e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	edc3 7a00 	vstr	s15, [r3]
  *b = (float)blue / sum * 255.0;
 8002828:	8afb      	ldrh	r3, [r7, #22]
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	ee07 3a90 	vmov	s15, r3
 8002838:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800283c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002840:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8002854 <getRGB+0xbc>
 8002844:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	edc3 7a00 	vstr	s15, [r3]
}
 800284e:	3720      	adds	r7, #32
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	437f0000 	.word	0x437f0000

08002858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002858:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002890 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800285c:	f7ff fe2e 	bl	80024bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002860:	480c      	ldr	r0, [pc, #48]	@ (8002894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002862:	490d      	ldr	r1, [pc, #52]	@ (8002898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002864:	4a0d      	ldr	r2, [pc, #52]	@ (800289c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002868:	e002      	b.n	8002870 <LoopCopyDataInit>

0800286a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800286a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800286c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800286e:	3304      	adds	r3, #4

08002870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002874:	d3f9      	bcc.n	800286a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002876:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002878:	4c0a      	ldr	r4, [pc, #40]	@ (80028a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800287a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800287c:	e001      	b.n	8002882 <LoopFillZerobss>

0800287e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800287e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002880:	3204      	adds	r2, #4

08002882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002884:	d3fb      	bcc.n	800287e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002886:	f009 fe03 	bl	800c490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800288a:	f7ff f825 	bl	80018d8 <main>
  bx  lr    
 800288e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002890:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002898:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 800289c:	0800eadc 	.word	0x0800eadc
  ldr r2, =_sbss
 80028a0:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 80028a4:	2000221c 	.word	0x2000221c

080028a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028a8:	e7fe      	b.n	80028a8 <ADC_IRQHandler>
	...

080028ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028b0:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <HAL_Init+0x40>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0d      	ldr	r2, [pc, #52]	@ (80028ec <HAL_Init+0x40>)
 80028b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028bc:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <HAL_Init+0x40>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0a      	ldr	r2, [pc, #40]	@ (80028ec <HAL_Init+0x40>)
 80028c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028c8:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <HAL_Init+0x40>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a07      	ldr	r2, [pc, #28]	@ (80028ec <HAL_Init+0x40>)
 80028ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d4:	2003      	movs	r0, #3
 80028d6:	f000 f94f 	bl	8002b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028da:	200f      	movs	r0, #15
 80028dc:	f000 f808 	bl	80028f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028e0:	f7ff fb14 	bl	8001f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40023c00 	.word	0x40023c00

080028f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028f8:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <HAL_InitTick+0x54>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b12      	ldr	r3, [pc, #72]	@ (8002948 <HAL_InitTick+0x58>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	4619      	mov	r1, r3
 8002902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002906:	fbb3 f3f1 	udiv	r3, r3, r1
 800290a:	fbb2 f3f3 	udiv	r3, r2, r3
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f967 	bl	8002be2 <HAL_SYSTICK_Config>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e00e      	b.n	800293c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b0f      	cmp	r3, #15
 8002922:	d80a      	bhi.n	800293a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002924:	2200      	movs	r2, #0
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800292c:	f000 f92f 	bl	8002b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002930:	4a06      	ldr	r2, [pc, #24]	@ (800294c <HAL_InitTick+0x5c>)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	e000      	b.n	800293c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20000000 	.word	0x20000000
 8002948:	20000008 	.word	0x20000008
 800294c:	20000004 	.word	0x20000004

08002950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <HAL_IncTick+0x20>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <HAL_IncTick+0x24>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4413      	add	r3, r2
 8002960:	4a04      	ldr	r2, [pc, #16]	@ (8002974 <HAL_IncTick+0x24>)
 8002962:	6013      	str	r3, [r2, #0]
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	20000008 	.word	0x20000008
 8002974:	200004e8 	.word	0x200004e8

08002978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return uwTick;
 800297c:	4b03      	ldr	r3, [pc, #12]	@ (800298c <HAL_GetTick+0x14>)
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	200004e8 	.word	0x200004e8

08002990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002998:	f7ff ffee 	bl	8002978 <HAL_GetTick>
 800299c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029a8:	d005      	beq.n	80029b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029aa:	4b0a      	ldr	r3, [pc, #40]	@ (80029d4 <HAL_Delay+0x44>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029b6:	bf00      	nop
 80029b8:	f7ff ffde 	bl	8002978 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d8f7      	bhi.n	80029b8 <HAL_Delay+0x28>
  {
  }
}
 80029c8:	bf00      	nop
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000008 	.word	0x20000008

080029d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a1c <__NVIC_SetPriorityGrouping+0x44>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029f4:	4013      	ands	r3, r2
 80029f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a0a:	4a04      	ldr	r2, [pc, #16]	@ (8002a1c <__NVIC_SetPriorityGrouping+0x44>)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	60d3      	str	r3, [r2, #12]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a24:	4b04      	ldr	r3, [pc, #16]	@ (8002a38 <__NVIC_GetPriorityGrouping+0x18>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	0a1b      	lsrs	r3, r3, #8
 8002a2a:	f003 0307 	and.w	r3, r3, #7
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	db0b      	blt.n	8002a66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	f003 021f 	and.w	r2, r3, #31
 8002a54:	4907      	ldr	r1, [pc, #28]	@ (8002a74 <__NVIC_EnableIRQ+0x38>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000e100 	.word	0xe000e100

08002a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	6039      	str	r1, [r7, #0]
 8002a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	db0a      	blt.n	8002aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	490c      	ldr	r1, [pc, #48]	@ (8002ac4 <__NVIC_SetPriority+0x4c>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	0112      	lsls	r2, r2, #4
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa0:	e00a      	b.n	8002ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4908      	ldr	r1, [pc, #32]	@ (8002ac8 <__NVIC_SetPriority+0x50>)
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	3b04      	subs	r3, #4
 8002ab0:	0112      	lsls	r2, r2, #4
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	761a      	strb	r2, [r3, #24]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000e100 	.word	0xe000e100
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	@ 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f1c3 0307 	rsb	r3, r3, #7
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	bf28      	it	cs
 8002aea:	2304      	movcs	r3, #4
 8002aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3304      	adds	r3, #4
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d902      	bls.n	8002afc <NVIC_EncodePriority+0x30>
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3b03      	subs	r3, #3
 8002afa:	e000      	b.n	8002afe <NVIC_EncodePriority+0x32>
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	401a      	ands	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	43d9      	mvns	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b24:	4313      	orrs	r3, r2
         );
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3724      	adds	r7, #36	@ 0x24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b44:	d301      	bcc.n	8002b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b46:	2301      	movs	r3, #1
 8002b48:	e00f      	b.n	8002b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b74 <SysTick_Config+0x40>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b52:	210f      	movs	r1, #15
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b58:	f7ff ff8e 	bl	8002a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b5c:	4b05      	ldr	r3, [pc, #20]	@ (8002b74 <SysTick_Config+0x40>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b62:	4b04      	ldr	r3, [pc, #16]	@ (8002b74 <SysTick_Config+0x40>)
 8002b64:	2207      	movs	r2, #7
 8002b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	e000e010 	.word	0xe000e010

08002b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ff29 	bl	80029d8 <__NVIC_SetPriorityGrouping>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4603      	mov	r3, r0
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba0:	f7ff ff3e 	bl	8002a20 <__NVIC_GetPriorityGrouping>
 8002ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	6978      	ldr	r0, [r7, #20]
 8002bac:	f7ff ff8e 	bl	8002acc <NVIC_EncodePriority>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff5d 	bl	8002a78 <__NVIC_SetPriority>
}
 8002bbe:	bf00      	nop
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4603      	mov	r3, r0
 8002bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff31 	bl	8002a3c <__NVIC_EnableIRQ>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ffa2 	bl	8002b34 <SysTick_Config>
 8002bf0:	4603      	mov	r3, r0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b089      	sub	sp, #36	@ 0x24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	e159      	b.n	8002ecc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c18:	2201      	movs	r2, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	f040 8148 	bne.w	8002ec6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d005      	beq.n	8002c4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d130      	bne.n	8002cb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	2203      	movs	r2, #3
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c84:	2201      	movs	r2, #1
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 0201 	and.w	r2, r3, #1
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d017      	beq.n	8002cec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d123      	bne.n	8002d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	08da      	lsrs	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3208      	adds	r2, #8
 8002d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	220f      	movs	r2, #15
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	08da      	lsrs	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3208      	adds	r2, #8
 8002d3a:	69b9      	ldr	r1, [r7, #24]
 8002d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0203 	and.w	r2, r3, #3
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80a2 	beq.w	8002ec6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	4b57      	ldr	r3, [pc, #348]	@ (8002ee4 <HAL_GPIO_Init+0x2e8>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	4a56      	ldr	r2, [pc, #344]	@ (8002ee4 <HAL_GPIO_Init+0x2e8>)
 8002d8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d92:	4b54      	ldr	r3, [pc, #336]	@ (8002ee4 <HAL_GPIO_Init+0x2e8>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d9e:	4a52      	ldr	r2, [pc, #328]	@ (8002ee8 <HAL_GPIO_Init+0x2ec>)
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	089b      	lsrs	r3, r3, #2
 8002da4:	3302      	adds	r3, #2
 8002da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	220f      	movs	r2, #15
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a49      	ldr	r2, [pc, #292]	@ (8002eec <HAL_GPIO_Init+0x2f0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d019      	beq.n	8002dfe <HAL_GPIO_Init+0x202>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a48      	ldr	r2, [pc, #288]	@ (8002ef0 <HAL_GPIO_Init+0x2f4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_GPIO_Init+0x1fe>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a47      	ldr	r2, [pc, #284]	@ (8002ef4 <HAL_GPIO_Init+0x2f8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00d      	beq.n	8002df6 <HAL_GPIO_Init+0x1fa>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a46      	ldr	r2, [pc, #280]	@ (8002ef8 <HAL_GPIO_Init+0x2fc>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d007      	beq.n	8002df2 <HAL_GPIO_Init+0x1f6>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a45      	ldr	r2, [pc, #276]	@ (8002efc <HAL_GPIO_Init+0x300>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_GPIO_Init+0x1f2>
 8002dea:	2304      	movs	r3, #4
 8002dec:	e008      	b.n	8002e00 <HAL_GPIO_Init+0x204>
 8002dee:	2307      	movs	r3, #7
 8002df0:	e006      	b.n	8002e00 <HAL_GPIO_Init+0x204>
 8002df2:	2303      	movs	r3, #3
 8002df4:	e004      	b.n	8002e00 <HAL_GPIO_Init+0x204>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e002      	b.n	8002e00 <HAL_GPIO_Init+0x204>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <HAL_GPIO_Init+0x204>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	f002 0203 	and.w	r2, r2, #3
 8002e06:	0092      	lsls	r2, r2, #2
 8002e08:	4093      	lsls	r3, r2
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e10:	4935      	ldr	r1, [pc, #212]	@ (8002ee8 <HAL_GPIO_Init+0x2ec>)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	3302      	adds	r3, #2
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e1e:	4b38      	ldr	r3, [pc, #224]	@ (8002f00 <HAL_GPIO_Init+0x304>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e42:	4a2f      	ldr	r2, [pc, #188]	@ (8002f00 <HAL_GPIO_Init+0x304>)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e48:	4b2d      	ldr	r3, [pc, #180]	@ (8002f00 <HAL_GPIO_Init+0x304>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e6c:	4a24      	ldr	r2, [pc, #144]	@ (8002f00 <HAL_GPIO_Init+0x304>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e72:	4b23      	ldr	r3, [pc, #140]	@ (8002f00 <HAL_GPIO_Init+0x304>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e96:	4a1a      	ldr	r2, [pc, #104]	@ (8002f00 <HAL_GPIO_Init+0x304>)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e9c:	4b18      	ldr	r3, [pc, #96]	@ (8002f00 <HAL_GPIO_Init+0x304>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ec0:	4a0f      	ldr	r2, [pc, #60]	@ (8002f00 <HAL_GPIO_Init+0x304>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	2b0f      	cmp	r3, #15
 8002ed0:	f67f aea2 	bls.w	8002c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3724      	adds	r7, #36	@ 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40013800 	.word	0x40013800
 8002eec:	40020000 	.word	0x40020000
 8002ef0:	40020400 	.word	0x40020400
 8002ef4:	40020800 	.word	0x40020800
 8002ef8:	40020c00 	.word	0x40020c00
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40013c00 	.word	0x40013c00

08002f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e12b      	b.n	800316e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff f816 	bl	8001f5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2224      	movs	r2, #36	@ 0x24
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f68:	f003 faf2 	bl	8006550 <HAL_RCC_GetPCLK1Freq>
 8002f6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4a81      	ldr	r2, [pc, #516]	@ (8003178 <HAL_I2C_Init+0x274>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d807      	bhi.n	8002f88 <HAL_I2C_Init+0x84>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4a80      	ldr	r2, [pc, #512]	@ (800317c <HAL_I2C_Init+0x278>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	bf94      	ite	ls
 8002f80:	2301      	movls	r3, #1
 8002f82:	2300      	movhi	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	e006      	b.n	8002f96 <HAL_I2C_Init+0x92>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4a7d      	ldr	r2, [pc, #500]	@ (8003180 <HAL_I2C_Init+0x27c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	bf94      	ite	ls
 8002f90:	2301      	movls	r3, #1
 8002f92:	2300      	movhi	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e0e7      	b.n	800316e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4a78      	ldr	r2, [pc, #480]	@ (8003184 <HAL_I2C_Init+0x280>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	0c9b      	lsrs	r3, r3, #18
 8002fa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	4a6a      	ldr	r2, [pc, #424]	@ (8003178 <HAL_I2C_Init+0x274>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d802      	bhi.n	8002fd8 <HAL_I2C_Init+0xd4>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	e009      	b.n	8002fec <HAL_I2C_Init+0xe8>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	4a69      	ldr	r2, [pc, #420]	@ (8003188 <HAL_I2C_Init+0x284>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	3301      	adds	r3, #1
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ffe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	495c      	ldr	r1, [pc, #368]	@ (8003178 <HAL_I2C_Init+0x274>)
 8003008:	428b      	cmp	r3, r1
 800300a:	d819      	bhi.n	8003040 <HAL_I2C_Init+0x13c>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1e59      	subs	r1, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fbb1 f3f3 	udiv	r3, r1, r3
 800301a:	1c59      	adds	r1, r3, #1
 800301c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003020:	400b      	ands	r3, r1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_I2C_Init+0x138>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1e59      	subs	r1, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fbb1 f3f3 	udiv	r3, r1, r3
 8003034:	3301      	adds	r3, #1
 8003036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303a:	e051      	b.n	80030e0 <HAL_I2C_Init+0x1dc>
 800303c:	2304      	movs	r3, #4
 800303e:	e04f      	b.n	80030e0 <HAL_I2C_Init+0x1dc>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d111      	bne.n	800306c <HAL_I2C_Init+0x168>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1e58      	subs	r0, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	440b      	add	r3, r1
 8003056:	fbb0 f3f3 	udiv	r3, r0, r3
 800305a:	3301      	adds	r3, #1
 800305c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e012      	b.n	8003092 <HAL_I2C_Init+0x18e>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1e58      	subs	r0, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	0099      	lsls	r1, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003082:	3301      	adds	r3, #1
 8003084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_I2C_Init+0x196>
 8003096:	2301      	movs	r3, #1
 8003098:	e022      	b.n	80030e0 <HAL_I2C_Init+0x1dc>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10e      	bne.n	80030c0 <HAL_I2C_Init+0x1bc>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1e58      	subs	r0, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6859      	ldr	r1, [r3, #4]
 80030aa:	460b      	mov	r3, r1
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	440b      	add	r3, r1
 80030b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b4:	3301      	adds	r3, #1
 80030b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030be:	e00f      	b.n	80030e0 <HAL_I2C_Init+0x1dc>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1e58      	subs	r0, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	0099      	lsls	r1, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d6:	3301      	adds	r3, #1
 80030d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	6809      	ldr	r1, [r1, #0]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800310e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6911      	ldr	r1, [r2, #16]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68d2      	ldr	r2, [r2, #12]
 800311a:	4311      	orrs	r1, r2
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	430b      	orrs	r3, r1
 8003122:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	000186a0 	.word	0x000186a0
 800317c:	001e847f 	.word	0x001e847f
 8003180:	003d08ff 	.word	0x003d08ff
 8003184:	431bde83 	.word	0x431bde83
 8003188:	10624dd3 	.word	0x10624dd3

0800318c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af02      	add	r7, sp, #8
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	461a      	mov	r2, r3
 8003198:	460b      	mov	r3, r1
 800319a:	817b      	strh	r3, [r7, #10]
 800319c:	4613      	mov	r3, r2
 800319e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7ff fbea 	bl	8002978 <HAL_GetTick>
 80031a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	f040 80e0 	bne.w	8003374 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	2319      	movs	r3, #25
 80031ba:	2201      	movs	r2, #1
 80031bc:	4970      	ldr	r1, [pc, #448]	@ (8003380 <HAL_I2C_Master_Transmit+0x1f4>)
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f001 f90e 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
 80031cc:	e0d3      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_I2C_Master_Transmit+0x50>
 80031d8:	2302      	movs	r3, #2
 80031da:	e0cc      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d007      	beq.n	8003202 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003210:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2221      	movs	r2, #33	@ 0x21
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2210      	movs	r2, #16
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	893a      	ldrh	r2, [r7, #8]
 8003232:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4a50      	ldr	r2, [pc, #320]	@ (8003384 <HAL_I2C_Master_Transmit+0x1f8>)
 8003242:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003244:	8979      	ldrh	r1, [r7, #10]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	6a3a      	ldr	r2, [r7, #32]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fdfa 	bl	8003e44 <I2C_MasterRequestWrite>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e08d      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325a:	2300      	movs	r3, #0
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003270:	e066      	b.n	8003340 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	6a39      	ldr	r1, [r7, #32]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f001 f9cc 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	2b04      	cmp	r3, #4
 8003288:	d107      	bne.n	800329a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003298:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e06b      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	781a      	ldrb	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d11b      	bne.n	8003314 <HAL_I2C_Master_Transmit+0x188>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d017      	beq.n	8003314 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	6a39      	ldr	r1, [r7, #32]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f001 f9c3 	bl	80046a4 <I2C_WaitOnBTFFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00d      	beq.n	8003340 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003328:	2b04      	cmp	r3, #4
 800332a:	d107      	bne.n	800333c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800333a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e01a      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	d194      	bne.n	8003272 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	00100002 	.word	0x00100002
 8003384:	ffff0000 	.word	0xffff0000

08003388 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08c      	sub	sp, #48	@ 0x30
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	461a      	mov	r2, r3
 8003394:	460b      	mov	r3, r1
 8003396:	817b      	strh	r3, [r7, #10]
 8003398:	4613      	mov	r3, r2
 800339a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800339c:	f7ff faec 	bl	8002978 <HAL_GetTick>
 80033a0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	f040 8217 	bne.w	80037de <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2319      	movs	r3, #25
 80033b6:	2201      	movs	r2, #1
 80033b8:	497c      	ldr	r1, [pc, #496]	@ (80035ac <HAL_I2C_Master_Receive+0x224>)
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f001 f810 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80033c6:	2302      	movs	r3, #2
 80033c8:	e20a      	b.n	80037e0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_I2C_Master_Receive+0x50>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e203      	b.n	80037e0 <HAL_I2C_Master_Receive+0x458>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d007      	beq.n	80033fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0201 	orr.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800340c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2222      	movs	r2, #34	@ 0x22
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2210      	movs	r2, #16
 800341a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	893a      	ldrh	r2, [r7, #8]
 800342e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4a5c      	ldr	r2, [pc, #368]	@ (80035b0 <HAL_I2C_Master_Receive+0x228>)
 800343e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003440:	8979      	ldrh	r1, [r7, #10]
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 fd7e 	bl	8003f48 <I2C_MasterRequestRead>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e1c4      	b.n	80037e0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345a:	2b00      	cmp	r3, #0
 800345c:	d113      	bne.n	8003486 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345e:	2300      	movs	r3, #0
 8003460:	623b      	str	r3, [r7, #32]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	623b      	str	r3, [r7, #32]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	623b      	str	r3, [r7, #32]
 8003472:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e198      	b.n	80037b8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348a:	2b01      	cmp	r3, #1
 800348c:	d11b      	bne.n	80034c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800349c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	61fb      	str	r3, [r7, #28]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	61fb      	str	r3, [r7, #28]
 80034b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	e178      	b.n	80037b8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d11b      	bne.n	8003506 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ee:	2300      	movs	r3, #0
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	e158      	b.n	80037b8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800352c:	e144      	b.n	80037b8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003532:	2b03      	cmp	r3, #3
 8003534:	f200 80f1 	bhi.w	800371a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353c:	2b01      	cmp	r3, #1
 800353e:	d123      	bne.n	8003588 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003542:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f001 f8f5 	bl	8004734 <I2C_WaitOnRXNEFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e145      	b.n	80037e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003586:	e117      	b.n	80037b8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358c:	2b02      	cmp	r3, #2
 800358e:	d14e      	bne.n	800362e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003596:	2200      	movs	r2, #0
 8003598:	4906      	ldr	r1, [pc, #24]	@ (80035b4 <HAL_I2C_Master_Receive+0x22c>)
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 ff20 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e11a      	b.n	80037e0 <HAL_I2C_Master_Receive+0x458>
 80035aa:	bf00      	nop
 80035ac:	00100002 	.word	0x00100002
 80035b0:	ffff0000 	.word	0xffff0000
 80035b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800362c:	e0c4      	b.n	80037b8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003634:	2200      	movs	r2, #0
 8003636:	496c      	ldr	r1, [pc, #432]	@ (80037e8 <HAL_I2C_Master_Receive+0x460>)
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 fed1 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0cb      	b.n	80037e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003690:	2200      	movs	r2, #0
 8003692:	4955      	ldr	r1, [pc, #340]	@ (80037e8 <HAL_I2C_Master_Receive+0x460>)
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 fea3 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e09d      	b.n	80037e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003718:	e04e      	b.n	80037b8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800371c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f001 f808 	bl	8004734 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e058      	b.n	80037e0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b04      	cmp	r3, #4
 800376c:	d124      	bne.n	80037b8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003772:	2b03      	cmp	r3, #3
 8003774:	d107      	bne.n	8003786 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003784:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f47f aeb6 	bne.w	800352e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e000      	b.n	80037e0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80037de:	2302      	movs	r3, #2
  }
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3728      	adds	r7, #40	@ 0x28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	00010004 	.word	0x00010004

080037ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	4608      	mov	r0, r1
 80037f6:	4611      	mov	r1, r2
 80037f8:	461a      	mov	r2, r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	817b      	strh	r3, [r7, #10]
 80037fe:	460b      	mov	r3, r1
 8003800:	813b      	strh	r3, [r7, #8]
 8003802:	4613      	mov	r3, r2
 8003804:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003806:	f7ff f8b7 	bl	8002978 <HAL_GetTick>
 800380a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b20      	cmp	r3, #32
 8003816:	f040 80d9 	bne.w	80039cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	2319      	movs	r3, #25
 8003820:	2201      	movs	r2, #1
 8003822:	496d      	ldr	r1, [pc, #436]	@ (80039d8 <HAL_I2C_Mem_Write+0x1ec>)
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 fddb 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003830:	2302      	movs	r3, #2
 8003832:	e0cc      	b.n	80039ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_I2C_Mem_Write+0x56>
 800383e:	2302      	movs	r3, #2
 8003840:	e0c5      	b.n	80039ce <HAL_I2C_Mem_Write+0x1e2>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d007      	beq.n	8003868 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003876:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2221      	movs	r2, #33	@ 0x21
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2240      	movs	r2, #64	@ 0x40
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a3a      	ldr	r2, [r7, #32]
 8003892:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003898:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4a4d      	ldr	r2, [pc, #308]	@ (80039dc <HAL_I2C_Mem_Write+0x1f0>)
 80038a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038aa:	88f8      	ldrh	r0, [r7, #6]
 80038ac:	893a      	ldrh	r2, [r7, #8]
 80038ae:	8979      	ldrh	r1, [r7, #10]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	4603      	mov	r3, r0
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fc12 	bl	80040e4 <I2C_RequestMemoryWrite>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d052      	beq.n	800396c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e081      	b.n	80039ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 fea0 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00d      	beq.n	80038f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d107      	bne.n	80038f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e06b      	b.n	80039ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	781a      	ldrb	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b04      	cmp	r3, #4
 8003932:	d11b      	bne.n	800396c <HAL_I2C_Mem_Write+0x180>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003938:	2b00      	cmp	r3, #0
 800393a:	d017      	beq.n	800396c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	781a      	ldrb	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1aa      	bne.n	80038ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 fe93 	bl	80046a4 <I2C_WaitOnBTFFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00d      	beq.n	80039a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003988:	2b04      	cmp	r3, #4
 800398a:	d107      	bne.n	800399c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800399a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e016      	b.n	80039ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e000      	b.n	80039ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039cc:	2302      	movs	r3, #2
  }
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	00100002 	.word	0x00100002
 80039dc:	ffff0000 	.word	0xffff0000

080039e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08c      	sub	sp, #48	@ 0x30
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	4608      	mov	r0, r1
 80039ea:	4611      	mov	r1, r2
 80039ec:	461a      	mov	r2, r3
 80039ee:	4603      	mov	r3, r0
 80039f0:	817b      	strh	r3, [r7, #10]
 80039f2:	460b      	mov	r3, r1
 80039f4:	813b      	strh	r3, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039fa:	f7fe ffbd 	bl	8002978 <HAL_GetTick>
 80039fe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	f040 8214 	bne.w	8003e36 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2319      	movs	r3, #25
 8003a14:	2201      	movs	r2, #1
 8003a16:	497b      	ldr	r1, [pc, #492]	@ (8003c04 <HAL_I2C_Mem_Read+0x224>)
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fce1 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a24:	2302      	movs	r3, #2
 8003a26:	e207      	b.n	8003e38 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_I2C_Mem_Read+0x56>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e200      	b.n	8003e38 <HAL_I2C_Mem_Read+0x458>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d007      	beq.n	8003a5c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2222      	movs	r2, #34	@ 0x22
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2240      	movs	r2, #64	@ 0x40
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4a5b      	ldr	r2, [pc, #364]	@ (8003c08 <HAL_I2C_Mem_Read+0x228>)
 8003a9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a9e:	88f8      	ldrh	r0, [r7, #6]
 8003aa0:	893a      	ldrh	r2, [r7, #8]
 8003aa2:	8979      	ldrh	r1, [r7, #10]
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	4603      	mov	r3, r0
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fbae 	bl	8004210 <I2C_RequestMemoryRead>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e1bc      	b.n	8003e38 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d113      	bne.n	8003aee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	623b      	str	r3, [r7, #32]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	623b      	str	r3, [r7, #32]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	623b      	str	r3, [r7, #32]
 8003ada:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	e190      	b.n	8003e10 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d11b      	bne.n	8003b2e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	e170      	b.n	8003e10 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d11b      	bne.n	8003b6e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b56:	2300      	movs	r3, #0
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	e150      	b.n	8003e10 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b84:	e144      	b.n	8003e10 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	f200 80f1 	bhi.w	8003d72 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d123      	bne.n	8003be0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 fdc9 	bl	8004734 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e145      	b.n	8003e38 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bde:	e117      	b.n	8003e10 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d14e      	bne.n	8003c86 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bee:	2200      	movs	r2, #0
 8003bf0:	4906      	ldr	r1, [pc, #24]	@ (8003c0c <HAL_I2C_Mem_Read+0x22c>)
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fbf4 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d008      	beq.n	8003c10 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e11a      	b.n	8003e38 <HAL_I2C_Mem_Read+0x458>
 8003c02:	bf00      	nop
 8003c04:	00100002 	.word	0x00100002
 8003c08:	ffff0000 	.word	0xffff0000
 8003c0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c84:	e0c4      	b.n	8003e10 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	496c      	ldr	r1, [pc, #432]	@ (8003e40 <HAL_I2C_Mem_Read+0x460>)
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 fba5 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0cb      	b.n	8003e38 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce8:	2200      	movs	r2, #0
 8003cea:	4955      	ldr	r1, [pc, #340]	@ (8003e40 <HAL_I2C_Mem_Read+0x460>)
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 fb77 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e09d      	b.n	8003e38 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d70:	e04e      	b.n	8003e10 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fcdc 	bl	8004734 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e058      	b.n	8003e38 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d124      	bne.n	8003e10 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d107      	bne.n	8003dde <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ddc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f47f aeb6 	bne.w	8003b86 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e000      	b.n	8003e38 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003e36:	2302      	movs	r3, #2
  }
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3728      	adds	r7, #40	@ 0x28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	00010004 	.word	0x00010004

08003e44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	607a      	str	r2, [r7, #4]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	460b      	mov	r3, r1
 8003e52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d006      	beq.n	8003e6e <I2C_MasterRequestWrite+0x2a>
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d003      	beq.n	8003e6e <I2C_MasterRequestWrite+0x2a>
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e6c:	d108      	bne.n	8003e80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	e00b      	b.n	8003e98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e84:	2b12      	cmp	r3, #18
 8003e86:	d107      	bne.n	8003e98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 fa9b 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00d      	beq.n	8003ecc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ebe:	d103      	bne.n	8003ec8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ec6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e035      	b.n	8003f38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ed4:	d108      	bne.n	8003ee8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ed6:	897b      	ldrh	r3, [r7, #10]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ee4:	611a      	str	r2, [r3, #16]
 8003ee6:	e01b      	b.n	8003f20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ee8:	897b      	ldrh	r3, [r7, #10]
 8003eea:	11db      	asrs	r3, r3, #7
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f003 0306 	and.w	r3, r3, #6
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f063 030f 	orn	r3, r3, #15
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	490e      	ldr	r1, [pc, #56]	@ (8003f40 <I2C_MasterRequestWrite+0xfc>)
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fae4 	bl	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e010      	b.n	8003f38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f16:	897b      	ldrh	r3, [r7, #10]
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4907      	ldr	r1, [pc, #28]	@ (8003f44 <I2C_MasterRequestWrite+0x100>)
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fad4 	bl	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	00010008 	.word	0x00010008
 8003f44:	00010002 	.word	0x00010002

08003f48 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	607a      	str	r2, [r7, #4]
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	460b      	mov	r3, r1
 8003f56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f6c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d006      	beq.n	8003f82 <I2C_MasterRequestRead+0x3a>
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d003      	beq.n	8003f82 <I2C_MasterRequestRead+0x3a>
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f80:	d108      	bne.n	8003f94 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e00b      	b.n	8003fac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f98:	2b11      	cmp	r3, #17
 8003f9a:	d107      	bne.n	8003fac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003faa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fa11 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00d      	beq.n	8003fe0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fd2:	d103      	bne.n	8003fdc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e079      	b.n	80040d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fe8:	d108      	bne.n	8003ffc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fea:	897b      	ldrh	r3, [r7, #10]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	611a      	str	r2, [r3, #16]
 8003ffa:	e05f      	b.n	80040bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ffc:	897b      	ldrh	r3, [r7, #10]
 8003ffe:	11db      	asrs	r3, r3, #7
 8004000:	b2db      	uxtb	r3, r3
 8004002:	f003 0306 	and.w	r3, r3, #6
 8004006:	b2db      	uxtb	r3, r3
 8004008:	f063 030f 	orn	r3, r3, #15
 800400c:	b2da      	uxtb	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	4930      	ldr	r1, [pc, #192]	@ (80040dc <I2C_MasterRequestRead+0x194>)
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 fa5a 	bl	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e054      	b.n	80040d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800402a:	897b      	ldrh	r3, [r7, #10]
 800402c:	b2da      	uxtb	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4929      	ldr	r1, [pc, #164]	@ (80040e0 <I2C_MasterRequestRead+0x198>)
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 fa4a 	bl	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e044      	b.n	80040d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800406e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f9af 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00d      	beq.n	80040a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004096:	d103      	bne.n	80040a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800409e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e017      	b.n	80040d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80040a4:	897b      	ldrh	r3, [r7, #10]
 80040a6:	11db      	asrs	r3, r3, #7
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f003 0306 	and.w	r3, r3, #6
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f063 030e 	orn	r3, r3, #14
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4907      	ldr	r1, [pc, #28]	@ (80040e0 <I2C_MasterRequestRead+0x198>)
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fa06 	bl	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	00010008 	.word	0x00010008
 80040e0:	00010002 	.word	0x00010002

080040e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	4608      	mov	r0, r1
 80040ee:	4611      	mov	r1, r2
 80040f0:	461a      	mov	r2, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	817b      	strh	r3, [r7, #10]
 80040f6:	460b      	mov	r3, r1
 80040f8:	813b      	strh	r3, [r7, #8]
 80040fa:	4613      	mov	r3, r2
 80040fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800410c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	2200      	movs	r2, #0
 8004116:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f960 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00d      	beq.n	8004142 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004134:	d103      	bne.n	800413e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800413c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e05f      	b.n	8004202 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004142:	897b      	ldrh	r3, [r7, #10]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004150:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	6a3a      	ldr	r2, [r7, #32]
 8004156:	492d      	ldr	r1, [pc, #180]	@ (800420c <I2C_RequestMemoryWrite+0x128>)
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f9bb 	bl	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e04c      	b.n	8004202 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004180:	6a39      	ldr	r1, [r7, #32]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 fa46 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00d      	beq.n	80041aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	2b04      	cmp	r3, #4
 8004194:	d107      	bne.n	80041a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e02b      	b.n	8004202 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d105      	bne.n	80041bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041b0:	893b      	ldrh	r3, [r7, #8]
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	611a      	str	r2, [r3, #16]
 80041ba:	e021      	b.n	8004200 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041bc:	893b      	ldrh	r3, [r7, #8]
 80041be:	0a1b      	lsrs	r3, r3, #8
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041cc:	6a39      	ldr	r1, [r7, #32]
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 fa20 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00d      	beq.n	80041f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d107      	bne.n	80041f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e005      	b.n	8004202 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041f6:	893b      	ldrh	r3, [r7, #8]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	00010002 	.word	0x00010002

08004210 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	4608      	mov	r0, r1
 800421a:	4611      	mov	r1, r2
 800421c:	461a      	mov	r2, r3
 800421e:	4603      	mov	r3, r0
 8004220:	817b      	strh	r3, [r7, #10]
 8004222:	460b      	mov	r3, r1
 8004224:	813b      	strh	r3, [r7, #8]
 8004226:	4613      	mov	r3, r2
 8004228:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004238:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004248:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	2200      	movs	r2, #0
 8004252:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f8c2 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00d      	beq.n	800427e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800426c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004270:	d103      	bne.n	800427a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004278:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0aa      	b.n	80043d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800427e:	897b      	ldrh	r3, [r7, #10]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800428c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	6a3a      	ldr	r2, [r7, #32]
 8004292:	4952      	ldr	r1, [pc, #328]	@ (80043dc <I2C_RequestMemoryRead+0x1cc>)
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f91d 	bl	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e097      	b.n	80043d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042bc:	6a39      	ldr	r1, [r7, #32]
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f9a8 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00d      	beq.n	80042e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d107      	bne.n	80042e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e076      	b.n	80043d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d105      	bne.n	80042f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ec:	893b      	ldrh	r3, [r7, #8]
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	611a      	str	r2, [r3, #16]
 80042f6:	e021      	b.n	800433c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042f8:	893b      	ldrh	r3, [r7, #8]
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004308:	6a39      	ldr	r1, [r7, #32]
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 f982 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00d      	beq.n	8004332 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	2b04      	cmp	r3, #4
 800431c:	d107      	bne.n	800432e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800432c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e050      	b.n	80043d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004332:	893b      	ldrh	r3, [r7, #8]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800433e:	6a39      	ldr	r1, [r7, #32]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f967 	bl	8004614 <I2C_WaitOnTXEFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00d      	beq.n	8004368 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	2b04      	cmp	r3, #4
 8004352:	d107      	bne.n	8004364 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004362:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e035      	b.n	80043d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004376:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	2200      	movs	r2, #0
 8004380:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f82b 	bl	80043e0 <I2C_WaitOnFlagUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00d      	beq.n	80043ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800439e:	d103      	bne.n	80043a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e013      	b.n	80043d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043ac:	897b      	ldrh	r3, [r7, #10]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	6a3a      	ldr	r2, [r7, #32]
 80043c0:	4906      	ldr	r1, [pc, #24]	@ (80043dc <I2C_RequestMemoryRead+0x1cc>)
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f886 	bl	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	00010002 	.word	0x00010002

080043e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	4613      	mov	r3, r2
 80043ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043f0:	e048      	b.n	8004484 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043f8:	d044      	beq.n	8004484 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fa:	f7fe fabd 	bl	8002978 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	429a      	cmp	r2, r3
 8004408:	d302      	bcc.n	8004410 <I2C_WaitOnFlagUntilTimeout+0x30>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d139      	bne.n	8004484 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	0c1b      	lsrs	r3, r3, #16
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d10d      	bne.n	8004436 <I2C_WaitOnFlagUntilTimeout+0x56>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	43da      	mvns	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4013      	ands	r3, r2
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	e00c      	b.n	8004450 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	43da      	mvns	r2, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4013      	ands	r3, r2
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	429a      	cmp	r2, r3
 8004454:	d116      	bne.n	8004484 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004470:	f043 0220 	orr.w	r2, r3, #32
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e023      	b.n	80044cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	0c1b      	lsrs	r3, r3, #16
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b01      	cmp	r3, #1
 800448c:	d10d      	bne.n	80044aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	43da      	mvns	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4013      	ands	r3, r2
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf0c      	ite	eq
 80044a0:	2301      	moveq	r3, #1
 80044a2:	2300      	movne	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	e00c      	b.n	80044c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	43da      	mvns	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4013      	ands	r3, r2
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf0c      	ite	eq
 80044bc:	2301      	moveq	r3, #1
 80044be:	2300      	movne	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	461a      	mov	r2, r3
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d093      	beq.n	80043f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044e2:	e071      	b.n	80045c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044f2:	d123      	bne.n	800453c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004502:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800450c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004528:	f043 0204 	orr.w	r2, r3, #4
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e067      	b.n	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004542:	d041      	beq.n	80045c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004544:	f7fe fa18 	bl	8002978 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	429a      	cmp	r2, r3
 8004552:	d302      	bcc.n	800455a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d136      	bne.n	80045c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	0c1b      	lsrs	r3, r3, #16
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	d10c      	bne.n	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	43da      	mvns	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4013      	ands	r3, r2
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	bf14      	ite	ne
 8004576:	2301      	movne	r3, #1
 8004578:	2300      	moveq	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	e00b      	b.n	8004596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	43da      	mvns	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4013      	ands	r3, r2
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	bf14      	ite	ne
 8004590:	2301      	movne	r3, #1
 8004592:	2300      	moveq	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d016      	beq.n	80045c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b4:	f043 0220 	orr.w	r2, r3, #32
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e021      	b.n	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	0c1b      	lsrs	r3, r3, #16
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d10c      	bne.n	80045ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	43da      	mvns	r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	4013      	ands	r3, r2
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bf14      	ite	ne
 80045e4:	2301      	movne	r3, #1
 80045e6:	2300      	moveq	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	e00b      	b.n	8004604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	43da      	mvns	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4013      	ands	r3, r2
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bf14      	ite	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	2300      	moveq	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	f47f af6d 	bne.w	80044e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004620:	e034      	b.n	800468c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f8e3 	bl	80047ee <I2C_IsAcknowledgeFailed>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e034      	b.n	800469c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004638:	d028      	beq.n	800468c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800463a:	f7fe f99d 	bl	8002978 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	429a      	cmp	r2, r3
 8004648:	d302      	bcc.n	8004650 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d11d      	bne.n	800468c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465a:	2b80      	cmp	r3, #128	@ 0x80
 800465c:	d016      	beq.n	800468c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	f043 0220 	orr.w	r2, r3, #32
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e007      	b.n	800469c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004696:	2b80      	cmp	r3, #128	@ 0x80
 8004698:	d1c3      	bne.n	8004622 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046b0:	e034      	b.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f89b 	bl	80047ee <I2C_IsAcknowledgeFailed>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e034      	b.n	800472c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046c8:	d028      	beq.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ca:	f7fe f955 	bl	8002978 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d302      	bcc.n	80046e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d11d      	bne.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d016      	beq.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004708:	f043 0220 	orr.w	r2, r3, #32
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e007      	b.n	800472c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b04      	cmp	r3, #4
 8004728:	d1c3      	bne.n	80046b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004740:	e049      	b.n	80047d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b10      	cmp	r3, #16
 800474e:	d119      	bne.n	8004784 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0210 	mvn.w	r2, #16
 8004758:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e030      	b.n	80047e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004784:	f7fe f8f8 	bl	8002978 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	429a      	cmp	r2, r3
 8004792:	d302      	bcc.n	800479a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d11d      	bne.n	80047d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a4:	2b40      	cmp	r3, #64	@ 0x40
 80047a6:	d016      	beq.n	80047d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	f043 0220 	orr.w	r2, r3, #32
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e007      	b.n	80047e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e0:	2b40      	cmp	r3, #64	@ 0x40
 80047e2:	d1ae      	bne.n	8004742 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004800:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004804:	d11b      	bne.n	800483e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800480e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482a:	f043 0204 	orr.w	r2, r3, #4
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af02      	add	r7, sp, #8
 8004852:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e101      	b.n	8004a62 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d106      	bne.n	800487e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f006 fd0f 	bl	800b29c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2203      	movs	r2, #3
 8004882:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800488c:	d102      	bne.n	8004894 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f003 f8a6 	bl	80079ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	7c1a      	ldrb	r2, [r3, #16]
 80048a6:	f88d 2000 	strb.w	r2, [sp]
 80048aa:	3304      	adds	r3, #4
 80048ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048ae:	f002 ff85 	bl	80077bc <USB_CoreInit>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0ce      	b.n	8004a62 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2100      	movs	r1, #0
 80048ca:	4618      	mov	r0, r3
 80048cc:	f003 f89e 	bl	8007a0c <USB_SetCurrentMode>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e0bf      	b.n	8004a62 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]
 80048e6:	e04a      	b.n	800497e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80048e8:	7bfa      	ldrb	r2, [r7, #15]
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	3315      	adds	r3, #21
 80048f8:	2201      	movs	r2, #1
 80048fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80048fc:	7bfa      	ldrb	r2, [r7, #15]
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	4613      	mov	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	3314      	adds	r3, #20
 800490c:	7bfa      	ldrb	r2, [r7, #15]
 800490e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004910:	7bfa      	ldrb	r2, [r7, #15]
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	b298      	uxth	r0, r3
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	4613      	mov	r3, r2
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	4413      	add	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	332e      	adds	r3, #46	@ 0x2e
 8004924:	4602      	mov	r2, r0
 8004926:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004928:	7bfa      	ldrb	r2, [r7, #15]
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	3318      	adds	r3, #24
 8004938:	2200      	movs	r2, #0
 800493a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800493c:	7bfa      	ldrb	r2, [r7, #15]
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	4613      	mov	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	331c      	adds	r3, #28
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004950:	7bfa      	ldrb	r2, [r7, #15]
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	4613      	mov	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	3320      	adds	r3, #32
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004964:	7bfa      	ldrb	r2, [r7, #15]
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4613      	mov	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4413      	add	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	3324      	adds	r3, #36	@ 0x24
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	3301      	adds	r3, #1
 800497c:	73fb      	strb	r3, [r7, #15]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	791b      	ldrb	r3, [r3, #4]
 8004982:	7bfa      	ldrb	r2, [r7, #15]
 8004984:	429a      	cmp	r2, r3
 8004986:	d3af      	bcc.n	80048e8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004988:	2300      	movs	r3, #0
 800498a:	73fb      	strb	r3, [r7, #15]
 800498c:	e044      	b.n	8004a18 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800498e:	7bfa      	ldrb	r2, [r7, #15]
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	4413      	add	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80049a4:	7bfa      	ldrb	r2, [r7, #15]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4413      	add	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80049b6:	7bfa      	ldrb	r2, [r7, #15]
 80049b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80049ba:	7bfa      	ldrb	r2, [r7, #15]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80049d0:	7bfa      	ldrb	r2, [r7, #15]
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	4613      	mov	r3, r2
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80049e6:	7bfa      	ldrb	r2, [r7, #15]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	4413      	add	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80049fc:	7bfa      	ldrb	r2, [r7, #15]
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	3301      	adds	r3, #1
 8004a16:	73fb      	strb	r3, [r7, #15]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	791b      	ldrb	r3, [r3, #4]
 8004a1c:	7bfa      	ldrb	r2, [r7, #15]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d3b5      	bcc.n	800498e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	7c1a      	ldrb	r2, [r3, #16]
 8004a2a:	f88d 2000 	strb.w	r2, [sp]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a32:	f003 f837 	bl	8007aa4 <USB_DevInit>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e00c      	b.n	8004a62 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f004 f881 	bl	8008b62 <USB_DevDisconnect>

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d101      	bne.n	8004a86 <HAL_PCD_Start+0x1c>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e022      	b.n	8004acc <HAL_PCD_Start+0x62>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d105      	bne.n	8004aae <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f002 ff88 	bl	80079c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f004 f82f 	bl	8008b20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ad4:	b590      	push	{r4, r7, lr}
 8004ad6:	b08d      	sub	sp, #52	@ 0x34
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f004 f8ed 	bl	8008cca <USB_GetMode>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f040 848c 	bne.w	8005410 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f004 f851 	bl	8008ba4 <USB_ReadInterrupts>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 8482 	beq.w	800540e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	0a1b      	lsrs	r3, r3, #8
 8004b14:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f004 f83e 	bl	8008ba4 <USB_ReadInterrupts>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d107      	bne.n	8004b42 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f002 0202 	and.w	r2, r2, #2
 8004b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f004 f82c 	bl	8008ba4 <USB_ReadInterrupts>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d161      	bne.n	8004c1a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699a      	ldr	r2, [r3, #24]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0210 	bic.w	r2, r2, #16
 8004b64:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	f003 020f 	and.w	r2, r3, #15
 8004b72:	4613      	mov	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	4413      	add	r3, r2
 8004b82:	3304      	adds	r3, #4
 8004b84:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004b8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b90:	d124      	bne.n	8004bdc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d035      	beq.n	8004c0a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ba8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	6a38      	ldr	r0, [r7, #32]
 8004bb2:	f003 fe63 	bl	800887c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	091b      	lsrs	r3, r3, #4
 8004bbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bc2:	441a      	add	r2, r3
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	695a      	ldr	r2, [r3, #20]
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	091b      	lsrs	r3, r3, #4
 8004bd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bd4:	441a      	add	r2, r3
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	615a      	str	r2, [r3, #20]
 8004bda:	e016      	b.n	8004c0a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004be2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004be6:	d110      	bne.n	8004c0a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004bee:	2208      	movs	r2, #8
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6a38      	ldr	r0, [r7, #32]
 8004bf4:	f003 fe42 	bl	800887c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	695a      	ldr	r2, [r3, #20]
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	091b      	lsrs	r3, r3, #4
 8004c00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c04:	441a      	add	r2, r3
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699a      	ldr	r2, [r3, #24]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0210 	orr.w	r2, r2, #16
 8004c18:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f003 ffc0 	bl	8008ba4 <USB_ReadInterrupts>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c2a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004c2e:	f040 80a7 	bne.w	8004d80 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f003 ffc5 	bl	8008bca <USB_ReadDevAllOutEpInterrupt>
 8004c40:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004c42:	e099      	b.n	8004d78 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 808e 	beq.w	8004d6c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	4611      	mov	r1, r2
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f003 ffe9 	bl	8008c32 <USB_ReadDevOutEPInterrupt>
 8004c60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00c      	beq.n	8004c86 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c78:	461a      	mov	r2, r3
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004c7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fea3 	bl	80059cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00c      	beq.n	8004caa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	2308      	movs	r3, #8
 8004ca0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004ca2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 ff79 	bl	8005b9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	2310      	movs	r3, #16
 8004cc4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d030      	beq.n	8004d32 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd8:	2b80      	cmp	r3, #128	@ 0x80
 8004cda:	d109      	bne.n	8004cf0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	4413      	add	r3, r2
 8004d02:	3304      	adds	r3, #4
 8004d04:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	78db      	ldrb	r3, [r3, #3]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d108      	bne.n	8004d20 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2200      	movs	r2, #0
 8004d12:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	4619      	mov	r1, r3
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f006 fbba 	bl	800b494 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	2302      	movs	r3, #2
 8004d30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d008      	beq.n	8004d4e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d48:	461a      	mov	r2, r3
 8004d4a:	2320      	movs	r3, #32
 8004d4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d009      	beq.n	8004d6c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d64:	461a      	mov	r2, r3
 8004d66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6e:	3301      	adds	r3, #1
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d74:	085b      	lsrs	r3, r3, #1
 8004d76:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f47f af62 	bne.w	8004c44 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f003 ff0d 	bl	8008ba4 <USB_ReadInterrupts>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d94:	f040 80db 	bne.w	8004f4e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f003 ff2e 	bl	8008bfe <USB_ReadDevAllInEpInterrupt>
 8004da2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004da8:	e0cd      	b.n	8004f46 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 80c2 	beq.w	8004f3a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f003 ff54 	bl	8008c6e <USB_ReadDevInEPInterrupt>
 8004dc6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d057      	beq.n	8004e82 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	2201      	movs	r2, #1
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004de6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	43db      	mvns	r3, r3
 8004dec:	69f9      	ldr	r1, [r7, #28]
 8004dee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004df2:	4013      	ands	r3, r2
 8004df4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e02:	461a      	mov	r2, r3
 8004e04:	2301      	movs	r3, #1
 8004e06:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	799b      	ldrb	r3, [r3, #6]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d132      	bne.n	8004e76 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e14:	4613      	mov	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	3320      	adds	r3, #32
 8004e20:	6819      	ldr	r1, [r3, #0]
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e26:	4613      	mov	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4403      	add	r3, r0
 8004e30:	331c      	adds	r3, #28
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4419      	add	r1, r3
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4403      	add	r3, r0
 8004e44:	3320      	adds	r3, #32
 8004e46:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d113      	bne.n	8004e76 <HAL_PCD_IRQHandler+0x3a2>
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e52:	4613      	mov	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3324      	adds	r3, #36	@ 0x24
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d108      	bne.n	8004e76 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e6e:	461a      	mov	r2, r3
 8004e70:	2101      	movs	r1, #1
 8004e72:	f003 ff5b 	bl	8008d2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f006 fa8e 	bl	800b39e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e98:	461a      	mov	r2, r3
 8004e9a:	2308      	movs	r3, #8
 8004e9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f003 0310 	and.w	r3, r3, #16
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	2310      	movs	r3, #16
 8004eb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	2340      	movs	r3, #64	@ 0x40
 8004ed4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d023      	beq.n	8004f28 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004ee0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ee2:	6a38      	ldr	r0, [r7, #32]
 8004ee4:	f002 ff42 	bl	8007d6c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eea:	4613      	mov	r3, r2
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	3310      	adds	r3, #16
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3304      	adds	r3, #4
 8004efa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	78db      	ldrb	r3, [r3, #3]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d108      	bne.n	8004f16 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2200      	movs	r2, #0
 8004f08:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f006 fad1 	bl	800b4b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f22:	461a      	mov	r2, r3
 8004f24:	2302      	movs	r3, #2
 8004f26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004f32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fcbd 	bl	80058b4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f42:	085b      	lsrs	r3, r3, #1
 8004f44:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f47f af2e 	bne.w	8004daa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f003 fe26 	bl	8008ba4 <USB_ReadInterrupts>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f62:	d122      	bne.n	8004faa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f72:	f023 0301 	bic.w	r3, r3, #1
 8004f76:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d108      	bne.n	8004f94 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fea3 	bl	8005cd8 <HAL_PCDEx_LPM_Callback>
 8004f92:	e002      	b.n	8004f9a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f006 fa6f 	bl	800b478 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695a      	ldr	r2, [r3, #20]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004fa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f003 fdf8 	bl	8008ba4 <USB_ReadInterrupts>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fbe:	d112      	bne.n	8004fe6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d102      	bne.n	8004fd6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f006 fa2b 	bl	800b42c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004fe4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f003 fdda 	bl	8008ba4 <USB_ReadInterrupts>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ffa:	f040 80b7 	bne.w	800516c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800500c:	f023 0301 	bic.w	r3, r3, #1
 8005010:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2110      	movs	r1, #16
 8005018:	4618      	mov	r0, r3
 800501a:	f002 fea7 	bl	8007d6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800501e:	2300      	movs	r3, #0
 8005020:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005022:	e046      	b.n	80050b2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005030:	461a      	mov	r2, r3
 8005032:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005036:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005048:	0151      	lsls	r1, r2, #5
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	440a      	add	r2, r1
 800504e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005052:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005056:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005064:	461a      	mov	r2, r3
 8005066:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800506a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800506c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800507c:	0151      	lsls	r1, r2, #5
 800507e:	69fa      	ldr	r2, [r7, #28]
 8005080:	440a      	add	r2, r1
 8005082:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005086:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800508a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800508c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80050aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ae:	3301      	adds	r3, #1
 80050b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	791b      	ldrb	r3, [r3, #4]
 80050b6:	461a      	mov	r2, r3
 80050b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d3b2      	bcc.n	8005024 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050cc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80050d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	7bdb      	ldrb	r3, [r3, #15]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d016      	beq.n	8005108 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050e4:	69fa      	ldr	r2, [r7, #28]
 80050e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050ea:	f043 030b 	orr.w	r3, r3, #11
 80050ee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005100:	f043 030b 	orr.w	r3, r3, #11
 8005104:	6453      	str	r3, [r2, #68]	@ 0x44
 8005106:	e015      	b.n	8005134 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005116:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800511a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800511e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800512e:	f043 030b 	orr.w	r3, r3, #11
 8005132:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005142:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005146:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6818      	ldr	r0, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005156:	461a      	mov	r2, r3
 8005158:	f003 fde8 	bl	8008d2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695a      	ldr	r2, [r3, #20]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800516a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4618      	mov	r0, r3
 8005172:	f003 fd17 	bl	8008ba4 <USB_ReadInterrupts>
 8005176:	4603      	mov	r3, r0
 8005178:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800517c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005180:	d123      	bne.n	80051ca <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f003 fdad 	bl	8008ce6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f002 fe64 	bl	8007e5e <USB_GetDevSpeed>
 8005196:	4603      	mov	r3, r0
 8005198:	461a      	mov	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681c      	ldr	r4, [r3, #0]
 80051a2:	f001 f9c9 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 80051a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80051ac:	461a      	mov	r2, r3
 80051ae:	4620      	mov	r0, r4
 80051b0:	f002 fb68 	bl	8007884 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f006 f91a 	bl	800b3ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695a      	ldr	r2, [r3, #20]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80051c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f003 fce8 	bl	8008ba4 <USB_ReadInterrupts>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d10a      	bne.n	80051f4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f006 f8f7 	bl	800b3d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695a      	ldr	r2, [r3, #20]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f002 0208 	and.w	r2, r2, #8
 80051f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f003 fcd3 	bl	8008ba4 <USB_ReadInterrupts>
 80051fe:	4603      	mov	r3, r0
 8005200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005204:	2b80      	cmp	r3, #128	@ 0x80
 8005206:	d123      	bne.n	8005250 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005214:	2301      	movs	r3, #1
 8005216:	627b      	str	r3, [r7, #36]	@ 0x24
 8005218:	e014      	b.n	8005244 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800521e:	4613      	mov	r3, r2
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d105      	bne.n	800523e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	b2db      	uxtb	r3, r3
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fb0a 	bl	8005852 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	3301      	adds	r3, #1
 8005242:	627b      	str	r3, [r7, #36]	@ 0x24
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	791b      	ldrb	r3, [r3, #4]
 8005248:	461a      	mov	r2, r3
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	4293      	cmp	r3, r2
 800524e:	d3e4      	bcc.n	800521a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f003 fca5 	bl	8008ba4 <USB_ReadInterrupts>
 800525a:	4603      	mov	r3, r0
 800525c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005260:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005264:	d13c      	bne.n	80052e0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005266:	2301      	movs	r3, #1
 8005268:	627b      	str	r3, [r7, #36]	@ 0x24
 800526a:	e02b      	b.n	80052c4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800526c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005280:	4613      	mov	r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	3318      	adds	r3, #24
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d115      	bne.n	80052be <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005292:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005294:	2b00      	cmp	r3, #0
 8005296:	da12      	bge.n	80052be <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800529c:	4613      	mov	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	3317      	adds	r3, #23
 80052a8:	2201      	movs	r2, #1
 80052aa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 faca 	bl	8005852 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	3301      	adds	r3, #1
 80052c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	791b      	ldrb	r3, [r3, #4]
 80052c8:	461a      	mov	r2, r3
 80052ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d3cd      	bcc.n	800526c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695a      	ldr	r2, [r3, #20]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80052de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f003 fc5d 	bl	8008ba4 <USB_ReadInterrupts>
 80052ea:	4603      	mov	r3, r0
 80052ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052f4:	d156      	bne.n	80053a4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052f6:	2301      	movs	r3, #1
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052fa:	e045      	b.n	8005388 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80052fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005310:	4613      	mov	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d12e      	bne.n	8005382 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005324:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005326:	2b00      	cmp	r3, #0
 8005328:	da2b      	bge.n	8005382 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005336:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800533a:	429a      	cmp	r2, r3
 800533c:	d121      	bne.n	8005382 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005342:	4613      	mov	r3, r2
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	440b      	add	r3, r1
 800534c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005350:	2201      	movs	r2, #1
 8005352:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10a      	bne.n	8005382 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800537a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800537e:	6053      	str	r3, [r2, #4]
            break;
 8005380:	e008      	b.n	8005394 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005384:	3301      	adds	r3, #1
 8005386:	627b      	str	r3, [r7, #36]	@ 0x24
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	791b      	ldrb	r3, [r3, #4]
 800538c:	461a      	mov	r2, r3
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	4293      	cmp	r3, r2
 8005392:	d3b3      	bcc.n	80052fc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695a      	ldr	r2, [r3, #20]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80053a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f003 fbfb 	bl	8008ba4 <USB_ReadInterrupts>
 80053ae:	4603      	mov	r3, r0
 80053b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80053b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b8:	d10a      	bne.n	80053d0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f006 f88e 	bl	800b4dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695a      	ldr	r2, [r3, #20]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80053ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f003 fbe5 	bl	8008ba4 <USB_ReadInterrupts>
 80053da:	4603      	mov	r3, r0
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d115      	bne.n	8005410 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f006 f87e 	bl	800b4f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6859      	ldr	r1, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	430a      	orrs	r2, r1
 800540a:	605a      	str	r2, [r3, #4]
 800540c:	e000      	b.n	8005410 <HAL_PCD_IRQHandler+0x93c>
      return;
 800540e:	bf00      	nop
    }
  }
}
 8005410:	3734      	adds	r7, #52	@ 0x34
 8005412:	46bd      	mov	sp, r7
 8005414:	bd90      	pop	{r4, r7, pc}

08005416 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	460b      	mov	r3, r1
 8005420:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_PCD_SetAddress+0x1a>
 800542c:	2302      	movs	r3, #2
 800542e:	e012      	b.n	8005456 <HAL_PCD_SetAddress+0x40>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	78fa      	ldrb	r2, [r7, #3]
 800543c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	78fa      	ldrb	r2, [r7, #3]
 8005444:	4611      	mov	r1, r2
 8005446:	4618      	mov	r0, r3
 8005448:	f003 fb44 	bl	8008ad4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	4608      	mov	r0, r1
 8005468:	4611      	mov	r1, r2
 800546a:	461a      	mov	r2, r3
 800546c:	4603      	mov	r3, r0
 800546e:	70fb      	strb	r3, [r7, #3]
 8005470:	460b      	mov	r3, r1
 8005472:	803b      	strh	r3, [r7, #0]
 8005474:	4613      	mov	r3, r2
 8005476:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800547c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005480:	2b00      	cmp	r3, #0
 8005482:	da0f      	bge.n	80054a4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	f003 020f 	and.w	r2, r3, #15
 800548a:	4613      	mov	r3, r2
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	4413      	add	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	3310      	adds	r3, #16
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	4413      	add	r3, r2
 8005498:	3304      	adds	r3, #4
 800549a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	705a      	strb	r2, [r3, #1]
 80054a2:	e00f      	b.n	80054c4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054a4:	78fb      	ldrb	r3, [r7, #3]
 80054a6:	f003 020f 	and.w	r2, r3, #15
 80054aa:	4613      	mov	r3, r2
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	4413      	add	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	4413      	add	r3, r2
 80054ba:	3304      	adds	r3, #4
 80054bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80054d0:	883b      	ldrh	r3, [r7, #0]
 80054d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	78ba      	ldrb	r2, [r7, #2]
 80054de:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	785b      	ldrb	r3, [r3, #1]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d004      	beq.n	80054f2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80054f2:	78bb      	ldrb	r3, [r7, #2]
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d102      	bne.n	80054fe <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_PCD_EP_Open+0xae>
 8005508:	2302      	movs	r3, #2
 800550a:	e00e      	b.n	800552a <HAL_PCD_EP_Open+0xcc>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68f9      	ldr	r1, [r7, #12]
 800551a:	4618      	mov	r0, r3
 800551c:	f002 fcc4 	bl	8007ea8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005528:	7afb      	ldrb	r3, [r7, #11]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	460b      	mov	r3, r1
 800553c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800553e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005542:	2b00      	cmp	r3, #0
 8005544:	da0f      	bge.n	8005566 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	f003 020f 	and.w	r2, r3, #15
 800554c:	4613      	mov	r3, r2
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	3310      	adds	r3, #16
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	4413      	add	r3, r2
 800555a:	3304      	adds	r3, #4
 800555c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	705a      	strb	r2, [r3, #1]
 8005564:	e00f      	b.n	8005586 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005566:	78fb      	ldrb	r3, [r7, #3]
 8005568:	f003 020f 	and.w	r2, r3, #15
 800556c:	4613      	mov	r3, r2
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	4413      	add	r3, r2
 800557c:	3304      	adds	r3, #4
 800557e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	f003 030f 	and.w	r3, r3, #15
 800558c:	b2da      	uxtb	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_PCD_EP_Close+0x6e>
 800559c:	2302      	movs	r3, #2
 800559e:	e00e      	b.n	80055be <HAL_PCD_EP_Close+0x8c>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68f9      	ldr	r1, [r7, #12]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f002 fd02 	bl	8007fb8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b086      	sub	sp, #24
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
 80055d2:	460b      	mov	r3, r1
 80055d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055d6:	7afb      	ldrb	r3, [r7, #11]
 80055d8:	f003 020f 	and.w	r2, r3, #15
 80055dc:	4613      	mov	r3, r2
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	4413      	add	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	3304      	adds	r3, #4
 80055ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	2200      	movs	r2, #0
 8005600:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2200      	movs	r2, #0
 8005606:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005608:	7afb      	ldrb	r3, [r7, #11]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	b2da      	uxtb	r2, r3
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	799b      	ldrb	r3, [r3, #6]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d102      	bne.n	8005622 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	799b      	ldrb	r3, [r3, #6]
 800562a:	461a      	mov	r2, r3
 800562c:	6979      	ldr	r1, [r7, #20]
 800562e:	f002 fd9f 	bl	8008170 <USB_EPStartXfer>

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	f003 020f 	and.w	r2, r3, #15
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	4413      	add	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800565e:	681b      	ldr	r3, [r3, #0]
}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	607a      	str	r2, [r7, #4]
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	460b      	mov	r3, r1
 800567a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800567c:	7afb      	ldrb	r3, [r7, #11]
 800567e:	f003 020f 	and.w	r2, r3, #15
 8005682:	4613      	mov	r3, r2
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	3310      	adds	r3, #16
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	3304      	adds	r3, #4
 8005692:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2200      	movs	r2, #0
 80056a4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2201      	movs	r2, #1
 80056aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056ac:	7afb      	ldrb	r3, [r7, #11]
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	799b      	ldrb	r3, [r3, #6]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d102      	bne.n	80056c6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	799b      	ldrb	r3, [r3, #6]
 80056ce:	461a      	mov	r2, r3
 80056d0:	6979      	ldr	r1, [r7, #20]
 80056d2:	f002 fd4d 	bl	8008170 <USB_EPStartXfer>

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	7912      	ldrb	r2, [r2, #4]
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d901      	bls.n	80056fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e04f      	b.n	800579e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005702:	2b00      	cmp	r3, #0
 8005704:	da0f      	bge.n	8005726 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	f003 020f 	and.w	r2, r3, #15
 800570c:	4613      	mov	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	3310      	adds	r3, #16
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	4413      	add	r3, r2
 800571a:	3304      	adds	r3, #4
 800571c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	705a      	strb	r2, [r3, #1]
 8005724:	e00d      	b.n	8005742 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005726:	78fa      	ldrb	r2, [r7, #3]
 8005728:	4613      	mov	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	4413      	add	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	4413      	add	r3, r2
 8005738:	3304      	adds	r3, #4
 800573a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	b2da      	uxtb	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_PCD_EP_SetStall+0x82>
 800575e:	2302      	movs	r3, #2
 8005760:	e01d      	b.n	800579e <HAL_PCD_EP_SetStall+0xbe>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68f9      	ldr	r1, [r7, #12]
 8005770:	4618      	mov	r0, r3
 8005772:	f003 f8db 	bl	800892c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005776:	78fb      	ldrb	r3, [r7, #3]
 8005778:	f003 030f 	and.w	r3, r3, #15
 800577c:	2b00      	cmp	r3, #0
 800577e:	d109      	bne.n	8005794 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6818      	ldr	r0, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	7999      	ldrb	r1, [r3, #6]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800578e:	461a      	mov	r2, r3
 8005790:	f003 facc 	bl	8008d2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	460b      	mov	r3, r1
 80057b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80057b2:	78fb      	ldrb	r3, [r7, #3]
 80057b4:	f003 030f 	and.w	r3, r3, #15
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	7912      	ldrb	r2, [r2, #4]
 80057bc:	4293      	cmp	r3, r2
 80057be:	d901      	bls.n	80057c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e042      	b.n	800584a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80057c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	da0f      	bge.n	80057ec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057cc:	78fb      	ldrb	r3, [r7, #3]
 80057ce:	f003 020f 	and.w	r2, r3, #15
 80057d2:	4613      	mov	r3, r2
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	3310      	adds	r3, #16
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	4413      	add	r3, r2
 80057e0:	3304      	adds	r3, #4
 80057e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	705a      	strb	r2, [r3, #1]
 80057ea:	e00f      	b.n	800580c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	f003 020f 	and.w	r2, r3, #15
 80057f2:	4613      	mov	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	4413      	add	r3, r2
 8005802:	3304      	adds	r3, #4
 8005804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	f003 030f 	and.w	r3, r3, #15
 8005818:	b2da      	uxtb	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_PCD_EP_ClrStall+0x86>
 8005828:	2302      	movs	r3, #2
 800582a:	e00e      	b.n	800584a <HAL_PCD_EP_ClrStall+0xa4>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68f9      	ldr	r1, [r7, #12]
 800583a:	4618      	mov	r0, r3
 800583c:	f003 f8e4 	bl	8008a08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	460b      	mov	r3, r1
 800585c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800585e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005862:	2b00      	cmp	r3, #0
 8005864:	da0c      	bge.n	8005880 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	f003 020f 	and.w	r2, r3, #15
 800586c:	4613      	mov	r3, r2
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	4413      	add	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	3310      	adds	r3, #16
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	4413      	add	r3, r2
 800587a:	3304      	adds	r3, #4
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	e00c      	b.n	800589a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	f003 020f 	and.w	r2, r3, #15
 8005886:	4613      	mov	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	4413      	add	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	4413      	add	r3, r2
 8005896:	3304      	adds	r3, #4
 8005898:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68f9      	ldr	r1, [r7, #12]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f002 ff03 	bl	80086ac <USB_EPStopXfer>
 80058a6:	4603      	mov	r3, r0
 80058a8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80058aa:	7afb      	ldrb	r3, [r7, #11]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08a      	sub	sp, #40	@ 0x28
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	4613      	mov	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	3310      	adds	r3, #16
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	4413      	add	r3, r2
 80058d8:	3304      	adds	r3, #4
 80058da:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	695a      	ldr	r2, [r3, #20]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d901      	bls.n	80058ec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e06b      	b.n	80059c4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d902      	bls.n	8005908 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	3303      	adds	r3, #3
 800590c:	089b      	lsrs	r3, r3, #2
 800590e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005910:	e02a      	b.n	8005968 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	429a      	cmp	r2, r3
 8005926:	d902      	bls.n	800592e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	3303      	adds	r3, #3
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	68d9      	ldr	r1, [r3, #12]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	b2da      	uxtb	r2, r3
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	4603      	mov	r3, r0
 800594a:	6978      	ldr	r0, [r7, #20]
 800594c:	f002 ff58 	bl	8008800 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	441a      	add	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	441a      	add	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	429a      	cmp	r2, r3
 800597c:	d809      	bhi.n	8005992 <PCD_WriteEmptyTxFifo+0xde>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	695a      	ldr	r2, [r3, #20]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005986:	429a      	cmp	r2, r3
 8005988:	d203      	bcs.n	8005992 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1bf      	bne.n	8005912 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	429a      	cmp	r2, r3
 800599c:	d811      	bhi.n	80059c2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	f003 030f 	and.w	r3, r3, #15
 80059a4:	2201      	movs	r2, #1
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	43db      	mvns	r3, r3
 80059b8:	6939      	ldr	r1, [r7, #16]
 80059ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059be:	4013      	ands	r3, r2
 80059c0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3720      	adds	r7, #32
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	333c      	adds	r3, #60	@ 0x3c
 80059e4:	3304      	adds	r3, #4
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	799b      	ldrb	r3, [r3, #6]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d17b      	bne.n	8005afa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d015      	beq.n	8005a38 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	4a61      	ldr	r2, [pc, #388]	@ (8005b94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	f240 80b9 	bls.w	8005b88 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80b3 	beq.w	8005b88 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a34:	6093      	str	r3, [r2, #8]
 8005a36:	e0a7      	b.n	8005b88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d009      	beq.n	8005a56 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a4e:	461a      	mov	r2, r3
 8005a50:	2320      	movs	r3, #32
 8005a52:	6093      	str	r3, [r2, #8]
 8005a54:	e098      	b.n	8005b88 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f040 8093 	bne.w	8005b88 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	4a4b      	ldr	r2, [pc, #300]	@ (8005b94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d90f      	bls.n	8005a8a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a80:	461a      	mov	r2, r3
 8005a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a86:	6093      	str	r3, [r2, #8]
 8005a88:	e07e      	b.n	8005b88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a1a      	ldr	r2, [r3, #32]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	0159      	lsls	r1, r3, #5
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	440b      	add	r3, r1
 8005aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab6:	1ad2      	subs	r2, r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d114      	bne.n	8005aec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d109      	bne.n	8005ade <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	f003 f928 	bl	8008d2c <USB_EP0_OutStart>
 8005adc:	e006      	b.n	8005aec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	441a      	add	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	4619      	mov	r1, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f005 fc38 	bl	800b368 <HAL_PCD_DataOutStageCallback>
 8005af8:	e046      	b.n	8005b88 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	4a26      	ldr	r2, [pc, #152]	@ (8005b98 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d124      	bne.n	8005b4c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b18:	461a      	mov	r2, r3
 8005b1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b1e:	6093      	str	r3, [r2, #8]
 8005b20:	e032      	b.n	8005b88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f003 0320 	and.w	r3, r3, #32
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d008      	beq.n	8005b3e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2320      	movs	r3, #32
 8005b3c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	4619      	mov	r1, r3
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f005 fc0f 	bl	800b368 <HAL_PCD_DataOutStageCallback>
 8005b4a:	e01d      	b.n	8005b88 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d114      	bne.n	8005b7c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	4613      	mov	r3, r2
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	440b      	add	r3, r1
 8005b60:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d108      	bne.n	8005b7c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6818      	ldr	r0, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005b74:	461a      	mov	r2, r3
 8005b76:	2100      	movs	r1, #0
 8005b78:	f003 f8d8 	bl	8008d2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	4619      	mov	r1, r3
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f005 fbf0 	bl	800b368 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3720      	adds	r7, #32
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	4f54300a 	.word	0x4f54300a
 8005b98:	4f54310a 	.word	0x4f54310a

08005b9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	333c      	adds	r3, #60	@ 0x3c
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4a15      	ldr	r2, [pc, #84]	@ (8005c24 <PCD_EP_OutSetupPacket_int+0x88>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d90e      	bls.n	8005bf0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d009      	beq.n	8005bf0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be8:	461a      	mov	r2, r3
 8005bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f005 fba7 	bl	800b344 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8005c24 <PCD_EP_OutSetupPacket_int+0x88>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d90c      	bls.n	8005c18 <PCD_EP_OutSetupPacket_int+0x7c>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	799b      	ldrb	r3, [r3, #6]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d108      	bne.n	8005c18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c10:	461a      	mov	r2, r3
 8005c12:	2101      	movs	r1, #1
 8005c14:	f003 f88a 	bl	8008d2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	4f54300a 	.word	0x4f54300a

08005c28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	70fb      	strb	r3, [r7, #3]
 8005c34:	4613      	mov	r3, r2
 8005c36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d107      	bne.n	8005c56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005c46:	883b      	ldrh	r3, [r7, #0]
 8005c48:	0419      	lsls	r1, r3, #16
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c54:	e028      	b.n	8005ca8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5c:	0c1b      	lsrs	r3, r3, #16
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	4413      	add	r3, r2
 8005c62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c64:	2300      	movs	r3, #0
 8005c66:	73fb      	strb	r3, [r7, #15]
 8005c68:	e00d      	b.n	8005c86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	3340      	adds	r3, #64	@ 0x40
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	0c1b      	lsrs	r3, r3, #16
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	3301      	adds	r3, #1
 8005c84:	73fb      	strb	r3, [r7, #15]
 8005c86:	7bfa      	ldrb	r2, [r7, #15]
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d3ec      	bcc.n	8005c6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005c90:	883b      	ldrh	r3, [r7, #0]
 8005c92:	0418      	lsls	r0, r3, #16
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6819      	ldr	r1, [r3, #0]
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	4302      	orrs	r2, r0
 8005ca0:	3340      	adds	r3, #64	@ 0x40
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	440b      	add	r3, r1
 8005ca6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	887a      	ldrh	r2, [r7, #2]
 8005cc8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e267      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d075      	beq.n	8005dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d0e:	4b88      	ldr	r3, [pc, #544]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 030c 	and.w	r3, r3, #12
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d00c      	beq.n	8005d34 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d1a:	4b85      	ldr	r3, [pc, #532]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d112      	bne.n	8005d4c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d26:	4b82      	ldr	r3, [pc, #520]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d32:	d10b      	bne.n	8005d4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d34:	4b7e      	ldr	r3, [pc, #504]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d05b      	beq.n	8005df8 <HAL_RCC_OscConfig+0x108>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d157      	bne.n	8005df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e242      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d54:	d106      	bne.n	8005d64 <HAL_RCC_OscConfig+0x74>
 8005d56:	4b76      	ldr	r3, [pc, #472]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a75      	ldr	r2, [pc, #468]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	e01d      	b.n	8005da0 <HAL_RCC_OscConfig+0xb0>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d6c:	d10c      	bne.n	8005d88 <HAL_RCC_OscConfig+0x98>
 8005d6e:	4b70      	ldr	r3, [pc, #448]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a6f      	ldr	r2, [pc, #444]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	4b6d      	ldr	r3, [pc, #436]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a6c      	ldr	r2, [pc, #432]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	e00b      	b.n	8005da0 <HAL_RCC_OscConfig+0xb0>
 8005d88:	4b69      	ldr	r3, [pc, #420]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a68      	ldr	r2, [pc, #416]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	4b66      	ldr	r3, [pc, #408]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a65      	ldr	r2, [pc, #404]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d013      	beq.n	8005dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da8:	f7fc fde6 	bl	8002978 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005db0:	f7fc fde2 	bl	8002978 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b64      	cmp	r3, #100	@ 0x64
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e207      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0f0      	beq.n	8005db0 <HAL_RCC_OscConfig+0xc0>
 8005dce:	e014      	b.n	8005dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd0:	f7fc fdd2 	bl	8002978 <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dd6:	e008      	b.n	8005dea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dd8:	f7fc fdce 	bl	8002978 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b64      	cmp	r3, #100	@ 0x64
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e1f3      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dea:	4b51      	ldr	r3, [pc, #324]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1f0      	bne.n	8005dd8 <HAL_RCC_OscConfig+0xe8>
 8005df6:	e000      	b.n	8005dfa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d063      	beq.n	8005ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e06:	4b4a      	ldr	r3, [pc, #296]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e12:	4b47      	ldr	r3, [pc, #284]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d11c      	bne.n	8005e58 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e1e:	4b44      	ldr	r3, [pc, #272]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d116      	bne.n	8005e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e2a:	4b41      	ldr	r3, [pc, #260]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_RCC_OscConfig+0x152>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d001      	beq.n	8005e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e1c7      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e42:	4b3b      	ldr	r3, [pc, #236]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	4937      	ldr	r1, [pc, #220]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e56:	e03a      	b.n	8005ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d020      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e60:	4b34      	ldr	r3, [pc, #208]	@ (8005f34 <HAL_RCC_OscConfig+0x244>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e66:	f7fc fd87 	bl	8002978 <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e6c:	e008      	b.n	8005e80 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e6e:	f7fc fd83 	bl	8002978 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e1a8      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e80:	4b2b      	ldr	r3, [pc, #172]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0f0      	beq.n	8005e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e8c:	4b28      	ldr	r3, [pc, #160]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	4925      	ldr	r1, [pc, #148]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	600b      	str	r3, [r1, #0]
 8005ea0:	e015      	b.n	8005ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ea2:	4b24      	ldr	r3, [pc, #144]	@ (8005f34 <HAL_RCC_OscConfig+0x244>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea8:	f7fc fd66 	bl	8002978 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eb0:	f7fc fd62 	bl	8002978 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e187      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f0      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d036      	beq.n	8005f48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d016      	beq.n	8005f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ee2:	4b15      	ldr	r3, [pc, #84]	@ (8005f38 <HAL_RCC_OscConfig+0x248>)
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee8:	f7fc fd46 	bl	8002978 <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ef0:	f7fc fd42 	bl	8002978 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e167      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f02:	4b0b      	ldr	r3, [pc, #44]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x200>
 8005f0e:	e01b      	b.n	8005f48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f10:	4b09      	ldr	r3, [pc, #36]	@ (8005f38 <HAL_RCC_OscConfig+0x248>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f16:	f7fc fd2f 	bl	8002978 <HAL_GetTick>
 8005f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f1c:	e00e      	b.n	8005f3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f1e:	f7fc fd2b 	bl	8002978 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d907      	bls.n	8005f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e150      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
 8005f30:	40023800 	.word	0x40023800
 8005f34:	42470000 	.word	0x42470000
 8005f38:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f3c:	4b88      	ldr	r3, [pc, #544]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1ea      	bne.n	8005f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 8097 	beq.w	8006084 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f56:	2300      	movs	r3, #0
 8005f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f5a:	4b81      	ldr	r3, [pc, #516]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10f      	bne.n	8005f86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	4b7d      	ldr	r3, [pc, #500]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6e:	4a7c      	ldr	r2, [pc, #496]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f76:	4b7a      	ldr	r3, [pc, #488]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f7e:	60bb      	str	r3, [r7, #8]
 8005f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f82:	2301      	movs	r3, #1
 8005f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f86:	4b77      	ldr	r3, [pc, #476]	@ (8006164 <HAL_RCC_OscConfig+0x474>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d118      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f92:	4b74      	ldr	r3, [pc, #464]	@ (8006164 <HAL_RCC_OscConfig+0x474>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a73      	ldr	r2, [pc, #460]	@ (8006164 <HAL_RCC_OscConfig+0x474>)
 8005f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f9e:	f7fc fceb 	bl	8002978 <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa6:	f7fc fce7 	bl	8002978 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e10c      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb8:	4b6a      	ldr	r3, [pc, #424]	@ (8006164 <HAL_RCC_OscConfig+0x474>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0f0      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d106      	bne.n	8005fda <HAL_RCC_OscConfig+0x2ea>
 8005fcc:	4b64      	ldr	r3, [pc, #400]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd0:	4a63      	ldr	r2, [pc, #396]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005fd2:	f043 0301 	orr.w	r3, r3, #1
 8005fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fd8:	e01c      	b.n	8006014 <HAL_RCC_OscConfig+0x324>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2b05      	cmp	r3, #5
 8005fe0:	d10c      	bne.n	8005ffc <HAL_RCC_OscConfig+0x30c>
 8005fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe6:	4a5e      	ldr	r2, [pc, #376]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005fe8:	f043 0304 	orr.w	r3, r3, #4
 8005fec:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fee:	4b5c      	ldr	r3, [pc, #368]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff2:	4a5b      	ldr	r2, [pc, #364]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005ff4:	f043 0301 	orr.w	r3, r3, #1
 8005ff8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ffa:	e00b      	b.n	8006014 <HAL_RCC_OscConfig+0x324>
 8005ffc:	4b58      	ldr	r3, [pc, #352]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006000:	4a57      	ldr	r2, [pc, #348]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8006002:	f023 0301 	bic.w	r3, r3, #1
 8006006:	6713      	str	r3, [r2, #112]	@ 0x70
 8006008:	4b55      	ldr	r3, [pc, #340]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 800600a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800600c:	4a54      	ldr	r2, [pc, #336]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 800600e:	f023 0304 	bic.w	r3, r3, #4
 8006012:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d015      	beq.n	8006048 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800601c:	f7fc fcac 	bl	8002978 <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006022:	e00a      	b.n	800603a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006024:	f7fc fca8 	bl	8002978 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006032:	4293      	cmp	r3, r2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e0cb      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800603a:	4b49      	ldr	r3, [pc, #292]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 800603c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0ee      	beq.n	8006024 <HAL_RCC_OscConfig+0x334>
 8006046:	e014      	b.n	8006072 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006048:	f7fc fc96 	bl	8002978 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800604e:	e00a      	b.n	8006066 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006050:	f7fc fc92 	bl	8002978 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800605e:	4293      	cmp	r3, r2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e0b5      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006066:	4b3e      	ldr	r3, [pc, #248]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8006068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1ee      	bne.n	8006050 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d105      	bne.n	8006084 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006078:	4b39      	ldr	r3, [pc, #228]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 800607a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607c:	4a38      	ldr	r2, [pc, #224]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 800607e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006082:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 80a1 	beq.w	80061d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800608e:	4b34      	ldr	r3, [pc, #208]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 030c 	and.w	r3, r3, #12
 8006096:	2b08      	cmp	r3, #8
 8006098:	d05c      	beq.n	8006154 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d141      	bne.n	8006126 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060a2:	4b31      	ldr	r3, [pc, #196]	@ (8006168 <HAL_RCC_OscConfig+0x478>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a8:	f7fc fc66 	bl	8002978 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b0:	f7fc fc62 	bl	8002978 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e087      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c2:	4b27      	ldr	r3, [pc, #156]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f0      	bne.n	80060b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69da      	ldr	r2, [r3, #28]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	431a      	orrs	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060dc:	019b      	lsls	r3, r3, #6
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e4:	085b      	lsrs	r3, r3, #1
 80060e6:	3b01      	subs	r3, #1
 80060e8:	041b      	lsls	r3, r3, #16
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f0:	061b      	lsls	r3, r3, #24
 80060f2:	491b      	ldr	r1, [pc, #108]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006168 <HAL_RCC_OscConfig+0x478>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fe:	f7fc fc3b 	bl	8002978 <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006104:	e008      	b.n	8006118 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006106:	f7fc fc37 	bl	8002978 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d901      	bls.n	8006118 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e05c      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006118:	4b11      	ldr	r3, [pc, #68]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d0f0      	beq.n	8006106 <HAL_RCC_OscConfig+0x416>
 8006124:	e054      	b.n	80061d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006126:	4b10      	ldr	r3, [pc, #64]	@ (8006168 <HAL_RCC_OscConfig+0x478>)
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800612c:	f7fc fc24 	bl	8002978 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006134:	f7fc fc20 	bl	8002978 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e045      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006146:	4b06      	ldr	r3, [pc, #24]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f0      	bne.n	8006134 <HAL_RCC_OscConfig+0x444>
 8006152:	e03d      	b.n	80061d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d107      	bne.n	800616c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e038      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
 8006160:	40023800 	.word	0x40023800
 8006164:	40007000 	.word	0x40007000
 8006168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800616c:	4b1b      	ldr	r3, [pc, #108]	@ (80061dc <HAL_RCC_OscConfig+0x4ec>)
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d028      	beq.n	80061cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006184:	429a      	cmp	r2, r3
 8006186:	d121      	bne.n	80061cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006192:	429a      	cmp	r2, r3
 8006194:	d11a      	bne.n	80061cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800619c:	4013      	ands	r3, r2
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d111      	bne.n	80061cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b2:	085b      	lsrs	r3, r3, #1
 80061b4:	3b01      	subs	r3, #1
 80061b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d107      	bne.n	80061cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d001      	beq.n	80061d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	40023800 	.word	0x40023800

080061e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e0cc      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061f4:	4b68      	ldr	r3, [pc, #416]	@ (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d90c      	bls.n	800621c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006202:	4b65      	ldr	r3, [pc, #404]	@ (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800620a:	4b63      	ldr	r3, [pc, #396]	@ (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d001      	beq.n	800621c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e0b8      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d020      	beq.n	800626a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b00      	cmp	r3, #0
 8006232:	d005      	beq.n	8006240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006234:	4b59      	ldr	r3, [pc, #356]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4a58      	ldr	r2, [pc, #352]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 800623a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800623e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800624c:	4b53      	ldr	r3, [pc, #332]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	4a52      	ldr	r2, [pc, #328]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006252:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006258:	4b50      	ldr	r3, [pc, #320]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	494d      	ldr	r1, [pc, #308]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	4313      	orrs	r3, r2
 8006268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d044      	beq.n	8006300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d107      	bne.n	800628e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627e:	4b47      	ldr	r3, [pc, #284]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d119      	bne.n	80062be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e07f      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d003      	beq.n	800629e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800629a:	2b03      	cmp	r3, #3
 800629c:	d107      	bne.n	80062ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800629e:	4b3f      	ldr	r3, [pc, #252]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d109      	bne.n	80062be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e06f      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ae:	4b3b      	ldr	r3, [pc, #236]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e067      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062be:	4b37      	ldr	r3, [pc, #220]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f023 0203 	bic.w	r2, r3, #3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	4934      	ldr	r1, [pc, #208]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062d0:	f7fc fb52 	bl	8002978 <HAL_GetTick>
 80062d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062d6:	e00a      	b.n	80062ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062d8:	f7fc fb4e 	bl	8002978 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e04f      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ee:	4b2b      	ldr	r3, [pc, #172]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 020c 	and.w	r2, r3, #12
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d1eb      	bne.n	80062d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006300:	4b25      	ldr	r3, [pc, #148]	@ (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d20c      	bcs.n	8006328 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800630e:	4b22      	ldr	r3, [pc, #136]	@ (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006316:	4b20      	ldr	r3, [pc, #128]	@ (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d001      	beq.n	8006328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e032      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006334:	4b19      	ldr	r3, [pc, #100]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	4916      	ldr	r1, [pc, #88]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006342:	4313      	orrs	r3, r2
 8006344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d009      	beq.n	8006366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006352:	4b12      	ldr	r3, [pc, #72]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	490e      	ldr	r1, [pc, #56]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006362:	4313      	orrs	r3, r2
 8006364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006366:	f000 f821 	bl	80063ac <HAL_RCC_GetSysClockFreq>
 800636a:	4602      	mov	r2, r0
 800636c:	4b0b      	ldr	r3, [pc, #44]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	091b      	lsrs	r3, r3, #4
 8006372:	f003 030f 	and.w	r3, r3, #15
 8006376:	490a      	ldr	r1, [pc, #40]	@ (80063a0 <HAL_RCC_ClockConfig+0x1c0>)
 8006378:	5ccb      	ldrb	r3, [r1, r3]
 800637a:	fa22 f303 	lsr.w	r3, r2, r3
 800637e:	4a09      	ldr	r2, [pc, #36]	@ (80063a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006382:	4b09      	ldr	r3, [pc, #36]	@ (80063a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4618      	mov	r0, r3
 8006388:	f7fc fab2 	bl	80028f0 <HAL_InitTick>

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	40023c00 	.word	0x40023c00
 800639c:	40023800 	.word	0x40023800
 80063a0:	0800e73c 	.word	0x0800e73c
 80063a4:	20000000 	.word	0x20000000
 80063a8:	20000004 	.word	0x20000004

080063ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063b0:	b090      	sub	sp, #64	@ 0x40
 80063b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063c4:	4b59      	ldr	r3, [pc, #356]	@ (800652c <HAL_RCC_GetSysClockFreq+0x180>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 030c 	and.w	r3, r3, #12
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d00d      	beq.n	80063ec <HAL_RCC_GetSysClockFreq+0x40>
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	f200 80a1 	bhi.w	8006518 <HAL_RCC_GetSysClockFreq+0x16c>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_RCC_GetSysClockFreq+0x34>
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d003      	beq.n	80063e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80063de:	e09b      	b.n	8006518 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063e0:	4b53      	ldr	r3, [pc, #332]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x184>)
 80063e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80063e4:	e09b      	b.n	800651e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063e6:	4b53      	ldr	r3, [pc, #332]	@ (8006534 <HAL_RCC_GetSysClockFreq+0x188>)
 80063e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80063ea:	e098      	b.n	800651e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063ec:	4b4f      	ldr	r3, [pc, #316]	@ (800652c <HAL_RCC_GetSysClockFreq+0x180>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063f6:	4b4d      	ldr	r3, [pc, #308]	@ (800652c <HAL_RCC_GetSysClockFreq+0x180>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d028      	beq.n	8006454 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006402:	4b4a      	ldr	r3, [pc, #296]	@ (800652c <HAL_RCC_GetSysClockFreq+0x180>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	099b      	lsrs	r3, r3, #6
 8006408:	2200      	movs	r2, #0
 800640a:	623b      	str	r3, [r7, #32]
 800640c:	627a      	str	r2, [r7, #36]	@ 0x24
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006414:	2100      	movs	r1, #0
 8006416:	4b47      	ldr	r3, [pc, #284]	@ (8006534 <HAL_RCC_GetSysClockFreq+0x188>)
 8006418:	fb03 f201 	mul.w	r2, r3, r1
 800641c:	2300      	movs	r3, #0
 800641e:	fb00 f303 	mul.w	r3, r0, r3
 8006422:	4413      	add	r3, r2
 8006424:	4a43      	ldr	r2, [pc, #268]	@ (8006534 <HAL_RCC_GetSysClockFreq+0x188>)
 8006426:	fba0 1202 	umull	r1, r2, r0, r2
 800642a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800642c:	460a      	mov	r2, r1
 800642e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006432:	4413      	add	r3, r2
 8006434:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006438:	2200      	movs	r2, #0
 800643a:	61bb      	str	r3, [r7, #24]
 800643c:	61fa      	str	r2, [r7, #28]
 800643e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006442:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006446:	f7fa fbb7 	bl	8000bb8 <__aeabi_uldivmod>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4613      	mov	r3, r2
 8006450:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006452:	e053      	b.n	80064fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006454:	4b35      	ldr	r3, [pc, #212]	@ (800652c <HAL_RCC_GetSysClockFreq+0x180>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	099b      	lsrs	r3, r3, #6
 800645a:	2200      	movs	r2, #0
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	617a      	str	r2, [r7, #20]
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006466:	f04f 0b00 	mov.w	fp, #0
 800646a:	4652      	mov	r2, sl
 800646c:	465b      	mov	r3, fp
 800646e:	f04f 0000 	mov.w	r0, #0
 8006472:	f04f 0100 	mov.w	r1, #0
 8006476:	0159      	lsls	r1, r3, #5
 8006478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800647c:	0150      	lsls	r0, r2, #5
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	ebb2 080a 	subs.w	r8, r2, sl
 8006486:	eb63 090b 	sbc.w	r9, r3, fp
 800648a:	f04f 0200 	mov.w	r2, #0
 800648e:	f04f 0300 	mov.w	r3, #0
 8006492:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006496:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800649a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800649e:	ebb2 0408 	subs.w	r4, r2, r8
 80064a2:	eb63 0509 	sbc.w	r5, r3, r9
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	f04f 0300 	mov.w	r3, #0
 80064ae:	00eb      	lsls	r3, r5, #3
 80064b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064b4:	00e2      	lsls	r2, r4, #3
 80064b6:	4614      	mov	r4, r2
 80064b8:	461d      	mov	r5, r3
 80064ba:	eb14 030a 	adds.w	r3, r4, sl
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	eb45 030b 	adc.w	r3, r5, fp
 80064c4:	607b      	str	r3, [r7, #4]
 80064c6:	f04f 0200 	mov.w	r2, #0
 80064ca:	f04f 0300 	mov.w	r3, #0
 80064ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064d2:	4629      	mov	r1, r5
 80064d4:	028b      	lsls	r3, r1, #10
 80064d6:	4621      	mov	r1, r4
 80064d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064dc:	4621      	mov	r1, r4
 80064de:	028a      	lsls	r2, r1, #10
 80064e0:	4610      	mov	r0, r2
 80064e2:	4619      	mov	r1, r3
 80064e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e6:	2200      	movs	r2, #0
 80064e8:	60bb      	str	r3, [r7, #8]
 80064ea:	60fa      	str	r2, [r7, #12]
 80064ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064f0:	f7fa fb62 	bl	8000bb8 <__aeabi_uldivmod>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	4613      	mov	r3, r2
 80064fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80064fc:	4b0b      	ldr	r3, [pc, #44]	@ (800652c <HAL_RCC_GetSysClockFreq+0x180>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	0c1b      	lsrs	r3, r3, #16
 8006502:	f003 0303 	and.w	r3, r3, #3
 8006506:	3301      	adds	r3, #1
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800650c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800650e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006510:	fbb2 f3f3 	udiv	r3, r2, r3
 8006514:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006516:	e002      	b.n	800651e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006518:	4b05      	ldr	r3, [pc, #20]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x184>)
 800651a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800651c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800651e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006520:	4618      	mov	r0, r3
 8006522:	3740      	adds	r7, #64	@ 0x40
 8006524:	46bd      	mov	sp, r7
 8006526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800652a:	bf00      	nop
 800652c:	40023800 	.word	0x40023800
 8006530:	00f42400 	.word	0x00f42400
 8006534:	017d7840 	.word	0x017d7840

08006538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006538:	b480      	push	{r7}
 800653a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800653c:	4b03      	ldr	r3, [pc, #12]	@ (800654c <HAL_RCC_GetHCLKFreq+0x14>)
 800653e:	681b      	ldr	r3, [r3, #0]
}
 8006540:	4618      	mov	r0, r3
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	20000000 	.word	0x20000000

08006550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006554:	f7ff fff0 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 8006558:	4602      	mov	r2, r0
 800655a:	4b05      	ldr	r3, [pc, #20]	@ (8006570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	0a9b      	lsrs	r3, r3, #10
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	4903      	ldr	r1, [pc, #12]	@ (8006574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006566:	5ccb      	ldrb	r3, [r1, r3]
 8006568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800656c:	4618      	mov	r0, r3
 800656e:	bd80      	pop	{r7, pc}
 8006570:	40023800 	.word	0x40023800
 8006574:	0800e74c 	.word	0x0800e74c

08006578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800657c:	f7ff ffdc 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 8006580:	4602      	mov	r2, r0
 8006582:	4b05      	ldr	r3, [pc, #20]	@ (8006598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	0b5b      	lsrs	r3, r3, #13
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	4903      	ldr	r1, [pc, #12]	@ (800659c <HAL_RCC_GetPCLK2Freq+0x24>)
 800658e:	5ccb      	ldrb	r3, [r1, r3]
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006594:	4618      	mov	r0, r3
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40023800 	.word	0x40023800
 800659c:	0800e74c 	.word	0x0800e74c

080065a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e041      	b.n	8006636 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d106      	bne.n	80065cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7fb fd56 	bl	8002078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3304      	adds	r3, #4
 80065dc:	4619      	mov	r1, r3
 80065de:	4610      	mov	r0, r2
 80065e0:	f000 fab6 	bl	8006b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b082      	sub	sp, #8
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e041      	b.n	80066d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d106      	bne.n	800666a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f839 	bl	80066dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2202      	movs	r2, #2
 800666e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3304      	adds	r3, #4
 800667a:	4619      	mov	r1, r3
 800667c:	4610      	mov	r0, r2
 800667e:	f000 fa67 	bl	8006b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e097      	b.n	8006834 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b00      	cmp	r3, #0
 800670e:	d106      	bne.n	800671e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7fb fccf 	bl	80020bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2202      	movs	r2, #2
 8006722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6812      	ldr	r2, [r2, #0]
 8006730:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006734:	f023 0307 	bic.w	r3, r3, #7
 8006738:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3304      	adds	r3, #4
 8006742:	4619      	mov	r1, r3
 8006744:	4610      	mov	r0, r2
 8006746:	f000 fa03 	bl	8006b50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006772:	f023 0303 	bic.w	r3, r3, #3
 8006776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	021b      	lsls	r3, r3, #8
 8006782:	4313      	orrs	r3, r2
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4313      	orrs	r3, r2
 8006788:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006790:	f023 030c 	bic.w	r3, r3, #12
 8006794:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800679c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	021b      	lsls	r3, r3, #8
 80067ac:	4313      	orrs	r3, r2
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	011a      	lsls	r2, r3, #4
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	031b      	lsls	r3, r3, #12
 80067c0:	4313      	orrs	r3, r2
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80067ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80067d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	011b      	lsls	r3, r3, #4
 80067e2:	4313      	orrs	r3, r2
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006852:	2b01      	cmp	r3, #1
 8006854:	d101      	bne.n	800685a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006856:	2302      	movs	r3, #2
 8006858:	e0ae      	b.n	80069b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b0c      	cmp	r3, #12
 8006866:	f200 809f 	bhi.w	80069a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800686a:	a201      	add	r2, pc, #4	@ (adr r2, 8006870 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800686c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006870:	080068a5 	.word	0x080068a5
 8006874:	080069a9 	.word	0x080069a9
 8006878:	080069a9 	.word	0x080069a9
 800687c:	080069a9 	.word	0x080069a9
 8006880:	080068e5 	.word	0x080068e5
 8006884:	080069a9 	.word	0x080069a9
 8006888:	080069a9 	.word	0x080069a9
 800688c:	080069a9 	.word	0x080069a9
 8006890:	08006927 	.word	0x08006927
 8006894:	080069a9 	.word	0x080069a9
 8006898:	080069a9 	.word	0x080069a9
 800689c:	080069a9 	.word	0x080069a9
 80068a0:	08006967 	.word	0x08006967
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 f9dc 	bl	8006c68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0208 	orr.w	r2, r2, #8
 80068be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699a      	ldr	r2, [r3, #24]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0204 	bic.w	r2, r2, #4
 80068ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6999      	ldr	r1, [r3, #24]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	691a      	ldr	r2, [r3, #16]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	619a      	str	r2, [r3, #24]
      break;
 80068e2:	e064      	b.n	80069ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fa22 	bl	8006d34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	699a      	ldr	r2, [r3, #24]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699a      	ldr	r2, [r3, #24]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800690e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6999      	ldr	r1, [r3, #24]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	021a      	lsls	r2, r3, #8
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	430a      	orrs	r2, r1
 8006922:	619a      	str	r2, [r3, #24]
      break;
 8006924:	e043      	b.n	80069ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fa6d 	bl	8006e0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69da      	ldr	r2, [r3, #28]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f042 0208 	orr.w	r2, r2, #8
 8006940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69da      	ldr	r2, [r3, #28]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0204 	bic.w	r2, r2, #4
 8006950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69d9      	ldr	r1, [r3, #28]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	691a      	ldr	r2, [r3, #16]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	61da      	str	r2, [r3, #28]
      break;
 8006964:	e023      	b.n	80069ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68b9      	ldr	r1, [r7, #8]
 800696c:	4618      	mov	r0, r3
 800696e:	f000 fab7 	bl	8006ee0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69da      	ldr	r2, [r3, #28]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	69da      	ldr	r2, [r3, #28]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69d9      	ldr	r1, [r3, #28]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	021a      	lsls	r2, r3, #8
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	61da      	str	r2, [r3, #28]
      break;
 80069a6:	e002      	b.n	80069ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]
      break;
 80069ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d101      	bne.n	80069dc <HAL_TIM_ConfigClockSource+0x1c>
 80069d8:	2302      	movs	r3, #2
 80069da:	e0b4      	b.n	8006b46 <HAL_TIM_ConfigClockSource+0x186>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80069fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a14:	d03e      	beq.n	8006a94 <HAL_TIM_ConfigClockSource+0xd4>
 8006a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a1a:	f200 8087 	bhi.w	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a22:	f000 8086 	beq.w	8006b32 <HAL_TIM_ConfigClockSource+0x172>
 8006a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a2a:	d87f      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a2c:	2b70      	cmp	r3, #112	@ 0x70
 8006a2e:	d01a      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0xa6>
 8006a30:	2b70      	cmp	r3, #112	@ 0x70
 8006a32:	d87b      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a34:	2b60      	cmp	r3, #96	@ 0x60
 8006a36:	d050      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x11a>
 8006a38:	2b60      	cmp	r3, #96	@ 0x60
 8006a3a:	d877      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a3c:	2b50      	cmp	r3, #80	@ 0x50
 8006a3e:	d03c      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0xfa>
 8006a40:	2b50      	cmp	r3, #80	@ 0x50
 8006a42:	d873      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a44:	2b40      	cmp	r3, #64	@ 0x40
 8006a46:	d058      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x13a>
 8006a48:	2b40      	cmp	r3, #64	@ 0x40
 8006a4a:	d86f      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a4c:	2b30      	cmp	r3, #48	@ 0x30
 8006a4e:	d064      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0x15a>
 8006a50:	2b30      	cmp	r3, #48	@ 0x30
 8006a52:	d86b      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d060      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0x15a>
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d867      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d05c      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0x15a>
 8006a60:	2b10      	cmp	r3, #16
 8006a62:	d05a      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0x15a>
 8006a64:	e062      	b.n	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a76:	f000 fafd 	bl	8007074 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	609a      	str	r2, [r3, #8]
      break;
 8006a92:	e04f      	b.n	8006b34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006aa4:	f000 fae6 	bl	8007074 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689a      	ldr	r2, [r3, #8]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ab6:	609a      	str	r2, [r3, #8]
      break;
 8006ab8:	e03c      	b.n	8006b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f000 fa5a 	bl	8006f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2150      	movs	r1, #80	@ 0x50
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 fab3 	bl	800703e <TIM_ITRx_SetConfig>
      break;
 8006ad8:	e02c      	b.n	8006b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f000 fa79 	bl	8006fde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2160      	movs	r1, #96	@ 0x60
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 faa3 	bl	800703e <TIM_ITRx_SetConfig>
      break;
 8006af8:	e01c      	b.n	8006b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b06:	461a      	mov	r2, r3
 8006b08:	f000 fa3a 	bl	8006f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2140      	movs	r1, #64	@ 0x40
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 fa93 	bl	800703e <TIM_ITRx_SetConfig>
      break;
 8006b18:	e00c      	b.n	8006b34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4619      	mov	r1, r3
 8006b24:	4610      	mov	r0, r2
 8006b26:	f000 fa8a 	bl	800703e <TIM_ITRx_SetConfig>
      break;
 8006b2a:	e003      	b.n	8006b34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b30:	e000      	b.n	8006b34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
	...

08006b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a3a      	ldr	r2, [pc, #232]	@ (8006c4c <TIM_Base_SetConfig+0xfc>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d00f      	beq.n	8006b88 <TIM_Base_SetConfig+0x38>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b6e:	d00b      	beq.n	8006b88 <TIM_Base_SetConfig+0x38>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a37      	ldr	r2, [pc, #220]	@ (8006c50 <TIM_Base_SetConfig+0x100>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d007      	beq.n	8006b88 <TIM_Base_SetConfig+0x38>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a36      	ldr	r2, [pc, #216]	@ (8006c54 <TIM_Base_SetConfig+0x104>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d003      	beq.n	8006b88 <TIM_Base_SetConfig+0x38>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a35      	ldr	r2, [pc, #212]	@ (8006c58 <TIM_Base_SetConfig+0x108>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d108      	bne.n	8006b9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8006c4c <TIM_Base_SetConfig+0xfc>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d01b      	beq.n	8006bda <TIM_Base_SetConfig+0x8a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ba8:	d017      	beq.n	8006bda <TIM_Base_SetConfig+0x8a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a28      	ldr	r2, [pc, #160]	@ (8006c50 <TIM_Base_SetConfig+0x100>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d013      	beq.n	8006bda <TIM_Base_SetConfig+0x8a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a27      	ldr	r2, [pc, #156]	@ (8006c54 <TIM_Base_SetConfig+0x104>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00f      	beq.n	8006bda <TIM_Base_SetConfig+0x8a>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a26      	ldr	r2, [pc, #152]	@ (8006c58 <TIM_Base_SetConfig+0x108>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00b      	beq.n	8006bda <TIM_Base_SetConfig+0x8a>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a25      	ldr	r2, [pc, #148]	@ (8006c5c <TIM_Base_SetConfig+0x10c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d007      	beq.n	8006bda <TIM_Base_SetConfig+0x8a>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a24      	ldr	r2, [pc, #144]	@ (8006c60 <TIM_Base_SetConfig+0x110>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d003      	beq.n	8006bda <TIM_Base_SetConfig+0x8a>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a23      	ldr	r2, [pc, #140]	@ (8006c64 <TIM_Base_SetConfig+0x114>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d108      	bne.n	8006bec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a0e      	ldr	r2, [pc, #56]	@ (8006c4c <TIM_Base_SetConfig+0xfc>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d103      	bne.n	8006c20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	691a      	ldr	r2, [r3, #16]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d105      	bne.n	8006c3e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	f023 0201 	bic.w	r2, r3, #1
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	611a      	str	r2, [r3, #16]
  }
}
 8006c3e:	bf00      	nop
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	40010000 	.word	0x40010000
 8006c50:	40000400 	.word	0x40000400
 8006c54:	40000800 	.word	0x40000800
 8006c58:	40000c00 	.word	0x40000c00
 8006c5c:	40014000 	.word	0x40014000
 8006c60:	40014400 	.word	0x40014400
 8006c64:	40014800 	.word	0x40014800

08006c68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	f023 0201 	bic.w	r2, r3, #1
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 0303 	bic.w	r3, r3, #3
 8006c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f023 0302 	bic.w	r3, r3, #2
 8006cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8006d30 <TIM_OC1_SetConfig+0xc8>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d10c      	bne.n	8006cde <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f023 0308 	bic.w	r3, r3, #8
 8006cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f023 0304 	bic.w	r3, r3, #4
 8006cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a13      	ldr	r2, [pc, #76]	@ (8006d30 <TIM_OC1_SetConfig+0xc8>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d111      	bne.n	8006d0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	621a      	str	r2, [r3, #32]
}
 8006d24:	bf00      	nop
 8006d26:	371c      	adds	r7, #28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	40010000 	.word	0x40010000

08006d34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	f023 0210 	bic.w	r2, r3, #16
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	021b      	lsls	r3, r3, #8
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f023 0320 	bic.w	r3, r3, #32
 8006d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	011b      	lsls	r3, r3, #4
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006e08 <TIM_OC2_SetConfig+0xd4>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d10d      	bne.n	8006db0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a15      	ldr	r2, [pc, #84]	@ (8006e08 <TIM_OC2_SetConfig+0xd4>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d113      	bne.n	8006de0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006dbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	621a      	str	r2, [r3, #32]
}
 8006dfa:	bf00      	nop
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	40010000 	.word	0x40010000

08006e0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 0303 	bic.w	r3, r3, #3
 8006e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a1d      	ldr	r2, [pc, #116]	@ (8006edc <TIM_OC3_SetConfig+0xd0>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d10d      	bne.n	8006e86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	021b      	lsls	r3, r3, #8
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a14      	ldr	r2, [pc, #80]	@ (8006edc <TIM_OC3_SetConfig+0xd0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d113      	bne.n	8006eb6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	011b      	lsls	r3, r3, #4
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	011b      	lsls	r3, r3, #4
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	621a      	str	r2, [r3, #32]
}
 8006ed0:	bf00      	nop
 8006ed2:	371c      	adds	r7, #28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	40010000 	.word	0x40010000

08006ee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	021b      	lsls	r3, r3, #8
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	031b      	lsls	r3, r3, #12
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a10      	ldr	r2, [pc, #64]	@ (8006f7c <TIM_OC4_SetConfig+0x9c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d109      	bne.n	8006f54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	019b      	lsls	r3, r3, #6
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	621a      	str	r2, [r3, #32]
}
 8006f6e:	bf00      	nop
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	40010000 	.word	0x40010000

08006f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	f023 0201 	bic.w	r2, r3, #1
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	011b      	lsls	r3, r3, #4
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f023 030a 	bic.w	r3, r3, #10
 8006fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	621a      	str	r2, [r3, #32]
}
 8006fd2:	bf00      	nop
 8006fd4:	371c      	adds	r7, #28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b087      	sub	sp, #28
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	f023 0210 	bic.w	r2, r3, #16
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007008:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	031b      	lsls	r3, r3, #12
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	4313      	orrs	r3, r2
 8007012:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800701a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	621a      	str	r2, [r3, #32]
}
 8007032:	bf00      	nop
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800703e:	b480      	push	{r7}
 8007040:	b085      	sub	sp, #20
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	f043 0307 	orr.w	r3, r3, #7
 8007060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	609a      	str	r2, [r3, #8]
}
 8007068:	bf00      	nop
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800708e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	021a      	lsls	r2, r3, #8
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	431a      	orrs	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4313      	orrs	r3, r2
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	609a      	str	r2, [r3, #8]
}
 80070a8:	bf00      	nop
 80070aa:	371c      	adds	r7, #28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d101      	bne.n	80070cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070c8:	2302      	movs	r3, #2
 80070ca:	e050      	b.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a1c      	ldr	r2, [pc, #112]	@ (800717c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d018      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007118:	d013      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a18      	ldr	r2, [pc, #96]	@ (8007180 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00e      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a16      	ldr	r2, [pc, #88]	@ (8007184 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d009      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a15      	ldr	r2, [pc, #84]	@ (8007188 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d004      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a13      	ldr	r2, [pc, #76]	@ (800718c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d10c      	bne.n	800715c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	4313      	orrs	r3, r2
 8007152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	40010000 	.word	0x40010000
 8007180:	40000400 	.word	0x40000400
 8007184:	40000800 	.word	0x40000800
 8007188:	40000c00 	.word	0x40000c00
 800718c:	40014000 	.word	0x40014000

08007190 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800719a:	2300      	movs	r3, #0
 800719c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d101      	bne.n	80071ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80071a8:	2302      	movs	r3, #2
 80071aa:	e03d      	b.n	8007228 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	4313      	orrs	r3, r2
 8007206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	4313      	orrs	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e042      	b.n	80072cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7fa ffe6 	bl	800222c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2224      	movs	r2, #36	@ 0x24
 8007264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68da      	ldr	r2, [r3, #12]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007276:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f82b 	bl	80072d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	691a      	ldr	r2, [r3, #16]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800728c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	695a      	ldr	r2, [r3, #20]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800729c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68da      	ldr	r2, [r3, #12]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2220      	movs	r2, #32
 80072c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072d8:	b0c0      	sub	sp, #256	@ 0x100
 80072da:	af00      	add	r7, sp, #0
 80072dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80072ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f0:	68d9      	ldr	r1, [r3, #12]
 80072f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	ea40 0301 	orr.w	r3, r0, r1
 80072fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	431a      	orrs	r2, r3
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	431a      	orrs	r2, r3
 8007314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	4313      	orrs	r3, r2
 800731c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800732c:	f021 010c 	bic.w	r1, r1, #12
 8007330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800733a:	430b      	orrs	r3, r1
 800733c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800733e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800734a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800734e:	6999      	ldr	r1, [r3, #24]
 8007350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	ea40 0301 	orr.w	r3, r0, r1
 800735a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800735c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	4b8f      	ldr	r3, [pc, #572]	@ (80075a0 <UART_SetConfig+0x2cc>)
 8007364:	429a      	cmp	r2, r3
 8007366:	d005      	beq.n	8007374 <UART_SetConfig+0xa0>
 8007368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	4b8d      	ldr	r3, [pc, #564]	@ (80075a4 <UART_SetConfig+0x2d0>)
 8007370:	429a      	cmp	r2, r3
 8007372:	d104      	bne.n	800737e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007374:	f7ff f900 	bl	8006578 <HAL_RCC_GetPCLK2Freq>
 8007378:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800737c:	e003      	b.n	8007386 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800737e:	f7ff f8e7 	bl	8006550 <HAL_RCC_GetPCLK1Freq>
 8007382:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007390:	f040 810c 	bne.w	80075ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007398:	2200      	movs	r2, #0
 800739a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800739e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80073a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80073a6:	4622      	mov	r2, r4
 80073a8:	462b      	mov	r3, r5
 80073aa:	1891      	adds	r1, r2, r2
 80073ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80073ae:	415b      	adcs	r3, r3
 80073b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80073b6:	4621      	mov	r1, r4
 80073b8:	eb12 0801 	adds.w	r8, r2, r1
 80073bc:	4629      	mov	r1, r5
 80073be:	eb43 0901 	adc.w	r9, r3, r1
 80073c2:	f04f 0200 	mov.w	r2, #0
 80073c6:	f04f 0300 	mov.w	r3, #0
 80073ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073d6:	4690      	mov	r8, r2
 80073d8:	4699      	mov	r9, r3
 80073da:	4623      	mov	r3, r4
 80073dc:	eb18 0303 	adds.w	r3, r8, r3
 80073e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073e4:	462b      	mov	r3, r5
 80073e6:	eb49 0303 	adc.w	r3, r9, r3
 80073ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80073fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007402:	460b      	mov	r3, r1
 8007404:	18db      	adds	r3, r3, r3
 8007406:	653b      	str	r3, [r7, #80]	@ 0x50
 8007408:	4613      	mov	r3, r2
 800740a:	eb42 0303 	adc.w	r3, r2, r3
 800740e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007410:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007414:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007418:	f7f9 fbce 	bl	8000bb8 <__aeabi_uldivmod>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	4b61      	ldr	r3, [pc, #388]	@ (80075a8 <UART_SetConfig+0x2d4>)
 8007422:	fba3 2302 	umull	r2, r3, r3, r2
 8007426:	095b      	lsrs	r3, r3, #5
 8007428:	011c      	lsls	r4, r3, #4
 800742a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800742e:	2200      	movs	r2, #0
 8007430:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007434:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007438:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800743c:	4642      	mov	r2, r8
 800743e:	464b      	mov	r3, r9
 8007440:	1891      	adds	r1, r2, r2
 8007442:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007444:	415b      	adcs	r3, r3
 8007446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007448:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800744c:	4641      	mov	r1, r8
 800744e:	eb12 0a01 	adds.w	sl, r2, r1
 8007452:	4649      	mov	r1, r9
 8007454:	eb43 0b01 	adc.w	fp, r3, r1
 8007458:	f04f 0200 	mov.w	r2, #0
 800745c:	f04f 0300 	mov.w	r3, #0
 8007460:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007464:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007468:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800746c:	4692      	mov	sl, r2
 800746e:	469b      	mov	fp, r3
 8007470:	4643      	mov	r3, r8
 8007472:	eb1a 0303 	adds.w	r3, sl, r3
 8007476:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800747a:	464b      	mov	r3, r9
 800747c:	eb4b 0303 	adc.w	r3, fp, r3
 8007480:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007490:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007494:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007498:	460b      	mov	r3, r1
 800749a:	18db      	adds	r3, r3, r3
 800749c:	643b      	str	r3, [r7, #64]	@ 0x40
 800749e:	4613      	mov	r3, r2
 80074a0:	eb42 0303 	adc.w	r3, r2, r3
 80074a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80074a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80074aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80074ae:	f7f9 fb83 	bl	8000bb8 <__aeabi_uldivmod>
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	4611      	mov	r1, r2
 80074b8:	4b3b      	ldr	r3, [pc, #236]	@ (80075a8 <UART_SetConfig+0x2d4>)
 80074ba:	fba3 2301 	umull	r2, r3, r3, r1
 80074be:	095b      	lsrs	r3, r3, #5
 80074c0:	2264      	movs	r2, #100	@ 0x64
 80074c2:	fb02 f303 	mul.w	r3, r2, r3
 80074c6:	1acb      	subs	r3, r1, r3
 80074c8:	00db      	lsls	r3, r3, #3
 80074ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80074ce:	4b36      	ldr	r3, [pc, #216]	@ (80075a8 <UART_SetConfig+0x2d4>)
 80074d0:	fba3 2302 	umull	r2, r3, r3, r2
 80074d4:	095b      	lsrs	r3, r3, #5
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80074dc:	441c      	add	r4, r3
 80074de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80074ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80074f0:	4642      	mov	r2, r8
 80074f2:	464b      	mov	r3, r9
 80074f4:	1891      	adds	r1, r2, r2
 80074f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80074f8:	415b      	adcs	r3, r3
 80074fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007500:	4641      	mov	r1, r8
 8007502:	1851      	adds	r1, r2, r1
 8007504:	6339      	str	r1, [r7, #48]	@ 0x30
 8007506:	4649      	mov	r1, r9
 8007508:	414b      	adcs	r3, r1
 800750a:	637b      	str	r3, [r7, #52]	@ 0x34
 800750c:	f04f 0200 	mov.w	r2, #0
 8007510:	f04f 0300 	mov.w	r3, #0
 8007514:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007518:	4659      	mov	r1, fp
 800751a:	00cb      	lsls	r3, r1, #3
 800751c:	4651      	mov	r1, sl
 800751e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007522:	4651      	mov	r1, sl
 8007524:	00ca      	lsls	r2, r1, #3
 8007526:	4610      	mov	r0, r2
 8007528:	4619      	mov	r1, r3
 800752a:	4603      	mov	r3, r0
 800752c:	4642      	mov	r2, r8
 800752e:	189b      	adds	r3, r3, r2
 8007530:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007534:	464b      	mov	r3, r9
 8007536:	460a      	mov	r2, r1
 8007538:	eb42 0303 	adc.w	r3, r2, r3
 800753c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800754c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007550:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007554:	460b      	mov	r3, r1
 8007556:	18db      	adds	r3, r3, r3
 8007558:	62bb      	str	r3, [r7, #40]	@ 0x28
 800755a:	4613      	mov	r3, r2
 800755c:	eb42 0303 	adc.w	r3, r2, r3
 8007560:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007562:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007566:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800756a:	f7f9 fb25 	bl	8000bb8 <__aeabi_uldivmod>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4b0d      	ldr	r3, [pc, #52]	@ (80075a8 <UART_SetConfig+0x2d4>)
 8007574:	fba3 1302 	umull	r1, r3, r3, r2
 8007578:	095b      	lsrs	r3, r3, #5
 800757a:	2164      	movs	r1, #100	@ 0x64
 800757c:	fb01 f303 	mul.w	r3, r1, r3
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	3332      	adds	r3, #50	@ 0x32
 8007586:	4a08      	ldr	r2, [pc, #32]	@ (80075a8 <UART_SetConfig+0x2d4>)
 8007588:	fba2 2303 	umull	r2, r3, r2, r3
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	f003 0207 	and.w	r2, r3, #7
 8007592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4422      	add	r2, r4
 800759a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800759c:	e106      	b.n	80077ac <UART_SetConfig+0x4d8>
 800759e:	bf00      	nop
 80075a0:	40011000 	.word	0x40011000
 80075a4:	40011400 	.word	0x40011400
 80075a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075b0:	2200      	movs	r2, #0
 80075b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80075ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80075be:	4642      	mov	r2, r8
 80075c0:	464b      	mov	r3, r9
 80075c2:	1891      	adds	r1, r2, r2
 80075c4:	6239      	str	r1, [r7, #32]
 80075c6:	415b      	adcs	r3, r3
 80075c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80075ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075ce:	4641      	mov	r1, r8
 80075d0:	1854      	adds	r4, r2, r1
 80075d2:	4649      	mov	r1, r9
 80075d4:	eb43 0501 	adc.w	r5, r3, r1
 80075d8:	f04f 0200 	mov.w	r2, #0
 80075dc:	f04f 0300 	mov.w	r3, #0
 80075e0:	00eb      	lsls	r3, r5, #3
 80075e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075e6:	00e2      	lsls	r2, r4, #3
 80075e8:	4614      	mov	r4, r2
 80075ea:	461d      	mov	r5, r3
 80075ec:	4643      	mov	r3, r8
 80075ee:	18e3      	adds	r3, r4, r3
 80075f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80075f4:	464b      	mov	r3, r9
 80075f6:	eb45 0303 	adc.w	r3, r5, r3
 80075fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800760a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800760e:	f04f 0200 	mov.w	r2, #0
 8007612:	f04f 0300 	mov.w	r3, #0
 8007616:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800761a:	4629      	mov	r1, r5
 800761c:	008b      	lsls	r3, r1, #2
 800761e:	4621      	mov	r1, r4
 8007620:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007624:	4621      	mov	r1, r4
 8007626:	008a      	lsls	r2, r1, #2
 8007628:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800762c:	f7f9 fac4 	bl	8000bb8 <__aeabi_uldivmod>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	4b60      	ldr	r3, [pc, #384]	@ (80077b8 <UART_SetConfig+0x4e4>)
 8007636:	fba3 2302 	umull	r2, r3, r3, r2
 800763a:	095b      	lsrs	r3, r3, #5
 800763c:	011c      	lsls	r4, r3, #4
 800763e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007642:	2200      	movs	r2, #0
 8007644:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007648:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800764c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007650:	4642      	mov	r2, r8
 8007652:	464b      	mov	r3, r9
 8007654:	1891      	adds	r1, r2, r2
 8007656:	61b9      	str	r1, [r7, #24]
 8007658:	415b      	adcs	r3, r3
 800765a:	61fb      	str	r3, [r7, #28]
 800765c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007660:	4641      	mov	r1, r8
 8007662:	1851      	adds	r1, r2, r1
 8007664:	6139      	str	r1, [r7, #16]
 8007666:	4649      	mov	r1, r9
 8007668:	414b      	adcs	r3, r1
 800766a:	617b      	str	r3, [r7, #20]
 800766c:	f04f 0200 	mov.w	r2, #0
 8007670:	f04f 0300 	mov.w	r3, #0
 8007674:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007678:	4659      	mov	r1, fp
 800767a:	00cb      	lsls	r3, r1, #3
 800767c:	4651      	mov	r1, sl
 800767e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007682:	4651      	mov	r1, sl
 8007684:	00ca      	lsls	r2, r1, #3
 8007686:	4610      	mov	r0, r2
 8007688:	4619      	mov	r1, r3
 800768a:	4603      	mov	r3, r0
 800768c:	4642      	mov	r2, r8
 800768e:	189b      	adds	r3, r3, r2
 8007690:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007694:	464b      	mov	r3, r9
 8007696:	460a      	mov	r2, r1
 8007698:	eb42 0303 	adc.w	r3, r2, r3
 800769c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80076ac:	f04f 0200 	mov.w	r2, #0
 80076b0:	f04f 0300 	mov.w	r3, #0
 80076b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80076b8:	4649      	mov	r1, r9
 80076ba:	008b      	lsls	r3, r1, #2
 80076bc:	4641      	mov	r1, r8
 80076be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076c2:	4641      	mov	r1, r8
 80076c4:	008a      	lsls	r2, r1, #2
 80076c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80076ca:	f7f9 fa75 	bl	8000bb8 <__aeabi_uldivmod>
 80076ce:	4602      	mov	r2, r0
 80076d0:	460b      	mov	r3, r1
 80076d2:	4611      	mov	r1, r2
 80076d4:	4b38      	ldr	r3, [pc, #224]	@ (80077b8 <UART_SetConfig+0x4e4>)
 80076d6:	fba3 2301 	umull	r2, r3, r3, r1
 80076da:	095b      	lsrs	r3, r3, #5
 80076dc:	2264      	movs	r2, #100	@ 0x64
 80076de:	fb02 f303 	mul.w	r3, r2, r3
 80076e2:	1acb      	subs	r3, r1, r3
 80076e4:	011b      	lsls	r3, r3, #4
 80076e6:	3332      	adds	r3, #50	@ 0x32
 80076e8:	4a33      	ldr	r2, [pc, #204]	@ (80077b8 <UART_SetConfig+0x4e4>)
 80076ea:	fba2 2303 	umull	r2, r3, r2, r3
 80076ee:	095b      	lsrs	r3, r3, #5
 80076f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076f4:	441c      	add	r4, r3
 80076f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076fa:	2200      	movs	r2, #0
 80076fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80076fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8007700:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007704:	4642      	mov	r2, r8
 8007706:	464b      	mov	r3, r9
 8007708:	1891      	adds	r1, r2, r2
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	415b      	adcs	r3, r3
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007714:	4641      	mov	r1, r8
 8007716:	1851      	adds	r1, r2, r1
 8007718:	6039      	str	r1, [r7, #0]
 800771a:	4649      	mov	r1, r9
 800771c:	414b      	adcs	r3, r1
 800771e:	607b      	str	r3, [r7, #4]
 8007720:	f04f 0200 	mov.w	r2, #0
 8007724:	f04f 0300 	mov.w	r3, #0
 8007728:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800772c:	4659      	mov	r1, fp
 800772e:	00cb      	lsls	r3, r1, #3
 8007730:	4651      	mov	r1, sl
 8007732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007736:	4651      	mov	r1, sl
 8007738:	00ca      	lsls	r2, r1, #3
 800773a:	4610      	mov	r0, r2
 800773c:	4619      	mov	r1, r3
 800773e:	4603      	mov	r3, r0
 8007740:	4642      	mov	r2, r8
 8007742:	189b      	adds	r3, r3, r2
 8007744:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007746:	464b      	mov	r3, r9
 8007748:	460a      	mov	r2, r1
 800774a:	eb42 0303 	adc.w	r3, r2, r3
 800774e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	663b      	str	r3, [r7, #96]	@ 0x60
 800775a:	667a      	str	r2, [r7, #100]	@ 0x64
 800775c:	f04f 0200 	mov.w	r2, #0
 8007760:	f04f 0300 	mov.w	r3, #0
 8007764:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007768:	4649      	mov	r1, r9
 800776a:	008b      	lsls	r3, r1, #2
 800776c:	4641      	mov	r1, r8
 800776e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007772:	4641      	mov	r1, r8
 8007774:	008a      	lsls	r2, r1, #2
 8007776:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800777a:	f7f9 fa1d 	bl	8000bb8 <__aeabi_uldivmod>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	4b0d      	ldr	r3, [pc, #52]	@ (80077b8 <UART_SetConfig+0x4e4>)
 8007784:	fba3 1302 	umull	r1, r3, r3, r2
 8007788:	095b      	lsrs	r3, r3, #5
 800778a:	2164      	movs	r1, #100	@ 0x64
 800778c:	fb01 f303 	mul.w	r3, r1, r3
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	011b      	lsls	r3, r3, #4
 8007794:	3332      	adds	r3, #50	@ 0x32
 8007796:	4a08      	ldr	r2, [pc, #32]	@ (80077b8 <UART_SetConfig+0x4e4>)
 8007798:	fba2 2303 	umull	r2, r3, r2, r3
 800779c:	095b      	lsrs	r3, r3, #5
 800779e:	f003 020f 	and.w	r2, r3, #15
 80077a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4422      	add	r2, r4
 80077aa:	609a      	str	r2, [r3, #8]
}
 80077ac:	bf00      	nop
 80077ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80077b2:	46bd      	mov	sp, r7
 80077b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077b8:	51eb851f 	.word	0x51eb851f

080077bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077bc:	b084      	sub	sp, #16
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	f107 001c 	add.w	r0, r7, #28
 80077ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077ce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d123      	bne.n	800781e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80077ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007802:	2b01      	cmp	r3, #1
 8007804:	d105      	bne.n	8007812 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f001 fae8 	bl	8008de8 <USB_CoreReset>
 8007818:	4603      	mov	r3, r0
 800781a:	73fb      	strb	r3, [r7, #15]
 800781c:	e01b      	b.n	8007856 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 fadc 	bl	8008de8 <USB_CoreReset>
 8007830:	4603      	mov	r3, r0
 8007832:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007834:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007838:	2b00      	cmp	r3, #0
 800783a:	d106      	bne.n	800784a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007840:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	639a      	str	r2, [r3, #56]	@ 0x38
 8007848:	e005      	b.n	8007856 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007856:	7fbb      	ldrb	r3, [r7, #30]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d10b      	bne.n	8007874 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f043 0206 	orr.w	r2, r3, #6
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f043 0220 	orr.w	r2, r3, #32
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007874:	7bfb      	ldrb	r3, [r7, #15]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007880:	b004      	add	sp, #16
 8007882:	4770      	bx	lr

08007884 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	4613      	mov	r3, r2
 8007890:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007892:	79fb      	ldrb	r3, [r7, #7]
 8007894:	2b02      	cmp	r3, #2
 8007896:	d165      	bne.n	8007964 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4a41      	ldr	r2, [pc, #260]	@ (80079a0 <USB_SetTurnaroundTime+0x11c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d906      	bls.n	80078ae <USB_SetTurnaroundTime+0x2a>
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	4a40      	ldr	r2, [pc, #256]	@ (80079a4 <USB_SetTurnaroundTime+0x120>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d202      	bcs.n	80078ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80078a8:	230f      	movs	r3, #15
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	e062      	b.n	8007974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	4a3c      	ldr	r2, [pc, #240]	@ (80079a4 <USB_SetTurnaroundTime+0x120>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d306      	bcc.n	80078c4 <USB_SetTurnaroundTime+0x40>
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	4a3b      	ldr	r2, [pc, #236]	@ (80079a8 <USB_SetTurnaroundTime+0x124>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d202      	bcs.n	80078c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80078be:	230e      	movs	r3, #14
 80078c0:	617b      	str	r3, [r7, #20]
 80078c2:	e057      	b.n	8007974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	4a38      	ldr	r2, [pc, #224]	@ (80079a8 <USB_SetTurnaroundTime+0x124>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d306      	bcc.n	80078da <USB_SetTurnaroundTime+0x56>
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	4a37      	ldr	r2, [pc, #220]	@ (80079ac <USB_SetTurnaroundTime+0x128>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d202      	bcs.n	80078da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80078d4:	230d      	movs	r3, #13
 80078d6:	617b      	str	r3, [r7, #20]
 80078d8:	e04c      	b.n	8007974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	4a33      	ldr	r2, [pc, #204]	@ (80079ac <USB_SetTurnaroundTime+0x128>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d306      	bcc.n	80078f0 <USB_SetTurnaroundTime+0x6c>
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	4a32      	ldr	r2, [pc, #200]	@ (80079b0 <USB_SetTurnaroundTime+0x12c>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d802      	bhi.n	80078f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80078ea:	230c      	movs	r3, #12
 80078ec:	617b      	str	r3, [r7, #20]
 80078ee:	e041      	b.n	8007974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	4a2f      	ldr	r2, [pc, #188]	@ (80079b0 <USB_SetTurnaroundTime+0x12c>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d906      	bls.n	8007906 <USB_SetTurnaroundTime+0x82>
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	4a2e      	ldr	r2, [pc, #184]	@ (80079b4 <USB_SetTurnaroundTime+0x130>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d802      	bhi.n	8007906 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007900:	230b      	movs	r3, #11
 8007902:	617b      	str	r3, [r7, #20]
 8007904:	e036      	b.n	8007974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	4a2a      	ldr	r2, [pc, #168]	@ (80079b4 <USB_SetTurnaroundTime+0x130>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d906      	bls.n	800791c <USB_SetTurnaroundTime+0x98>
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	4a29      	ldr	r2, [pc, #164]	@ (80079b8 <USB_SetTurnaroundTime+0x134>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d802      	bhi.n	800791c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007916:	230a      	movs	r3, #10
 8007918:	617b      	str	r3, [r7, #20]
 800791a:	e02b      	b.n	8007974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	4a26      	ldr	r2, [pc, #152]	@ (80079b8 <USB_SetTurnaroundTime+0x134>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d906      	bls.n	8007932 <USB_SetTurnaroundTime+0xae>
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	4a25      	ldr	r2, [pc, #148]	@ (80079bc <USB_SetTurnaroundTime+0x138>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d202      	bcs.n	8007932 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800792c:	2309      	movs	r3, #9
 800792e:	617b      	str	r3, [r7, #20]
 8007930:	e020      	b.n	8007974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	4a21      	ldr	r2, [pc, #132]	@ (80079bc <USB_SetTurnaroundTime+0x138>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d306      	bcc.n	8007948 <USB_SetTurnaroundTime+0xc4>
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	4a20      	ldr	r2, [pc, #128]	@ (80079c0 <USB_SetTurnaroundTime+0x13c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d802      	bhi.n	8007948 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007942:	2308      	movs	r3, #8
 8007944:	617b      	str	r3, [r7, #20]
 8007946:	e015      	b.n	8007974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	4a1d      	ldr	r2, [pc, #116]	@ (80079c0 <USB_SetTurnaroundTime+0x13c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d906      	bls.n	800795e <USB_SetTurnaroundTime+0xda>
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	4a1c      	ldr	r2, [pc, #112]	@ (80079c4 <USB_SetTurnaroundTime+0x140>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d202      	bcs.n	800795e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007958:	2307      	movs	r3, #7
 800795a:	617b      	str	r3, [r7, #20]
 800795c:	e00a      	b.n	8007974 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800795e:	2306      	movs	r3, #6
 8007960:	617b      	str	r3, [r7, #20]
 8007962:	e007      	b.n	8007974 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007964:	79fb      	ldrb	r3, [r7, #7]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d102      	bne.n	8007970 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800796a:	2309      	movs	r3, #9
 800796c:	617b      	str	r3, [r7, #20]
 800796e:	e001      	b.n	8007974 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007970:	2309      	movs	r3, #9
 8007972:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	68da      	ldr	r2, [r3, #12]
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	029b      	lsls	r3, r3, #10
 8007988:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800798c:	431a      	orrs	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	371c      	adds	r7, #28
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	00d8acbf 	.word	0x00d8acbf
 80079a4:	00e4e1c0 	.word	0x00e4e1c0
 80079a8:	00f42400 	.word	0x00f42400
 80079ac:	01067380 	.word	0x01067380
 80079b0:	011a499f 	.word	0x011a499f
 80079b4:	01312cff 	.word	0x01312cff
 80079b8:	014ca43f 	.word	0x014ca43f
 80079bc:	016e3600 	.word	0x016e3600
 80079c0:	01a6ab1f 	.word	0x01a6ab1f
 80079c4:	01e84800 	.word	0x01e84800

080079c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f043 0201 	orr.w	r2, r3, #1
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f023 0201 	bic.w	r2, r3, #1
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a28:	78fb      	ldrb	r3, [r7, #3]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d115      	bne.n	8007a5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007a3a:	200a      	movs	r0, #10
 8007a3c:	f7fa ffa8 	bl	8002990 <HAL_Delay>
      ms += 10U;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	330a      	adds	r3, #10
 8007a44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f001 f93f 	bl	8008cca <USB_GetMode>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d01e      	beq.n	8007a90 <USB_SetCurrentMode+0x84>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2bc7      	cmp	r3, #199	@ 0xc7
 8007a56:	d9f0      	bls.n	8007a3a <USB_SetCurrentMode+0x2e>
 8007a58:	e01a      	b.n	8007a90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a5a:	78fb      	ldrb	r3, [r7, #3]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d115      	bne.n	8007a8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007a6c:	200a      	movs	r0, #10
 8007a6e:	f7fa ff8f 	bl	8002990 <HAL_Delay>
      ms += 10U;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	330a      	adds	r3, #10
 8007a76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 f926 	bl	8008cca <USB_GetMode>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d005      	beq.n	8007a90 <USB_SetCurrentMode+0x84>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2bc7      	cmp	r3, #199	@ 0xc7
 8007a88:	d9f0      	bls.n	8007a6c <USB_SetCurrentMode+0x60>
 8007a8a:	e001      	b.n	8007a90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e005      	b.n	8007a9c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2bc8      	cmp	r3, #200	@ 0xc8
 8007a94:	d101      	bne.n	8007a9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e000      	b.n	8007a9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007aa4:	b084      	sub	sp, #16
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b086      	sub	sp, #24
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007ab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007abe:	2300      	movs	r3, #0
 8007ac0:	613b      	str	r3, [r7, #16]
 8007ac2:	e009      	b.n	8007ad8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	3340      	adds	r3, #64	@ 0x40
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	2200      	movs	r2, #0
 8007ad0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	613b      	str	r3, [r7, #16]
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	2b0e      	cmp	r3, #14
 8007adc:	d9f2      	bls.n	8007ac4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ade:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d11c      	bne.n	8007b20 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007af4:	f043 0302 	orr.w	r3, r3, #2
 8007af8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b0a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b16:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8007b1e:	e00b      	b.n	8007b38 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b24:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b30:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b3e:	461a      	mov	r2, r3
 8007b40:	2300      	movs	r3, #0
 8007b42:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b44:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d10d      	bne.n	8007b68 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d104      	bne.n	8007b5e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b54:	2100      	movs	r1, #0
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f968 	bl	8007e2c <USB_SetDevSpeed>
 8007b5c:	e008      	b.n	8007b70 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b5e:	2101      	movs	r1, #1
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f963 	bl	8007e2c <USB_SetDevSpeed>
 8007b66:	e003      	b.n	8007b70 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b68:	2103      	movs	r1, #3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f95e 	bl	8007e2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b70:	2110      	movs	r1, #16
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f8fa 	bl	8007d6c <USB_FlushTxFifo>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f924 	bl	8007dd0 <USB_FlushRxFifo>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b98:	461a      	mov	r2, r3
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	613b      	str	r3, [r7, #16]
 8007bba:	e043      	b.n	8007c44 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bd2:	d118      	bne.n	8007c06 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10a      	bne.n	8007bf0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007be6:	461a      	mov	r2, r3
 8007be8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007bec:	6013      	str	r3, [r2, #0]
 8007bee:	e013      	b.n	8007c18 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	e008      	b.n	8007c18 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c12:	461a      	mov	r2, r3
 8007c14:	2300      	movs	r3, #0
 8007c16:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c24:	461a      	mov	r2, r3
 8007c26:	2300      	movs	r3, #0
 8007c28:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c36:	461a      	mov	r2, r3
 8007c38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007c3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	3301      	adds	r3, #1
 8007c42:	613b      	str	r3, [r7, #16]
 8007c44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007c48:	461a      	mov	r2, r3
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d3b5      	bcc.n	8007bbc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c50:	2300      	movs	r3, #0
 8007c52:	613b      	str	r3, [r7, #16]
 8007c54:	e043      	b.n	8007cde <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	015a      	lsls	r2, r3, #5
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c6c:	d118      	bne.n	8007ca0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10a      	bne.n	8007c8a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c80:	461a      	mov	r2, r3
 8007c82:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007c86:	6013      	str	r3, [r2, #0]
 8007c88:	e013      	b.n	8007cb2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c96:	461a      	mov	r2, r3
 8007c98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	e008      	b.n	8007cb2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cac:	461a      	mov	r2, r3
 8007cae:	2300      	movs	r3, #0
 8007cb0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007cd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	613b      	str	r3, [r7, #16]
 8007cde:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d3b5      	bcc.n	8007c56 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cfc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007d0a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d105      	bne.n	8007d20 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	f043 0210 	orr.w	r2, r3, #16
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	699a      	ldr	r2, [r3, #24]
 8007d24:	4b10      	ldr	r3, [pc, #64]	@ (8007d68 <USB_DevInit+0x2c4>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d005      	beq.n	8007d40 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	f043 0208 	orr.w	r2, r3, #8
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d40:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d107      	bne.n	8007d58 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d50:	f043 0304 	orr.w	r3, r3, #4
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d64:	b004      	add	sp, #16
 8007d66:	4770      	bx	lr
 8007d68:	803c3800 	.word	0x803c3800

08007d6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d86:	d901      	bls.n	8007d8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e01b      	b.n	8007dc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	daf2      	bge.n	8007d7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d94:	2300      	movs	r3, #0
 8007d96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	019b      	lsls	r3, r3, #6
 8007d9c:	f043 0220 	orr.w	r2, r3, #32
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3301      	adds	r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007db0:	d901      	bls.n	8007db6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e006      	b.n	8007dc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	d0f0      	beq.n	8007da4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3301      	adds	r3, #1
 8007de0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007de8:	d901      	bls.n	8007dee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e018      	b.n	8007e20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	daf2      	bge.n	8007ddc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2210      	movs	r2, #16
 8007dfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3301      	adds	r3, #1
 8007e04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e0c:	d901      	bls.n	8007e12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e006      	b.n	8007e20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	f003 0310 	and.w	r3, r3, #16
 8007e1a:	2b10      	cmp	r3, #16
 8007e1c:	d0f0      	beq.n	8007e00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	78fb      	ldrb	r3, [r7, #3]
 8007e46:	68f9      	ldr	r1, [r7, #12]
 8007e48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b087      	sub	sp, #28
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f003 0306 	and.w	r3, r3, #6
 8007e76:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d102      	bne.n	8007e84 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	75fb      	strb	r3, [r7, #23]
 8007e82:	e00a      	b.n	8007e9a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d002      	beq.n	8007e90 <USB_GetDevSpeed+0x32>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b06      	cmp	r3, #6
 8007e8e:	d102      	bne.n	8007e96 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007e90:	2302      	movs	r3, #2
 8007e92:	75fb      	strb	r3, [r7, #23]
 8007e94:	e001      	b.n	8007e9a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007e96:	230f      	movs	r3, #15
 8007e98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	371c      	adds	r7, #28
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	785b      	ldrb	r3, [r3, #1]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d13a      	bne.n	8007f3a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eca:	69da      	ldr	r2, [r3, #28]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	f003 030f 	and.w	r3, r3, #15
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	68f9      	ldr	r1, [r7, #12]
 8007ede:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d155      	bne.n	8007fa8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	015a      	lsls	r2, r3, #5
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	791b      	ldrb	r3, [r3, #4]
 8007f16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	059b      	lsls	r3, r3, #22
 8007f1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f20:	4313      	orrs	r3, r2
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	0151      	lsls	r1, r2, #5
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	440a      	add	r2, r1
 8007f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f36:	6013      	str	r3, [r2, #0]
 8007f38:	e036      	b.n	8007fa8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f40:	69da      	ldr	r2, [r3, #28]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f50:	041b      	lsls	r3, r3, #16
 8007f52:	68f9      	ldr	r1, [r7, #12]
 8007f54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d11a      	bne.n	8007fa8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	791b      	ldrb	r3, [r3, #4]
 8007f8c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f8e:	430b      	orrs	r3, r1
 8007f90:	4313      	orrs	r3, r2
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	0151      	lsls	r1, r2, #5
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	440a      	add	r2, r1
 8007f9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fa6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
	...

08007fb8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	785b      	ldrb	r3, [r3, #1]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d161      	bne.n	8008098 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fea:	d11f      	bne.n	800802c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	0151      	lsls	r1, r2, #5
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	440a      	add	r2, r1
 8008002:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008006:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800800a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	015a      	lsls	r2, r3, #5
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	4413      	add	r3, r2
 8008014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	0151      	lsls	r1, r2, #5
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	440a      	add	r2, r1
 8008022:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008026:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800802a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008032:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	f003 030f 	and.w	r3, r3, #15
 800803c:	2101      	movs	r1, #1
 800803e:	fa01 f303 	lsl.w	r3, r1, r3
 8008042:	b29b      	uxth	r3, r3
 8008044:	43db      	mvns	r3, r3
 8008046:	68f9      	ldr	r1, [r7, #12]
 8008048:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800804c:	4013      	ands	r3, r2
 800804e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008056:	69da      	ldr	r2, [r3, #28]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	f003 030f 	and.w	r3, r3, #15
 8008060:	2101      	movs	r1, #1
 8008062:	fa01 f303 	lsl.w	r3, r1, r3
 8008066:	b29b      	uxth	r3, r3
 8008068:	43db      	mvns	r3, r3
 800806a:	68f9      	ldr	r1, [r7, #12]
 800806c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008070:	4013      	ands	r3, r2
 8008072:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	015a      	lsls	r2, r3, #5
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4413      	add	r3, r2
 800807c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	0159      	lsls	r1, r3, #5
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	440b      	add	r3, r1
 800808a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800808e:	4619      	mov	r1, r3
 8008090:	4b35      	ldr	r3, [pc, #212]	@ (8008168 <USB_DeactivateEndpoint+0x1b0>)
 8008092:	4013      	ands	r3, r2
 8008094:	600b      	str	r3, [r1, #0]
 8008096:	e060      	b.n	800815a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080ae:	d11f      	bne.n	80080f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	015a      	lsls	r2, r3, #5
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	4413      	add	r3, r2
 80080b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	0151      	lsls	r1, r2, #5
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	440a      	add	r2, r1
 80080c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80080ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	0151      	lsls	r1, r2, #5
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	440a      	add	r2, r1
 80080e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	f003 030f 	and.w	r3, r3, #15
 8008100:	2101      	movs	r1, #1
 8008102:	fa01 f303 	lsl.w	r3, r1, r3
 8008106:	041b      	lsls	r3, r3, #16
 8008108:	43db      	mvns	r3, r3
 800810a:	68f9      	ldr	r1, [r7, #12]
 800810c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008110:	4013      	ands	r3, r2
 8008112:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800811a:	69da      	ldr	r2, [r3, #28]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	f003 030f 	and.w	r3, r3, #15
 8008124:	2101      	movs	r1, #1
 8008126:	fa01 f303 	lsl.w	r3, r1, r3
 800812a:	041b      	lsls	r3, r3, #16
 800812c:	43db      	mvns	r3, r3
 800812e:	68f9      	ldr	r1, [r7, #12]
 8008130:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008134:	4013      	ands	r3, r2
 8008136:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4413      	add	r3, r2
 8008140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	0159      	lsls	r1, r3, #5
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	440b      	add	r3, r1
 800814e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008152:	4619      	mov	r1, r3
 8008154:	4b05      	ldr	r3, [pc, #20]	@ (800816c <USB_DeactivateEndpoint+0x1b4>)
 8008156:	4013      	ands	r3, r2
 8008158:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	ec337800 	.word	0xec337800
 800816c:	eff37800 	.word	0xeff37800

08008170 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08a      	sub	sp, #40	@ 0x28
 8008174:	af02      	add	r7, sp, #8
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	785b      	ldrb	r3, [r3, #1]
 800818c:	2b01      	cmp	r3, #1
 800818e:	f040 817f 	bne.w	8008490 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d132      	bne.n	8008200 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	0151      	lsls	r1, r2, #5
 80081ac:	69fa      	ldr	r2, [r7, #28]
 80081ae:	440a      	add	r2, r1
 80081b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081b4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80081b8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80081bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	015a      	lsls	r2, r3, #5
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	4413      	add	r3, r2
 80081c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	69ba      	ldr	r2, [r7, #24]
 80081ce:	0151      	lsls	r1, r2, #5
 80081d0:	69fa      	ldr	r2, [r7, #28]
 80081d2:	440a      	add	r2, r1
 80081d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	0151      	lsls	r1, r2, #5
 80081f0:	69fa      	ldr	r2, [r7, #28]
 80081f2:	440a      	add	r2, r1
 80081f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081f8:	0cdb      	lsrs	r3, r3, #19
 80081fa:	04db      	lsls	r3, r3, #19
 80081fc:	6113      	str	r3, [r2, #16]
 80081fe:	e097      	b.n	8008330 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	015a      	lsls	r2, r3, #5
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	4413      	add	r3, r2
 8008208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	0151      	lsls	r1, r2, #5
 8008212:	69fa      	ldr	r2, [r7, #28]
 8008214:	440a      	add	r2, r1
 8008216:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800821a:	0cdb      	lsrs	r3, r3, #19
 800821c:	04db      	lsls	r3, r3, #19
 800821e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	4413      	add	r3, r2
 8008228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	0151      	lsls	r1, r2, #5
 8008232:	69fa      	ldr	r2, [r7, #28]
 8008234:	440a      	add	r2, r1
 8008236:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800823a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800823e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008242:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d11a      	bne.n	8008280 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	691a      	ldr	r2, [r3, #16]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	429a      	cmp	r2, r3
 8008254:	d903      	bls.n	800825e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	689a      	ldr	r2, [r3, #8]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	015a      	lsls	r2, r3, #5
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	4413      	add	r3, r2
 8008266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	69ba      	ldr	r2, [r7, #24]
 800826e:	0151      	lsls	r1, r2, #5
 8008270:	69fa      	ldr	r2, [r7, #28]
 8008272:	440a      	add	r2, r1
 8008274:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008278:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800827c:	6113      	str	r3, [r2, #16]
 800827e:	e044      	b.n	800830a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	691a      	ldr	r2, [r3, #16]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	4413      	add	r3, r2
 800828a:	1e5a      	subs	r2, r3, #1
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	fbb2 f3f3 	udiv	r3, r2, r3
 8008294:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	4413      	add	r3, r2
 800829e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082a2:	691a      	ldr	r2, [r3, #16]
 80082a4:	8afb      	ldrh	r3, [r7, #22]
 80082a6:	04d9      	lsls	r1, r3, #19
 80082a8:	4ba4      	ldr	r3, [pc, #656]	@ (800853c <USB_EPStartXfer+0x3cc>)
 80082aa:	400b      	ands	r3, r1
 80082ac:	69b9      	ldr	r1, [r7, #24]
 80082ae:	0148      	lsls	r0, r1, #5
 80082b0:	69f9      	ldr	r1, [r7, #28]
 80082b2:	4401      	add	r1, r0
 80082b4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80082b8:	4313      	orrs	r3, r2
 80082ba:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	791b      	ldrb	r3, [r3, #4]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d122      	bne.n	800830a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	0151      	lsls	r1, r2, #5
 80082d6:	69fa      	ldr	r2, [r7, #28]
 80082d8:	440a      	add	r2, r1
 80082da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082de:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80082e2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082f0:	691a      	ldr	r2, [r3, #16]
 80082f2:	8afb      	ldrh	r3, [r7, #22]
 80082f4:	075b      	lsls	r3, r3, #29
 80082f6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80082fa:	69b9      	ldr	r1, [r7, #24]
 80082fc:	0148      	lsls	r0, r1, #5
 80082fe:	69f9      	ldr	r1, [r7, #28]
 8008300:	4401      	add	r1, r0
 8008302:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008306:	4313      	orrs	r3, r2
 8008308:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	4413      	add	r3, r2
 8008312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008316:	691a      	ldr	r2, [r3, #16]
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008320:	69b9      	ldr	r1, [r7, #24]
 8008322:	0148      	lsls	r0, r1, #5
 8008324:	69f9      	ldr	r1, [r7, #28]
 8008326:	4401      	add	r1, r0
 8008328:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800832c:	4313      	orrs	r3, r2
 800832e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008330:	79fb      	ldrb	r3, [r7, #7]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d14b      	bne.n	80083ce <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d009      	beq.n	8008352 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	015a      	lsls	r2, r3, #5
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	4413      	add	r3, r2
 8008346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800834a:	461a      	mov	r2, r3
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	791b      	ldrb	r3, [r3, #4]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d128      	bne.n	80083ac <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008366:	2b00      	cmp	r3, #0
 8008368:	d110      	bne.n	800838c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	015a      	lsls	r2, r3, #5
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	4413      	add	r3, r2
 8008372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	69ba      	ldr	r2, [r7, #24]
 800837a:	0151      	lsls	r1, r2, #5
 800837c:	69fa      	ldr	r2, [r7, #28]
 800837e:	440a      	add	r2, r1
 8008380:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008384:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008388:	6013      	str	r3, [r2, #0]
 800838a:	e00f      	b.n	80083ac <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	4413      	add	r3, r2
 8008394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	69ba      	ldr	r2, [r7, #24]
 800839c:	0151      	lsls	r1, r2, #5
 800839e:	69fa      	ldr	r2, [r7, #28]
 80083a0:	440a      	add	r2, r1
 80083a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083aa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	0151      	lsls	r1, r2, #5
 80083be:	69fa      	ldr	r2, [r7, #28]
 80083c0:	440a      	add	r2, r1
 80083c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083c6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80083ca:	6013      	str	r3, [r2, #0]
 80083cc:	e166      	b.n	800869c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	69ba      	ldr	r2, [r7, #24]
 80083de:	0151      	lsls	r1, r2, #5
 80083e0:	69fa      	ldr	r2, [r7, #28]
 80083e2:	440a      	add	r2, r1
 80083e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083e8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80083ec:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	791b      	ldrb	r3, [r3, #4]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d015      	beq.n	8008422 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 814e 	beq.w	800869c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008406:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	f003 030f 	and.w	r3, r3, #15
 8008410:	2101      	movs	r1, #1
 8008412:	fa01 f303 	lsl.w	r3, r1, r3
 8008416:	69f9      	ldr	r1, [r7, #28]
 8008418:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800841c:	4313      	orrs	r3, r2
 800841e:	634b      	str	r3, [r1, #52]	@ 0x34
 8008420:	e13c      	b.n	800869c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800842e:	2b00      	cmp	r3, #0
 8008430:	d110      	bne.n	8008454 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	0151      	lsls	r1, r2, #5
 8008444:	69fa      	ldr	r2, [r7, #28]
 8008446:	440a      	add	r2, r1
 8008448:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800844c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	e00f      	b.n	8008474 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	4413      	add	r3, r2
 800845c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	69ba      	ldr	r2, [r7, #24]
 8008464:	0151      	lsls	r1, r2, #5
 8008466:	69fa      	ldr	r2, [r7, #28]
 8008468:	440a      	add	r2, r1
 800846a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800846e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008472:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	68d9      	ldr	r1, [r3, #12]
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	781a      	ldrb	r2, [r3, #0]
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	b298      	uxth	r0, r3
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	4603      	mov	r3, r0
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 f9b9 	bl	8008800 <USB_WritePacket>
 800848e:	e105      	b.n	800869c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	4413      	add	r3, r2
 8008498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	69ba      	ldr	r2, [r7, #24]
 80084a0:	0151      	lsls	r1, r2, #5
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	440a      	add	r2, r1
 80084a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084aa:	0cdb      	lsrs	r3, r3, #19
 80084ac:	04db      	lsls	r3, r3, #19
 80084ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	69ba      	ldr	r2, [r7, #24]
 80084c0:	0151      	lsls	r1, r2, #5
 80084c2:	69fa      	ldr	r2, [r7, #28]
 80084c4:	440a      	add	r2, r1
 80084c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084ca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80084ce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80084d2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d132      	bne.n	8008540 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	689a      	ldr	r2, [r3, #8]
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	689a      	ldr	r2, [r3, #8]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084fe:	691a      	ldr	r2, [r3, #16]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	6a1b      	ldr	r3, [r3, #32]
 8008504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008508:	69b9      	ldr	r1, [r7, #24]
 800850a:	0148      	lsls	r0, r1, #5
 800850c:	69f9      	ldr	r1, [r7, #28]
 800850e:	4401      	add	r1, r0
 8008510:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008514:	4313      	orrs	r3, r2
 8008516:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	4413      	add	r3, r2
 8008520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	0151      	lsls	r1, r2, #5
 800852a:	69fa      	ldr	r2, [r7, #28]
 800852c:	440a      	add	r2, r1
 800852e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008532:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008536:	6113      	str	r3, [r2, #16]
 8008538:	e062      	b.n	8008600 <USB_EPStartXfer+0x490>
 800853a:	bf00      	nop
 800853c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d123      	bne.n	8008590 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	4413      	add	r3, r2
 8008550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008554:	691a      	ldr	r2, [r3, #16]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800855e:	69b9      	ldr	r1, [r7, #24]
 8008560:	0148      	lsls	r0, r1, #5
 8008562:	69f9      	ldr	r1, [r7, #28]
 8008564:	4401      	add	r1, r0
 8008566:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800856a:	4313      	orrs	r3, r2
 800856c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	69ba      	ldr	r2, [r7, #24]
 800857e:	0151      	lsls	r1, r2, #5
 8008580:	69fa      	ldr	r2, [r7, #28]
 8008582:	440a      	add	r2, r1
 8008584:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008588:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800858c:	6113      	str	r3, [r2, #16]
 800858e:	e037      	b.n	8008600 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	691a      	ldr	r2, [r3, #16]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	4413      	add	r3, r2
 800859a:	1e5a      	subs	r2, r3, #1
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	8afa      	ldrh	r2, [r7, #22]
 80085ac:	fb03 f202 	mul.w	r2, r3, r2
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c0:	691a      	ldr	r2, [r3, #16]
 80085c2:	8afb      	ldrh	r3, [r7, #22]
 80085c4:	04d9      	lsls	r1, r3, #19
 80085c6:	4b38      	ldr	r3, [pc, #224]	@ (80086a8 <USB_EPStartXfer+0x538>)
 80085c8:	400b      	ands	r3, r1
 80085ca:	69b9      	ldr	r1, [r7, #24]
 80085cc:	0148      	lsls	r0, r1, #5
 80085ce:	69f9      	ldr	r1, [r7, #28]
 80085d0:	4401      	add	r1, r0
 80085d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80085d6:	4313      	orrs	r3, r2
 80085d8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	015a      	lsls	r2, r3, #5
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085e6:	691a      	ldr	r2, [r3, #16]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	6a1b      	ldr	r3, [r3, #32]
 80085ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085f0:	69b9      	ldr	r1, [r7, #24]
 80085f2:	0148      	lsls	r0, r1, #5
 80085f4:	69f9      	ldr	r1, [r7, #28]
 80085f6:	4401      	add	r1, r0
 80085f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80085fc:	4313      	orrs	r3, r2
 80085fe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008600:	79fb      	ldrb	r3, [r7, #7]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d10d      	bne.n	8008622 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d009      	beq.n	8008622 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	68d9      	ldr	r1, [r3, #12]
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	4413      	add	r3, r2
 800861a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800861e:	460a      	mov	r2, r1
 8008620:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	791b      	ldrb	r3, [r3, #4]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d128      	bne.n	800867c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008636:	2b00      	cmp	r3, #0
 8008638:	d110      	bne.n	800865c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	015a      	lsls	r2, r3, #5
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	4413      	add	r3, r2
 8008642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	69ba      	ldr	r2, [r7, #24]
 800864a:	0151      	lsls	r1, r2, #5
 800864c:	69fa      	ldr	r2, [r7, #28]
 800864e:	440a      	add	r2, r1
 8008650:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008654:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008658:	6013      	str	r3, [r2, #0]
 800865a:	e00f      	b.n	800867c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	015a      	lsls	r2, r3, #5
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	4413      	add	r3, r2
 8008664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69ba      	ldr	r2, [r7, #24]
 800866c:	0151      	lsls	r1, r2, #5
 800866e:	69fa      	ldr	r2, [r7, #28]
 8008670:	440a      	add	r2, r1
 8008672:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800867a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	4413      	add	r3, r2
 8008684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	69ba      	ldr	r2, [r7, #24]
 800868c:	0151      	lsls	r1, r2, #5
 800868e:	69fa      	ldr	r2, [r7, #28]
 8008690:	440a      	add	r2, r1
 8008692:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008696:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800869a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3720      	adds	r7, #32
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	1ff80000 	.word	0x1ff80000

080086ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b087      	sub	sp, #28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	785b      	ldrb	r3, [r3, #1]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d14a      	bne.n	8008760 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	015a      	lsls	r2, r3, #5
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	4413      	add	r3, r2
 80086d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086e2:	f040 8086 	bne.w	80087f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	7812      	ldrb	r2, [r2, #0]
 80086fa:	0151      	lsls	r1, r2, #5
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	440a      	add	r2, r1
 8008700:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008704:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008708:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	015a      	lsls	r2, r3, #5
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	4413      	add	r3, r2
 8008714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	7812      	ldrb	r2, [r2, #0]
 800871e:	0151      	lsls	r1, r2, #5
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	440a      	add	r2, r1
 8008724:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008728:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800872c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	3301      	adds	r3, #1
 8008732:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f242 7210 	movw	r2, #10000	@ 0x2710
 800873a:	4293      	cmp	r3, r2
 800873c:	d902      	bls.n	8008744 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	75fb      	strb	r3, [r7, #23]
          break;
 8008742:	e056      	b.n	80087f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	4413      	add	r3, r2
 800874e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008758:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800875c:	d0e7      	beq.n	800872e <USB_EPStopXfer+0x82>
 800875e:	e048      	b.n	80087f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008774:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008778:	d13b      	bne.n	80087f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	7812      	ldrb	r2, [r2, #0]
 800878e:	0151      	lsls	r1, r2, #5
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	440a      	add	r2, r1
 8008794:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008798:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800879c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	7812      	ldrb	r2, [r2, #0]
 80087b2:	0151      	lsls	r1, r2, #5
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	440a      	add	r2, r1
 80087b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3301      	adds	r3, #1
 80087c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d902      	bls.n	80087d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	75fb      	strb	r3, [r7, #23]
          break;
 80087d6:	e00c      	b.n	80087f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	015a      	lsls	r2, r3, #5
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087f0:	d0e7      	beq.n	80087c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	371c      	adds	r7, #28
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008800:	b480      	push	{r7}
 8008802:	b089      	sub	sp, #36	@ 0x24
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	4611      	mov	r1, r2
 800880c:	461a      	mov	r2, r3
 800880e:	460b      	mov	r3, r1
 8008810:	71fb      	strb	r3, [r7, #7]
 8008812:	4613      	mov	r3, r2
 8008814:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800881e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008822:	2b00      	cmp	r3, #0
 8008824:	d123      	bne.n	800886e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008826:	88bb      	ldrh	r3, [r7, #4]
 8008828:	3303      	adds	r3, #3
 800882a:	089b      	lsrs	r3, r3, #2
 800882c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800882e:	2300      	movs	r3, #0
 8008830:	61bb      	str	r3, [r7, #24]
 8008832:	e018      	b.n	8008866 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	031a      	lsls	r2, r3, #12
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	4413      	add	r3, r2
 800883c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008840:	461a      	mov	r2, r3
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	3301      	adds	r3, #1
 800884c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	3301      	adds	r3, #1
 8008852:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	3301      	adds	r3, #1
 8008858:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	3301      	adds	r3, #1
 800885e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	3301      	adds	r3, #1
 8008864:	61bb      	str	r3, [r7, #24]
 8008866:	69ba      	ldr	r2, [r7, #24]
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	429a      	cmp	r2, r3
 800886c:	d3e2      	bcc.n	8008834 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3724      	adds	r7, #36	@ 0x24
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800887c:	b480      	push	{r7}
 800887e:	b08b      	sub	sp, #44	@ 0x2c
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	4613      	mov	r3, r2
 8008888:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008892:	88fb      	ldrh	r3, [r7, #6]
 8008894:	089b      	lsrs	r3, r3, #2
 8008896:	b29b      	uxth	r3, r3
 8008898:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800889a:	88fb      	ldrh	r3, [r7, #6]
 800889c:	f003 0303 	and.w	r3, r3, #3
 80088a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80088a2:	2300      	movs	r3, #0
 80088a4:	623b      	str	r3, [r7, #32]
 80088a6:	e014      	b.n	80088d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80088b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b6:	3301      	adds	r3, #1
 80088b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80088ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088bc:	3301      	adds	r3, #1
 80088be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80088c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c2:	3301      	adds	r3, #1
 80088c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80088c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c8:	3301      	adds	r3, #1
 80088ca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	3301      	adds	r3, #1
 80088d0:	623b      	str	r3, [r7, #32]
 80088d2:	6a3a      	ldr	r2, [r7, #32]
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d3e6      	bcc.n	80088a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80088da:	8bfb      	ldrh	r3, [r7, #30]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d01e      	beq.n	800891e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80088e0:	2300      	movs	r3, #0
 80088e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088ea:	461a      	mov	r2, r3
 80088ec:	f107 0310 	add.w	r3, r7, #16
 80088f0:	6812      	ldr	r2, [r2, #0]
 80088f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	00db      	lsls	r3, r3, #3
 80088fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008900:	b2da      	uxtb	r2, r3
 8008902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008904:	701a      	strb	r2, [r3, #0]
      i++;
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	3301      	adds	r3, #1
 800890a:	623b      	str	r3, [r7, #32]
      pDest++;
 800890c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890e:	3301      	adds	r3, #1
 8008910:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008912:	8bfb      	ldrh	r3, [r7, #30]
 8008914:	3b01      	subs	r3, #1
 8008916:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008918:	8bfb      	ldrh	r3, [r7, #30]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1ea      	bne.n	80088f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800891e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008920:	4618      	mov	r0, r3
 8008922:	372c      	adds	r7, #44	@ 0x2c
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	785b      	ldrb	r3, [r3, #1]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d12c      	bne.n	80089a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	015a      	lsls	r2, r3, #5
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4413      	add	r3, r2
 8008950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	db12      	blt.n	8008980 <USB_EPSetStall+0x54>
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00f      	beq.n	8008980 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	015a      	lsls	r2, r3, #5
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4413      	add	r3, r2
 8008968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	0151      	lsls	r1, r2, #5
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	440a      	add	r2, r1
 8008976:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800897a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800897e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	0151      	lsls	r1, r2, #5
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	440a      	add	r2, r1
 8008996:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800899a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	e02b      	b.n	80089fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	015a      	lsls	r2, r3, #5
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	4413      	add	r3, r2
 80089aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	db12      	blt.n	80089da <USB_EPSetStall+0xae>
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00f      	beq.n	80089da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	015a      	lsls	r2, r3, #5
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	0151      	lsls	r1, r2, #5
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	440a      	add	r2, r1
 80089d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	015a      	lsls	r2, r3, #5
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	4413      	add	r3, r2
 80089e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	0151      	lsls	r1, r2, #5
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	440a      	add	r2, r1
 80089f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80089f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	785b      	ldrb	r3, [r3, #1]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d128      	bne.n	8008a76 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	015a      	lsls	r2, r3, #5
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	0151      	lsls	r1, r2, #5
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	440a      	add	r2, r1
 8008a3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	791b      	ldrb	r3, [r3, #4]
 8008a48:	2b03      	cmp	r3, #3
 8008a4a:	d003      	beq.n	8008a54 <USB_EPClearStall+0x4c>
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	791b      	ldrb	r3, [r3, #4]
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d138      	bne.n	8008ac6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	015a      	lsls	r2, r3, #5
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	0151      	lsls	r1, r2, #5
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	440a      	add	r2, r1
 8008a6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a72:	6013      	str	r3, [r2, #0]
 8008a74:	e027      	b.n	8008ac6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	015a      	lsls	r2, r3, #5
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	0151      	lsls	r1, r2, #5
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	440a      	add	r2, r1
 8008a8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a90:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	791b      	ldrb	r3, [r3, #4]
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	d003      	beq.n	8008aa6 <USB_EPClearStall+0x9e>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	791b      	ldrb	r3, [r3, #4]
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d10f      	bne.n	8008ac6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	0151      	lsls	r1, r2, #5
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	440a      	add	r2, r1
 8008abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ac4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008af2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008af6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	011b      	lsls	r3, r3, #4
 8008b04:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008b08:	68f9      	ldr	r1, [r7, #12]
 8008b0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b3a:	f023 0303 	bic.w	r3, r3, #3
 8008b3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b4e:	f023 0302 	bic.w	r3, r3, #2
 8008b52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b085      	sub	sp, #20
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b7c:	f023 0303 	bic.w	r3, r3, #3
 8008b80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b90:	f043 0302 	orr.w	r3, r3, #2
 8008b94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3714      	adds	r7, #20
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	4013      	ands	r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b085      	sub	sp, #20
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008be6:	69db      	ldr	r3, [r3, #28]
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	4013      	ands	r3, r2
 8008bec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	0c1b      	lsrs	r3, r3, #16
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3714      	adds	r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b085      	sub	sp, #20
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c1a:	69db      	ldr	r3, [r3, #28]
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	4013      	ands	r3, r2
 8008c20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	b29b      	uxth	r3, r3
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b085      	sub	sp, #20
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008c42:	78fb      	ldrb	r3, [r7, #3]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c60:	68bb      	ldr	r3, [r7, #8]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b087      	sub	sp, #28
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	460b      	mov	r3, r1
 8008c78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c90:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008c92:	78fb      	ldrb	r3, [r7, #3]
 8008c94:	f003 030f 	and.w	r3, r3, #15
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c9e:	01db      	lsls	r3, r3, #7
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008ca8:	78fb      	ldrb	r3, [r7, #3]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	4013      	ands	r3, r2
 8008cba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008cbc:	68bb      	ldr	r3, [r7, #8]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b083      	sub	sp, #12
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	f003 0301 	and.w	r3, r3, #1
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b085      	sub	sp, #20
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d00:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008d04:	f023 0307 	bic.w	r3, r3, #7
 8008d08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	460b      	mov	r3, r1
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	333c      	adds	r3, #60	@ 0x3c
 8008d42:	3304      	adds	r3, #4
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	4a26      	ldr	r2, [pc, #152]	@ (8008de4 <USB_EP0_OutStart+0xb8>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d90a      	bls.n	8008d66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d60:	d101      	bne.n	8008d66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	e037      	b.n	8008dd6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	2300      	movs	r3, #0
 8008d70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d94:	f043 0318 	orr.w	r3, r3, #24
 8008d98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008da8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008dac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008dae:	7afb      	ldrb	r3, [r7, #11]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d10f      	bne.n	8008dd4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dba:	461a      	mov	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dce:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008dd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	371c      	adds	r7, #28
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	4f54300a 	.word	0x4f54300a

08008de8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008df0:	2300      	movs	r3, #0
 8008df2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	3301      	adds	r3, #1
 8008df8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e00:	d901      	bls.n	8008e06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e01b      	b.n	8008e3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	daf2      	bge.n	8008df4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	f043 0201 	orr.w	r2, r3, #1
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3301      	adds	r3, #1
 8008e22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e2a:	d901      	bls.n	8008e30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e006      	b.n	8008e3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	f003 0301 	and.w	r3, r3, #1
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d0f0      	beq.n	8008e1e <USB_CoreReset+0x36>

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
	...

08008e4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008e58:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008e5c:	f002 fce4 	bl	800b828 <USBD_static_malloc>
 8008e60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d109      	bne.n	8008e7c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	32b0      	adds	r2, #176	@ 0xb0
 8008e72:	2100      	movs	r1, #0
 8008e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008e78:	2302      	movs	r3, #2
 8008e7a:	e0d4      	b.n	8009026 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008e7c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008e80:	2100      	movs	r1, #0
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f003 faac 	bl	800c3e0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	32b0      	adds	r2, #176	@ 0xb0
 8008e92:	68f9      	ldr	r1, [r7, #12]
 8008e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	32b0      	adds	r2, #176	@ 0xb0
 8008ea2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	7c1b      	ldrb	r3, [r3, #16]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d138      	bne.n	8008f26 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008eb4:	4b5e      	ldr	r3, [pc, #376]	@ (8009030 <USBD_CDC_Init+0x1e4>)
 8008eb6:	7819      	ldrb	r1, [r3, #0]
 8008eb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ebc:	2202      	movs	r2, #2
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f002 fb8f 	bl	800b5e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008ec4:	4b5a      	ldr	r3, [pc, #360]	@ (8009030 <USBD_CDC_Init+0x1e4>)
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	f003 020f 	and.w	r2, r3, #15
 8008ecc:	6879      	ldr	r1, [r7, #4]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	4413      	add	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	440b      	add	r3, r1
 8008ed8:	3324      	adds	r3, #36	@ 0x24
 8008eda:	2201      	movs	r2, #1
 8008edc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008ede:	4b55      	ldr	r3, [pc, #340]	@ (8009034 <USBD_CDC_Init+0x1e8>)
 8008ee0:	7819      	ldrb	r1, [r3, #0]
 8008ee2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f002 fb7a 	bl	800b5e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008eee:	4b51      	ldr	r3, [pc, #324]	@ (8009034 <USBD_CDC_Init+0x1e8>)
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	f003 020f 	and.w	r2, r3, #15
 8008ef6:	6879      	ldr	r1, [r7, #4]
 8008ef8:	4613      	mov	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4413      	add	r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	440b      	add	r3, r1
 8008f02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008f06:	2201      	movs	r2, #1
 8008f08:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008f0a:	4b4b      	ldr	r3, [pc, #300]	@ (8009038 <USBD_CDC_Init+0x1ec>)
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	f003 020f 	and.w	r2, r3, #15
 8008f12:	6879      	ldr	r1, [r7, #4]
 8008f14:	4613      	mov	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	440b      	add	r3, r1
 8008f1e:	3326      	adds	r3, #38	@ 0x26
 8008f20:	2210      	movs	r2, #16
 8008f22:	801a      	strh	r2, [r3, #0]
 8008f24:	e035      	b.n	8008f92 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008f26:	4b42      	ldr	r3, [pc, #264]	@ (8009030 <USBD_CDC_Init+0x1e4>)
 8008f28:	7819      	ldrb	r1, [r3, #0]
 8008f2a:	2340      	movs	r3, #64	@ 0x40
 8008f2c:	2202      	movs	r2, #2
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f002 fb57 	bl	800b5e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008f34:	4b3e      	ldr	r3, [pc, #248]	@ (8009030 <USBD_CDC_Init+0x1e4>)
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	f003 020f 	and.w	r2, r3, #15
 8008f3c:	6879      	ldr	r1, [r7, #4]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	440b      	add	r3, r1
 8008f48:	3324      	adds	r3, #36	@ 0x24
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008f4e:	4b39      	ldr	r3, [pc, #228]	@ (8009034 <USBD_CDC_Init+0x1e8>)
 8008f50:	7819      	ldrb	r1, [r3, #0]
 8008f52:	2340      	movs	r3, #64	@ 0x40
 8008f54:	2202      	movs	r2, #2
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f002 fb43 	bl	800b5e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008f5c:	4b35      	ldr	r3, [pc, #212]	@ (8009034 <USBD_CDC_Init+0x1e8>)
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	f003 020f 	and.w	r2, r3, #15
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	4613      	mov	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4413      	add	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	440b      	add	r3, r1
 8008f70:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008f74:	2201      	movs	r2, #1
 8008f76:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008f78:	4b2f      	ldr	r3, [pc, #188]	@ (8009038 <USBD_CDC_Init+0x1ec>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	f003 020f 	and.w	r2, r3, #15
 8008f80:	6879      	ldr	r1, [r7, #4]
 8008f82:	4613      	mov	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	440b      	add	r3, r1
 8008f8c:	3326      	adds	r3, #38	@ 0x26
 8008f8e:	2210      	movs	r2, #16
 8008f90:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008f92:	4b29      	ldr	r3, [pc, #164]	@ (8009038 <USBD_CDC_Init+0x1ec>)
 8008f94:	7819      	ldrb	r1, [r3, #0]
 8008f96:	2308      	movs	r3, #8
 8008f98:	2203      	movs	r2, #3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f002 fb21 	bl	800b5e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008fa0:	4b25      	ldr	r3, [pc, #148]	@ (8009038 <USBD_CDC_Init+0x1ec>)
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	f003 020f 	and.w	r2, r3, #15
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	4613      	mov	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4413      	add	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	440b      	add	r3, r1
 8008fb4:	3324      	adds	r3, #36	@ 0x24
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	33b0      	adds	r3, #176	@ 0xb0
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d101      	bne.n	8008ff4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e018      	b.n	8009026 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	7c1b      	ldrb	r3, [r3, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10a      	bne.n	8009012 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8009034 <USBD_CDC_Init+0x1e8>)
 8008ffe:	7819      	ldrb	r1, [r3, #0]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009006:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f002 fbd8 	bl	800b7c0 <USBD_LL_PrepareReceive>
 8009010:	e008      	b.n	8009024 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009012:	4b08      	ldr	r3, [pc, #32]	@ (8009034 <USBD_CDC_Init+0x1e8>)
 8009014:	7819      	ldrb	r1, [r3, #0]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800901c:	2340      	movs	r3, #64	@ 0x40
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f002 fbce 	bl	800b7c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	20000093 	.word	0x20000093
 8009034:	20000094 	.word	0x20000094
 8009038:	20000095 	.word	0x20000095

0800903c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009048:	4b3a      	ldr	r3, [pc, #232]	@ (8009134 <USBD_CDC_DeInit+0xf8>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f002 faed 	bl	800b62e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009054:	4b37      	ldr	r3, [pc, #220]	@ (8009134 <USBD_CDC_DeInit+0xf8>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	f003 020f 	and.w	r2, r3, #15
 800905c:	6879      	ldr	r1, [r7, #4]
 800905e:	4613      	mov	r3, r2
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	4413      	add	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	440b      	add	r3, r1
 8009068:	3324      	adds	r3, #36	@ 0x24
 800906a:	2200      	movs	r2, #0
 800906c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800906e:	4b32      	ldr	r3, [pc, #200]	@ (8009138 <USBD_CDC_DeInit+0xfc>)
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	4619      	mov	r1, r3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f002 fada 	bl	800b62e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800907a:	4b2f      	ldr	r3, [pc, #188]	@ (8009138 <USBD_CDC_DeInit+0xfc>)
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	f003 020f 	and.w	r2, r3, #15
 8009082:	6879      	ldr	r1, [r7, #4]
 8009084:	4613      	mov	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4413      	add	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	440b      	add	r3, r1
 800908e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009092:	2200      	movs	r2, #0
 8009094:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009096:	4b29      	ldr	r3, [pc, #164]	@ (800913c <USBD_CDC_DeInit+0x100>)
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f002 fac6 	bl	800b62e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80090a2:	4b26      	ldr	r3, [pc, #152]	@ (800913c <USBD_CDC_DeInit+0x100>)
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	f003 020f 	and.w	r2, r3, #15
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	4613      	mov	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	440b      	add	r3, r1
 80090b6:	3324      	adds	r3, #36	@ 0x24
 80090b8:	2200      	movs	r2, #0
 80090ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80090bc:	4b1f      	ldr	r3, [pc, #124]	@ (800913c <USBD_CDC_DeInit+0x100>)
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	f003 020f 	and.w	r2, r3, #15
 80090c4:	6879      	ldr	r1, [r7, #4]
 80090c6:	4613      	mov	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	440b      	add	r3, r1
 80090d0:	3326      	adds	r3, #38	@ 0x26
 80090d2:	2200      	movs	r2, #0
 80090d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	32b0      	adds	r2, #176	@ 0xb0
 80090e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d01f      	beq.n	8009128 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	33b0      	adds	r3, #176	@ 0xb0
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	32b0      	adds	r2, #176	@ 0xb0
 8009106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800910a:	4618      	mov	r0, r3
 800910c:	f002 fb9a 	bl	800b844 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	32b0      	adds	r2, #176	@ 0xb0
 800911a:	2100      	movs	r1, #0
 800911c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	20000093 	.word	0x20000093
 8009138:	20000094 	.word	0x20000094
 800913c:	20000095 	.word	0x20000095

08009140 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	32b0      	adds	r2, #176	@ 0xb0
 8009154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009158:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800915a:	2300      	movs	r3, #0
 800915c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d101      	bne.n	8009170 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800916c:	2303      	movs	r3, #3
 800916e:	e0bf      	b.n	80092f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009178:	2b00      	cmp	r3, #0
 800917a:	d050      	beq.n	800921e <USBD_CDC_Setup+0xde>
 800917c:	2b20      	cmp	r3, #32
 800917e:	f040 80af 	bne.w	80092e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	88db      	ldrh	r3, [r3, #6]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d03a      	beq.n	8009200 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	b25b      	sxtb	r3, r3
 8009190:	2b00      	cmp	r3, #0
 8009192:	da1b      	bge.n	80091cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	33b0      	adds	r3, #176	@ 0xb0
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	4413      	add	r3, r2
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80091aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80091ac:	683a      	ldr	r2, [r7, #0]
 80091ae:	88d2      	ldrh	r2, [r2, #6]
 80091b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	88db      	ldrh	r3, [r3, #6]
 80091b6:	2b07      	cmp	r3, #7
 80091b8:	bf28      	it	cs
 80091ba:	2307      	movcs	r3, #7
 80091bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	89fa      	ldrh	r2, [r7, #14]
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f001 fd93 	bl	800acf0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80091ca:	e090      	b.n	80092ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	785a      	ldrb	r2, [r3, #1]
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	88db      	ldrh	r3, [r3, #6]
 80091da:	2b3f      	cmp	r3, #63	@ 0x3f
 80091dc:	d803      	bhi.n	80091e6 <USBD_CDC_Setup+0xa6>
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	88db      	ldrh	r3, [r3, #6]
 80091e2:	b2da      	uxtb	r2, r3
 80091e4:	e000      	b.n	80091e8 <USBD_CDC_Setup+0xa8>
 80091e6:	2240      	movs	r2, #64	@ 0x40
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80091ee:	6939      	ldr	r1, [r7, #16]
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80091f6:	461a      	mov	r2, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 fda5 	bl	800ad48 <USBD_CtlPrepareRx>
      break;
 80091fe:	e076      	b.n	80092ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	33b0      	adds	r3, #176	@ 0xb0
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	683a      	ldr	r2, [r7, #0]
 8009214:	7850      	ldrb	r0, [r2, #1]
 8009216:	2200      	movs	r2, #0
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	4798      	blx	r3
      break;
 800921c:	e067      	b.n	80092ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	785b      	ldrb	r3, [r3, #1]
 8009222:	2b0b      	cmp	r3, #11
 8009224:	d851      	bhi.n	80092ca <USBD_CDC_Setup+0x18a>
 8009226:	a201      	add	r2, pc, #4	@ (adr r2, 800922c <USBD_CDC_Setup+0xec>)
 8009228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922c:	0800925d 	.word	0x0800925d
 8009230:	080092d9 	.word	0x080092d9
 8009234:	080092cb 	.word	0x080092cb
 8009238:	080092cb 	.word	0x080092cb
 800923c:	080092cb 	.word	0x080092cb
 8009240:	080092cb 	.word	0x080092cb
 8009244:	080092cb 	.word	0x080092cb
 8009248:	080092cb 	.word	0x080092cb
 800924c:	080092cb 	.word	0x080092cb
 8009250:	080092cb 	.word	0x080092cb
 8009254:	08009287 	.word	0x08009287
 8009258:	080092b1 	.word	0x080092b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009262:	b2db      	uxtb	r3, r3
 8009264:	2b03      	cmp	r3, #3
 8009266:	d107      	bne.n	8009278 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009268:	f107 030a 	add.w	r3, r7, #10
 800926c:	2202      	movs	r2, #2
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f001 fd3d 	bl	800acf0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009276:	e032      	b.n	80092de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f001 fcbb 	bl	800abf6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009280:	2303      	movs	r3, #3
 8009282:	75fb      	strb	r3, [r7, #23]
          break;
 8009284:	e02b      	b.n	80092de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b03      	cmp	r3, #3
 8009290:	d107      	bne.n	80092a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009292:	f107 030d 	add.w	r3, r7, #13
 8009296:	2201      	movs	r2, #1
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f001 fd28 	bl	800acf0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092a0:	e01d      	b.n	80092de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80092a2:	6839      	ldr	r1, [r7, #0]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f001 fca6 	bl	800abf6 <USBD_CtlError>
            ret = USBD_FAIL;
 80092aa:	2303      	movs	r3, #3
 80092ac:	75fb      	strb	r3, [r7, #23]
          break;
 80092ae:	e016      	b.n	80092de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	2b03      	cmp	r3, #3
 80092ba:	d00f      	beq.n	80092dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80092bc:	6839      	ldr	r1, [r7, #0]
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f001 fc99 	bl	800abf6 <USBD_CtlError>
            ret = USBD_FAIL;
 80092c4:	2303      	movs	r3, #3
 80092c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80092c8:	e008      	b.n	80092dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80092ca:	6839      	ldr	r1, [r7, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f001 fc92 	bl	800abf6 <USBD_CtlError>
          ret = USBD_FAIL;
 80092d2:	2303      	movs	r3, #3
 80092d4:	75fb      	strb	r3, [r7, #23]
          break;
 80092d6:	e002      	b.n	80092de <USBD_CDC_Setup+0x19e>
          break;
 80092d8:	bf00      	nop
 80092da:	e008      	b.n	80092ee <USBD_CDC_Setup+0x1ae>
          break;
 80092dc:	bf00      	nop
      }
      break;
 80092de:	e006      	b.n	80092ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f001 fc87 	bl	800abf6 <USBD_CtlError>
      ret = USBD_FAIL;
 80092e8:	2303      	movs	r3, #3
 80092ea:	75fb      	strb	r3, [r7, #23]
      break;
 80092ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80092ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3718      	adds	r7, #24
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	460b      	mov	r3, r1
 8009302:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800930a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	32b0      	adds	r2, #176	@ 0xb0
 8009316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800931e:	2303      	movs	r3, #3
 8009320:	e065      	b.n	80093ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	32b0      	adds	r2, #176	@ 0xb0
 800932c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009330:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009332:	78fb      	ldrb	r3, [r7, #3]
 8009334:	f003 020f 	and.w	r2, r3, #15
 8009338:	6879      	ldr	r1, [r7, #4]
 800933a:	4613      	mov	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	440b      	add	r3, r1
 8009344:	3318      	adds	r3, #24
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d02f      	beq.n	80093ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	f003 020f 	and.w	r2, r3, #15
 8009352:	6879      	ldr	r1, [r7, #4]
 8009354:	4613      	mov	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4413      	add	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	440b      	add	r3, r1
 800935e:	3318      	adds	r3, #24
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	78fb      	ldrb	r3, [r7, #3]
 8009364:	f003 010f 	and.w	r1, r3, #15
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	460b      	mov	r3, r1
 800936c:	00db      	lsls	r3, r3, #3
 800936e:	440b      	add	r3, r1
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4403      	add	r3, r0
 8009374:	331c      	adds	r3, #28
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	fbb2 f1f3 	udiv	r1, r2, r3
 800937c:	fb01 f303 	mul.w	r3, r1, r3
 8009380:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009382:	2b00      	cmp	r3, #0
 8009384:	d112      	bne.n	80093ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009386:	78fb      	ldrb	r3, [r7, #3]
 8009388:	f003 020f 	and.w	r2, r3, #15
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	4613      	mov	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4413      	add	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	440b      	add	r3, r1
 8009398:	3318      	adds	r3, #24
 800939a:	2200      	movs	r2, #0
 800939c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800939e:	78f9      	ldrb	r1, [r7, #3]
 80093a0:	2300      	movs	r3, #0
 80093a2:	2200      	movs	r2, #0
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f002 f9ea 	bl	800b77e <USBD_LL_Transmit>
 80093aa:	e01f      	b.n	80093ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	33b0      	adds	r3, #176	@ 0xb0
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d010      	beq.n	80093ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	33b0      	adds	r3, #176	@ 0xb0
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80093e8:	78fa      	ldrb	r2, [r7, #3]
 80093ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	460b      	mov	r3, r1
 8009400:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	32b0      	adds	r2, #176	@ 0xb0
 800940c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009410:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	32b0      	adds	r2, #176	@ 0xb0
 800941c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d101      	bne.n	8009428 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009424:	2303      	movs	r3, #3
 8009426:	e01a      	b.n	800945e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009428:	78fb      	ldrb	r3, [r7, #3]
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f002 f9e8 	bl	800b802 <USBD_LL_GetRxDataSize>
 8009432:	4602      	mov	r2, r0
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	33b0      	adds	r3, #176	@ 0xb0
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009458:	4611      	mov	r1, r2
 800945a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b084      	sub	sp, #16
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	32b0      	adds	r2, #176	@ 0xb0
 8009478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009484:	2303      	movs	r3, #3
 8009486:	e024      	b.n	80094d2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	33b0      	adds	r3, #176	@ 0xb0
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d019      	beq.n	80094d0 <USBD_CDC_EP0_RxReady+0x6a>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80094a2:	2bff      	cmp	r3, #255	@ 0xff
 80094a4:	d014      	beq.n	80094d0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	33b0      	adds	r3, #176	@ 0xb0
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	4413      	add	r3, r2
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80094be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80094c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	22ff      	movs	r2, #255	@ 0xff
 80094cc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
	...

080094dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80094e4:	2182      	movs	r1, #130	@ 0x82
 80094e6:	4818      	ldr	r0, [pc, #96]	@ (8009548 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80094e8:	f000 fd4f 	bl	8009f8a <USBD_GetEpDesc>
 80094ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80094ee:	2101      	movs	r1, #1
 80094f0:	4815      	ldr	r0, [pc, #84]	@ (8009548 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80094f2:	f000 fd4a 	bl	8009f8a <USBD_GetEpDesc>
 80094f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80094f8:	2181      	movs	r1, #129	@ 0x81
 80094fa:	4813      	ldr	r0, [pc, #76]	@ (8009548 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80094fc:	f000 fd45 	bl	8009f8a <USBD_GetEpDesc>
 8009500:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	2210      	movs	r2, #16
 800950c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d006      	beq.n	8009522 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	2200      	movs	r2, #0
 8009518:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800951c:	711a      	strb	r2, [r3, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d006      	beq.n	8009536 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009530:	711a      	strb	r2, [r3, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2243      	movs	r2, #67	@ 0x43
 800953a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800953c:	4b02      	ldr	r3, [pc, #8]	@ (8009548 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20000050 	.word	0x20000050

0800954c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009554:	2182      	movs	r1, #130	@ 0x82
 8009556:	4818      	ldr	r0, [pc, #96]	@ (80095b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009558:	f000 fd17 	bl	8009f8a <USBD_GetEpDesc>
 800955c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800955e:	2101      	movs	r1, #1
 8009560:	4815      	ldr	r0, [pc, #84]	@ (80095b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009562:	f000 fd12 	bl	8009f8a <USBD_GetEpDesc>
 8009566:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009568:	2181      	movs	r1, #129	@ 0x81
 800956a:	4813      	ldr	r0, [pc, #76]	@ (80095b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800956c:	f000 fd0d 	bl	8009f8a <USBD_GetEpDesc>
 8009570:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d002      	beq.n	800957e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	2210      	movs	r2, #16
 800957c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d006      	beq.n	8009592 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	2200      	movs	r2, #0
 8009588:	711a      	strb	r2, [r3, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	f042 0202 	orr.w	r2, r2, #2
 8009590:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d006      	beq.n	80095a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2200      	movs	r2, #0
 800959c:	711a      	strb	r2, [r3, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	f042 0202 	orr.w	r2, r2, #2
 80095a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2243      	movs	r2, #67	@ 0x43
 80095aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80095ac:	4b02      	ldr	r3, [pc, #8]	@ (80095b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	20000050 	.word	0x20000050

080095bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80095c4:	2182      	movs	r1, #130	@ 0x82
 80095c6:	4818      	ldr	r0, [pc, #96]	@ (8009628 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80095c8:	f000 fcdf 	bl	8009f8a <USBD_GetEpDesc>
 80095cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80095ce:	2101      	movs	r1, #1
 80095d0:	4815      	ldr	r0, [pc, #84]	@ (8009628 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80095d2:	f000 fcda 	bl	8009f8a <USBD_GetEpDesc>
 80095d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80095d8:	2181      	movs	r1, #129	@ 0x81
 80095da:	4813      	ldr	r0, [pc, #76]	@ (8009628 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80095dc:	f000 fcd5 	bl	8009f8a <USBD_GetEpDesc>
 80095e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d002      	beq.n	80095ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	2210      	movs	r2, #16
 80095ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d006      	beq.n	8009602 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095fc:	711a      	strb	r2, [r3, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d006      	beq.n	8009616 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2200      	movs	r2, #0
 800960c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009610:	711a      	strb	r2, [r3, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2243      	movs	r2, #67	@ 0x43
 800961a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800961c:	4b02      	ldr	r3, [pc, #8]	@ (8009628 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800961e:	4618      	mov	r0, r3
 8009620:	3718      	adds	r7, #24
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20000050 	.word	0x20000050

0800962c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	220a      	movs	r2, #10
 8009638:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800963a:	4b03      	ldr	r3, [pc, #12]	@ (8009648 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800963c:	4618      	mov	r0, r3
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	2000000c 	.word	0x2000000c

0800964c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d101      	bne.n	8009660 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800965c:	2303      	movs	r3, #3
 800965e:	e009      	b.n	8009674 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	33b0      	adds	r3, #176	@ 0xb0
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009680:	b480      	push	{r7}
 8009682:	b087      	sub	sp, #28
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	32b0      	adds	r2, #176	@ 0xb0
 8009696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800969a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e008      	b.n	80096b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	371c      	adds	r7, #28
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	32b0      	adds	r2, #176	@ 0xb0
 80096d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80096e4:	2303      	movs	r3, #3
 80096e6:	e004      	b.n	80096f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
	...

08009700 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	32b0      	adds	r2, #176	@ 0xb0
 8009712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009716:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009718:	2301      	movs	r3, #1
 800971a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009722:	2303      	movs	r3, #3
 8009724:	e025      	b.n	8009772 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800972c:	2b00      	cmp	r3, #0
 800972e:	d11f      	bne.n	8009770 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2201      	movs	r2, #1
 8009734:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009738:	4b10      	ldr	r3, [pc, #64]	@ (800977c <USBD_CDC_TransmitPacket+0x7c>)
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	f003 020f 	and.w	r2, r3, #15
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	4613      	mov	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4403      	add	r3, r0
 8009752:	3318      	adds	r3, #24
 8009754:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009756:	4b09      	ldr	r3, [pc, #36]	@ (800977c <USBD_CDC_TransmitPacket+0x7c>)
 8009758:	7819      	ldrb	r1, [r3, #0]
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f002 f809 	bl	800b77e <USBD_LL_Transmit>

    ret = USBD_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009770:	7bfb      	ldrb	r3, [r7, #15]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	20000093 	.word	0x20000093

08009780 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	32b0      	adds	r2, #176	@ 0xb0
 8009792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009796:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	32b0      	adds	r2, #176	@ 0xb0
 80097a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d101      	bne.n	80097ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80097aa:	2303      	movs	r3, #3
 80097ac:	e018      	b.n	80097e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	7c1b      	ldrb	r3, [r3, #16]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10a      	bne.n	80097cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097b6:	4b0c      	ldr	r3, [pc, #48]	@ (80097e8 <USBD_CDC_ReceivePacket+0x68>)
 80097b8:	7819      	ldrb	r1, [r3, #0]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80097c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f001 fffb 	bl	800b7c0 <USBD_LL_PrepareReceive>
 80097ca:	e008      	b.n	80097de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097cc:	4b06      	ldr	r3, [pc, #24]	@ (80097e8 <USBD_CDC_ReceivePacket+0x68>)
 80097ce:	7819      	ldrb	r1, [r3, #0]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80097d6:	2340      	movs	r3, #64	@ 0x40
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f001 fff1 	bl	800b7c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	20000094 	.word	0x20000094

080097ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	4613      	mov	r3, r2
 80097f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009800:	2303      	movs	r3, #3
 8009802:	e01f      	b.n	8009844 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d003      	beq.n	800982a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	79fa      	ldrb	r2, [r7, #7]
 8009836:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f001 fe6b 	bl	800b514 <USBD_LL_Init>
 800983e:	4603      	mov	r3, r0
 8009840:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009842:	7dfb      	ldrb	r3, [r7, #23]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3718      	adds	r7, #24
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009856:	2300      	movs	r3, #0
 8009858:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d101      	bne.n	8009864 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009860:	2303      	movs	r3, #3
 8009862:	e025      	b.n	80098b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	32ae      	adds	r2, #174	@ 0xae
 8009876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800987a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00f      	beq.n	80098a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	32ae      	adds	r2, #174	@ 0xae
 800988a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009890:	f107 020e 	add.w	r2, r7, #14
 8009894:	4610      	mov	r0, r2
 8009896:	4798      	blx	r3
 8009898:	4602      	mov	r2, r0
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f001 fe73 	bl	800b5ac <USBD_LL_Start>
 80098c6:	4603      	mov	r3, r0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80098d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80098da:	4618      	mov	r0, r3
 80098dc:	370c      	adds	r7, #12
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr

080098e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b084      	sub	sp, #16
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	460b      	mov	r3, r1
 80098f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d009      	beq.n	8009914 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	78fa      	ldrb	r2, [r7, #3]
 800990a:	4611      	mov	r1, r2
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	4798      	blx	r3
 8009910:	4603      	mov	r3, r0
 8009912:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009914:	7bfb      	ldrb	r3, [r7, #15]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b084      	sub	sp, #16
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	460b      	mov	r3, r1
 8009928:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	78fa      	ldrb	r2, [r7, #3]
 8009938:	4611      	mov	r1, r2
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	4798      	blx	r3
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009944:	2303      	movs	r3, #3
 8009946:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009948:	7bfb      	ldrb	r3, [r7, #15]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b084      	sub	sp, #16
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	4618      	mov	r0, r3
 8009966:	f001 f90c 	bl	800ab82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009978:	461a      	mov	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009986:	f003 031f 	and.w	r3, r3, #31
 800998a:	2b02      	cmp	r3, #2
 800998c:	d01a      	beq.n	80099c4 <USBD_LL_SetupStage+0x72>
 800998e:	2b02      	cmp	r3, #2
 8009990:	d822      	bhi.n	80099d8 <USBD_LL_SetupStage+0x86>
 8009992:	2b00      	cmp	r3, #0
 8009994:	d002      	beq.n	800999c <USBD_LL_SetupStage+0x4a>
 8009996:	2b01      	cmp	r3, #1
 8009998:	d00a      	beq.n	80099b0 <USBD_LL_SetupStage+0x5e>
 800999a:	e01d      	b.n	80099d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fb63 	bl	800a070 <USBD_StdDevReq>
 80099aa:	4603      	mov	r3, r0
 80099ac:	73fb      	strb	r3, [r7, #15]
      break;
 80099ae:	e020      	b.n	80099f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fbcb 	bl	800a154 <USBD_StdItfReq>
 80099be:	4603      	mov	r3, r0
 80099c0:	73fb      	strb	r3, [r7, #15]
      break;
 80099c2:	e016      	b.n	80099f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fc2d 	bl	800a22c <USBD_StdEPReq>
 80099d2:	4603      	mov	r3, r0
 80099d4:	73fb      	strb	r3, [r7, #15]
      break;
 80099d6:	e00c      	b.n	80099f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80099de:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	4619      	mov	r1, r3
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f001 fe40 	bl	800b66c <USBD_LL_StallEP>
 80099ec:	4603      	mov	r3, r0
 80099ee:	73fb      	strb	r3, [r7, #15]
      break;
 80099f0:	bf00      	nop
  }

  return ret;
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	460b      	mov	r3, r1
 8009a06:	607a      	str	r2, [r7, #4]
 8009a08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009a0e:	7afb      	ldrb	r3, [r7, #11]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d16e      	bne.n	8009af2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009a1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009a22:	2b03      	cmp	r3, #3
 8009a24:	f040 8098 	bne.w	8009b58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	689a      	ldr	r2, [r3, #8]
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d913      	bls.n	8009a5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	689a      	ldr	r2, [r3, #8]
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	1ad2      	subs	r2, r2, r3
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	68da      	ldr	r2, [r3, #12]
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	bf28      	it	cs
 8009a4e:	4613      	movcs	r3, r2
 8009a50:	461a      	mov	r2, r3
 8009a52:	6879      	ldr	r1, [r7, #4]
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f001 f994 	bl	800ad82 <USBD_CtlContinueRx>
 8009a5a:	e07d      	b.n	8009b58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009a62:	f003 031f 	and.w	r3, r3, #31
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d014      	beq.n	8009a94 <USBD_LL_DataOutStage+0x98>
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d81d      	bhi.n	8009aaa <USBD_LL_DataOutStage+0xae>
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d002      	beq.n	8009a78 <USBD_LL_DataOutStage+0x7c>
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d003      	beq.n	8009a7e <USBD_LL_DataOutStage+0x82>
 8009a76:	e018      	b.n	8009aaa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	75bb      	strb	r3, [r7, #22]
            break;
 8009a7c:	e018      	b.n	8009ab0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	4619      	mov	r1, r3
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f000 fa64 	bl	8009f56 <USBD_CoreFindIF>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	75bb      	strb	r3, [r7, #22]
            break;
 8009a92:	e00d      	b.n	8009ab0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f000 fa66 	bl	8009f70 <USBD_CoreFindEP>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	75bb      	strb	r3, [r7, #22]
            break;
 8009aa8:	e002      	b.n	8009ab0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	75bb      	strb	r3, [r7, #22]
            break;
 8009aae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009ab0:	7dbb      	ldrb	r3, [r7, #22]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d119      	bne.n	8009aea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	2b03      	cmp	r3, #3
 8009ac0:	d113      	bne.n	8009aea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009ac2:	7dba      	ldrb	r2, [r7, #22]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	32ae      	adds	r2, #174	@ 0xae
 8009ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00b      	beq.n	8009aea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009ad2:	7dba      	ldrb	r2, [r7, #22]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009ada:	7dba      	ldrb	r2, [r7, #22]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	32ae      	adds	r2, #174	@ 0xae
 8009ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f001 f95a 	bl	800ada4 <USBD_CtlSendStatus>
 8009af0:	e032      	b.n	8009b58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009af2:	7afb      	ldrb	r3, [r7, #11]
 8009af4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	4619      	mov	r1, r3
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 fa37 	bl	8009f70 <USBD_CoreFindEP>
 8009b02:	4603      	mov	r3, r0
 8009b04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b06:	7dbb      	ldrb	r3, [r7, #22]
 8009b08:	2bff      	cmp	r3, #255	@ 0xff
 8009b0a:	d025      	beq.n	8009b58 <USBD_LL_DataOutStage+0x15c>
 8009b0c:	7dbb      	ldrb	r3, [r7, #22]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d122      	bne.n	8009b58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	2b03      	cmp	r3, #3
 8009b1c:	d117      	bne.n	8009b4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009b1e:	7dba      	ldrb	r2, [r7, #22]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	32ae      	adds	r2, #174	@ 0xae
 8009b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00f      	beq.n	8009b4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009b2e:	7dba      	ldrb	r2, [r7, #22]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009b36:	7dba      	ldrb	r2, [r7, #22]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	32ae      	adds	r2, #174	@ 0xae
 8009b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b40:	699b      	ldr	r3, [r3, #24]
 8009b42:	7afa      	ldrb	r2, [r7, #11]
 8009b44:	4611      	mov	r1, r2
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	4798      	blx	r3
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009b4e:	7dfb      	ldrb	r3, [r7, #23]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009b54:	7dfb      	ldrb	r3, [r7, #23]
 8009b56:	e000      	b.n	8009b5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3718      	adds	r7, #24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b086      	sub	sp, #24
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	60f8      	str	r0, [r7, #12]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	607a      	str	r2, [r7, #4]
 8009b6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009b70:	7afb      	ldrb	r3, [r7, #11]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d16f      	bne.n	8009c56 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	3314      	adds	r3, #20
 8009b7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d15a      	bne.n	8009c3c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	689a      	ldr	r2, [r3, #8]
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d914      	bls.n	8009bbc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	689a      	ldr	r2, [r3, #8]
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	1ad2      	subs	r2, r2, r3
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	6879      	ldr	r1, [r7, #4]
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f001 f8bc 	bl	800ad26 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bae:	2300      	movs	r3, #0
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f001 fe03 	bl	800b7c0 <USBD_LL_PrepareReceive>
 8009bba:	e03f      	b.n	8009c3c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	68da      	ldr	r2, [r3, #12]
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d11c      	bne.n	8009c02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	685a      	ldr	r2, [r3, #4]
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d316      	bcc.n	8009c02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d20f      	bcs.n	8009c02 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009be2:	2200      	movs	r2, #0
 8009be4:	2100      	movs	r1, #0
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f001 f89d 	bl	800ad26 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f001 fde0 	bl	800b7c0 <USBD_LL_PrepareReceive>
 8009c00:	e01c      	b.n	8009c3c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b03      	cmp	r3, #3
 8009c0c:	d10f      	bne.n	8009c2e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d009      	beq.n	8009c2e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c2e:	2180      	movs	r1, #128	@ 0x80
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f001 fd1b 	bl	800b66c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f001 f8c7 	bl	800adca <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d03a      	beq.n	8009cbc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f7ff fe42 	bl	80098d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009c54:	e032      	b.n	8009cbc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009c56:	7afb      	ldrb	r3, [r7, #11]
 8009c58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	4619      	mov	r1, r3
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f000 f985 	bl	8009f70 <USBD_CoreFindEP>
 8009c66:	4603      	mov	r3, r0
 8009c68:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
 8009c6c:	2bff      	cmp	r3, #255	@ 0xff
 8009c6e:	d025      	beq.n	8009cbc <USBD_LL_DataInStage+0x15a>
 8009c70:	7dfb      	ldrb	r3, [r7, #23]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d122      	bne.n	8009cbc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d11c      	bne.n	8009cbc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009c82:	7dfa      	ldrb	r2, [r7, #23]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	32ae      	adds	r2, #174	@ 0xae
 8009c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d014      	beq.n	8009cbc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009c92:	7dfa      	ldrb	r2, [r7, #23]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009c9a:	7dfa      	ldrb	r2, [r7, #23]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	32ae      	adds	r2, #174	@ 0xae
 8009ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	7afa      	ldrb	r2, [r7, #11]
 8009ca8:	4611      	mov	r1, r2
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	4798      	blx	r3
 8009cae:	4603      	mov	r3, r0
 8009cb0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009cb2:	7dbb      	ldrb	r3, [r7, #22]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009cb8:	7dbb      	ldrb	r3, [r7, #22]
 8009cba:	e000      	b.n	8009cbe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3718      	adds	r7, #24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d014      	beq.n	8009d2c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00e      	beq.n	8009d2c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	6852      	ldr	r2, [r2, #4]
 8009d1a:	b2d2      	uxtb	r2, r2
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	4798      	blx	r3
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d2c:	2340      	movs	r3, #64	@ 0x40
 8009d2e:	2200      	movs	r2, #0
 8009d30:	2100      	movs	r1, #0
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f001 fc55 	bl	800b5e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2240      	movs	r2, #64	@ 0x40
 8009d44:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d48:	2340      	movs	r3, #64	@ 0x40
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	2180      	movs	r1, #128	@ 0x80
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f001 fc47 	bl	800b5e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2240      	movs	r2, #64	@ 0x40
 8009d5e:	621a      	str	r2, [r3, #32]

  return ret;
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b083      	sub	sp, #12
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	460b      	mov	r3, r1
 8009d74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	78fa      	ldrb	r2, [r7, #3]
 8009d7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	370c      	adds	r7, #12
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b083      	sub	sp, #12
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b04      	cmp	r3, #4
 8009d9c:	d006      	beq.n	8009dac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2204      	movs	r2, #4
 8009db0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	2b04      	cmp	r3, #4
 8009dd4:	d106      	bne.n	8009de4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b082      	sub	sp, #8
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b03      	cmp	r3, #3
 8009e04:	d110      	bne.n	8009e28 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00b      	beq.n	8009e28 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e16:	69db      	ldr	r3, [r3, #28]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d005      	beq.n	8009e28 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e22:	69db      	ldr	r3, [r3, #28]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b082      	sub	sp, #8
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	32ae      	adds	r2, #174	@ 0xae
 8009e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e01c      	b.n	8009e8e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	d115      	bne.n	8009e8c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	32ae      	adds	r2, #174	@ 0xae
 8009e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00b      	beq.n	8009e8c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	32ae      	adds	r2, #174	@ 0xae
 8009e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e82:	6a1b      	ldr	r3, [r3, #32]
 8009e84:	78fa      	ldrb	r2, [r7, #3]
 8009e86:	4611      	mov	r1, r2
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b082      	sub	sp, #8
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	32ae      	adds	r2, #174	@ 0xae
 8009eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d101      	bne.n	8009eb8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	e01c      	b.n	8009ef2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	2b03      	cmp	r3, #3
 8009ec2:	d115      	bne.n	8009ef0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	32ae      	adds	r2, #174	@ 0xae
 8009ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00b      	beq.n	8009ef0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	32ae      	adds	r2, #174	@ 0xae
 8009ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee8:	78fa      	ldrb	r2, [r7, #3]
 8009eea:	4611      	mov	r1, r2
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b083      	sub	sp, #12
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00e      	beq.n	8009f4c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	6852      	ldr	r2, [r2, #4]
 8009f3a:	b2d2      	uxtb	r2, r2
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	4798      	blx	r3
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b083      	sub	sp, #12
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	460b      	mov	r3, r1
 8009f60:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009f62:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009f7c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	370c      	adds	r7, #12
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b086      	sub	sp, #24
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	460b      	mov	r3, r1
 8009f94:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	885b      	ldrh	r3, [r3, #2]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	7812      	ldrb	r2, [r2, #0]
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d91f      	bls.n	8009ff0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009fb6:	e013      	b.n	8009fe0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009fb8:	f107 030a 	add.w	r3, r7, #10
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	6978      	ldr	r0, [r7, #20]
 8009fc0:	f000 f81b 	bl	8009ffa <USBD_GetNextDesc>
 8009fc4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	785b      	ldrb	r3, [r3, #1]
 8009fca:	2b05      	cmp	r3, #5
 8009fcc:	d108      	bne.n	8009fe0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	789b      	ldrb	r3, [r3, #2]
 8009fd6:	78fa      	ldrb	r2, [r7, #3]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d008      	beq.n	8009fee <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	885b      	ldrh	r3, [r3, #2]
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	897b      	ldrh	r3, [r7, #10]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d8e5      	bhi.n	8009fb8 <USBD_GetEpDesc+0x2e>
 8009fec:	e000      	b.n	8009ff0 <USBD_GetEpDesc+0x66>
          break;
 8009fee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009ff0:	693b      	ldr	r3, [r7, #16]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3718      	adds	r7, #24
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009ffa:	b480      	push	{r7}
 8009ffc:	b085      	sub	sp, #20
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	881b      	ldrh	r3, [r3, #0]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	7812      	ldrb	r2, [r2, #0]
 800a010:	4413      	add	r3, r2
 800a012:	b29a      	uxth	r2, r3
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	461a      	mov	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4413      	add	r3, r2
 800a022:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a024:	68fb      	ldr	r3, [r7, #12]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3714      	adds	r7, #20
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a032:	b480      	push	{r7}
 800a034:	b087      	sub	sp, #28
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	3301      	adds	r3, #1
 800a048:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a050:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a054:	021b      	lsls	r3, r3, #8
 800a056:	b21a      	sxth	r2, r3
 800a058:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	b21b      	sxth	r3, r3
 800a060:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a062:	89fb      	ldrh	r3, [r7, #14]
}
 800a064:	4618      	mov	r0, r3
 800a066:	371c      	adds	r7, #28
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a07a:	2300      	movs	r3, #0
 800a07c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a086:	2b40      	cmp	r3, #64	@ 0x40
 800a088:	d005      	beq.n	800a096 <USBD_StdDevReq+0x26>
 800a08a:	2b40      	cmp	r3, #64	@ 0x40
 800a08c:	d857      	bhi.n	800a13e <USBD_StdDevReq+0xce>
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00f      	beq.n	800a0b2 <USBD_StdDevReq+0x42>
 800a092:	2b20      	cmp	r3, #32
 800a094:	d153      	bne.n	800a13e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	32ae      	adds	r2, #174	@ 0xae
 800a0a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	6839      	ldr	r1, [r7, #0]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	4798      	blx	r3
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a0b0:	e04a      	b.n	800a148 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	785b      	ldrb	r3, [r3, #1]
 800a0b6:	2b09      	cmp	r3, #9
 800a0b8:	d83b      	bhi.n	800a132 <USBD_StdDevReq+0xc2>
 800a0ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c0 <USBD_StdDevReq+0x50>)
 800a0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c0:	0800a115 	.word	0x0800a115
 800a0c4:	0800a129 	.word	0x0800a129
 800a0c8:	0800a133 	.word	0x0800a133
 800a0cc:	0800a11f 	.word	0x0800a11f
 800a0d0:	0800a133 	.word	0x0800a133
 800a0d4:	0800a0f3 	.word	0x0800a0f3
 800a0d8:	0800a0e9 	.word	0x0800a0e9
 800a0dc:	0800a133 	.word	0x0800a133
 800a0e0:	0800a10b 	.word	0x0800a10b
 800a0e4:	0800a0fd 	.word	0x0800a0fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fa3c 	bl	800a568 <USBD_GetDescriptor>
          break;
 800a0f0:	e024      	b.n	800a13c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 fba1 	bl	800a83c <USBD_SetAddress>
          break;
 800a0fa:	e01f      	b.n	800a13c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a0fc:	6839      	ldr	r1, [r7, #0]
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fbe0 	bl	800a8c4 <USBD_SetConfig>
 800a104:	4603      	mov	r3, r0
 800a106:	73fb      	strb	r3, [r7, #15]
          break;
 800a108:	e018      	b.n	800a13c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a10a:	6839      	ldr	r1, [r7, #0]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 fc83 	bl	800aa18 <USBD_GetConfig>
          break;
 800a112:	e013      	b.n	800a13c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a114:	6839      	ldr	r1, [r7, #0]
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fcb4 	bl	800aa84 <USBD_GetStatus>
          break;
 800a11c:	e00e      	b.n	800a13c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a11e:	6839      	ldr	r1, [r7, #0]
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 fce3 	bl	800aaec <USBD_SetFeature>
          break;
 800a126:	e009      	b.n	800a13c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a128:	6839      	ldr	r1, [r7, #0]
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fd07 	bl	800ab3e <USBD_ClrFeature>
          break;
 800a130:	e004      	b.n	800a13c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a132:	6839      	ldr	r1, [r7, #0]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fd5e 	bl	800abf6 <USBD_CtlError>
          break;
 800a13a:	bf00      	nop
      }
      break;
 800a13c:	e004      	b.n	800a148 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a13e:	6839      	ldr	r1, [r7, #0]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fd58 	bl	800abf6 <USBD_CtlError>
      break;
 800a146:	bf00      	nop
  }

  return ret;
 800a148:	7bfb      	ldrb	r3, [r7, #15]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop

0800a154 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a15e:	2300      	movs	r3, #0
 800a160:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a16a:	2b40      	cmp	r3, #64	@ 0x40
 800a16c:	d005      	beq.n	800a17a <USBD_StdItfReq+0x26>
 800a16e:	2b40      	cmp	r3, #64	@ 0x40
 800a170:	d852      	bhi.n	800a218 <USBD_StdItfReq+0xc4>
 800a172:	2b00      	cmp	r3, #0
 800a174:	d001      	beq.n	800a17a <USBD_StdItfReq+0x26>
 800a176:	2b20      	cmp	r3, #32
 800a178:	d14e      	bne.n	800a218 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a180:	b2db      	uxtb	r3, r3
 800a182:	3b01      	subs	r3, #1
 800a184:	2b02      	cmp	r3, #2
 800a186:	d840      	bhi.n	800a20a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	889b      	ldrh	r3, [r3, #4]
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d836      	bhi.n	800a200 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	889b      	ldrh	r3, [r3, #4]
 800a196:	b2db      	uxtb	r3, r3
 800a198:	4619      	mov	r1, r3
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f7ff fedb 	bl	8009f56 <USBD_CoreFindIF>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1a4:	7bbb      	ldrb	r3, [r7, #14]
 800a1a6:	2bff      	cmp	r3, #255	@ 0xff
 800a1a8:	d01d      	beq.n	800a1e6 <USBD_StdItfReq+0x92>
 800a1aa:	7bbb      	ldrb	r3, [r7, #14]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d11a      	bne.n	800a1e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a1b0:	7bba      	ldrb	r2, [r7, #14]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	32ae      	adds	r2, #174	@ 0xae
 800a1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d00f      	beq.n	800a1e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a1c0:	7bba      	ldrb	r2, [r7, #14]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a1c8:	7bba      	ldrb	r2, [r7, #14]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	32ae      	adds	r2, #174	@ 0xae
 800a1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	6839      	ldr	r1, [r7, #0]
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	4798      	blx	r3
 800a1da:	4603      	mov	r3, r0
 800a1dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a1de:	e004      	b.n	800a1ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a1e4:	e001      	b.n	800a1ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	88db      	ldrh	r3, [r3, #6]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d110      	bne.n	800a214 <USBD_StdItfReq+0xc0>
 800a1f2:	7bfb      	ldrb	r3, [r7, #15]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d10d      	bne.n	800a214 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fdd3 	bl	800ada4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a1fe:	e009      	b.n	800a214 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a200:	6839      	ldr	r1, [r7, #0]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fcf7 	bl	800abf6 <USBD_CtlError>
          break;
 800a208:	e004      	b.n	800a214 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a20a:	6839      	ldr	r1, [r7, #0]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fcf2 	bl	800abf6 <USBD_CtlError>
          break;
 800a212:	e000      	b.n	800a216 <USBD_StdItfReq+0xc2>
          break;
 800a214:	bf00      	nop
      }
      break;
 800a216:	e004      	b.n	800a222 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a218:	6839      	ldr	r1, [r7, #0]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fceb 	bl	800abf6 <USBD_CtlError>
      break;
 800a220:	bf00      	nop
  }

  return ret;
 800a222:	7bfb      	ldrb	r3, [r7, #15]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	889b      	ldrh	r3, [r3, #4]
 800a23e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a248:	2b40      	cmp	r3, #64	@ 0x40
 800a24a:	d007      	beq.n	800a25c <USBD_StdEPReq+0x30>
 800a24c:	2b40      	cmp	r3, #64	@ 0x40
 800a24e:	f200 817f 	bhi.w	800a550 <USBD_StdEPReq+0x324>
 800a252:	2b00      	cmp	r3, #0
 800a254:	d02a      	beq.n	800a2ac <USBD_StdEPReq+0x80>
 800a256:	2b20      	cmp	r3, #32
 800a258:	f040 817a 	bne.w	800a550 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a25c:	7bbb      	ldrb	r3, [r7, #14]
 800a25e:	4619      	mov	r1, r3
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f7ff fe85 	bl	8009f70 <USBD_CoreFindEP>
 800a266:	4603      	mov	r3, r0
 800a268:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a26a:	7b7b      	ldrb	r3, [r7, #13]
 800a26c:	2bff      	cmp	r3, #255	@ 0xff
 800a26e:	f000 8174 	beq.w	800a55a <USBD_StdEPReq+0x32e>
 800a272:	7b7b      	ldrb	r3, [r7, #13]
 800a274:	2b00      	cmp	r3, #0
 800a276:	f040 8170 	bne.w	800a55a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a27a:	7b7a      	ldrb	r2, [r7, #13]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a282:	7b7a      	ldrb	r2, [r7, #13]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	32ae      	adds	r2, #174	@ 0xae
 800a288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	f000 8163 	beq.w	800a55a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a294:	7b7a      	ldrb	r2, [r7, #13]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	32ae      	adds	r2, #174	@ 0xae
 800a29a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	4798      	blx	r3
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a2aa:	e156      	b.n	800a55a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	785b      	ldrb	r3, [r3, #1]
 800a2b0:	2b03      	cmp	r3, #3
 800a2b2:	d008      	beq.n	800a2c6 <USBD_StdEPReq+0x9a>
 800a2b4:	2b03      	cmp	r3, #3
 800a2b6:	f300 8145 	bgt.w	800a544 <USBD_StdEPReq+0x318>
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f000 809b 	beq.w	800a3f6 <USBD_StdEPReq+0x1ca>
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d03c      	beq.n	800a33e <USBD_StdEPReq+0x112>
 800a2c4:	e13e      	b.n	800a544 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d002      	beq.n	800a2d8 <USBD_StdEPReq+0xac>
 800a2d2:	2b03      	cmp	r3, #3
 800a2d4:	d016      	beq.n	800a304 <USBD_StdEPReq+0xd8>
 800a2d6:	e02c      	b.n	800a332 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2d8:	7bbb      	ldrb	r3, [r7, #14]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00d      	beq.n	800a2fa <USBD_StdEPReq+0xce>
 800a2de:	7bbb      	ldrb	r3, [r7, #14]
 800a2e0:	2b80      	cmp	r3, #128	@ 0x80
 800a2e2:	d00a      	beq.n	800a2fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a2e4:	7bbb      	ldrb	r3, [r7, #14]
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f001 f9bf 	bl	800b66c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2ee:	2180      	movs	r1, #128	@ 0x80
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f001 f9bb 	bl	800b66c <USBD_LL_StallEP>
 800a2f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a2f8:	e020      	b.n	800a33c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fc7a 	bl	800abf6 <USBD_CtlError>
              break;
 800a302:	e01b      	b.n	800a33c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	885b      	ldrh	r3, [r3, #2]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10e      	bne.n	800a32a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a30c:	7bbb      	ldrb	r3, [r7, #14]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00b      	beq.n	800a32a <USBD_StdEPReq+0xfe>
 800a312:	7bbb      	ldrb	r3, [r7, #14]
 800a314:	2b80      	cmp	r3, #128	@ 0x80
 800a316:	d008      	beq.n	800a32a <USBD_StdEPReq+0xfe>
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	88db      	ldrh	r3, [r3, #6]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d104      	bne.n	800a32a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a320:	7bbb      	ldrb	r3, [r7, #14]
 800a322:	4619      	mov	r1, r3
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f001 f9a1 	bl	800b66c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 fd3a 	bl	800ada4 <USBD_CtlSendStatus>

              break;
 800a330:	e004      	b.n	800a33c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fc5e 	bl	800abf6 <USBD_CtlError>
              break;
 800a33a:	bf00      	nop
          }
          break;
 800a33c:	e107      	b.n	800a54e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b02      	cmp	r3, #2
 800a348:	d002      	beq.n	800a350 <USBD_StdEPReq+0x124>
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	d016      	beq.n	800a37c <USBD_StdEPReq+0x150>
 800a34e:	e04b      	b.n	800a3e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a350:	7bbb      	ldrb	r3, [r7, #14]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00d      	beq.n	800a372 <USBD_StdEPReq+0x146>
 800a356:	7bbb      	ldrb	r3, [r7, #14]
 800a358:	2b80      	cmp	r3, #128	@ 0x80
 800a35a:	d00a      	beq.n	800a372 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a35c:	7bbb      	ldrb	r3, [r7, #14]
 800a35e:	4619      	mov	r1, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f001 f983 	bl	800b66c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a366:	2180      	movs	r1, #128	@ 0x80
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f001 f97f 	bl	800b66c <USBD_LL_StallEP>
 800a36e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a370:	e040      	b.n	800a3f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a372:	6839      	ldr	r1, [r7, #0]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fc3e 	bl	800abf6 <USBD_CtlError>
              break;
 800a37a:	e03b      	b.n	800a3f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	885b      	ldrh	r3, [r3, #2]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d136      	bne.n	800a3f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a384:	7bbb      	ldrb	r3, [r7, #14]
 800a386:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d004      	beq.n	800a398 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a38e:	7bbb      	ldrb	r3, [r7, #14]
 800a390:	4619      	mov	r1, r3
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f001 f989 	bl	800b6aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fd03 	bl	800ada4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a39e:	7bbb      	ldrb	r3, [r7, #14]
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f7ff fde4 	bl	8009f70 <USBD_CoreFindEP>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3ac:	7b7b      	ldrb	r3, [r7, #13]
 800a3ae:	2bff      	cmp	r3, #255	@ 0xff
 800a3b0:	d01f      	beq.n	800a3f2 <USBD_StdEPReq+0x1c6>
 800a3b2:	7b7b      	ldrb	r3, [r7, #13]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d11c      	bne.n	800a3f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a3b8:	7b7a      	ldrb	r2, [r7, #13]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a3c0:	7b7a      	ldrb	r2, [r7, #13]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	32ae      	adds	r2, #174	@ 0xae
 800a3c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d010      	beq.n	800a3f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a3d0:	7b7a      	ldrb	r2, [r7, #13]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	32ae      	adds	r2, #174	@ 0xae
 800a3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	6839      	ldr	r1, [r7, #0]
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	4798      	blx	r3
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a3e6:	e004      	b.n	800a3f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a3e8:	6839      	ldr	r1, [r7, #0]
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fc03 	bl	800abf6 <USBD_CtlError>
              break;
 800a3f0:	e000      	b.n	800a3f4 <USBD_StdEPReq+0x1c8>
              break;
 800a3f2:	bf00      	nop
          }
          break;
 800a3f4:	e0ab      	b.n	800a54e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d002      	beq.n	800a408 <USBD_StdEPReq+0x1dc>
 800a402:	2b03      	cmp	r3, #3
 800a404:	d032      	beq.n	800a46c <USBD_StdEPReq+0x240>
 800a406:	e097      	b.n	800a538 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a408:	7bbb      	ldrb	r3, [r7, #14]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d007      	beq.n	800a41e <USBD_StdEPReq+0x1f2>
 800a40e:	7bbb      	ldrb	r3, [r7, #14]
 800a410:	2b80      	cmp	r3, #128	@ 0x80
 800a412:	d004      	beq.n	800a41e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a414:	6839      	ldr	r1, [r7, #0]
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 fbed 	bl	800abf6 <USBD_CtlError>
                break;
 800a41c:	e091      	b.n	800a542 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a41e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a422:	2b00      	cmp	r3, #0
 800a424:	da0b      	bge.n	800a43e <USBD_StdEPReq+0x212>
 800a426:	7bbb      	ldrb	r3, [r7, #14]
 800a428:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a42c:	4613      	mov	r3, r2
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	4413      	add	r3, r2
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	3310      	adds	r3, #16
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	4413      	add	r3, r2
 800a43a:	3304      	adds	r3, #4
 800a43c:	e00b      	b.n	800a456 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a43e:	7bbb      	ldrb	r3, [r7, #14]
 800a440:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a444:	4613      	mov	r3, r2
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	4413      	add	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	4413      	add	r3, r2
 800a454:	3304      	adds	r3, #4
 800a456:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2200      	movs	r2, #0
 800a45c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	2202      	movs	r2, #2
 800a462:	4619      	mov	r1, r3
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fc43 	bl	800acf0 <USBD_CtlSendData>
              break;
 800a46a:	e06a      	b.n	800a542 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a46c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a470:	2b00      	cmp	r3, #0
 800a472:	da11      	bge.n	800a498 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a474:	7bbb      	ldrb	r3, [r7, #14]
 800a476:	f003 020f 	and.w	r2, r3, #15
 800a47a:	6879      	ldr	r1, [r7, #4]
 800a47c:	4613      	mov	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	440b      	add	r3, r1
 800a486:	3324      	adds	r3, #36	@ 0x24
 800a488:	881b      	ldrh	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d117      	bne.n	800a4be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a48e:	6839      	ldr	r1, [r7, #0]
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fbb0 	bl	800abf6 <USBD_CtlError>
                  break;
 800a496:	e054      	b.n	800a542 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a498:	7bbb      	ldrb	r3, [r7, #14]
 800a49a:	f003 020f 	and.w	r2, r3, #15
 800a49e:	6879      	ldr	r1, [r7, #4]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	4413      	add	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	440b      	add	r3, r1
 800a4aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a4ae:	881b      	ldrh	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d104      	bne.n	800a4be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 fb9d 	bl	800abf6 <USBD_CtlError>
                  break;
 800a4bc:	e041      	b.n	800a542 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	da0b      	bge.n	800a4de <USBD_StdEPReq+0x2b2>
 800a4c6:	7bbb      	ldrb	r3, [r7, #14]
 800a4c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4413      	add	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	3310      	adds	r3, #16
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	4413      	add	r3, r2
 800a4da:	3304      	adds	r3, #4
 800a4dc:	e00b      	b.n	800a4f6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a4de:	7bbb      	ldrb	r3, [r7, #14]
 800a4e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a4f8:	7bbb      	ldrb	r3, [r7, #14]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d002      	beq.n	800a504 <USBD_StdEPReq+0x2d8>
 800a4fe:	7bbb      	ldrb	r3, [r7, #14]
 800a500:	2b80      	cmp	r3, #128	@ 0x80
 800a502:	d103      	bne.n	800a50c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	2200      	movs	r2, #0
 800a508:	601a      	str	r2, [r3, #0]
 800a50a:	e00e      	b.n	800a52a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a50c:	7bbb      	ldrb	r3, [r7, #14]
 800a50e:	4619      	mov	r1, r3
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f001 f8e9 	bl	800b6e8 <USBD_LL_IsStallEP>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d003      	beq.n	800a524 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	2201      	movs	r2, #1
 800a520:	601a      	str	r2, [r3, #0]
 800a522:	e002      	b.n	800a52a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	2200      	movs	r2, #0
 800a528:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	2202      	movs	r2, #2
 800a52e:	4619      	mov	r1, r3
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fbdd 	bl	800acf0 <USBD_CtlSendData>
              break;
 800a536:	e004      	b.n	800a542 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 fb5b 	bl	800abf6 <USBD_CtlError>
              break;
 800a540:	bf00      	nop
          }
          break;
 800a542:	e004      	b.n	800a54e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 fb55 	bl	800abf6 <USBD_CtlError>
          break;
 800a54c:	bf00      	nop
      }
      break;
 800a54e:	e005      	b.n	800a55c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a550:	6839      	ldr	r1, [r7, #0]
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fb4f 	bl	800abf6 <USBD_CtlError>
      break;
 800a558:	e000      	b.n	800a55c <USBD_StdEPReq+0x330>
      break;
 800a55a:	bf00      	nop
  }

  return ret;
 800a55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
	...

0800a568 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a572:	2300      	movs	r3, #0
 800a574:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a576:	2300      	movs	r3, #0
 800a578:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a57a:	2300      	movs	r3, #0
 800a57c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	885b      	ldrh	r3, [r3, #2]
 800a582:	0a1b      	lsrs	r3, r3, #8
 800a584:	b29b      	uxth	r3, r3
 800a586:	3b01      	subs	r3, #1
 800a588:	2b06      	cmp	r3, #6
 800a58a:	f200 8128 	bhi.w	800a7de <USBD_GetDescriptor+0x276>
 800a58e:	a201      	add	r2, pc, #4	@ (adr r2, 800a594 <USBD_GetDescriptor+0x2c>)
 800a590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a594:	0800a5b1 	.word	0x0800a5b1
 800a598:	0800a5c9 	.word	0x0800a5c9
 800a59c:	0800a609 	.word	0x0800a609
 800a5a0:	0800a7df 	.word	0x0800a7df
 800a5a4:	0800a7df 	.word	0x0800a7df
 800a5a8:	0800a77f 	.word	0x0800a77f
 800a5ac:	0800a7ab 	.word	0x0800a7ab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	7c12      	ldrb	r2, [r2, #16]
 800a5bc:	f107 0108 	add.w	r1, r7, #8
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	4798      	blx	r3
 800a5c4:	60f8      	str	r0, [r7, #12]
      break;
 800a5c6:	e112      	b.n	800a7ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	7c1b      	ldrb	r3, [r3, #16]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10d      	bne.n	800a5ec <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5d8:	f107 0208 	add.w	r2, r7, #8
 800a5dc:	4610      	mov	r0, r2
 800a5de:	4798      	blx	r3
 800a5e0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	2202      	movs	r2, #2
 800a5e8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a5ea:	e100      	b.n	800a7ee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f4:	f107 0208 	add.w	r2, r7, #8
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	4798      	blx	r3
 800a5fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	3301      	adds	r3, #1
 800a602:	2202      	movs	r2, #2
 800a604:	701a      	strb	r2, [r3, #0]
      break;
 800a606:	e0f2      	b.n	800a7ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	885b      	ldrh	r3, [r3, #2]
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b05      	cmp	r3, #5
 800a610:	f200 80ac 	bhi.w	800a76c <USBD_GetDescriptor+0x204>
 800a614:	a201      	add	r2, pc, #4	@ (adr r2, 800a61c <USBD_GetDescriptor+0xb4>)
 800a616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61a:	bf00      	nop
 800a61c:	0800a635 	.word	0x0800a635
 800a620:	0800a669 	.word	0x0800a669
 800a624:	0800a69d 	.word	0x0800a69d
 800a628:	0800a6d1 	.word	0x0800a6d1
 800a62c:	0800a705 	.word	0x0800a705
 800a630:	0800a739 	.word	0x0800a739
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00b      	beq.n	800a658 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	7c12      	ldrb	r2, [r2, #16]
 800a64c:	f107 0108 	add.w	r1, r7, #8
 800a650:	4610      	mov	r0, r2
 800a652:	4798      	blx	r3
 800a654:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a656:	e091      	b.n	800a77c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a658:	6839      	ldr	r1, [r7, #0]
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 facb 	bl	800abf6 <USBD_CtlError>
            err++;
 800a660:	7afb      	ldrb	r3, [r7, #11]
 800a662:	3301      	adds	r3, #1
 800a664:	72fb      	strb	r3, [r7, #11]
          break;
 800a666:	e089      	b.n	800a77c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00b      	beq.n	800a68c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	7c12      	ldrb	r2, [r2, #16]
 800a680:	f107 0108 	add.w	r1, r7, #8
 800a684:	4610      	mov	r0, r2
 800a686:	4798      	blx	r3
 800a688:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a68a:	e077      	b.n	800a77c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a68c:	6839      	ldr	r1, [r7, #0]
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fab1 	bl	800abf6 <USBD_CtlError>
            err++;
 800a694:	7afb      	ldrb	r3, [r7, #11]
 800a696:	3301      	adds	r3, #1
 800a698:	72fb      	strb	r3, [r7, #11]
          break;
 800a69a:	e06f      	b.n	800a77c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00b      	beq.n	800a6c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	7c12      	ldrb	r2, [r2, #16]
 800a6b4:	f107 0108 	add.w	r1, r7, #8
 800a6b8:	4610      	mov	r0, r2
 800a6ba:	4798      	blx	r3
 800a6bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6be:	e05d      	b.n	800a77c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6c0:	6839      	ldr	r1, [r7, #0]
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fa97 	bl	800abf6 <USBD_CtlError>
            err++;
 800a6c8:	7afb      	ldrb	r3, [r7, #11]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	72fb      	strb	r3, [r7, #11]
          break;
 800a6ce:	e055      	b.n	800a77c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00b      	beq.n	800a6f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	7c12      	ldrb	r2, [r2, #16]
 800a6e8:	f107 0108 	add.w	r1, r7, #8
 800a6ec:	4610      	mov	r0, r2
 800a6ee:	4798      	blx	r3
 800a6f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6f2:	e043      	b.n	800a77c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6f4:	6839      	ldr	r1, [r7, #0]
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fa7d 	bl	800abf6 <USBD_CtlError>
            err++;
 800a6fc:	7afb      	ldrb	r3, [r7, #11]
 800a6fe:	3301      	adds	r3, #1
 800a700:	72fb      	strb	r3, [r7, #11]
          break;
 800a702:	e03b      	b.n	800a77c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a70a:	695b      	ldr	r3, [r3, #20]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00b      	beq.n	800a728 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a716:	695b      	ldr	r3, [r3, #20]
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	7c12      	ldrb	r2, [r2, #16]
 800a71c:	f107 0108 	add.w	r1, r7, #8
 800a720:	4610      	mov	r0, r2
 800a722:	4798      	blx	r3
 800a724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a726:	e029      	b.n	800a77c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 fa63 	bl	800abf6 <USBD_CtlError>
            err++;
 800a730:	7afb      	ldrb	r3, [r7, #11]
 800a732:	3301      	adds	r3, #1
 800a734:	72fb      	strb	r3, [r7, #11]
          break;
 800a736:	e021      	b.n	800a77c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00b      	beq.n	800a75c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a74a:	699b      	ldr	r3, [r3, #24]
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	7c12      	ldrb	r2, [r2, #16]
 800a750:	f107 0108 	add.w	r1, r7, #8
 800a754:	4610      	mov	r0, r2
 800a756:	4798      	blx	r3
 800a758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a75a:	e00f      	b.n	800a77c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a75c:	6839      	ldr	r1, [r7, #0]
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 fa49 	bl	800abf6 <USBD_CtlError>
            err++;
 800a764:	7afb      	ldrb	r3, [r7, #11]
 800a766:	3301      	adds	r3, #1
 800a768:	72fb      	strb	r3, [r7, #11]
          break;
 800a76a:	e007      	b.n	800a77c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fa41 	bl	800abf6 <USBD_CtlError>
          err++;
 800a774:	7afb      	ldrb	r3, [r7, #11]
 800a776:	3301      	adds	r3, #1
 800a778:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a77a:	bf00      	nop
      }
      break;
 800a77c:	e037      	b.n	800a7ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	7c1b      	ldrb	r3, [r3, #16]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d109      	bne.n	800a79a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a78c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a78e:	f107 0208 	add.w	r2, r7, #8
 800a792:	4610      	mov	r0, r2
 800a794:	4798      	blx	r3
 800a796:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a798:	e029      	b.n	800a7ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a79a:	6839      	ldr	r1, [r7, #0]
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 fa2a 	bl	800abf6 <USBD_CtlError>
        err++;
 800a7a2:	7afb      	ldrb	r3, [r7, #11]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	72fb      	strb	r3, [r7, #11]
      break;
 800a7a8:	e021      	b.n	800a7ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	7c1b      	ldrb	r3, [r3, #16]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10d      	bne.n	800a7ce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ba:	f107 0208 	add.w	r2, r7, #8
 800a7be:	4610      	mov	r0, r2
 800a7c0:	4798      	blx	r3
 800a7c2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	2207      	movs	r2, #7
 800a7ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a7cc:	e00f      	b.n	800a7ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fa10 	bl	800abf6 <USBD_CtlError>
        err++;
 800a7d6:	7afb      	ldrb	r3, [r7, #11]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	72fb      	strb	r3, [r7, #11]
      break;
 800a7dc:	e007      	b.n	800a7ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a7de:	6839      	ldr	r1, [r7, #0]
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fa08 	bl	800abf6 <USBD_CtlError>
      err++;
 800a7e6:	7afb      	ldrb	r3, [r7, #11]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	72fb      	strb	r3, [r7, #11]
      break;
 800a7ec:	bf00      	nop
  }

  if (err != 0U)
 800a7ee:	7afb      	ldrb	r3, [r7, #11]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d11e      	bne.n	800a832 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	88db      	ldrh	r3, [r3, #6]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d016      	beq.n	800a82a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a7fc:	893b      	ldrh	r3, [r7, #8]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00e      	beq.n	800a820 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	88da      	ldrh	r2, [r3, #6]
 800a806:	893b      	ldrh	r3, [r7, #8]
 800a808:	4293      	cmp	r3, r2
 800a80a:	bf28      	it	cs
 800a80c:	4613      	movcs	r3, r2
 800a80e:	b29b      	uxth	r3, r3
 800a810:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a812:	893b      	ldrh	r3, [r7, #8]
 800a814:	461a      	mov	r2, r3
 800a816:	68f9      	ldr	r1, [r7, #12]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 fa69 	bl	800acf0 <USBD_CtlSendData>
 800a81e:	e009      	b.n	800a834 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 f9e7 	bl	800abf6 <USBD_CtlError>
 800a828:	e004      	b.n	800a834 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 faba 	bl	800ada4 <USBD_CtlSendStatus>
 800a830:	e000      	b.n	800a834 <USBD_GetDescriptor+0x2cc>
    return;
 800a832:	bf00      	nop
  }
}
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop

0800a83c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	889b      	ldrh	r3, [r3, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d131      	bne.n	800a8b2 <USBD_SetAddress+0x76>
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	88db      	ldrh	r3, [r3, #6]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d12d      	bne.n	800a8b2 <USBD_SetAddress+0x76>
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	885b      	ldrh	r3, [r3, #2]
 800a85a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a85c:	d829      	bhi.n	800a8b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	885b      	ldrh	r3, [r3, #2]
 800a862:	b2db      	uxtb	r3, r3
 800a864:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a868:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b03      	cmp	r3, #3
 800a874:	d104      	bne.n	800a880 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a876:	6839      	ldr	r1, [r7, #0]
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f9bc 	bl	800abf6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a87e:	e01d      	b.n	800a8bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	7bfa      	ldrb	r2, [r7, #15]
 800a884:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a888:	7bfb      	ldrb	r3, [r7, #15]
 800a88a:	4619      	mov	r1, r3
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 ff57 	bl	800b740 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fa86 	bl	800ada4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a898:	7bfb      	ldrb	r3, [r7, #15]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d004      	beq.n	800a8a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2202      	movs	r2, #2
 800a8a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8a6:	e009      	b.n	800a8bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8b0:	e004      	b.n	800a8bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a8b2:	6839      	ldr	r1, [r7, #0]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 f99e 	bl	800abf6 <USBD_CtlError>
  }
}
 800a8ba:	bf00      	nop
 800a8bc:	bf00      	nop
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	885b      	ldrh	r3, [r3, #2]
 800a8d6:	b2da      	uxtb	r2, r3
 800a8d8:	4b4e      	ldr	r3, [pc, #312]	@ (800aa14 <USBD_SetConfig+0x150>)
 800a8da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a8dc:	4b4d      	ldr	r3, [pc, #308]	@ (800aa14 <USBD_SetConfig+0x150>)
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d905      	bls.n	800a8f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a8e4:	6839      	ldr	r1, [r7, #0]
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f985 	bl	800abf6 <USBD_CtlError>
    return USBD_FAIL;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e08c      	b.n	800aa0a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d002      	beq.n	800a902 <USBD_SetConfig+0x3e>
 800a8fc:	2b03      	cmp	r3, #3
 800a8fe:	d029      	beq.n	800a954 <USBD_SetConfig+0x90>
 800a900:	e075      	b.n	800a9ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a902:	4b44      	ldr	r3, [pc, #272]	@ (800aa14 <USBD_SetConfig+0x150>)
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d020      	beq.n	800a94c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a90a:	4b42      	ldr	r3, [pc, #264]	@ (800aa14 <USBD_SetConfig+0x150>)
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a914:	4b3f      	ldr	r3, [pc, #252]	@ (800aa14 <USBD_SetConfig+0x150>)
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	4619      	mov	r1, r3
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7fe ffe3 	bl	80098e6 <USBD_SetClassConfig>
 800a920:	4603      	mov	r3, r0
 800a922:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a924:	7bfb      	ldrb	r3, [r7, #15]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d008      	beq.n	800a93c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a92a:	6839      	ldr	r1, [r7, #0]
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 f962 	bl	800abf6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2202      	movs	r2, #2
 800a936:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a93a:	e065      	b.n	800aa08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 fa31 	bl	800ada4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2203      	movs	r2, #3
 800a946:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a94a:	e05d      	b.n	800aa08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 fa29 	bl	800ada4 <USBD_CtlSendStatus>
      break;
 800a952:	e059      	b.n	800aa08 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a954:	4b2f      	ldr	r3, [pc, #188]	@ (800aa14 <USBD_SetConfig+0x150>)
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d112      	bne.n	800a982 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2202      	movs	r2, #2
 800a960:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a964:	4b2b      	ldr	r3, [pc, #172]	@ (800aa14 <USBD_SetConfig+0x150>)
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	461a      	mov	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a96e:	4b29      	ldr	r3, [pc, #164]	@ (800aa14 <USBD_SetConfig+0x150>)
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	4619      	mov	r1, r3
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f7fe ffd2 	bl	800991e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fa12 	bl	800ada4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a980:	e042      	b.n	800aa08 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a982:	4b24      	ldr	r3, [pc, #144]	@ (800aa14 <USBD_SetConfig+0x150>)
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	461a      	mov	r2, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d02a      	beq.n	800a9e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	b2db      	uxtb	r3, r3
 800a996:	4619      	mov	r1, r3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f7fe ffc0 	bl	800991e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a99e:	4b1d      	ldr	r3, [pc, #116]	@ (800aa14 <USBD_SetConfig+0x150>)
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a9a8:	4b1a      	ldr	r3, [pc, #104]	@ (800aa14 <USBD_SetConfig+0x150>)
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f7fe ff99 	bl	80098e6 <USBD_SetClassConfig>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a9b8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00f      	beq.n	800a9de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a9be:	6839      	ldr	r1, [r7, #0]
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f918 	bl	800abf6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7fe ffa5 	bl	800991e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2202      	movs	r2, #2
 800a9d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a9dc:	e014      	b.n	800aa08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 f9e0 	bl	800ada4 <USBD_CtlSendStatus>
      break;
 800a9e4:	e010      	b.n	800aa08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 f9dc 	bl	800ada4 <USBD_CtlSendStatus>
      break;
 800a9ec:	e00c      	b.n	800aa08 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a9ee:	6839      	ldr	r1, [r7, #0]
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 f900 	bl	800abf6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a9f6:	4b07      	ldr	r3, [pc, #28]	@ (800aa14 <USBD_SetConfig+0x150>)
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f7fe ff8e 	bl	800991e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aa02:	2303      	movs	r3, #3
 800aa04:	73fb      	strb	r3, [r7, #15]
      break;
 800aa06:	bf00      	nop
  }

  return ret;
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	200004ec 	.word	0x200004ec

0800aa18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	88db      	ldrh	r3, [r3, #6]
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d004      	beq.n	800aa34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 f8e2 	bl	800abf6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aa32:	e023      	b.n	800aa7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	dc02      	bgt.n	800aa46 <USBD_GetConfig+0x2e>
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	dc03      	bgt.n	800aa4c <USBD_GetConfig+0x34>
 800aa44:	e015      	b.n	800aa72 <USBD_GetConfig+0x5a>
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d00b      	beq.n	800aa62 <USBD_GetConfig+0x4a>
 800aa4a:	e012      	b.n	800aa72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	3308      	adds	r3, #8
 800aa56:	2201      	movs	r2, #1
 800aa58:	4619      	mov	r1, r3
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 f948 	bl	800acf0 <USBD_CtlSendData>
        break;
 800aa60:	e00c      	b.n	800aa7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	3304      	adds	r3, #4
 800aa66:	2201      	movs	r2, #1
 800aa68:	4619      	mov	r1, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 f940 	bl	800acf0 <USBD_CtlSendData>
        break;
 800aa70:	e004      	b.n	800aa7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 f8be 	bl	800abf6 <USBD_CtlError>
        break;
 800aa7a:	bf00      	nop
}
 800aa7c:	bf00      	nop
 800aa7e:	3708      	adds	r7, #8
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	3b01      	subs	r3, #1
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d81e      	bhi.n	800aada <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	88db      	ldrh	r3, [r3, #6]
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d004      	beq.n	800aaae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 f8a5 	bl	800abf6 <USBD_CtlError>
        break;
 800aaac:	e01a      	b.n	800aae4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2201      	movs	r2, #1
 800aab2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d005      	beq.n	800aaca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	f043 0202 	orr.w	r2, r3, #2
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	330c      	adds	r3, #12
 800aace:	2202      	movs	r2, #2
 800aad0:	4619      	mov	r1, r3
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 f90c 	bl	800acf0 <USBD_CtlSendData>
      break;
 800aad8:	e004      	b.n	800aae4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 f88a 	bl	800abf6 <USBD_CtlError>
      break;
 800aae2:	bf00      	nop
  }
}
 800aae4:	bf00      	nop
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	885b      	ldrh	r3, [r3, #2]
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d107      	bne.n	800ab0e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f94c 	bl	800ada4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ab0c:	e013      	b.n	800ab36 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	885b      	ldrh	r3, [r3, #2]
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d10b      	bne.n	800ab2e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	889b      	ldrh	r3, [r3, #4]
 800ab1a:	0a1b      	lsrs	r3, r3, #8
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 f93c 	bl	800ada4 <USBD_CtlSendStatus>
}
 800ab2c:	e003      	b.n	800ab36 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ab2e:	6839      	ldr	r1, [r7, #0]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f860 	bl	800abf6 <USBD_CtlError>
}
 800ab36:	bf00      	nop
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	3b01      	subs	r3, #1
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	d80b      	bhi.n	800ab6e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	885b      	ldrh	r3, [r3, #2]
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d10c      	bne.n	800ab78 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f91c 	bl	800ada4 <USBD_CtlSendStatus>
      }
      break;
 800ab6c:	e004      	b.n	800ab78 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 f840 	bl	800abf6 <USBD_CtlError>
      break;
 800ab76:	e000      	b.n	800ab7a <USBD_ClrFeature+0x3c>
      break;
 800ab78:	bf00      	nop
  }
}
 800ab7a:	bf00      	nop
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b084      	sub	sp, #16
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	781a      	ldrb	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	781a      	ldrb	r2, [r3, #0]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	3301      	adds	r3, #1
 800abaa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	f7ff fa40 	bl	800a032 <SWAPBYTE>
 800abb2:	4603      	mov	r3, r0
 800abb4:	461a      	mov	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	3301      	adds	r3, #1
 800abbe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	3301      	adds	r3, #1
 800abc4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f7ff fa33 	bl	800a032 <SWAPBYTE>
 800abcc:	4603      	mov	r3, r0
 800abce:	461a      	mov	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	3301      	adds	r3, #1
 800abd8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	3301      	adds	r3, #1
 800abde:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f7ff fa26 	bl	800a032 <SWAPBYTE>
 800abe6:	4603      	mov	r3, r0
 800abe8:	461a      	mov	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	80da      	strh	r2, [r3, #6]
}
 800abee:	bf00      	nop
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b082      	sub	sp, #8
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac00:	2180      	movs	r1, #128	@ 0x80
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 fd32 	bl	800b66c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac08:	2100      	movs	r1, #0
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fd2e 	bl	800b66c <USBD_LL_StallEP>
}
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b086      	sub	sp, #24
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ac24:	2300      	movs	r3, #0
 800ac26:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d042      	beq.n	800acb4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ac32:	6938      	ldr	r0, [r7, #16]
 800ac34:	f000 f842 	bl	800acbc <USBD_GetLen>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	005b      	lsls	r3, r3, #1
 800ac3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac42:	d808      	bhi.n	800ac56 <USBD_GetString+0x3e>
 800ac44:	6938      	ldr	r0, [r7, #16]
 800ac46:	f000 f839 	bl	800acbc <USBD_GetLen>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	005b      	lsls	r3, r3, #1
 800ac52:	b29a      	uxth	r2, r3
 800ac54:	e001      	b.n	800ac5a <USBD_GetString+0x42>
 800ac56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	4413      	add	r3, r2
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	7812      	ldrb	r2, [r2, #0]
 800ac68:	701a      	strb	r2, [r3, #0]
  idx++;
 800ac6a:	7dfb      	ldrb	r3, [r7, #23]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ac70:	7dfb      	ldrb	r3, [r7, #23]
 800ac72:	68ba      	ldr	r2, [r7, #8]
 800ac74:	4413      	add	r3, r2
 800ac76:	2203      	movs	r2, #3
 800ac78:	701a      	strb	r2, [r3, #0]
  idx++;
 800ac7a:	7dfb      	ldrb	r3, [r7, #23]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ac80:	e013      	b.n	800acaa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	68ba      	ldr	r2, [r7, #8]
 800ac86:	4413      	add	r3, r2
 800ac88:	693a      	ldr	r2, [r7, #16]
 800ac8a:	7812      	ldrb	r2, [r2, #0]
 800ac8c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	3301      	adds	r3, #1
 800ac92:	613b      	str	r3, [r7, #16]
    idx++;
 800ac94:	7dfb      	ldrb	r3, [r7, #23]
 800ac96:	3301      	adds	r3, #1
 800ac98:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ac9a:	7dfb      	ldrb	r3, [r7, #23]
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	4413      	add	r3, r2
 800aca0:	2200      	movs	r2, #0
 800aca2:	701a      	strb	r2, [r3, #0]
    idx++;
 800aca4:	7dfb      	ldrb	r3, [r7, #23]
 800aca6:	3301      	adds	r3, #1
 800aca8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d1e7      	bne.n	800ac82 <USBD_GetString+0x6a>
 800acb2:	e000      	b.n	800acb6 <USBD_GetString+0x9e>
    return;
 800acb4:	bf00      	nop
  }
}
 800acb6:	3718      	adds	r7, #24
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800acc4:	2300      	movs	r3, #0
 800acc6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800accc:	e005      	b.n	800acda <USBD_GetLen+0x1e>
  {
    len++;
 800acce:	7bfb      	ldrb	r3, [r7, #15]
 800acd0:	3301      	adds	r3, #1
 800acd2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	3301      	adds	r3, #1
 800acd8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1f5      	bne.n	800acce <USBD_GetLen+0x12>
  }

  return len;
 800ace2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2202      	movs	r2, #2
 800ad00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	2100      	movs	r1, #0
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f000 fd31 	bl	800b77e <USBD_LL_Transmit>

  return USBD_OK;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b084      	sub	sp, #16
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	60f8      	str	r0, [r7, #12]
 800ad2e:	60b9      	str	r1, [r7, #8]
 800ad30:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	68ba      	ldr	r2, [r7, #8]
 800ad36:	2100      	movs	r1, #0
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f000 fd20 	bl	800b77e <USBD_LL_Transmit>

  return USBD_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2203      	movs	r2, #3
 800ad58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	2100      	movs	r1, #0
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f000 fd24 	bl	800b7c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b084      	sub	sp, #16
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	60f8      	str	r0, [r7, #12]
 800ad8a:	60b9      	str	r1, [r7, #8]
 800ad8c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	2100      	movs	r1, #0
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f000 fd13 	bl	800b7c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2204      	movs	r2, #4
 800adb0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800adb4:	2300      	movs	r3, #0
 800adb6:	2200      	movs	r2, #0
 800adb8:	2100      	movs	r1, #0
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fcdf 	bl	800b77e <USBD_LL_Transmit>

  return USBD_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b082      	sub	sp, #8
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2205      	movs	r2, #5
 800add6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adda:	2300      	movs	r3, #0
 800addc:	2200      	movs	r2, #0
 800adde:	2100      	movs	r1, #0
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fced 	bl	800b7c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800adf4:	2200      	movs	r2, #0
 800adf6:	4912      	ldr	r1, [pc, #72]	@ (800ae40 <MX_USB_DEVICE_Init+0x50>)
 800adf8:	4812      	ldr	r0, [pc, #72]	@ (800ae44 <MX_USB_DEVICE_Init+0x54>)
 800adfa:	f7fe fcf7 	bl	80097ec <USBD_Init>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d001      	beq.n	800ae08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ae04:	f7f7 f87c 	bl	8001f00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ae08:	490f      	ldr	r1, [pc, #60]	@ (800ae48 <MX_USB_DEVICE_Init+0x58>)
 800ae0a:	480e      	ldr	r0, [pc, #56]	@ (800ae44 <MX_USB_DEVICE_Init+0x54>)
 800ae0c:	f7fe fd1e 	bl	800984c <USBD_RegisterClass>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ae16:	f7f7 f873 	bl	8001f00 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ae1a:	490c      	ldr	r1, [pc, #48]	@ (800ae4c <MX_USB_DEVICE_Init+0x5c>)
 800ae1c:	4809      	ldr	r0, [pc, #36]	@ (800ae44 <MX_USB_DEVICE_Init+0x54>)
 800ae1e:	f7fe fc15 	bl	800964c <USBD_CDC_RegisterInterface>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d001      	beq.n	800ae2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ae28:	f7f7 f86a 	bl	8001f00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ae2c:	4805      	ldr	r0, [pc, #20]	@ (800ae44 <MX_USB_DEVICE_Init+0x54>)
 800ae2e:	f7fe fd43 	bl	80098b8 <USBD_Start>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d001      	beq.n	800ae3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ae38:	f7f7 f862 	bl	8001f00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ae3c:	bf00      	nop
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	200000b4 	.word	0x200000b4
 800ae44:	200004f0 	.word	0x200004f0
 800ae48:	20000018 	.word	0x20000018
 800ae4c:	200000a0 	.word	0x200000a0

0800ae50 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ae54:	2200      	movs	r2, #0
 800ae56:	4905      	ldr	r1, [pc, #20]	@ (800ae6c <CDC_Init_FS+0x1c>)
 800ae58:	4805      	ldr	r0, [pc, #20]	@ (800ae70 <CDC_Init_FS+0x20>)
 800ae5a:	f7fe fc11 	bl	8009680 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ae5e:	4905      	ldr	r1, [pc, #20]	@ (800ae74 <CDC_Init_FS+0x24>)
 800ae60:	4803      	ldr	r0, [pc, #12]	@ (800ae70 <CDC_Init_FS+0x20>)
 800ae62:	f7fe fc2f 	bl	80096c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ae66:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	20000fcc 	.word	0x20000fcc
 800ae70:	200004f0 	.word	0x200004f0
 800ae74:	200007cc 	.word	0x200007cc

0800ae78 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ae7c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	4603      	mov	r3, r0
 800ae90:	6039      	str	r1, [r7, #0]
 800ae92:	71fb      	strb	r3, [r7, #7]
 800ae94:	4613      	mov	r3, r2
 800ae96:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ae98:	79fb      	ldrb	r3, [r7, #7]
 800ae9a:	2b23      	cmp	r3, #35	@ 0x23
 800ae9c:	f200 8098 	bhi.w	800afd0 <CDC_Control_FS+0x148>
 800aea0:	a201      	add	r2, pc, #4	@ (adr r2, 800aea8 <CDC_Control_FS+0x20>)
 800aea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea6:	bf00      	nop
 800aea8:	0800afd1 	.word	0x0800afd1
 800aeac:	0800afd1 	.word	0x0800afd1
 800aeb0:	0800afd1 	.word	0x0800afd1
 800aeb4:	0800afd1 	.word	0x0800afd1
 800aeb8:	0800afd1 	.word	0x0800afd1
 800aebc:	0800afd1 	.word	0x0800afd1
 800aec0:	0800afd1 	.word	0x0800afd1
 800aec4:	0800afd1 	.word	0x0800afd1
 800aec8:	0800afd1 	.word	0x0800afd1
 800aecc:	0800afd1 	.word	0x0800afd1
 800aed0:	0800afd1 	.word	0x0800afd1
 800aed4:	0800afd1 	.word	0x0800afd1
 800aed8:	0800afd1 	.word	0x0800afd1
 800aedc:	0800afd1 	.word	0x0800afd1
 800aee0:	0800afd1 	.word	0x0800afd1
 800aee4:	0800afd1 	.word	0x0800afd1
 800aee8:	0800afd1 	.word	0x0800afd1
 800aeec:	0800afd1 	.word	0x0800afd1
 800aef0:	0800afd1 	.word	0x0800afd1
 800aef4:	0800afd1 	.word	0x0800afd1
 800aef8:	0800afd1 	.word	0x0800afd1
 800aefc:	0800afd1 	.word	0x0800afd1
 800af00:	0800afd1 	.word	0x0800afd1
 800af04:	0800afd1 	.word	0x0800afd1
 800af08:	0800afd1 	.word	0x0800afd1
 800af0c:	0800afd1 	.word	0x0800afd1
 800af10:	0800afd1 	.word	0x0800afd1
 800af14:	0800afd1 	.word	0x0800afd1
 800af18:	0800afd1 	.word	0x0800afd1
 800af1c:	0800afd1 	.word	0x0800afd1
 800af20:	0800afd1 	.word	0x0800afd1
 800af24:	0800afd1 	.word	0x0800afd1
 800af28:	0800af39 	.word	0x0800af39
 800af2c:	0800af7d 	.word	0x0800af7d
 800af30:	0800afd1 	.word	0x0800afd1
 800af34:	0800afd1 	.word	0x0800afd1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	461a      	mov	r2, r3
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	3301      	adds	r3, #1
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	021b      	lsls	r3, r3, #8
 800af46:	431a      	orrs	r2, r3
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	3302      	adds	r3, #2
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	041b      	lsls	r3, r3, #16
 800af50:	431a      	orrs	r2, r3
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	3303      	adds	r3, #3
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	061b      	lsls	r3, r3, #24
 800af5a:	4313      	orrs	r3, r2
 800af5c:	461a      	mov	r2, r3
 800af5e:	4b20      	ldr	r3, [pc, #128]	@ (800afe0 <CDC_Control_FS+0x158>)
 800af60:	601a      	str	r2, [r3, #0]
      LineCoding.format = pbuf[4];
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	791a      	ldrb	r2, [r3, #4]
 800af66:	4b1e      	ldr	r3, [pc, #120]	@ (800afe0 <CDC_Control_FS+0x158>)
 800af68:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	795a      	ldrb	r2, [r3, #5]
 800af6e:	4b1c      	ldr	r3, [pc, #112]	@ (800afe0 <CDC_Control_FS+0x158>)
 800af70:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype = pbuf[6];
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	799a      	ldrb	r2, [r3, #6]
 800af76:	4b1a      	ldr	r3, [pc, #104]	@ (800afe0 <CDC_Control_FS+0x158>)
 800af78:	719a      	strb	r2, [r3, #6]
      break;
 800af7a:	e02a      	b.n	800afd2 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t) (LineCoding.bitrate);
 800af7c:	4b18      	ldr	r3, [pc, #96]	@ (800afe0 <CDC_Control_FS+0x158>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	b2da      	uxtb	r2, r3
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 800af86:	4b16      	ldr	r3, [pc, #88]	@ (800afe0 <CDC_Control_FS+0x158>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	0a1a      	lsrs	r2, r3, #8
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	3301      	adds	r3, #1
 800af90:	b2d2      	uxtb	r2, r2
 800af92:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 800af94:	4b12      	ldr	r3, [pc, #72]	@ (800afe0 <CDC_Control_FS+0x158>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	0c1a      	lsrs	r2, r3, #16
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	3302      	adds	r3, #2
 800af9e:	b2d2      	uxtb	r2, r2
 800afa0:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 800afa2:	4b0f      	ldr	r3, [pc, #60]	@ (800afe0 <CDC_Control_FS+0x158>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	0e1a      	lsrs	r2, r3, #24
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	3303      	adds	r3, #3
 800afac:	b2d2      	uxtb	r2, r2
 800afae:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	3304      	adds	r3, #4
 800afb4:	4a0a      	ldr	r2, [pc, #40]	@ (800afe0 <CDC_Control_FS+0x158>)
 800afb6:	7912      	ldrb	r2, [r2, #4]
 800afb8:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	3305      	adds	r3, #5
 800afbe:	4a08      	ldr	r2, [pc, #32]	@ (800afe0 <CDC_Control_FS+0x158>)
 800afc0:	7952      	ldrb	r2, [r2, #5]
 800afc2:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	3306      	adds	r3, #6
 800afc8:	4a05      	ldr	r2, [pc, #20]	@ (800afe0 <CDC_Control_FS+0x158>)
 800afca:	7992      	ldrb	r2, [r2, #6]
 800afcc:	701a      	strb	r2, [r3, #0]
      break;
 800afce:	e000      	b.n	800afd2 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800afd0:	bf00      	nop
  }

  return (USBD_OK);
 800afd2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	20000098 	.word	0x20000098

0800afe4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800afee:	6879      	ldr	r1, [r7, #4]
 800aff0:	4805      	ldr	r0, [pc, #20]	@ (800b008 <CDC_Receive_FS+0x24>)
 800aff2:	f7fe fb67 	bl	80096c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aff6:	4804      	ldr	r0, [pc, #16]	@ (800b008 <CDC_Receive_FS+0x24>)
 800aff8:	f7fe fbc2 	bl	8009780 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800affc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800affe:	4618      	mov	r0, r3
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	200004f0 	.word	0x200004f0

0800b00c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	460b      	mov	r3, r1
 800b016:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b018:	2300      	movs	r3, #0
 800b01a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b01c:	4b0d      	ldr	r3, [pc, #52]	@ (800b054 <CDC_Transmit_FS+0x48>)
 800b01e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b022:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d001      	beq.n	800b032 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b02e:	2301      	movs	r3, #1
 800b030:	e00b      	b.n	800b04a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b032:	887b      	ldrh	r3, [r7, #2]
 800b034:	461a      	mov	r2, r3
 800b036:	6879      	ldr	r1, [r7, #4]
 800b038:	4806      	ldr	r0, [pc, #24]	@ (800b054 <CDC_Transmit_FS+0x48>)
 800b03a:	f7fe fb21 	bl	8009680 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b03e:	4805      	ldr	r0, [pc, #20]	@ (800b054 <CDC_Transmit_FS+0x48>)
 800b040:	f7fe fb5e 	bl	8009700 <USBD_CDC_TransmitPacket>
 800b044:	4603      	mov	r3, r0
 800b046:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b048:	7bfb      	ldrb	r3, [r7, #15]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	200004f0 	.word	0x200004f0

0800b058 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b058:	b480      	push	{r7}
 800b05a:	b087      	sub	sp, #28
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	4613      	mov	r3, r2
 800b064:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b066:	2300      	movs	r3, #0
 800b068:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b06a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	371c      	adds	r7, #28
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
	...

0800b07c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	4603      	mov	r3, r0
 800b084:	6039      	str	r1, [r7, #0]
 800b086:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2212      	movs	r2, #18
 800b08c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b08e:	4b03      	ldr	r3, [pc, #12]	@ (800b09c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b090:	4618      	mov	r0, r3
 800b092:	370c      	adds	r7, #12
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr
 800b09c:	200000d0 	.word	0x200000d0

0800b0a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	6039      	str	r1, [r7, #0]
 800b0aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	2204      	movs	r2, #4
 800b0b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b0b2:	4b03      	ldr	r3, [pc, #12]	@ (800b0c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	200000e4 	.word	0x200000e4

0800b0c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	6039      	str	r1, [r7, #0]
 800b0ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b0d0:	79fb      	ldrb	r3, [r7, #7]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d105      	bne.n	800b0e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b0d6:	683a      	ldr	r2, [r7, #0]
 800b0d8:	4907      	ldr	r1, [pc, #28]	@ (800b0f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b0da:	4808      	ldr	r0, [pc, #32]	@ (800b0fc <USBD_FS_ProductStrDescriptor+0x38>)
 800b0dc:	f7ff fd9c 	bl	800ac18 <USBD_GetString>
 800b0e0:	e004      	b.n	800b0ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b0e2:	683a      	ldr	r2, [r7, #0]
 800b0e4:	4904      	ldr	r1, [pc, #16]	@ (800b0f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b0e6:	4805      	ldr	r0, [pc, #20]	@ (800b0fc <USBD_FS_ProductStrDescriptor+0x38>)
 800b0e8:	f7ff fd96 	bl	800ac18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0ec:	4b02      	ldr	r3, [pc, #8]	@ (800b0f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	200017cc 	.word	0x200017cc
 800b0fc:	0800e6f4 	.word	0x0800e6f4

0800b100 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	4603      	mov	r3, r0
 800b108:	6039      	str	r1, [r7, #0]
 800b10a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b10c:	683a      	ldr	r2, [r7, #0]
 800b10e:	4904      	ldr	r1, [pc, #16]	@ (800b120 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b110:	4804      	ldr	r0, [pc, #16]	@ (800b124 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b112:	f7ff fd81 	bl	800ac18 <USBD_GetString>
  return USBD_StrDesc;
 800b116:	4b02      	ldr	r3, [pc, #8]	@ (800b120 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	200017cc 	.word	0x200017cc
 800b124:	0800e70c 	.word	0x0800e70c

0800b128 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	4603      	mov	r3, r0
 800b130:	6039      	str	r1, [r7, #0]
 800b132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	221a      	movs	r2, #26
 800b138:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b13a:	f000 f843 	bl	800b1c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b13e:	4b02      	ldr	r3, [pc, #8]	@ (800b148 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b140:	4618      	mov	r0, r3
 800b142:	3708      	adds	r7, #8
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	200000e8 	.word	0x200000e8

0800b14c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	4603      	mov	r3, r0
 800b154:	6039      	str	r1, [r7, #0]
 800b156:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b158:	79fb      	ldrb	r3, [r7, #7]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d105      	bne.n	800b16a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b15e:	683a      	ldr	r2, [r7, #0]
 800b160:	4907      	ldr	r1, [pc, #28]	@ (800b180 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b162:	4808      	ldr	r0, [pc, #32]	@ (800b184 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b164:	f7ff fd58 	bl	800ac18 <USBD_GetString>
 800b168:	e004      	b.n	800b174 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	4904      	ldr	r1, [pc, #16]	@ (800b180 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b16e:	4805      	ldr	r0, [pc, #20]	@ (800b184 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b170:	f7ff fd52 	bl	800ac18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b174:	4b02      	ldr	r3, [pc, #8]	@ (800b180 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b176:	4618      	mov	r0, r3
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	200017cc 	.word	0x200017cc
 800b184:	0800e720 	.word	0x0800e720

0800b188 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	4603      	mov	r3, r0
 800b190:	6039      	str	r1, [r7, #0]
 800b192:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b194:	79fb      	ldrb	r3, [r7, #7]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d105      	bne.n	800b1a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	4907      	ldr	r1, [pc, #28]	@ (800b1bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b19e:	4808      	ldr	r0, [pc, #32]	@ (800b1c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b1a0:	f7ff fd3a 	bl	800ac18 <USBD_GetString>
 800b1a4:	e004      	b.n	800b1b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b1a6:	683a      	ldr	r2, [r7, #0]
 800b1a8:	4904      	ldr	r1, [pc, #16]	@ (800b1bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b1aa:	4805      	ldr	r0, [pc, #20]	@ (800b1c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b1ac:	f7ff fd34 	bl	800ac18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1b0:	4b02      	ldr	r3, [pc, #8]	@ (800b1bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	200017cc 	.word	0x200017cc
 800b1c0:	0800e72c 	.word	0x0800e72c

0800b1c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b1ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b208 <Get_SerialNum+0x44>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b1d0:	4b0e      	ldr	r3, [pc, #56]	@ (800b20c <Get_SerialNum+0x48>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b1d6:	4b0e      	ldr	r3, [pc, #56]	@ (800b210 <Get_SerialNum+0x4c>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d009      	beq.n	800b1fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b1ea:	2208      	movs	r2, #8
 800b1ec:	4909      	ldr	r1, [pc, #36]	@ (800b214 <Get_SerialNum+0x50>)
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f000 f814 	bl	800b21c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b1f4:	2204      	movs	r2, #4
 800b1f6:	4908      	ldr	r1, [pc, #32]	@ (800b218 <Get_SerialNum+0x54>)
 800b1f8:	68b8      	ldr	r0, [r7, #8]
 800b1fa:	f000 f80f 	bl	800b21c <IntToUnicode>
  }
}
 800b1fe:	bf00      	nop
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	1fff7a10 	.word	0x1fff7a10
 800b20c:	1fff7a14 	.word	0x1fff7a14
 800b210:	1fff7a18 	.word	0x1fff7a18
 800b214:	200000ea 	.word	0x200000ea
 800b218:	200000fa 	.word	0x200000fa

0800b21c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b087      	sub	sp, #28
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	4613      	mov	r3, r2
 800b228:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b22e:	2300      	movs	r3, #0
 800b230:	75fb      	strb	r3, [r7, #23]
 800b232:	e027      	b.n	800b284 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	0f1b      	lsrs	r3, r3, #28
 800b238:	2b09      	cmp	r3, #9
 800b23a:	d80b      	bhi.n	800b254 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	0f1b      	lsrs	r3, r3, #28
 800b240:	b2da      	uxtb	r2, r3
 800b242:	7dfb      	ldrb	r3, [r7, #23]
 800b244:	005b      	lsls	r3, r3, #1
 800b246:	4619      	mov	r1, r3
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	440b      	add	r3, r1
 800b24c:	3230      	adds	r2, #48	@ 0x30
 800b24e:	b2d2      	uxtb	r2, r2
 800b250:	701a      	strb	r2, [r3, #0]
 800b252:	e00a      	b.n	800b26a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	0f1b      	lsrs	r3, r3, #28
 800b258:	b2da      	uxtb	r2, r3
 800b25a:	7dfb      	ldrb	r3, [r7, #23]
 800b25c:	005b      	lsls	r3, r3, #1
 800b25e:	4619      	mov	r1, r3
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	440b      	add	r3, r1
 800b264:	3237      	adds	r2, #55	@ 0x37
 800b266:	b2d2      	uxtb	r2, r2
 800b268:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	011b      	lsls	r3, r3, #4
 800b26e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b270:	7dfb      	ldrb	r3, [r7, #23]
 800b272:	005b      	lsls	r3, r3, #1
 800b274:	3301      	adds	r3, #1
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	4413      	add	r3, r2
 800b27a:	2200      	movs	r2, #0
 800b27c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b27e:	7dfb      	ldrb	r3, [r7, #23]
 800b280:	3301      	adds	r3, #1
 800b282:	75fb      	strb	r3, [r7, #23]
 800b284:	7dfa      	ldrb	r2, [r7, #23]
 800b286:	79fb      	ldrb	r3, [r7, #7]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d3d3      	bcc.n	800b234 <IntToUnicode+0x18>
  }
}
 800b28c:	bf00      	nop
 800b28e:	bf00      	nop
 800b290:	371c      	adds	r7, #28
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
	...

0800b29c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b08a      	sub	sp, #40	@ 0x28
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2a4:	f107 0314 	add.w	r3, r7, #20
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	601a      	str	r2, [r3, #0]
 800b2ac:	605a      	str	r2, [r3, #4]
 800b2ae:	609a      	str	r2, [r3, #8]
 800b2b0:	60da      	str	r2, [r3, #12]
 800b2b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2bc:	d13a      	bne.n	800b334 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2be:	2300      	movs	r3, #0
 800b2c0:	613b      	str	r3, [r7, #16]
 800b2c2:	4b1e      	ldr	r3, [pc, #120]	@ (800b33c <HAL_PCD_MspInit+0xa0>)
 800b2c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2c6:	4a1d      	ldr	r2, [pc, #116]	@ (800b33c <HAL_PCD_MspInit+0xa0>)
 800b2c8:	f043 0301 	orr.w	r3, r3, #1
 800b2cc:	6313      	str	r3, [r2, #48]	@ 0x30
 800b2ce:	4b1b      	ldr	r3, [pc, #108]	@ (800b33c <HAL_PCD_MspInit+0xa0>)
 800b2d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2d2:	f003 0301 	and.w	r3, r3, #1
 800b2d6:	613b      	str	r3, [r7, #16]
 800b2d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b2da:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b2de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2e0:	2302      	movs	r3, #2
 800b2e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b2ec:	230a      	movs	r3, #10
 800b2ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2f0:	f107 0314 	add.w	r3, r7, #20
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	4812      	ldr	r0, [pc, #72]	@ (800b340 <HAL_PCD_MspInit+0xa4>)
 800b2f8:	f7f7 fc80 	bl	8002bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b2fc:	4b0f      	ldr	r3, [pc, #60]	@ (800b33c <HAL_PCD_MspInit+0xa0>)
 800b2fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b300:	4a0e      	ldr	r2, [pc, #56]	@ (800b33c <HAL_PCD_MspInit+0xa0>)
 800b302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b306:	6353      	str	r3, [r2, #52]	@ 0x34
 800b308:	2300      	movs	r3, #0
 800b30a:	60fb      	str	r3, [r7, #12]
 800b30c:	4b0b      	ldr	r3, [pc, #44]	@ (800b33c <HAL_PCD_MspInit+0xa0>)
 800b30e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b310:	4a0a      	ldr	r2, [pc, #40]	@ (800b33c <HAL_PCD_MspInit+0xa0>)
 800b312:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b316:	6453      	str	r3, [r2, #68]	@ 0x44
 800b318:	4b08      	ldr	r3, [pc, #32]	@ (800b33c <HAL_PCD_MspInit+0xa0>)
 800b31a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b31c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b320:	60fb      	str	r3, [r7, #12]
 800b322:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b324:	2200      	movs	r2, #0
 800b326:	2100      	movs	r1, #0
 800b328:	2043      	movs	r0, #67	@ 0x43
 800b32a:	f7f7 fc30 	bl	8002b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b32e:	2043      	movs	r0, #67	@ 0x43
 800b330:	f7f7 fc49 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b334:	bf00      	nop
 800b336:	3728      	adds	r7, #40	@ 0x28
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	40023800 	.word	0x40023800
 800b340:	40020000 	.word	0x40020000

0800b344 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b358:	4619      	mov	r1, r3
 800b35a:	4610      	mov	r0, r2
 800b35c:	f7fe faf9 	bl	8009952 <USBD_LL_SetupStage>
}
 800b360:	bf00      	nop
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	460b      	mov	r3, r1
 800b372:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b37a:	78fa      	ldrb	r2, [r7, #3]
 800b37c:	6879      	ldr	r1, [r7, #4]
 800b37e:	4613      	mov	r3, r2
 800b380:	00db      	lsls	r3, r3, #3
 800b382:	4413      	add	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	440b      	add	r3, r1
 800b388:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	78fb      	ldrb	r3, [r7, #3]
 800b390:	4619      	mov	r1, r3
 800b392:	f7fe fb33 	bl	80099fc <USBD_LL_DataOutStage>
}
 800b396:	bf00      	nop
 800b398:	3708      	adds	r7, #8
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b082      	sub	sp, #8
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b3b0:	78fa      	ldrb	r2, [r7, #3]
 800b3b2:	6879      	ldr	r1, [r7, #4]
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	00db      	lsls	r3, r3, #3
 800b3b8:	4413      	add	r3, r2
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	440b      	add	r3, r1
 800b3be:	3320      	adds	r3, #32
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	78fb      	ldrb	r3, [r7, #3]
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	f7fe fbcc 	bl	8009b62 <USBD_LL_DataInStage>
}
 800b3ca:	bf00      	nop
 800b3cc:	3708      	adds	r7, #8
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b082      	sub	sp, #8
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7fe fd06 	bl	8009df2 <USBD_LL_SOF>
}
 800b3e6:	bf00      	nop
 800b3e8:	3708      	adds	r7, #8
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b084      	sub	sp, #16
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	79db      	ldrb	r3, [r3, #7]
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d001      	beq.n	800b406 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b402:	f7f6 fd7d 	bl	8001f00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b40c:	7bfa      	ldrb	r2, [r7, #15]
 800b40e:	4611      	mov	r1, r2
 800b410:	4618      	mov	r0, r3
 800b412:	f7fe fcaa 	bl	8009d6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7fe fc52 	bl	8009cc6 <USBD_LL_Reset>
}
 800b422:	bf00      	nop
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
	...

0800b42c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fe fca5 	bl	8009d8a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	6812      	ldr	r2, [r2, #0]
 800b44e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b452:	f043 0301 	orr.w	r3, r3, #1
 800b456:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	7adb      	ldrb	r3, [r3, #11]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d005      	beq.n	800b46c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b460:	4b04      	ldr	r3, [pc, #16]	@ (800b474 <HAL_PCD_SuspendCallback+0x48>)
 800b462:	691b      	ldr	r3, [r3, #16]
 800b464:	4a03      	ldr	r2, [pc, #12]	@ (800b474 <HAL_PCD_SuspendCallback+0x48>)
 800b466:	f043 0306 	orr.w	r3, r3, #6
 800b46a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b46c:	bf00      	nop
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	e000ed00 	.word	0xe000ed00

0800b478 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b486:	4618      	mov	r0, r3
 800b488:	f7fe fc9b 	bl	8009dc2 <USBD_LL_Resume>
}
 800b48c:	bf00      	nop
 800b48e:	3708      	adds	r7, #8
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	460b      	mov	r3, r1
 800b49e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b4a6:	78fa      	ldrb	r2, [r7, #3]
 800b4a8:	4611      	mov	r1, r2
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7fe fcf3 	bl	8009e96 <USBD_LL_IsoOUTIncomplete>
}
 800b4b0:	bf00      	nop
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b4ca:	78fa      	ldrb	r2, [r7, #3]
 800b4cc:	4611      	mov	r1, r2
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7fe fcaf 	bl	8009e32 <USBD_LL_IsoINIncomplete>
}
 800b4d4:	bf00      	nop
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fe fd05 	bl	8009efa <USBD_LL_DevConnected>
}
 800b4f0:	bf00      	nop
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b506:	4618      	mov	r0, r3
 800b508:	f7fe fd02 	bl	8009f10 <USBD_LL_DevDisconnected>
}
 800b50c:	bf00      	nop
 800b50e:	3708      	adds	r7, #8
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d13c      	bne.n	800b59e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b524:	4a20      	ldr	r2, [pc, #128]	@ (800b5a8 <USBD_LL_Init+0x94>)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a1e      	ldr	r2, [pc, #120]	@ (800b5a8 <USBD_LL_Init+0x94>)
 800b530:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b534:	4b1c      	ldr	r3, [pc, #112]	@ (800b5a8 <USBD_LL_Init+0x94>)
 800b536:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b53a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b53c:	4b1a      	ldr	r3, [pc, #104]	@ (800b5a8 <USBD_LL_Init+0x94>)
 800b53e:	2204      	movs	r2, #4
 800b540:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b542:	4b19      	ldr	r3, [pc, #100]	@ (800b5a8 <USBD_LL_Init+0x94>)
 800b544:	2202      	movs	r2, #2
 800b546:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b548:	4b17      	ldr	r3, [pc, #92]	@ (800b5a8 <USBD_LL_Init+0x94>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b54e:	4b16      	ldr	r3, [pc, #88]	@ (800b5a8 <USBD_LL_Init+0x94>)
 800b550:	2202      	movs	r2, #2
 800b552:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b554:	4b14      	ldr	r3, [pc, #80]	@ (800b5a8 <USBD_LL_Init+0x94>)
 800b556:	2200      	movs	r2, #0
 800b558:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b55a:	4b13      	ldr	r3, [pc, #76]	@ (800b5a8 <USBD_LL_Init+0x94>)
 800b55c:	2200      	movs	r2, #0
 800b55e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b560:	4b11      	ldr	r3, [pc, #68]	@ (800b5a8 <USBD_LL_Init+0x94>)
 800b562:	2200      	movs	r2, #0
 800b564:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b566:	4b10      	ldr	r3, [pc, #64]	@ (800b5a8 <USBD_LL_Init+0x94>)
 800b568:	2200      	movs	r2, #0
 800b56a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b56c:	4b0e      	ldr	r3, [pc, #56]	@ (800b5a8 <USBD_LL_Init+0x94>)
 800b56e:	2200      	movs	r2, #0
 800b570:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b572:	480d      	ldr	r0, [pc, #52]	@ (800b5a8 <USBD_LL_Init+0x94>)
 800b574:	f7f9 f96a 	bl	800484c <HAL_PCD_Init>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d001      	beq.n	800b582 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b57e:	f7f6 fcbf 	bl	8001f00 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b582:	2180      	movs	r1, #128	@ 0x80
 800b584:	4808      	ldr	r0, [pc, #32]	@ (800b5a8 <USBD_LL_Init+0x94>)
 800b586:	f7fa fb96 	bl	8005cb6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b58a:	2240      	movs	r2, #64	@ 0x40
 800b58c:	2100      	movs	r1, #0
 800b58e:	4806      	ldr	r0, [pc, #24]	@ (800b5a8 <USBD_LL_Init+0x94>)
 800b590:	f7fa fb4a 	bl	8005c28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b594:	2280      	movs	r2, #128	@ 0x80
 800b596:	2101      	movs	r1, #1
 800b598:	4803      	ldr	r0, [pc, #12]	@ (800b5a8 <USBD_LL_Init+0x94>)
 800b59a:	f7fa fb45 	bl	8005c28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	200019cc 	.word	0x200019cc

0800b5ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7f9 fa51 	bl	8004a6a <HAL_PCD_Start>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f000 f942 	bl	800b858 <USBD_Get_USB_Status>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b084      	sub	sp, #16
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
 800b5ea:	4608      	mov	r0, r1
 800b5ec:	4611      	mov	r1, r2
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	70fb      	strb	r3, [r7, #3]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	70bb      	strb	r3, [r7, #2]
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b600:	2300      	movs	r3, #0
 800b602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b60a:	78bb      	ldrb	r3, [r7, #2]
 800b60c:	883a      	ldrh	r2, [r7, #0]
 800b60e:	78f9      	ldrb	r1, [r7, #3]
 800b610:	f7f9 ff25 	bl	800545e <HAL_PCD_EP_Open>
 800b614:	4603      	mov	r3, r0
 800b616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b618:	7bfb      	ldrb	r3, [r7, #15]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 f91c 	bl	800b858 <USBD_Get_USB_Status>
 800b620:	4603      	mov	r3, r0
 800b622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b624:	7bbb      	ldrb	r3, [r7, #14]
}
 800b626:	4618      	mov	r0, r3
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b084      	sub	sp, #16
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
 800b636:	460b      	mov	r3, r1
 800b638:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b63a:	2300      	movs	r3, #0
 800b63c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b63e:	2300      	movs	r3, #0
 800b640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b648:	78fa      	ldrb	r2, [r7, #3]
 800b64a:	4611      	mov	r1, r2
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7f9 ff70 	bl	8005532 <HAL_PCD_EP_Close>
 800b652:	4603      	mov	r3, r0
 800b654:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b656:	7bfb      	ldrb	r3, [r7, #15]
 800b658:	4618      	mov	r0, r3
 800b65a:	f000 f8fd 	bl	800b858 <USBD_Get_USB_Status>
 800b65e:	4603      	mov	r3, r0
 800b660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b662:	7bbb      	ldrb	r3, [r7, #14]
}
 800b664:	4618      	mov	r0, r3
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	460b      	mov	r3, r1
 800b676:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b678:	2300      	movs	r3, #0
 800b67a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b67c:	2300      	movs	r3, #0
 800b67e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b686:	78fa      	ldrb	r2, [r7, #3]
 800b688:	4611      	mov	r1, r2
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fa f828 	bl	80056e0 <HAL_PCD_EP_SetStall>
 800b690:	4603      	mov	r3, r0
 800b692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b694:	7bfb      	ldrb	r3, [r7, #15]
 800b696:	4618      	mov	r0, r3
 800b698:	f000 f8de 	bl	800b858 <USBD_Get_USB_Status>
 800b69c:	4603      	mov	r3, r0
 800b69e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b084      	sub	sp, #16
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b6c4:	78fa      	ldrb	r2, [r7, #3]
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7fa f86c 	bl	80057a6 <HAL_PCD_EP_ClrStall>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6d2:	7bfb      	ldrb	r3, [r7, #15]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f000 f8bf 	bl	800b858 <USBD_Get_USB_Status>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6de:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b6fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b6fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b700:	2b00      	cmp	r3, #0
 800b702:	da0b      	bge.n	800b71c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b704:	78fb      	ldrb	r3, [r7, #3]
 800b706:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b70a:	68f9      	ldr	r1, [r7, #12]
 800b70c:	4613      	mov	r3, r2
 800b70e:	00db      	lsls	r3, r3, #3
 800b710:	4413      	add	r3, r2
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	440b      	add	r3, r1
 800b716:	3316      	adds	r3, #22
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	e00b      	b.n	800b734 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b71c:	78fb      	ldrb	r3, [r7, #3]
 800b71e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b722:	68f9      	ldr	r1, [r7, #12]
 800b724:	4613      	mov	r3, r2
 800b726:	00db      	lsls	r3, r3, #3
 800b728:	4413      	add	r3, r2
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	440b      	add	r3, r1
 800b72e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b732:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b734:	4618      	mov	r0, r3
 800b736:	3714      	adds	r7, #20
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	460b      	mov	r3, r1
 800b74a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b750:	2300      	movs	r3, #0
 800b752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b75a:	78fa      	ldrb	r2, [r7, #3]
 800b75c:	4611      	mov	r1, r2
 800b75e:	4618      	mov	r0, r3
 800b760:	f7f9 fe59 	bl	8005416 <HAL_PCD_SetAddress>
 800b764:	4603      	mov	r3, r0
 800b766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b768:	7bfb      	ldrb	r3, [r7, #15]
 800b76a:	4618      	mov	r0, r3
 800b76c:	f000 f874 	bl	800b858 <USBD_Get_USB_Status>
 800b770:	4603      	mov	r3, r0
 800b772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b774:	7bbb      	ldrb	r3, [r7, #14]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b086      	sub	sp, #24
 800b782:	af00      	add	r7, sp, #0
 800b784:	60f8      	str	r0, [r7, #12]
 800b786:	607a      	str	r2, [r7, #4]
 800b788:	603b      	str	r3, [r7, #0]
 800b78a:	460b      	mov	r3, r1
 800b78c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b78e:	2300      	movs	r3, #0
 800b790:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b792:	2300      	movs	r3, #0
 800b794:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b79c:	7af9      	ldrb	r1, [r7, #11]
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	f7f9 ff63 	bl	800566c <HAL_PCD_EP_Transmit>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7aa:	7dfb      	ldrb	r3, [r7, #23]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f000 f853 	bl	800b858 <USBD_Get_USB_Status>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b7b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b086      	sub	sp, #24
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	607a      	str	r2, [r7, #4]
 800b7ca:	603b      	str	r3, [r7, #0]
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b7de:	7af9      	ldrb	r1, [r7, #11]
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	f7f9 feef 	bl	80055c6 <HAL_PCD_EP_Receive>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f000 f832 	bl	800b858 <USBD_Get_USB_Status>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b7f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3718      	adds	r7, #24
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b082      	sub	sp, #8
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
 800b80a:	460b      	mov	r3, r1
 800b80c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b814:	78fa      	ldrb	r2, [r7, #3]
 800b816:	4611      	mov	r1, r2
 800b818:	4618      	mov	r0, r3
 800b81a:	f7f9 ff0f 	bl	800563c <HAL_PCD_EP_GetRxCount>
 800b81e:	4603      	mov	r3, r0
}
 800b820:	4618      	mov	r0, r3
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b830:	4b03      	ldr	r3, [pc, #12]	@ (800b840 <USBD_static_malloc+0x18>)
}
 800b832:	4618      	mov	r0, r3
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	20001eb0 	.word	0x20001eb0

0800b844 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]

}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b858:	b480      	push	{r7}
 800b85a:	b085      	sub	sp, #20
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	4603      	mov	r3, r0
 800b860:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b866:	79fb      	ldrb	r3, [r7, #7]
 800b868:	2b03      	cmp	r3, #3
 800b86a:	d817      	bhi.n	800b89c <USBD_Get_USB_Status+0x44>
 800b86c:	a201      	add	r2, pc, #4	@ (adr r2, 800b874 <USBD_Get_USB_Status+0x1c>)
 800b86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b872:	bf00      	nop
 800b874:	0800b885 	.word	0x0800b885
 800b878:	0800b88b 	.word	0x0800b88b
 800b87c:	0800b891 	.word	0x0800b891
 800b880:	0800b897 	.word	0x0800b897
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b884:	2300      	movs	r3, #0
 800b886:	73fb      	strb	r3, [r7, #15]
    break;
 800b888:	e00b      	b.n	800b8a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b88a:	2303      	movs	r3, #3
 800b88c:	73fb      	strb	r3, [r7, #15]
    break;
 800b88e:	e008      	b.n	800b8a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b890:	2301      	movs	r3, #1
 800b892:	73fb      	strb	r3, [r7, #15]
    break;
 800b894:	e005      	b.n	800b8a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b896:	2303      	movs	r3, #3
 800b898:	73fb      	strb	r3, [r7, #15]
    break;
 800b89a:	e002      	b.n	800b8a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b89c:	2303      	movs	r3, #3
 800b89e:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a0:	bf00      	nop
  }
  return usb_status;
 800b8a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <__cvt>:
 800b8b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b4:	ec57 6b10 	vmov	r6, r7, d0
 800b8b8:	2f00      	cmp	r7, #0
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	4619      	mov	r1, r3
 800b8be:	463b      	mov	r3, r7
 800b8c0:	bfbb      	ittet	lt
 800b8c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b8c6:	461f      	movlt	r7, r3
 800b8c8:	2300      	movge	r3, #0
 800b8ca:	232d      	movlt	r3, #45	@ 0x2d
 800b8cc:	700b      	strb	r3, [r1, #0]
 800b8ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8d0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b8d4:	4691      	mov	r9, r2
 800b8d6:	f023 0820 	bic.w	r8, r3, #32
 800b8da:	bfbc      	itt	lt
 800b8dc:	4632      	movlt	r2, r6
 800b8de:	4616      	movlt	r6, r2
 800b8e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b8e4:	d005      	beq.n	800b8f2 <__cvt+0x42>
 800b8e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b8ea:	d100      	bne.n	800b8ee <__cvt+0x3e>
 800b8ec:	3401      	adds	r4, #1
 800b8ee:	2102      	movs	r1, #2
 800b8f0:	e000      	b.n	800b8f4 <__cvt+0x44>
 800b8f2:	2103      	movs	r1, #3
 800b8f4:	ab03      	add	r3, sp, #12
 800b8f6:	9301      	str	r3, [sp, #4]
 800b8f8:	ab02      	add	r3, sp, #8
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	ec47 6b10 	vmov	d0, r6, r7
 800b900:	4653      	mov	r3, sl
 800b902:	4622      	mov	r2, r4
 800b904:	f000 fe74 	bl	800c5f0 <_dtoa_r>
 800b908:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b90c:	4605      	mov	r5, r0
 800b90e:	d119      	bne.n	800b944 <__cvt+0x94>
 800b910:	f019 0f01 	tst.w	r9, #1
 800b914:	d00e      	beq.n	800b934 <__cvt+0x84>
 800b916:	eb00 0904 	add.w	r9, r0, r4
 800b91a:	2200      	movs	r2, #0
 800b91c:	2300      	movs	r3, #0
 800b91e:	4630      	mov	r0, r6
 800b920:	4639      	mov	r1, r7
 800b922:	f7f5 f8d9 	bl	8000ad8 <__aeabi_dcmpeq>
 800b926:	b108      	cbz	r0, 800b92c <__cvt+0x7c>
 800b928:	f8cd 900c 	str.w	r9, [sp, #12]
 800b92c:	2230      	movs	r2, #48	@ 0x30
 800b92e:	9b03      	ldr	r3, [sp, #12]
 800b930:	454b      	cmp	r3, r9
 800b932:	d31e      	bcc.n	800b972 <__cvt+0xc2>
 800b934:	9b03      	ldr	r3, [sp, #12]
 800b936:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b938:	1b5b      	subs	r3, r3, r5
 800b93a:	4628      	mov	r0, r5
 800b93c:	6013      	str	r3, [r2, #0]
 800b93e:	b004      	add	sp, #16
 800b940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b944:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b948:	eb00 0904 	add.w	r9, r0, r4
 800b94c:	d1e5      	bne.n	800b91a <__cvt+0x6a>
 800b94e:	7803      	ldrb	r3, [r0, #0]
 800b950:	2b30      	cmp	r3, #48	@ 0x30
 800b952:	d10a      	bne.n	800b96a <__cvt+0xba>
 800b954:	2200      	movs	r2, #0
 800b956:	2300      	movs	r3, #0
 800b958:	4630      	mov	r0, r6
 800b95a:	4639      	mov	r1, r7
 800b95c:	f7f5 f8bc 	bl	8000ad8 <__aeabi_dcmpeq>
 800b960:	b918      	cbnz	r0, 800b96a <__cvt+0xba>
 800b962:	f1c4 0401 	rsb	r4, r4, #1
 800b966:	f8ca 4000 	str.w	r4, [sl]
 800b96a:	f8da 3000 	ldr.w	r3, [sl]
 800b96e:	4499      	add	r9, r3
 800b970:	e7d3      	b.n	800b91a <__cvt+0x6a>
 800b972:	1c59      	adds	r1, r3, #1
 800b974:	9103      	str	r1, [sp, #12]
 800b976:	701a      	strb	r2, [r3, #0]
 800b978:	e7d9      	b.n	800b92e <__cvt+0x7e>

0800b97a <__exponent>:
 800b97a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b97c:	2900      	cmp	r1, #0
 800b97e:	bfba      	itte	lt
 800b980:	4249      	neglt	r1, r1
 800b982:	232d      	movlt	r3, #45	@ 0x2d
 800b984:	232b      	movge	r3, #43	@ 0x2b
 800b986:	2909      	cmp	r1, #9
 800b988:	7002      	strb	r2, [r0, #0]
 800b98a:	7043      	strb	r3, [r0, #1]
 800b98c:	dd29      	ble.n	800b9e2 <__exponent+0x68>
 800b98e:	f10d 0307 	add.w	r3, sp, #7
 800b992:	461d      	mov	r5, r3
 800b994:	270a      	movs	r7, #10
 800b996:	461a      	mov	r2, r3
 800b998:	fbb1 f6f7 	udiv	r6, r1, r7
 800b99c:	fb07 1416 	mls	r4, r7, r6, r1
 800b9a0:	3430      	adds	r4, #48	@ 0x30
 800b9a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b9a6:	460c      	mov	r4, r1
 800b9a8:	2c63      	cmp	r4, #99	@ 0x63
 800b9aa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b9ae:	4631      	mov	r1, r6
 800b9b0:	dcf1      	bgt.n	800b996 <__exponent+0x1c>
 800b9b2:	3130      	adds	r1, #48	@ 0x30
 800b9b4:	1e94      	subs	r4, r2, #2
 800b9b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b9ba:	1c41      	adds	r1, r0, #1
 800b9bc:	4623      	mov	r3, r4
 800b9be:	42ab      	cmp	r3, r5
 800b9c0:	d30a      	bcc.n	800b9d8 <__exponent+0x5e>
 800b9c2:	f10d 0309 	add.w	r3, sp, #9
 800b9c6:	1a9b      	subs	r3, r3, r2
 800b9c8:	42ac      	cmp	r4, r5
 800b9ca:	bf88      	it	hi
 800b9cc:	2300      	movhi	r3, #0
 800b9ce:	3302      	adds	r3, #2
 800b9d0:	4403      	add	r3, r0
 800b9d2:	1a18      	subs	r0, r3, r0
 800b9d4:	b003      	add	sp, #12
 800b9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b9dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b9e0:	e7ed      	b.n	800b9be <__exponent+0x44>
 800b9e2:	2330      	movs	r3, #48	@ 0x30
 800b9e4:	3130      	adds	r1, #48	@ 0x30
 800b9e6:	7083      	strb	r3, [r0, #2]
 800b9e8:	70c1      	strb	r1, [r0, #3]
 800b9ea:	1d03      	adds	r3, r0, #4
 800b9ec:	e7f1      	b.n	800b9d2 <__exponent+0x58>
	...

0800b9f0 <_printf_float>:
 800b9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	b08d      	sub	sp, #52	@ 0x34
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b9fc:	4616      	mov	r6, r2
 800b9fe:	461f      	mov	r7, r3
 800ba00:	4605      	mov	r5, r0
 800ba02:	f000 fcf5 	bl	800c3f0 <_localeconv_r>
 800ba06:	6803      	ldr	r3, [r0, #0]
 800ba08:	9304      	str	r3, [sp, #16]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7f4 fc38 	bl	8000280 <strlen>
 800ba10:	2300      	movs	r3, #0
 800ba12:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba14:	f8d8 3000 	ldr.w	r3, [r8]
 800ba18:	9005      	str	r0, [sp, #20]
 800ba1a:	3307      	adds	r3, #7
 800ba1c:	f023 0307 	bic.w	r3, r3, #7
 800ba20:	f103 0208 	add.w	r2, r3, #8
 800ba24:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ba28:	f8d4 b000 	ldr.w	fp, [r4]
 800ba2c:	f8c8 2000 	str.w	r2, [r8]
 800ba30:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba34:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ba38:	9307      	str	r3, [sp, #28]
 800ba3a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba3e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ba42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba46:	4b9c      	ldr	r3, [pc, #624]	@ (800bcb8 <_printf_float+0x2c8>)
 800ba48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba4c:	f7f5 f876 	bl	8000b3c <__aeabi_dcmpun>
 800ba50:	bb70      	cbnz	r0, 800bab0 <_printf_float+0xc0>
 800ba52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba56:	4b98      	ldr	r3, [pc, #608]	@ (800bcb8 <_printf_float+0x2c8>)
 800ba58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba5c:	f7f5 f850 	bl	8000b00 <__aeabi_dcmple>
 800ba60:	bb30      	cbnz	r0, 800bab0 <_printf_float+0xc0>
 800ba62:	2200      	movs	r2, #0
 800ba64:	2300      	movs	r3, #0
 800ba66:	4640      	mov	r0, r8
 800ba68:	4649      	mov	r1, r9
 800ba6a:	f7f5 f83f 	bl	8000aec <__aeabi_dcmplt>
 800ba6e:	b110      	cbz	r0, 800ba76 <_printf_float+0x86>
 800ba70:	232d      	movs	r3, #45	@ 0x2d
 800ba72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba76:	4a91      	ldr	r2, [pc, #580]	@ (800bcbc <_printf_float+0x2cc>)
 800ba78:	4b91      	ldr	r3, [pc, #580]	@ (800bcc0 <_printf_float+0x2d0>)
 800ba7a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ba7e:	bf8c      	ite	hi
 800ba80:	4690      	movhi	r8, r2
 800ba82:	4698      	movls	r8, r3
 800ba84:	2303      	movs	r3, #3
 800ba86:	6123      	str	r3, [r4, #16]
 800ba88:	f02b 0304 	bic.w	r3, fp, #4
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	f04f 0900 	mov.w	r9, #0
 800ba92:	9700      	str	r7, [sp, #0]
 800ba94:	4633      	mov	r3, r6
 800ba96:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ba98:	4621      	mov	r1, r4
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	f000 f9d2 	bl	800be44 <_printf_common>
 800baa0:	3001      	adds	r0, #1
 800baa2:	f040 808d 	bne.w	800bbc0 <_printf_float+0x1d0>
 800baa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800baaa:	b00d      	add	sp, #52	@ 0x34
 800baac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab0:	4642      	mov	r2, r8
 800bab2:	464b      	mov	r3, r9
 800bab4:	4640      	mov	r0, r8
 800bab6:	4649      	mov	r1, r9
 800bab8:	f7f5 f840 	bl	8000b3c <__aeabi_dcmpun>
 800babc:	b140      	cbz	r0, 800bad0 <_printf_float+0xe0>
 800babe:	464b      	mov	r3, r9
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	bfbc      	itt	lt
 800bac4:	232d      	movlt	r3, #45	@ 0x2d
 800bac6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800baca:	4a7e      	ldr	r2, [pc, #504]	@ (800bcc4 <_printf_float+0x2d4>)
 800bacc:	4b7e      	ldr	r3, [pc, #504]	@ (800bcc8 <_printf_float+0x2d8>)
 800bace:	e7d4      	b.n	800ba7a <_printf_float+0x8a>
 800bad0:	6863      	ldr	r3, [r4, #4]
 800bad2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bad6:	9206      	str	r2, [sp, #24]
 800bad8:	1c5a      	adds	r2, r3, #1
 800bada:	d13b      	bne.n	800bb54 <_printf_float+0x164>
 800badc:	2306      	movs	r3, #6
 800bade:	6063      	str	r3, [r4, #4]
 800bae0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bae4:	2300      	movs	r3, #0
 800bae6:	6022      	str	r2, [r4, #0]
 800bae8:	9303      	str	r3, [sp, #12]
 800baea:	ab0a      	add	r3, sp, #40	@ 0x28
 800baec:	e9cd a301 	strd	sl, r3, [sp, #4]
 800baf0:	ab09      	add	r3, sp, #36	@ 0x24
 800baf2:	9300      	str	r3, [sp, #0]
 800baf4:	6861      	ldr	r1, [r4, #4]
 800baf6:	ec49 8b10 	vmov	d0, r8, r9
 800bafa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bafe:	4628      	mov	r0, r5
 800bb00:	f7ff fed6 	bl	800b8b0 <__cvt>
 800bb04:	9b06      	ldr	r3, [sp, #24]
 800bb06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb08:	2b47      	cmp	r3, #71	@ 0x47
 800bb0a:	4680      	mov	r8, r0
 800bb0c:	d129      	bne.n	800bb62 <_printf_float+0x172>
 800bb0e:	1cc8      	adds	r0, r1, #3
 800bb10:	db02      	blt.n	800bb18 <_printf_float+0x128>
 800bb12:	6863      	ldr	r3, [r4, #4]
 800bb14:	4299      	cmp	r1, r3
 800bb16:	dd41      	ble.n	800bb9c <_printf_float+0x1ac>
 800bb18:	f1aa 0a02 	sub.w	sl, sl, #2
 800bb1c:	fa5f fa8a 	uxtb.w	sl, sl
 800bb20:	3901      	subs	r1, #1
 800bb22:	4652      	mov	r2, sl
 800bb24:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bb28:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb2a:	f7ff ff26 	bl	800b97a <__exponent>
 800bb2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb30:	1813      	adds	r3, r2, r0
 800bb32:	2a01      	cmp	r2, #1
 800bb34:	4681      	mov	r9, r0
 800bb36:	6123      	str	r3, [r4, #16]
 800bb38:	dc02      	bgt.n	800bb40 <_printf_float+0x150>
 800bb3a:	6822      	ldr	r2, [r4, #0]
 800bb3c:	07d2      	lsls	r2, r2, #31
 800bb3e:	d501      	bpl.n	800bb44 <_printf_float+0x154>
 800bb40:	3301      	adds	r3, #1
 800bb42:	6123      	str	r3, [r4, #16]
 800bb44:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d0a2      	beq.n	800ba92 <_printf_float+0xa2>
 800bb4c:	232d      	movs	r3, #45	@ 0x2d
 800bb4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb52:	e79e      	b.n	800ba92 <_printf_float+0xa2>
 800bb54:	9a06      	ldr	r2, [sp, #24]
 800bb56:	2a47      	cmp	r2, #71	@ 0x47
 800bb58:	d1c2      	bne.n	800bae0 <_printf_float+0xf0>
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d1c0      	bne.n	800bae0 <_printf_float+0xf0>
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e7bd      	b.n	800bade <_printf_float+0xee>
 800bb62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb66:	d9db      	bls.n	800bb20 <_printf_float+0x130>
 800bb68:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bb6c:	d118      	bne.n	800bba0 <_printf_float+0x1b0>
 800bb6e:	2900      	cmp	r1, #0
 800bb70:	6863      	ldr	r3, [r4, #4]
 800bb72:	dd0b      	ble.n	800bb8c <_printf_float+0x19c>
 800bb74:	6121      	str	r1, [r4, #16]
 800bb76:	b913      	cbnz	r3, 800bb7e <_printf_float+0x18e>
 800bb78:	6822      	ldr	r2, [r4, #0]
 800bb7a:	07d0      	lsls	r0, r2, #31
 800bb7c:	d502      	bpl.n	800bb84 <_printf_float+0x194>
 800bb7e:	3301      	adds	r3, #1
 800bb80:	440b      	add	r3, r1
 800bb82:	6123      	str	r3, [r4, #16]
 800bb84:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bb86:	f04f 0900 	mov.w	r9, #0
 800bb8a:	e7db      	b.n	800bb44 <_printf_float+0x154>
 800bb8c:	b913      	cbnz	r3, 800bb94 <_printf_float+0x1a4>
 800bb8e:	6822      	ldr	r2, [r4, #0]
 800bb90:	07d2      	lsls	r2, r2, #31
 800bb92:	d501      	bpl.n	800bb98 <_printf_float+0x1a8>
 800bb94:	3302      	adds	r3, #2
 800bb96:	e7f4      	b.n	800bb82 <_printf_float+0x192>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e7f2      	b.n	800bb82 <_printf_float+0x192>
 800bb9c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bba2:	4299      	cmp	r1, r3
 800bba4:	db05      	blt.n	800bbb2 <_printf_float+0x1c2>
 800bba6:	6823      	ldr	r3, [r4, #0]
 800bba8:	6121      	str	r1, [r4, #16]
 800bbaa:	07d8      	lsls	r0, r3, #31
 800bbac:	d5ea      	bpl.n	800bb84 <_printf_float+0x194>
 800bbae:	1c4b      	adds	r3, r1, #1
 800bbb0:	e7e7      	b.n	800bb82 <_printf_float+0x192>
 800bbb2:	2900      	cmp	r1, #0
 800bbb4:	bfd4      	ite	le
 800bbb6:	f1c1 0202 	rsble	r2, r1, #2
 800bbba:	2201      	movgt	r2, #1
 800bbbc:	4413      	add	r3, r2
 800bbbe:	e7e0      	b.n	800bb82 <_printf_float+0x192>
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	055a      	lsls	r2, r3, #21
 800bbc4:	d407      	bmi.n	800bbd6 <_printf_float+0x1e6>
 800bbc6:	6923      	ldr	r3, [r4, #16]
 800bbc8:	4642      	mov	r2, r8
 800bbca:	4631      	mov	r1, r6
 800bbcc:	4628      	mov	r0, r5
 800bbce:	47b8      	blx	r7
 800bbd0:	3001      	adds	r0, #1
 800bbd2:	d12b      	bne.n	800bc2c <_printf_float+0x23c>
 800bbd4:	e767      	b.n	800baa6 <_printf_float+0xb6>
 800bbd6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bbda:	f240 80dd 	bls.w	800bd98 <_printf_float+0x3a8>
 800bbde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	f7f4 ff77 	bl	8000ad8 <__aeabi_dcmpeq>
 800bbea:	2800      	cmp	r0, #0
 800bbec:	d033      	beq.n	800bc56 <_printf_float+0x266>
 800bbee:	4a37      	ldr	r2, [pc, #220]	@ (800bccc <_printf_float+0x2dc>)
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	47b8      	blx	r7
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	f43f af54 	beq.w	800baa6 <_printf_float+0xb6>
 800bbfe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bc02:	4543      	cmp	r3, r8
 800bc04:	db02      	blt.n	800bc0c <_printf_float+0x21c>
 800bc06:	6823      	ldr	r3, [r4, #0]
 800bc08:	07d8      	lsls	r0, r3, #31
 800bc0a:	d50f      	bpl.n	800bc2c <_printf_float+0x23c>
 800bc0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc10:	4631      	mov	r1, r6
 800bc12:	4628      	mov	r0, r5
 800bc14:	47b8      	blx	r7
 800bc16:	3001      	adds	r0, #1
 800bc18:	f43f af45 	beq.w	800baa6 <_printf_float+0xb6>
 800bc1c:	f04f 0900 	mov.w	r9, #0
 800bc20:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800bc24:	f104 0a1a 	add.w	sl, r4, #26
 800bc28:	45c8      	cmp	r8, r9
 800bc2a:	dc09      	bgt.n	800bc40 <_printf_float+0x250>
 800bc2c:	6823      	ldr	r3, [r4, #0]
 800bc2e:	079b      	lsls	r3, r3, #30
 800bc30:	f100 8103 	bmi.w	800be3a <_printf_float+0x44a>
 800bc34:	68e0      	ldr	r0, [r4, #12]
 800bc36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc38:	4298      	cmp	r0, r3
 800bc3a:	bfb8      	it	lt
 800bc3c:	4618      	movlt	r0, r3
 800bc3e:	e734      	b.n	800baaa <_printf_float+0xba>
 800bc40:	2301      	movs	r3, #1
 800bc42:	4652      	mov	r2, sl
 800bc44:	4631      	mov	r1, r6
 800bc46:	4628      	mov	r0, r5
 800bc48:	47b8      	blx	r7
 800bc4a:	3001      	adds	r0, #1
 800bc4c:	f43f af2b 	beq.w	800baa6 <_printf_float+0xb6>
 800bc50:	f109 0901 	add.w	r9, r9, #1
 800bc54:	e7e8      	b.n	800bc28 <_printf_float+0x238>
 800bc56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	dc39      	bgt.n	800bcd0 <_printf_float+0x2e0>
 800bc5c:	4a1b      	ldr	r2, [pc, #108]	@ (800bccc <_printf_float+0x2dc>)
 800bc5e:	2301      	movs	r3, #1
 800bc60:	4631      	mov	r1, r6
 800bc62:	4628      	mov	r0, r5
 800bc64:	47b8      	blx	r7
 800bc66:	3001      	adds	r0, #1
 800bc68:	f43f af1d 	beq.w	800baa6 <_printf_float+0xb6>
 800bc6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bc70:	ea59 0303 	orrs.w	r3, r9, r3
 800bc74:	d102      	bne.n	800bc7c <_printf_float+0x28c>
 800bc76:	6823      	ldr	r3, [r4, #0]
 800bc78:	07d9      	lsls	r1, r3, #31
 800bc7a:	d5d7      	bpl.n	800bc2c <_printf_float+0x23c>
 800bc7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc80:	4631      	mov	r1, r6
 800bc82:	4628      	mov	r0, r5
 800bc84:	47b8      	blx	r7
 800bc86:	3001      	adds	r0, #1
 800bc88:	f43f af0d 	beq.w	800baa6 <_printf_float+0xb6>
 800bc8c:	f04f 0a00 	mov.w	sl, #0
 800bc90:	f104 0b1a 	add.w	fp, r4, #26
 800bc94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc96:	425b      	negs	r3, r3
 800bc98:	4553      	cmp	r3, sl
 800bc9a:	dc01      	bgt.n	800bca0 <_printf_float+0x2b0>
 800bc9c:	464b      	mov	r3, r9
 800bc9e:	e793      	b.n	800bbc8 <_printf_float+0x1d8>
 800bca0:	2301      	movs	r3, #1
 800bca2:	465a      	mov	r2, fp
 800bca4:	4631      	mov	r1, r6
 800bca6:	4628      	mov	r0, r5
 800bca8:	47b8      	blx	r7
 800bcaa:	3001      	adds	r0, #1
 800bcac:	f43f aefb 	beq.w	800baa6 <_printf_float+0xb6>
 800bcb0:	f10a 0a01 	add.w	sl, sl, #1
 800bcb4:	e7ee      	b.n	800bc94 <_printf_float+0x2a4>
 800bcb6:	bf00      	nop
 800bcb8:	7fefffff 	.word	0x7fefffff
 800bcbc:	0800e758 	.word	0x0800e758
 800bcc0:	0800e754 	.word	0x0800e754
 800bcc4:	0800e760 	.word	0x0800e760
 800bcc8:	0800e75c 	.word	0x0800e75c
 800bccc:	0800e764 	.word	0x0800e764
 800bcd0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bcd2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bcd6:	4553      	cmp	r3, sl
 800bcd8:	bfa8      	it	ge
 800bcda:	4653      	movge	r3, sl
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	4699      	mov	r9, r3
 800bce0:	dc36      	bgt.n	800bd50 <_printf_float+0x360>
 800bce2:	f04f 0b00 	mov.w	fp, #0
 800bce6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcea:	f104 021a 	add.w	r2, r4, #26
 800bcee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bcf0:	9306      	str	r3, [sp, #24]
 800bcf2:	eba3 0309 	sub.w	r3, r3, r9
 800bcf6:	455b      	cmp	r3, fp
 800bcf8:	dc31      	bgt.n	800bd5e <_printf_float+0x36e>
 800bcfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcfc:	459a      	cmp	sl, r3
 800bcfe:	dc3a      	bgt.n	800bd76 <_printf_float+0x386>
 800bd00:	6823      	ldr	r3, [r4, #0]
 800bd02:	07da      	lsls	r2, r3, #31
 800bd04:	d437      	bmi.n	800bd76 <_printf_float+0x386>
 800bd06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd08:	ebaa 0903 	sub.w	r9, sl, r3
 800bd0c:	9b06      	ldr	r3, [sp, #24]
 800bd0e:	ebaa 0303 	sub.w	r3, sl, r3
 800bd12:	4599      	cmp	r9, r3
 800bd14:	bfa8      	it	ge
 800bd16:	4699      	movge	r9, r3
 800bd18:	f1b9 0f00 	cmp.w	r9, #0
 800bd1c:	dc33      	bgt.n	800bd86 <_printf_float+0x396>
 800bd1e:	f04f 0800 	mov.w	r8, #0
 800bd22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd26:	f104 0b1a 	add.w	fp, r4, #26
 800bd2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd2c:	ebaa 0303 	sub.w	r3, sl, r3
 800bd30:	eba3 0309 	sub.w	r3, r3, r9
 800bd34:	4543      	cmp	r3, r8
 800bd36:	f77f af79 	ble.w	800bc2c <_printf_float+0x23c>
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	465a      	mov	r2, fp
 800bd3e:	4631      	mov	r1, r6
 800bd40:	4628      	mov	r0, r5
 800bd42:	47b8      	blx	r7
 800bd44:	3001      	adds	r0, #1
 800bd46:	f43f aeae 	beq.w	800baa6 <_printf_float+0xb6>
 800bd4a:	f108 0801 	add.w	r8, r8, #1
 800bd4e:	e7ec      	b.n	800bd2a <_printf_float+0x33a>
 800bd50:	4642      	mov	r2, r8
 800bd52:	4631      	mov	r1, r6
 800bd54:	4628      	mov	r0, r5
 800bd56:	47b8      	blx	r7
 800bd58:	3001      	adds	r0, #1
 800bd5a:	d1c2      	bne.n	800bce2 <_printf_float+0x2f2>
 800bd5c:	e6a3      	b.n	800baa6 <_printf_float+0xb6>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	4631      	mov	r1, r6
 800bd62:	4628      	mov	r0, r5
 800bd64:	9206      	str	r2, [sp, #24]
 800bd66:	47b8      	blx	r7
 800bd68:	3001      	adds	r0, #1
 800bd6a:	f43f ae9c 	beq.w	800baa6 <_printf_float+0xb6>
 800bd6e:	9a06      	ldr	r2, [sp, #24]
 800bd70:	f10b 0b01 	add.w	fp, fp, #1
 800bd74:	e7bb      	b.n	800bcee <_printf_float+0x2fe>
 800bd76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd7a:	4631      	mov	r1, r6
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	47b8      	blx	r7
 800bd80:	3001      	adds	r0, #1
 800bd82:	d1c0      	bne.n	800bd06 <_printf_float+0x316>
 800bd84:	e68f      	b.n	800baa6 <_printf_float+0xb6>
 800bd86:	9a06      	ldr	r2, [sp, #24]
 800bd88:	464b      	mov	r3, r9
 800bd8a:	4442      	add	r2, r8
 800bd8c:	4631      	mov	r1, r6
 800bd8e:	4628      	mov	r0, r5
 800bd90:	47b8      	blx	r7
 800bd92:	3001      	adds	r0, #1
 800bd94:	d1c3      	bne.n	800bd1e <_printf_float+0x32e>
 800bd96:	e686      	b.n	800baa6 <_printf_float+0xb6>
 800bd98:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bd9c:	f1ba 0f01 	cmp.w	sl, #1
 800bda0:	dc01      	bgt.n	800bda6 <_printf_float+0x3b6>
 800bda2:	07db      	lsls	r3, r3, #31
 800bda4:	d536      	bpl.n	800be14 <_printf_float+0x424>
 800bda6:	2301      	movs	r3, #1
 800bda8:	4642      	mov	r2, r8
 800bdaa:	4631      	mov	r1, r6
 800bdac:	4628      	mov	r0, r5
 800bdae:	47b8      	blx	r7
 800bdb0:	3001      	adds	r0, #1
 800bdb2:	f43f ae78 	beq.w	800baa6 <_printf_float+0xb6>
 800bdb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdba:	4631      	mov	r1, r6
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	47b8      	blx	r7
 800bdc0:	3001      	adds	r0, #1
 800bdc2:	f43f ae70 	beq.w	800baa6 <_printf_float+0xb6>
 800bdc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bdca:	2200      	movs	r2, #0
 800bdcc:	2300      	movs	r3, #0
 800bdce:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800bdd2:	f7f4 fe81 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdd6:	b9c0      	cbnz	r0, 800be0a <_printf_float+0x41a>
 800bdd8:	4653      	mov	r3, sl
 800bdda:	f108 0201 	add.w	r2, r8, #1
 800bdde:	4631      	mov	r1, r6
 800bde0:	4628      	mov	r0, r5
 800bde2:	47b8      	blx	r7
 800bde4:	3001      	adds	r0, #1
 800bde6:	d10c      	bne.n	800be02 <_printf_float+0x412>
 800bde8:	e65d      	b.n	800baa6 <_printf_float+0xb6>
 800bdea:	2301      	movs	r3, #1
 800bdec:	465a      	mov	r2, fp
 800bdee:	4631      	mov	r1, r6
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	47b8      	blx	r7
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	f43f ae56 	beq.w	800baa6 <_printf_float+0xb6>
 800bdfa:	f108 0801 	add.w	r8, r8, #1
 800bdfe:	45d0      	cmp	r8, sl
 800be00:	dbf3      	blt.n	800bdea <_printf_float+0x3fa>
 800be02:	464b      	mov	r3, r9
 800be04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800be08:	e6df      	b.n	800bbca <_printf_float+0x1da>
 800be0a:	f04f 0800 	mov.w	r8, #0
 800be0e:	f104 0b1a 	add.w	fp, r4, #26
 800be12:	e7f4      	b.n	800bdfe <_printf_float+0x40e>
 800be14:	2301      	movs	r3, #1
 800be16:	4642      	mov	r2, r8
 800be18:	e7e1      	b.n	800bdde <_printf_float+0x3ee>
 800be1a:	2301      	movs	r3, #1
 800be1c:	464a      	mov	r2, r9
 800be1e:	4631      	mov	r1, r6
 800be20:	4628      	mov	r0, r5
 800be22:	47b8      	blx	r7
 800be24:	3001      	adds	r0, #1
 800be26:	f43f ae3e 	beq.w	800baa6 <_printf_float+0xb6>
 800be2a:	f108 0801 	add.w	r8, r8, #1
 800be2e:	68e3      	ldr	r3, [r4, #12]
 800be30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be32:	1a5b      	subs	r3, r3, r1
 800be34:	4543      	cmp	r3, r8
 800be36:	dcf0      	bgt.n	800be1a <_printf_float+0x42a>
 800be38:	e6fc      	b.n	800bc34 <_printf_float+0x244>
 800be3a:	f04f 0800 	mov.w	r8, #0
 800be3e:	f104 0919 	add.w	r9, r4, #25
 800be42:	e7f4      	b.n	800be2e <_printf_float+0x43e>

0800be44 <_printf_common>:
 800be44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be48:	4616      	mov	r6, r2
 800be4a:	4698      	mov	r8, r3
 800be4c:	688a      	ldr	r2, [r1, #8]
 800be4e:	690b      	ldr	r3, [r1, #16]
 800be50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be54:	4293      	cmp	r3, r2
 800be56:	bfb8      	it	lt
 800be58:	4613      	movlt	r3, r2
 800be5a:	6033      	str	r3, [r6, #0]
 800be5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be60:	4607      	mov	r7, r0
 800be62:	460c      	mov	r4, r1
 800be64:	b10a      	cbz	r2, 800be6a <_printf_common+0x26>
 800be66:	3301      	adds	r3, #1
 800be68:	6033      	str	r3, [r6, #0]
 800be6a:	6823      	ldr	r3, [r4, #0]
 800be6c:	0699      	lsls	r1, r3, #26
 800be6e:	bf42      	ittt	mi
 800be70:	6833      	ldrmi	r3, [r6, #0]
 800be72:	3302      	addmi	r3, #2
 800be74:	6033      	strmi	r3, [r6, #0]
 800be76:	6825      	ldr	r5, [r4, #0]
 800be78:	f015 0506 	ands.w	r5, r5, #6
 800be7c:	d106      	bne.n	800be8c <_printf_common+0x48>
 800be7e:	f104 0a19 	add.w	sl, r4, #25
 800be82:	68e3      	ldr	r3, [r4, #12]
 800be84:	6832      	ldr	r2, [r6, #0]
 800be86:	1a9b      	subs	r3, r3, r2
 800be88:	42ab      	cmp	r3, r5
 800be8a:	dc26      	bgt.n	800beda <_printf_common+0x96>
 800be8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be90:	6822      	ldr	r2, [r4, #0]
 800be92:	3b00      	subs	r3, #0
 800be94:	bf18      	it	ne
 800be96:	2301      	movne	r3, #1
 800be98:	0692      	lsls	r2, r2, #26
 800be9a:	d42b      	bmi.n	800bef4 <_printf_common+0xb0>
 800be9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bea0:	4641      	mov	r1, r8
 800bea2:	4638      	mov	r0, r7
 800bea4:	47c8      	blx	r9
 800bea6:	3001      	adds	r0, #1
 800bea8:	d01e      	beq.n	800bee8 <_printf_common+0xa4>
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	6922      	ldr	r2, [r4, #16]
 800beae:	f003 0306 	and.w	r3, r3, #6
 800beb2:	2b04      	cmp	r3, #4
 800beb4:	bf02      	ittt	eq
 800beb6:	68e5      	ldreq	r5, [r4, #12]
 800beb8:	6833      	ldreq	r3, [r6, #0]
 800beba:	1aed      	subeq	r5, r5, r3
 800bebc:	68a3      	ldr	r3, [r4, #8]
 800bebe:	bf0c      	ite	eq
 800bec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bec4:	2500      	movne	r5, #0
 800bec6:	4293      	cmp	r3, r2
 800bec8:	bfc4      	itt	gt
 800beca:	1a9b      	subgt	r3, r3, r2
 800becc:	18ed      	addgt	r5, r5, r3
 800bece:	2600      	movs	r6, #0
 800bed0:	341a      	adds	r4, #26
 800bed2:	42b5      	cmp	r5, r6
 800bed4:	d11a      	bne.n	800bf0c <_printf_common+0xc8>
 800bed6:	2000      	movs	r0, #0
 800bed8:	e008      	b.n	800beec <_printf_common+0xa8>
 800beda:	2301      	movs	r3, #1
 800bedc:	4652      	mov	r2, sl
 800bede:	4641      	mov	r1, r8
 800bee0:	4638      	mov	r0, r7
 800bee2:	47c8      	blx	r9
 800bee4:	3001      	adds	r0, #1
 800bee6:	d103      	bne.n	800bef0 <_printf_common+0xac>
 800bee8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800beec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bef0:	3501      	adds	r5, #1
 800bef2:	e7c6      	b.n	800be82 <_printf_common+0x3e>
 800bef4:	18e1      	adds	r1, r4, r3
 800bef6:	1c5a      	adds	r2, r3, #1
 800bef8:	2030      	movs	r0, #48	@ 0x30
 800befa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800befe:	4422      	add	r2, r4
 800bf00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf08:	3302      	adds	r3, #2
 800bf0a:	e7c7      	b.n	800be9c <_printf_common+0x58>
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	4622      	mov	r2, r4
 800bf10:	4641      	mov	r1, r8
 800bf12:	4638      	mov	r0, r7
 800bf14:	47c8      	blx	r9
 800bf16:	3001      	adds	r0, #1
 800bf18:	d0e6      	beq.n	800bee8 <_printf_common+0xa4>
 800bf1a:	3601      	adds	r6, #1
 800bf1c:	e7d9      	b.n	800bed2 <_printf_common+0x8e>
	...

0800bf20 <_printf_i>:
 800bf20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf24:	7e0f      	ldrb	r7, [r1, #24]
 800bf26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf28:	2f78      	cmp	r7, #120	@ 0x78
 800bf2a:	4691      	mov	r9, r2
 800bf2c:	4680      	mov	r8, r0
 800bf2e:	460c      	mov	r4, r1
 800bf30:	469a      	mov	sl, r3
 800bf32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf36:	d807      	bhi.n	800bf48 <_printf_i+0x28>
 800bf38:	2f62      	cmp	r7, #98	@ 0x62
 800bf3a:	d80a      	bhi.n	800bf52 <_printf_i+0x32>
 800bf3c:	2f00      	cmp	r7, #0
 800bf3e:	f000 80d1 	beq.w	800c0e4 <_printf_i+0x1c4>
 800bf42:	2f58      	cmp	r7, #88	@ 0x58
 800bf44:	f000 80b8 	beq.w	800c0b8 <_printf_i+0x198>
 800bf48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf50:	e03a      	b.n	800bfc8 <_printf_i+0xa8>
 800bf52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf56:	2b15      	cmp	r3, #21
 800bf58:	d8f6      	bhi.n	800bf48 <_printf_i+0x28>
 800bf5a:	a101      	add	r1, pc, #4	@ (adr r1, 800bf60 <_printf_i+0x40>)
 800bf5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf60:	0800bfb9 	.word	0x0800bfb9
 800bf64:	0800bfcd 	.word	0x0800bfcd
 800bf68:	0800bf49 	.word	0x0800bf49
 800bf6c:	0800bf49 	.word	0x0800bf49
 800bf70:	0800bf49 	.word	0x0800bf49
 800bf74:	0800bf49 	.word	0x0800bf49
 800bf78:	0800bfcd 	.word	0x0800bfcd
 800bf7c:	0800bf49 	.word	0x0800bf49
 800bf80:	0800bf49 	.word	0x0800bf49
 800bf84:	0800bf49 	.word	0x0800bf49
 800bf88:	0800bf49 	.word	0x0800bf49
 800bf8c:	0800c0cb 	.word	0x0800c0cb
 800bf90:	0800bff7 	.word	0x0800bff7
 800bf94:	0800c085 	.word	0x0800c085
 800bf98:	0800bf49 	.word	0x0800bf49
 800bf9c:	0800bf49 	.word	0x0800bf49
 800bfa0:	0800c0ed 	.word	0x0800c0ed
 800bfa4:	0800bf49 	.word	0x0800bf49
 800bfa8:	0800bff7 	.word	0x0800bff7
 800bfac:	0800bf49 	.word	0x0800bf49
 800bfb0:	0800bf49 	.word	0x0800bf49
 800bfb4:	0800c08d 	.word	0x0800c08d
 800bfb8:	6833      	ldr	r3, [r6, #0]
 800bfba:	1d1a      	adds	r2, r3, #4
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	6032      	str	r2, [r6, #0]
 800bfc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bfc8:	2301      	movs	r3, #1
 800bfca:	e09c      	b.n	800c106 <_printf_i+0x1e6>
 800bfcc:	6833      	ldr	r3, [r6, #0]
 800bfce:	6820      	ldr	r0, [r4, #0]
 800bfd0:	1d19      	adds	r1, r3, #4
 800bfd2:	6031      	str	r1, [r6, #0]
 800bfd4:	0606      	lsls	r6, r0, #24
 800bfd6:	d501      	bpl.n	800bfdc <_printf_i+0xbc>
 800bfd8:	681d      	ldr	r5, [r3, #0]
 800bfda:	e003      	b.n	800bfe4 <_printf_i+0xc4>
 800bfdc:	0645      	lsls	r5, r0, #25
 800bfde:	d5fb      	bpl.n	800bfd8 <_printf_i+0xb8>
 800bfe0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bfe4:	2d00      	cmp	r5, #0
 800bfe6:	da03      	bge.n	800bff0 <_printf_i+0xd0>
 800bfe8:	232d      	movs	r3, #45	@ 0x2d
 800bfea:	426d      	negs	r5, r5
 800bfec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bff0:	4858      	ldr	r0, [pc, #352]	@ (800c154 <_printf_i+0x234>)
 800bff2:	230a      	movs	r3, #10
 800bff4:	e011      	b.n	800c01a <_printf_i+0xfa>
 800bff6:	6821      	ldr	r1, [r4, #0]
 800bff8:	6833      	ldr	r3, [r6, #0]
 800bffa:	0608      	lsls	r0, r1, #24
 800bffc:	f853 5b04 	ldr.w	r5, [r3], #4
 800c000:	d402      	bmi.n	800c008 <_printf_i+0xe8>
 800c002:	0649      	lsls	r1, r1, #25
 800c004:	bf48      	it	mi
 800c006:	b2ad      	uxthmi	r5, r5
 800c008:	2f6f      	cmp	r7, #111	@ 0x6f
 800c00a:	4852      	ldr	r0, [pc, #328]	@ (800c154 <_printf_i+0x234>)
 800c00c:	6033      	str	r3, [r6, #0]
 800c00e:	bf14      	ite	ne
 800c010:	230a      	movne	r3, #10
 800c012:	2308      	moveq	r3, #8
 800c014:	2100      	movs	r1, #0
 800c016:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c01a:	6866      	ldr	r6, [r4, #4]
 800c01c:	60a6      	str	r6, [r4, #8]
 800c01e:	2e00      	cmp	r6, #0
 800c020:	db05      	blt.n	800c02e <_printf_i+0x10e>
 800c022:	6821      	ldr	r1, [r4, #0]
 800c024:	432e      	orrs	r6, r5
 800c026:	f021 0104 	bic.w	r1, r1, #4
 800c02a:	6021      	str	r1, [r4, #0]
 800c02c:	d04b      	beq.n	800c0c6 <_printf_i+0x1a6>
 800c02e:	4616      	mov	r6, r2
 800c030:	fbb5 f1f3 	udiv	r1, r5, r3
 800c034:	fb03 5711 	mls	r7, r3, r1, r5
 800c038:	5dc7      	ldrb	r7, [r0, r7]
 800c03a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c03e:	462f      	mov	r7, r5
 800c040:	42bb      	cmp	r3, r7
 800c042:	460d      	mov	r5, r1
 800c044:	d9f4      	bls.n	800c030 <_printf_i+0x110>
 800c046:	2b08      	cmp	r3, #8
 800c048:	d10b      	bne.n	800c062 <_printf_i+0x142>
 800c04a:	6823      	ldr	r3, [r4, #0]
 800c04c:	07df      	lsls	r7, r3, #31
 800c04e:	d508      	bpl.n	800c062 <_printf_i+0x142>
 800c050:	6923      	ldr	r3, [r4, #16]
 800c052:	6861      	ldr	r1, [r4, #4]
 800c054:	4299      	cmp	r1, r3
 800c056:	bfde      	ittt	le
 800c058:	2330      	movle	r3, #48	@ 0x30
 800c05a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c05e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c062:	1b92      	subs	r2, r2, r6
 800c064:	6122      	str	r2, [r4, #16]
 800c066:	f8cd a000 	str.w	sl, [sp]
 800c06a:	464b      	mov	r3, r9
 800c06c:	aa03      	add	r2, sp, #12
 800c06e:	4621      	mov	r1, r4
 800c070:	4640      	mov	r0, r8
 800c072:	f7ff fee7 	bl	800be44 <_printf_common>
 800c076:	3001      	adds	r0, #1
 800c078:	d14a      	bne.n	800c110 <_printf_i+0x1f0>
 800c07a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c07e:	b004      	add	sp, #16
 800c080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c084:	6823      	ldr	r3, [r4, #0]
 800c086:	f043 0320 	orr.w	r3, r3, #32
 800c08a:	6023      	str	r3, [r4, #0]
 800c08c:	4832      	ldr	r0, [pc, #200]	@ (800c158 <_printf_i+0x238>)
 800c08e:	2778      	movs	r7, #120	@ 0x78
 800c090:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	6831      	ldr	r1, [r6, #0]
 800c098:	061f      	lsls	r7, r3, #24
 800c09a:	f851 5b04 	ldr.w	r5, [r1], #4
 800c09e:	d402      	bmi.n	800c0a6 <_printf_i+0x186>
 800c0a0:	065f      	lsls	r7, r3, #25
 800c0a2:	bf48      	it	mi
 800c0a4:	b2ad      	uxthmi	r5, r5
 800c0a6:	6031      	str	r1, [r6, #0]
 800c0a8:	07d9      	lsls	r1, r3, #31
 800c0aa:	bf44      	itt	mi
 800c0ac:	f043 0320 	orrmi.w	r3, r3, #32
 800c0b0:	6023      	strmi	r3, [r4, #0]
 800c0b2:	b11d      	cbz	r5, 800c0bc <_printf_i+0x19c>
 800c0b4:	2310      	movs	r3, #16
 800c0b6:	e7ad      	b.n	800c014 <_printf_i+0xf4>
 800c0b8:	4826      	ldr	r0, [pc, #152]	@ (800c154 <_printf_i+0x234>)
 800c0ba:	e7e9      	b.n	800c090 <_printf_i+0x170>
 800c0bc:	6823      	ldr	r3, [r4, #0]
 800c0be:	f023 0320 	bic.w	r3, r3, #32
 800c0c2:	6023      	str	r3, [r4, #0]
 800c0c4:	e7f6      	b.n	800c0b4 <_printf_i+0x194>
 800c0c6:	4616      	mov	r6, r2
 800c0c8:	e7bd      	b.n	800c046 <_printf_i+0x126>
 800c0ca:	6833      	ldr	r3, [r6, #0]
 800c0cc:	6825      	ldr	r5, [r4, #0]
 800c0ce:	6961      	ldr	r1, [r4, #20]
 800c0d0:	1d18      	adds	r0, r3, #4
 800c0d2:	6030      	str	r0, [r6, #0]
 800c0d4:	062e      	lsls	r6, r5, #24
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	d501      	bpl.n	800c0de <_printf_i+0x1be>
 800c0da:	6019      	str	r1, [r3, #0]
 800c0dc:	e002      	b.n	800c0e4 <_printf_i+0x1c4>
 800c0de:	0668      	lsls	r0, r5, #25
 800c0e0:	d5fb      	bpl.n	800c0da <_printf_i+0x1ba>
 800c0e2:	8019      	strh	r1, [r3, #0]
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	6123      	str	r3, [r4, #16]
 800c0e8:	4616      	mov	r6, r2
 800c0ea:	e7bc      	b.n	800c066 <_printf_i+0x146>
 800c0ec:	6833      	ldr	r3, [r6, #0]
 800c0ee:	1d1a      	adds	r2, r3, #4
 800c0f0:	6032      	str	r2, [r6, #0]
 800c0f2:	681e      	ldr	r6, [r3, #0]
 800c0f4:	6862      	ldr	r2, [r4, #4]
 800c0f6:	2100      	movs	r1, #0
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	f7f4 f871 	bl	80001e0 <memchr>
 800c0fe:	b108      	cbz	r0, 800c104 <_printf_i+0x1e4>
 800c100:	1b80      	subs	r0, r0, r6
 800c102:	6060      	str	r0, [r4, #4]
 800c104:	6863      	ldr	r3, [r4, #4]
 800c106:	6123      	str	r3, [r4, #16]
 800c108:	2300      	movs	r3, #0
 800c10a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c10e:	e7aa      	b.n	800c066 <_printf_i+0x146>
 800c110:	6923      	ldr	r3, [r4, #16]
 800c112:	4632      	mov	r2, r6
 800c114:	4649      	mov	r1, r9
 800c116:	4640      	mov	r0, r8
 800c118:	47d0      	blx	sl
 800c11a:	3001      	adds	r0, #1
 800c11c:	d0ad      	beq.n	800c07a <_printf_i+0x15a>
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	079b      	lsls	r3, r3, #30
 800c122:	d413      	bmi.n	800c14c <_printf_i+0x22c>
 800c124:	68e0      	ldr	r0, [r4, #12]
 800c126:	9b03      	ldr	r3, [sp, #12]
 800c128:	4298      	cmp	r0, r3
 800c12a:	bfb8      	it	lt
 800c12c:	4618      	movlt	r0, r3
 800c12e:	e7a6      	b.n	800c07e <_printf_i+0x15e>
 800c130:	2301      	movs	r3, #1
 800c132:	4632      	mov	r2, r6
 800c134:	4649      	mov	r1, r9
 800c136:	4640      	mov	r0, r8
 800c138:	47d0      	blx	sl
 800c13a:	3001      	adds	r0, #1
 800c13c:	d09d      	beq.n	800c07a <_printf_i+0x15a>
 800c13e:	3501      	adds	r5, #1
 800c140:	68e3      	ldr	r3, [r4, #12]
 800c142:	9903      	ldr	r1, [sp, #12]
 800c144:	1a5b      	subs	r3, r3, r1
 800c146:	42ab      	cmp	r3, r5
 800c148:	dcf2      	bgt.n	800c130 <_printf_i+0x210>
 800c14a:	e7eb      	b.n	800c124 <_printf_i+0x204>
 800c14c:	2500      	movs	r5, #0
 800c14e:	f104 0619 	add.w	r6, r4, #25
 800c152:	e7f5      	b.n	800c140 <_printf_i+0x220>
 800c154:	0800e766 	.word	0x0800e766
 800c158:	0800e777 	.word	0x0800e777

0800c15c <std>:
 800c15c:	2300      	movs	r3, #0
 800c15e:	b510      	push	{r4, lr}
 800c160:	4604      	mov	r4, r0
 800c162:	e9c0 3300 	strd	r3, r3, [r0]
 800c166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c16a:	6083      	str	r3, [r0, #8]
 800c16c:	8181      	strh	r1, [r0, #12]
 800c16e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c170:	81c2      	strh	r2, [r0, #14]
 800c172:	6183      	str	r3, [r0, #24]
 800c174:	4619      	mov	r1, r3
 800c176:	2208      	movs	r2, #8
 800c178:	305c      	adds	r0, #92	@ 0x5c
 800c17a:	f000 f931 	bl	800c3e0 <memset>
 800c17e:	4b0d      	ldr	r3, [pc, #52]	@ (800c1b4 <std+0x58>)
 800c180:	6263      	str	r3, [r4, #36]	@ 0x24
 800c182:	4b0d      	ldr	r3, [pc, #52]	@ (800c1b8 <std+0x5c>)
 800c184:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c186:	4b0d      	ldr	r3, [pc, #52]	@ (800c1bc <std+0x60>)
 800c188:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c18a:	4b0d      	ldr	r3, [pc, #52]	@ (800c1c0 <std+0x64>)
 800c18c:	6323      	str	r3, [r4, #48]	@ 0x30
 800c18e:	4b0d      	ldr	r3, [pc, #52]	@ (800c1c4 <std+0x68>)
 800c190:	6224      	str	r4, [r4, #32]
 800c192:	429c      	cmp	r4, r3
 800c194:	d006      	beq.n	800c1a4 <std+0x48>
 800c196:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c19a:	4294      	cmp	r4, r2
 800c19c:	d002      	beq.n	800c1a4 <std+0x48>
 800c19e:	33d0      	adds	r3, #208	@ 0xd0
 800c1a0:	429c      	cmp	r4, r3
 800c1a2:	d105      	bne.n	800c1b0 <std+0x54>
 800c1a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1ac:	f000 b994 	b.w	800c4d8 <__retarget_lock_init_recursive>
 800c1b0:	bd10      	pop	{r4, pc}
 800c1b2:	bf00      	nop
 800c1b4:	0800c2e1 	.word	0x0800c2e1
 800c1b8:	0800c303 	.word	0x0800c303
 800c1bc:	0800c33b 	.word	0x0800c33b
 800c1c0:	0800c35f 	.word	0x0800c35f
 800c1c4:	200020d0 	.word	0x200020d0

0800c1c8 <stdio_exit_handler>:
 800c1c8:	4a02      	ldr	r2, [pc, #8]	@ (800c1d4 <stdio_exit_handler+0xc>)
 800c1ca:	4903      	ldr	r1, [pc, #12]	@ (800c1d8 <stdio_exit_handler+0x10>)
 800c1cc:	4803      	ldr	r0, [pc, #12]	@ (800c1dc <stdio_exit_handler+0x14>)
 800c1ce:	f000 b869 	b.w	800c2a4 <_fwalk_sglue>
 800c1d2:	bf00      	nop
 800c1d4:	20000104 	.word	0x20000104
 800c1d8:	0800de3d 	.word	0x0800de3d
 800c1dc:	20000114 	.word	0x20000114

0800c1e0 <cleanup_stdio>:
 800c1e0:	6841      	ldr	r1, [r0, #4]
 800c1e2:	4b0c      	ldr	r3, [pc, #48]	@ (800c214 <cleanup_stdio+0x34>)
 800c1e4:	4299      	cmp	r1, r3
 800c1e6:	b510      	push	{r4, lr}
 800c1e8:	4604      	mov	r4, r0
 800c1ea:	d001      	beq.n	800c1f0 <cleanup_stdio+0x10>
 800c1ec:	f001 fe26 	bl	800de3c <_fflush_r>
 800c1f0:	68a1      	ldr	r1, [r4, #8]
 800c1f2:	4b09      	ldr	r3, [pc, #36]	@ (800c218 <cleanup_stdio+0x38>)
 800c1f4:	4299      	cmp	r1, r3
 800c1f6:	d002      	beq.n	800c1fe <cleanup_stdio+0x1e>
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	f001 fe1f 	bl	800de3c <_fflush_r>
 800c1fe:	68e1      	ldr	r1, [r4, #12]
 800c200:	4b06      	ldr	r3, [pc, #24]	@ (800c21c <cleanup_stdio+0x3c>)
 800c202:	4299      	cmp	r1, r3
 800c204:	d004      	beq.n	800c210 <cleanup_stdio+0x30>
 800c206:	4620      	mov	r0, r4
 800c208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c20c:	f001 be16 	b.w	800de3c <_fflush_r>
 800c210:	bd10      	pop	{r4, pc}
 800c212:	bf00      	nop
 800c214:	200020d0 	.word	0x200020d0
 800c218:	20002138 	.word	0x20002138
 800c21c:	200021a0 	.word	0x200021a0

0800c220 <global_stdio_init.part.0>:
 800c220:	b510      	push	{r4, lr}
 800c222:	4b0b      	ldr	r3, [pc, #44]	@ (800c250 <global_stdio_init.part.0+0x30>)
 800c224:	4c0b      	ldr	r4, [pc, #44]	@ (800c254 <global_stdio_init.part.0+0x34>)
 800c226:	4a0c      	ldr	r2, [pc, #48]	@ (800c258 <global_stdio_init.part.0+0x38>)
 800c228:	601a      	str	r2, [r3, #0]
 800c22a:	4620      	mov	r0, r4
 800c22c:	2200      	movs	r2, #0
 800c22e:	2104      	movs	r1, #4
 800c230:	f7ff ff94 	bl	800c15c <std>
 800c234:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c238:	2201      	movs	r2, #1
 800c23a:	2109      	movs	r1, #9
 800c23c:	f7ff ff8e 	bl	800c15c <std>
 800c240:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c244:	2202      	movs	r2, #2
 800c246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c24a:	2112      	movs	r1, #18
 800c24c:	f7ff bf86 	b.w	800c15c <std>
 800c250:	20002208 	.word	0x20002208
 800c254:	200020d0 	.word	0x200020d0
 800c258:	0800c1c9 	.word	0x0800c1c9

0800c25c <__sfp_lock_acquire>:
 800c25c:	4801      	ldr	r0, [pc, #4]	@ (800c264 <__sfp_lock_acquire+0x8>)
 800c25e:	f000 b93c 	b.w	800c4da <__retarget_lock_acquire_recursive>
 800c262:	bf00      	nop
 800c264:	20002211 	.word	0x20002211

0800c268 <__sfp_lock_release>:
 800c268:	4801      	ldr	r0, [pc, #4]	@ (800c270 <__sfp_lock_release+0x8>)
 800c26a:	f000 b937 	b.w	800c4dc <__retarget_lock_release_recursive>
 800c26e:	bf00      	nop
 800c270:	20002211 	.word	0x20002211

0800c274 <__sinit>:
 800c274:	b510      	push	{r4, lr}
 800c276:	4604      	mov	r4, r0
 800c278:	f7ff fff0 	bl	800c25c <__sfp_lock_acquire>
 800c27c:	6a23      	ldr	r3, [r4, #32]
 800c27e:	b11b      	cbz	r3, 800c288 <__sinit+0x14>
 800c280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c284:	f7ff bff0 	b.w	800c268 <__sfp_lock_release>
 800c288:	4b04      	ldr	r3, [pc, #16]	@ (800c29c <__sinit+0x28>)
 800c28a:	6223      	str	r3, [r4, #32]
 800c28c:	4b04      	ldr	r3, [pc, #16]	@ (800c2a0 <__sinit+0x2c>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1f5      	bne.n	800c280 <__sinit+0xc>
 800c294:	f7ff ffc4 	bl	800c220 <global_stdio_init.part.0>
 800c298:	e7f2      	b.n	800c280 <__sinit+0xc>
 800c29a:	bf00      	nop
 800c29c:	0800c1e1 	.word	0x0800c1e1
 800c2a0:	20002208 	.word	0x20002208

0800c2a4 <_fwalk_sglue>:
 800c2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2a8:	4607      	mov	r7, r0
 800c2aa:	4688      	mov	r8, r1
 800c2ac:	4614      	mov	r4, r2
 800c2ae:	2600      	movs	r6, #0
 800c2b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2b4:	f1b9 0901 	subs.w	r9, r9, #1
 800c2b8:	d505      	bpl.n	800c2c6 <_fwalk_sglue+0x22>
 800c2ba:	6824      	ldr	r4, [r4, #0]
 800c2bc:	2c00      	cmp	r4, #0
 800c2be:	d1f7      	bne.n	800c2b0 <_fwalk_sglue+0xc>
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2c6:	89ab      	ldrh	r3, [r5, #12]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d907      	bls.n	800c2dc <_fwalk_sglue+0x38>
 800c2cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	d003      	beq.n	800c2dc <_fwalk_sglue+0x38>
 800c2d4:	4629      	mov	r1, r5
 800c2d6:	4638      	mov	r0, r7
 800c2d8:	47c0      	blx	r8
 800c2da:	4306      	orrs	r6, r0
 800c2dc:	3568      	adds	r5, #104	@ 0x68
 800c2de:	e7e9      	b.n	800c2b4 <_fwalk_sglue+0x10>

0800c2e0 <__sread>:
 800c2e0:	b510      	push	{r4, lr}
 800c2e2:	460c      	mov	r4, r1
 800c2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2e8:	f000 f8a8 	bl	800c43c <_read_r>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	bfab      	itete	ge
 800c2f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c2f2:	89a3      	ldrhlt	r3, [r4, #12]
 800c2f4:	181b      	addge	r3, r3, r0
 800c2f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c2fa:	bfac      	ite	ge
 800c2fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c2fe:	81a3      	strhlt	r3, [r4, #12]
 800c300:	bd10      	pop	{r4, pc}

0800c302 <__swrite>:
 800c302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c306:	461f      	mov	r7, r3
 800c308:	898b      	ldrh	r3, [r1, #12]
 800c30a:	05db      	lsls	r3, r3, #23
 800c30c:	4605      	mov	r5, r0
 800c30e:	460c      	mov	r4, r1
 800c310:	4616      	mov	r6, r2
 800c312:	d505      	bpl.n	800c320 <__swrite+0x1e>
 800c314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c318:	2302      	movs	r3, #2
 800c31a:	2200      	movs	r2, #0
 800c31c:	f000 f87c 	bl	800c418 <_lseek_r>
 800c320:	89a3      	ldrh	r3, [r4, #12]
 800c322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c326:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c32a:	81a3      	strh	r3, [r4, #12]
 800c32c:	4632      	mov	r2, r6
 800c32e:	463b      	mov	r3, r7
 800c330:	4628      	mov	r0, r5
 800c332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c336:	f000 b893 	b.w	800c460 <_write_r>

0800c33a <__sseek>:
 800c33a:	b510      	push	{r4, lr}
 800c33c:	460c      	mov	r4, r1
 800c33e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c342:	f000 f869 	bl	800c418 <_lseek_r>
 800c346:	1c43      	adds	r3, r0, #1
 800c348:	89a3      	ldrh	r3, [r4, #12]
 800c34a:	bf15      	itete	ne
 800c34c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c34e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c352:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c356:	81a3      	strheq	r3, [r4, #12]
 800c358:	bf18      	it	ne
 800c35a:	81a3      	strhne	r3, [r4, #12]
 800c35c:	bd10      	pop	{r4, pc}

0800c35e <__sclose>:
 800c35e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c362:	f000 b849 	b.w	800c3f8 <_close_r>

0800c366 <_vsniprintf_r>:
 800c366:	b530      	push	{r4, r5, lr}
 800c368:	4614      	mov	r4, r2
 800c36a:	2c00      	cmp	r4, #0
 800c36c:	b09b      	sub	sp, #108	@ 0x6c
 800c36e:	4605      	mov	r5, r0
 800c370:	461a      	mov	r2, r3
 800c372:	da05      	bge.n	800c380 <_vsniprintf_r+0x1a>
 800c374:	238b      	movs	r3, #139	@ 0x8b
 800c376:	6003      	str	r3, [r0, #0]
 800c378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c37c:	b01b      	add	sp, #108	@ 0x6c
 800c37e:	bd30      	pop	{r4, r5, pc}
 800c380:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c384:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c388:	f04f 0300 	mov.w	r3, #0
 800c38c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c38e:	bf14      	ite	ne
 800c390:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800c394:	4623      	moveq	r3, r4
 800c396:	9302      	str	r3, [sp, #8]
 800c398:	9305      	str	r3, [sp, #20]
 800c39a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c39e:	9100      	str	r1, [sp, #0]
 800c3a0:	9104      	str	r1, [sp, #16]
 800c3a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c3a6:	4669      	mov	r1, sp
 800c3a8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c3aa:	f001 fbc7 	bl	800db3c <_svfiprintf_r>
 800c3ae:	1c43      	adds	r3, r0, #1
 800c3b0:	bfbc      	itt	lt
 800c3b2:	238b      	movlt	r3, #139	@ 0x8b
 800c3b4:	602b      	strlt	r3, [r5, #0]
 800c3b6:	2c00      	cmp	r4, #0
 800c3b8:	d0e0      	beq.n	800c37c <_vsniprintf_r+0x16>
 800c3ba:	9b00      	ldr	r3, [sp, #0]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	701a      	strb	r2, [r3, #0]
 800c3c0:	e7dc      	b.n	800c37c <_vsniprintf_r+0x16>
	...

0800c3c4 <vsniprintf>:
 800c3c4:	b507      	push	{r0, r1, r2, lr}
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	4613      	mov	r3, r2
 800c3ca:	460a      	mov	r2, r1
 800c3cc:	4601      	mov	r1, r0
 800c3ce:	4803      	ldr	r0, [pc, #12]	@ (800c3dc <vsniprintf+0x18>)
 800c3d0:	6800      	ldr	r0, [r0, #0]
 800c3d2:	f7ff ffc8 	bl	800c366 <_vsniprintf_r>
 800c3d6:	b003      	add	sp, #12
 800c3d8:	f85d fb04 	ldr.w	pc, [sp], #4
 800c3dc:	20000110 	.word	0x20000110

0800c3e0 <memset>:
 800c3e0:	4402      	add	r2, r0
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d100      	bne.n	800c3ea <memset+0xa>
 800c3e8:	4770      	bx	lr
 800c3ea:	f803 1b01 	strb.w	r1, [r3], #1
 800c3ee:	e7f9      	b.n	800c3e4 <memset+0x4>

0800c3f0 <_localeconv_r>:
 800c3f0:	4800      	ldr	r0, [pc, #0]	@ (800c3f4 <_localeconv_r+0x4>)
 800c3f2:	4770      	bx	lr
 800c3f4:	20000250 	.word	0x20000250

0800c3f8 <_close_r>:
 800c3f8:	b538      	push	{r3, r4, r5, lr}
 800c3fa:	4d06      	ldr	r5, [pc, #24]	@ (800c414 <_close_r+0x1c>)
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	4604      	mov	r4, r0
 800c400:	4608      	mov	r0, r1
 800c402:	602b      	str	r3, [r5, #0]
 800c404:	f7f5 fff0 	bl	80023e8 <_close>
 800c408:	1c43      	adds	r3, r0, #1
 800c40a:	d102      	bne.n	800c412 <_close_r+0x1a>
 800c40c:	682b      	ldr	r3, [r5, #0]
 800c40e:	b103      	cbz	r3, 800c412 <_close_r+0x1a>
 800c410:	6023      	str	r3, [r4, #0]
 800c412:	bd38      	pop	{r3, r4, r5, pc}
 800c414:	2000220c 	.word	0x2000220c

0800c418 <_lseek_r>:
 800c418:	b538      	push	{r3, r4, r5, lr}
 800c41a:	4d07      	ldr	r5, [pc, #28]	@ (800c438 <_lseek_r+0x20>)
 800c41c:	4604      	mov	r4, r0
 800c41e:	4608      	mov	r0, r1
 800c420:	4611      	mov	r1, r2
 800c422:	2200      	movs	r2, #0
 800c424:	602a      	str	r2, [r5, #0]
 800c426:	461a      	mov	r2, r3
 800c428:	f7f6 f805 	bl	8002436 <_lseek>
 800c42c:	1c43      	adds	r3, r0, #1
 800c42e:	d102      	bne.n	800c436 <_lseek_r+0x1e>
 800c430:	682b      	ldr	r3, [r5, #0]
 800c432:	b103      	cbz	r3, 800c436 <_lseek_r+0x1e>
 800c434:	6023      	str	r3, [r4, #0]
 800c436:	bd38      	pop	{r3, r4, r5, pc}
 800c438:	2000220c 	.word	0x2000220c

0800c43c <_read_r>:
 800c43c:	b538      	push	{r3, r4, r5, lr}
 800c43e:	4d07      	ldr	r5, [pc, #28]	@ (800c45c <_read_r+0x20>)
 800c440:	4604      	mov	r4, r0
 800c442:	4608      	mov	r0, r1
 800c444:	4611      	mov	r1, r2
 800c446:	2200      	movs	r2, #0
 800c448:	602a      	str	r2, [r5, #0]
 800c44a:	461a      	mov	r2, r3
 800c44c:	f7f5 ff93 	bl	8002376 <_read>
 800c450:	1c43      	adds	r3, r0, #1
 800c452:	d102      	bne.n	800c45a <_read_r+0x1e>
 800c454:	682b      	ldr	r3, [r5, #0]
 800c456:	b103      	cbz	r3, 800c45a <_read_r+0x1e>
 800c458:	6023      	str	r3, [r4, #0]
 800c45a:	bd38      	pop	{r3, r4, r5, pc}
 800c45c:	2000220c 	.word	0x2000220c

0800c460 <_write_r>:
 800c460:	b538      	push	{r3, r4, r5, lr}
 800c462:	4d07      	ldr	r5, [pc, #28]	@ (800c480 <_write_r+0x20>)
 800c464:	4604      	mov	r4, r0
 800c466:	4608      	mov	r0, r1
 800c468:	4611      	mov	r1, r2
 800c46a:	2200      	movs	r2, #0
 800c46c:	602a      	str	r2, [r5, #0]
 800c46e:	461a      	mov	r2, r3
 800c470:	f7f5 ff9e 	bl	80023b0 <_write>
 800c474:	1c43      	adds	r3, r0, #1
 800c476:	d102      	bne.n	800c47e <_write_r+0x1e>
 800c478:	682b      	ldr	r3, [r5, #0]
 800c47a:	b103      	cbz	r3, 800c47e <_write_r+0x1e>
 800c47c:	6023      	str	r3, [r4, #0]
 800c47e:	bd38      	pop	{r3, r4, r5, pc}
 800c480:	2000220c 	.word	0x2000220c

0800c484 <__errno>:
 800c484:	4b01      	ldr	r3, [pc, #4]	@ (800c48c <__errno+0x8>)
 800c486:	6818      	ldr	r0, [r3, #0]
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	20000110 	.word	0x20000110

0800c490 <__libc_init_array>:
 800c490:	b570      	push	{r4, r5, r6, lr}
 800c492:	4d0d      	ldr	r5, [pc, #52]	@ (800c4c8 <__libc_init_array+0x38>)
 800c494:	4c0d      	ldr	r4, [pc, #52]	@ (800c4cc <__libc_init_array+0x3c>)
 800c496:	1b64      	subs	r4, r4, r5
 800c498:	10a4      	asrs	r4, r4, #2
 800c49a:	2600      	movs	r6, #0
 800c49c:	42a6      	cmp	r6, r4
 800c49e:	d109      	bne.n	800c4b4 <__libc_init_array+0x24>
 800c4a0:	4d0b      	ldr	r5, [pc, #44]	@ (800c4d0 <__libc_init_array+0x40>)
 800c4a2:	4c0c      	ldr	r4, [pc, #48]	@ (800c4d4 <__libc_init_array+0x44>)
 800c4a4:	f002 f868 	bl	800e578 <_init>
 800c4a8:	1b64      	subs	r4, r4, r5
 800c4aa:	10a4      	asrs	r4, r4, #2
 800c4ac:	2600      	movs	r6, #0
 800c4ae:	42a6      	cmp	r6, r4
 800c4b0:	d105      	bne.n	800c4be <__libc_init_array+0x2e>
 800c4b2:	bd70      	pop	{r4, r5, r6, pc}
 800c4b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4b8:	4798      	blx	r3
 800c4ba:	3601      	adds	r6, #1
 800c4bc:	e7ee      	b.n	800c49c <__libc_init_array+0xc>
 800c4be:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4c2:	4798      	blx	r3
 800c4c4:	3601      	adds	r6, #1
 800c4c6:	e7f2      	b.n	800c4ae <__libc_init_array+0x1e>
 800c4c8:	0800ead4 	.word	0x0800ead4
 800c4cc:	0800ead4 	.word	0x0800ead4
 800c4d0:	0800ead4 	.word	0x0800ead4
 800c4d4:	0800ead8 	.word	0x0800ead8

0800c4d8 <__retarget_lock_init_recursive>:
 800c4d8:	4770      	bx	lr

0800c4da <__retarget_lock_acquire_recursive>:
 800c4da:	4770      	bx	lr

0800c4dc <__retarget_lock_release_recursive>:
 800c4dc:	4770      	bx	lr

0800c4de <quorem>:
 800c4de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e2:	6903      	ldr	r3, [r0, #16]
 800c4e4:	690c      	ldr	r4, [r1, #16]
 800c4e6:	42a3      	cmp	r3, r4
 800c4e8:	4607      	mov	r7, r0
 800c4ea:	db7e      	blt.n	800c5ea <quorem+0x10c>
 800c4ec:	3c01      	subs	r4, #1
 800c4ee:	f101 0814 	add.w	r8, r1, #20
 800c4f2:	00a3      	lsls	r3, r4, #2
 800c4f4:	f100 0514 	add.w	r5, r0, #20
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4fe:	9301      	str	r3, [sp, #4]
 800c500:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c504:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c508:	3301      	adds	r3, #1
 800c50a:	429a      	cmp	r2, r3
 800c50c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c510:	fbb2 f6f3 	udiv	r6, r2, r3
 800c514:	d32e      	bcc.n	800c574 <quorem+0x96>
 800c516:	f04f 0a00 	mov.w	sl, #0
 800c51a:	46c4      	mov	ip, r8
 800c51c:	46ae      	mov	lr, r5
 800c51e:	46d3      	mov	fp, sl
 800c520:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c524:	b298      	uxth	r0, r3
 800c526:	fb06 a000 	mla	r0, r6, r0, sl
 800c52a:	0c02      	lsrs	r2, r0, #16
 800c52c:	0c1b      	lsrs	r3, r3, #16
 800c52e:	fb06 2303 	mla	r3, r6, r3, r2
 800c532:	f8de 2000 	ldr.w	r2, [lr]
 800c536:	b280      	uxth	r0, r0
 800c538:	b292      	uxth	r2, r2
 800c53a:	1a12      	subs	r2, r2, r0
 800c53c:	445a      	add	r2, fp
 800c53e:	f8de 0000 	ldr.w	r0, [lr]
 800c542:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c546:	b29b      	uxth	r3, r3
 800c548:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c54c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c550:	b292      	uxth	r2, r2
 800c552:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c556:	45e1      	cmp	r9, ip
 800c558:	f84e 2b04 	str.w	r2, [lr], #4
 800c55c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c560:	d2de      	bcs.n	800c520 <quorem+0x42>
 800c562:	9b00      	ldr	r3, [sp, #0]
 800c564:	58eb      	ldr	r3, [r5, r3]
 800c566:	b92b      	cbnz	r3, 800c574 <quorem+0x96>
 800c568:	9b01      	ldr	r3, [sp, #4]
 800c56a:	3b04      	subs	r3, #4
 800c56c:	429d      	cmp	r5, r3
 800c56e:	461a      	mov	r2, r3
 800c570:	d32f      	bcc.n	800c5d2 <quorem+0xf4>
 800c572:	613c      	str	r4, [r7, #16]
 800c574:	4638      	mov	r0, r7
 800c576:	f001 f97d 	bl	800d874 <__mcmp>
 800c57a:	2800      	cmp	r0, #0
 800c57c:	db25      	blt.n	800c5ca <quorem+0xec>
 800c57e:	4629      	mov	r1, r5
 800c580:	2000      	movs	r0, #0
 800c582:	f858 2b04 	ldr.w	r2, [r8], #4
 800c586:	f8d1 c000 	ldr.w	ip, [r1]
 800c58a:	fa1f fe82 	uxth.w	lr, r2
 800c58e:	fa1f f38c 	uxth.w	r3, ip
 800c592:	eba3 030e 	sub.w	r3, r3, lr
 800c596:	4403      	add	r3, r0
 800c598:	0c12      	lsrs	r2, r2, #16
 800c59a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c59e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5a8:	45c1      	cmp	r9, r8
 800c5aa:	f841 3b04 	str.w	r3, [r1], #4
 800c5ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c5b2:	d2e6      	bcs.n	800c582 <quorem+0xa4>
 800c5b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5bc:	b922      	cbnz	r2, 800c5c8 <quorem+0xea>
 800c5be:	3b04      	subs	r3, #4
 800c5c0:	429d      	cmp	r5, r3
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	d30b      	bcc.n	800c5de <quorem+0x100>
 800c5c6:	613c      	str	r4, [r7, #16]
 800c5c8:	3601      	adds	r6, #1
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	b003      	add	sp, #12
 800c5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d2:	6812      	ldr	r2, [r2, #0]
 800c5d4:	3b04      	subs	r3, #4
 800c5d6:	2a00      	cmp	r2, #0
 800c5d8:	d1cb      	bne.n	800c572 <quorem+0x94>
 800c5da:	3c01      	subs	r4, #1
 800c5dc:	e7c6      	b.n	800c56c <quorem+0x8e>
 800c5de:	6812      	ldr	r2, [r2, #0]
 800c5e0:	3b04      	subs	r3, #4
 800c5e2:	2a00      	cmp	r2, #0
 800c5e4:	d1ef      	bne.n	800c5c6 <quorem+0xe8>
 800c5e6:	3c01      	subs	r4, #1
 800c5e8:	e7ea      	b.n	800c5c0 <quorem+0xe2>
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	e7ee      	b.n	800c5cc <quorem+0xee>
	...

0800c5f0 <_dtoa_r>:
 800c5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f4:	69c7      	ldr	r7, [r0, #28]
 800c5f6:	b097      	sub	sp, #92	@ 0x5c
 800c5f8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c5fc:	ec55 4b10 	vmov	r4, r5, d0
 800c600:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c602:	9107      	str	r1, [sp, #28]
 800c604:	4681      	mov	r9, r0
 800c606:	920c      	str	r2, [sp, #48]	@ 0x30
 800c608:	9311      	str	r3, [sp, #68]	@ 0x44
 800c60a:	b97f      	cbnz	r7, 800c62c <_dtoa_r+0x3c>
 800c60c:	2010      	movs	r0, #16
 800c60e:	f000 fe09 	bl	800d224 <malloc>
 800c612:	4602      	mov	r2, r0
 800c614:	f8c9 001c 	str.w	r0, [r9, #28]
 800c618:	b920      	cbnz	r0, 800c624 <_dtoa_r+0x34>
 800c61a:	4ba9      	ldr	r3, [pc, #676]	@ (800c8c0 <_dtoa_r+0x2d0>)
 800c61c:	21ef      	movs	r1, #239	@ 0xef
 800c61e:	48a9      	ldr	r0, [pc, #676]	@ (800c8c4 <_dtoa_r+0x2d4>)
 800c620:	f001 fc6c 	bl	800defc <__assert_func>
 800c624:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c628:	6007      	str	r7, [r0, #0]
 800c62a:	60c7      	str	r7, [r0, #12]
 800c62c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c630:	6819      	ldr	r1, [r3, #0]
 800c632:	b159      	cbz	r1, 800c64c <_dtoa_r+0x5c>
 800c634:	685a      	ldr	r2, [r3, #4]
 800c636:	604a      	str	r2, [r1, #4]
 800c638:	2301      	movs	r3, #1
 800c63a:	4093      	lsls	r3, r2
 800c63c:	608b      	str	r3, [r1, #8]
 800c63e:	4648      	mov	r0, r9
 800c640:	f000 fee6 	bl	800d410 <_Bfree>
 800c644:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c648:	2200      	movs	r2, #0
 800c64a:	601a      	str	r2, [r3, #0]
 800c64c:	1e2b      	subs	r3, r5, #0
 800c64e:	bfb9      	ittee	lt
 800c650:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c654:	9305      	strlt	r3, [sp, #20]
 800c656:	2300      	movge	r3, #0
 800c658:	6033      	strge	r3, [r6, #0]
 800c65a:	9f05      	ldr	r7, [sp, #20]
 800c65c:	4b9a      	ldr	r3, [pc, #616]	@ (800c8c8 <_dtoa_r+0x2d8>)
 800c65e:	bfbc      	itt	lt
 800c660:	2201      	movlt	r2, #1
 800c662:	6032      	strlt	r2, [r6, #0]
 800c664:	43bb      	bics	r3, r7
 800c666:	d112      	bne.n	800c68e <_dtoa_r+0x9e>
 800c668:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c66a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c66e:	6013      	str	r3, [r2, #0]
 800c670:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c674:	4323      	orrs	r3, r4
 800c676:	f000 855a 	beq.w	800d12e <_dtoa_r+0xb3e>
 800c67a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c67c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c8dc <_dtoa_r+0x2ec>
 800c680:	2b00      	cmp	r3, #0
 800c682:	f000 855c 	beq.w	800d13e <_dtoa_r+0xb4e>
 800c686:	f10a 0303 	add.w	r3, sl, #3
 800c68a:	f000 bd56 	b.w	800d13a <_dtoa_r+0xb4a>
 800c68e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c692:	2200      	movs	r2, #0
 800c694:	ec51 0b17 	vmov	r0, r1, d7
 800c698:	2300      	movs	r3, #0
 800c69a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c69e:	f7f4 fa1b 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6a2:	4680      	mov	r8, r0
 800c6a4:	b158      	cbz	r0, 800c6be <_dtoa_r+0xce>
 800c6a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	6013      	str	r3, [r2, #0]
 800c6ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c6ae:	b113      	cbz	r3, 800c6b6 <_dtoa_r+0xc6>
 800c6b0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c6b2:	4b86      	ldr	r3, [pc, #536]	@ (800c8cc <_dtoa_r+0x2dc>)
 800c6b4:	6013      	str	r3, [r2, #0]
 800c6b6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c8e0 <_dtoa_r+0x2f0>
 800c6ba:	f000 bd40 	b.w	800d13e <_dtoa_r+0xb4e>
 800c6be:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c6c2:	aa14      	add	r2, sp, #80	@ 0x50
 800c6c4:	a915      	add	r1, sp, #84	@ 0x54
 800c6c6:	4648      	mov	r0, r9
 800c6c8:	f001 f984 	bl	800d9d4 <__d2b>
 800c6cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c6d0:	9002      	str	r0, [sp, #8]
 800c6d2:	2e00      	cmp	r6, #0
 800c6d4:	d078      	beq.n	800c7c8 <_dtoa_r+0x1d8>
 800c6d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6d8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c6dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c6e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c6e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c6ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	4b76      	ldr	r3, [pc, #472]	@ (800c8d0 <_dtoa_r+0x2e0>)
 800c6f6:	f7f3 fdcf 	bl	8000298 <__aeabi_dsub>
 800c6fa:	a36b      	add	r3, pc, #428	@ (adr r3, 800c8a8 <_dtoa_r+0x2b8>)
 800c6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c700:	f7f3 ff82 	bl	8000608 <__aeabi_dmul>
 800c704:	a36a      	add	r3, pc, #424	@ (adr r3, 800c8b0 <_dtoa_r+0x2c0>)
 800c706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70a:	f7f3 fdc7 	bl	800029c <__adddf3>
 800c70e:	4604      	mov	r4, r0
 800c710:	4630      	mov	r0, r6
 800c712:	460d      	mov	r5, r1
 800c714:	f7f3 ff0e 	bl	8000534 <__aeabi_i2d>
 800c718:	a367      	add	r3, pc, #412	@ (adr r3, 800c8b8 <_dtoa_r+0x2c8>)
 800c71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71e:	f7f3 ff73 	bl	8000608 <__aeabi_dmul>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	4620      	mov	r0, r4
 800c728:	4629      	mov	r1, r5
 800c72a:	f7f3 fdb7 	bl	800029c <__adddf3>
 800c72e:	4604      	mov	r4, r0
 800c730:	460d      	mov	r5, r1
 800c732:	f7f4 fa19 	bl	8000b68 <__aeabi_d2iz>
 800c736:	2200      	movs	r2, #0
 800c738:	4607      	mov	r7, r0
 800c73a:	2300      	movs	r3, #0
 800c73c:	4620      	mov	r0, r4
 800c73e:	4629      	mov	r1, r5
 800c740:	f7f4 f9d4 	bl	8000aec <__aeabi_dcmplt>
 800c744:	b140      	cbz	r0, 800c758 <_dtoa_r+0x168>
 800c746:	4638      	mov	r0, r7
 800c748:	f7f3 fef4 	bl	8000534 <__aeabi_i2d>
 800c74c:	4622      	mov	r2, r4
 800c74e:	462b      	mov	r3, r5
 800c750:	f7f4 f9c2 	bl	8000ad8 <__aeabi_dcmpeq>
 800c754:	b900      	cbnz	r0, 800c758 <_dtoa_r+0x168>
 800c756:	3f01      	subs	r7, #1
 800c758:	2f16      	cmp	r7, #22
 800c75a:	d852      	bhi.n	800c802 <_dtoa_r+0x212>
 800c75c:	4b5d      	ldr	r3, [pc, #372]	@ (800c8d4 <_dtoa_r+0x2e4>)
 800c75e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c766:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c76a:	f7f4 f9bf 	bl	8000aec <__aeabi_dcmplt>
 800c76e:	2800      	cmp	r0, #0
 800c770:	d049      	beq.n	800c806 <_dtoa_r+0x216>
 800c772:	3f01      	subs	r7, #1
 800c774:	2300      	movs	r3, #0
 800c776:	9310      	str	r3, [sp, #64]	@ 0x40
 800c778:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c77a:	1b9b      	subs	r3, r3, r6
 800c77c:	1e5a      	subs	r2, r3, #1
 800c77e:	bf45      	ittet	mi
 800c780:	f1c3 0301 	rsbmi	r3, r3, #1
 800c784:	9300      	strmi	r3, [sp, #0]
 800c786:	2300      	movpl	r3, #0
 800c788:	2300      	movmi	r3, #0
 800c78a:	9206      	str	r2, [sp, #24]
 800c78c:	bf54      	ite	pl
 800c78e:	9300      	strpl	r3, [sp, #0]
 800c790:	9306      	strmi	r3, [sp, #24]
 800c792:	2f00      	cmp	r7, #0
 800c794:	db39      	blt.n	800c80a <_dtoa_r+0x21a>
 800c796:	9b06      	ldr	r3, [sp, #24]
 800c798:	970d      	str	r7, [sp, #52]	@ 0x34
 800c79a:	443b      	add	r3, r7
 800c79c:	9306      	str	r3, [sp, #24]
 800c79e:	2300      	movs	r3, #0
 800c7a0:	9308      	str	r3, [sp, #32]
 800c7a2:	9b07      	ldr	r3, [sp, #28]
 800c7a4:	2b09      	cmp	r3, #9
 800c7a6:	d863      	bhi.n	800c870 <_dtoa_r+0x280>
 800c7a8:	2b05      	cmp	r3, #5
 800c7aa:	bfc4      	itt	gt
 800c7ac:	3b04      	subgt	r3, #4
 800c7ae:	9307      	strgt	r3, [sp, #28]
 800c7b0:	9b07      	ldr	r3, [sp, #28]
 800c7b2:	f1a3 0302 	sub.w	r3, r3, #2
 800c7b6:	bfcc      	ite	gt
 800c7b8:	2400      	movgt	r4, #0
 800c7ba:	2401      	movle	r4, #1
 800c7bc:	2b03      	cmp	r3, #3
 800c7be:	d863      	bhi.n	800c888 <_dtoa_r+0x298>
 800c7c0:	e8df f003 	tbb	[pc, r3]
 800c7c4:	2b375452 	.word	0x2b375452
 800c7c8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c7cc:	441e      	add	r6, r3
 800c7ce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c7d2:	2b20      	cmp	r3, #32
 800c7d4:	bfc1      	itttt	gt
 800c7d6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c7da:	409f      	lslgt	r7, r3
 800c7dc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c7e0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c7e4:	bfd6      	itet	le
 800c7e6:	f1c3 0320 	rsble	r3, r3, #32
 800c7ea:	ea47 0003 	orrgt.w	r0, r7, r3
 800c7ee:	fa04 f003 	lslle.w	r0, r4, r3
 800c7f2:	f7f3 fe8f 	bl	8000514 <__aeabi_ui2d>
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c7fc:	3e01      	subs	r6, #1
 800c7fe:	9212      	str	r2, [sp, #72]	@ 0x48
 800c800:	e776      	b.n	800c6f0 <_dtoa_r+0x100>
 800c802:	2301      	movs	r3, #1
 800c804:	e7b7      	b.n	800c776 <_dtoa_r+0x186>
 800c806:	9010      	str	r0, [sp, #64]	@ 0x40
 800c808:	e7b6      	b.n	800c778 <_dtoa_r+0x188>
 800c80a:	9b00      	ldr	r3, [sp, #0]
 800c80c:	1bdb      	subs	r3, r3, r7
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	427b      	negs	r3, r7
 800c812:	9308      	str	r3, [sp, #32]
 800c814:	2300      	movs	r3, #0
 800c816:	930d      	str	r3, [sp, #52]	@ 0x34
 800c818:	e7c3      	b.n	800c7a2 <_dtoa_r+0x1b2>
 800c81a:	2301      	movs	r3, #1
 800c81c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c81e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c820:	eb07 0b03 	add.w	fp, r7, r3
 800c824:	f10b 0301 	add.w	r3, fp, #1
 800c828:	2b01      	cmp	r3, #1
 800c82a:	9303      	str	r3, [sp, #12]
 800c82c:	bfb8      	it	lt
 800c82e:	2301      	movlt	r3, #1
 800c830:	e006      	b.n	800c840 <_dtoa_r+0x250>
 800c832:	2301      	movs	r3, #1
 800c834:	9309      	str	r3, [sp, #36]	@ 0x24
 800c836:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c838:	2b00      	cmp	r3, #0
 800c83a:	dd28      	ble.n	800c88e <_dtoa_r+0x29e>
 800c83c:	469b      	mov	fp, r3
 800c83e:	9303      	str	r3, [sp, #12]
 800c840:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c844:	2100      	movs	r1, #0
 800c846:	2204      	movs	r2, #4
 800c848:	f102 0514 	add.w	r5, r2, #20
 800c84c:	429d      	cmp	r5, r3
 800c84e:	d926      	bls.n	800c89e <_dtoa_r+0x2ae>
 800c850:	6041      	str	r1, [r0, #4]
 800c852:	4648      	mov	r0, r9
 800c854:	f000 fd9c 	bl	800d390 <_Balloc>
 800c858:	4682      	mov	sl, r0
 800c85a:	2800      	cmp	r0, #0
 800c85c:	d142      	bne.n	800c8e4 <_dtoa_r+0x2f4>
 800c85e:	4b1e      	ldr	r3, [pc, #120]	@ (800c8d8 <_dtoa_r+0x2e8>)
 800c860:	4602      	mov	r2, r0
 800c862:	f240 11af 	movw	r1, #431	@ 0x1af
 800c866:	e6da      	b.n	800c61e <_dtoa_r+0x2e>
 800c868:	2300      	movs	r3, #0
 800c86a:	e7e3      	b.n	800c834 <_dtoa_r+0x244>
 800c86c:	2300      	movs	r3, #0
 800c86e:	e7d5      	b.n	800c81c <_dtoa_r+0x22c>
 800c870:	2401      	movs	r4, #1
 800c872:	2300      	movs	r3, #0
 800c874:	9307      	str	r3, [sp, #28]
 800c876:	9409      	str	r4, [sp, #36]	@ 0x24
 800c878:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800c87c:	2200      	movs	r2, #0
 800c87e:	f8cd b00c 	str.w	fp, [sp, #12]
 800c882:	2312      	movs	r3, #18
 800c884:	920c      	str	r2, [sp, #48]	@ 0x30
 800c886:	e7db      	b.n	800c840 <_dtoa_r+0x250>
 800c888:	2301      	movs	r3, #1
 800c88a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c88c:	e7f4      	b.n	800c878 <_dtoa_r+0x288>
 800c88e:	f04f 0b01 	mov.w	fp, #1
 800c892:	f8cd b00c 	str.w	fp, [sp, #12]
 800c896:	465b      	mov	r3, fp
 800c898:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c89c:	e7d0      	b.n	800c840 <_dtoa_r+0x250>
 800c89e:	3101      	adds	r1, #1
 800c8a0:	0052      	lsls	r2, r2, #1
 800c8a2:	e7d1      	b.n	800c848 <_dtoa_r+0x258>
 800c8a4:	f3af 8000 	nop.w
 800c8a8:	636f4361 	.word	0x636f4361
 800c8ac:	3fd287a7 	.word	0x3fd287a7
 800c8b0:	8b60c8b3 	.word	0x8b60c8b3
 800c8b4:	3fc68a28 	.word	0x3fc68a28
 800c8b8:	509f79fb 	.word	0x509f79fb
 800c8bc:	3fd34413 	.word	0x3fd34413
 800c8c0:	0800e795 	.word	0x0800e795
 800c8c4:	0800e7ac 	.word	0x0800e7ac
 800c8c8:	7ff00000 	.word	0x7ff00000
 800c8cc:	0800e765 	.word	0x0800e765
 800c8d0:	3ff80000 	.word	0x3ff80000
 800c8d4:	0800e900 	.word	0x0800e900
 800c8d8:	0800e804 	.word	0x0800e804
 800c8dc:	0800e791 	.word	0x0800e791
 800c8e0:	0800e764 	.word	0x0800e764
 800c8e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c8e8:	6018      	str	r0, [r3, #0]
 800c8ea:	9b03      	ldr	r3, [sp, #12]
 800c8ec:	2b0e      	cmp	r3, #14
 800c8ee:	f200 80a1 	bhi.w	800ca34 <_dtoa_r+0x444>
 800c8f2:	2c00      	cmp	r4, #0
 800c8f4:	f000 809e 	beq.w	800ca34 <_dtoa_r+0x444>
 800c8f8:	2f00      	cmp	r7, #0
 800c8fa:	dd33      	ble.n	800c964 <_dtoa_r+0x374>
 800c8fc:	4b9c      	ldr	r3, [pc, #624]	@ (800cb70 <_dtoa_r+0x580>)
 800c8fe:	f007 020f 	and.w	r2, r7, #15
 800c902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c906:	ed93 7b00 	vldr	d7, [r3]
 800c90a:	05f8      	lsls	r0, r7, #23
 800c90c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c910:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c914:	d516      	bpl.n	800c944 <_dtoa_r+0x354>
 800c916:	4b97      	ldr	r3, [pc, #604]	@ (800cb74 <_dtoa_r+0x584>)
 800c918:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c91c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c920:	f7f3 ff9c 	bl	800085c <__aeabi_ddiv>
 800c924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c928:	f004 040f 	and.w	r4, r4, #15
 800c92c:	2603      	movs	r6, #3
 800c92e:	4d91      	ldr	r5, [pc, #580]	@ (800cb74 <_dtoa_r+0x584>)
 800c930:	b954      	cbnz	r4, 800c948 <_dtoa_r+0x358>
 800c932:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c936:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c93a:	f7f3 ff8f 	bl	800085c <__aeabi_ddiv>
 800c93e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c942:	e028      	b.n	800c996 <_dtoa_r+0x3a6>
 800c944:	2602      	movs	r6, #2
 800c946:	e7f2      	b.n	800c92e <_dtoa_r+0x33e>
 800c948:	07e1      	lsls	r1, r4, #31
 800c94a:	d508      	bpl.n	800c95e <_dtoa_r+0x36e>
 800c94c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c950:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c954:	f7f3 fe58 	bl	8000608 <__aeabi_dmul>
 800c958:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c95c:	3601      	adds	r6, #1
 800c95e:	1064      	asrs	r4, r4, #1
 800c960:	3508      	adds	r5, #8
 800c962:	e7e5      	b.n	800c930 <_dtoa_r+0x340>
 800c964:	f000 80af 	beq.w	800cac6 <_dtoa_r+0x4d6>
 800c968:	427c      	negs	r4, r7
 800c96a:	4b81      	ldr	r3, [pc, #516]	@ (800cb70 <_dtoa_r+0x580>)
 800c96c:	4d81      	ldr	r5, [pc, #516]	@ (800cb74 <_dtoa_r+0x584>)
 800c96e:	f004 020f 	and.w	r2, r4, #15
 800c972:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c97e:	f7f3 fe43 	bl	8000608 <__aeabi_dmul>
 800c982:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c986:	1124      	asrs	r4, r4, #4
 800c988:	2300      	movs	r3, #0
 800c98a:	2602      	movs	r6, #2
 800c98c:	2c00      	cmp	r4, #0
 800c98e:	f040 808f 	bne.w	800cab0 <_dtoa_r+0x4c0>
 800c992:	2b00      	cmp	r3, #0
 800c994:	d1d3      	bne.n	800c93e <_dtoa_r+0x34e>
 800c996:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c998:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f000 8094 	beq.w	800caca <_dtoa_r+0x4da>
 800c9a2:	4b75      	ldr	r3, [pc, #468]	@ (800cb78 <_dtoa_r+0x588>)
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	f7f4 f89f 	bl	8000aec <__aeabi_dcmplt>
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f000 808b 	beq.w	800caca <_dtoa_r+0x4da>
 800c9b4:	9b03      	ldr	r3, [sp, #12]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f000 8087 	beq.w	800caca <_dtoa_r+0x4da>
 800c9bc:	f1bb 0f00 	cmp.w	fp, #0
 800c9c0:	dd34      	ble.n	800ca2c <_dtoa_r+0x43c>
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	4b6d      	ldr	r3, [pc, #436]	@ (800cb7c <_dtoa_r+0x58c>)
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	f7f3 fe1d 	bl	8000608 <__aeabi_dmul>
 800c9ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9d2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800c9d6:	3601      	adds	r6, #1
 800c9d8:	465c      	mov	r4, fp
 800c9da:	4630      	mov	r0, r6
 800c9dc:	f7f3 fdaa 	bl	8000534 <__aeabi_i2d>
 800c9e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9e4:	f7f3 fe10 	bl	8000608 <__aeabi_dmul>
 800c9e8:	4b65      	ldr	r3, [pc, #404]	@ (800cb80 <_dtoa_r+0x590>)
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f7f3 fc56 	bl	800029c <__adddf3>
 800c9f0:	4605      	mov	r5, r0
 800c9f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c9f6:	2c00      	cmp	r4, #0
 800c9f8:	d16a      	bne.n	800cad0 <_dtoa_r+0x4e0>
 800c9fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9fe:	4b61      	ldr	r3, [pc, #388]	@ (800cb84 <_dtoa_r+0x594>)
 800ca00:	2200      	movs	r2, #0
 800ca02:	f7f3 fc49 	bl	8000298 <__aeabi_dsub>
 800ca06:	4602      	mov	r2, r0
 800ca08:	460b      	mov	r3, r1
 800ca0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ca0e:	462a      	mov	r2, r5
 800ca10:	4633      	mov	r3, r6
 800ca12:	f7f4 f889 	bl	8000b28 <__aeabi_dcmpgt>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	f040 8298 	bne.w	800cf4c <_dtoa_r+0x95c>
 800ca1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca20:	462a      	mov	r2, r5
 800ca22:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ca26:	f7f4 f861 	bl	8000aec <__aeabi_dcmplt>
 800ca2a:	bb38      	cbnz	r0, 800ca7c <_dtoa_r+0x48c>
 800ca2c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ca30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ca34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	f2c0 8157 	blt.w	800ccea <_dtoa_r+0x6fa>
 800ca3c:	2f0e      	cmp	r7, #14
 800ca3e:	f300 8154 	bgt.w	800ccea <_dtoa_r+0x6fa>
 800ca42:	4b4b      	ldr	r3, [pc, #300]	@ (800cb70 <_dtoa_r+0x580>)
 800ca44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ca48:	ed93 7b00 	vldr	d7, [r3]
 800ca4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	ed8d 7b00 	vstr	d7, [sp]
 800ca54:	f280 80e5 	bge.w	800cc22 <_dtoa_r+0x632>
 800ca58:	9b03      	ldr	r3, [sp, #12]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	f300 80e1 	bgt.w	800cc22 <_dtoa_r+0x632>
 800ca60:	d10c      	bne.n	800ca7c <_dtoa_r+0x48c>
 800ca62:	4b48      	ldr	r3, [pc, #288]	@ (800cb84 <_dtoa_r+0x594>)
 800ca64:	2200      	movs	r2, #0
 800ca66:	ec51 0b17 	vmov	r0, r1, d7
 800ca6a:	f7f3 fdcd 	bl	8000608 <__aeabi_dmul>
 800ca6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca72:	f7f4 f84f 	bl	8000b14 <__aeabi_dcmpge>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	f000 8266 	beq.w	800cf48 <_dtoa_r+0x958>
 800ca7c:	2400      	movs	r4, #0
 800ca7e:	4625      	mov	r5, r4
 800ca80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ca82:	4656      	mov	r6, sl
 800ca84:	ea6f 0803 	mvn.w	r8, r3
 800ca88:	2700      	movs	r7, #0
 800ca8a:	4621      	mov	r1, r4
 800ca8c:	4648      	mov	r0, r9
 800ca8e:	f000 fcbf 	bl	800d410 <_Bfree>
 800ca92:	2d00      	cmp	r5, #0
 800ca94:	f000 80bd 	beq.w	800cc12 <_dtoa_r+0x622>
 800ca98:	b12f      	cbz	r7, 800caa6 <_dtoa_r+0x4b6>
 800ca9a:	42af      	cmp	r7, r5
 800ca9c:	d003      	beq.n	800caa6 <_dtoa_r+0x4b6>
 800ca9e:	4639      	mov	r1, r7
 800caa0:	4648      	mov	r0, r9
 800caa2:	f000 fcb5 	bl	800d410 <_Bfree>
 800caa6:	4629      	mov	r1, r5
 800caa8:	4648      	mov	r0, r9
 800caaa:	f000 fcb1 	bl	800d410 <_Bfree>
 800caae:	e0b0      	b.n	800cc12 <_dtoa_r+0x622>
 800cab0:	07e2      	lsls	r2, r4, #31
 800cab2:	d505      	bpl.n	800cac0 <_dtoa_r+0x4d0>
 800cab4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cab8:	f7f3 fda6 	bl	8000608 <__aeabi_dmul>
 800cabc:	3601      	adds	r6, #1
 800cabe:	2301      	movs	r3, #1
 800cac0:	1064      	asrs	r4, r4, #1
 800cac2:	3508      	adds	r5, #8
 800cac4:	e762      	b.n	800c98c <_dtoa_r+0x39c>
 800cac6:	2602      	movs	r6, #2
 800cac8:	e765      	b.n	800c996 <_dtoa_r+0x3a6>
 800caca:	9c03      	ldr	r4, [sp, #12]
 800cacc:	46b8      	mov	r8, r7
 800cace:	e784      	b.n	800c9da <_dtoa_r+0x3ea>
 800cad0:	4b27      	ldr	r3, [pc, #156]	@ (800cb70 <_dtoa_r+0x580>)
 800cad2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cad4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cad8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cadc:	4454      	add	r4, sl
 800cade:	2900      	cmp	r1, #0
 800cae0:	d054      	beq.n	800cb8c <_dtoa_r+0x59c>
 800cae2:	4929      	ldr	r1, [pc, #164]	@ (800cb88 <_dtoa_r+0x598>)
 800cae4:	2000      	movs	r0, #0
 800cae6:	f7f3 feb9 	bl	800085c <__aeabi_ddiv>
 800caea:	4633      	mov	r3, r6
 800caec:	462a      	mov	r2, r5
 800caee:	f7f3 fbd3 	bl	8000298 <__aeabi_dsub>
 800caf2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800caf6:	4656      	mov	r6, sl
 800caf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cafc:	f7f4 f834 	bl	8000b68 <__aeabi_d2iz>
 800cb00:	4605      	mov	r5, r0
 800cb02:	f7f3 fd17 	bl	8000534 <__aeabi_i2d>
 800cb06:	4602      	mov	r2, r0
 800cb08:	460b      	mov	r3, r1
 800cb0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb0e:	f7f3 fbc3 	bl	8000298 <__aeabi_dsub>
 800cb12:	3530      	adds	r5, #48	@ 0x30
 800cb14:	4602      	mov	r2, r0
 800cb16:	460b      	mov	r3, r1
 800cb18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cb1c:	f806 5b01 	strb.w	r5, [r6], #1
 800cb20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cb24:	f7f3 ffe2 	bl	8000aec <__aeabi_dcmplt>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d172      	bne.n	800cc12 <_dtoa_r+0x622>
 800cb2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb30:	4911      	ldr	r1, [pc, #68]	@ (800cb78 <_dtoa_r+0x588>)
 800cb32:	2000      	movs	r0, #0
 800cb34:	f7f3 fbb0 	bl	8000298 <__aeabi_dsub>
 800cb38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cb3c:	f7f3 ffd6 	bl	8000aec <__aeabi_dcmplt>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	f040 80b4 	bne.w	800ccae <_dtoa_r+0x6be>
 800cb46:	42a6      	cmp	r6, r4
 800cb48:	f43f af70 	beq.w	800ca2c <_dtoa_r+0x43c>
 800cb4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cb50:	4b0a      	ldr	r3, [pc, #40]	@ (800cb7c <_dtoa_r+0x58c>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	f7f3 fd58 	bl	8000608 <__aeabi_dmul>
 800cb58:	4b08      	ldr	r3, [pc, #32]	@ (800cb7c <_dtoa_r+0x58c>)
 800cb5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cb5e:	2200      	movs	r2, #0
 800cb60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb64:	f7f3 fd50 	bl	8000608 <__aeabi_dmul>
 800cb68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb6c:	e7c4      	b.n	800caf8 <_dtoa_r+0x508>
 800cb6e:	bf00      	nop
 800cb70:	0800e900 	.word	0x0800e900
 800cb74:	0800e8d8 	.word	0x0800e8d8
 800cb78:	3ff00000 	.word	0x3ff00000
 800cb7c:	40240000 	.word	0x40240000
 800cb80:	401c0000 	.word	0x401c0000
 800cb84:	40140000 	.word	0x40140000
 800cb88:	3fe00000 	.word	0x3fe00000
 800cb8c:	4631      	mov	r1, r6
 800cb8e:	4628      	mov	r0, r5
 800cb90:	f7f3 fd3a 	bl	8000608 <__aeabi_dmul>
 800cb94:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cb98:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cb9a:	4656      	mov	r6, sl
 800cb9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cba0:	f7f3 ffe2 	bl	8000b68 <__aeabi_d2iz>
 800cba4:	4605      	mov	r5, r0
 800cba6:	f7f3 fcc5 	bl	8000534 <__aeabi_i2d>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	460b      	mov	r3, r1
 800cbae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbb2:	f7f3 fb71 	bl	8000298 <__aeabi_dsub>
 800cbb6:	3530      	adds	r5, #48	@ 0x30
 800cbb8:	f806 5b01 	strb.w	r5, [r6], #1
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	42a6      	cmp	r6, r4
 800cbc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cbc6:	f04f 0200 	mov.w	r2, #0
 800cbca:	d124      	bne.n	800cc16 <_dtoa_r+0x626>
 800cbcc:	4baf      	ldr	r3, [pc, #700]	@ (800ce8c <_dtoa_r+0x89c>)
 800cbce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cbd2:	f7f3 fb63 	bl	800029c <__adddf3>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	460b      	mov	r3, r1
 800cbda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbde:	f7f3 ffa3 	bl	8000b28 <__aeabi_dcmpgt>
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d163      	bne.n	800ccae <_dtoa_r+0x6be>
 800cbe6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cbea:	49a8      	ldr	r1, [pc, #672]	@ (800ce8c <_dtoa_r+0x89c>)
 800cbec:	2000      	movs	r0, #0
 800cbee:	f7f3 fb53 	bl	8000298 <__aeabi_dsub>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbfa:	f7f3 ff77 	bl	8000aec <__aeabi_dcmplt>
 800cbfe:	2800      	cmp	r0, #0
 800cc00:	f43f af14 	beq.w	800ca2c <_dtoa_r+0x43c>
 800cc04:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cc06:	1e73      	subs	r3, r6, #1
 800cc08:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cc0e:	2b30      	cmp	r3, #48	@ 0x30
 800cc10:	d0f8      	beq.n	800cc04 <_dtoa_r+0x614>
 800cc12:	4647      	mov	r7, r8
 800cc14:	e03b      	b.n	800cc8e <_dtoa_r+0x69e>
 800cc16:	4b9e      	ldr	r3, [pc, #632]	@ (800ce90 <_dtoa_r+0x8a0>)
 800cc18:	f7f3 fcf6 	bl	8000608 <__aeabi_dmul>
 800cc1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc20:	e7bc      	b.n	800cb9c <_dtoa_r+0x5ac>
 800cc22:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cc26:	4656      	mov	r6, sl
 800cc28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	4629      	mov	r1, r5
 800cc30:	f7f3 fe14 	bl	800085c <__aeabi_ddiv>
 800cc34:	f7f3 ff98 	bl	8000b68 <__aeabi_d2iz>
 800cc38:	4680      	mov	r8, r0
 800cc3a:	f7f3 fc7b 	bl	8000534 <__aeabi_i2d>
 800cc3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc42:	f7f3 fce1 	bl	8000608 <__aeabi_dmul>
 800cc46:	4602      	mov	r2, r0
 800cc48:	460b      	mov	r3, r1
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	4629      	mov	r1, r5
 800cc4e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cc52:	f7f3 fb21 	bl	8000298 <__aeabi_dsub>
 800cc56:	f806 4b01 	strb.w	r4, [r6], #1
 800cc5a:	9d03      	ldr	r5, [sp, #12]
 800cc5c:	eba6 040a 	sub.w	r4, r6, sl
 800cc60:	42a5      	cmp	r5, r4
 800cc62:	4602      	mov	r2, r0
 800cc64:	460b      	mov	r3, r1
 800cc66:	d133      	bne.n	800ccd0 <_dtoa_r+0x6e0>
 800cc68:	f7f3 fb18 	bl	800029c <__adddf3>
 800cc6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc70:	4604      	mov	r4, r0
 800cc72:	460d      	mov	r5, r1
 800cc74:	f7f3 ff58 	bl	8000b28 <__aeabi_dcmpgt>
 800cc78:	b9c0      	cbnz	r0, 800ccac <_dtoa_r+0x6bc>
 800cc7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc7e:	4620      	mov	r0, r4
 800cc80:	4629      	mov	r1, r5
 800cc82:	f7f3 ff29 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc86:	b110      	cbz	r0, 800cc8e <_dtoa_r+0x69e>
 800cc88:	f018 0f01 	tst.w	r8, #1
 800cc8c:	d10e      	bne.n	800ccac <_dtoa_r+0x6bc>
 800cc8e:	9902      	ldr	r1, [sp, #8]
 800cc90:	4648      	mov	r0, r9
 800cc92:	f000 fbbd 	bl	800d410 <_Bfree>
 800cc96:	2300      	movs	r3, #0
 800cc98:	7033      	strb	r3, [r6, #0]
 800cc9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cc9c:	3701      	adds	r7, #1
 800cc9e:	601f      	str	r7, [r3, #0]
 800cca0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	f000 824b 	beq.w	800d13e <_dtoa_r+0xb4e>
 800cca8:	601e      	str	r6, [r3, #0]
 800ccaa:	e248      	b.n	800d13e <_dtoa_r+0xb4e>
 800ccac:	46b8      	mov	r8, r7
 800ccae:	4633      	mov	r3, r6
 800ccb0:	461e      	mov	r6, r3
 800ccb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccb6:	2a39      	cmp	r2, #57	@ 0x39
 800ccb8:	d106      	bne.n	800ccc8 <_dtoa_r+0x6d8>
 800ccba:	459a      	cmp	sl, r3
 800ccbc:	d1f8      	bne.n	800ccb0 <_dtoa_r+0x6c0>
 800ccbe:	2230      	movs	r2, #48	@ 0x30
 800ccc0:	f108 0801 	add.w	r8, r8, #1
 800ccc4:	f88a 2000 	strb.w	r2, [sl]
 800ccc8:	781a      	ldrb	r2, [r3, #0]
 800ccca:	3201      	adds	r2, #1
 800cccc:	701a      	strb	r2, [r3, #0]
 800ccce:	e7a0      	b.n	800cc12 <_dtoa_r+0x622>
 800ccd0:	4b6f      	ldr	r3, [pc, #444]	@ (800ce90 <_dtoa_r+0x8a0>)
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f7f3 fc98 	bl	8000608 <__aeabi_dmul>
 800ccd8:	2200      	movs	r2, #0
 800ccda:	2300      	movs	r3, #0
 800ccdc:	4604      	mov	r4, r0
 800ccde:	460d      	mov	r5, r1
 800cce0:	f7f3 fefa 	bl	8000ad8 <__aeabi_dcmpeq>
 800cce4:	2800      	cmp	r0, #0
 800cce6:	d09f      	beq.n	800cc28 <_dtoa_r+0x638>
 800cce8:	e7d1      	b.n	800cc8e <_dtoa_r+0x69e>
 800ccea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccec:	2a00      	cmp	r2, #0
 800ccee:	f000 80ea 	beq.w	800cec6 <_dtoa_r+0x8d6>
 800ccf2:	9a07      	ldr	r2, [sp, #28]
 800ccf4:	2a01      	cmp	r2, #1
 800ccf6:	f300 80cd 	bgt.w	800ce94 <_dtoa_r+0x8a4>
 800ccfa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ccfc:	2a00      	cmp	r2, #0
 800ccfe:	f000 80c1 	beq.w	800ce84 <_dtoa_r+0x894>
 800cd02:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cd06:	9c08      	ldr	r4, [sp, #32]
 800cd08:	9e00      	ldr	r6, [sp, #0]
 800cd0a:	9a00      	ldr	r2, [sp, #0]
 800cd0c:	441a      	add	r2, r3
 800cd0e:	9200      	str	r2, [sp, #0]
 800cd10:	9a06      	ldr	r2, [sp, #24]
 800cd12:	2101      	movs	r1, #1
 800cd14:	441a      	add	r2, r3
 800cd16:	4648      	mov	r0, r9
 800cd18:	9206      	str	r2, [sp, #24]
 800cd1a:	f000 fc2d 	bl	800d578 <__i2b>
 800cd1e:	4605      	mov	r5, r0
 800cd20:	b166      	cbz	r6, 800cd3c <_dtoa_r+0x74c>
 800cd22:	9b06      	ldr	r3, [sp, #24]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	dd09      	ble.n	800cd3c <_dtoa_r+0x74c>
 800cd28:	42b3      	cmp	r3, r6
 800cd2a:	9a00      	ldr	r2, [sp, #0]
 800cd2c:	bfa8      	it	ge
 800cd2e:	4633      	movge	r3, r6
 800cd30:	1ad2      	subs	r2, r2, r3
 800cd32:	9200      	str	r2, [sp, #0]
 800cd34:	9a06      	ldr	r2, [sp, #24]
 800cd36:	1af6      	subs	r6, r6, r3
 800cd38:	1ad3      	subs	r3, r2, r3
 800cd3a:	9306      	str	r3, [sp, #24]
 800cd3c:	9b08      	ldr	r3, [sp, #32]
 800cd3e:	b30b      	cbz	r3, 800cd84 <_dtoa_r+0x794>
 800cd40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f000 80c6 	beq.w	800ced4 <_dtoa_r+0x8e4>
 800cd48:	2c00      	cmp	r4, #0
 800cd4a:	f000 80c0 	beq.w	800cece <_dtoa_r+0x8de>
 800cd4e:	4629      	mov	r1, r5
 800cd50:	4622      	mov	r2, r4
 800cd52:	4648      	mov	r0, r9
 800cd54:	f000 fcc8 	bl	800d6e8 <__pow5mult>
 800cd58:	9a02      	ldr	r2, [sp, #8]
 800cd5a:	4601      	mov	r1, r0
 800cd5c:	4605      	mov	r5, r0
 800cd5e:	4648      	mov	r0, r9
 800cd60:	f000 fc20 	bl	800d5a4 <__multiply>
 800cd64:	9902      	ldr	r1, [sp, #8]
 800cd66:	4680      	mov	r8, r0
 800cd68:	4648      	mov	r0, r9
 800cd6a:	f000 fb51 	bl	800d410 <_Bfree>
 800cd6e:	9b08      	ldr	r3, [sp, #32]
 800cd70:	1b1b      	subs	r3, r3, r4
 800cd72:	9308      	str	r3, [sp, #32]
 800cd74:	f000 80b1 	beq.w	800ceda <_dtoa_r+0x8ea>
 800cd78:	9a08      	ldr	r2, [sp, #32]
 800cd7a:	4641      	mov	r1, r8
 800cd7c:	4648      	mov	r0, r9
 800cd7e:	f000 fcb3 	bl	800d6e8 <__pow5mult>
 800cd82:	9002      	str	r0, [sp, #8]
 800cd84:	2101      	movs	r1, #1
 800cd86:	4648      	mov	r0, r9
 800cd88:	f000 fbf6 	bl	800d578 <__i2b>
 800cd8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd8e:	4604      	mov	r4, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	f000 81d8 	beq.w	800d146 <_dtoa_r+0xb56>
 800cd96:	461a      	mov	r2, r3
 800cd98:	4601      	mov	r1, r0
 800cd9a:	4648      	mov	r0, r9
 800cd9c:	f000 fca4 	bl	800d6e8 <__pow5mult>
 800cda0:	9b07      	ldr	r3, [sp, #28]
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	4604      	mov	r4, r0
 800cda6:	f300 809f 	bgt.w	800cee8 <_dtoa_r+0x8f8>
 800cdaa:	9b04      	ldr	r3, [sp, #16]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f040 8097 	bne.w	800cee0 <_dtoa_r+0x8f0>
 800cdb2:	9b05      	ldr	r3, [sp, #20]
 800cdb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f040 8093 	bne.w	800cee4 <_dtoa_r+0x8f4>
 800cdbe:	9b05      	ldr	r3, [sp, #20]
 800cdc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cdc4:	0d1b      	lsrs	r3, r3, #20
 800cdc6:	051b      	lsls	r3, r3, #20
 800cdc8:	b133      	cbz	r3, 800cdd8 <_dtoa_r+0x7e8>
 800cdca:	9b00      	ldr	r3, [sp, #0]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	9300      	str	r3, [sp, #0]
 800cdd0:	9b06      	ldr	r3, [sp, #24]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	9306      	str	r3, [sp, #24]
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	9308      	str	r3, [sp, #32]
 800cdda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f000 81b8 	beq.w	800d152 <_dtoa_r+0xb62>
 800cde2:	6923      	ldr	r3, [r4, #16]
 800cde4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cde8:	6918      	ldr	r0, [r3, #16]
 800cdea:	f000 fb79 	bl	800d4e0 <__hi0bits>
 800cdee:	f1c0 0020 	rsb	r0, r0, #32
 800cdf2:	9b06      	ldr	r3, [sp, #24]
 800cdf4:	4418      	add	r0, r3
 800cdf6:	f010 001f 	ands.w	r0, r0, #31
 800cdfa:	f000 8082 	beq.w	800cf02 <_dtoa_r+0x912>
 800cdfe:	f1c0 0320 	rsb	r3, r0, #32
 800ce02:	2b04      	cmp	r3, #4
 800ce04:	dd73      	ble.n	800ceee <_dtoa_r+0x8fe>
 800ce06:	9b00      	ldr	r3, [sp, #0]
 800ce08:	f1c0 001c 	rsb	r0, r0, #28
 800ce0c:	4403      	add	r3, r0
 800ce0e:	9300      	str	r3, [sp, #0]
 800ce10:	9b06      	ldr	r3, [sp, #24]
 800ce12:	4403      	add	r3, r0
 800ce14:	4406      	add	r6, r0
 800ce16:	9306      	str	r3, [sp, #24]
 800ce18:	9b00      	ldr	r3, [sp, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	dd05      	ble.n	800ce2a <_dtoa_r+0x83a>
 800ce1e:	9902      	ldr	r1, [sp, #8]
 800ce20:	461a      	mov	r2, r3
 800ce22:	4648      	mov	r0, r9
 800ce24:	f000 fcba 	bl	800d79c <__lshift>
 800ce28:	9002      	str	r0, [sp, #8]
 800ce2a:	9b06      	ldr	r3, [sp, #24]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	dd05      	ble.n	800ce3c <_dtoa_r+0x84c>
 800ce30:	4621      	mov	r1, r4
 800ce32:	461a      	mov	r2, r3
 800ce34:	4648      	mov	r0, r9
 800ce36:	f000 fcb1 	bl	800d79c <__lshift>
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d061      	beq.n	800cf06 <_dtoa_r+0x916>
 800ce42:	9802      	ldr	r0, [sp, #8]
 800ce44:	4621      	mov	r1, r4
 800ce46:	f000 fd15 	bl	800d874 <__mcmp>
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	da5b      	bge.n	800cf06 <_dtoa_r+0x916>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	9902      	ldr	r1, [sp, #8]
 800ce52:	220a      	movs	r2, #10
 800ce54:	4648      	mov	r0, r9
 800ce56:	f000 fafd 	bl	800d454 <__multadd>
 800ce5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce5c:	9002      	str	r0, [sp, #8]
 800ce5e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	f000 8177 	beq.w	800d156 <_dtoa_r+0xb66>
 800ce68:	4629      	mov	r1, r5
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	220a      	movs	r2, #10
 800ce6e:	4648      	mov	r0, r9
 800ce70:	f000 faf0 	bl	800d454 <__multadd>
 800ce74:	f1bb 0f00 	cmp.w	fp, #0
 800ce78:	4605      	mov	r5, r0
 800ce7a:	dc6f      	bgt.n	800cf5c <_dtoa_r+0x96c>
 800ce7c:	9b07      	ldr	r3, [sp, #28]
 800ce7e:	2b02      	cmp	r3, #2
 800ce80:	dc49      	bgt.n	800cf16 <_dtoa_r+0x926>
 800ce82:	e06b      	b.n	800cf5c <_dtoa_r+0x96c>
 800ce84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ce86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ce8a:	e73c      	b.n	800cd06 <_dtoa_r+0x716>
 800ce8c:	3fe00000 	.word	0x3fe00000
 800ce90:	40240000 	.word	0x40240000
 800ce94:	9b03      	ldr	r3, [sp, #12]
 800ce96:	1e5c      	subs	r4, r3, #1
 800ce98:	9b08      	ldr	r3, [sp, #32]
 800ce9a:	42a3      	cmp	r3, r4
 800ce9c:	db09      	blt.n	800ceb2 <_dtoa_r+0x8c2>
 800ce9e:	1b1c      	subs	r4, r3, r4
 800cea0:	9b03      	ldr	r3, [sp, #12]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f6bf af30 	bge.w	800cd08 <_dtoa_r+0x718>
 800cea8:	9b00      	ldr	r3, [sp, #0]
 800ceaa:	9a03      	ldr	r2, [sp, #12]
 800ceac:	1a9e      	subs	r6, r3, r2
 800ceae:	2300      	movs	r3, #0
 800ceb0:	e72b      	b.n	800cd0a <_dtoa_r+0x71a>
 800ceb2:	9b08      	ldr	r3, [sp, #32]
 800ceb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ceb6:	9408      	str	r4, [sp, #32]
 800ceb8:	1ae3      	subs	r3, r4, r3
 800ceba:	441a      	add	r2, r3
 800cebc:	9e00      	ldr	r6, [sp, #0]
 800cebe:	9b03      	ldr	r3, [sp, #12]
 800cec0:	920d      	str	r2, [sp, #52]	@ 0x34
 800cec2:	2400      	movs	r4, #0
 800cec4:	e721      	b.n	800cd0a <_dtoa_r+0x71a>
 800cec6:	9c08      	ldr	r4, [sp, #32]
 800cec8:	9e00      	ldr	r6, [sp, #0]
 800ceca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800cecc:	e728      	b.n	800cd20 <_dtoa_r+0x730>
 800cece:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ced2:	e751      	b.n	800cd78 <_dtoa_r+0x788>
 800ced4:	9a08      	ldr	r2, [sp, #32]
 800ced6:	9902      	ldr	r1, [sp, #8]
 800ced8:	e750      	b.n	800cd7c <_dtoa_r+0x78c>
 800ceda:	f8cd 8008 	str.w	r8, [sp, #8]
 800cede:	e751      	b.n	800cd84 <_dtoa_r+0x794>
 800cee0:	2300      	movs	r3, #0
 800cee2:	e779      	b.n	800cdd8 <_dtoa_r+0x7e8>
 800cee4:	9b04      	ldr	r3, [sp, #16]
 800cee6:	e777      	b.n	800cdd8 <_dtoa_r+0x7e8>
 800cee8:	2300      	movs	r3, #0
 800ceea:	9308      	str	r3, [sp, #32]
 800ceec:	e779      	b.n	800cde2 <_dtoa_r+0x7f2>
 800ceee:	d093      	beq.n	800ce18 <_dtoa_r+0x828>
 800cef0:	9a00      	ldr	r2, [sp, #0]
 800cef2:	331c      	adds	r3, #28
 800cef4:	441a      	add	r2, r3
 800cef6:	9200      	str	r2, [sp, #0]
 800cef8:	9a06      	ldr	r2, [sp, #24]
 800cefa:	441a      	add	r2, r3
 800cefc:	441e      	add	r6, r3
 800cefe:	9206      	str	r2, [sp, #24]
 800cf00:	e78a      	b.n	800ce18 <_dtoa_r+0x828>
 800cf02:	4603      	mov	r3, r0
 800cf04:	e7f4      	b.n	800cef0 <_dtoa_r+0x900>
 800cf06:	9b03      	ldr	r3, [sp, #12]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	46b8      	mov	r8, r7
 800cf0c:	dc20      	bgt.n	800cf50 <_dtoa_r+0x960>
 800cf0e:	469b      	mov	fp, r3
 800cf10:	9b07      	ldr	r3, [sp, #28]
 800cf12:	2b02      	cmp	r3, #2
 800cf14:	dd1e      	ble.n	800cf54 <_dtoa_r+0x964>
 800cf16:	f1bb 0f00 	cmp.w	fp, #0
 800cf1a:	f47f adb1 	bne.w	800ca80 <_dtoa_r+0x490>
 800cf1e:	4621      	mov	r1, r4
 800cf20:	465b      	mov	r3, fp
 800cf22:	2205      	movs	r2, #5
 800cf24:	4648      	mov	r0, r9
 800cf26:	f000 fa95 	bl	800d454 <__multadd>
 800cf2a:	4601      	mov	r1, r0
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	9802      	ldr	r0, [sp, #8]
 800cf30:	f000 fca0 	bl	800d874 <__mcmp>
 800cf34:	2800      	cmp	r0, #0
 800cf36:	f77f ada3 	ble.w	800ca80 <_dtoa_r+0x490>
 800cf3a:	4656      	mov	r6, sl
 800cf3c:	2331      	movs	r3, #49	@ 0x31
 800cf3e:	f806 3b01 	strb.w	r3, [r6], #1
 800cf42:	f108 0801 	add.w	r8, r8, #1
 800cf46:	e59f      	b.n	800ca88 <_dtoa_r+0x498>
 800cf48:	9c03      	ldr	r4, [sp, #12]
 800cf4a:	46b8      	mov	r8, r7
 800cf4c:	4625      	mov	r5, r4
 800cf4e:	e7f4      	b.n	800cf3a <_dtoa_r+0x94a>
 800cf50:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800cf54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	f000 8101 	beq.w	800d15e <_dtoa_r+0xb6e>
 800cf5c:	2e00      	cmp	r6, #0
 800cf5e:	dd05      	ble.n	800cf6c <_dtoa_r+0x97c>
 800cf60:	4629      	mov	r1, r5
 800cf62:	4632      	mov	r2, r6
 800cf64:	4648      	mov	r0, r9
 800cf66:	f000 fc19 	bl	800d79c <__lshift>
 800cf6a:	4605      	mov	r5, r0
 800cf6c:	9b08      	ldr	r3, [sp, #32]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d05c      	beq.n	800d02c <_dtoa_r+0xa3c>
 800cf72:	6869      	ldr	r1, [r5, #4]
 800cf74:	4648      	mov	r0, r9
 800cf76:	f000 fa0b 	bl	800d390 <_Balloc>
 800cf7a:	4606      	mov	r6, r0
 800cf7c:	b928      	cbnz	r0, 800cf8a <_dtoa_r+0x99a>
 800cf7e:	4b82      	ldr	r3, [pc, #520]	@ (800d188 <_dtoa_r+0xb98>)
 800cf80:	4602      	mov	r2, r0
 800cf82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cf86:	f7ff bb4a 	b.w	800c61e <_dtoa_r+0x2e>
 800cf8a:	692a      	ldr	r2, [r5, #16]
 800cf8c:	3202      	adds	r2, #2
 800cf8e:	0092      	lsls	r2, r2, #2
 800cf90:	f105 010c 	add.w	r1, r5, #12
 800cf94:	300c      	adds	r0, #12
 800cf96:	f000 ffa3 	bl	800dee0 <memcpy>
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	4631      	mov	r1, r6
 800cf9e:	4648      	mov	r0, r9
 800cfa0:	f000 fbfc 	bl	800d79c <__lshift>
 800cfa4:	f10a 0301 	add.w	r3, sl, #1
 800cfa8:	9300      	str	r3, [sp, #0]
 800cfaa:	eb0a 030b 	add.w	r3, sl, fp
 800cfae:	9308      	str	r3, [sp, #32]
 800cfb0:	9b04      	ldr	r3, [sp, #16]
 800cfb2:	f003 0301 	and.w	r3, r3, #1
 800cfb6:	462f      	mov	r7, r5
 800cfb8:	9306      	str	r3, [sp, #24]
 800cfba:	4605      	mov	r5, r0
 800cfbc:	9b00      	ldr	r3, [sp, #0]
 800cfbe:	9802      	ldr	r0, [sp, #8]
 800cfc0:	4621      	mov	r1, r4
 800cfc2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800cfc6:	f7ff fa8a 	bl	800c4de <quorem>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	3330      	adds	r3, #48	@ 0x30
 800cfce:	9003      	str	r0, [sp, #12]
 800cfd0:	4639      	mov	r1, r7
 800cfd2:	9802      	ldr	r0, [sp, #8]
 800cfd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfd6:	f000 fc4d 	bl	800d874 <__mcmp>
 800cfda:	462a      	mov	r2, r5
 800cfdc:	9004      	str	r0, [sp, #16]
 800cfde:	4621      	mov	r1, r4
 800cfe0:	4648      	mov	r0, r9
 800cfe2:	f000 fc63 	bl	800d8ac <__mdiff>
 800cfe6:	68c2      	ldr	r2, [r0, #12]
 800cfe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfea:	4606      	mov	r6, r0
 800cfec:	bb02      	cbnz	r2, 800d030 <_dtoa_r+0xa40>
 800cfee:	4601      	mov	r1, r0
 800cff0:	9802      	ldr	r0, [sp, #8]
 800cff2:	f000 fc3f 	bl	800d874 <__mcmp>
 800cff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cff8:	4602      	mov	r2, r0
 800cffa:	4631      	mov	r1, r6
 800cffc:	4648      	mov	r0, r9
 800cffe:	920c      	str	r2, [sp, #48]	@ 0x30
 800d000:	9309      	str	r3, [sp, #36]	@ 0x24
 800d002:	f000 fa05 	bl	800d410 <_Bfree>
 800d006:	9b07      	ldr	r3, [sp, #28]
 800d008:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d00a:	9e00      	ldr	r6, [sp, #0]
 800d00c:	ea42 0103 	orr.w	r1, r2, r3
 800d010:	9b06      	ldr	r3, [sp, #24]
 800d012:	4319      	orrs	r1, r3
 800d014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d016:	d10d      	bne.n	800d034 <_dtoa_r+0xa44>
 800d018:	2b39      	cmp	r3, #57	@ 0x39
 800d01a:	d027      	beq.n	800d06c <_dtoa_r+0xa7c>
 800d01c:	9a04      	ldr	r2, [sp, #16]
 800d01e:	2a00      	cmp	r2, #0
 800d020:	dd01      	ble.n	800d026 <_dtoa_r+0xa36>
 800d022:	9b03      	ldr	r3, [sp, #12]
 800d024:	3331      	adds	r3, #49	@ 0x31
 800d026:	f88b 3000 	strb.w	r3, [fp]
 800d02a:	e52e      	b.n	800ca8a <_dtoa_r+0x49a>
 800d02c:	4628      	mov	r0, r5
 800d02e:	e7b9      	b.n	800cfa4 <_dtoa_r+0x9b4>
 800d030:	2201      	movs	r2, #1
 800d032:	e7e2      	b.n	800cffa <_dtoa_r+0xa0a>
 800d034:	9904      	ldr	r1, [sp, #16]
 800d036:	2900      	cmp	r1, #0
 800d038:	db04      	blt.n	800d044 <_dtoa_r+0xa54>
 800d03a:	9807      	ldr	r0, [sp, #28]
 800d03c:	4301      	orrs	r1, r0
 800d03e:	9806      	ldr	r0, [sp, #24]
 800d040:	4301      	orrs	r1, r0
 800d042:	d120      	bne.n	800d086 <_dtoa_r+0xa96>
 800d044:	2a00      	cmp	r2, #0
 800d046:	ddee      	ble.n	800d026 <_dtoa_r+0xa36>
 800d048:	9902      	ldr	r1, [sp, #8]
 800d04a:	9300      	str	r3, [sp, #0]
 800d04c:	2201      	movs	r2, #1
 800d04e:	4648      	mov	r0, r9
 800d050:	f000 fba4 	bl	800d79c <__lshift>
 800d054:	4621      	mov	r1, r4
 800d056:	9002      	str	r0, [sp, #8]
 800d058:	f000 fc0c 	bl	800d874 <__mcmp>
 800d05c:	2800      	cmp	r0, #0
 800d05e:	9b00      	ldr	r3, [sp, #0]
 800d060:	dc02      	bgt.n	800d068 <_dtoa_r+0xa78>
 800d062:	d1e0      	bne.n	800d026 <_dtoa_r+0xa36>
 800d064:	07da      	lsls	r2, r3, #31
 800d066:	d5de      	bpl.n	800d026 <_dtoa_r+0xa36>
 800d068:	2b39      	cmp	r3, #57	@ 0x39
 800d06a:	d1da      	bne.n	800d022 <_dtoa_r+0xa32>
 800d06c:	2339      	movs	r3, #57	@ 0x39
 800d06e:	f88b 3000 	strb.w	r3, [fp]
 800d072:	4633      	mov	r3, r6
 800d074:	461e      	mov	r6, r3
 800d076:	3b01      	subs	r3, #1
 800d078:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d07c:	2a39      	cmp	r2, #57	@ 0x39
 800d07e:	d04e      	beq.n	800d11e <_dtoa_r+0xb2e>
 800d080:	3201      	adds	r2, #1
 800d082:	701a      	strb	r2, [r3, #0]
 800d084:	e501      	b.n	800ca8a <_dtoa_r+0x49a>
 800d086:	2a00      	cmp	r2, #0
 800d088:	dd03      	ble.n	800d092 <_dtoa_r+0xaa2>
 800d08a:	2b39      	cmp	r3, #57	@ 0x39
 800d08c:	d0ee      	beq.n	800d06c <_dtoa_r+0xa7c>
 800d08e:	3301      	adds	r3, #1
 800d090:	e7c9      	b.n	800d026 <_dtoa_r+0xa36>
 800d092:	9a00      	ldr	r2, [sp, #0]
 800d094:	9908      	ldr	r1, [sp, #32]
 800d096:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d09a:	428a      	cmp	r2, r1
 800d09c:	d028      	beq.n	800d0f0 <_dtoa_r+0xb00>
 800d09e:	9902      	ldr	r1, [sp, #8]
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	220a      	movs	r2, #10
 800d0a4:	4648      	mov	r0, r9
 800d0a6:	f000 f9d5 	bl	800d454 <__multadd>
 800d0aa:	42af      	cmp	r7, r5
 800d0ac:	9002      	str	r0, [sp, #8]
 800d0ae:	f04f 0300 	mov.w	r3, #0
 800d0b2:	f04f 020a 	mov.w	r2, #10
 800d0b6:	4639      	mov	r1, r7
 800d0b8:	4648      	mov	r0, r9
 800d0ba:	d107      	bne.n	800d0cc <_dtoa_r+0xadc>
 800d0bc:	f000 f9ca 	bl	800d454 <__multadd>
 800d0c0:	4607      	mov	r7, r0
 800d0c2:	4605      	mov	r5, r0
 800d0c4:	9b00      	ldr	r3, [sp, #0]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	9300      	str	r3, [sp, #0]
 800d0ca:	e777      	b.n	800cfbc <_dtoa_r+0x9cc>
 800d0cc:	f000 f9c2 	bl	800d454 <__multadd>
 800d0d0:	4629      	mov	r1, r5
 800d0d2:	4607      	mov	r7, r0
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	220a      	movs	r2, #10
 800d0d8:	4648      	mov	r0, r9
 800d0da:	f000 f9bb 	bl	800d454 <__multadd>
 800d0de:	4605      	mov	r5, r0
 800d0e0:	e7f0      	b.n	800d0c4 <_dtoa_r+0xad4>
 800d0e2:	f1bb 0f00 	cmp.w	fp, #0
 800d0e6:	bfcc      	ite	gt
 800d0e8:	465e      	movgt	r6, fp
 800d0ea:	2601      	movle	r6, #1
 800d0ec:	4456      	add	r6, sl
 800d0ee:	2700      	movs	r7, #0
 800d0f0:	9902      	ldr	r1, [sp, #8]
 800d0f2:	9300      	str	r3, [sp, #0]
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	4648      	mov	r0, r9
 800d0f8:	f000 fb50 	bl	800d79c <__lshift>
 800d0fc:	4621      	mov	r1, r4
 800d0fe:	9002      	str	r0, [sp, #8]
 800d100:	f000 fbb8 	bl	800d874 <__mcmp>
 800d104:	2800      	cmp	r0, #0
 800d106:	dcb4      	bgt.n	800d072 <_dtoa_r+0xa82>
 800d108:	d102      	bne.n	800d110 <_dtoa_r+0xb20>
 800d10a:	9b00      	ldr	r3, [sp, #0]
 800d10c:	07db      	lsls	r3, r3, #31
 800d10e:	d4b0      	bmi.n	800d072 <_dtoa_r+0xa82>
 800d110:	4633      	mov	r3, r6
 800d112:	461e      	mov	r6, r3
 800d114:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d118:	2a30      	cmp	r2, #48	@ 0x30
 800d11a:	d0fa      	beq.n	800d112 <_dtoa_r+0xb22>
 800d11c:	e4b5      	b.n	800ca8a <_dtoa_r+0x49a>
 800d11e:	459a      	cmp	sl, r3
 800d120:	d1a8      	bne.n	800d074 <_dtoa_r+0xa84>
 800d122:	2331      	movs	r3, #49	@ 0x31
 800d124:	f108 0801 	add.w	r8, r8, #1
 800d128:	f88a 3000 	strb.w	r3, [sl]
 800d12c:	e4ad      	b.n	800ca8a <_dtoa_r+0x49a>
 800d12e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d130:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d18c <_dtoa_r+0xb9c>
 800d134:	b11b      	cbz	r3, 800d13e <_dtoa_r+0xb4e>
 800d136:	f10a 0308 	add.w	r3, sl, #8
 800d13a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d13c:	6013      	str	r3, [r2, #0]
 800d13e:	4650      	mov	r0, sl
 800d140:	b017      	add	sp, #92	@ 0x5c
 800d142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d146:	9b07      	ldr	r3, [sp, #28]
 800d148:	2b01      	cmp	r3, #1
 800d14a:	f77f ae2e 	ble.w	800cdaa <_dtoa_r+0x7ba>
 800d14e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d150:	9308      	str	r3, [sp, #32]
 800d152:	2001      	movs	r0, #1
 800d154:	e64d      	b.n	800cdf2 <_dtoa_r+0x802>
 800d156:	f1bb 0f00 	cmp.w	fp, #0
 800d15a:	f77f aed9 	ble.w	800cf10 <_dtoa_r+0x920>
 800d15e:	4656      	mov	r6, sl
 800d160:	9802      	ldr	r0, [sp, #8]
 800d162:	4621      	mov	r1, r4
 800d164:	f7ff f9bb 	bl	800c4de <quorem>
 800d168:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d16c:	f806 3b01 	strb.w	r3, [r6], #1
 800d170:	eba6 020a 	sub.w	r2, r6, sl
 800d174:	4593      	cmp	fp, r2
 800d176:	ddb4      	ble.n	800d0e2 <_dtoa_r+0xaf2>
 800d178:	9902      	ldr	r1, [sp, #8]
 800d17a:	2300      	movs	r3, #0
 800d17c:	220a      	movs	r2, #10
 800d17e:	4648      	mov	r0, r9
 800d180:	f000 f968 	bl	800d454 <__multadd>
 800d184:	9002      	str	r0, [sp, #8]
 800d186:	e7eb      	b.n	800d160 <_dtoa_r+0xb70>
 800d188:	0800e804 	.word	0x0800e804
 800d18c:	0800e788 	.word	0x0800e788

0800d190 <_free_r>:
 800d190:	b538      	push	{r3, r4, r5, lr}
 800d192:	4605      	mov	r5, r0
 800d194:	2900      	cmp	r1, #0
 800d196:	d041      	beq.n	800d21c <_free_r+0x8c>
 800d198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d19c:	1f0c      	subs	r4, r1, #4
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	bfb8      	it	lt
 800d1a2:	18e4      	addlt	r4, r4, r3
 800d1a4:	f000 f8e8 	bl	800d378 <__malloc_lock>
 800d1a8:	4a1d      	ldr	r2, [pc, #116]	@ (800d220 <_free_r+0x90>)
 800d1aa:	6813      	ldr	r3, [r2, #0]
 800d1ac:	b933      	cbnz	r3, 800d1bc <_free_r+0x2c>
 800d1ae:	6063      	str	r3, [r4, #4]
 800d1b0:	6014      	str	r4, [r2, #0]
 800d1b2:	4628      	mov	r0, r5
 800d1b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1b8:	f000 b8e4 	b.w	800d384 <__malloc_unlock>
 800d1bc:	42a3      	cmp	r3, r4
 800d1be:	d908      	bls.n	800d1d2 <_free_r+0x42>
 800d1c0:	6820      	ldr	r0, [r4, #0]
 800d1c2:	1821      	adds	r1, r4, r0
 800d1c4:	428b      	cmp	r3, r1
 800d1c6:	bf01      	itttt	eq
 800d1c8:	6819      	ldreq	r1, [r3, #0]
 800d1ca:	685b      	ldreq	r3, [r3, #4]
 800d1cc:	1809      	addeq	r1, r1, r0
 800d1ce:	6021      	streq	r1, [r4, #0]
 800d1d0:	e7ed      	b.n	800d1ae <_free_r+0x1e>
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	b10b      	cbz	r3, 800d1dc <_free_r+0x4c>
 800d1d8:	42a3      	cmp	r3, r4
 800d1da:	d9fa      	bls.n	800d1d2 <_free_r+0x42>
 800d1dc:	6811      	ldr	r1, [r2, #0]
 800d1de:	1850      	adds	r0, r2, r1
 800d1e0:	42a0      	cmp	r0, r4
 800d1e2:	d10b      	bne.n	800d1fc <_free_r+0x6c>
 800d1e4:	6820      	ldr	r0, [r4, #0]
 800d1e6:	4401      	add	r1, r0
 800d1e8:	1850      	adds	r0, r2, r1
 800d1ea:	4283      	cmp	r3, r0
 800d1ec:	6011      	str	r1, [r2, #0]
 800d1ee:	d1e0      	bne.n	800d1b2 <_free_r+0x22>
 800d1f0:	6818      	ldr	r0, [r3, #0]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	6053      	str	r3, [r2, #4]
 800d1f6:	4408      	add	r0, r1
 800d1f8:	6010      	str	r0, [r2, #0]
 800d1fa:	e7da      	b.n	800d1b2 <_free_r+0x22>
 800d1fc:	d902      	bls.n	800d204 <_free_r+0x74>
 800d1fe:	230c      	movs	r3, #12
 800d200:	602b      	str	r3, [r5, #0]
 800d202:	e7d6      	b.n	800d1b2 <_free_r+0x22>
 800d204:	6820      	ldr	r0, [r4, #0]
 800d206:	1821      	adds	r1, r4, r0
 800d208:	428b      	cmp	r3, r1
 800d20a:	bf04      	itt	eq
 800d20c:	6819      	ldreq	r1, [r3, #0]
 800d20e:	685b      	ldreq	r3, [r3, #4]
 800d210:	6063      	str	r3, [r4, #4]
 800d212:	bf04      	itt	eq
 800d214:	1809      	addeq	r1, r1, r0
 800d216:	6021      	streq	r1, [r4, #0]
 800d218:	6054      	str	r4, [r2, #4]
 800d21a:	e7ca      	b.n	800d1b2 <_free_r+0x22>
 800d21c:	bd38      	pop	{r3, r4, r5, pc}
 800d21e:	bf00      	nop
 800d220:	20002218 	.word	0x20002218

0800d224 <malloc>:
 800d224:	4b02      	ldr	r3, [pc, #8]	@ (800d230 <malloc+0xc>)
 800d226:	4601      	mov	r1, r0
 800d228:	6818      	ldr	r0, [r3, #0]
 800d22a:	f000 b825 	b.w	800d278 <_malloc_r>
 800d22e:	bf00      	nop
 800d230:	20000110 	.word	0x20000110

0800d234 <sbrk_aligned>:
 800d234:	b570      	push	{r4, r5, r6, lr}
 800d236:	4e0f      	ldr	r6, [pc, #60]	@ (800d274 <sbrk_aligned+0x40>)
 800d238:	460c      	mov	r4, r1
 800d23a:	6831      	ldr	r1, [r6, #0]
 800d23c:	4605      	mov	r5, r0
 800d23e:	b911      	cbnz	r1, 800d246 <sbrk_aligned+0x12>
 800d240:	f000 fe3e 	bl	800dec0 <_sbrk_r>
 800d244:	6030      	str	r0, [r6, #0]
 800d246:	4621      	mov	r1, r4
 800d248:	4628      	mov	r0, r5
 800d24a:	f000 fe39 	bl	800dec0 <_sbrk_r>
 800d24e:	1c43      	adds	r3, r0, #1
 800d250:	d103      	bne.n	800d25a <sbrk_aligned+0x26>
 800d252:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d256:	4620      	mov	r0, r4
 800d258:	bd70      	pop	{r4, r5, r6, pc}
 800d25a:	1cc4      	adds	r4, r0, #3
 800d25c:	f024 0403 	bic.w	r4, r4, #3
 800d260:	42a0      	cmp	r0, r4
 800d262:	d0f8      	beq.n	800d256 <sbrk_aligned+0x22>
 800d264:	1a21      	subs	r1, r4, r0
 800d266:	4628      	mov	r0, r5
 800d268:	f000 fe2a 	bl	800dec0 <_sbrk_r>
 800d26c:	3001      	adds	r0, #1
 800d26e:	d1f2      	bne.n	800d256 <sbrk_aligned+0x22>
 800d270:	e7ef      	b.n	800d252 <sbrk_aligned+0x1e>
 800d272:	bf00      	nop
 800d274:	20002214 	.word	0x20002214

0800d278 <_malloc_r>:
 800d278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d27c:	1ccd      	adds	r5, r1, #3
 800d27e:	f025 0503 	bic.w	r5, r5, #3
 800d282:	3508      	adds	r5, #8
 800d284:	2d0c      	cmp	r5, #12
 800d286:	bf38      	it	cc
 800d288:	250c      	movcc	r5, #12
 800d28a:	2d00      	cmp	r5, #0
 800d28c:	4606      	mov	r6, r0
 800d28e:	db01      	blt.n	800d294 <_malloc_r+0x1c>
 800d290:	42a9      	cmp	r1, r5
 800d292:	d904      	bls.n	800d29e <_malloc_r+0x26>
 800d294:	230c      	movs	r3, #12
 800d296:	6033      	str	r3, [r6, #0]
 800d298:	2000      	movs	r0, #0
 800d29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d29e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d374 <_malloc_r+0xfc>
 800d2a2:	f000 f869 	bl	800d378 <__malloc_lock>
 800d2a6:	f8d8 3000 	ldr.w	r3, [r8]
 800d2aa:	461c      	mov	r4, r3
 800d2ac:	bb44      	cbnz	r4, 800d300 <_malloc_r+0x88>
 800d2ae:	4629      	mov	r1, r5
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	f7ff ffbf 	bl	800d234 <sbrk_aligned>
 800d2b6:	1c43      	adds	r3, r0, #1
 800d2b8:	4604      	mov	r4, r0
 800d2ba:	d158      	bne.n	800d36e <_malloc_r+0xf6>
 800d2bc:	f8d8 4000 	ldr.w	r4, [r8]
 800d2c0:	4627      	mov	r7, r4
 800d2c2:	2f00      	cmp	r7, #0
 800d2c4:	d143      	bne.n	800d34e <_malloc_r+0xd6>
 800d2c6:	2c00      	cmp	r4, #0
 800d2c8:	d04b      	beq.n	800d362 <_malloc_r+0xea>
 800d2ca:	6823      	ldr	r3, [r4, #0]
 800d2cc:	4639      	mov	r1, r7
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	eb04 0903 	add.w	r9, r4, r3
 800d2d4:	f000 fdf4 	bl	800dec0 <_sbrk_r>
 800d2d8:	4581      	cmp	r9, r0
 800d2da:	d142      	bne.n	800d362 <_malloc_r+0xea>
 800d2dc:	6821      	ldr	r1, [r4, #0]
 800d2de:	1a6d      	subs	r5, r5, r1
 800d2e0:	4629      	mov	r1, r5
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	f7ff ffa6 	bl	800d234 <sbrk_aligned>
 800d2e8:	3001      	adds	r0, #1
 800d2ea:	d03a      	beq.n	800d362 <_malloc_r+0xea>
 800d2ec:	6823      	ldr	r3, [r4, #0]
 800d2ee:	442b      	add	r3, r5
 800d2f0:	6023      	str	r3, [r4, #0]
 800d2f2:	f8d8 3000 	ldr.w	r3, [r8]
 800d2f6:	685a      	ldr	r2, [r3, #4]
 800d2f8:	bb62      	cbnz	r2, 800d354 <_malloc_r+0xdc>
 800d2fa:	f8c8 7000 	str.w	r7, [r8]
 800d2fe:	e00f      	b.n	800d320 <_malloc_r+0xa8>
 800d300:	6822      	ldr	r2, [r4, #0]
 800d302:	1b52      	subs	r2, r2, r5
 800d304:	d420      	bmi.n	800d348 <_malloc_r+0xd0>
 800d306:	2a0b      	cmp	r2, #11
 800d308:	d917      	bls.n	800d33a <_malloc_r+0xc2>
 800d30a:	1961      	adds	r1, r4, r5
 800d30c:	42a3      	cmp	r3, r4
 800d30e:	6025      	str	r5, [r4, #0]
 800d310:	bf18      	it	ne
 800d312:	6059      	strne	r1, [r3, #4]
 800d314:	6863      	ldr	r3, [r4, #4]
 800d316:	bf08      	it	eq
 800d318:	f8c8 1000 	streq.w	r1, [r8]
 800d31c:	5162      	str	r2, [r4, r5]
 800d31e:	604b      	str	r3, [r1, #4]
 800d320:	4630      	mov	r0, r6
 800d322:	f000 f82f 	bl	800d384 <__malloc_unlock>
 800d326:	f104 000b 	add.w	r0, r4, #11
 800d32a:	1d23      	adds	r3, r4, #4
 800d32c:	f020 0007 	bic.w	r0, r0, #7
 800d330:	1ac2      	subs	r2, r0, r3
 800d332:	bf1c      	itt	ne
 800d334:	1a1b      	subne	r3, r3, r0
 800d336:	50a3      	strne	r3, [r4, r2]
 800d338:	e7af      	b.n	800d29a <_malloc_r+0x22>
 800d33a:	6862      	ldr	r2, [r4, #4]
 800d33c:	42a3      	cmp	r3, r4
 800d33e:	bf0c      	ite	eq
 800d340:	f8c8 2000 	streq.w	r2, [r8]
 800d344:	605a      	strne	r2, [r3, #4]
 800d346:	e7eb      	b.n	800d320 <_malloc_r+0xa8>
 800d348:	4623      	mov	r3, r4
 800d34a:	6864      	ldr	r4, [r4, #4]
 800d34c:	e7ae      	b.n	800d2ac <_malloc_r+0x34>
 800d34e:	463c      	mov	r4, r7
 800d350:	687f      	ldr	r7, [r7, #4]
 800d352:	e7b6      	b.n	800d2c2 <_malloc_r+0x4a>
 800d354:	461a      	mov	r2, r3
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	42a3      	cmp	r3, r4
 800d35a:	d1fb      	bne.n	800d354 <_malloc_r+0xdc>
 800d35c:	2300      	movs	r3, #0
 800d35e:	6053      	str	r3, [r2, #4]
 800d360:	e7de      	b.n	800d320 <_malloc_r+0xa8>
 800d362:	230c      	movs	r3, #12
 800d364:	6033      	str	r3, [r6, #0]
 800d366:	4630      	mov	r0, r6
 800d368:	f000 f80c 	bl	800d384 <__malloc_unlock>
 800d36c:	e794      	b.n	800d298 <_malloc_r+0x20>
 800d36e:	6005      	str	r5, [r0, #0]
 800d370:	e7d6      	b.n	800d320 <_malloc_r+0xa8>
 800d372:	bf00      	nop
 800d374:	20002218 	.word	0x20002218

0800d378 <__malloc_lock>:
 800d378:	4801      	ldr	r0, [pc, #4]	@ (800d380 <__malloc_lock+0x8>)
 800d37a:	f7ff b8ae 	b.w	800c4da <__retarget_lock_acquire_recursive>
 800d37e:	bf00      	nop
 800d380:	20002210 	.word	0x20002210

0800d384 <__malloc_unlock>:
 800d384:	4801      	ldr	r0, [pc, #4]	@ (800d38c <__malloc_unlock+0x8>)
 800d386:	f7ff b8a9 	b.w	800c4dc <__retarget_lock_release_recursive>
 800d38a:	bf00      	nop
 800d38c:	20002210 	.word	0x20002210

0800d390 <_Balloc>:
 800d390:	b570      	push	{r4, r5, r6, lr}
 800d392:	69c6      	ldr	r6, [r0, #28]
 800d394:	4604      	mov	r4, r0
 800d396:	460d      	mov	r5, r1
 800d398:	b976      	cbnz	r6, 800d3b8 <_Balloc+0x28>
 800d39a:	2010      	movs	r0, #16
 800d39c:	f7ff ff42 	bl	800d224 <malloc>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	61e0      	str	r0, [r4, #28]
 800d3a4:	b920      	cbnz	r0, 800d3b0 <_Balloc+0x20>
 800d3a6:	4b18      	ldr	r3, [pc, #96]	@ (800d408 <_Balloc+0x78>)
 800d3a8:	4818      	ldr	r0, [pc, #96]	@ (800d40c <_Balloc+0x7c>)
 800d3aa:	216b      	movs	r1, #107	@ 0x6b
 800d3ac:	f000 fda6 	bl	800defc <__assert_func>
 800d3b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3b4:	6006      	str	r6, [r0, #0]
 800d3b6:	60c6      	str	r6, [r0, #12]
 800d3b8:	69e6      	ldr	r6, [r4, #28]
 800d3ba:	68f3      	ldr	r3, [r6, #12]
 800d3bc:	b183      	cbz	r3, 800d3e0 <_Balloc+0x50>
 800d3be:	69e3      	ldr	r3, [r4, #28]
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3c6:	b9b8      	cbnz	r0, 800d3f8 <_Balloc+0x68>
 800d3c8:	2101      	movs	r1, #1
 800d3ca:	fa01 f605 	lsl.w	r6, r1, r5
 800d3ce:	1d72      	adds	r2, r6, #5
 800d3d0:	0092      	lsls	r2, r2, #2
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f000 fdb0 	bl	800df38 <_calloc_r>
 800d3d8:	b160      	cbz	r0, 800d3f4 <_Balloc+0x64>
 800d3da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3de:	e00e      	b.n	800d3fe <_Balloc+0x6e>
 800d3e0:	2221      	movs	r2, #33	@ 0x21
 800d3e2:	2104      	movs	r1, #4
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	f000 fda7 	bl	800df38 <_calloc_r>
 800d3ea:	69e3      	ldr	r3, [r4, #28]
 800d3ec:	60f0      	str	r0, [r6, #12]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d1e4      	bne.n	800d3be <_Balloc+0x2e>
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	bd70      	pop	{r4, r5, r6, pc}
 800d3f8:	6802      	ldr	r2, [r0, #0]
 800d3fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3fe:	2300      	movs	r3, #0
 800d400:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d404:	e7f7      	b.n	800d3f6 <_Balloc+0x66>
 800d406:	bf00      	nop
 800d408:	0800e795 	.word	0x0800e795
 800d40c:	0800e815 	.word	0x0800e815

0800d410 <_Bfree>:
 800d410:	b570      	push	{r4, r5, r6, lr}
 800d412:	69c6      	ldr	r6, [r0, #28]
 800d414:	4605      	mov	r5, r0
 800d416:	460c      	mov	r4, r1
 800d418:	b976      	cbnz	r6, 800d438 <_Bfree+0x28>
 800d41a:	2010      	movs	r0, #16
 800d41c:	f7ff ff02 	bl	800d224 <malloc>
 800d420:	4602      	mov	r2, r0
 800d422:	61e8      	str	r0, [r5, #28]
 800d424:	b920      	cbnz	r0, 800d430 <_Bfree+0x20>
 800d426:	4b09      	ldr	r3, [pc, #36]	@ (800d44c <_Bfree+0x3c>)
 800d428:	4809      	ldr	r0, [pc, #36]	@ (800d450 <_Bfree+0x40>)
 800d42a:	218f      	movs	r1, #143	@ 0x8f
 800d42c:	f000 fd66 	bl	800defc <__assert_func>
 800d430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d434:	6006      	str	r6, [r0, #0]
 800d436:	60c6      	str	r6, [r0, #12]
 800d438:	b13c      	cbz	r4, 800d44a <_Bfree+0x3a>
 800d43a:	69eb      	ldr	r3, [r5, #28]
 800d43c:	6862      	ldr	r2, [r4, #4]
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d444:	6021      	str	r1, [r4, #0]
 800d446:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d44a:	bd70      	pop	{r4, r5, r6, pc}
 800d44c:	0800e795 	.word	0x0800e795
 800d450:	0800e815 	.word	0x0800e815

0800d454 <__multadd>:
 800d454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d458:	690d      	ldr	r5, [r1, #16]
 800d45a:	4607      	mov	r7, r0
 800d45c:	460c      	mov	r4, r1
 800d45e:	461e      	mov	r6, r3
 800d460:	f101 0c14 	add.w	ip, r1, #20
 800d464:	2000      	movs	r0, #0
 800d466:	f8dc 3000 	ldr.w	r3, [ip]
 800d46a:	b299      	uxth	r1, r3
 800d46c:	fb02 6101 	mla	r1, r2, r1, r6
 800d470:	0c1e      	lsrs	r6, r3, #16
 800d472:	0c0b      	lsrs	r3, r1, #16
 800d474:	fb02 3306 	mla	r3, r2, r6, r3
 800d478:	b289      	uxth	r1, r1
 800d47a:	3001      	adds	r0, #1
 800d47c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d480:	4285      	cmp	r5, r0
 800d482:	f84c 1b04 	str.w	r1, [ip], #4
 800d486:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d48a:	dcec      	bgt.n	800d466 <__multadd+0x12>
 800d48c:	b30e      	cbz	r6, 800d4d2 <__multadd+0x7e>
 800d48e:	68a3      	ldr	r3, [r4, #8]
 800d490:	42ab      	cmp	r3, r5
 800d492:	dc19      	bgt.n	800d4c8 <__multadd+0x74>
 800d494:	6861      	ldr	r1, [r4, #4]
 800d496:	4638      	mov	r0, r7
 800d498:	3101      	adds	r1, #1
 800d49a:	f7ff ff79 	bl	800d390 <_Balloc>
 800d49e:	4680      	mov	r8, r0
 800d4a0:	b928      	cbnz	r0, 800d4ae <__multadd+0x5a>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	4b0c      	ldr	r3, [pc, #48]	@ (800d4d8 <__multadd+0x84>)
 800d4a6:	480d      	ldr	r0, [pc, #52]	@ (800d4dc <__multadd+0x88>)
 800d4a8:	21ba      	movs	r1, #186	@ 0xba
 800d4aa:	f000 fd27 	bl	800defc <__assert_func>
 800d4ae:	6922      	ldr	r2, [r4, #16]
 800d4b0:	3202      	adds	r2, #2
 800d4b2:	f104 010c 	add.w	r1, r4, #12
 800d4b6:	0092      	lsls	r2, r2, #2
 800d4b8:	300c      	adds	r0, #12
 800d4ba:	f000 fd11 	bl	800dee0 <memcpy>
 800d4be:	4621      	mov	r1, r4
 800d4c0:	4638      	mov	r0, r7
 800d4c2:	f7ff ffa5 	bl	800d410 <_Bfree>
 800d4c6:	4644      	mov	r4, r8
 800d4c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d4cc:	3501      	adds	r5, #1
 800d4ce:	615e      	str	r6, [r3, #20]
 800d4d0:	6125      	str	r5, [r4, #16]
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4d8:	0800e804 	.word	0x0800e804
 800d4dc:	0800e815 	.word	0x0800e815

0800d4e0 <__hi0bits>:
 800d4e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	bf36      	itet	cc
 800d4e8:	0403      	lslcc	r3, r0, #16
 800d4ea:	2000      	movcs	r0, #0
 800d4ec:	2010      	movcc	r0, #16
 800d4ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d4f2:	bf3c      	itt	cc
 800d4f4:	021b      	lslcc	r3, r3, #8
 800d4f6:	3008      	addcc	r0, #8
 800d4f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d4fc:	bf3c      	itt	cc
 800d4fe:	011b      	lslcc	r3, r3, #4
 800d500:	3004      	addcc	r0, #4
 800d502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d506:	bf3c      	itt	cc
 800d508:	009b      	lslcc	r3, r3, #2
 800d50a:	3002      	addcc	r0, #2
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	db05      	blt.n	800d51c <__hi0bits+0x3c>
 800d510:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d514:	f100 0001 	add.w	r0, r0, #1
 800d518:	bf08      	it	eq
 800d51a:	2020      	moveq	r0, #32
 800d51c:	4770      	bx	lr

0800d51e <__lo0bits>:
 800d51e:	6803      	ldr	r3, [r0, #0]
 800d520:	4602      	mov	r2, r0
 800d522:	f013 0007 	ands.w	r0, r3, #7
 800d526:	d00b      	beq.n	800d540 <__lo0bits+0x22>
 800d528:	07d9      	lsls	r1, r3, #31
 800d52a:	d421      	bmi.n	800d570 <__lo0bits+0x52>
 800d52c:	0798      	lsls	r0, r3, #30
 800d52e:	bf49      	itett	mi
 800d530:	085b      	lsrmi	r3, r3, #1
 800d532:	089b      	lsrpl	r3, r3, #2
 800d534:	2001      	movmi	r0, #1
 800d536:	6013      	strmi	r3, [r2, #0]
 800d538:	bf5c      	itt	pl
 800d53a:	6013      	strpl	r3, [r2, #0]
 800d53c:	2002      	movpl	r0, #2
 800d53e:	4770      	bx	lr
 800d540:	b299      	uxth	r1, r3
 800d542:	b909      	cbnz	r1, 800d548 <__lo0bits+0x2a>
 800d544:	0c1b      	lsrs	r3, r3, #16
 800d546:	2010      	movs	r0, #16
 800d548:	b2d9      	uxtb	r1, r3
 800d54a:	b909      	cbnz	r1, 800d550 <__lo0bits+0x32>
 800d54c:	3008      	adds	r0, #8
 800d54e:	0a1b      	lsrs	r3, r3, #8
 800d550:	0719      	lsls	r1, r3, #28
 800d552:	bf04      	itt	eq
 800d554:	091b      	lsreq	r3, r3, #4
 800d556:	3004      	addeq	r0, #4
 800d558:	0799      	lsls	r1, r3, #30
 800d55a:	bf04      	itt	eq
 800d55c:	089b      	lsreq	r3, r3, #2
 800d55e:	3002      	addeq	r0, #2
 800d560:	07d9      	lsls	r1, r3, #31
 800d562:	d403      	bmi.n	800d56c <__lo0bits+0x4e>
 800d564:	085b      	lsrs	r3, r3, #1
 800d566:	f100 0001 	add.w	r0, r0, #1
 800d56a:	d003      	beq.n	800d574 <__lo0bits+0x56>
 800d56c:	6013      	str	r3, [r2, #0]
 800d56e:	4770      	bx	lr
 800d570:	2000      	movs	r0, #0
 800d572:	4770      	bx	lr
 800d574:	2020      	movs	r0, #32
 800d576:	4770      	bx	lr

0800d578 <__i2b>:
 800d578:	b510      	push	{r4, lr}
 800d57a:	460c      	mov	r4, r1
 800d57c:	2101      	movs	r1, #1
 800d57e:	f7ff ff07 	bl	800d390 <_Balloc>
 800d582:	4602      	mov	r2, r0
 800d584:	b928      	cbnz	r0, 800d592 <__i2b+0x1a>
 800d586:	4b05      	ldr	r3, [pc, #20]	@ (800d59c <__i2b+0x24>)
 800d588:	4805      	ldr	r0, [pc, #20]	@ (800d5a0 <__i2b+0x28>)
 800d58a:	f240 1145 	movw	r1, #325	@ 0x145
 800d58e:	f000 fcb5 	bl	800defc <__assert_func>
 800d592:	2301      	movs	r3, #1
 800d594:	6144      	str	r4, [r0, #20]
 800d596:	6103      	str	r3, [r0, #16]
 800d598:	bd10      	pop	{r4, pc}
 800d59a:	bf00      	nop
 800d59c:	0800e804 	.word	0x0800e804
 800d5a0:	0800e815 	.word	0x0800e815

0800d5a4 <__multiply>:
 800d5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a8:	4617      	mov	r7, r2
 800d5aa:	690a      	ldr	r2, [r1, #16]
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	bfa8      	it	ge
 800d5b2:	463b      	movge	r3, r7
 800d5b4:	4689      	mov	r9, r1
 800d5b6:	bfa4      	itt	ge
 800d5b8:	460f      	movge	r7, r1
 800d5ba:	4699      	movge	r9, r3
 800d5bc:	693d      	ldr	r5, [r7, #16]
 800d5be:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	6879      	ldr	r1, [r7, #4]
 800d5c6:	eb05 060a 	add.w	r6, r5, sl
 800d5ca:	42b3      	cmp	r3, r6
 800d5cc:	b085      	sub	sp, #20
 800d5ce:	bfb8      	it	lt
 800d5d0:	3101      	addlt	r1, #1
 800d5d2:	f7ff fedd 	bl	800d390 <_Balloc>
 800d5d6:	b930      	cbnz	r0, 800d5e6 <__multiply+0x42>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	4b41      	ldr	r3, [pc, #260]	@ (800d6e0 <__multiply+0x13c>)
 800d5dc:	4841      	ldr	r0, [pc, #260]	@ (800d6e4 <__multiply+0x140>)
 800d5de:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d5e2:	f000 fc8b 	bl	800defc <__assert_func>
 800d5e6:	f100 0414 	add.w	r4, r0, #20
 800d5ea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d5ee:	4623      	mov	r3, r4
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	4573      	cmp	r3, lr
 800d5f4:	d320      	bcc.n	800d638 <__multiply+0x94>
 800d5f6:	f107 0814 	add.w	r8, r7, #20
 800d5fa:	f109 0114 	add.w	r1, r9, #20
 800d5fe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d602:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d606:	9302      	str	r3, [sp, #8]
 800d608:	1beb      	subs	r3, r5, r7
 800d60a:	3b15      	subs	r3, #21
 800d60c:	f023 0303 	bic.w	r3, r3, #3
 800d610:	3304      	adds	r3, #4
 800d612:	3715      	adds	r7, #21
 800d614:	42bd      	cmp	r5, r7
 800d616:	bf38      	it	cc
 800d618:	2304      	movcc	r3, #4
 800d61a:	9301      	str	r3, [sp, #4]
 800d61c:	9b02      	ldr	r3, [sp, #8]
 800d61e:	9103      	str	r1, [sp, #12]
 800d620:	428b      	cmp	r3, r1
 800d622:	d80c      	bhi.n	800d63e <__multiply+0x9a>
 800d624:	2e00      	cmp	r6, #0
 800d626:	dd03      	ble.n	800d630 <__multiply+0x8c>
 800d628:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d055      	beq.n	800d6dc <__multiply+0x138>
 800d630:	6106      	str	r6, [r0, #16]
 800d632:	b005      	add	sp, #20
 800d634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d638:	f843 2b04 	str.w	r2, [r3], #4
 800d63c:	e7d9      	b.n	800d5f2 <__multiply+0x4e>
 800d63e:	f8b1 a000 	ldrh.w	sl, [r1]
 800d642:	f1ba 0f00 	cmp.w	sl, #0
 800d646:	d01f      	beq.n	800d688 <__multiply+0xe4>
 800d648:	46c4      	mov	ip, r8
 800d64a:	46a1      	mov	r9, r4
 800d64c:	2700      	movs	r7, #0
 800d64e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d652:	f8d9 3000 	ldr.w	r3, [r9]
 800d656:	fa1f fb82 	uxth.w	fp, r2
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d660:	443b      	add	r3, r7
 800d662:	f8d9 7000 	ldr.w	r7, [r9]
 800d666:	0c12      	lsrs	r2, r2, #16
 800d668:	0c3f      	lsrs	r7, r7, #16
 800d66a:	fb0a 7202 	mla	r2, sl, r2, r7
 800d66e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d672:	b29b      	uxth	r3, r3
 800d674:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d678:	4565      	cmp	r5, ip
 800d67a:	f849 3b04 	str.w	r3, [r9], #4
 800d67e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d682:	d8e4      	bhi.n	800d64e <__multiply+0xaa>
 800d684:	9b01      	ldr	r3, [sp, #4]
 800d686:	50e7      	str	r7, [r4, r3]
 800d688:	9b03      	ldr	r3, [sp, #12]
 800d68a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d68e:	3104      	adds	r1, #4
 800d690:	f1b9 0f00 	cmp.w	r9, #0
 800d694:	d020      	beq.n	800d6d8 <__multiply+0x134>
 800d696:	6823      	ldr	r3, [r4, #0]
 800d698:	4647      	mov	r7, r8
 800d69a:	46a4      	mov	ip, r4
 800d69c:	f04f 0a00 	mov.w	sl, #0
 800d6a0:	f8b7 b000 	ldrh.w	fp, [r7]
 800d6a4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d6a8:	fb09 220b 	mla	r2, r9, fp, r2
 800d6ac:	4452      	add	r2, sl
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6b4:	f84c 3b04 	str.w	r3, [ip], #4
 800d6b8:	f857 3b04 	ldr.w	r3, [r7], #4
 800d6bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d6c0:	f8bc 3000 	ldrh.w	r3, [ip]
 800d6c4:	fb09 330a 	mla	r3, r9, sl, r3
 800d6c8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d6cc:	42bd      	cmp	r5, r7
 800d6ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d6d2:	d8e5      	bhi.n	800d6a0 <__multiply+0xfc>
 800d6d4:	9a01      	ldr	r2, [sp, #4]
 800d6d6:	50a3      	str	r3, [r4, r2]
 800d6d8:	3404      	adds	r4, #4
 800d6da:	e79f      	b.n	800d61c <__multiply+0x78>
 800d6dc:	3e01      	subs	r6, #1
 800d6de:	e7a1      	b.n	800d624 <__multiply+0x80>
 800d6e0:	0800e804 	.word	0x0800e804
 800d6e4:	0800e815 	.word	0x0800e815

0800d6e8 <__pow5mult>:
 800d6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6ec:	4615      	mov	r5, r2
 800d6ee:	f012 0203 	ands.w	r2, r2, #3
 800d6f2:	4607      	mov	r7, r0
 800d6f4:	460e      	mov	r6, r1
 800d6f6:	d007      	beq.n	800d708 <__pow5mult+0x20>
 800d6f8:	4c25      	ldr	r4, [pc, #148]	@ (800d790 <__pow5mult+0xa8>)
 800d6fa:	3a01      	subs	r2, #1
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d702:	f7ff fea7 	bl	800d454 <__multadd>
 800d706:	4606      	mov	r6, r0
 800d708:	10ad      	asrs	r5, r5, #2
 800d70a:	d03d      	beq.n	800d788 <__pow5mult+0xa0>
 800d70c:	69fc      	ldr	r4, [r7, #28]
 800d70e:	b97c      	cbnz	r4, 800d730 <__pow5mult+0x48>
 800d710:	2010      	movs	r0, #16
 800d712:	f7ff fd87 	bl	800d224 <malloc>
 800d716:	4602      	mov	r2, r0
 800d718:	61f8      	str	r0, [r7, #28]
 800d71a:	b928      	cbnz	r0, 800d728 <__pow5mult+0x40>
 800d71c:	4b1d      	ldr	r3, [pc, #116]	@ (800d794 <__pow5mult+0xac>)
 800d71e:	481e      	ldr	r0, [pc, #120]	@ (800d798 <__pow5mult+0xb0>)
 800d720:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d724:	f000 fbea 	bl	800defc <__assert_func>
 800d728:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d72c:	6004      	str	r4, [r0, #0]
 800d72e:	60c4      	str	r4, [r0, #12]
 800d730:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d734:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d738:	b94c      	cbnz	r4, 800d74e <__pow5mult+0x66>
 800d73a:	f240 2171 	movw	r1, #625	@ 0x271
 800d73e:	4638      	mov	r0, r7
 800d740:	f7ff ff1a 	bl	800d578 <__i2b>
 800d744:	2300      	movs	r3, #0
 800d746:	f8c8 0008 	str.w	r0, [r8, #8]
 800d74a:	4604      	mov	r4, r0
 800d74c:	6003      	str	r3, [r0, #0]
 800d74e:	f04f 0900 	mov.w	r9, #0
 800d752:	07eb      	lsls	r3, r5, #31
 800d754:	d50a      	bpl.n	800d76c <__pow5mult+0x84>
 800d756:	4631      	mov	r1, r6
 800d758:	4622      	mov	r2, r4
 800d75a:	4638      	mov	r0, r7
 800d75c:	f7ff ff22 	bl	800d5a4 <__multiply>
 800d760:	4631      	mov	r1, r6
 800d762:	4680      	mov	r8, r0
 800d764:	4638      	mov	r0, r7
 800d766:	f7ff fe53 	bl	800d410 <_Bfree>
 800d76a:	4646      	mov	r6, r8
 800d76c:	106d      	asrs	r5, r5, #1
 800d76e:	d00b      	beq.n	800d788 <__pow5mult+0xa0>
 800d770:	6820      	ldr	r0, [r4, #0]
 800d772:	b938      	cbnz	r0, 800d784 <__pow5mult+0x9c>
 800d774:	4622      	mov	r2, r4
 800d776:	4621      	mov	r1, r4
 800d778:	4638      	mov	r0, r7
 800d77a:	f7ff ff13 	bl	800d5a4 <__multiply>
 800d77e:	6020      	str	r0, [r4, #0]
 800d780:	f8c0 9000 	str.w	r9, [r0]
 800d784:	4604      	mov	r4, r0
 800d786:	e7e4      	b.n	800d752 <__pow5mult+0x6a>
 800d788:	4630      	mov	r0, r6
 800d78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d78e:	bf00      	nop
 800d790:	0800e8c8 	.word	0x0800e8c8
 800d794:	0800e795 	.word	0x0800e795
 800d798:	0800e815 	.word	0x0800e815

0800d79c <__lshift>:
 800d79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7a0:	460c      	mov	r4, r1
 800d7a2:	6849      	ldr	r1, [r1, #4]
 800d7a4:	6923      	ldr	r3, [r4, #16]
 800d7a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7aa:	68a3      	ldr	r3, [r4, #8]
 800d7ac:	4607      	mov	r7, r0
 800d7ae:	4691      	mov	r9, r2
 800d7b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7b4:	f108 0601 	add.w	r6, r8, #1
 800d7b8:	42b3      	cmp	r3, r6
 800d7ba:	db0b      	blt.n	800d7d4 <__lshift+0x38>
 800d7bc:	4638      	mov	r0, r7
 800d7be:	f7ff fde7 	bl	800d390 <_Balloc>
 800d7c2:	4605      	mov	r5, r0
 800d7c4:	b948      	cbnz	r0, 800d7da <__lshift+0x3e>
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	4b28      	ldr	r3, [pc, #160]	@ (800d86c <__lshift+0xd0>)
 800d7ca:	4829      	ldr	r0, [pc, #164]	@ (800d870 <__lshift+0xd4>)
 800d7cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d7d0:	f000 fb94 	bl	800defc <__assert_func>
 800d7d4:	3101      	adds	r1, #1
 800d7d6:	005b      	lsls	r3, r3, #1
 800d7d8:	e7ee      	b.n	800d7b8 <__lshift+0x1c>
 800d7da:	2300      	movs	r3, #0
 800d7dc:	f100 0114 	add.w	r1, r0, #20
 800d7e0:	f100 0210 	add.w	r2, r0, #16
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	4553      	cmp	r3, sl
 800d7e8:	db33      	blt.n	800d852 <__lshift+0xb6>
 800d7ea:	6920      	ldr	r0, [r4, #16]
 800d7ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d7f0:	f104 0314 	add.w	r3, r4, #20
 800d7f4:	f019 091f 	ands.w	r9, r9, #31
 800d7f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d7fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d800:	d02b      	beq.n	800d85a <__lshift+0xbe>
 800d802:	f1c9 0e20 	rsb	lr, r9, #32
 800d806:	468a      	mov	sl, r1
 800d808:	2200      	movs	r2, #0
 800d80a:	6818      	ldr	r0, [r3, #0]
 800d80c:	fa00 f009 	lsl.w	r0, r0, r9
 800d810:	4310      	orrs	r0, r2
 800d812:	f84a 0b04 	str.w	r0, [sl], #4
 800d816:	f853 2b04 	ldr.w	r2, [r3], #4
 800d81a:	459c      	cmp	ip, r3
 800d81c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d820:	d8f3      	bhi.n	800d80a <__lshift+0x6e>
 800d822:	ebac 0304 	sub.w	r3, ip, r4
 800d826:	3b15      	subs	r3, #21
 800d828:	f023 0303 	bic.w	r3, r3, #3
 800d82c:	3304      	adds	r3, #4
 800d82e:	f104 0015 	add.w	r0, r4, #21
 800d832:	4560      	cmp	r0, ip
 800d834:	bf88      	it	hi
 800d836:	2304      	movhi	r3, #4
 800d838:	50ca      	str	r2, [r1, r3]
 800d83a:	b10a      	cbz	r2, 800d840 <__lshift+0xa4>
 800d83c:	f108 0602 	add.w	r6, r8, #2
 800d840:	3e01      	subs	r6, #1
 800d842:	4638      	mov	r0, r7
 800d844:	612e      	str	r6, [r5, #16]
 800d846:	4621      	mov	r1, r4
 800d848:	f7ff fde2 	bl	800d410 <_Bfree>
 800d84c:	4628      	mov	r0, r5
 800d84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d852:	f842 0f04 	str.w	r0, [r2, #4]!
 800d856:	3301      	adds	r3, #1
 800d858:	e7c5      	b.n	800d7e6 <__lshift+0x4a>
 800d85a:	3904      	subs	r1, #4
 800d85c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d860:	f841 2f04 	str.w	r2, [r1, #4]!
 800d864:	459c      	cmp	ip, r3
 800d866:	d8f9      	bhi.n	800d85c <__lshift+0xc0>
 800d868:	e7ea      	b.n	800d840 <__lshift+0xa4>
 800d86a:	bf00      	nop
 800d86c:	0800e804 	.word	0x0800e804
 800d870:	0800e815 	.word	0x0800e815

0800d874 <__mcmp>:
 800d874:	690a      	ldr	r2, [r1, #16]
 800d876:	4603      	mov	r3, r0
 800d878:	6900      	ldr	r0, [r0, #16]
 800d87a:	1a80      	subs	r0, r0, r2
 800d87c:	b530      	push	{r4, r5, lr}
 800d87e:	d10e      	bne.n	800d89e <__mcmp+0x2a>
 800d880:	3314      	adds	r3, #20
 800d882:	3114      	adds	r1, #20
 800d884:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d888:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d88c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d890:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d894:	4295      	cmp	r5, r2
 800d896:	d003      	beq.n	800d8a0 <__mcmp+0x2c>
 800d898:	d205      	bcs.n	800d8a6 <__mcmp+0x32>
 800d89a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d89e:	bd30      	pop	{r4, r5, pc}
 800d8a0:	42a3      	cmp	r3, r4
 800d8a2:	d3f3      	bcc.n	800d88c <__mcmp+0x18>
 800d8a4:	e7fb      	b.n	800d89e <__mcmp+0x2a>
 800d8a6:	2001      	movs	r0, #1
 800d8a8:	e7f9      	b.n	800d89e <__mcmp+0x2a>
	...

0800d8ac <__mdiff>:
 800d8ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b0:	4689      	mov	r9, r1
 800d8b2:	4606      	mov	r6, r0
 800d8b4:	4611      	mov	r1, r2
 800d8b6:	4648      	mov	r0, r9
 800d8b8:	4614      	mov	r4, r2
 800d8ba:	f7ff ffdb 	bl	800d874 <__mcmp>
 800d8be:	1e05      	subs	r5, r0, #0
 800d8c0:	d112      	bne.n	800d8e8 <__mdiff+0x3c>
 800d8c2:	4629      	mov	r1, r5
 800d8c4:	4630      	mov	r0, r6
 800d8c6:	f7ff fd63 	bl	800d390 <_Balloc>
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	b928      	cbnz	r0, 800d8da <__mdiff+0x2e>
 800d8ce:	4b3f      	ldr	r3, [pc, #252]	@ (800d9cc <__mdiff+0x120>)
 800d8d0:	f240 2137 	movw	r1, #567	@ 0x237
 800d8d4:	483e      	ldr	r0, [pc, #248]	@ (800d9d0 <__mdiff+0x124>)
 800d8d6:	f000 fb11 	bl	800defc <__assert_func>
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	b003      	add	sp, #12
 800d8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8e8:	bfbc      	itt	lt
 800d8ea:	464b      	movlt	r3, r9
 800d8ec:	46a1      	movlt	r9, r4
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d8f4:	bfba      	itte	lt
 800d8f6:	461c      	movlt	r4, r3
 800d8f8:	2501      	movlt	r5, #1
 800d8fa:	2500      	movge	r5, #0
 800d8fc:	f7ff fd48 	bl	800d390 <_Balloc>
 800d900:	4602      	mov	r2, r0
 800d902:	b918      	cbnz	r0, 800d90c <__mdiff+0x60>
 800d904:	4b31      	ldr	r3, [pc, #196]	@ (800d9cc <__mdiff+0x120>)
 800d906:	f240 2145 	movw	r1, #581	@ 0x245
 800d90a:	e7e3      	b.n	800d8d4 <__mdiff+0x28>
 800d90c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d910:	6926      	ldr	r6, [r4, #16]
 800d912:	60c5      	str	r5, [r0, #12]
 800d914:	f109 0310 	add.w	r3, r9, #16
 800d918:	f109 0514 	add.w	r5, r9, #20
 800d91c:	f104 0e14 	add.w	lr, r4, #20
 800d920:	f100 0b14 	add.w	fp, r0, #20
 800d924:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d928:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d92c:	9301      	str	r3, [sp, #4]
 800d92e:	46d9      	mov	r9, fp
 800d930:	f04f 0c00 	mov.w	ip, #0
 800d934:	9b01      	ldr	r3, [sp, #4]
 800d936:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d93a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d93e:	9301      	str	r3, [sp, #4]
 800d940:	fa1f f38a 	uxth.w	r3, sl
 800d944:	4619      	mov	r1, r3
 800d946:	b283      	uxth	r3, r0
 800d948:	1acb      	subs	r3, r1, r3
 800d94a:	0c00      	lsrs	r0, r0, #16
 800d94c:	4463      	add	r3, ip
 800d94e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d952:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d956:	b29b      	uxth	r3, r3
 800d958:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d95c:	4576      	cmp	r6, lr
 800d95e:	f849 3b04 	str.w	r3, [r9], #4
 800d962:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d966:	d8e5      	bhi.n	800d934 <__mdiff+0x88>
 800d968:	1b33      	subs	r3, r6, r4
 800d96a:	3b15      	subs	r3, #21
 800d96c:	f023 0303 	bic.w	r3, r3, #3
 800d970:	3415      	adds	r4, #21
 800d972:	3304      	adds	r3, #4
 800d974:	42a6      	cmp	r6, r4
 800d976:	bf38      	it	cc
 800d978:	2304      	movcc	r3, #4
 800d97a:	441d      	add	r5, r3
 800d97c:	445b      	add	r3, fp
 800d97e:	461e      	mov	r6, r3
 800d980:	462c      	mov	r4, r5
 800d982:	4544      	cmp	r4, r8
 800d984:	d30e      	bcc.n	800d9a4 <__mdiff+0xf8>
 800d986:	f108 0103 	add.w	r1, r8, #3
 800d98a:	1b49      	subs	r1, r1, r5
 800d98c:	f021 0103 	bic.w	r1, r1, #3
 800d990:	3d03      	subs	r5, #3
 800d992:	45a8      	cmp	r8, r5
 800d994:	bf38      	it	cc
 800d996:	2100      	movcc	r1, #0
 800d998:	440b      	add	r3, r1
 800d99a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d99e:	b191      	cbz	r1, 800d9c6 <__mdiff+0x11a>
 800d9a0:	6117      	str	r7, [r2, #16]
 800d9a2:	e79d      	b.n	800d8e0 <__mdiff+0x34>
 800d9a4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d9a8:	46e6      	mov	lr, ip
 800d9aa:	0c08      	lsrs	r0, r1, #16
 800d9ac:	fa1c fc81 	uxtah	ip, ip, r1
 800d9b0:	4471      	add	r1, lr
 800d9b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d9b6:	b289      	uxth	r1, r1
 800d9b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d9bc:	f846 1b04 	str.w	r1, [r6], #4
 800d9c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d9c4:	e7dd      	b.n	800d982 <__mdiff+0xd6>
 800d9c6:	3f01      	subs	r7, #1
 800d9c8:	e7e7      	b.n	800d99a <__mdiff+0xee>
 800d9ca:	bf00      	nop
 800d9cc:	0800e804 	.word	0x0800e804
 800d9d0:	0800e815 	.word	0x0800e815

0800d9d4 <__d2b>:
 800d9d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d9d8:	460f      	mov	r7, r1
 800d9da:	2101      	movs	r1, #1
 800d9dc:	ec59 8b10 	vmov	r8, r9, d0
 800d9e0:	4616      	mov	r6, r2
 800d9e2:	f7ff fcd5 	bl	800d390 <_Balloc>
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	b930      	cbnz	r0, 800d9f8 <__d2b+0x24>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	4b23      	ldr	r3, [pc, #140]	@ (800da7c <__d2b+0xa8>)
 800d9ee:	4824      	ldr	r0, [pc, #144]	@ (800da80 <__d2b+0xac>)
 800d9f0:	f240 310f 	movw	r1, #783	@ 0x30f
 800d9f4:	f000 fa82 	bl	800defc <__assert_func>
 800d9f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d9fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da00:	b10d      	cbz	r5, 800da06 <__d2b+0x32>
 800da02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da06:	9301      	str	r3, [sp, #4]
 800da08:	f1b8 0300 	subs.w	r3, r8, #0
 800da0c:	d023      	beq.n	800da56 <__d2b+0x82>
 800da0e:	4668      	mov	r0, sp
 800da10:	9300      	str	r3, [sp, #0]
 800da12:	f7ff fd84 	bl	800d51e <__lo0bits>
 800da16:	e9dd 1200 	ldrd	r1, r2, [sp]
 800da1a:	b1d0      	cbz	r0, 800da52 <__d2b+0x7e>
 800da1c:	f1c0 0320 	rsb	r3, r0, #32
 800da20:	fa02 f303 	lsl.w	r3, r2, r3
 800da24:	430b      	orrs	r3, r1
 800da26:	40c2      	lsrs	r2, r0
 800da28:	6163      	str	r3, [r4, #20]
 800da2a:	9201      	str	r2, [sp, #4]
 800da2c:	9b01      	ldr	r3, [sp, #4]
 800da2e:	61a3      	str	r3, [r4, #24]
 800da30:	2b00      	cmp	r3, #0
 800da32:	bf0c      	ite	eq
 800da34:	2201      	moveq	r2, #1
 800da36:	2202      	movne	r2, #2
 800da38:	6122      	str	r2, [r4, #16]
 800da3a:	b1a5      	cbz	r5, 800da66 <__d2b+0x92>
 800da3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800da40:	4405      	add	r5, r0
 800da42:	603d      	str	r5, [r7, #0]
 800da44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800da48:	6030      	str	r0, [r6, #0]
 800da4a:	4620      	mov	r0, r4
 800da4c:	b003      	add	sp, #12
 800da4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da52:	6161      	str	r1, [r4, #20]
 800da54:	e7ea      	b.n	800da2c <__d2b+0x58>
 800da56:	a801      	add	r0, sp, #4
 800da58:	f7ff fd61 	bl	800d51e <__lo0bits>
 800da5c:	9b01      	ldr	r3, [sp, #4]
 800da5e:	6163      	str	r3, [r4, #20]
 800da60:	3020      	adds	r0, #32
 800da62:	2201      	movs	r2, #1
 800da64:	e7e8      	b.n	800da38 <__d2b+0x64>
 800da66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800da6e:	6038      	str	r0, [r7, #0]
 800da70:	6918      	ldr	r0, [r3, #16]
 800da72:	f7ff fd35 	bl	800d4e0 <__hi0bits>
 800da76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da7a:	e7e5      	b.n	800da48 <__d2b+0x74>
 800da7c:	0800e804 	.word	0x0800e804
 800da80:	0800e815 	.word	0x0800e815

0800da84 <__ssputs_r>:
 800da84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da88:	688e      	ldr	r6, [r1, #8]
 800da8a:	461f      	mov	r7, r3
 800da8c:	42be      	cmp	r6, r7
 800da8e:	680b      	ldr	r3, [r1, #0]
 800da90:	4682      	mov	sl, r0
 800da92:	460c      	mov	r4, r1
 800da94:	4690      	mov	r8, r2
 800da96:	d82d      	bhi.n	800daf4 <__ssputs_r+0x70>
 800da98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800daa0:	d026      	beq.n	800daf0 <__ssputs_r+0x6c>
 800daa2:	6965      	ldr	r5, [r4, #20]
 800daa4:	6909      	ldr	r1, [r1, #16]
 800daa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800daaa:	eba3 0901 	sub.w	r9, r3, r1
 800daae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dab2:	1c7b      	adds	r3, r7, #1
 800dab4:	444b      	add	r3, r9
 800dab6:	106d      	asrs	r5, r5, #1
 800dab8:	429d      	cmp	r5, r3
 800daba:	bf38      	it	cc
 800dabc:	461d      	movcc	r5, r3
 800dabe:	0553      	lsls	r3, r2, #21
 800dac0:	d527      	bpl.n	800db12 <__ssputs_r+0x8e>
 800dac2:	4629      	mov	r1, r5
 800dac4:	f7ff fbd8 	bl	800d278 <_malloc_r>
 800dac8:	4606      	mov	r6, r0
 800daca:	b360      	cbz	r0, 800db26 <__ssputs_r+0xa2>
 800dacc:	6921      	ldr	r1, [r4, #16]
 800dace:	464a      	mov	r2, r9
 800dad0:	f000 fa06 	bl	800dee0 <memcpy>
 800dad4:	89a3      	ldrh	r3, [r4, #12]
 800dad6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dade:	81a3      	strh	r3, [r4, #12]
 800dae0:	6126      	str	r6, [r4, #16]
 800dae2:	6165      	str	r5, [r4, #20]
 800dae4:	444e      	add	r6, r9
 800dae6:	eba5 0509 	sub.w	r5, r5, r9
 800daea:	6026      	str	r6, [r4, #0]
 800daec:	60a5      	str	r5, [r4, #8]
 800daee:	463e      	mov	r6, r7
 800daf0:	42be      	cmp	r6, r7
 800daf2:	d900      	bls.n	800daf6 <__ssputs_r+0x72>
 800daf4:	463e      	mov	r6, r7
 800daf6:	6820      	ldr	r0, [r4, #0]
 800daf8:	4632      	mov	r2, r6
 800dafa:	4641      	mov	r1, r8
 800dafc:	f000 f9c6 	bl	800de8c <memmove>
 800db00:	68a3      	ldr	r3, [r4, #8]
 800db02:	1b9b      	subs	r3, r3, r6
 800db04:	60a3      	str	r3, [r4, #8]
 800db06:	6823      	ldr	r3, [r4, #0]
 800db08:	4433      	add	r3, r6
 800db0a:	6023      	str	r3, [r4, #0]
 800db0c:	2000      	movs	r0, #0
 800db0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db12:	462a      	mov	r2, r5
 800db14:	f000 fa36 	bl	800df84 <_realloc_r>
 800db18:	4606      	mov	r6, r0
 800db1a:	2800      	cmp	r0, #0
 800db1c:	d1e0      	bne.n	800dae0 <__ssputs_r+0x5c>
 800db1e:	6921      	ldr	r1, [r4, #16]
 800db20:	4650      	mov	r0, sl
 800db22:	f7ff fb35 	bl	800d190 <_free_r>
 800db26:	230c      	movs	r3, #12
 800db28:	f8ca 3000 	str.w	r3, [sl]
 800db2c:	89a3      	ldrh	r3, [r4, #12]
 800db2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db32:	81a3      	strh	r3, [r4, #12]
 800db34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db38:	e7e9      	b.n	800db0e <__ssputs_r+0x8a>
	...

0800db3c <_svfiprintf_r>:
 800db3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db40:	4698      	mov	r8, r3
 800db42:	898b      	ldrh	r3, [r1, #12]
 800db44:	061b      	lsls	r3, r3, #24
 800db46:	b09d      	sub	sp, #116	@ 0x74
 800db48:	4607      	mov	r7, r0
 800db4a:	460d      	mov	r5, r1
 800db4c:	4614      	mov	r4, r2
 800db4e:	d510      	bpl.n	800db72 <_svfiprintf_r+0x36>
 800db50:	690b      	ldr	r3, [r1, #16]
 800db52:	b973      	cbnz	r3, 800db72 <_svfiprintf_r+0x36>
 800db54:	2140      	movs	r1, #64	@ 0x40
 800db56:	f7ff fb8f 	bl	800d278 <_malloc_r>
 800db5a:	6028      	str	r0, [r5, #0]
 800db5c:	6128      	str	r0, [r5, #16]
 800db5e:	b930      	cbnz	r0, 800db6e <_svfiprintf_r+0x32>
 800db60:	230c      	movs	r3, #12
 800db62:	603b      	str	r3, [r7, #0]
 800db64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db68:	b01d      	add	sp, #116	@ 0x74
 800db6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db6e:	2340      	movs	r3, #64	@ 0x40
 800db70:	616b      	str	r3, [r5, #20]
 800db72:	2300      	movs	r3, #0
 800db74:	9309      	str	r3, [sp, #36]	@ 0x24
 800db76:	2320      	movs	r3, #32
 800db78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800db80:	2330      	movs	r3, #48	@ 0x30
 800db82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dd20 <_svfiprintf_r+0x1e4>
 800db86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db8a:	f04f 0901 	mov.w	r9, #1
 800db8e:	4623      	mov	r3, r4
 800db90:	469a      	mov	sl, r3
 800db92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db96:	b10a      	cbz	r2, 800db9c <_svfiprintf_r+0x60>
 800db98:	2a25      	cmp	r2, #37	@ 0x25
 800db9a:	d1f9      	bne.n	800db90 <_svfiprintf_r+0x54>
 800db9c:	ebba 0b04 	subs.w	fp, sl, r4
 800dba0:	d00b      	beq.n	800dbba <_svfiprintf_r+0x7e>
 800dba2:	465b      	mov	r3, fp
 800dba4:	4622      	mov	r2, r4
 800dba6:	4629      	mov	r1, r5
 800dba8:	4638      	mov	r0, r7
 800dbaa:	f7ff ff6b 	bl	800da84 <__ssputs_r>
 800dbae:	3001      	adds	r0, #1
 800dbb0:	f000 80a7 	beq.w	800dd02 <_svfiprintf_r+0x1c6>
 800dbb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbb6:	445a      	add	r2, fp
 800dbb8:	9209      	str	r2, [sp, #36]	@ 0x24
 800dbba:	f89a 3000 	ldrb.w	r3, [sl]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	f000 809f 	beq.w	800dd02 <_svfiprintf_r+0x1c6>
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dbca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbce:	f10a 0a01 	add.w	sl, sl, #1
 800dbd2:	9304      	str	r3, [sp, #16]
 800dbd4:	9307      	str	r3, [sp, #28]
 800dbd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dbda:	931a      	str	r3, [sp, #104]	@ 0x68
 800dbdc:	4654      	mov	r4, sl
 800dbde:	2205      	movs	r2, #5
 800dbe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbe4:	484e      	ldr	r0, [pc, #312]	@ (800dd20 <_svfiprintf_r+0x1e4>)
 800dbe6:	f7f2 fafb 	bl	80001e0 <memchr>
 800dbea:	9a04      	ldr	r2, [sp, #16]
 800dbec:	b9d8      	cbnz	r0, 800dc26 <_svfiprintf_r+0xea>
 800dbee:	06d0      	lsls	r0, r2, #27
 800dbf0:	bf44      	itt	mi
 800dbf2:	2320      	movmi	r3, #32
 800dbf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbf8:	0711      	lsls	r1, r2, #28
 800dbfa:	bf44      	itt	mi
 800dbfc:	232b      	movmi	r3, #43	@ 0x2b
 800dbfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc02:	f89a 3000 	ldrb.w	r3, [sl]
 800dc06:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc08:	d015      	beq.n	800dc36 <_svfiprintf_r+0xfa>
 800dc0a:	9a07      	ldr	r2, [sp, #28]
 800dc0c:	4654      	mov	r4, sl
 800dc0e:	2000      	movs	r0, #0
 800dc10:	f04f 0c0a 	mov.w	ip, #10
 800dc14:	4621      	mov	r1, r4
 800dc16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc1a:	3b30      	subs	r3, #48	@ 0x30
 800dc1c:	2b09      	cmp	r3, #9
 800dc1e:	d94b      	bls.n	800dcb8 <_svfiprintf_r+0x17c>
 800dc20:	b1b0      	cbz	r0, 800dc50 <_svfiprintf_r+0x114>
 800dc22:	9207      	str	r2, [sp, #28]
 800dc24:	e014      	b.n	800dc50 <_svfiprintf_r+0x114>
 800dc26:	eba0 0308 	sub.w	r3, r0, r8
 800dc2a:	fa09 f303 	lsl.w	r3, r9, r3
 800dc2e:	4313      	orrs	r3, r2
 800dc30:	9304      	str	r3, [sp, #16]
 800dc32:	46a2      	mov	sl, r4
 800dc34:	e7d2      	b.n	800dbdc <_svfiprintf_r+0xa0>
 800dc36:	9b03      	ldr	r3, [sp, #12]
 800dc38:	1d19      	adds	r1, r3, #4
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	9103      	str	r1, [sp, #12]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	bfbb      	ittet	lt
 800dc42:	425b      	neglt	r3, r3
 800dc44:	f042 0202 	orrlt.w	r2, r2, #2
 800dc48:	9307      	strge	r3, [sp, #28]
 800dc4a:	9307      	strlt	r3, [sp, #28]
 800dc4c:	bfb8      	it	lt
 800dc4e:	9204      	strlt	r2, [sp, #16]
 800dc50:	7823      	ldrb	r3, [r4, #0]
 800dc52:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc54:	d10a      	bne.n	800dc6c <_svfiprintf_r+0x130>
 800dc56:	7863      	ldrb	r3, [r4, #1]
 800dc58:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc5a:	d132      	bne.n	800dcc2 <_svfiprintf_r+0x186>
 800dc5c:	9b03      	ldr	r3, [sp, #12]
 800dc5e:	1d1a      	adds	r2, r3, #4
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	9203      	str	r2, [sp, #12]
 800dc64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc68:	3402      	adds	r4, #2
 800dc6a:	9305      	str	r3, [sp, #20]
 800dc6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dd30 <_svfiprintf_r+0x1f4>
 800dc70:	7821      	ldrb	r1, [r4, #0]
 800dc72:	2203      	movs	r2, #3
 800dc74:	4650      	mov	r0, sl
 800dc76:	f7f2 fab3 	bl	80001e0 <memchr>
 800dc7a:	b138      	cbz	r0, 800dc8c <_svfiprintf_r+0x150>
 800dc7c:	9b04      	ldr	r3, [sp, #16]
 800dc7e:	eba0 000a 	sub.w	r0, r0, sl
 800dc82:	2240      	movs	r2, #64	@ 0x40
 800dc84:	4082      	lsls	r2, r0
 800dc86:	4313      	orrs	r3, r2
 800dc88:	3401      	adds	r4, #1
 800dc8a:	9304      	str	r3, [sp, #16]
 800dc8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc90:	4824      	ldr	r0, [pc, #144]	@ (800dd24 <_svfiprintf_r+0x1e8>)
 800dc92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc96:	2206      	movs	r2, #6
 800dc98:	f7f2 faa2 	bl	80001e0 <memchr>
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	d036      	beq.n	800dd0e <_svfiprintf_r+0x1d2>
 800dca0:	4b21      	ldr	r3, [pc, #132]	@ (800dd28 <_svfiprintf_r+0x1ec>)
 800dca2:	bb1b      	cbnz	r3, 800dcec <_svfiprintf_r+0x1b0>
 800dca4:	9b03      	ldr	r3, [sp, #12]
 800dca6:	3307      	adds	r3, #7
 800dca8:	f023 0307 	bic.w	r3, r3, #7
 800dcac:	3308      	adds	r3, #8
 800dcae:	9303      	str	r3, [sp, #12]
 800dcb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcb2:	4433      	add	r3, r6
 800dcb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcb6:	e76a      	b.n	800db8e <_svfiprintf_r+0x52>
 800dcb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcbc:	460c      	mov	r4, r1
 800dcbe:	2001      	movs	r0, #1
 800dcc0:	e7a8      	b.n	800dc14 <_svfiprintf_r+0xd8>
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	3401      	adds	r4, #1
 800dcc6:	9305      	str	r3, [sp, #20]
 800dcc8:	4619      	mov	r1, r3
 800dcca:	f04f 0c0a 	mov.w	ip, #10
 800dcce:	4620      	mov	r0, r4
 800dcd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcd4:	3a30      	subs	r2, #48	@ 0x30
 800dcd6:	2a09      	cmp	r2, #9
 800dcd8:	d903      	bls.n	800dce2 <_svfiprintf_r+0x1a6>
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d0c6      	beq.n	800dc6c <_svfiprintf_r+0x130>
 800dcde:	9105      	str	r1, [sp, #20]
 800dce0:	e7c4      	b.n	800dc6c <_svfiprintf_r+0x130>
 800dce2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dce6:	4604      	mov	r4, r0
 800dce8:	2301      	movs	r3, #1
 800dcea:	e7f0      	b.n	800dcce <_svfiprintf_r+0x192>
 800dcec:	ab03      	add	r3, sp, #12
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	462a      	mov	r2, r5
 800dcf2:	4b0e      	ldr	r3, [pc, #56]	@ (800dd2c <_svfiprintf_r+0x1f0>)
 800dcf4:	a904      	add	r1, sp, #16
 800dcf6:	4638      	mov	r0, r7
 800dcf8:	f7fd fe7a 	bl	800b9f0 <_printf_float>
 800dcfc:	1c42      	adds	r2, r0, #1
 800dcfe:	4606      	mov	r6, r0
 800dd00:	d1d6      	bne.n	800dcb0 <_svfiprintf_r+0x174>
 800dd02:	89ab      	ldrh	r3, [r5, #12]
 800dd04:	065b      	lsls	r3, r3, #25
 800dd06:	f53f af2d 	bmi.w	800db64 <_svfiprintf_r+0x28>
 800dd0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd0c:	e72c      	b.n	800db68 <_svfiprintf_r+0x2c>
 800dd0e:	ab03      	add	r3, sp, #12
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	462a      	mov	r2, r5
 800dd14:	4b05      	ldr	r3, [pc, #20]	@ (800dd2c <_svfiprintf_r+0x1f0>)
 800dd16:	a904      	add	r1, sp, #16
 800dd18:	4638      	mov	r0, r7
 800dd1a:	f7fe f901 	bl	800bf20 <_printf_i>
 800dd1e:	e7ed      	b.n	800dcfc <_svfiprintf_r+0x1c0>
 800dd20:	0800e86e 	.word	0x0800e86e
 800dd24:	0800e878 	.word	0x0800e878
 800dd28:	0800b9f1 	.word	0x0800b9f1
 800dd2c:	0800da85 	.word	0x0800da85
 800dd30:	0800e874 	.word	0x0800e874

0800dd34 <__sflush_r>:
 800dd34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd3c:	0716      	lsls	r6, r2, #28
 800dd3e:	4605      	mov	r5, r0
 800dd40:	460c      	mov	r4, r1
 800dd42:	d454      	bmi.n	800ddee <__sflush_r+0xba>
 800dd44:	684b      	ldr	r3, [r1, #4]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	dc02      	bgt.n	800dd50 <__sflush_r+0x1c>
 800dd4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	dd48      	ble.n	800dde2 <__sflush_r+0xae>
 800dd50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd52:	2e00      	cmp	r6, #0
 800dd54:	d045      	beq.n	800dde2 <__sflush_r+0xae>
 800dd56:	2300      	movs	r3, #0
 800dd58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dd5c:	682f      	ldr	r7, [r5, #0]
 800dd5e:	6a21      	ldr	r1, [r4, #32]
 800dd60:	602b      	str	r3, [r5, #0]
 800dd62:	d030      	beq.n	800ddc6 <__sflush_r+0x92>
 800dd64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dd66:	89a3      	ldrh	r3, [r4, #12]
 800dd68:	0759      	lsls	r1, r3, #29
 800dd6a:	d505      	bpl.n	800dd78 <__sflush_r+0x44>
 800dd6c:	6863      	ldr	r3, [r4, #4]
 800dd6e:	1ad2      	subs	r2, r2, r3
 800dd70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dd72:	b10b      	cbz	r3, 800dd78 <__sflush_r+0x44>
 800dd74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dd76:	1ad2      	subs	r2, r2, r3
 800dd78:	2300      	movs	r3, #0
 800dd7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd7c:	6a21      	ldr	r1, [r4, #32]
 800dd7e:	4628      	mov	r0, r5
 800dd80:	47b0      	blx	r6
 800dd82:	1c43      	adds	r3, r0, #1
 800dd84:	89a3      	ldrh	r3, [r4, #12]
 800dd86:	d106      	bne.n	800dd96 <__sflush_r+0x62>
 800dd88:	6829      	ldr	r1, [r5, #0]
 800dd8a:	291d      	cmp	r1, #29
 800dd8c:	d82b      	bhi.n	800dde6 <__sflush_r+0xb2>
 800dd8e:	4a2a      	ldr	r2, [pc, #168]	@ (800de38 <__sflush_r+0x104>)
 800dd90:	40ca      	lsrs	r2, r1
 800dd92:	07d6      	lsls	r6, r2, #31
 800dd94:	d527      	bpl.n	800dde6 <__sflush_r+0xb2>
 800dd96:	2200      	movs	r2, #0
 800dd98:	6062      	str	r2, [r4, #4]
 800dd9a:	04d9      	lsls	r1, r3, #19
 800dd9c:	6922      	ldr	r2, [r4, #16]
 800dd9e:	6022      	str	r2, [r4, #0]
 800dda0:	d504      	bpl.n	800ddac <__sflush_r+0x78>
 800dda2:	1c42      	adds	r2, r0, #1
 800dda4:	d101      	bne.n	800ddaa <__sflush_r+0x76>
 800dda6:	682b      	ldr	r3, [r5, #0]
 800dda8:	b903      	cbnz	r3, 800ddac <__sflush_r+0x78>
 800ddaa:	6560      	str	r0, [r4, #84]	@ 0x54
 800ddac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ddae:	602f      	str	r7, [r5, #0]
 800ddb0:	b1b9      	cbz	r1, 800dde2 <__sflush_r+0xae>
 800ddb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ddb6:	4299      	cmp	r1, r3
 800ddb8:	d002      	beq.n	800ddc0 <__sflush_r+0x8c>
 800ddba:	4628      	mov	r0, r5
 800ddbc:	f7ff f9e8 	bl	800d190 <_free_r>
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	6363      	str	r3, [r4, #52]	@ 0x34
 800ddc4:	e00d      	b.n	800dde2 <__sflush_r+0xae>
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	4628      	mov	r0, r5
 800ddca:	47b0      	blx	r6
 800ddcc:	4602      	mov	r2, r0
 800ddce:	1c50      	adds	r0, r2, #1
 800ddd0:	d1c9      	bne.n	800dd66 <__sflush_r+0x32>
 800ddd2:	682b      	ldr	r3, [r5, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d0c6      	beq.n	800dd66 <__sflush_r+0x32>
 800ddd8:	2b1d      	cmp	r3, #29
 800ddda:	d001      	beq.n	800dde0 <__sflush_r+0xac>
 800dddc:	2b16      	cmp	r3, #22
 800ddde:	d11e      	bne.n	800de1e <__sflush_r+0xea>
 800dde0:	602f      	str	r7, [r5, #0]
 800dde2:	2000      	movs	r0, #0
 800dde4:	e022      	b.n	800de2c <__sflush_r+0xf8>
 800dde6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddea:	b21b      	sxth	r3, r3
 800ddec:	e01b      	b.n	800de26 <__sflush_r+0xf2>
 800ddee:	690f      	ldr	r7, [r1, #16]
 800ddf0:	2f00      	cmp	r7, #0
 800ddf2:	d0f6      	beq.n	800dde2 <__sflush_r+0xae>
 800ddf4:	0793      	lsls	r3, r2, #30
 800ddf6:	680e      	ldr	r6, [r1, #0]
 800ddf8:	bf08      	it	eq
 800ddfa:	694b      	ldreq	r3, [r1, #20]
 800ddfc:	600f      	str	r7, [r1, #0]
 800ddfe:	bf18      	it	ne
 800de00:	2300      	movne	r3, #0
 800de02:	eba6 0807 	sub.w	r8, r6, r7
 800de06:	608b      	str	r3, [r1, #8]
 800de08:	f1b8 0f00 	cmp.w	r8, #0
 800de0c:	dde9      	ble.n	800dde2 <__sflush_r+0xae>
 800de0e:	6a21      	ldr	r1, [r4, #32]
 800de10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800de12:	4643      	mov	r3, r8
 800de14:	463a      	mov	r2, r7
 800de16:	4628      	mov	r0, r5
 800de18:	47b0      	blx	r6
 800de1a:	2800      	cmp	r0, #0
 800de1c:	dc08      	bgt.n	800de30 <__sflush_r+0xfc>
 800de1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de26:	81a3      	strh	r3, [r4, #12]
 800de28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de30:	4407      	add	r7, r0
 800de32:	eba8 0800 	sub.w	r8, r8, r0
 800de36:	e7e7      	b.n	800de08 <__sflush_r+0xd4>
 800de38:	20400001 	.word	0x20400001

0800de3c <_fflush_r>:
 800de3c:	b538      	push	{r3, r4, r5, lr}
 800de3e:	690b      	ldr	r3, [r1, #16]
 800de40:	4605      	mov	r5, r0
 800de42:	460c      	mov	r4, r1
 800de44:	b913      	cbnz	r3, 800de4c <_fflush_r+0x10>
 800de46:	2500      	movs	r5, #0
 800de48:	4628      	mov	r0, r5
 800de4a:	bd38      	pop	{r3, r4, r5, pc}
 800de4c:	b118      	cbz	r0, 800de56 <_fflush_r+0x1a>
 800de4e:	6a03      	ldr	r3, [r0, #32]
 800de50:	b90b      	cbnz	r3, 800de56 <_fflush_r+0x1a>
 800de52:	f7fe fa0f 	bl	800c274 <__sinit>
 800de56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d0f3      	beq.n	800de46 <_fflush_r+0xa>
 800de5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800de60:	07d0      	lsls	r0, r2, #31
 800de62:	d404      	bmi.n	800de6e <_fflush_r+0x32>
 800de64:	0599      	lsls	r1, r3, #22
 800de66:	d402      	bmi.n	800de6e <_fflush_r+0x32>
 800de68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de6a:	f7fe fb36 	bl	800c4da <__retarget_lock_acquire_recursive>
 800de6e:	4628      	mov	r0, r5
 800de70:	4621      	mov	r1, r4
 800de72:	f7ff ff5f 	bl	800dd34 <__sflush_r>
 800de76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de78:	07da      	lsls	r2, r3, #31
 800de7a:	4605      	mov	r5, r0
 800de7c:	d4e4      	bmi.n	800de48 <_fflush_r+0xc>
 800de7e:	89a3      	ldrh	r3, [r4, #12]
 800de80:	059b      	lsls	r3, r3, #22
 800de82:	d4e1      	bmi.n	800de48 <_fflush_r+0xc>
 800de84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de86:	f7fe fb29 	bl	800c4dc <__retarget_lock_release_recursive>
 800de8a:	e7dd      	b.n	800de48 <_fflush_r+0xc>

0800de8c <memmove>:
 800de8c:	4288      	cmp	r0, r1
 800de8e:	b510      	push	{r4, lr}
 800de90:	eb01 0402 	add.w	r4, r1, r2
 800de94:	d902      	bls.n	800de9c <memmove+0x10>
 800de96:	4284      	cmp	r4, r0
 800de98:	4623      	mov	r3, r4
 800de9a:	d807      	bhi.n	800deac <memmove+0x20>
 800de9c:	1e43      	subs	r3, r0, #1
 800de9e:	42a1      	cmp	r1, r4
 800dea0:	d008      	beq.n	800deb4 <memmove+0x28>
 800dea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800deaa:	e7f8      	b.n	800de9e <memmove+0x12>
 800deac:	4402      	add	r2, r0
 800deae:	4601      	mov	r1, r0
 800deb0:	428a      	cmp	r2, r1
 800deb2:	d100      	bne.n	800deb6 <memmove+0x2a>
 800deb4:	bd10      	pop	{r4, pc}
 800deb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800deba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800debe:	e7f7      	b.n	800deb0 <memmove+0x24>

0800dec0 <_sbrk_r>:
 800dec0:	b538      	push	{r3, r4, r5, lr}
 800dec2:	4d06      	ldr	r5, [pc, #24]	@ (800dedc <_sbrk_r+0x1c>)
 800dec4:	2300      	movs	r3, #0
 800dec6:	4604      	mov	r4, r0
 800dec8:	4608      	mov	r0, r1
 800deca:	602b      	str	r3, [r5, #0]
 800decc:	f7f4 fac0 	bl	8002450 <_sbrk>
 800ded0:	1c43      	adds	r3, r0, #1
 800ded2:	d102      	bne.n	800deda <_sbrk_r+0x1a>
 800ded4:	682b      	ldr	r3, [r5, #0]
 800ded6:	b103      	cbz	r3, 800deda <_sbrk_r+0x1a>
 800ded8:	6023      	str	r3, [r4, #0]
 800deda:	bd38      	pop	{r3, r4, r5, pc}
 800dedc:	2000220c 	.word	0x2000220c

0800dee0 <memcpy>:
 800dee0:	440a      	add	r2, r1
 800dee2:	4291      	cmp	r1, r2
 800dee4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dee8:	d100      	bne.n	800deec <memcpy+0xc>
 800deea:	4770      	bx	lr
 800deec:	b510      	push	{r4, lr}
 800deee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800def2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800def6:	4291      	cmp	r1, r2
 800def8:	d1f9      	bne.n	800deee <memcpy+0xe>
 800defa:	bd10      	pop	{r4, pc}

0800defc <__assert_func>:
 800defc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800defe:	4614      	mov	r4, r2
 800df00:	461a      	mov	r2, r3
 800df02:	4b09      	ldr	r3, [pc, #36]	@ (800df28 <__assert_func+0x2c>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4605      	mov	r5, r0
 800df08:	68d8      	ldr	r0, [r3, #12]
 800df0a:	b14c      	cbz	r4, 800df20 <__assert_func+0x24>
 800df0c:	4b07      	ldr	r3, [pc, #28]	@ (800df2c <__assert_func+0x30>)
 800df0e:	9100      	str	r1, [sp, #0]
 800df10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df14:	4906      	ldr	r1, [pc, #24]	@ (800df30 <__assert_func+0x34>)
 800df16:	462b      	mov	r3, r5
 800df18:	f000 f870 	bl	800dffc <fiprintf>
 800df1c:	f000 f880 	bl	800e020 <abort>
 800df20:	4b04      	ldr	r3, [pc, #16]	@ (800df34 <__assert_func+0x38>)
 800df22:	461c      	mov	r4, r3
 800df24:	e7f3      	b.n	800df0e <__assert_func+0x12>
 800df26:	bf00      	nop
 800df28:	20000110 	.word	0x20000110
 800df2c:	0800e889 	.word	0x0800e889
 800df30:	0800e896 	.word	0x0800e896
 800df34:	0800e8c4 	.word	0x0800e8c4

0800df38 <_calloc_r>:
 800df38:	b570      	push	{r4, r5, r6, lr}
 800df3a:	fba1 5402 	umull	r5, r4, r1, r2
 800df3e:	b934      	cbnz	r4, 800df4e <_calloc_r+0x16>
 800df40:	4629      	mov	r1, r5
 800df42:	f7ff f999 	bl	800d278 <_malloc_r>
 800df46:	4606      	mov	r6, r0
 800df48:	b928      	cbnz	r0, 800df56 <_calloc_r+0x1e>
 800df4a:	4630      	mov	r0, r6
 800df4c:	bd70      	pop	{r4, r5, r6, pc}
 800df4e:	220c      	movs	r2, #12
 800df50:	6002      	str	r2, [r0, #0]
 800df52:	2600      	movs	r6, #0
 800df54:	e7f9      	b.n	800df4a <_calloc_r+0x12>
 800df56:	462a      	mov	r2, r5
 800df58:	4621      	mov	r1, r4
 800df5a:	f7fe fa41 	bl	800c3e0 <memset>
 800df5e:	e7f4      	b.n	800df4a <_calloc_r+0x12>

0800df60 <__ascii_mbtowc>:
 800df60:	b082      	sub	sp, #8
 800df62:	b901      	cbnz	r1, 800df66 <__ascii_mbtowc+0x6>
 800df64:	a901      	add	r1, sp, #4
 800df66:	b142      	cbz	r2, 800df7a <__ascii_mbtowc+0x1a>
 800df68:	b14b      	cbz	r3, 800df7e <__ascii_mbtowc+0x1e>
 800df6a:	7813      	ldrb	r3, [r2, #0]
 800df6c:	600b      	str	r3, [r1, #0]
 800df6e:	7812      	ldrb	r2, [r2, #0]
 800df70:	1e10      	subs	r0, r2, #0
 800df72:	bf18      	it	ne
 800df74:	2001      	movne	r0, #1
 800df76:	b002      	add	sp, #8
 800df78:	4770      	bx	lr
 800df7a:	4610      	mov	r0, r2
 800df7c:	e7fb      	b.n	800df76 <__ascii_mbtowc+0x16>
 800df7e:	f06f 0001 	mvn.w	r0, #1
 800df82:	e7f8      	b.n	800df76 <__ascii_mbtowc+0x16>

0800df84 <_realloc_r>:
 800df84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df88:	4607      	mov	r7, r0
 800df8a:	4614      	mov	r4, r2
 800df8c:	460d      	mov	r5, r1
 800df8e:	b921      	cbnz	r1, 800df9a <_realloc_r+0x16>
 800df90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df94:	4611      	mov	r1, r2
 800df96:	f7ff b96f 	b.w	800d278 <_malloc_r>
 800df9a:	b92a      	cbnz	r2, 800dfa8 <_realloc_r+0x24>
 800df9c:	f7ff f8f8 	bl	800d190 <_free_r>
 800dfa0:	4625      	mov	r5, r4
 800dfa2:	4628      	mov	r0, r5
 800dfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfa8:	f000 f841 	bl	800e02e <_malloc_usable_size_r>
 800dfac:	4284      	cmp	r4, r0
 800dfae:	4606      	mov	r6, r0
 800dfb0:	d802      	bhi.n	800dfb8 <_realloc_r+0x34>
 800dfb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dfb6:	d8f4      	bhi.n	800dfa2 <_realloc_r+0x1e>
 800dfb8:	4621      	mov	r1, r4
 800dfba:	4638      	mov	r0, r7
 800dfbc:	f7ff f95c 	bl	800d278 <_malloc_r>
 800dfc0:	4680      	mov	r8, r0
 800dfc2:	b908      	cbnz	r0, 800dfc8 <_realloc_r+0x44>
 800dfc4:	4645      	mov	r5, r8
 800dfc6:	e7ec      	b.n	800dfa2 <_realloc_r+0x1e>
 800dfc8:	42b4      	cmp	r4, r6
 800dfca:	4622      	mov	r2, r4
 800dfcc:	4629      	mov	r1, r5
 800dfce:	bf28      	it	cs
 800dfd0:	4632      	movcs	r2, r6
 800dfd2:	f7ff ff85 	bl	800dee0 <memcpy>
 800dfd6:	4629      	mov	r1, r5
 800dfd8:	4638      	mov	r0, r7
 800dfda:	f7ff f8d9 	bl	800d190 <_free_r>
 800dfde:	e7f1      	b.n	800dfc4 <_realloc_r+0x40>

0800dfe0 <__ascii_wctomb>:
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	4608      	mov	r0, r1
 800dfe4:	b141      	cbz	r1, 800dff8 <__ascii_wctomb+0x18>
 800dfe6:	2aff      	cmp	r2, #255	@ 0xff
 800dfe8:	d904      	bls.n	800dff4 <__ascii_wctomb+0x14>
 800dfea:	228a      	movs	r2, #138	@ 0x8a
 800dfec:	601a      	str	r2, [r3, #0]
 800dfee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dff2:	4770      	bx	lr
 800dff4:	700a      	strb	r2, [r1, #0]
 800dff6:	2001      	movs	r0, #1
 800dff8:	4770      	bx	lr
	...

0800dffc <fiprintf>:
 800dffc:	b40e      	push	{r1, r2, r3}
 800dffe:	b503      	push	{r0, r1, lr}
 800e000:	4601      	mov	r1, r0
 800e002:	ab03      	add	r3, sp, #12
 800e004:	4805      	ldr	r0, [pc, #20]	@ (800e01c <fiprintf+0x20>)
 800e006:	f853 2b04 	ldr.w	r2, [r3], #4
 800e00a:	6800      	ldr	r0, [r0, #0]
 800e00c:	9301      	str	r3, [sp, #4]
 800e00e:	f000 f83f 	bl	800e090 <_vfiprintf_r>
 800e012:	b002      	add	sp, #8
 800e014:	f85d eb04 	ldr.w	lr, [sp], #4
 800e018:	b003      	add	sp, #12
 800e01a:	4770      	bx	lr
 800e01c:	20000110 	.word	0x20000110

0800e020 <abort>:
 800e020:	b508      	push	{r3, lr}
 800e022:	2006      	movs	r0, #6
 800e024:	f000 fa08 	bl	800e438 <raise>
 800e028:	2001      	movs	r0, #1
 800e02a:	f7f4 f999 	bl	8002360 <_exit>

0800e02e <_malloc_usable_size_r>:
 800e02e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e032:	1f18      	subs	r0, r3, #4
 800e034:	2b00      	cmp	r3, #0
 800e036:	bfbc      	itt	lt
 800e038:	580b      	ldrlt	r3, [r1, r0]
 800e03a:	18c0      	addlt	r0, r0, r3
 800e03c:	4770      	bx	lr

0800e03e <__sfputc_r>:
 800e03e:	6893      	ldr	r3, [r2, #8]
 800e040:	3b01      	subs	r3, #1
 800e042:	2b00      	cmp	r3, #0
 800e044:	b410      	push	{r4}
 800e046:	6093      	str	r3, [r2, #8]
 800e048:	da08      	bge.n	800e05c <__sfputc_r+0x1e>
 800e04a:	6994      	ldr	r4, [r2, #24]
 800e04c:	42a3      	cmp	r3, r4
 800e04e:	db01      	blt.n	800e054 <__sfputc_r+0x16>
 800e050:	290a      	cmp	r1, #10
 800e052:	d103      	bne.n	800e05c <__sfputc_r+0x1e>
 800e054:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e058:	f000 b932 	b.w	800e2c0 <__swbuf_r>
 800e05c:	6813      	ldr	r3, [r2, #0]
 800e05e:	1c58      	adds	r0, r3, #1
 800e060:	6010      	str	r0, [r2, #0]
 800e062:	7019      	strb	r1, [r3, #0]
 800e064:	4608      	mov	r0, r1
 800e066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <__sfputs_r>:
 800e06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e06e:	4606      	mov	r6, r0
 800e070:	460f      	mov	r7, r1
 800e072:	4614      	mov	r4, r2
 800e074:	18d5      	adds	r5, r2, r3
 800e076:	42ac      	cmp	r4, r5
 800e078:	d101      	bne.n	800e07e <__sfputs_r+0x12>
 800e07a:	2000      	movs	r0, #0
 800e07c:	e007      	b.n	800e08e <__sfputs_r+0x22>
 800e07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e082:	463a      	mov	r2, r7
 800e084:	4630      	mov	r0, r6
 800e086:	f7ff ffda 	bl	800e03e <__sfputc_r>
 800e08a:	1c43      	adds	r3, r0, #1
 800e08c:	d1f3      	bne.n	800e076 <__sfputs_r+0xa>
 800e08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e090 <_vfiprintf_r>:
 800e090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e094:	460d      	mov	r5, r1
 800e096:	b09d      	sub	sp, #116	@ 0x74
 800e098:	4614      	mov	r4, r2
 800e09a:	4698      	mov	r8, r3
 800e09c:	4606      	mov	r6, r0
 800e09e:	b118      	cbz	r0, 800e0a8 <_vfiprintf_r+0x18>
 800e0a0:	6a03      	ldr	r3, [r0, #32]
 800e0a2:	b90b      	cbnz	r3, 800e0a8 <_vfiprintf_r+0x18>
 800e0a4:	f7fe f8e6 	bl	800c274 <__sinit>
 800e0a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0aa:	07d9      	lsls	r1, r3, #31
 800e0ac:	d405      	bmi.n	800e0ba <_vfiprintf_r+0x2a>
 800e0ae:	89ab      	ldrh	r3, [r5, #12]
 800e0b0:	059a      	lsls	r2, r3, #22
 800e0b2:	d402      	bmi.n	800e0ba <_vfiprintf_r+0x2a>
 800e0b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0b6:	f7fe fa10 	bl	800c4da <__retarget_lock_acquire_recursive>
 800e0ba:	89ab      	ldrh	r3, [r5, #12]
 800e0bc:	071b      	lsls	r3, r3, #28
 800e0be:	d501      	bpl.n	800e0c4 <_vfiprintf_r+0x34>
 800e0c0:	692b      	ldr	r3, [r5, #16]
 800e0c2:	b99b      	cbnz	r3, 800e0ec <_vfiprintf_r+0x5c>
 800e0c4:	4629      	mov	r1, r5
 800e0c6:	4630      	mov	r0, r6
 800e0c8:	f000 f938 	bl	800e33c <__swsetup_r>
 800e0cc:	b170      	cbz	r0, 800e0ec <_vfiprintf_r+0x5c>
 800e0ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0d0:	07dc      	lsls	r4, r3, #31
 800e0d2:	d504      	bpl.n	800e0de <_vfiprintf_r+0x4e>
 800e0d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e0d8:	b01d      	add	sp, #116	@ 0x74
 800e0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0de:	89ab      	ldrh	r3, [r5, #12]
 800e0e0:	0598      	lsls	r0, r3, #22
 800e0e2:	d4f7      	bmi.n	800e0d4 <_vfiprintf_r+0x44>
 800e0e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0e6:	f7fe f9f9 	bl	800c4dc <__retarget_lock_release_recursive>
 800e0ea:	e7f3      	b.n	800e0d4 <_vfiprintf_r+0x44>
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0f0:	2320      	movs	r3, #32
 800e0f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0fa:	2330      	movs	r3, #48	@ 0x30
 800e0fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e2ac <_vfiprintf_r+0x21c>
 800e100:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e104:	f04f 0901 	mov.w	r9, #1
 800e108:	4623      	mov	r3, r4
 800e10a:	469a      	mov	sl, r3
 800e10c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e110:	b10a      	cbz	r2, 800e116 <_vfiprintf_r+0x86>
 800e112:	2a25      	cmp	r2, #37	@ 0x25
 800e114:	d1f9      	bne.n	800e10a <_vfiprintf_r+0x7a>
 800e116:	ebba 0b04 	subs.w	fp, sl, r4
 800e11a:	d00b      	beq.n	800e134 <_vfiprintf_r+0xa4>
 800e11c:	465b      	mov	r3, fp
 800e11e:	4622      	mov	r2, r4
 800e120:	4629      	mov	r1, r5
 800e122:	4630      	mov	r0, r6
 800e124:	f7ff ffa2 	bl	800e06c <__sfputs_r>
 800e128:	3001      	adds	r0, #1
 800e12a:	f000 80a7 	beq.w	800e27c <_vfiprintf_r+0x1ec>
 800e12e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e130:	445a      	add	r2, fp
 800e132:	9209      	str	r2, [sp, #36]	@ 0x24
 800e134:	f89a 3000 	ldrb.w	r3, [sl]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	f000 809f 	beq.w	800e27c <_vfiprintf_r+0x1ec>
 800e13e:	2300      	movs	r3, #0
 800e140:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e148:	f10a 0a01 	add.w	sl, sl, #1
 800e14c:	9304      	str	r3, [sp, #16]
 800e14e:	9307      	str	r3, [sp, #28]
 800e150:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e154:	931a      	str	r3, [sp, #104]	@ 0x68
 800e156:	4654      	mov	r4, sl
 800e158:	2205      	movs	r2, #5
 800e15a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e15e:	4853      	ldr	r0, [pc, #332]	@ (800e2ac <_vfiprintf_r+0x21c>)
 800e160:	f7f2 f83e 	bl	80001e0 <memchr>
 800e164:	9a04      	ldr	r2, [sp, #16]
 800e166:	b9d8      	cbnz	r0, 800e1a0 <_vfiprintf_r+0x110>
 800e168:	06d1      	lsls	r1, r2, #27
 800e16a:	bf44      	itt	mi
 800e16c:	2320      	movmi	r3, #32
 800e16e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e172:	0713      	lsls	r3, r2, #28
 800e174:	bf44      	itt	mi
 800e176:	232b      	movmi	r3, #43	@ 0x2b
 800e178:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e17c:	f89a 3000 	ldrb.w	r3, [sl]
 800e180:	2b2a      	cmp	r3, #42	@ 0x2a
 800e182:	d015      	beq.n	800e1b0 <_vfiprintf_r+0x120>
 800e184:	9a07      	ldr	r2, [sp, #28]
 800e186:	4654      	mov	r4, sl
 800e188:	2000      	movs	r0, #0
 800e18a:	f04f 0c0a 	mov.w	ip, #10
 800e18e:	4621      	mov	r1, r4
 800e190:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e194:	3b30      	subs	r3, #48	@ 0x30
 800e196:	2b09      	cmp	r3, #9
 800e198:	d94b      	bls.n	800e232 <_vfiprintf_r+0x1a2>
 800e19a:	b1b0      	cbz	r0, 800e1ca <_vfiprintf_r+0x13a>
 800e19c:	9207      	str	r2, [sp, #28]
 800e19e:	e014      	b.n	800e1ca <_vfiprintf_r+0x13a>
 800e1a0:	eba0 0308 	sub.w	r3, r0, r8
 800e1a4:	fa09 f303 	lsl.w	r3, r9, r3
 800e1a8:	4313      	orrs	r3, r2
 800e1aa:	9304      	str	r3, [sp, #16]
 800e1ac:	46a2      	mov	sl, r4
 800e1ae:	e7d2      	b.n	800e156 <_vfiprintf_r+0xc6>
 800e1b0:	9b03      	ldr	r3, [sp, #12]
 800e1b2:	1d19      	adds	r1, r3, #4
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	9103      	str	r1, [sp, #12]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	bfbb      	ittet	lt
 800e1bc:	425b      	neglt	r3, r3
 800e1be:	f042 0202 	orrlt.w	r2, r2, #2
 800e1c2:	9307      	strge	r3, [sp, #28]
 800e1c4:	9307      	strlt	r3, [sp, #28]
 800e1c6:	bfb8      	it	lt
 800e1c8:	9204      	strlt	r2, [sp, #16]
 800e1ca:	7823      	ldrb	r3, [r4, #0]
 800e1cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1ce:	d10a      	bne.n	800e1e6 <_vfiprintf_r+0x156>
 800e1d0:	7863      	ldrb	r3, [r4, #1]
 800e1d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1d4:	d132      	bne.n	800e23c <_vfiprintf_r+0x1ac>
 800e1d6:	9b03      	ldr	r3, [sp, #12]
 800e1d8:	1d1a      	adds	r2, r3, #4
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	9203      	str	r2, [sp, #12]
 800e1de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e1e2:	3402      	adds	r4, #2
 800e1e4:	9305      	str	r3, [sp, #20]
 800e1e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e2bc <_vfiprintf_r+0x22c>
 800e1ea:	7821      	ldrb	r1, [r4, #0]
 800e1ec:	2203      	movs	r2, #3
 800e1ee:	4650      	mov	r0, sl
 800e1f0:	f7f1 fff6 	bl	80001e0 <memchr>
 800e1f4:	b138      	cbz	r0, 800e206 <_vfiprintf_r+0x176>
 800e1f6:	9b04      	ldr	r3, [sp, #16]
 800e1f8:	eba0 000a 	sub.w	r0, r0, sl
 800e1fc:	2240      	movs	r2, #64	@ 0x40
 800e1fe:	4082      	lsls	r2, r0
 800e200:	4313      	orrs	r3, r2
 800e202:	3401      	adds	r4, #1
 800e204:	9304      	str	r3, [sp, #16]
 800e206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e20a:	4829      	ldr	r0, [pc, #164]	@ (800e2b0 <_vfiprintf_r+0x220>)
 800e20c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e210:	2206      	movs	r2, #6
 800e212:	f7f1 ffe5 	bl	80001e0 <memchr>
 800e216:	2800      	cmp	r0, #0
 800e218:	d03f      	beq.n	800e29a <_vfiprintf_r+0x20a>
 800e21a:	4b26      	ldr	r3, [pc, #152]	@ (800e2b4 <_vfiprintf_r+0x224>)
 800e21c:	bb1b      	cbnz	r3, 800e266 <_vfiprintf_r+0x1d6>
 800e21e:	9b03      	ldr	r3, [sp, #12]
 800e220:	3307      	adds	r3, #7
 800e222:	f023 0307 	bic.w	r3, r3, #7
 800e226:	3308      	adds	r3, #8
 800e228:	9303      	str	r3, [sp, #12]
 800e22a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e22c:	443b      	add	r3, r7
 800e22e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e230:	e76a      	b.n	800e108 <_vfiprintf_r+0x78>
 800e232:	fb0c 3202 	mla	r2, ip, r2, r3
 800e236:	460c      	mov	r4, r1
 800e238:	2001      	movs	r0, #1
 800e23a:	e7a8      	b.n	800e18e <_vfiprintf_r+0xfe>
 800e23c:	2300      	movs	r3, #0
 800e23e:	3401      	adds	r4, #1
 800e240:	9305      	str	r3, [sp, #20]
 800e242:	4619      	mov	r1, r3
 800e244:	f04f 0c0a 	mov.w	ip, #10
 800e248:	4620      	mov	r0, r4
 800e24a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e24e:	3a30      	subs	r2, #48	@ 0x30
 800e250:	2a09      	cmp	r2, #9
 800e252:	d903      	bls.n	800e25c <_vfiprintf_r+0x1cc>
 800e254:	2b00      	cmp	r3, #0
 800e256:	d0c6      	beq.n	800e1e6 <_vfiprintf_r+0x156>
 800e258:	9105      	str	r1, [sp, #20]
 800e25a:	e7c4      	b.n	800e1e6 <_vfiprintf_r+0x156>
 800e25c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e260:	4604      	mov	r4, r0
 800e262:	2301      	movs	r3, #1
 800e264:	e7f0      	b.n	800e248 <_vfiprintf_r+0x1b8>
 800e266:	ab03      	add	r3, sp, #12
 800e268:	9300      	str	r3, [sp, #0]
 800e26a:	462a      	mov	r2, r5
 800e26c:	4b12      	ldr	r3, [pc, #72]	@ (800e2b8 <_vfiprintf_r+0x228>)
 800e26e:	a904      	add	r1, sp, #16
 800e270:	4630      	mov	r0, r6
 800e272:	f7fd fbbd 	bl	800b9f0 <_printf_float>
 800e276:	4607      	mov	r7, r0
 800e278:	1c78      	adds	r0, r7, #1
 800e27a:	d1d6      	bne.n	800e22a <_vfiprintf_r+0x19a>
 800e27c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e27e:	07d9      	lsls	r1, r3, #31
 800e280:	d405      	bmi.n	800e28e <_vfiprintf_r+0x1fe>
 800e282:	89ab      	ldrh	r3, [r5, #12]
 800e284:	059a      	lsls	r2, r3, #22
 800e286:	d402      	bmi.n	800e28e <_vfiprintf_r+0x1fe>
 800e288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e28a:	f7fe f927 	bl	800c4dc <__retarget_lock_release_recursive>
 800e28e:	89ab      	ldrh	r3, [r5, #12]
 800e290:	065b      	lsls	r3, r3, #25
 800e292:	f53f af1f 	bmi.w	800e0d4 <_vfiprintf_r+0x44>
 800e296:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e298:	e71e      	b.n	800e0d8 <_vfiprintf_r+0x48>
 800e29a:	ab03      	add	r3, sp, #12
 800e29c:	9300      	str	r3, [sp, #0]
 800e29e:	462a      	mov	r2, r5
 800e2a0:	4b05      	ldr	r3, [pc, #20]	@ (800e2b8 <_vfiprintf_r+0x228>)
 800e2a2:	a904      	add	r1, sp, #16
 800e2a4:	4630      	mov	r0, r6
 800e2a6:	f7fd fe3b 	bl	800bf20 <_printf_i>
 800e2aa:	e7e4      	b.n	800e276 <_vfiprintf_r+0x1e6>
 800e2ac:	0800e86e 	.word	0x0800e86e
 800e2b0:	0800e878 	.word	0x0800e878
 800e2b4:	0800b9f1 	.word	0x0800b9f1
 800e2b8:	0800e06d 	.word	0x0800e06d
 800e2bc:	0800e874 	.word	0x0800e874

0800e2c0 <__swbuf_r>:
 800e2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2c2:	460e      	mov	r6, r1
 800e2c4:	4614      	mov	r4, r2
 800e2c6:	4605      	mov	r5, r0
 800e2c8:	b118      	cbz	r0, 800e2d2 <__swbuf_r+0x12>
 800e2ca:	6a03      	ldr	r3, [r0, #32]
 800e2cc:	b90b      	cbnz	r3, 800e2d2 <__swbuf_r+0x12>
 800e2ce:	f7fd ffd1 	bl	800c274 <__sinit>
 800e2d2:	69a3      	ldr	r3, [r4, #24]
 800e2d4:	60a3      	str	r3, [r4, #8]
 800e2d6:	89a3      	ldrh	r3, [r4, #12]
 800e2d8:	071a      	lsls	r2, r3, #28
 800e2da:	d501      	bpl.n	800e2e0 <__swbuf_r+0x20>
 800e2dc:	6923      	ldr	r3, [r4, #16]
 800e2de:	b943      	cbnz	r3, 800e2f2 <__swbuf_r+0x32>
 800e2e0:	4621      	mov	r1, r4
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	f000 f82a 	bl	800e33c <__swsetup_r>
 800e2e8:	b118      	cbz	r0, 800e2f2 <__swbuf_r+0x32>
 800e2ea:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e2ee:	4638      	mov	r0, r7
 800e2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2f2:	6823      	ldr	r3, [r4, #0]
 800e2f4:	6922      	ldr	r2, [r4, #16]
 800e2f6:	1a98      	subs	r0, r3, r2
 800e2f8:	6963      	ldr	r3, [r4, #20]
 800e2fa:	b2f6      	uxtb	r6, r6
 800e2fc:	4283      	cmp	r3, r0
 800e2fe:	4637      	mov	r7, r6
 800e300:	dc05      	bgt.n	800e30e <__swbuf_r+0x4e>
 800e302:	4621      	mov	r1, r4
 800e304:	4628      	mov	r0, r5
 800e306:	f7ff fd99 	bl	800de3c <_fflush_r>
 800e30a:	2800      	cmp	r0, #0
 800e30c:	d1ed      	bne.n	800e2ea <__swbuf_r+0x2a>
 800e30e:	68a3      	ldr	r3, [r4, #8]
 800e310:	3b01      	subs	r3, #1
 800e312:	60a3      	str	r3, [r4, #8]
 800e314:	6823      	ldr	r3, [r4, #0]
 800e316:	1c5a      	adds	r2, r3, #1
 800e318:	6022      	str	r2, [r4, #0]
 800e31a:	701e      	strb	r6, [r3, #0]
 800e31c:	6962      	ldr	r2, [r4, #20]
 800e31e:	1c43      	adds	r3, r0, #1
 800e320:	429a      	cmp	r2, r3
 800e322:	d004      	beq.n	800e32e <__swbuf_r+0x6e>
 800e324:	89a3      	ldrh	r3, [r4, #12]
 800e326:	07db      	lsls	r3, r3, #31
 800e328:	d5e1      	bpl.n	800e2ee <__swbuf_r+0x2e>
 800e32a:	2e0a      	cmp	r6, #10
 800e32c:	d1df      	bne.n	800e2ee <__swbuf_r+0x2e>
 800e32e:	4621      	mov	r1, r4
 800e330:	4628      	mov	r0, r5
 800e332:	f7ff fd83 	bl	800de3c <_fflush_r>
 800e336:	2800      	cmp	r0, #0
 800e338:	d0d9      	beq.n	800e2ee <__swbuf_r+0x2e>
 800e33a:	e7d6      	b.n	800e2ea <__swbuf_r+0x2a>

0800e33c <__swsetup_r>:
 800e33c:	b538      	push	{r3, r4, r5, lr}
 800e33e:	4b29      	ldr	r3, [pc, #164]	@ (800e3e4 <__swsetup_r+0xa8>)
 800e340:	4605      	mov	r5, r0
 800e342:	6818      	ldr	r0, [r3, #0]
 800e344:	460c      	mov	r4, r1
 800e346:	b118      	cbz	r0, 800e350 <__swsetup_r+0x14>
 800e348:	6a03      	ldr	r3, [r0, #32]
 800e34a:	b90b      	cbnz	r3, 800e350 <__swsetup_r+0x14>
 800e34c:	f7fd ff92 	bl	800c274 <__sinit>
 800e350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e354:	0719      	lsls	r1, r3, #28
 800e356:	d422      	bmi.n	800e39e <__swsetup_r+0x62>
 800e358:	06da      	lsls	r2, r3, #27
 800e35a:	d407      	bmi.n	800e36c <__swsetup_r+0x30>
 800e35c:	2209      	movs	r2, #9
 800e35e:	602a      	str	r2, [r5, #0]
 800e360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e364:	81a3      	strh	r3, [r4, #12]
 800e366:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e36a:	e033      	b.n	800e3d4 <__swsetup_r+0x98>
 800e36c:	0758      	lsls	r0, r3, #29
 800e36e:	d512      	bpl.n	800e396 <__swsetup_r+0x5a>
 800e370:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e372:	b141      	cbz	r1, 800e386 <__swsetup_r+0x4a>
 800e374:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e378:	4299      	cmp	r1, r3
 800e37a:	d002      	beq.n	800e382 <__swsetup_r+0x46>
 800e37c:	4628      	mov	r0, r5
 800e37e:	f7fe ff07 	bl	800d190 <_free_r>
 800e382:	2300      	movs	r3, #0
 800e384:	6363      	str	r3, [r4, #52]	@ 0x34
 800e386:	89a3      	ldrh	r3, [r4, #12]
 800e388:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e38c:	81a3      	strh	r3, [r4, #12]
 800e38e:	2300      	movs	r3, #0
 800e390:	6063      	str	r3, [r4, #4]
 800e392:	6923      	ldr	r3, [r4, #16]
 800e394:	6023      	str	r3, [r4, #0]
 800e396:	89a3      	ldrh	r3, [r4, #12]
 800e398:	f043 0308 	orr.w	r3, r3, #8
 800e39c:	81a3      	strh	r3, [r4, #12]
 800e39e:	6923      	ldr	r3, [r4, #16]
 800e3a0:	b94b      	cbnz	r3, 800e3b6 <__swsetup_r+0x7a>
 800e3a2:	89a3      	ldrh	r3, [r4, #12]
 800e3a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e3a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3ac:	d003      	beq.n	800e3b6 <__swsetup_r+0x7a>
 800e3ae:	4621      	mov	r1, r4
 800e3b0:	4628      	mov	r0, r5
 800e3b2:	f000 f883 	bl	800e4bc <__smakebuf_r>
 800e3b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3ba:	f013 0201 	ands.w	r2, r3, #1
 800e3be:	d00a      	beq.n	800e3d6 <__swsetup_r+0x9a>
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	60a2      	str	r2, [r4, #8]
 800e3c4:	6962      	ldr	r2, [r4, #20]
 800e3c6:	4252      	negs	r2, r2
 800e3c8:	61a2      	str	r2, [r4, #24]
 800e3ca:	6922      	ldr	r2, [r4, #16]
 800e3cc:	b942      	cbnz	r2, 800e3e0 <__swsetup_r+0xa4>
 800e3ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e3d2:	d1c5      	bne.n	800e360 <__swsetup_r+0x24>
 800e3d4:	bd38      	pop	{r3, r4, r5, pc}
 800e3d6:	0799      	lsls	r1, r3, #30
 800e3d8:	bf58      	it	pl
 800e3da:	6962      	ldrpl	r2, [r4, #20]
 800e3dc:	60a2      	str	r2, [r4, #8]
 800e3de:	e7f4      	b.n	800e3ca <__swsetup_r+0x8e>
 800e3e0:	2000      	movs	r0, #0
 800e3e2:	e7f7      	b.n	800e3d4 <__swsetup_r+0x98>
 800e3e4:	20000110 	.word	0x20000110

0800e3e8 <_raise_r>:
 800e3e8:	291f      	cmp	r1, #31
 800e3ea:	b538      	push	{r3, r4, r5, lr}
 800e3ec:	4605      	mov	r5, r0
 800e3ee:	460c      	mov	r4, r1
 800e3f0:	d904      	bls.n	800e3fc <_raise_r+0x14>
 800e3f2:	2316      	movs	r3, #22
 800e3f4:	6003      	str	r3, [r0, #0]
 800e3f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e3fa:	bd38      	pop	{r3, r4, r5, pc}
 800e3fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e3fe:	b112      	cbz	r2, 800e406 <_raise_r+0x1e>
 800e400:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e404:	b94b      	cbnz	r3, 800e41a <_raise_r+0x32>
 800e406:	4628      	mov	r0, r5
 800e408:	f000 f830 	bl	800e46c <_getpid_r>
 800e40c:	4622      	mov	r2, r4
 800e40e:	4601      	mov	r1, r0
 800e410:	4628      	mov	r0, r5
 800e412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e416:	f000 b817 	b.w	800e448 <_kill_r>
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d00a      	beq.n	800e434 <_raise_r+0x4c>
 800e41e:	1c59      	adds	r1, r3, #1
 800e420:	d103      	bne.n	800e42a <_raise_r+0x42>
 800e422:	2316      	movs	r3, #22
 800e424:	6003      	str	r3, [r0, #0]
 800e426:	2001      	movs	r0, #1
 800e428:	e7e7      	b.n	800e3fa <_raise_r+0x12>
 800e42a:	2100      	movs	r1, #0
 800e42c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e430:	4620      	mov	r0, r4
 800e432:	4798      	blx	r3
 800e434:	2000      	movs	r0, #0
 800e436:	e7e0      	b.n	800e3fa <_raise_r+0x12>

0800e438 <raise>:
 800e438:	4b02      	ldr	r3, [pc, #8]	@ (800e444 <raise+0xc>)
 800e43a:	4601      	mov	r1, r0
 800e43c:	6818      	ldr	r0, [r3, #0]
 800e43e:	f7ff bfd3 	b.w	800e3e8 <_raise_r>
 800e442:	bf00      	nop
 800e444:	20000110 	.word	0x20000110

0800e448 <_kill_r>:
 800e448:	b538      	push	{r3, r4, r5, lr}
 800e44a:	4d07      	ldr	r5, [pc, #28]	@ (800e468 <_kill_r+0x20>)
 800e44c:	2300      	movs	r3, #0
 800e44e:	4604      	mov	r4, r0
 800e450:	4608      	mov	r0, r1
 800e452:	4611      	mov	r1, r2
 800e454:	602b      	str	r3, [r5, #0]
 800e456:	f7f3 ff73 	bl	8002340 <_kill>
 800e45a:	1c43      	adds	r3, r0, #1
 800e45c:	d102      	bne.n	800e464 <_kill_r+0x1c>
 800e45e:	682b      	ldr	r3, [r5, #0]
 800e460:	b103      	cbz	r3, 800e464 <_kill_r+0x1c>
 800e462:	6023      	str	r3, [r4, #0]
 800e464:	bd38      	pop	{r3, r4, r5, pc}
 800e466:	bf00      	nop
 800e468:	2000220c 	.word	0x2000220c

0800e46c <_getpid_r>:
 800e46c:	f7f3 bf60 	b.w	8002330 <_getpid>

0800e470 <__swhatbuf_r>:
 800e470:	b570      	push	{r4, r5, r6, lr}
 800e472:	460c      	mov	r4, r1
 800e474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e478:	2900      	cmp	r1, #0
 800e47a:	b096      	sub	sp, #88	@ 0x58
 800e47c:	4615      	mov	r5, r2
 800e47e:	461e      	mov	r6, r3
 800e480:	da0d      	bge.n	800e49e <__swhatbuf_r+0x2e>
 800e482:	89a3      	ldrh	r3, [r4, #12]
 800e484:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e488:	f04f 0100 	mov.w	r1, #0
 800e48c:	bf14      	ite	ne
 800e48e:	2340      	movne	r3, #64	@ 0x40
 800e490:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e494:	2000      	movs	r0, #0
 800e496:	6031      	str	r1, [r6, #0]
 800e498:	602b      	str	r3, [r5, #0]
 800e49a:	b016      	add	sp, #88	@ 0x58
 800e49c:	bd70      	pop	{r4, r5, r6, pc}
 800e49e:	466a      	mov	r2, sp
 800e4a0:	f000 f848 	bl	800e534 <_fstat_r>
 800e4a4:	2800      	cmp	r0, #0
 800e4a6:	dbec      	blt.n	800e482 <__swhatbuf_r+0x12>
 800e4a8:	9901      	ldr	r1, [sp, #4]
 800e4aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e4ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e4b2:	4259      	negs	r1, r3
 800e4b4:	4159      	adcs	r1, r3
 800e4b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4ba:	e7eb      	b.n	800e494 <__swhatbuf_r+0x24>

0800e4bc <__smakebuf_r>:
 800e4bc:	898b      	ldrh	r3, [r1, #12]
 800e4be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4c0:	079d      	lsls	r5, r3, #30
 800e4c2:	4606      	mov	r6, r0
 800e4c4:	460c      	mov	r4, r1
 800e4c6:	d507      	bpl.n	800e4d8 <__smakebuf_r+0x1c>
 800e4c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e4cc:	6023      	str	r3, [r4, #0]
 800e4ce:	6123      	str	r3, [r4, #16]
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	6163      	str	r3, [r4, #20]
 800e4d4:	b003      	add	sp, #12
 800e4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4d8:	ab01      	add	r3, sp, #4
 800e4da:	466a      	mov	r2, sp
 800e4dc:	f7ff ffc8 	bl	800e470 <__swhatbuf_r>
 800e4e0:	9f00      	ldr	r7, [sp, #0]
 800e4e2:	4605      	mov	r5, r0
 800e4e4:	4639      	mov	r1, r7
 800e4e6:	4630      	mov	r0, r6
 800e4e8:	f7fe fec6 	bl	800d278 <_malloc_r>
 800e4ec:	b948      	cbnz	r0, 800e502 <__smakebuf_r+0x46>
 800e4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4f2:	059a      	lsls	r2, r3, #22
 800e4f4:	d4ee      	bmi.n	800e4d4 <__smakebuf_r+0x18>
 800e4f6:	f023 0303 	bic.w	r3, r3, #3
 800e4fa:	f043 0302 	orr.w	r3, r3, #2
 800e4fe:	81a3      	strh	r3, [r4, #12]
 800e500:	e7e2      	b.n	800e4c8 <__smakebuf_r+0xc>
 800e502:	89a3      	ldrh	r3, [r4, #12]
 800e504:	6020      	str	r0, [r4, #0]
 800e506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e50a:	81a3      	strh	r3, [r4, #12]
 800e50c:	9b01      	ldr	r3, [sp, #4]
 800e50e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e512:	b15b      	cbz	r3, 800e52c <__smakebuf_r+0x70>
 800e514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e518:	4630      	mov	r0, r6
 800e51a:	f000 f81d 	bl	800e558 <_isatty_r>
 800e51e:	b128      	cbz	r0, 800e52c <__smakebuf_r+0x70>
 800e520:	89a3      	ldrh	r3, [r4, #12]
 800e522:	f023 0303 	bic.w	r3, r3, #3
 800e526:	f043 0301 	orr.w	r3, r3, #1
 800e52a:	81a3      	strh	r3, [r4, #12]
 800e52c:	89a3      	ldrh	r3, [r4, #12]
 800e52e:	431d      	orrs	r5, r3
 800e530:	81a5      	strh	r5, [r4, #12]
 800e532:	e7cf      	b.n	800e4d4 <__smakebuf_r+0x18>

0800e534 <_fstat_r>:
 800e534:	b538      	push	{r3, r4, r5, lr}
 800e536:	4d07      	ldr	r5, [pc, #28]	@ (800e554 <_fstat_r+0x20>)
 800e538:	2300      	movs	r3, #0
 800e53a:	4604      	mov	r4, r0
 800e53c:	4608      	mov	r0, r1
 800e53e:	4611      	mov	r1, r2
 800e540:	602b      	str	r3, [r5, #0]
 800e542:	f7f3 ff5d 	bl	8002400 <_fstat>
 800e546:	1c43      	adds	r3, r0, #1
 800e548:	d102      	bne.n	800e550 <_fstat_r+0x1c>
 800e54a:	682b      	ldr	r3, [r5, #0]
 800e54c:	b103      	cbz	r3, 800e550 <_fstat_r+0x1c>
 800e54e:	6023      	str	r3, [r4, #0]
 800e550:	bd38      	pop	{r3, r4, r5, pc}
 800e552:	bf00      	nop
 800e554:	2000220c 	.word	0x2000220c

0800e558 <_isatty_r>:
 800e558:	b538      	push	{r3, r4, r5, lr}
 800e55a:	4d06      	ldr	r5, [pc, #24]	@ (800e574 <_isatty_r+0x1c>)
 800e55c:	2300      	movs	r3, #0
 800e55e:	4604      	mov	r4, r0
 800e560:	4608      	mov	r0, r1
 800e562:	602b      	str	r3, [r5, #0]
 800e564:	f7f3 ff5c 	bl	8002420 <_isatty>
 800e568:	1c43      	adds	r3, r0, #1
 800e56a:	d102      	bne.n	800e572 <_isatty_r+0x1a>
 800e56c:	682b      	ldr	r3, [r5, #0]
 800e56e:	b103      	cbz	r3, 800e572 <_isatty_r+0x1a>
 800e570:	6023      	str	r3, [r4, #0]
 800e572:	bd38      	pop	{r3, r4, r5, pc}
 800e574:	2000220c 	.word	0x2000220c

0800e578 <_init>:
 800e578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e57a:	bf00      	nop
 800e57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e57e:	bc08      	pop	{r3}
 800e580:	469e      	mov	lr, r3
 800e582:	4770      	bx	lr

0800e584 <_fini>:
 800e584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e586:	bf00      	nop
 800e588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e58a:	bc08      	pop	{r3}
 800e58c:	469e      	mov	lr, r3
 800e58e:	4770      	bx	lr
